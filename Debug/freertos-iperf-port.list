
freertos-iperf-port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9cc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021fc  0800fc6c  0800fc6c  00010c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011e68  08011e68  00012e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011e70  08011e70  00012e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011e74  08011e74  00012e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000098  20000000  08011e78  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001320  20000098  08011f10  00013098  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200013b8  08011f10  000133b8  2**0
                  ALLOC
  9 .ethernet_data 00078220  24000000  24000000  00014000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ram3_data    00010000  38000000  38000000  0008d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ARM.attributes 0000002e  00000000  00000000  0009d000  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046d3d  00000000  00000000  0009d02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008676  00000000  00000000  000e3d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001f82b  00000000  00000000  000ec3e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ba0  00000000  00000000  0010bc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000035ab  00000000  00000000  0010d7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00040cc2  00000000  00000000  00110d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003fce2  00000000  00000000  00151a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001803e9  00000000  00000000  001916ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00311ae8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060c8  00000000  00000000  00311b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  00317bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000098 	.word	0x20000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fc54 	.word	0x0800fc54

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000009c 	.word	0x2000009c
 80002dc:	0800fc54 	.word	0x0800fc54

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <prvServerWorkTask>:
/*-----------------------------------------------------------*/

#define CONTINUOUS_PING	0

static void prvServerWorkTask( void *pvParameters )
{
 80006a0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80006a4:	b0c3      	sub	sp, #268	@ 0x10c
 80006a6:	f8df 822c 	ldr.w	r8, [pc, #556]	@ 80008d4 <prvServerWorkTask+0x234>
 80006aa:	4d7b      	ldr	r5, [pc, #492]	@ (8000898 <prvServerWorkTask+0x1f8>)
 80006ac:	af08      	add	r7, sp, #32
 80006ae:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 80008d8 <prvServerWorkTask+0x238>
 80006b2:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80008dc <prvServerWorkTask+0x23c>
	TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 100U );
#endif	/* ( CONTINUOUS_PING != 0 ) */

	for( ;; )
	{
		vTaskDelay( 10U );
 80006b6:	200a      	movs	r0, #10
 80006b8:	f008 fe94 	bl	80093e4 <vTaskDelay>
		if( xDoCreateSockets != pdFALSE )
 80006bc:	f8d8 3000 	ldr.w	r3, [r8]
 80006c0:	b133      	cbz	r3, 80006d0 <prvServerWorkTask+0x30>
		{
			xDoCreateSockets = pdFALSE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	f8c8 3000 	str.w	r3, [r8]
			/* Start a new task to fetch logging lines and send them out.
			See FreeRTOSConfig.h for the configuration of UDP logging. */
			vUDPLoggingTaskCreate();
 80006c8:	f00c fbfa 	bl	800cec0 <vUDPLoggingTaskCreate>
			vIPerfInstall();
 80006cc:	f00d f97a 	bl	800d9c4 <vIPerfInstall>
static BaseType_t run_command_line()
{
char  pcBuffer[ 92 ];
BaseType_t xCount;
struct freertos_sockaddr xSourceAddress;
socklen_t xSourceAddressLength = sizeof( xSourceAddress );
 80006d0:	2308      	movs	r3, #8
 80006d2:	9308      	str	r3, [sp, #32]
xSocket_t xSocket = xLoggingGetSocket();
 80006d4:	f00c fc0e 	bl	800cef4 <xLoggingGetSocket>
static NetworkBufferDescriptor_t *pxDescriptor = NULL;

	if( xSocket == NULL )
 80006d8:	4604      	mov	r4, r0
 80006da:	2800      	cmp	r0, #0
 80006dc:	d0eb      	beq.n	80006b6 <prvServerWorkTask+0x16>
		return 0;
	}

	#if( USE_ZERO_COPY )
	{
		if( pxDescriptor != NULL )
 80006de:	6828      	ldr	r0, [r5, #0]
 80006e0:	b118      	cbz	r0, 80006ea <prvServerWorkTask+0x4a>
		{
			vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 80006e2:	f006 f991 	bl	8006a08 <vReleaseNetworkBufferAndDescriptor>
			pxDescriptor = NULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	602b      	str	r3, [r5, #0]
		}
		char  *ppcBuffer;
		xCount = FreeRTOS_recvfrom( xSocket, ( void * )&ppcBuffer, sizeof( pcBuffer ) - 1, FREERTOS_MSG_DONTWAIT | FREERTOS_ZERO_COPY, &xSourceAddress, &xSourceAddressLength );
 80006ea:	ab09      	add	r3, sp, #36	@ 0x24
 80006ec:	225b      	movs	r2, #91	@ 0x5b
 80006ee:	4620      	mov	r0, r4
 80006f0:	a922      	add	r1, sp, #136	@ 0x88
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2311      	movs	r3, #17
 80006f6:	9701      	str	r7, [sp, #4]
 80006f8:	f002 f9aa 	bl	8002a50 <FreeRTOS_recvfrom>
		if( xCount > 0 )
 80006fc:	1e02      	subs	r2, r0, #0
 80006fe:	ddda      	ble.n	80006b6 <prvServerWorkTask+0x16>
		{
			if( ( ( size_t ) xCount ) > ( sizeof pcBuffer - 1 ) )
 8000700:	2a5b      	cmp	r2, #91	@ 0x5b
			{
				xCount = ( BaseType_t ) ( sizeof pcBuffer - 1 );
			}
			memcpy( pcBuffer, ppcBuffer, xCount );
			pcBuffer[ xCount ] = '\0';
 8000702:	ab42      	add	r3, sp, #264	@ 0x108
			memcpy( pcBuffer, ppcBuffer, xCount );
 8000704:	f8dd b088 	ldr.w	fp, [sp, #136]	@ 0x88
			pcBuffer[ xCount ] = '\0';
 8000708:	f04f 0600 	mov.w	r6, #0
			if( ( ( size_t ) xCount ) > ( sizeof pcBuffer - 1 ) )
 800070c:	bfa8      	it	ge
 800070e:	225b      	movge	r2, #91	@ 0x5b
			memcpy( pcBuffer, ppcBuffer, xCount );
 8000710:	a80b      	add	r0, sp, #44	@ 0x2c
 8000712:	4659      	mov	r1, fp
			pcBuffer[ xCount ] = '\0';
 8000714:	189c      	adds	r4, r3, r2
			memcpy( pcBuffer, ppcBuffer, xCount );
 8000716:	f00d f983 	bl	800da20 <memcpy>
			pxDescriptor = pxUDPPayloadBuffer_to_NetworkBuffer( ( const void * ) ppcBuffer );
 800071a:	4658      	mov	r0, fp
			pcBuffer[ xCount ] = '\0';
 800071c:	f804 6cdc 	strb.w	r6, [r4, #-220]
			pxDescriptor = pxUDPPayloadBuffer_to_NetworkBuffer( ( const void * ) ppcBuffer );
 8000720:	f001 fb4c 	bl	8001dbc <pxUDPPayloadBuffer_to_NetworkBuffer>
	#endif
	if( xCount <= 0 )
	{
		return 0;
	}
	pcBuffer[ xCount ] = 0;
 8000724:	f804 6cdc 	strb.w	r6, [r4, #-220]
	if( strncmp( pcBuffer, "ver", 4 ) == 0 )
 8000728:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800072a:	4a5c      	ldr	r2, [pc, #368]	@ (800089c <prvServerWorkTask+0x1fc>)
			pxDescriptor = pxUDPPayloadBuffer_to_NetworkBuffer( ( const void * ) ppcBuffer );
 800072c:	6028      	str	r0, [r5, #0]
	if( strncmp( pcBuffer, "ver", 4 ) == 0 )
 800072e:	4293      	cmp	r3, r2
 8000730:	d01e      	beq.n	8000770 <prvServerWorkTask+0xd0>
	{
		lUDPLoggingPrintf( "Verbose level %d\n", verboseLevel );
		lUDPLoggingPrintf( "CPU sped %lu\n", configCPU_CLOCK_HZ );
	}
	else if( strncmp( pcBuffer, "hrtime", 6 ) == 0 )
 8000732:	4a5b      	ldr	r2, [pc, #364]	@ (80008a0 <prvServerWorkTask+0x200>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d026      	beq.n	8000786 <prvServerWorkTask+0xe6>
			( uint32_t ) difTime,
			( uint32_t ) ulDifTime );
		lastTime = curTime;
		ulLastTime = ulCurTime;
	}
	else if( memcmp( pcBuffer, "random", 6 ) == 0 )
 8000738:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800073a:	4a5a      	ldr	r2, [pc, #360]	@ (80008a4 <prvServerWorkTask+0x204>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d049      	beq.n	80007d4 <prvServerWorkTask+0x134>
				ulFrequencies[ ulIndex + 7 ] ) );
		}
		FreeRTOS_printf( ( "\n" ) );
	}
#if ( USE_IPERF != 0 )
    else if( strncmp( pcBuffer, "iperf", 5 ) == 0 )
 8000740:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000742:	4a59      	ldr	r2, [pc, #356]	@ (80008a8 <prvServerWorkTask+0x208>)
 8000744:	4293      	cmp	r3, r2
 8000746:	f000 808a 	beq.w	800085e <prvServerWorkTask+0x1be>
    {
        FreeRTOS_printf( ( "iperf is already installed.\n" ) );
    }
#endif /* ( USE_IPERF != 0 ) */
	else if( memcmp( pcBuffer, "mem", 3 ) == 0 )
 800074a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800074e:	f246 536d 	movw	r3, #25965	@ 0x656d
 8000752:	429a      	cmp	r2, r3
 8000754:	f000 808c 	beq.w	8000870 <prvServerWorkTask+0x1d0>
		}
	}
#endif /* USE_LOG_EVENT */
	else
	{
		FreeRTOS_printf( ( "Don't know: %s\n", pcBuffer ) );
 8000758:	a90b      	add	r1, sp, #44	@ 0x2c
 800075a:	4854      	ldr	r0, [pc, #336]	@ (80008ac <prvServerWorkTask+0x20c>)
 800075c:	f00c fbd6 	bl	800cf0c <lUDPLoggingPrintf>
		vTaskDelay( 10U );
 8000760:	200a      	movs	r0, #10
 8000762:	f008 fe3f 	bl	80093e4 <vTaskDelay>
		if( xDoCreateSockets != pdFALSE )
 8000766:	f8d8 3000 	ldr.w	r3, [r8]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1a9      	bne.n	80006c2 <prvServerWorkTask+0x22>
 800076e:	e7af      	b.n	80006d0 <prvServerWorkTask+0x30>
		lUDPLoggingPrintf( "Verbose level %d\n", verboseLevel );
 8000770:	4b4f      	ldr	r3, [pc, #316]	@ (80008b0 <prvServerWorkTask+0x210>)
 8000772:	4850      	ldr	r0, [pc, #320]	@ (80008b4 <prvServerWorkTask+0x214>)
 8000774:	6819      	ldr	r1, [r3, #0]
 8000776:	f00c fbc9 	bl	800cf0c <lUDPLoggingPrintf>
		lUDPLoggingPrintf( "CPU sped %lu\n", configCPU_CLOCK_HZ );
 800077a:	4b4f      	ldr	r3, [pc, #316]	@ (80008b8 <prvServerWorkTask+0x218>)
 800077c:	484f      	ldr	r0, [pc, #316]	@ (80008bc <prvServerWorkTask+0x21c>)
 800077e:	6819      	ldr	r1, [r3, #0]
 8000780:	f00c fbc4 	bl	800cf0c <lUDPLoggingPrintf>
 8000784:	e797      	b.n	80006b6 <prvServerWorkTask+0x16>
	else if( strncmp( pcBuffer, "hrtime", 6 ) == 0 )
 8000786:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 800078a:	f246 536d 	movw	r3, #25965	@ 0x656d
 800078e:	429a      	cmp	r2, r3
 8000790:	d1d2      	bne.n	8000738 <prvServerWorkTask+0x98>
		uint64_t curTime = ullGetHighResolutionTime();
 8000792:	f00c fd61 	bl	800d258 <ullGetHighResolutionTime>
		uint32_t difTime = ( uint32_t ) ( ( curTime - lastTime ) / 1000U );
 8000796:	f8d9 3000 	ldr.w	r3, [r9]
		uint64_t curTime = ullGetHighResolutionTime();
 800079a:	468b      	mov	fp, r1
 800079c:	4604      	mov	r4, r0
		uint32_t difTime = ( uint32_t ) ( ( curTime - lastTime ) / 1000U );
 800079e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80007a2:	1ac0      	subs	r0, r0, r3
 80007a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007a8:	f04f 0300 	mov.w	r3, #0
 80007ac:	eb6b 0101 	sbc.w	r1, fp, r1
 80007b0:	f7ff fdfe 	bl	80003b0 <__aeabi_uldivmod>
 80007b4:	4606      	mov	r6, r0
		TickType_t ulCurTime = xTaskGetTickCount();
 80007b6:	f008 fca9 	bl	800910c <xTaskGetTickCount>
		TickType_t ulDifTime = ulCurTime - ulLastTime;
 80007ba:	f8da 2000 	ldr.w	r2, [sl]
		lUDPLoggingPrintf( "hr_time %lu  FreeRTOS %u\n",
 80007be:	4631      	mov	r1, r6
		TickType_t ulCurTime = xTaskGetTickCount();
 80007c0:	4606      	mov	r6, r0
		lUDPLoggingPrintf( "hr_time %lu  FreeRTOS %u\n",
 80007c2:	1a82      	subs	r2, r0, r2
 80007c4:	483e      	ldr	r0, [pc, #248]	@ (80008c0 <prvServerWorkTask+0x220>)
 80007c6:	f00c fba1 	bl	800cf0c <lUDPLoggingPrintf>
		ulLastTime = ulCurTime;
 80007ca:	f8ca 6000 	str.w	r6, [sl]
		lastTime = curTime;
 80007ce:	e9c9 4b00 	strd	r4, fp, [r9]
		ulLastTime = ulCurTime;
 80007d2:	e770      	b.n	80006b6 <prvServerWorkTask+0x16>
	else if( memcmp( pcBuffer, "random", 6 ) == 0 )
 80007d4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 80007d8:	f646 536f 	movw	r3, #28015	@ 0x6d6f
 80007dc:	429a      	cmp	r2, r3
 80007de:	d1af      	bne.n	8000740 <prvServerWorkTask+0xa0>
		memset( ulFrequencies, 0, sizeof ulFrequencies );
 80007e0:	f644 6420 	movw	r4, #20000	@ 0x4e20
 80007e4:	ae42      	add	r6, sp, #264	@ 0x108
 80007e6:	2280      	movs	r2, #128	@ 0x80
 80007e8:	2100      	movs	r1, #0
 80007ea:	a822      	add	r0, sp, #136	@ 0x88
 80007ec:	f00d f9ec 	bl	800dbc8 <memset>
			ulValue = rand();
 80007f0:	f10d 0b88 	add.w	fp, sp, #136	@ 0x88
 80007f4:	f00d fd10 	bl	800e218 <rand>
 80007f8:	465a      	mov	r2, fp
				if( ( ulValue & 0x80000000U ) != 0 )
 80007fa:	2800      	cmp	r0, #0
				ulValue <<= 1;
 80007fc:	ea4f 0040 	mov.w	r0, r0, lsl #1
				if( ( ulValue & 0x80000000U ) != 0 )
 8000800:	da02      	bge.n	8000808 <prvServerWorkTask+0x168>
					ulFrequencies[ ulIndex ]++;
 8000802:	6813      	ldr	r3, [r2, #0]
 8000804:	3301      	adds	r3, #1
 8000806:	6013      	str	r3, [r2, #0]
			for( ulIndex = 0; ulIndex < ARRAY_SIZE( ulFrequencies ); ulIndex++ )
 8000808:	3204      	adds	r2, #4
 800080a:	42b2      	cmp	r2, r6
 800080c:	d1f5      	bne.n	80007fa <prvServerWorkTask+0x15a>
		for( ulCount = 0U; ulCount < 20000; ulCount++ )
 800080e:	3c01      	subs	r4, #1
 8000810:	d1ee      	bne.n	80007f0 <prvServerWorkTask+0x150>
			FreeRTOS_printf( ( "%2d - %2d : %6u %6u %6u %6u %6u %6u %6u %6u\n",
 8000812:	4e2c      	ldr	r6, [pc, #176]	@ (80008c4 <prvServerWorkTask+0x224>)
 8000814:	f8db 301c 	ldr.w	r3, [fp, #28]
 8000818:	1de2      	adds	r2, r4, #7
 800081a:	4621      	mov	r1, r4
		for( ulIndex = 0; ulIndex < ARRAY_SIZE( ulFrequencies ); ulIndex += 8 )
 800081c:	3408      	adds	r4, #8
			FreeRTOS_printf( ( "%2d - %2d : %6u %6u %6u %6u %6u %6u %6u %6u\n",
 800081e:	9306      	str	r3, [sp, #24]
 8000820:	4630      	mov	r0, r6
 8000822:	f8db 3018 	ldr.w	r3, [fp, #24]
		for( ulIndex = 0; ulIndex < ARRAY_SIZE( ulFrequencies ); ulIndex += 8 )
 8000826:	f10b 0b20 	add.w	fp, fp, #32
			FreeRTOS_printf( ( "%2d - %2d : %6u %6u %6u %6u %6u %6u %6u %6u\n",
 800082a:	9305      	str	r3, [sp, #20]
 800082c:	f85b 3c0c 	ldr.w	r3, [fp, #-12]
 8000830:	9304      	str	r3, [sp, #16]
 8000832:	f85b 3c10 	ldr.w	r3, [fp, #-16]
 8000836:	9303      	str	r3, [sp, #12]
 8000838:	f85b 3c14 	ldr.w	r3, [fp, #-20]
 800083c:	9302      	str	r3, [sp, #8]
 800083e:	f85b 3c18 	ldr.w	r3, [fp, #-24]
 8000842:	9301      	str	r3, [sp, #4]
 8000844:	f85b 3c1c 	ldr.w	r3, [fp, #-28]
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	f85b 3c20 	ldr.w	r3, [fp, #-32]
 800084e:	f00c fb5d 	bl	800cf0c <lUDPLoggingPrintf>
		for( ulIndex = 0; ulIndex < ARRAY_SIZE( ulFrequencies ); ulIndex += 8 )
 8000852:	2c20      	cmp	r4, #32
 8000854:	d1de      	bne.n	8000814 <prvServerWorkTask+0x174>
		FreeRTOS_printf( ( "\n" ) );
 8000856:	481c      	ldr	r0, [pc, #112]	@ (80008c8 <prvServerWorkTask+0x228>)
 8000858:	f00c fb58 	bl	800cf0c <lUDPLoggingPrintf>
 800085c:	e72b      	b.n	80006b6 <prvServerWorkTask+0x16>
    else if( strncmp( pcBuffer, "iperf", 5 ) == 0 )
 800085e:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8000862:	2b66      	cmp	r3, #102	@ 0x66
 8000864:	f47f af71 	bne.w	800074a <prvServerWorkTask+0xaa>
        FreeRTOS_printf( ( "iperf is already installed.\n" ) );
 8000868:	4818      	ldr	r0, [pc, #96]	@ (80008cc <prvServerWorkTask+0x22c>)
 800086a:	f00c fb4f 	bl	800cf0c <lUDPLoggingPrintf>
 800086e:	e722      	b.n	80006b6 <prvServerWorkTask+0x16>
	else if( memcmp( pcBuffer, "mem", 3 ) == 0 )
 8000870:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8000874:	2b6d      	cmp	r3, #109	@ 0x6d
 8000876:	f47f af6f 	bne.w	8000758 <prvServerWorkTask+0xb8>
		uint32_t now = xPortGetFreeHeapSize( );
 800087a:	f009 fc4b 	bl	800a114 <xPortGetFreeHeapSize>
 800087e:	4604      	mov	r4, r0
		lUDPLoggingPrintf("mem Low %u, Current %lu / %lu (%lu perc free)\n",
 8000880:	f009 fc4e 	bl	800a120 <xPortGetMinimumEverFreeHeapSize>
 8000884:	2364      	movs	r3, #100	@ 0x64
 8000886:	4601      	mov	r1, r0
 8000888:	4622      	mov	r2, r4
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	2300      	movs	r3, #0
 800088e:	4810      	ldr	r0, [pc, #64]	@ (80008d0 <prvServerWorkTask+0x230>)
 8000890:	f00c fb3c 	bl	800cf0c <lUDPLoggingPrintf>
 8000894:	e70f      	b.n	80006b6 <prvServerWorkTask+0x16>
 8000896:	bf00      	nop
 8000898:	200000c0 	.word	0x200000c0
 800089c:	00726576 	.word	0x00726576
 80008a0:	69747268 	.word	0x69747268
 80008a4:	646e6172 	.word	0x646e6172
 80008a8:	72657069 	.word	0x72657069
 80008ac:	0800fd98 	.word	0x0800fd98
 80008b0:	200000cc 	.word	0x200000cc
 80008b4:	0800fcbc 	.word	0x0800fcbc
 80008b8:	20000004 	.word	0x20000004
 80008bc:	0800fcd0 	.word	0x0800fcd0
 80008c0:	0800fce8 	.word	0x0800fce8
 80008c4:	0800fd0c 	.word	0x0800fd0c
 80008c8:	08011a70 	.word	0x08011a70
 80008cc:	0800fd44 	.word	0x0800fd44
 80008d0:	0800fd68 	.word	0x0800fd68
 80008d4:	200000c8 	.word	0x200000c8
 80008d8:	200000b8 	.word	0x200000b8
 80008dc:	200000b4 	.word	0x200000b4

080008e0 <SystemClock_Config>:
{
 80008e0:	b530      	push	{r4, r5, lr}
 80008e2:	b0a1      	sub	sp, #132	@ 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e4:	224c      	movs	r2, #76	@ 0x4c
 80008e6:	2100      	movs	r1, #0
 80008e8:	a80c      	add	r0, sp, #48	@ 0x30
 80008ea:	f00d f96d 	bl	800dbc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ee:	2220      	movs	r2, #32
 80008f0:	2100      	movs	r1, #0
 80008f2:	a804      	add	r0, sp, #16
 80008f4:	f00d f968 	bl	800dbc8 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008f8:	2002      	movs	r0, #2
 80008fa:	f009 ff13 	bl	800a724 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008fe:	4b38      	ldr	r3, [pc, #224]	@ (80009e0 <SystemClock_Config+0x100>)
 8000900:	2100      	movs	r1, #0
 8000902:	4a38      	ldr	r2, [pc, #224]	@ (80009e4 <SystemClock_Config+0x104>)
 8000904:	9101      	str	r1, [sp, #4]
 8000906:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000908:	f021 0101 	bic.w	r1, r1, #1
 800090c:	62d9      	str	r1, [r3, #44]	@ 0x2c
 800090e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	9301      	str	r3, [sp, #4]
 8000916:	6993      	ldr	r3, [r2, #24]
 8000918:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800091c:	6193      	str	r3, [r2, #24]
 800091e:	6993      	ldr	r3, [r2, #24]
 8000920:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000924:	9301      	str	r3, [sp, #4]
 8000926:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000928:	6993      	ldr	r3, [r2, #24]
 800092a:	0499      	lsls	r1, r3, #18
 800092c:	d5fc      	bpl.n	8000928 <SystemClock_Config+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b2e      	ldr	r3, [pc, #184]	@ (80009e8 <SystemClock_Config+0x108>)
 8000930:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 8000934:	f041 0102 	orr.w	r1, r1, #2
 8000938:	f8c3 10f4 	str.w	r1, [r3, #244]	@ 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800093c:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	9302      	str	r3, [sp, #8]
 8000948:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800094a:	9103      	str	r1, [sp, #12]
 800094c:	6991      	ldr	r1, [r2, #24]
 800094e:	4b24      	ldr	r3, [pc, #144]	@ (80009e0 <SystemClock_Config+0x100>)
 8000950:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8000954:	6191      	str	r1, [r2, #24]
 8000956:	6992      	ldr	r2, [r2, #24]
 8000958:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 800095c:	9203      	str	r2, [sp, #12]
 800095e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000960:	4a20      	ldr	r2, [pc, #128]	@ (80009e4 <SystemClock_Config+0x104>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000962:	f041 0101 	orr.w	r1, r1, #1
 8000966:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	9303      	str	r3, [sp, #12]
 8000970:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000972:	6993      	ldr	r3, [r2, #24]
 8000974:	049b      	lsls	r3, r3, #18
 8000976:	d5fc      	bpl.n	8000972 <SystemClock_Config+0x92>
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000978:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800097a:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800097c:	2001      	movs	r0, #1
 800097e:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000982:	9217      	str	r2, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000984:	2264      	movs	r2, #100	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000986:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000988:	931d      	str	r3, [sp, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLN = 100;
 800098a:	9218      	str	r2, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800098c:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800098e:	931e      	str	r3, [sp, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000990:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000992:	9419      	str	r4, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000994:	931c      	str	r3, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000996:	941b      	str	r4, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000998:	921a      	str	r2, [sp, #104]	@ 0x68
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800099a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099e:	a80c      	add	r0, sp, #48	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a0:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a4:	f009 ff54 	bl	800a850 <HAL_RCC_OscConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	b108      	cbz	r0, 80009b0 <SystemClock_Config+0xd0>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ae:	e7fe      	b.n	80009ae <SystemClock_Config+0xce>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009b0:	2240      	movs	r2, #64	@ 0x40
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009b2:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009b4:	2308      	movs	r3, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b6:	253f      	movs	r5, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b8:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ba:	2403      	movs	r4, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009bc:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c0:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009c2:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009c4:	e9cd 3207 	strd	r3, r2, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009cc:	e9cd 320a 	strd	r3, r2, [sp, #40]	@ 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d0:	f00a fa52 	bl	800ae78 <HAL_RCC_ClockConfig>
 80009d4:	b108      	cbz	r0, 80009da <SystemClock_Config+0xfa>
 80009d6:	b672      	cpsid	i
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <SystemClock_Config+0xf8>
}
 80009da:	b021      	add	sp, #132	@ 0x84
 80009dc:	bd30      	pop	{r4, r5, pc}
 80009de:	bf00      	nop
 80009e0:	58000400 	.word	0x58000400
 80009e4:	58024800 	.word	0x58024800
 80009e8:	58024400 	.word	0x58024400

080009ec <main>:
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b092      	sub	sp, #72	@ 0x48
    HAL_MPU_Disable();
 80009f0:	f009 fd04 	bl	800a3fc <HAL_MPU_Disable>
    MPU_InitStruct.BaseAddress      = 0x24000000;               // AXI memory where ETH descriptors and buffers are stored
 80009f4:	f04f 5010 	mov.w	r0, #603979776	@ 0x24000000
    MPU_InitStruct.Size             = MPU_REGION_SIZE_512KB;
 80009f8:	4aac      	ldr	r2, [pc, #688]	@ (8000cac <main+0x2c0>)
 80009fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
    MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 80009fe:	2101      	movs	r1, #1
    MPU_InitStruct.BaseAddress      = 0x24000000;               // AXI memory where ETH descriptors and buffers are stored
 8000a00:	900d      	str	r0, [sp, #52]	@ 0x34
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a02:	a80c      	add	r0, sp, #48	@ 0x30
    MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000a04:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
    MPU_InitStruct.Size             = MPU_REGION_SIZE_512KB;
 8000a08:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a0c:	f009 fd14 	bl	800a438 <HAL_MPU_ConfigRegion>
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a10:	2004      	movs	r0, #4
 8000a12:	f009 fd01 	bl	800a418 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a16:	4aa6      	ldr	r2, [pc, #664]	@ (8000cb0 <main+0x2c4>)
 8000a18:	6953      	ldr	r3, [r2, #20]
 8000a1a:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8000a1e:	d111      	bne.n	8000a44 <main+0x58>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a24:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a28:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a30:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a34:	6953      	ldr	r3, [r2, #20]
 8000a36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a3a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a40:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a44:	489a      	ldr	r0, [pc, #616]	@ (8000cb0 <main+0x2c4>)
 8000a46:	6943      	ldr	r3, [r0, #20]
 8000a48:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8000a4c:	d124      	bne.n	8000a98 <main+0xac>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a4e:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a52:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a56:	f8d0 5080 	ldr.w	r5, [r0, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a5a:	f643 76e0 	movw	r6, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a5e:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a62:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8000a66:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a68:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a6c:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a6e:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a72:	3b01      	subs	r3, #1
 8000a74:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a76:	f8c0 2260 	str.w	r2, [r0, #608]	@ 0x260
      } while (ways-- != 0U);
 8000a7a:	d1f8      	bne.n	8000a6e <main+0x82>
    } while(sets-- != 0U);
 8000a7c:	3c20      	subs	r4, #32
 8000a7e:	f114 0f20 	cmn.w	r4, #32
 8000a82:	d1f1      	bne.n	8000a68 <main+0x7c>
 8000a84:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a88:	6943      	ldr	r3, [r0, #20]
 8000a8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a8e:	6143      	str	r3, [r0, #20]
 8000a90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a94:	f3bf 8f6f 	isb	sy
	HeapRegion_t xHeapRegions[] = {
 8000a98:	4e86      	ldr	r6, [pc, #536]	@ (8000cb4 <main+0x2c8>)
  HAL_Init();
 8000a9a:	f009 fbeb 	bl	800a274 <HAL_Init>
  SystemClock_Config();
 8000a9e:	f7ff ff1f 	bl	80008e0 <SystemClock_Config>
	HeapRegion_t xHeapRegions[] = {
 8000aa2:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	f04f 0802 	mov.w	r8, #2
  huart3.Instance = USART3;
 8000aae:	4d82      	ldr	r5, [pc, #520]	@ (8000cb8 <main+0x2cc>)
	HeapRegion_t xHeapRegions[] = {
 8000ab0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ab2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000ab6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8000aba:	e88c 0003 	stmia.w	ip, {r0, r1}
	vPortDefineHeapRegions( xHeapRegions );
 8000abe:	a80c      	add	r0, sp, #48	@ 0x30
 8000ac0:	f009 fb34 	bl	800a12c <vPortDefineHeapRegions>
  vStartHighResolutionTimer();
 8000ac4:	f00c fb8a 	bl	800d1dc <vStartHighResolutionTimer>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac8:	4b7c      	ldr	r3, [pc, #496]	@ (8000cbc <main+0x2d0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	9410      	str	r4, [sp, #64]	@ 0x40
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000acc:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ad0:	487b      	ldr	r0, [pc, #492]	@ (8000cc0 <main+0x2d4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
 8000ad6:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ade:	f042 0204 	orr.w	r2, r2, #4
 8000ae2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000ae6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000aea:	f002 0204 	and.w	r2, r2, #4
 8000aee:	9205      	str	r2, [sp, #20]
 8000af0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000af6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000afa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000afe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b02:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000b06:	9206      	str	r2, [sp, #24]
 8000b08:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b0e:	433a      	orrs	r2, r7
 8000b10:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000b14:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b18:	403a      	ands	r2, r7
 8000b1a:	9207      	str	r2, [sp, #28]
 8000b1c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b22:	ea42 0208 	orr.w	r2, r2, r8
 8000b26:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000b2a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b2e:	ea02 0208 	and.w	r2, r2, r8
 8000b32:	9208      	str	r2, [sp, #32]
 8000b34:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b36:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b3a:	f042 0208 	orr.w	r2, r2, #8
 8000b3e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000b42:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b46:	f002 0208 	and.w	r2, r2, #8
 8000b4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8000b4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b4e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b56:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000b5a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b5e:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000b62:	920a      	str	r2, [sp, #40]	@ 0x28
 8000b64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b66:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b6a:	f042 0210 	orr.w	r2, r2, #16
 8000b6e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b72:	4622      	mov	r2, r4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b78:	f003 0310 	and.w	r3, r3, #16
 8000b7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000b7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b80:	f009 fdcc 	bl	800a71c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b84:	4622      	mov	r2, r4
 8000b86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b8a:	484e      	ldr	r0, [pc, #312]	@ (8000cc4 <main+0x2d8>)
 8000b8c:	f009 fdc6 	bl	800a71c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b90:	4622      	mov	r2, r4
 8000b92:	4641      	mov	r1, r8
 8000b94:	484c      	ldr	r0, [pc, #304]	@ (8000cc8 <main+0x2dc>)
 8000b96:	f009 fdc1 	bl	800a71c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8000b9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	a90c      	add	r1, sp, #48	@ 0x30
 8000ba0:	484a      	ldr	r0, [pc, #296]	@ (8000ccc <main+0x2e0>)
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba2:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f009 fc76 	bl	800a498 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bac:	f244 0301 	movw	r3, #16385	@ 0x4001
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	a90c      	add	r1, sp, #48	@ 0x30
 8000bb2:	4843      	ldr	r0, [pc, #268]	@ (8000cc0 <main+0x2d4>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bb4:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	e9cd 740d 	strd	r7, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbc:	f009 fc6c 	bl	800a498 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000bc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	a90c      	add	r1, sp, #48	@ 0x30
 8000bc6:	483f      	ldr	r0, [pc, #252]	@ (8000cc4 <main+0x2d8>)
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000bc8:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	e9cd 740d 	strd	r7, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f009 fc62 	bl	800a498 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd4:	2280      	movs	r2, #128	@ 0x80
 8000bd6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000bda:	a90c      	add	r1, sp, #48	@ 0x30
 8000bdc:	483c      	ldr	r0, [pc, #240]	@ (8000cd0 <main+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	940e      	str	r4, [sp, #56]	@ 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f009 fc58 	bl	800a498 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000be8:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	a90c      	add	r1, sp, #48	@ 0x30
 8000bee:	4839      	ldr	r0, [pc, #228]	@ (8000cd4 <main+0x2e8>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000bf0:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000bf2:	230a      	movs	r3, #10
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000bf6:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	e9cd 840d 	strd	r8, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfc:	f009 fc4c 	bl	800a498 <HAL_GPIO_Init>
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c00:	4831      	ldr	r0, [pc, #196]	@ (8000cc8 <main+0x2dc>)
 8000c02:	a90c      	add	r1, sp, #48	@ 0x30
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c04:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	e9cd 740d 	strd	r7, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f009 fc43 	bl	800a498 <HAL_GPIO_Init>
  huart3.Instance = USART3;
 8000c12:	4b31      	ldr	r3, [pc, #196]	@ (8000cd8 <main+0x2ec>)
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c14:	4628      	mov	r0, r5
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c16:	612c      	str	r4, [r5, #16]
  huart3.Instance = USART3;
 8000c18:	602b      	str	r3, [r5, #0]
  huart3.Init.BaudRate = 115200;
 8000c1a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	61ac      	str	r4, [r5, #24]
  huart3.Init.BaudRate = 115200;
 8000c20:	606b      	str	r3, [r5, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c22:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c24:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c28:	e9c5 4407 	strd	r4, r4, [r5, #28]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	616b      	str	r3, [r5, #20]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c2e:	e9c5 4409 	strd	r4, r4, [r5, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c32:	f00c f881 	bl	800cd38 <HAL_UART_Init>
 8000c36:	b108      	cbz	r0, 8000c3c <main+0x250>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <main+0x24e>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c3c:	4601      	mov	r1, r0
 8000c3e:	4628      	mov	r0, r5
 8000c40:	f00c f8ee 	bl	800ce20 <HAL_UARTEx_SetTxFifoThreshold>
 8000c44:	b108      	cbz	r0, 8000c4a <main+0x25e>
 8000c46:	b672      	cpsid	i
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <main+0x25c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4a:	4601      	mov	r1, r0
 8000c4c:	4628      	mov	r0, r5
 8000c4e:	f00c f90f 	bl	800ce70 <HAL_UARTEx_SetRxFifoThreshold>
 8000c52:	b108      	cbz	r0, 8000c58 <main+0x26c>
 8000c54:	b672      	cpsid	i
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <main+0x26a>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c58:	4628      	mov	r0, r5
 8000c5a:	f00c f8c3 	bl	800cde4 <HAL_UARTEx_DisableFifoMode>
 8000c5e:	4604      	mov	r4, r0
 8000c60:	b108      	cbz	r0, 8000c66 <main+0x27a>
 8000c62:	b672      	cpsid	i
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <main+0x278>
  const uint8_t ucNetMask[ 4 ] = { configNET_MASK0, configNET_MASK1, configNET_MASK2, configNET_MASK3 };
 8000c66:	4a1d      	ldr	r2, [pc, #116]	@ (8000cdc <main+0x2f0>)
 8000c68:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
  FreeRTOS_printf( ( "Calling FreeRTOS_IPInit\n" ) );
 8000c6c:	481c      	ldr	r0, [pc, #112]	@ (8000ce0 <main+0x2f4>)
  const uint8_t ucNetMask[ 4 ] = { configNET_MASK0, configNET_MASK1, configNET_MASK2, configNET_MASK3 };
 8000c6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  const uint8_t ucGatewayAddress[ 4 ] = { configGATEWAY_ADDR0, configGATEWAY_ADDR1, configGATEWAY_ADDR2, configGATEWAY_ADDR3 };
 8000c72:	f102 427c 	add.w	r2, r2, #4227858432	@ 0xfc000000
  const uint8_t ucDNSServerAddress[ 4 ] = { configDNS_SERVER_ADDR0, configDNS_SERVER_ADDR1, configDNS_SERVER_ADDR2, configDNS_SERVER_ADDR3 };
 8000c76:	f04f 3308 	mov.w	r3, #134744072	@ 0x8080808
  const uint8_t ucGatewayAddress[ 4 ] = { configGATEWAY_ADDR0, configGATEWAY_ADDR1, configGATEWAY_ADDR2, configGATEWAY_ADDR3 };
 8000c7a:	9204      	str	r2, [sp, #16]
  const uint8_t ucDNSServerAddress[ 4 ] = { configDNS_SERVER_ADDR0, configDNS_SERVER_ADDR1, configDNS_SERVER_ADDR2, configDNS_SERVER_ADDR3 };
 8000c7c:	930c      	str	r3, [sp, #48]	@ 0x30
  FreeRTOS_printf( ( "Calling FreeRTOS_IPInit\n" ) );
 8000c7e:	f00c f945 	bl	800cf0c <lUDPLoggingPrintf>
  FreeRTOS_IPInit( ucIPAddress, ucNetMask, ucGatewayAddress, ucDNSServerAddress, ucMACAddress );
 8000c82:	4918      	ldr	r1, [pc, #96]	@ (8000ce4 <main+0x2f8>)
 8000c84:	ab0c      	add	r3, sp, #48	@ 0x30
 8000c86:	aa04      	add	r2, sp, #16
 8000c88:	a802      	add	r0, sp, #8
 8000c8a:	9100      	str	r1, [sp, #0]
 8000c8c:	a903      	add	r1, sp, #12
 8000c8e:	f001 f89d 	bl	8001dcc <FreeRTOS_IPInit>
  xTaskCreate( prvServerWorkTask, "SvrWork", mainTCP_SERVER_STACK_SIZE, NULL, 1, &xServerWorkTaskHandle );
 8000c92:	4815      	ldr	r0, [pc, #84]	@ (8000ce8 <main+0x2fc>)
 8000c94:	4623      	mov	r3, r4
 8000c96:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000c9a:	4914      	ldr	r1, [pc, #80]	@ (8000cec <main+0x300>)
 8000c9c:	e9cd 7000 	strd	r7, r0, [sp]
 8000ca0:	4813      	ldr	r0, [pc, #76]	@ (8000cf0 <main+0x304>)
 8000ca2:	f008 f901 	bl	8008ea8 <xTaskCreate>
  vTaskStartScheduler();
 8000ca6:	f008 f9e9 	bl	800907c <vTaskStartScheduler>
  while (1)
 8000caa:	e7fe      	b.n	8000caa <main+0x2be>
 8000cac:	03010012 	.word	0x03010012
 8000cb0:	e000ed00 	.word	0xe000ed00
 8000cb4:	0800fc6c 	.word	0x0800fc6c
 8000cb8:	200000d8 	.word	0x200000d8
 8000cbc:	58024400 	.word	0x58024400
 8000cc0:	58020400 	.word	0x58020400
 8000cc4:	58020c00 	.word	0x58020c00
 8000cc8:	58021000 	.word	0x58021000
 8000ccc:	58020800 	.word	0x58020800
 8000cd0:	58021800 	.word	0x58021800
 8000cd4:	58020000 	.word	0x58020000
 8000cd8:	40004800 	.word	0x40004800
 8000cdc:	0501a8c0 	.word	0x0501a8c0
 8000ce0:	0800fda8 	.word	0x0800fda8
 8000ce4:	0800fe40 	.word	0x0800fe40
 8000ce8:	200000d4 	.word	0x200000d4
 8000cec:	0800fdc4 	.word	0x0800fdc4
 8000cf0:	080006a1 	.word	0x080006a1

08000cf4 <ulGetRunTimeCounterValue>:
}
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	4770      	bx	lr

08000cf8 <vAssertCalled>:
volatile unsigned long ul = 0;
 8000cf8:	2300      	movs	r3, #0
{
 8000cfa:	b500      	push	{lr}
 8000cfc:	b083      	sub	sp, #12
volatile unsigned long ul = 0;
 8000cfe:	9301      	str	r3, [sp, #4]
	taskENTER_CRITICAL();
 8000d00:	f009 f800 	bl	8009d04 <vPortEnterCritical>
		while( ul == 0 )
 8000d04:	9b01      	ldr	r3, [sp, #4]
 8000d06:	b91b      	cbnz	r3, 8000d10 <vAssertCalled+0x18>
			__NOP();
 8000d08:	bf00      	nop
		while( ul == 0 )
 8000d0a:	9b01      	ldr	r3, [sp, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d0fb      	beq.n	8000d08 <vAssertCalled+0x10>
}
 8000d10:	b003      	add	sp, #12
 8000d12:	f85d eb04 	ldr.w	lr, [sp], #4
	taskEXIT_CRITICAL();
 8000d16:	f009 b817 	b.w	8009d48 <vPortExitCritical>
 8000d1a:	bf00      	nop

08000d1c <vApplicationMallocFailedHook>:
volatile unsigned long ul = 0;
 8000d1c:	2300      	movs	r3, #0
{
 8000d1e:	b500      	push	{lr}
 8000d20:	b083      	sub	sp, #12
volatile unsigned long ul = 0;
 8000d22:	9301      	str	r3, [sp, #4]
	taskENTER_CRITICAL();
 8000d24:	f008 ffee 	bl	8009d04 <vPortEnterCritical>
		while( ul == 0 )
 8000d28:	9b01      	ldr	r3, [sp, #4]
 8000d2a:	b91b      	cbnz	r3, 8000d34 <vApplicationMallocFailedHook+0x18>
			__NOP();
 8000d2c:	bf00      	nop
		while( ul == 0 )
 8000d2e:	9b01      	ldr	r3, [sp, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d0fb      	beq.n	8000d2c <vApplicationMallocFailedHook+0x10>
}
 8000d34:	b003      	add	sp, #12
 8000d36:	f85d eb04 	ldr.w	lr, [sp], #4
	taskEXIT_CRITICAL();
 8000d3a:	f009 b805 	b.w	8009d48 <vPortExitCritical>
 8000d3e:	bf00      	nop

08000d40 <ulApplicationGetNextSequenceNumber>:
	*pulNumber = rand();
 8000d40:	f00d ba6a 	b.w	800e218 <rand>

08000d44 <vApplicationIPNetworkEventHook>:
	if( eNetworkEvent == eNetworkUp )
 8000d44:	2800      	cmp	r0, #0
 8000d46:	d131      	bne.n	8000dac <vApplicationIPNetworkEventHook+0x68>
		if( xTasksAlreadyCreated == pdFALSE )
 8000d48:	4b19      	ldr	r3, [pc, #100]	@ (8000db0 <vApplicationIPNetworkEventHook+0x6c>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
{
 8000d4c:	b500      	push	{lr}
 8000d4e:	b089      	sub	sp, #36	@ 0x24
		if( xTasksAlreadyCreated == pdFALSE )
 8000d50:	b91a      	cbnz	r2, 8000d5a <vApplicationIPNetworkEventHook+0x16>
			xTasksAlreadyCreated = pdTRUE;
 8000d52:	2201      	movs	r2, #1
			xDoCreateSockets = pdTRUE;
 8000d54:	4917      	ldr	r1, [pc, #92]	@ (8000db4 <vApplicationIPNetworkEventHook+0x70>)
			xTasksAlreadyCreated = pdTRUE;
 8000d56:	601a      	str	r2, [r3, #0]
			xDoCreateSockets = pdTRUE;
 8000d58:	600a      	str	r2, [r1, #0]
		FreeRTOS_GetAddressConfiguration( &ulIPAddress, &ulNetMask, &ulGatewayAddress, &ulDNSServerAddress );
 8000d5a:	ab03      	add	r3, sp, #12
 8000d5c:	aa02      	add	r2, sp, #8
 8000d5e:	a901      	add	r1, sp, #4
 8000d60:	4668      	mov	r0, sp
 8000d62:	f001 f8cd 	bl	8001f00 <FreeRTOS_GetAddressConfiguration>
		FreeRTOS_inet_ntoa( ulIPAddress, cBuffer );
 8000d66:	a904      	add	r1, sp, #16
 8000d68:	9800      	ldr	r0, [sp, #0]
 8000d6a:	f002 fa91 	bl	8003290 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "IP Address: %s\n", cBuffer ) );
 8000d6e:	a904      	add	r1, sp, #16
 8000d70:	4811      	ldr	r0, [pc, #68]	@ (8000db8 <vApplicationIPNetworkEventHook+0x74>)
 8000d72:	f00c f8cb 	bl	800cf0c <lUDPLoggingPrintf>
		FreeRTOS_inet_ntoa( ulNetMask, cBuffer );
 8000d76:	a904      	add	r1, sp, #16
 8000d78:	9801      	ldr	r0, [sp, #4]
 8000d7a:	f002 fa89 	bl	8003290 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Subnet Mask: %s\n", cBuffer ) );
 8000d7e:	a904      	add	r1, sp, #16
 8000d80:	480e      	ldr	r0, [pc, #56]	@ (8000dbc <vApplicationIPNetworkEventHook+0x78>)
 8000d82:	f00c f8c3 	bl	800cf0c <lUDPLoggingPrintf>
		FreeRTOS_inet_ntoa( ulGatewayAddress, cBuffer );
 8000d86:	a904      	add	r1, sp, #16
 8000d88:	9802      	ldr	r0, [sp, #8]
 8000d8a:	f002 fa81 	bl	8003290 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Gateway Address: %s\n", cBuffer ) );
 8000d8e:	a904      	add	r1, sp, #16
 8000d90:	480b      	ldr	r0, [pc, #44]	@ (8000dc0 <vApplicationIPNetworkEventHook+0x7c>)
 8000d92:	f00c f8bb 	bl	800cf0c <lUDPLoggingPrintf>
		FreeRTOS_inet_ntoa( ulDNSServerAddress, cBuffer );
 8000d96:	a904      	add	r1, sp, #16
 8000d98:	9803      	ldr	r0, [sp, #12]
 8000d9a:	f002 fa79 	bl	8003290 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "DNS Server Address: %s\n", cBuffer ) );
 8000d9e:	a904      	add	r1, sp, #16
 8000da0:	4808      	ldr	r0, [pc, #32]	@ (8000dc4 <vApplicationIPNetworkEventHook+0x80>)
 8000da2:	f00c f8b3 	bl	800cf0c <lUDPLoggingPrintf>
}
 8000da6:	b009      	add	sp, #36	@ 0x24
 8000da8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	200000d0 	.word	0x200000d0
 8000db4:	200000c8 	.word	0x200000c8
 8000db8:	0800fdcc 	.word	0x0800fdcc
 8000dbc:	0800fddc 	.word	0x0800fddc
 8000dc0:	0800fdf0 	.word	0x0800fdf0
 8000dc4:	0800fe08 	.word	0x0800fe08

08000dc8 <xApplicationDNSQueryHook>:
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 8000dc8:	4903      	ldr	r1, [pc, #12]	@ (8000dd8 <xApplicationDNSQueryHook+0x10>)
{
 8000dca:	b508      	push	{r3, lr}
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 8000dcc:	f00d fbbe 	bl	800e54c <strcasecmp>
}
 8000dd0:	fab0 f080 	clz	r0, r0
 8000dd4:	0940      	lsrs	r0, r0, #5
 8000dd6:	bd08      	pop	{r3, pc}
 8000dd8:	0800fe20 	.word	0x0800fe20

08000ddc <xApplicationGetRandomNumber>:
BaseType_t xApplicationGetRandomNumber( uint32_t *pulNumber ){
 8000ddc:	b510      	push	{r4, lr}
 8000dde:	4604      	mov	r4, r0
	*pulNumber = rand();
 8000de0:	f00d fa1a 	bl	800e218 <rand>
 8000de4:	4603      	mov	r3, r0
}
 8000de6:	2001      	movs	r0, #1
	*pulNumber = rand();
 8000de8:	6023      	str	r3, [r4, #0]
}
 8000dea:	bd10      	pop	{r4, pc}

08000dec <prvGetRegistersFromStack>:
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
 8000dec:	4a01      	ldr	r2, [pc, #4]	@ (8000df4 <prvGetRegistersFromStack+0x8>)
		( pulFaultStackAddress - ARRAY_SIZE( pxRegisterStack->spare0 ) );
 8000dee:	3820      	subs	r0, #32
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
 8000df0:	6010      	str	r0, [r2, #0]
	for( ;; );
 8000df2:	e7fe      	b.n	8000df2 <prvGetRegistersFromStack+0x6>
 8000df4:	200000c4 	.word	0x200000c4

08000df8 <HardFault_Handler>:
	__asm volatile
 8000df8:	f01e 0f04 	tst.w	lr, #4
 8000dfc:	bf0c      	ite	eq
 8000dfe:	f3ef 8008 	mrseq	r0, MSP
 8000e02:	f3ef 8009 	mrsne	r0, PSP
 8000e06:	6981      	ldr	r1, [r0, #24]
 8000e08:	f7ff fff0 	bl	8000dec <prvGetRegistersFromStack>
}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <vApplicationPingReplyHook>:
		FreeRTOS_printf( ( "Received ping ID %04X\n", usIdentifier ) );
 8000e10:	4801      	ldr	r0, [pc, #4]	@ (8000e18 <vApplicationPingReplyHook+0x8>)
 8000e12:	f00c b87b 	b.w	800cf0c <lUDPLoggingPrintf>
 8000e16:	bf00      	nop
 8000e18:	0800fe28 	.word	0x0800fe28

08000e1c <__io_putchar>:
{
 8000e1c:	b500      	push	{lr}
 8000e1e:	b083      	sub	sp, #12
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000e20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e24:	2201      	movs	r2, #1
{
 8000e26:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000e28:	a901      	add	r1, sp, #4
 8000e2a:	4803      	ldr	r0, [pc, #12]	@ (8000e38 <__io_putchar+0x1c>)
 8000e2c:	f00b fec2 	bl	800cbb4 <HAL_UART_Transmit>
}
 8000e30:	9801      	ldr	r0, [sp, #4]
 8000e32:	b003      	add	sp, #12
 8000e34:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e38:	200000d8 	.word	0x200000d8

08000e3c <Error_Handler>:
 8000e3c:	b672      	cpsid	i
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <Error_Handler+0x2>

08000e40 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e40:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <HAL_MspInit+0x20>)
{
 8000e42:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e44:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000e48:	f042 0202 	orr.w	r2, r2, #2
 8000e4c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000e50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	9301      	str	r3, [sp, #4]
 8000e5a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5c:	b002      	add	sp, #8
 8000e5e:	4770      	bx	lr
 8000e60:	58024400 	.word	0x58024400

08000e64 <HAL_ETH_MspInit>:
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(heth->Instance==ETH)
 8000e64:	4b51      	ldr	r3, [pc, #324]	@ (8000fac <HAL_ETH_MspInit+0x148>)
 8000e66:	6802      	ldr	r2, [r0, #0]
{
 8000e68:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(heth->Instance==ETH)
 8000e6a:	429a      	cmp	r2, r3
{
 8000e6c:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6e:	f04f 0400 	mov.w	r4, #0
 8000e72:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000e76:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 8000e7a:	940c      	str	r4, [sp, #48]	@ 0x30
  if(heth->Instance==ETH)
 8000e7c:	d001      	beq.n	8000e82 <HAL_ETH_MspInit+0x1e>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000e7e:	b00f      	add	sp, #60	@ 0x3c
 8000e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e82:	4b4b      	ldr	r3, [pc, #300]	@ (8000fb0 <HAL_ETH_MspInit+0x14c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2603      	movs	r6, #3
 8000e86:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e88:	a908      	add	r1, sp, #32
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e8a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e90:	4848      	ldr	r0, [pc, #288]	@ (8000fb4 <HAL_ETH_MspInit+0x150>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000e96:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8000e9a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8000e9e:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8000ea2:	9201      	str	r2, [sp, #4]
 8000ea4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000ea6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8000eaa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000eae:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8000eb2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8000eb6:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8000eba:	9202      	str	r2, [sp, #8]
 8000ebc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ebe:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8000ec2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000ec6:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8000eca:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8000ece:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000ed2:	9203      	str	r2, [sp, #12]
 8000ed4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000eda:	f042 0204 	orr.w	r2, r2, #4
 8000ede:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000ee2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ee6:	f002 0204 	and.w	r2, r2, #4
 8000eea:	9204      	str	r2, [sp, #16]
 8000eec:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ef2:	f042 0201 	orr.w	r2, r2, #1
 8000ef6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000efa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000efe:	f002 0201 	and.w	r2, r2, #1
 8000f02:	9205      	str	r2, [sp, #20]
 8000f04:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f0a:	f042 0202 	orr.w	r2, r2, #2
 8000f0e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000f12:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f16:	f002 0202 	and.w	r2, r2, #2
 8000f1a:	9206      	str	r2, [sp, #24]
 8000f1c:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f1e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f26:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f2a:	2232      	movs	r2, #50	@ 0x32
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f34:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f36:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	e9cd 650b 	strd	r6, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f40:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f42:	f009 faa9 	bl	800a498 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f46:	2386      	movs	r3, #134	@ 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	a908      	add	r1, sp, #32
 8000f4a:	481b      	ldr	r0, [pc, #108]	@ (8000fb8 <HAL_ETH_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f4c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f4e:	950c      	str	r5, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	e9cd 460a 	strd	r4, r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f009 fa9f 	bl	800a498 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	a908      	add	r1, sp, #32
 8000f60:	4816      	ldr	r0, [pc, #88]	@ (8000fbc <HAL_ETH_MspInit+0x158>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f62:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	e9cd 7409 	strd	r7, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f68:	e9cd 650b 	strd	r6, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6c:	f009 fa94 	bl	800a498 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f70:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f74:	a908      	add	r1, sp, #32
 8000f76:	4812      	ldr	r0, [pc, #72]	@ (8000fc0 <HAL_ETH_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f78:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f7c:	950c      	str	r5, [sp, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	e9cd 460a 	strd	r4, r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f82:	f009 fa89 	bl	800a498 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8000f86:	4622      	mov	r2, r4
 8000f88:	2105      	movs	r1, #5
 8000f8a:	203d      	movs	r0, #61	@ 0x3d
 8000f8c:	f009 f9d6 	bl	800a33c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000f90:	203d      	movs	r0, #61	@ 0x3d
 8000f92:	f009 fa0f 	bl	800a3b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8000f96:	4622      	mov	r2, r4
 8000f98:	2105      	movs	r1, #5
 8000f9a:	203e      	movs	r0, #62	@ 0x3e
 8000f9c:	f009 f9ce 	bl	800a33c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8000fa0:	203e      	movs	r0, #62	@ 0x3e
 8000fa2:	f009 fa07 	bl	800a3b4 <HAL_NVIC_EnableIRQ>
}
 8000fa6:	b00f      	add	sp, #60	@ 0x3c
 8000fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40028000 	.word	0x40028000
 8000fb0:	58024400 	.word	0x58024400
 8000fb4:	58020800 	.word	0x58020800
 8000fb8:	58020000 	.word	0x58020000
 8000fbc:	58020400 	.word	0x58020400
 8000fc0:	58021800 	.word	0x58021800

08000fc4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8000fc4:	6803      	ldr	r3, [r0, #0]
 8000fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fca:	d000      	beq.n	8000fce <HAL_TIM_Base_MspInit+0xa>
 8000fcc:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fce:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <HAL_TIM_Base_MspInit+0x2c>)
{
 8000fd0:	b082      	sub	sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fd2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000fd6:	f042 0201 	orr.w	r2, r2, #1
 8000fda:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8000fde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000fea:	b002      	add	sp, #8
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	58024400 	.word	0x58024400
 8000ff4:	00000000 	.word	0x00000000

08000ff8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff8:	b510      	push	{r4, lr}
 8000ffa:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	2100      	movs	r1, #0
{
 8000ffe:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001000:	22c0      	movs	r2, #192	@ 0xc0
 8001002:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	9106      	str	r1, [sp, #24]
 8001006:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800100a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800100e:	f00c fddb 	bl	800dbc8 <memset>
  if(huart->Instance==USART3)
 8001012:	4b21      	ldr	r3, [pc, #132]	@ (8001098 <HAL_UART_MspInit+0xa0>)
 8001014:	6822      	ldr	r2, [r4, #0]
 8001016:	429a      	cmp	r2, r3
 8001018:	d001      	beq.n	800101e <HAL_UART_MspInit+0x26>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800101a:	b038      	add	sp, #224	@ 0xe0
 800101c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800101e:	2202      	movs	r2, #2
 8001020:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001022:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001024:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001028:	f00a f998 	bl	800b35c <HAL_RCCEx_PeriphCLKConfig>
 800102c:	bb40      	cbnz	r0, 8001080 <HAL_UART_MspInit+0x88>
    __HAL_RCC_USART3_CLK_ENABLE();
 800102e:	4b1b      	ldr	r3, [pc, #108]	@ (800109c <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001030:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001032:	a902      	add	r1, sp, #8
 8001034:	481a      	ldr	r0, [pc, #104]	@ (80010a0 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001036:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800103a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800103e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001042:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001046:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 800104a:	9200      	str	r2, [sp, #0]
 800104c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800104e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001052:	f042 0208 	orr.w	r2, r2, #8
 8001056:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800105a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800105e:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001060:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001064:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8001088 <HAL_UART_MspInit+0x90>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800106c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001070:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8001090 <HAL_UART_MspInit+0x98>
 8001074:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001078:	f009 fa0e 	bl	800a498 <HAL_GPIO_Init>
}
 800107c:	b038      	add	sp, #224	@ 0xe0
 800107e:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001080:	f7ff fedc 	bl	8000e3c <Error_Handler>
 8001084:	e7d3      	b.n	800102e <HAL_UART_MspInit+0x36>
 8001086:	bf00      	nop
 8001088:	00000300 	.word	0x00000300
 800108c:	00000002 	.word	0x00000002
	...
 8001098:	40004800 	.word	0x40004800
 800109c:	58024400 	.word	0x58024400
 80010a0:	58020c00 	.word	0x58020c00

080010a4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010a4:	e7fe      	b.n	80010a4 <NMI_Handler>
 80010a6:	bf00      	nop

080010a8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <MemManage_Handler>
 80010aa:	bf00      	nop

080010ac <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <BusFault_Handler>
 80010ae:	bf00      	nop

080010b0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <UsageFault_Handler>
 80010b2:	bf00      	nop

080010b4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop

080010b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ba:	f009 f90b 	bl	800a2d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80010be:	f008 fb51 	bl	8009764 <xTaskGetSchedulerState>
 80010c2:	2802      	cmp	r0, #2
 80010c4:	d000      	beq.n	80010c8 <SysTick_Handler+0x10>
    {
  	xPortSysTickHandler();
    }
  /* USER CODE END SysTick_IRQn 1 */
}
 80010c6:	bd08      	pop	{r3, pc}
 80010c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  	xPortSysTickHandler();
 80010cc:	f008 be8a 	b.w	8009de4 <xPortSysTickHandler>

080010d0 <ETH_WKUP_IRQHandler>:
void ETH_WKUP_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */
//
  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80010d0:	4801      	ldr	r0, [pc, #4]	@ (80010d8 <ETH_WKUP_IRQHandler+0x8>)
 80010d2:	f006 bd99 	b.w	8007c08 <HAL_ETH_IRQHandler>
 80010d6:	bf00      	nop
 80010d8:	2000016c 	.word	0x2000016c

080010dc <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80010dc:	2001      	movs	r0, #1
 80010de:	4770      	bx	lr

080010e0 <_kill>:

int _kill(int pid, int sig)
{
 80010e0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010e2:	f00d fab9 	bl	800e658 <__errno>
 80010e6:	2216      	movs	r2, #22
 80010e8:	4603      	mov	r3, r0
  return -1;
}
 80010ea:	f04f 30ff 	mov.w	r0, #4294967295
  errno = EINVAL;
 80010ee:	601a      	str	r2, [r3, #0]
}
 80010f0:	bd08      	pop	{r3, pc}
 80010f2:	bf00      	nop

080010f4 <_exit>:

void _exit (int status)
{
 80010f4:	b508      	push	{r3, lr}
  errno = EINVAL;
 80010f6:	f00d faaf 	bl	800e658 <__errno>
 80010fa:	2316      	movs	r3, #22
 80010fc:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80010fe:	e7fe      	b.n	80010fe <_exit+0xa>

08001100 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001100:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001102:	1e16      	subs	r6, r2, #0
 8001104:	dd07      	ble.n	8001116 <_read+0x16>
 8001106:	460c      	mov	r4, r1
 8001108:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 800110a:	f3af 8000 	nop.w
 800110e:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001112:	42a5      	cmp	r5, r4
 8001114:	d1f9      	bne.n	800110a <_read+0xa>
  }

  return len;
}
 8001116:	4630      	mov	r0, r6
 8001118:	bd70      	pop	{r4, r5, r6, pc}
 800111a:	bf00      	nop

0800111c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800111c:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111e:	1e16      	subs	r6, r2, #0
 8001120:	dd07      	ble.n	8001132 <_write+0x16>
 8001122:	460c      	mov	r4, r1
 8001124:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8001126:	f814 0b01 	ldrb.w	r0, [r4], #1
 800112a:	f7ff fe77 	bl	8000e1c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112e:	42a5      	cmp	r5, r4
 8001130:	d1f9      	bne.n	8001126 <_write+0xa>
  }
  return len;
}
 8001132:	4630      	mov	r0, r6
 8001134:	bd70      	pop	{r4, r5, r6, pc}
 8001136:	bf00      	nop

08001138 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop

08001140 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001140:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8001144:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001146:	604b      	str	r3, [r1, #4]
}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800114c:	2001      	movs	r0, #1
 800114e:	4770      	bx	lr

08001150 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001150:	2000      	movs	r0, #0
 8001152:	4770      	bx	lr

08001154 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001154:	490d      	ldr	r1, [pc, #52]	@ (800118c <_sbrk+0x38>)
{
 8001156:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001158:	4a0d      	ldr	r2, [pc, #52]	@ (8001190 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 800115a:	6808      	ldr	r0, [r1, #0]
{
 800115c:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800115e:	4c0d      	ldr	r4, [pc, #52]	@ (8001194 <_sbrk+0x40>)
 8001160:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001162:	b120      	cbz	r0, 800116e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001164:	4403      	add	r3, r0
 8001166:	4293      	cmp	r3, r2
 8001168:	d807      	bhi.n	800117a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800116a:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 800116c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800116e:	4c0a      	ldr	r4, [pc, #40]	@ (8001198 <_sbrk+0x44>)
 8001170:	4620      	mov	r0, r4
 8001172:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001174:	4403      	add	r3, r0
 8001176:	4293      	cmp	r3, r2
 8001178:	d9f7      	bls.n	800116a <_sbrk+0x16>
    errno = ENOMEM;
 800117a:	f00d fa6d 	bl	800e658 <__errno>
 800117e:	220c      	movs	r2, #12
 8001180:	4603      	mov	r3, r0
    return (void *)-1;
 8001182:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8001186:	601a      	str	r2, [r3, #0]
}
 8001188:	bd10      	pop	{r4, pc}
 800118a:	bf00      	nop
 800118c:	20000218 	.word	0x20000218
 8001190:	24080000 	.word	0x24080000
 8001194:	00000400 	.word	0x00000400
 8001198:	200013b8 	.word	0x200013b8

0800119c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800119c:	4927      	ldr	r1, [pc, #156]	@ (800123c <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800119e:	4a28      	ldr	r2, [pc, #160]	@ (8001240 <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011a0:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 80011a8:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011ae:	6813      	ldr	r3, [r2, #0]
 80011b0:	f003 030f 	and.w	r3, r3, #15
 80011b4:	2b06      	cmp	r3, #6
 80011b6:	d805      	bhi.n	80011c4 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011b8:	6813      	ldr	r3, [r2, #0]
 80011ba:	f023 030f 	bic.w	r3, r3, #15
 80011be:	f043 0307 	orr.w	r3, r3, #7
 80011c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001244 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011c6:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001248 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 80011ca:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011cc:	481c      	ldr	r0, [pc, #112]	@ (8001240 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 80011ce:	f041 0101 	orr.w	r1, r1, #1
 80011d2:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 80011d4:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80011d6:	6819      	ldr	r1, [r3, #0]
 80011d8:	400a      	ands	r2, r1
 80011da:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011dc:	6803      	ldr	r3, [r0, #0]
 80011de:	071b      	lsls	r3, r3, #28
 80011e0:	d505      	bpl.n	80011ee <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011e2:	6803      	ldr	r3, [r0, #0]
 80011e4:	f023 030f 	bic.w	r3, r3, #15
 80011e8:	f043 0307 	orr.w	r3, r3, #7
 80011ec:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011ee:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <SystemInit+0xa8>)
 80011f0:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011f2:	4916      	ldr	r1, [pc, #88]	@ (800124c <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 80011f4:	4c16      	ldr	r4, [pc, #88]	@ (8001250 <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 80011f6:	4817      	ldr	r0, [pc, #92]	@ (8001254 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 80011f8:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80011fa:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80011fc:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80011fe:	629c      	str	r4, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8001200:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8001202:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001204:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001206:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001208:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800120a:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800120c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800120e:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001210:	4c11      	ldr	r4, [pc, #68]	@ (8001258 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8001212:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001216:	4911      	ldr	r1, [pc, #68]	@ (800125c <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8001218:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 800121a:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800121c:	6823      	ldr	r3, [r4, #0]
 800121e:	4019      	ands	r1, r3
 8001220:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8001224:	d203      	bcs.n	800122e <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <SystemInit+0xc4>)
 8001228:	2201      	movs	r2, #1
 800122a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800122e:	4b0d      	ldr	r3, [pc, #52]	@ (8001264 <SystemInit+0xc8>)
 8001230:	f243 02d2 	movw	r2, #12498	@ 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001234:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001238:	601a      	str	r2, [r3, #0]
}
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00
 8001240:	52002000 	.word	0x52002000
 8001244:	58024400 	.word	0x58024400
 8001248:	eaf6ed7f 	.word	0xeaf6ed7f
 800124c:	01010280 	.word	0x01010280
 8001250:	02020200 	.word	0x02020200
 8001254:	01ff0000 	.word	0x01ff0000
 8001258:	5c001000 	.word	0x5c001000
 800125c:	ffff0000 	.word	0xffff0000
 8001260:	51008000 	.word	0x51008000
 8001264:	52004000 	.word	0x52004000

08001268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001268:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800126c:	f7ff ff96 	bl	800119c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001270:	480c      	ldr	r0, [pc, #48]	@ (80012a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001272:	490d      	ldr	r1, [pc, #52]	@ (80012a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001274:	4a0d      	ldr	r2, [pc, #52]	@ (80012ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001278:	e002      	b.n	8001280 <LoopCopyDataInit>

0800127a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800127c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127e:	3304      	adds	r3, #4

08001280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001284:	d3f9      	bcc.n	800127a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001286:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001288:	4c0a      	ldr	r4, [pc, #40]	@ (80012b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800128c:	e001      	b.n	8001292 <LoopFillZerobss>

0800128e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001290:	3204      	adds	r2, #4

08001292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001294:	d3fb      	bcc.n	800128e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001296:	f00d f9e5 	bl	800e664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129a:	f7ff fba7 	bl	80009ec <main>
  bx  lr
 800129e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012a0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80012ac:	08011e78 	.word	0x08011e78
  ldr r2, =_sbss
 80012b0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80012b4:	200013b8 	.word	0x200013b8

080012b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b8:	e7fe      	b.n	80012b8 <ADC3_IRQHandler>
	...

080012bc <vARPRefreshCacheEntry>:

					/* If ARP stores the MAC address of IP addresses outside the
					 * network, than the MAC address of the gateway should not be
					 * overwritten. */
					BaseType_t bIsLocal[ 2 ];
					bIsLocal[ 0 ] = ( ( xARPCache[ x ].ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) );
 80012bc:	4a55      	ldr	r2, [pc, #340]	@ (8001414 <vARPRefreshCacheEntry+0x158>)
 80012be:	4b56      	ldr	r3, [pc, #344]	@ (8001418 <vARPRefreshCacheEntry+0x15c>)
{
 80012c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
					bIsLocal[ 0 ] = ( ( xARPCache[ x ].ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) );
 80012c4:	f8d2 9014 	ldr.w	r9, [r2, #20]
{
 80012c8:	b085      	sub	sp, #20
					bIsLocal[ 0 ] = ( ( xARPCache[ x ].ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) );
 80012ca:	685a      	ldr	r2, [r3, #4]
{
 80012cc:	468b      	mov	fp, r1
					bIsLocal[ 1 ] = ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) );
 80012ce:	ea89 0301 	eor.w	r3, r9, r1
	BaseType_t xMacEntry = -1;
 80012d2:	f04f 3aff 	mov.w	sl, #4294967295
	BaseType_t xUseEntry = 0;
 80012d6:	2100      	movs	r1, #0
{
 80012d8:	4607      	mov	r7, r0
					bIsLocal[ 1 ] = ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) );
 80012da:	4213      	tst	r3, r2
 80012dc:	4d4f      	ldr	r5, [pc, #316]	@ (800141c <vARPRefreshCacheEntry+0x160>)
		ucMinAgeFound--;
 80012de:	f04f 08ff 	mov.w	r8, #255	@ 0xff
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80012e2:	460c      	mov	r4, r1
					bIsLocal[ 1 ] = ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) );
 80012e4:	bf0c      	ite	eq
 80012e6:	2301      	moveq	r3, #1
 80012e8:	2300      	movne	r3, #0
	BaseType_t xIpEntry = -1;
 80012ea:	f8cd a00c 	str.w	sl, [sp, #12]
					bIsLocal[ 1 ] = ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) );
 80012ee:	9300      	str	r3, [sp, #0]
	BaseType_t xIpEntry = -1;
 80012f0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80012f4:	e010      	b.n	8001318 <vARPRefreshCacheEntry+0x5c>
				if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 80012f6:	2206      	movs	r2, #6
 80012f8:	4639      	mov	r1, r7
 80012fa:	4628      	mov	r0, r5
 80012fc:	f00d f8fb 	bl	800e4f6 <memcmp>
 8001300:	b350      	cbz	r0, 8001358 <vARPRefreshCacheEntry+0x9c>
			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8001302:	45b3      	cmp	fp, r6
 8001304:	d04b      	beq.n	800139e <vARPRefreshCacheEntry+0xe2>
				#endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
			}

			/* _HT_
			 * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
			else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 8001306:	79aa      	ldrb	r2, [r5, #6]
 8001308:	4542      	cmp	r2, r8
 800130a:	d201      	bcs.n	8001310 <vARPRefreshCacheEntry+0x54>
 800130c:	4690      	mov	r8, r2
 800130e:	9402      	str	r4, [sp, #8]
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8001310:	3401      	adds	r4, #1
 8001312:	350c      	adds	r5, #12
 8001314:	2c06      	cmp	r4, #6
 8001316:	d030      	beq.n	800137a <vARPRefreshCacheEntry+0xbe>
			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8001318:	f855 6c04 	ldr.w	r6, [r5, #-4]
			if( pxMACAddress != NULL )
 800131c:	2f00      	cmp	r7, #0
 800131e:	d1ea      	bne.n	80012f6 <vARPRefreshCacheEntry+0x3a>
			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8001320:	45b3      	cmp	fp, r6
 8001322:	d1f0      	bne.n	8001306 <vARPRefreshCacheEntry+0x4a>
			{
				/* Nothing happens to this cache entry for now. */
			}
		}

		if( xMacEntry >= 0 )
 8001324:	f1ba 3fff 	cmp.w	sl, #4294967295
 8001328:	d13c      	bne.n	80013a4 <vARPRefreshCacheEntry+0xe8>
		{
			/* No matching entry found. */
		}

		/* If the entry was not found, we use the oldest entry and set the IPaddress */
		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 800132a:	4d3d      	ldr	r5, [pc, #244]	@ (8001420 <vARPRefreshCacheEntry+0x164>)
 800132c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001330:	0063      	lsls	r3, r4, #1
 8001332:	f845 b022 	str.w	fp, [r5, r2, lsl #2]

		if( pxMACAddress != NULL )
 8001336:	b167      	cbz	r7, 8001352 <vARPRefreshCacheEntry+0x96>
		{
			( void ) memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 8001338:	4423      	add	r3, r4
 800133a:	6838      	ldr	r0, [r7, #0]

			iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
			/* And this entry does not need immediate attention */
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800133c:	f44f 71cb 	mov.w	r1, #406	@ 0x196
			( void ) memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	1d1a      	adds	r2, r3, #4
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8001344:	3308      	adds	r3, #8
			( void ) memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 8001346:	50a8      	str	r0, [r5, r2]
 8001348:	18ac      	adds	r4, r5, r2
 800134a:	88b8      	ldrh	r0, [r7, #4]
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800134c:	4a35      	ldr	r2, [pc, #212]	@ (8001424 <vARPRefreshCacheEntry+0x168>)
			( void ) memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 800134e:	80a0      	strh	r0, [r4, #4]
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8001350:	52d1      	strh	r1, [r2, r3]
		else
		{
			/* Nothing will be stored. */
		}
	}
}
 8001352:	b005      	add	sp, #20
 8001354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8001358:	45b3      	cmp	fp, r6
 800135a:	d036      	beq.n	80013ca <vARPRefreshCacheEntry+0x10e>
					bIsLocal[ 0 ] = ( ( xARPCache[ x ].ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) );
 800135c:	9b01      	ldr	r3, [sp, #4]
 800135e:	ea89 0606 	eor.w	r6, r9, r6
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8001362:	350c      	adds	r5, #12
					bIsLocal[ 0 ] = ( ( xARPCache[ x ].ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) );
 8001364:	421e      	tst	r6, r3
 8001366:	9b00      	ldr	r3, [sp, #0]
					if( bIsLocal[ 0 ] == bIsLocal[ 1 ] )
 8001368:	bf0c      	ite	eq
 800136a:	2201      	moveq	r2, #1
 800136c:	2200      	movne	r2, #0
 800136e:	429a      	cmp	r2, r3
 8001370:	bf08      	it	eq
 8001372:	46a2      	moveq	sl, r4
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8001374:	3401      	adds	r4, #1
 8001376:	2c06      	cmp	r4, #6
 8001378:	d1ce      	bne.n	8001318 <vARPRefreshCacheEntry+0x5c>
		if( xMacEntry >= 0 )
 800137a:	f1ba 3fff 	cmp.w	sl, #4294967295
			if( xIpEntry >= 0 )
 800137e:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
		if( xMacEntry >= 0 )
 8001382:	d038      	beq.n	80013f6 <vARPRefreshCacheEntry+0x13a>
			if( xIpEntry >= 0 )
 8001384:	1c59      	adds	r1, r3, #1
 8001386:	d10c      	bne.n	80013a2 <vARPRefreshCacheEntry+0xe6>
		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 8001388:	4d25      	ldr	r5, [pc, #148]	@ (8001420 <vARPRefreshCacheEntry+0x164>)
 800138a:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
 800138e:	ea4f 024a 	mov.w	r2, sl, lsl #1
 8001392:	f845 b021 	str.w	fp, [r5, r1, lsl #2]
		if( pxMACAddress != NULL )
 8001396:	b327      	cbz	r7, 80013e2 <vARPRefreshCacheEntry+0x126>
 8001398:	4654      	mov	r4, sl
 800139a:	0063      	lsls	r3, r4, #1
 800139c:	e7cc      	b.n	8001338 <vARPRefreshCacheEntry+0x7c>
			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 800139e:	9403      	str	r4, [sp, #12]
 80013a0:	e7b6      	b.n	8001310 <vARPRefreshCacheEntry+0x54>
 80013a2:	461c      	mov	r4, r3
				( void ) memset( &( xARPCache[ xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 80013a4:	4d1e      	ldr	r5, [pc, #120]	@ (8001420 <vARPRefreshCacheEntry+0x164>)
 80013a6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80013aa:	2200      	movs	r2, #0
 80013ac:	00a1      	lsls	r1, r4, #2
 80013ae:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 80013b2:	506a      	str	r2, [r5, r1]
 80013b4:	e9c4 2201 	strd	r2, r2, [r4, #4]
		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 80013b8:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
 80013bc:	f845 b022 	str.w	fp, [r5, r2, lsl #2]
		if( pxMACAddress != NULL )
 80013c0:	2f00      	cmp	r7, #0
 80013c2:	d0c6      	beq.n	8001352 <vARPRefreshCacheEntry+0x96>
 80013c4:	4654      	mov	r4, sl
 80013c6:	0063      	lsls	r3, r4, #1
 80013c8:	e7b6      	b.n	8001338 <vARPRefreshCacheEntry+0x7c>
					xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80013ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80013ce:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <vARPRefreshCacheEntry+0x168>)
 80013d0:	f44f 72cb 	mov.w	r2, #406	@ 0x196
 80013d4:	00a4      	lsls	r4, r4, #2
 80013d6:	3408      	adds	r4, #8
 80013d8:	531a      	strh	r2, [r3, r4]
}
 80013da:	b005      	add	sp, #20
 80013dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if( pxMACAddress != NULL )
 80013e0:	468a      	mov	sl, r1
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 80013e2:	eb02 030a 	add.w	r3, r2, sl
 80013e6:	2105      	movs	r1, #5
 80013e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001424 <vARPRefreshCacheEntry+0x168>)
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	3308      	adds	r3, #8
 80013ee:	52d1      	strh	r1, [r2, r3]
}
 80013f0:	b005      	add	sp, #20
 80013f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if( xIpEntry >= 0 )
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	d10a      	bne.n	8001410 <vARPRefreshCacheEntry+0x154>
		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 80013fa:	4d09      	ldr	r5, [pc, #36]	@ (8001420 <vARPRefreshCacheEntry+0x164>)
 80013fc:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8001400:	004a      	lsls	r2, r1, #1
 8001402:	f845 b023 	str.w	fp, [r5, r3, lsl #2]
		if( pxMACAddress != NULL )
 8001406:	2f00      	cmp	r7, #0
 8001408:	d0ea      	beq.n	80013e0 <vARPRefreshCacheEntry+0x124>
 800140a:	460c      	mov	r4, r1
 800140c:	4613      	mov	r3, r2
 800140e:	e793      	b.n	8001338 <vARPRefreshCacheEntry+0x7c>
 8001410:	461c      	mov	r4, r3
 8001412:	e78a      	b.n	800132a <vARPRefreshCacheEntry+0x6e>
 8001414:	20000014 	.word	0x20000014
 8001418:	2000037c 	.word	0x2000037c
 800141c:	20000224 	.word	0x20000224
 8001420:	20000220 	.word	0x20000220
 8001424:	20000222 	.word	0x20000222

08001428 <eARPProcessPacket>:
{
 8001428:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 800142a:	4e20      	ldr	r6, [pc, #128]	@ (80014ac <eARPProcessPacket+0x84>)
{
 800142c:	b083      	sub	sp, #12
	if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 800142e:	6975      	ldr	r5, [r6, #20]
 8001430:	b915      	cbnz	r5, 8001438 <eARPProcessPacket+0x10>
	eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8001432:	2000      	movs	r0, #0
}
 8001434:	b003      	add	sp, #12
 8001436:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch( pxARPHeader->usOperation )
 8001438:	8a83      	ldrh	r3, [r0, #20]
 800143a:	4604      	mov	r4, r0
	( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 800143c:	69c1      	ldr	r1, [r0, #28]
		switch( pxARPHeader->usOperation )
 800143e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
	ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8001442:	f8d0 2026 	ldr.w	r2, [r0, #38]	@ 0x26
		switch( pxARPHeader->usOperation )
 8001446:	d006      	beq.n	8001456 <eARPProcessPacket+0x2e>
 8001448:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800144c:	d1f1      	bne.n	8001432 <eARPProcessPacket+0xa>
				vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 800144e:	3016      	adds	r0, #22
 8001450:	f7ff ff34 	bl	80012bc <vARPRefreshCacheEntry>
				break;
 8001454:	e7ed      	b.n	8001432 <eARPProcessPacket+0xa>
				if( ulTargetProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 8001456:	4295      	cmp	r5, r2
 8001458:	d1eb      	bne.n	8001432 <eARPProcessPacket+0xa>
					vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 800145a:	f100 0716 	add.w	r7, r0, #22
 800145e:	9101      	str	r1, [sp, #4]
 8001460:	4638      	mov	r0, r7
 8001462:	f7ff ff2b 	bl	80012bc <vARPRefreshCacheEntry>
					if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 8001466:	9901      	ldr	r1, [sp, #4]
					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8001468:	2202      	movs	r2, #2
 800146a:	2300      	movs	r3, #0
					if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 800146c:	42a9      	cmp	r1, r5
					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 800146e:	7562      	strb	r2, [r4, #21]
						( void ) memset( pxARPHeader->xTargetHardwareAddress.ucBytes, 0, sizeof( MACAddress_t ) );
 8001470:	f104 0220 	add.w	r2, r4, #32
					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8001474:	7523      	strb	r3, [r4, #20]
					if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 8001476:	d00f      	beq.n	8001498 <eARPProcessPacket+0x70>
						( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 8001478:	f8d4 3016 	ldr.w	r3, [r4, #22]
 800147c:	6223      	str	r3, [r4, #32]
 800147e:	88bb      	ldrh	r3, [r7, #4]
 8001480:	8093      	strh	r3, [r2, #4]
					( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 8001482:	6830      	ldr	r0, [r6, #0]
						pxARPHeader->ulTargetProtocolAddress = 0UL;
 8001484:	f8c4 1026 	str.w	r1, [r4, #38]	@ 0x26
					( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 8001488:	f8c4 0016 	str.w	r0, [r4, #22]
					eReturn = eReturnEthernetFrame;
 800148c:	2002      	movs	r0, #2
					( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 800148e:	88b3      	ldrh	r3, [r6, #4]
 8001490:	80bb      	strh	r3, [r7, #4]
					( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 8001492:	6973      	ldr	r3, [r6, #20]
 8001494:	61e3      	str	r3, [r4, #28]
					eReturn = eReturnEthernetFrame;
 8001496:	e7cd      	b.n	8001434 <eARPProcessPacket+0xc>
						( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xBroadcastMACAddress ) );
 8001498:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <eARPProcessPacket+0x88>)
 800149a:	4619      	mov	r1, r3
						( void ) memset( pxARPHeader->xTargetHardwareAddress.ucBytes, 0, sizeof( MACAddress_t ) );
 800149c:	6223      	str	r3, [r4, #32]
						( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xBroadcastMACAddress ) );
 800149e:	6805      	ldr	r5, [r0, #0]
 80014a0:	8880      	ldrh	r0, [r0, #4]
 80014a2:	f8c4 5006 	str.w	r5, [r4, #6]
 80014a6:	8160      	strh	r0, [r4, #10]
						( void ) memset( pxARPHeader->xTargetHardwareAddress.ucBytes, 0, sizeof( MACAddress_t ) );
 80014a8:	8093      	strh	r3, [r2, #4]
						pxARPHeader->ulTargetProtocolAddress = 0UL;
 80014aa:	e7ea      	b.n	8001482 <eARPProcessPacket+0x5a>
 80014ac:	20000014 	.word	0x20000014
 80014b0:	08010120 	.word	0x08010120

080014b4 <eARPGetCacheEntry>:
 *         addressing needs a gateway but there isn't a gateway defined) then return
 *         eCantSendPacket.
 */
eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
									  MACAddress_t * const pxMACAddress )
{
 80014b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t ulAddressToLookup;

	ulAddressToLookup = *pulIPAddress;

	#if ( ipconfigUSE_LLMNR == 1 )
		if( ulAddressToLookup == ipLLMNR_IP_ADDR ) /* Is in network byte order. */
 80014b6:	4b34      	ldr	r3, [pc, #208]	@ (8001588 <eARPGetCacheEntry+0xd4>)
{
 80014b8:	460c      	mov	r4, r1
	ulAddressToLookup = *pulIPAddress;
 80014ba:	6806      	ldr	r6, [r0, #0]
		if( ulAddressToLookup == ipLLMNR_IP_ADDR ) /* Is in network byte order. */
 80014bc:	429e      	cmp	r6, r3
 80014be:	d106      	bne.n	80014ce <eARPGetCacheEntry+0x1a>
		{
			/* The LLMNR IP-address has a fixed virtual MAC address. */
			( void ) memcpy( pxMACAddress->ucBytes, xLLMNR_MacAdress.ucBytes, sizeof( MACAddress_t ) );
 80014c0:	4b32      	ldr	r3, [pc, #200]	@ (800158c <eARPGetCacheEntry+0xd8>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	889b      	ldrh	r3, [r3, #4]
 80014c6:	600a      	str	r2, [r1, #0]
 80014c8:	808b      	strh	r3, [r1, #4]
			eReturn = eARPCacheHit;
 80014ca:	2001      	movs	r0, #1
			}
		}
	}

	return eReturn;
}
 80014cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 80014ce:	4605      	mov	r5, r0
 80014d0:	4630      	mov	r0, r6
 80014d2:	f000 fe17 	bl	8002104 <xIsIPv4Multicast>
 80014d6:	b9b0      	cbnz	r0, 8001506 <eARPGetCacheEntry+0x52>
	else if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||               /* Is it the general broadcast address 255.255.255.255? */
 80014d8:	682b      	ldr	r3, [r5, #0]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	d00d      	beq.n	80014fa <eARPGetCacheEntry+0x46>
			 ( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) ) /* Or a local broadcast address, eg 192.168.1.255? */
 80014de:	492c      	ldr	r1, [pc, #176]	@ (8001590 <eARPGetCacheEntry+0xdc>)
	else if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||               /* Is it the general broadcast address 255.255.255.255? */
 80014e0:	690a      	ldr	r2, [r1, #16]
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d009      	beq.n	80014fa <eARPGetCacheEntry+0x46>
	else if( *ipLOCAL_IP_ADDRESS_POINTER == 0UL )
 80014e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001594 <eARPGetCacheEntry+0xe0>)
 80014e8:	6952      	ldr	r2, [r2, #20]
 80014ea:	b122      	cbz	r2, 80014f6 <eARPGetCacheEntry+0x42>
		if( ( *pulIPAddress & xNetworkAddressing.ulNetMask ) != ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) )
 80014ec:	405a      	eors	r2, r3
 80014ee:	684e      	ldr	r6, [r1, #4]
 80014f0:	4232      	tst	r2, r6
 80014f2:	d10d      	bne.n	8001510 <eARPGetCacheEntry+0x5c>
			if( ulAddressToLookup == 0UL )
 80014f4:	b9eb      	cbnz	r3, 8001532 <eARPGetCacheEntry+0x7e>
		{
			/* A matching valid entry was found. */
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
			{
				/* This entry is waiting an ARP reply, so is not valid. */
				eReturn = eCantSendPacket;
 80014f6:	2002      	movs	r0, #2
}
 80014f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 80014fa:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <eARPGetCacheEntry+0xe4>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	889b      	ldrh	r3, [r3, #4]
 8001500:	6022      	str	r2, [r4, #0]
 8001502:	80a3      	strh	r3, [r4, #4]
		eReturn = eARPCacheHit;
 8001504:	e7e1      	b.n	80014ca <eARPGetCacheEntry+0x16>
		vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 8001506:	4621      	mov	r1, r4
 8001508:	4630      	mov	r0, r6
 800150a:	f000 fe05 	bl	8002118 <vSetMultiCastIPv4MacAddress>
		eReturn = eARPCacheHit;
 800150e:	e7dc      	b.n	80014ca <eARPGetCacheEntry+0x16>
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8001510:	4602      	mov	r2, r0
 8001512:	4684      	mov	ip, r0
 8001514:	4e21      	ldr	r6, [pc, #132]	@ (800159c <eARPGetCacheEntry+0xe8>)
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8001516:	f856 702c 	ldr.w	r7, [r6, ip, lsl #2]
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800151a:	f10c 0c03 	add.w	ip, ip, #3
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 800151e:	42bb      	cmp	r3, r7
 8001520:	d023      	beq.n	800156a <eARPGetCacheEntry+0xb6>
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8001522:	3201      	adds	r2, #1
 8001524:	2a06      	cmp	r2, #6
 8001526:	d1f6      	bne.n	8001516 <eARPGetCacheEntry+0x62>
				if( xNetworkAddressing.ulGatewayAddress != ( uint32_t ) 0U )
 8001528:	688a      	ldr	r2, [r1, #8]
 800152a:	2a00      	cmp	r2, #0
 800152c:	d0e2      	beq.n	80014f4 <eARPGetCacheEntry+0x40>
 800152e:	4613      	mov	r3, r2
 8001530:	e000      	b.n	8001534 <eARPGetCacheEntry+0x80>
 8001532:	4e1a      	ldr	r6, [pc, #104]	@ (800159c <eARPGetCacheEntry+0xe8>)
 8001534:	2200      	movs	r2, #0
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8001536:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800153a:	3203      	adds	r2, #3
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 800153c:	4299      	cmp	r1, r3
 800153e:	d005      	beq.n	800154c <eARPGetCacheEntry+0x98>
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8001540:	3001      	adds	r0, #1
 8001542:	2806      	cmp	r0, #6
 8001544:	d1f7      	bne.n	8001536 <eARPGetCacheEntry+0x82>
				eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress );
 8001546:	2000      	movs	r0, #0
					*pulIPAddress = ulAddressToLookup;
 8001548:	602b      	str	r3, [r5, #0]
}
 800154a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800154c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001550:	eb06 0380 	add.w	r3, r6, r0, lsl #2
 8001554:	0080      	lsls	r0, r0, #2
 8001556:	7adb      	ldrb	r3, [r3, #11]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0cc      	beq.n	80014f6 <eARPGetCacheEntry+0x42>
			}
			else
			{
				/* A valid entry was found. */
				( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800155c:	1d03      	adds	r3, r0, #4
 800155e:	58f0      	ldr	r0, [r6, r3]
 8001560:	441e      	add	r6, r3
 8001562:	6020      	str	r0, [r4, #0]
 8001564:	88b3      	ldrh	r3, [r6, #4]
 8001566:	80a3      	strh	r3, [r4, #4]
				if( eReturn == eARPCacheMiss )
 8001568:	e7af      	b.n	80014ca <eARPGetCacheEntry+0x16>
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800156a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800156e:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8001572:	0092      	lsls	r2, r2, #2
 8001574:	7adb      	ldrb	r3, [r3, #11]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0bd      	beq.n	80014f6 <eARPGetCacheEntry+0x42>
				( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800157a:	3204      	adds	r2, #4
 800157c:	58b0      	ldr	r0, [r6, r2]
 800157e:	4432      	add	r2, r6
 8001580:	6020      	str	r0, [r4, #0]
 8001582:	8893      	ldrh	r3, [r2, #4]
 8001584:	80a3      	strh	r3, [r4, #4]
				if( eReturn == eARPCacheHit )
 8001586:	e7a0      	b.n	80014ca <eARPGetCacheEntry+0x16>
 8001588:	fc0000e0 	.word	0xfc0000e0
 800158c:	0800ff34 	.word	0x0800ff34
 8001590:	2000037c 	.word	0x2000037c
 8001594:	20000014 	.word	0x20000014
 8001598:	08010120 	.word	0x08010120
 800159c:	20000220 	.word	0x20000220

080015a0 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer: Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80015a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	void * pvCopyDest;

	/* Buffer allocation ensures that buffers always have space
	 * for an ARP packet. See buffer allocation implementations 1
	 * and 2 under portable/BufferManagement. */
	configASSERT( pxNetworkBuffer != NULL );
 80015a2:	4604      	mov	r4, r0
 80015a4:	b3a0      	cbz	r0, 8001610 <vARPGenerateRequestPacket+0x70>
	configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 80015a6:	69e3      	ldr	r3, [r4, #28]
 80015a8:	2b29      	cmp	r3, #41	@ 0x29
 80015aa:	d92b      	bls.n	8001604 <vARPGenerateRequestPacket+0x64>

	pxARPPacket = ipCAST_PTR_TO_TYPE_PTR( ARPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 80015ac:	69a5      	ldr	r5, [r4, #24]
	 * compliant with MISRA Rule 21.15.  These should be
	 * optimized away.
	 */
	pvCopySource = xDefaultPartARPPacketHeader;
	pvCopyDest = pxARPPacket;
	( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 80015ae:	4e1b      	ldr	r6, [pc, #108]	@ (800161c <vARPGenerateRequestPacket+0x7c>)
 80015b0:	46ac      	mov	ip, r5
 80015b2:	f106 0720 	add.w	r7, r6, #32
 80015b6:	46b6      	mov	lr, r6
 80015b8:	f10c 0c10 	add.w	ip, ip, #16
 80015bc:	3610      	adds	r6, #16
 80015be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80015c2:	45be      	cmp	lr, r7
 80015c4:	f84c 0c10 	str.w	r0, [ip, #-16]
 80015c8:	f84c 1c0c 	str.w	r1, [ip, #-12]
 80015cc:	f84c 2c08 	str.w	r2, [ip, #-8]
 80015d0:	f84c 3c04 	str.w	r3, [ip, #-4]
 80015d4:	d1ef      	bne.n	80015b6 <vARPGenerateRequestPacket+0x16>

	pvCopySource = ipLOCAL_MAC_ADDRESS;
	pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
	( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 80015d6:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <vARPGenerateRequestPacket+0x80>)
	pvCopySource = ipLOCAL_IP_ADDRESS_POINTER;
	pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
	( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
	pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;

	pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 80015d8:	212a      	movs	r1, #42	@ 0x2a
	( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 80015da:	6830      	ldr	r0, [r6, #0]
 80015dc:	88b2      	ldrh	r2, [r6, #4]
 80015de:	f8cc 0000 	str.w	r0, [ip]
 80015e2:	f8ac 2004 	strh.w	r2, [ip, #4]
	( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 80015e6:	6818      	ldr	r0, [r3, #0]
 80015e8:	f8c5 0006 	str.w	r0, [r5, #6]
 80015ec:	889a      	ldrh	r2, [r3, #4]
	( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 80015ee:	f8c5 0016 	str.w	r0, [r5, #22]
	( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 80015f2:	816a      	strh	r2, [r5, #10]
	( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 80015f4:	695b      	ldr	r3, [r3, #20]
	( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 80015f6:	836a      	strh	r2, [r5, #26]
	( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 80015f8:	61eb      	str	r3, [r5, #28]
	pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;
 80015fa:	6963      	ldr	r3, [r4, #20]
 80015fc:	f8c5 3026 	str.w	r3, [r5, #38]	@ 0x26
	pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8001600:	61e1      	str	r1, [r4, #28]

	iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->ulIPAddress );
}
 8001602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 8001604:	f44f 7155 	mov.w	r1, #852	@ 0x354
 8001608:	4806      	ldr	r0, [pc, #24]	@ (8001624 <vARPGenerateRequestPacket+0x84>)
 800160a:	f7ff fb75 	bl	8000cf8 <vAssertCalled>
 800160e:	e7cd      	b.n	80015ac <vARPGenerateRequestPacket+0xc>
	configASSERT( pxNetworkBuffer != NULL );
 8001610:	f240 3153 	movw	r1, #851	@ 0x353
 8001614:	4803      	ldr	r0, [pc, #12]	@ (8001624 <vARPGenerateRequestPacket+0x84>)
 8001616:	f7ff fb6f 	bl	8000cf8 <vAssertCalled>
 800161a:	e7c4      	b.n	80015a6 <vARPGenerateRequestPacket+0x6>
 800161c:	0800fc84 	.word	0x0800fc84
 8001620:	20000014 	.word	0x20000014
 8001624:	0800fe58 	.word	0x0800fe58

08001628 <FreeRTOS_OutputARPRequest>:
{
 8001628:	b530      	push	{r4, r5, lr}
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 800162a:	2100      	movs	r1, #0
{
 800162c:	b083      	sub	sp, #12
 800162e:	4605      	mov	r5, r0
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 8001630:	202a      	movs	r0, #42	@ 0x2a
 8001632:	f005 f9ad 	bl	8006990 <pxGetNetworkBufferWithDescriptor>
	if( pxNetworkBuffer != NULL )
 8001636:	b308      	cbz	r0, 800167c <FreeRTOS_OutputARPRequest+0x54>
 8001638:	4604      	mov	r4, r0
		pxNetworkBuffer->ulIPAddress = ulIPAddress;
 800163a:	6145      	str	r5, [r0, #20]
		vARPGenerateRequestPacket( pxNetworkBuffer );
 800163c:	f7ff ffb0 	bl	80015a0 <vARPGenerateRequestPacket>
				if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8001640:	69e3      	ldr	r3, [r4, #28]
 8001642:	2b3b      	cmp	r3, #59	@ 0x3b
 8001644:	d806      	bhi.n	8001654 <FreeRTOS_OutputARPRequest+0x2c>
						pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8001646:	2100      	movs	r1, #0
 8001648:	69a2      	ldr	r2, [r4, #24]
 800164a:	54d1      	strb	r1, [r2, r3]
					for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800164c:	3301      	adds	r3, #1
 800164e:	2b3c      	cmp	r3, #60	@ 0x3c
 8001650:	d1fa      	bne.n	8001648 <FreeRTOS_OutputARPRequest+0x20>
					pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8001652:	61e3      	str	r3, [r4, #28]
		if( xIsCallingFromIPTask() != 0 )
 8001654:	f000 fb64 	bl	8001d20 <xIsCallingFromIPTask>
 8001658:	b130      	cbz	r0, 8001668 <FreeRTOS_OutputARPRequest+0x40>
			( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 800165a:	2101      	movs	r1, #1
 800165c:	4620      	mov	r0, r4
}
 800165e:	b003      	add	sp, #12
 8001660:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 8001664:	f005 bf14 	b.w	8007490 <xNetworkInterfaceOutput>
			xSendEvent.eEventType = eNetworkTxEvent;
 8001668:	2302      	movs	r3, #2
			if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800166a:	f04f 31ff 	mov.w	r1, #4294967295
 800166e:	4668      	mov	r0, sp
			xSendEvent.pvData = pxNetworkBuffer;
 8001670:	9401      	str	r4, [sp, #4]
			xSendEvent.eEventType = eNetworkTxEvent;
 8001672:	f88d 3000 	strb.w	r3, [sp]
			if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8001676:	f000 fc9f 	bl	8001fb8 <xSendEventStructToIPTask>
 800167a:	b108      	cbz	r0, 8001680 <FreeRTOS_OutputARPRequest+0x58>
}
 800167c:	b003      	add	sp, #12
 800167e:	bd30      	pop	{r4, r5, pc}
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8001680:	4620      	mov	r0, r4
 8001682:	f005 f9c1 	bl	8006a08 <vReleaseNetworkBufferAndDescriptor>
}
 8001686:	e7f9      	b.n	800167c <FreeRTOS_OutputARPRequest+0x54>

08001688 <vARPAgeCache>:
{
 8001688:	b538      	push	{r3, r4, r5, lr}
 800168a:	4c16      	ldr	r4, [pc, #88]	@ (80016e4 <vARPAgeCache+0x5c>)
 800168c:	f104 0548 	add.w	r5, r4, #72	@ 0x48
 8001690:	e004      	b.n	800169c <vARPAgeCache+0x14>
			else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8001692:	2a03      	cmp	r2, #3
 8001694:	d90b      	bls.n	80016ae <vARPAgeCache+0x26>
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8001696:	340c      	adds	r4, #12
 8001698:	42ac      	cmp	r4, r5
 800169a:	d012      	beq.n	80016c2 <vARPAgeCache+0x3a>
		if( xARPCache[ x ].ucAge > 0U )
 800169c:	7aa3      	ldrb	r3, [r4, #10]
			( xARPCache[ x ].ucAge )--;
 800169e:	1e5a      	subs	r2, r3, #1
		if( xARPCache[ x ].ucAge > 0U )
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f8      	beq.n	8001696 <vARPAgeCache+0xe>
			( xARPCache[ x ].ucAge )--;
 80016a4:	b2d2      	uxtb	r2, r2
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80016a6:	7ae3      	ldrb	r3, [r4, #11]
			( xARPCache[ x ].ucAge )--;
 80016a8:	72a2      	strb	r2, [r4, #10]
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f1      	bne.n	8001692 <vARPAgeCache+0xa>
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 80016ae:	6820      	ldr	r0, [r4, #0]
 80016b0:	f7ff ffba 	bl	8001628 <FreeRTOS_OutputARPRequest>
			if( xARPCache[ x ].ucAge == 0U )
 80016b4:	7aa3      	ldrb	r3, [r4, #10]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1ed      	bne.n	8001696 <vARPAgeCache+0xe>
				xARPCache[ x ].ulIPAddress = 0UL;
 80016ba:	6023      	str	r3, [r4, #0]
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80016bc:	340c      	adds	r4, #12
 80016be:	42ac      	cmp	r4, r5
 80016c0:	d1ec      	bne.n	800169c <vARPAgeCache+0x14>
	if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 80016c2:	4d09      	ldr	r5, [pc, #36]	@ (80016e8 <vARPAgeCache+0x60>)
	xTimeNow = xTaskGetTickCount();
 80016c4:	f007 fd22 	bl	800910c <xTaskGetTickCount>
 80016c8:	4604      	mov	r4, r0
	if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 80016ca:	682b      	ldr	r3, [r5, #0]
 80016cc:	b123      	cbz	r3, 80016d8 <vARPAgeCache+0x50>
 80016ce:	1ac3      	subs	r3, r0, r3
 80016d0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d904      	bls.n	80016e2 <vARPAgeCache+0x5a>
		FreeRTOS_OutputARPRequest( *ipLOCAL_IP_ADDRESS_POINTER );
 80016d8:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <vARPAgeCache+0x64>)
 80016da:	6958      	ldr	r0, [r3, #20]
 80016dc:	f7ff ffa4 	bl	8001628 <FreeRTOS_OutputARPRequest>
		xLastGratuitousARPTime = xTimeNow;
 80016e0:	602c      	str	r4, [r5, #0]
}
 80016e2:	bd38      	pop	{r3, r4, r5, pc}
 80016e4:	20000220 	.word	0x20000220
 80016e8:	2000021c 	.word	0x2000021c
 80016ec:	20000014 	.word	0x20000014

080016f0 <xARPWaitResolution>:
{
 80016f0:	b510      	push	{r4, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	e9cd 1000 	strd	r1, r0, [sp]
	xLookupResult = eARPGetCacheEntry( &( ulIPAddress ), &( xMACAddress ) );
 80016f8:	a801      	add	r0, sp, #4
 80016fa:	a902      	add	r1, sp, #8
 80016fc:	f7ff feda 	bl	80014b4 <eARPGetCacheEntry>
	if( xLookupResult == eARPCacheMiss )
 8001700:	4604      	mov	r4, r0
 8001702:	b130      	cbz	r0, 8001712 <xARPWaitResolution+0x22>
	BaseType_t xResult = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 8001704:	2c01      	cmp	r4, #1
}
 8001706:	bf14      	ite	ne
 8001708:	f06f 007c 	mvnne.w	r0, #124	@ 0x7c
 800170c:	2000      	moveq	r0, #0
 800170e:	b006      	add	sp, #24
 8001710:	bd10      	pop	{r4, pc}
		FreeRTOS_OutputARPRequest( ulIPAddress );
 8001712:	9801      	ldr	r0, [sp, #4]
 8001714:	f7ff ff88 	bl	8001628 <FreeRTOS_OutputARPRequest>
		vTaskSetTimeOutState( &xTimeOut );
 8001718:	a804      	add	r0, sp, #16
 800171a:	f007 ffad 	bl	8009678 <vTaskSetTimeOutState>
 800171e:	e003      	b.n	8001728 <xARPWaitResolution+0x38>
			if( ( xTaskCheckForTimeOut( &( xTimeOut ), &( uxTicksToWait ) ) == pdTRUE ) ||
 8001720:	2b01      	cmp	r3, #1
 8001722:	d0ef      	beq.n	8001704 <xARPWaitResolution+0x14>
			vTaskDelay( uxSleepTime );
 8001724:	f007 fe5e 	bl	80093e4 <vTaskDelay>
			xLookupResult = eARPGetCacheEntry( &( ulIPAddress ), &( xMACAddress ) );
 8001728:	a902      	add	r1, sp, #8
 800172a:	a801      	add	r0, sp, #4
 800172c:	f7ff fec2 	bl	80014b4 <eARPGetCacheEntry>
 8001730:	4604      	mov	r4, r0
			if( ( xTaskCheckForTimeOut( &( xTimeOut ), &( uxTicksToWait ) ) == pdTRUE ) ||
 8001732:	4669      	mov	r1, sp
 8001734:	a804      	add	r0, sp, #16
 8001736:	f007 ffc7 	bl	80096c8 <xTaskCheckForTimeOut>
 800173a:	4603      	mov	r3, r0
			vTaskDelay( uxSleepTime );
 800173c:	200a      	movs	r0, #10
			if( ( xTaskCheckForTimeOut( &( xTimeOut ), &( uxTicksToWait ) ) == pdTRUE ) ||
 800173e:	2c00      	cmp	r4, #0
 8001740:	d0ee      	beq.n	8001720 <xARPWaitResolution+0x30>
 8001742:	e7df      	b.n	8001704 <xARPWaitResolution+0x14>

08001744 <FreeRTOS_ClearARP>:
/**
 * @brief A call to this function will clear the ARP cache.
 */
void FreeRTOS_ClearARP( void )
{
	( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 8001744:	2248      	movs	r2, #72	@ 0x48
 8001746:	2100      	movs	r1, #0
 8001748:	4801      	ldr	r0, [pc, #4]	@ (8001750 <FreeRTOS_ClearARP+0xc>)
 800174a:	f00c ba3d 	b.w	800dbc8 <memset>
 800174e:	bf00      	nop
 8001750:	20000220 	.word	0x20000220

08001754 <prvSkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
	_static size_t prvSkipNameField( const uint8_t * pucByte,
									 size_t uxLength )
	{
 8001754:	4602      	mov	r2, r0
		size_t uxChunkLength;
		size_t uxSourceLenCpy = uxLength;
		size_t uxIndex = 0U;

		if( uxSourceLenCpy == 0U )
 8001756:	b1a1      	cbz	r1, 8001782 <prvSkipNameField+0x2e>
			uxIndex = 0U;
		}

		/* Determine if the name is the fully coded name, or an offset to the name
		 * elsewhere in the message. */
		else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8001758:	7803      	ldrb	r3, [r0, #0]
 800175a:	f003 00c0 	and.w	r0, r3, #192	@ 0xc0
 800175e:	28c0      	cmp	r0, #192	@ 0xc0
 8001760:	d018      	beq.n	8001794 <prvSkipNameField+0x40>
			}
		}
		else
		{
			/* pucByte points to the full name. Walk over the string. */
			while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 8001762:	2901      	cmp	r1, #1
		size_t uxIndex = 0U;
 8001764:	f04f 0000 	mov.w	r0, #0
			while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 8001768:	d01a      	beq.n	80017a0 <prvSkipNameField+0x4c>
 800176a:	b923      	cbnz	r3, 8001776 <prvSkipNameField+0x22>
 800176c:	e018      	b.n	80017a0 <prvSkipNameField+0x4c>
 800176e:	5c13      	ldrb	r3, [r2, r0]
 8001770:	b14b      	cbz	r3, 8001786 <prvSkipNameField+0x32>
 8001772:	2901      	cmp	r1, #1
 8001774:	d007      	beq.n	8001786 <prvSkipNameField+0x32>
			{
				/* Conversion to size_t causes addition to be done
				 * in size_t */
				uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 8001776:	3301      	adds	r3, #1

				if( uxSourceLenCpy > uxChunkLength )
 8001778:	428b      	cmp	r3, r1
				{
					uxSourceLenCpy -= uxChunkLength;
					uxIndex += uxChunkLength;
 800177a:	4418      	add	r0, r3
					uxSourceLenCpy -= uxChunkLength;
 800177c:	eba1 0103 	sub.w	r1, r1, r3
				if( uxSourceLenCpy > uxChunkLength )
 8001780:	d3f5      	bcc.n	800176e <prvSkipNameField+0x1a>
			uxIndex = 0U;
 8001782:	2000      	movs	r0, #0
				}
			}
		}

		return uxIndex;
	}
 8001784:	4770      	bx	lr
			if( uxIndex > 0U )
 8001786:	2800      	cmp	r0, #0
 8001788:	d0fc      	beq.n	8001784 <prvSkipNameField+0x30>
				if( pucByte[ uxIndex ] == 0U )
 800178a:	5c13      	ldrb	r3, [r2, r0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f8      	bne.n	8001782 <prvSkipNameField+0x2e>
					uxIndex++;
 8001790:	3001      	adds	r0, #1
 8001792:	4770      	bx	lr
			if( uxSourceLenCpy > sizeof( uint16_t ) )
 8001794:	2902      	cmp	r1, #2
 8001796:	bf94      	ite	ls
 8001798:	2100      	movls	r1, #0
 800179a:	2101      	movhi	r1, #1
 800179c:	0048      	lsls	r0, r1, #1
 800179e:	4770      	bx	lr
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop

080017a4 <prvProcessDNSCache.isra.0>:
 * @param[in] xLookUp: pdTRUE if a look-up is expected, pdFALSE, when the DNS cache must
 *                     be updated.
 *
 * @return
 */
		static BaseType_t prvProcessDNSCache( const char * pcName,
 80017a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017a8:	b083      	sub	sp, #12
 80017aa:	469b      	mov	fp, r3
 80017ac:	4606      	mov	r6, r0
 80017ae:	4688      	mov	r8, r1
 80017b0:	4692      	mov	sl, r2
											  uint32_t ulTTL,
											  BaseType_t xLookUp )
		{
			BaseType_t x;
			BaseType_t xFound = pdFALSE;
			uint32_t ulCurrentTimeSeconds = ( xTaskGetTickCount() / portTICK_PERIOD_MS ) / 1000UL;
 80017b2:	f007 fcab 	bl	800910c <xTaskGetTickCount>
 80017b6:	4b56      	ldr	r3, [pc, #344]	@ (8001910 <prvProcessDNSCache.isra.0+0x16c>)
 80017b8:	fba3 3700 	umull	r3, r7, r3, r0
 80017bc:	09bf      	lsrs	r7, r7, #6
			uint32_t ulIPAddressIndex = 0;
			static BaseType_t xFreeEntry = 0;

			configASSERT( ( pcName != NULL ) );
 80017be:	b34e      	cbz	r6, 8001814 <prvProcessDNSCache.isra.0+0x70>

			/* For each entry in the DNS cache table. */
			for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 80017c0:	f8df 9168 	ldr.w	r9, [pc, #360]	@ 800192c <prvProcessDNSCache.isra.0+0x188>
 80017c4:	2500      	movs	r5, #0
 80017c6:	464c      	mov	r4, r9
			{
				if( xDNSCache[ x ].pcName[ 0 ] == ( char ) 0 )
 80017c8:	7c23      	ldrb	r3, [r4, #16]
				{
					continue;
				}

				if( strcmp( xDNSCache[ x ].pcName, pcName ) == 0 )
 80017ca:	f104 0010 	add.w	r0, r4, #16
 80017ce:	4631      	mov	r1, r6
			for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 80017d0:	342c      	adds	r4, #44	@ 0x2c
				if( xDNSCache[ x ].pcName[ 0 ] == ( char ) 0 )
 80017d2:	b11b      	cbz	r3, 80017dc <prvProcessDNSCache.isra.0+0x38>
				if( strcmp( xDNSCache[ x ].pcName, pcName ) == 0 )
 80017d4:	f7fe fd84 	bl	80002e0 <strcmp>
 80017d8:	2800      	cmp	r0, #0
 80017da:	d04d      	beq.n	8001878 <prvProcessDNSCache.isra.0+0xd4>
			for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 80017dc:	3501      	adds	r5, #1
 80017de:	2d04      	cmp	r5, #4
 80017e0:	d1f2      	bne.n	80017c8 <prvProcessDNSCache.isra.0+0x24>
				}
			}

			if( xFound == pdFALSE )
			{
				if( xLookUp != pdFALSE )
 80017e2:	f1bb 0f00 	cmp.w	fp, #0
 80017e6:	d10f      	bne.n	8001808 <prvProcessDNSCache.isra.0+0x64>
					*pulIP = 0UL;
				}
				else
				{
					/* Add or update the item. */
					if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 80017e8:	4630      	mov	r0, r6
 80017ea:	f7fe fd83 	bl	80002f4 <strlen>
 80017ee:	280f      	cmp	r0, #15
 80017f0:	d916      	bls.n	8001820 <prvProcessDNSCache.isra.0+0x7c>
						xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ] = *pulIP;
 80017f2:	f8d8 3000 	ldr.w	r3, [r8]
				}
			}

			if( ( xLookUp == 0 ) || ( *pulIP != 0UL ) )
			{
				FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", ( xLookUp != 0 ) ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
 80017f6:	4947      	ldr	r1, [pc, #284]	@ (8001914 <prvProcessDNSCache.isra.0+0x170>)
 80017f8:	ba1b      	rev	r3, r3
 80017fa:	4632      	mov	r2, r6
 80017fc:	4846      	ldr	r0, [pc, #280]	@ (8001918 <prvProcessDNSCache.isra.0+0x174>)
			}

			return xFound;
		}
 80017fe:	b003      	add	sp, #12
 8001800:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", ( xLookUp != 0 ) ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
 8001804:	f00b bb82 	b.w	800cf0c <lUDPLoggingPrintf>
					*pulIP = 0UL;
 8001808:	2300      	movs	r3, #0
 800180a:	f8c8 3000 	str.w	r3, [r8]
		}
 800180e:	b003      	add	sp, #12
 8001810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			configASSERT( ( pcName != NULL ) );
 8001814:	f240 71d9 	movw	r1, #2009	@ 0x7d9
 8001818:	4840      	ldr	r0, [pc, #256]	@ (800191c <prvProcessDNSCache.isra.0+0x178>)
 800181a:	f7ff fa6d 	bl	8000cf8 <vAssertCalled>
 800181e:	e7cf      	b.n	80017c0 <prvProcessDNSCache.isra.0+0x1c>
						( void ) strcpy( xDNSCache[ xFreeEntry ].pcName, pcName );
 8001820:	4d3f      	ldr	r5, [pc, #252]	@ (8001920 <prvProcessDNSCache.isra.0+0x17c>)
 8001822:	242c      	movs	r4, #44	@ 0x2c
 8001824:	1c42      	adds	r2, r0, #1
 8001826:	4631      	mov	r1, r6
 8001828:	682b      	ldr	r3, [r5, #0]
 800182a:	fb03 f404 	mul.w	r4, r3, r4
 800182e:	9301      	str	r3, [sp, #4]
 8001830:	f104 0010 	add.w	r0, r4, #16
 8001834:	4448      	add	r0, r9
 8001836:	f00c f8f3 	bl	800da20 <memcpy>
						xFreeEntry++;
 800183a:	9b01      	ldr	r3, [sp, #4]
							( void ) memset( &xDNSCache[ xFreeEntry ].ulIPAddresses[ 1 ],
 800183c:	1d21      	adds	r1, r4, #4
							xDNSCache[ xFreeEntry ].ucNumIPAddresses = 1;
 800183e:	2001      	movs	r0, #1
						xFreeEntry++;
 8001840:	1c5a      	adds	r2, r3, #1
						xDNSCache[ xFreeEntry ].ulIPAddresses[ 0 ] = *pulIP;
 8001842:	f8d8 3000 	ldr.w	r3, [r8]
 8001846:	f849 3004 	str.w	r3, [r9, r4]
 800184a:	eb09 0304 	add.w	r3, r9, r4
						if( xFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 800184e:	2a04      	cmp	r2, #4
							xDNSCache[ xFreeEntry ].ucNumIPAddresses = 1;
 8001850:	f104 0428 	add.w	r4, r4, #40	@ 0x28
						xFreeEntry++;
 8001854:	602a      	str	r2, [r5, #0]
							xFreeEntry = 0;
 8001856:	bf08      	it	eq
 8001858:	f8c5 b000 	streq.w	fp, [r5]
						xDNSCache[ xFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 800185c:	e9c3 a708 	strd	sl, r7, [r3, #32]
							( void ) memset( &xDNSCache[ xFreeEntry ].ulIPAddresses[ 1 ],
 8001860:	eb09 0301 	add.w	r3, r9, r1
							xDNSCache[ xFreeEntry ].ucNumIPAddresses = 1;
 8001864:	f829 0004 	strh.w	r0, [r9, r4]
							( void ) memset( &xDNSCache[ xFreeEntry ].ulIPAddresses[ 1 ],
 8001868:	f849 b001 	str.w	fp, [r9, r1]
				FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", ( xLookUp != 0 ) ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
 800186c:	4929      	ldr	r1, [pc, #164]	@ (8001914 <prvProcessDNSCache.isra.0+0x170>)
							( void ) memset( &xDNSCache[ xFreeEntry ].ulIPAddresses[ 1 ],
 800186e:	e9c3 bb01 	strd	fp, fp, [r3, #4]
			if( ( xLookUp == 0 ) || ( *pulIP != 0UL ) )
 8001872:	f8d8 3000 	ldr.w	r3, [r8]
 8001876:	e7bf      	b.n	80017f8 <prvProcessDNSCache.isra.0+0x54>
					if( xLookUp != pdFALSE )
 8001878:	f1bb 0f00 	cmp.w	fp, #0
 800187c:	d024      	beq.n	80018c8 <prvProcessDNSCache.isra.0+0x124>
						if( ulCurrentTimeSeconds < ( xDNSCache[ x ].ulTimeWhenAddedInSeconds + FreeRTOS_ntohl( xDNSCache[ x ].ulTTL ) ) )
 800187e:	242c      	movs	r4, #44	@ 0x2c
 8001880:	4b28      	ldr	r3, [pc, #160]	@ (8001924 <prvProcessDNSCache.isra.0+0x180>)
 8001882:	fb05 f404 	mul.w	r4, r5, r4
 8001886:	591b      	ldr	r3, [r3, r4]
 8001888:	444c      	add	r4, r9
 800188a:	ba1b      	rev	r3, r3
 800188c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800188e:	4413      	add	r3, r2
 8001890:	429f      	cmp	r7, r3
 8001892:	d233      	bcs.n	80018fc <prvProcessDNSCache.isra.0+0x158>
								ucIndex = xDNSCache[ x ].ucCurrentIPAddress % xDNSCache[ x ].ucNumIPAddresses;
 8001894:	f894 1029 	ldrb.w	r1, [r4, #41]	@ 0x29
							*pulIP = xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ];
 8001898:	eb05 0385 	add.w	r3, r5, r5, lsl #2
								ucIndex = xDNSCache[ x ].ucCurrentIPAddress % xDNSCache[ x ].ucNumIPAddresses;
 800189c:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
							*pulIP = xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ];
 80018a0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
								ucIndex = xDNSCache[ x ].ucCurrentIPAddress % xDNSCache[ x ].ucNumIPAddresses;
 80018a4:	fbb1 f2f0 	udiv	r2, r1, r0
 80018a8:	fb00 1212 	mls	r2, r0, r2, r1
								xDNSCache[ x ].ucCurrentIPAddress++;
 80018ac:	3101      	adds	r1, #1
								ulIPAddressIndex = ucIndex;
 80018ae:	f002 0203 	and.w	r2, r2, #3
								xDNSCache[ x ].ucCurrentIPAddress++;
 80018b2:	f884 1029 	strb.w	r1, [r4, #41]	@ 0x29
							*pulIP = xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ];
 80018b6:	4413      	add	r3, r2
 80018b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80018bc:	f8c8 3000 	str.w	r3, [r8]
			if( ( xLookUp == 0 ) || ( *pulIP != 0UL ) )
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0a4      	beq.n	800180e <prvProcessDNSCache.isra.0+0x6a>
				FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", ( xLookUp != 0 ) ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
 80018c4:	4918      	ldr	r1, [pc, #96]	@ (8001928 <prvProcessDNSCache.isra.0+0x184>)
 80018c6:	e797      	b.n	80017f8 <prvProcessDNSCache.isra.0+0x54>
							if( xDNSCache[ x ].ucNumIPAddresses < ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
 80018c8:	232c      	movs	r3, #44	@ 0x2c
 80018ca:	fb03 9305 	mla	r3, r3, r5, r9
 80018ce:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80018d2:	2a03      	cmp	r2, #3
 80018d4:	d918      	bls.n	8001908 <prvProcessDNSCache.isra.0+0x164>
			uint32_t ulIPAddressIndex = 0;
 80018d6:	465a      	mov	r2, fp
						xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ] = *pulIP;
 80018d8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
				FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", ( xLookUp != 0 ) ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
 80018dc:	490d      	ldr	r1, [pc, #52]	@ (8001914 <prvProcessDNSCache.isra.0+0x170>)
						xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ] = *pulIP;
 80018de:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80018e2:	4413      	add	r3, r2
						xDNSCache[ x ].ulTTL = ulTTL;
 80018e4:	222c      	movs	r2, #44	@ 0x2c
 80018e6:	fb02 9505 	mla	r5, r2, r5, r9
						xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ] = *pulIP;
 80018ea:	f8d8 2000 	ldr.w	r2, [r8]
						xDNSCache[ x ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 80018ee:	e9c5 a708 	strd	sl, r7, [r5, #32]
						xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ] = *pulIP;
 80018f2:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
			if( ( xLookUp == 0 ) || ( *pulIP != 0UL ) )
 80018f6:	f8d8 3000 	ldr.w	r3, [r8]
 80018fa:	e77d      	b.n	80017f8 <prvProcessDNSCache.isra.0+0x54>
							xDNSCache[ x ].pcName[ 0 ] = ( char ) 0;
 80018fc:	7420      	strb	r0, [r4, #16]
			if( ( xLookUp == 0 ) || ( *pulIP != 0UL ) )
 80018fe:	f8d8 3000 	ldr.w	r3, [r8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1de      	bne.n	80018c4 <prvProcessDNSCache.isra.0+0x120>
 8001906:	e782      	b.n	800180e <prvProcessDNSCache.isra.0+0x6a>
								xDNSCache[ x ].ucNumIPAddresses++;
 8001908:	1c51      	adds	r1, r2, #1
 800190a:	f883 1028 	strb.w	r1, [r3, #40]	@ 0x28
 800190e:	e7e3      	b.n	80018d8 <prvProcessDNSCache.isra.0+0x134>
 8001910:	10624dd3 	.word	0x10624dd3
 8001914:	0800fe8c 	.word	0x0800fe8c
 8001918:	0800fecc 	.word	0x0800fecc
 800191c:	0800fe98 	.word	0x0800fe98
 8001920:	20000268 	.word	0x20000268
 8001924:	2000028c 	.word	0x2000028c
 8001928:	0800fe90 	.word	0x0800fe90
 800192c:	2000026c 	.word	0x2000026c

08001930 <prvParseDNSReply>:
	{
 8001930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if( uxBufferLength < sizeof( DNSMessage_t ) )
 8001934:	290b      	cmp	r1, #11
	{
 8001936:	b08f      	sub	sp, #60	@ 0x3c
		uint32_t ulIPAddress = 0UL;
 8001938:	f04f 0500 	mov.w	r5, #0
			char pcName[ ipconfigDNS_CACHE_NAME_LENGTH ] = "";
 800193c:	e9cd 5505 	strd	r5, r5, [sp, #20]
 8001940:	e9cd 5507 	strd	r5, r5, [sp, #28]
 8001944:	9509      	str	r5, [sp, #36]	@ 0x24
		if( uxBufferLength < sizeof( DNSMessage_t ) )
 8001946:	d944      	bls.n	80019d2 <prvParseDNSReply+0xa2>
				pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 8001948:	8883      	ldrh	r3, [r0, #4]
 800194a:	4689      	mov	r9, r1
 800194c:	4680      	mov	r8, r0
 800194e:	4692      	mov	sl, r2
 8001950:	ba5f      	rev16	r7, r3
 8001952:	f100 060c 	add.w	r6, r0, #12
				uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 8001956:	f1a1 040c 	sub.w	r4, r1, #12
				usQuestions = FreeRTOS_ntohs( pxDNSMessageHeader->usQuestions );
 800195a:	b2bf      	uxth	r7, r7
				for( x = 0U; x < usQuestions; x++ )
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80a4 	beq.w	8001aaa <prvParseDNSReply+0x17a>
			char * pcRequestedName = NULL;
 8001962:	46a8      	mov	r8, r5
 8001964:	4683      	mov	fp, r0
							if( x == 0U )
 8001966:	b3c5      	cbz	r5, 80019da <prvParseDNSReply+0xaa>
						uxResult = prvSkipNameField( pucByte,
 8001968:	4621      	mov	r1, r4
 800196a:	4630      	mov	r0, r6
 800196c:	f7ff fef2 	bl	8001754 <prvSkipNameField>
						if( uxResult == 0U )
 8001970:	b378      	cbz	r0, 80019d2 <prvParseDNSReply+0xa2>
						pucByte = &( pucByte[ uxResult ] );
 8001972:	eb06 0c00 	add.w	ip, r6, r0
						uxSourceBytesRemaining -= uxResult;
 8001976:	1a23      	subs	r3, r4, r0
					if( uxSourceBytesRemaining >= sizeof( uint32_t ) )
 8001978:	2b03      	cmp	r3, #3
 800197a:	d92a      	bls.n	80019d2 <prvParseDNSReply+0xa2>
				for( x = 0U; x < usQuestions; x++ )
 800197c:	3501      	adds	r5, #1
 800197e:	f8bc 2000 	ldrh.w	r2, [ip]
								usClass = usChar2u16( &( pucByte[ 2 ] ) );
 8001982:	f8bc 1002 	ldrh.w	r1, [ip, #2]
						pucByte = &( pucByte[ sizeof( uint32_t ) ] );
 8001986:	f10c 0604 	add.w	r6, ip, #4
				for( x = 0U; x < usQuestions; x++ )
 800198a:	42af      	cmp	r7, r5
						uxSourceBytesRemaining -= sizeof( uint32_t );
 800198c:	f1a3 0404 	sub.w	r4, r3, #4
				for( x = 0U; x < usQuestions; x++ )
 8001990:	d1e9      	bne.n	8001966 <prvParseDNSReply+0x36>
 8001992:	465b      	mov	r3, fp
 8001994:	46c3      	mov	fp, r8
				pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 8001996:	4698      	mov	r8, r3
 8001998:	88db      	ldrh	r3, [r3, #6]
				if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 800199a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800199e:	ba5b      	rev16	r3, r3
 80019a0:	f400 6078 	and.w	r0, r0, #3968	@ 0xf80
				pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 80019a4:	f8a8 3006 	strh.w	r3, [r8, #6]
				if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	2880      	cmp	r0, #128	@ 0x80
 80019ac:	f000 8086 	beq.w	8001abc <prvParseDNSReply+0x18c>
					else if( ( usQuestions != ( uint16_t ) 0U ) && ( usType == dnsTYPE_A_HOST ) && ( usClass == dnsCLASS_IN ) && ( pcRequestedName != NULL ) )
 80019b0:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80019b4:	d106      	bne.n	80019c4 <prvParseDNSReply+0x94>
 80019b6:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80019ba:	d103      	bne.n	80019c4 <prvParseDNSReply+0x94>
 80019bc:	f1bb 0f00 	cmp.w	fp, #0
 80019c0:	f040 80b1 	bne.w	8001b26 <prvParseDNSReply+0x1f6>
		else if( xExpected == pdFALSE )
 80019c4:	f1ba 0f00 	cmp.w	sl, #0
 80019c8:	d003      	beq.n	80019d2 <prvParseDNSReply+0xa2>
		return ulIPAddress;
 80019ca:	9805      	ldr	r0, [sp, #20]
 80019cc:	e002      	b.n	80019d4 <prvParseDNSReply+0xa4>
				if( uxSourceLen > sizeof( uint16_t ) )
 80019ce:	2c02      	cmp	r4, #2
 80019d0:	d863      	bhi.n	8001a9a <prvParseDNSReply+0x16a>
			ulIPAddress = dnsPARSE_ERROR;
 80019d2:	2000      	movs	r0, #0
	}
 80019d4:	b00f      	add	sp, #60	@ 0x3c
 80019d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( uxSourceLen == ( size_t ) 0U )
 80019da:	2c00      	cmp	r4, #0
 80019dc:	d0f9      	beq.n	80019d2 <prvParseDNSReply+0xa2>
			else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 80019de:	7830      	ldrb	r0, [r6, #0]
 80019e0:	f000 03c0 	and.w	r3, r0, #192	@ 0xc0
 80019e4:	2bc0      	cmp	r3, #192	@ 0xc0
 80019e6:	d0f2      	beq.n	80019ce <prvParseDNSReply+0x9e>
				while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 80019e8:	2800      	cmp	r0, #0
 80019ea:	d0f2      	beq.n	80019d2 <prvParseDNSReply+0xa2>
					if( ( uxIndex + uxCount ) > uxSourceLen )
 80019ec:	1c43      	adds	r3, r0, #1
 80019ee:	42a3      	cmp	r3, r4
 80019f0:	d8ef      	bhi.n	80019d2 <prvParseDNSReply+0xa2>
			size_t uxIndex = 0U;
 80019f2:	462b      	mov	r3, r5
					if( ( uxIndex + uxCount ) > uxSourceLen )
 80019f4:	46ac      	mov	ip, r5
					uxIndex++;
 80019f6:	2201      	movs	r2, #1
 80019f8:	f10c 31ff 	add.w	r1, ip, #4294967295
 80019fc:	eb06 0e03 	add.w	lr, r6, r3
 8001a00:	4663      	mov	r3, ip
 8001a02:	f10d 0c18 	add.w	ip, sp, #24
 8001a06:	4418      	add	r0, r3
 8001a08:	4461      	add	r1, ip
 8001a0a:	e003      	b.n	8001a14 <prvParseDNSReply+0xe4>
					while( ( uxCount-- != 0U ) && ( uxIndex < uxSourceLen ) )
 8001a0c:	42a2      	cmp	r2, r4
 8001a0e:	d247      	bcs.n	8001aa0 <prvParseDNSReply+0x170>
						if( uxNameLen >= uxDestLen )
 8001a10:	2b10      	cmp	r3, #16
 8001a12:	d027      	beq.n	8001a64 <prvParseDNSReply+0x134>
						uxNameLen++;
 8001a14:	3301      	adds	r3, #1
						pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 8001a16:	f81e cf01 	ldrb.w	ip, [lr, #1]!
						uxIndex++;
 8001a1a:	3201      	adds	r2, #1
					while( ( uxCount-- != 0U ) && ( uxIndex < uxSourceLen ) )
 8001a1c:	4298      	cmp	r0, r3
						pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 8001a1e:	f801 cf01 	strb.w	ip, [r1, #1]!
					while( ( uxCount-- != 0U ) && ( uxIndex < uxSourceLen ) )
 8001a22:	d1f3      	bne.n	8001a0c <prvParseDNSReply+0xdc>
				while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8001a24:	42a2      	cmp	r2, r4
 8001a26:	d23b      	bcs.n	8001aa0 <prvParseDNSReply+0x170>
 8001a28:	9503      	str	r5, [sp, #12]
						pcName[ uxNameLen ] = '.';
 8001a2a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
					uxIndex++;
 8001a2e:	1c51      	adds	r1, r2, #1
						pcName[ uxNameLen ] = '.';
 8001a30:	252e      	movs	r5, #46	@ 0x2e
						uxNameLen++;
 8001a32:	f103 0c01 	add.w	ip, r3, #1
						pcName[ uxNameLen ] = '.';
 8001a36:	eb0d 0800 	add.w	r8, sp, r0
				while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8001a3a:	5cb0      	ldrb	r0, [r6, r2]
					uxCount = ( size_t ) pucByte[ uxIndex ];
 8001a3c:	4686      	mov	lr, r0
				while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8001a3e:	b370      	cbz	r0, 8001a9e <prvParseDNSReply+0x16e>
						if( uxNameLen >= uxDestLen )
 8001a40:	2b10      	cmp	r3, #16
					if( ( uxIndex + uxCount ) > uxSourceLen )
 8001a42:	eb0e 0301 	add.w	r3, lr, r1
						if( uxNameLen >= uxDestLen )
 8001a46:	d0c4      	beq.n	80019d2 <prvParseDNSReply+0xa2>
					if( ( uxIndex + uxCount ) > uxSourceLen )
 8001a48:	42a3      	cmp	r3, r4
						pcName[ uxNameLen ] = '.';
 8001a4a:	f808 5c20 	strb.w	r5, [r8, #-32]
					if( ( uxIndex + uxCount ) > uxSourceLen )
 8001a4e:	d8c0      	bhi.n	80019d2 <prvParseDNSReply+0xa2>
					while( ( uxCount-- != 0U ) && ( uxIndex < uxSourceLen ) )
 8001a50:	42a1      	cmp	r1, r4
 8001a52:	d20d      	bcs.n	8001a70 <prvParseDNSReply+0x140>
						if( uxNameLen >= uxDestLen )
 8001a54:	f1bc 0f10 	cmp.w	ip, #16
 8001a58:	d007      	beq.n	8001a6a <prvParseDNSReply+0x13a>
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	4670      	mov	r0, lr
 8001a5e:	9d03      	ldr	r5, [sp, #12]
					uxIndex++;
 8001a60:	460a      	mov	r2, r1
 8001a62:	e7c9      	b.n	80019f8 <prvParseDNSReply+0xc8>
							uxIndex = 0U;
 8001a64:	2200      	movs	r2, #0
 8001a66:	9503      	str	r5, [sp, #12]
 8001a68:	e7df      	b.n	8001a2a <prvParseDNSReply+0xfa>
 8001a6a:	2200      	movs	r2, #0
						uxNameLen++;
 8001a6c:	4663      	mov	r3, ip
 8001a6e:	e7dc      	b.n	8001a2a <prvParseDNSReply+0xfa>
 8001a70:	9d03      	ldr	r5, [sp, #12]
					if( ( uxNameLen < uxDestLen ) && ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] == 0U ) )
 8001a72:	f1bc 0f0f 	cmp.w	ip, #15
 8001a76:	d8ac      	bhi.n	80019d2 <prvParseDNSReply+0xa2>
 8001a78:	428c      	cmp	r4, r1
 8001a7a:	d9aa      	bls.n	80019d2 <prvParseDNSReply+0xa2>
 8001a7c:	5c73      	ldrb	r3, [r6, r1]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1a7      	bne.n	80019d2 <prvParseDNSReply+0xa2>
						pcName[ uxNameLen ] = '\0';
 8001a82:	f10c 0238 	add.w	r2, ip, #56	@ 0x38
 8001a86:	eb0d 0c02 	add.w	ip, sp, r2
 8001a8a:	f80c 3c20 	strb.w	r3, [ip, #-32]
						uxIndex++;
 8001a8e:	1c4b      	adds	r3, r1, #1
							pucByte = &( pucByte[ uxResult ] );
 8001a90:	eb06 0c03 	add.w	ip, r6, r3
							uxSourceBytesRemaining -= uxResult;
 8001a94:	46b0      	mov	r8, r6
 8001a96:	1ae3      	subs	r3, r4, r3
 8001a98:	e76e      	b.n	8001978 <prvParseDNSReply+0x48>
					uxIndex += sizeof( uint16_t );
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e7f8      	b.n	8001a90 <prvParseDNSReply+0x160>
 8001a9e:	9d03      	ldr	r5, [sp, #12]
				if( uxIndex > 0U )
 8001aa0:	2a00      	cmp	r2, #0
 8001aa2:	d096      	beq.n	80019d2 <prvParseDNSReply+0xa2>
 8001aa4:	469c      	mov	ip, r3
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	e7e3      	b.n	8001a72 <prvParseDNSReply+0x142>
				if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8001aaa:	8842      	ldrh	r2, [r0, #2]
 8001aac:	88c3      	ldrh	r3, [r0, #6]
 8001aae:	f402 6278 	and.w	r2, r2, #3968	@ 0xf80
 8001ab2:	ba5b      	rev16	r3, r3
 8001ab4:	2a80      	cmp	r2, #128	@ 0x80
				pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 8001ab6:	80c3      	strh	r3, [r0, #6]
				if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	d183      	bne.n	80019c4 <prvParseDNSReply+0x94>
						if( usNumARecordsStored >= usCount )
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d081      	beq.n	80019c4 <prvParseDNSReply+0x94>
					uint16_t usNumARecordsStored = 0;
 8001ac0:	2700      	movs	r7, #0
					for( x = 0U; x < pxDNSMessageHeader->usAnswers; x++ )
 8001ac2:	463d      	mov	r5, r7
 8001ac4:	e015      	b.n	8001af2 <prvParseDNSReply+0x1c2>
						else if( uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 8001ac6:	2c09      	cmp	r4, #9
 8001ac8:	d909      	bls.n	8001ade <prvParseDNSReply+0x1ae>
							if( uxSourceBytesRemaining >= usDataLength )
 8001aca:	8933      	ldrh	r3, [r6, #8]
							uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 8001acc:	3c0a      	subs	r4, #10
							if( uxSourceBytesRemaining >= usDataLength )
 8001ace:	ba5b      	rev16	r3, r3
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	42a3      	cmp	r3, r4
 8001ad4:	f63f af7d 	bhi.w	80019d2 <prvParseDNSReply+0xa2>
								uxSourceBytesRemaining -= usDataLength;
 8001ad8:	1ae4      	subs	r4, r4, r3
								pucByte = &( pucByte[ usDataLength ] );
 8001ada:	330a      	adds	r3, #10
 8001adc:	441e      	add	r6, r3
					for( x = 0U; x < pxDNSMessageHeader->usAnswers; x++ )
 8001ade:	3501      	adds	r5, #1
 8001ae0:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8001ae4:	b2ad      	uxth	r5, r5
						if( usNumARecordsStored >= usCount )
 8001ae6:	42ab      	cmp	r3, r5
 8001ae8:	f67f af6c 	bls.w	80019c4 <prvParseDNSReply+0x94>
 8001aec:	2f04      	cmp	r7, #4
 8001aee:	f43f af69 	beq.w	80019c4 <prvParseDNSReply+0x94>
						uxResult = prvSkipNameField( pucByte,
 8001af2:	4621      	mov	r1, r4
 8001af4:	4630      	mov	r0, r6
 8001af6:	f7ff fe2d 	bl	8001754 <prvSkipNameField>
						if( uxResult == 0U )
 8001afa:	2800      	cmp	r0, #0
 8001afc:	f43f af69 	beq.w	80019d2 <prvParseDNSReply+0xa2>
						uxSourceBytesRemaining -= uxResult;
 8001b00:	1a24      	subs	r4, r4, r0
						pucByte = &( pucByte[ uxResult ] );
 8001b02:	4406      	add	r6, r0
						if( uxSourceBytesRemaining < sizeof( uint16_t ) )
 8001b04:	2c01      	cmp	r4, #1
 8001b06:	f67f af64 	bls.w	80019d2 <prvParseDNSReply+0xa2>
						if( usType == ( uint16_t ) dnsTYPE_A_HOST )
 8001b0a:	8833      	ldrh	r3, [r6, #0]
							if( uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + uxAddressLength ) )
 8001b0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b10:	d1d9      	bne.n	8001ac6 <prvParseDNSReply+0x196>
 8001b12:	2c0d      	cmp	r4, #13
 8001b14:	d9d7      	bls.n	8001ac6 <prvParseDNSReply+0x196>
							if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) == ( uint16_t ) uxAddressLength )
 8001b16:	8933      	ldrh	r3, [r6, #8]
 8001b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b1c:	f000 8088 	beq.w	8001c30 <prvParseDNSReply+0x300>
							pucByte = &( pucByte[ sizeof( DNSAnswerRecord_t ) + uxAddressLength ] );
 8001b20:	360e      	adds	r6, #14
							uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + uxAddressLength );
 8001b22:	3c0e      	subs	r4, #14
 8001b24:	e7db      	b.n	8001ade <prvParseDNSReply+0x1ae>
						if( xApplicationDNSQueryHook( &( pcRequestedName[ 1 ] ) ) != pdFALSE )
 8001b26:	f10b 0001 	add.w	r0, fp, #1
 8001b2a:	f7ff f94d 	bl	8000dc8 <xApplicationDNSQueryHook>
 8001b2e:	2800      	cmp	r0, #0
 8001b30:	f43f af48 	beq.w	80019c4 <prvParseDNSReply+0x94>
							NetworkBufferDescriptor_t * pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 8001b34:	4640      	mov	r0, r8
 8001b36:	f000 f941 	bl	8001dbc <pxUDPPayloadBuffer_to_NetworkBuffer>
							if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
 8001b3a:	4a55      	ldr	r2, [pc, #340]	@ (8001c90 <prvParseDNSReply+0x360>)
 8001b3c:	6812      	ldr	r2, [r2, #0]
 8001b3e:	2a00      	cmp	r2, #0
 8001b40:	f47f af40 	bne.w	80019c4 <prvParseDNSReply+0x94>
 8001b44:	2800      	cmp	r0, #0
 8001b46:	f43f af3d 	beq.w	80019c4 <prvParseDNSReply+0x94>
								size_t uxDataLength = uxBufferLength + sizeof( UDPHeader_t ) + sizeof( EthernetHeader_t ) + sizeof( IPHeader_t );
 8001b4a:	f109 022a 	add.w	r2, r9, #42	@ 0x2a
								pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, uxDataLength + sizeof( LLMNRAnswer_t ) );
 8001b4e:	f109 013a 	add.w	r1, r9, #58	@ 0x3a
								pxNetworkBuffer->xDataLength = uxDataLength;
 8001b52:	61c2      	str	r2, [r0, #28]
								pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, uxDataLength + sizeof( LLMNRAnswer_t ) );
 8001b54:	f000 f912 	bl	8001d7c <pxDuplicateNetworkBufferWithDescriptor>
								if( pxNewBuffer != NULL )
 8001b58:	4604      	mov	r4, r0
 8001b5a:	2800      	cmp	r0, #0
 8001b5c:	f43f af32 	beq.w	80019c4 <prvParseDNSReply+0x94>
									pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 8001b60:	6980      	ldr	r0, [r0, #24]
									xOffset1 = ( BaseType_t ) ( pucByte - pucUDPPayloadBuffer );
 8001b62:	eba6 0208 	sub.w	r2, r6, r8
									xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) pcRequestedName ) - pucUDPPayloadBuffer );
 8001b66:	ebab 0b08 	sub.w	fp, fp, r8
									vSetField16( pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );                       /* Provide a single answer */
 8001b6a:	f44f 7880 	mov.w	r8, #256	@ 0x100
									vSetField16( pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );                 /* No additional info */
 8001b6e:	2100      	movs	r1, #0
									pucByte = &( pucNewBuffer[ xOffset1 ] );
 8001b70:	f102 0e2a 	add.w	lr, r2, #42	@ 0x2a
									vSetField16( pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );                       /* Provide a single answer */
 8001b74:	f8c0 8030 	str.w	r8, [r0, #48]	@ 0x30
									vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE ); /* Set the response flag */
 8001b78:	2680      	movs	r6, #128	@ 0x80
								pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 8001b7a:	f04f 08c0 	mov.w	r8, #192	@ 0xc0
									vSetField16( pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );                 /* No additional info */
 8001b7e:	8681      	strh	r1, [r0, #52]	@ 0x34
									vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE ); /* Set the response flag */
 8001b80:	8586      	strh	r6, [r0, #44]	@ 0x2c
									pucByte = &( pucNewBuffer[ xOffset1 ] );
 8001b82:	eb00 030e 	add.w	r3, r0, lr
								pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 8001b86:	f800 800e 	strb.w	r8, [r0, lr]
									vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8001b8a:	2093      	movs	r0, #147	@ 0x93
									vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 8001b8c:	4d41      	ldr	r5, [pc, #260]	@ (8001c94 <prvParseDNSReply+0x364>)
									vSetField16( pxAnswer, LLMNRAnswer_t, usType, dnsTYPE_A_HOST ); /* Type A: host */
 8001b8e:	f04f 0c01 	mov.w	ip, #1
									vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8001b92:	7218      	strb	r0, [r3, #8]
 8001b94:	2704      	movs	r7, #4
 8001b96:	20e0      	movs	r0, #224	@ 0xe0
								pxAnswer->ucNameOffset = ( uint8_t ) ( pcRequestedName - ( char * ) pucNewBuffer );
 8001b98:	f883 b001 	strb.w	fp, [r3, #1]
									vSetField16( pxAnswer, LLMNRAnswer_t, usType, dnsTYPE_A_HOST ); /* Type A: host */
 8001b9c:	7099      	strb	r1, [r3, #2]
								usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( pucByte - pucNewBuffer ) );
 8001b9e:	b292      	uxth	r2, r2
									vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN );   /* 1: Class IN */
 8001ba0:	7119      	strb	r1, [r3, #4]
									vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8001ba2:	7199      	strb	r1, [r3, #6]
									vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, 4 );
 8001ba4:	7299      	strb	r1, [r3, #10]
									vSetField16( pxAnswer, LLMNRAnswer_t, usType, dnsTYPE_A_HOST ); /* Type A: host */
 8001ba6:	f883 c003 	strb.w	ip, [r3, #3]
									vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN );   /* 1: Class IN */
 8001baa:	f883 c005 	strb.w	ip, [r3, #5]
			pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8001bae:	f102 0c18 	add.w	ip, r2, #24
									vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8001bb2:	71df      	strb	r7, [r3, #7]
									vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, 4 );
 8001bb4:	72df      	strb	r7, [r3, #11]
									vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8001bb6:	7258      	strb	r0, [r3, #9]
									vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 8001bb8:	6968      	ldr	r0, [r5, #20]
 8001bba:	f8df e0e8 	ldr.w	lr, [pc, #232]	@ 8001ca4 <prvParseDNSReply+0x374>
 8001bbe:	7318      	strb	r0, [r3, #12]
 8001bc0:	6968      	ldr	r0, [r5, #20]
 8001bc2:	ba00      	rev	r0, r0
 8001bc4:	0c00      	lsrs	r0, r0, #16
 8001bc6:	7358      	strb	r0, [r3, #13]
 8001bc8:	6968      	ldr	r0, [r5, #20]
 8001bca:	ba00      	rev	r0, r0
 8001bcc:	0a00      	lsrs	r0, r0, #8
 8001bce:	7398      	strb	r0, [r3, #14]
								usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( pucByte - pucNewBuffer ) );
 8001bd0:	f102 0010 	add.w	r0, r2, #16
									vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 8001bd4:	7def      	ldrb	r7, [r5, #23]
 8001bd6:	73df      	strb	r7, [r3, #15]
								usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( pucByte - pucNewBuffer ) );
 8001bd8:	b207      	sxth	r7, r0
			pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 8001bda:	b283      	uxth	r3, r0
 8001bdc:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
			pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8001be0:	f107 0208 	add.w	r2, r7, #8
			pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8001be4:	696d      	ldr	r5, [r5, #20]
			pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 8001be6:	331c      	adds	r3, #28
 8001be8:	0200      	lsls	r0, r0, #8
			pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8001bea:	0a12      	lsrs	r2, r2, #8
			uxDataLength = ( ( size_t ) lNetLength ) + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 8001bec:	372a      	adds	r7, #42	@ 0x2a
			pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 8001bee:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
			pxUDPPacket = ipCAST_PTR_TO_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8001bf2:	69a3      	ldr	r3, [r4, #24]
			pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8001bf4:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
			pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 8001bf8:	8218      	strh	r0, [r3, #16]
			pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8001bfa:	f8be 0000 	ldrh.w	r0, [lr]
			pxIPHeader->ucTimeToLive = ipconfigUDP_TIME_TO_LIVE;
 8001bfe:	759e      	strb	r6, [r3, #22]
			pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8001c00:	f8d3 601a 	ldr.w	r6, [r3, #26]
			pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8001c04:	f8c3 501a 	str.w	r5, [r3, #26]
			pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8001c08:	ba45      	rev16	r5, r0
			usPacketIdentifier++;
 8001c0a:	3001      	adds	r0, #1
			pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8001c0c:	f8c3 601e 	str.w	r6, [r3, #30]
			pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8001c10:	825d      	strh	r5, [r3, #18]
			pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8001c12:	84da      	strh	r2, [r3, #38]	@ 0x26
			usPacketIdentifier++;
 8001c14:	f8ae 0000 	strh.w	r0, [lr]
			vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 8001c18:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
 8001c1a:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8001c1c:	8498      	strh	r0, [r3, #36]	@ 0x24
			vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8001c1e:	4620      	mov	r0, r4
			vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 8001c20:	845a      	strh	r2, [r3, #34]	@ 0x22
			pxNetworkBuffer->xDataLength = uxDataLength;
 8001c22:	61e7      	str	r7, [r4, #28]
			vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8001c24:	f000 fa86 	bl	8002134 <vReturnEthernetFrame>
									vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f004 feed 	bl	8006a08 <vReleaseNetworkBufferAndDescriptor>
		if( xReturn == pdFALSE )
 8001c2e:	e6c9      	b.n	80019c4 <prvParseDNSReply+0x94>
								( void ) memcpy( pvCopyDest, pvCopySource, uxAddressLength );
 8001c30:	f8d6 300a 	ldr.w	r3, [r6, #10]
 8001c34:	9305      	str	r3, [sp, #20]
										if( xDoStore != pdFALSE )
 8001c36:	f1ba 0f00 	cmp.w	sl, #0
 8001c3a:	d113      	bne.n	8001c64 <prvParseDNSReply+0x334>
										( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET, ( const void * ) &( ulIPAddress ), cBuffer, sizeof( cBuffer ) );
 8001c3c:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 8001c40:	2310      	movs	r3, #16
 8001c42:	a905      	add	r1, sp, #20
 8001c44:	2002      	movs	r0, #2
 8001c46:	464a      	mov	r2, r9
 8001c48:	f10d 0b18 	add.w	fp, sp, #24
 8001c4c:	f001 fb80 	bl	8003350 <FreeRTOS_inet_ntop>
										FreeRTOS_printf( ( "DNS[0x%04lX]: The answer to '%s' (%s) will%s be stored\n",
 8001c50:	f8b8 1000 	ldrh.w	r1, [r8]
 8001c54:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <prvParseDNSReply+0x368>)
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	465a      	mov	r2, fp
 8001c5a:	464b      	mov	r3, r9
 8001c5c:	480f      	ldr	r0, [pc, #60]	@ (8001c9c <prvParseDNSReply+0x36c>)
 8001c5e:	f00b f955 	bl	800cf0c <lUDPLoggingPrintf>
 8001c62:	e75d      	b.n	8001b20 <prvParseDNSReply+0x1f0>
											( void ) prvProcessDNSCache( pcName, &ulIPAddress, pxDNSAnswerRecord->ulTTL, pdFALSE );
 8001c64:	f10d 0b18 	add.w	fp, sp, #24
										( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET, ( const void * ) &( ulIPAddress ), cBuffer, sizeof( cBuffer ) );
 8001c68:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
											( void ) prvProcessDNSCache( pcName, &ulIPAddress, pxDNSAnswerRecord->ulTTL, pdFALSE );
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	6872      	ldr	r2, [r6, #4]
 8001c70:	a905      	add	r1, sp, #20
 8001c72:	4658      	mov	r0, fp
											usNumARecordsStored++; /* Track # of A records stored */
 8001c74:	3701      	adds	r7, #1
											( void ) prvProcessDNSCache( pcName, &ulIPAddress, pxDNSAnswerRecord->ulTTL, pdFALSE );
 8001c76:	f7ff fd95 	bl	80017a4 <prvProcessDNSCache.isra.0>
										( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET, ( const void * ) &( ulIPAddress ), cBuffer, sizeof( cBuffer ) );
 8001c7a:	a905      	add	r1, sp, #20
 8001c7c:	2310      	movs	r3, #16
 8001c7e:	2002      	movs	r0, #2
 8001c80:	464a      	mov	r2, r9
 8001c82:	f001 fb65 	bl	8003350 <FreeRTOS_inet_ntop>
										FreeRTOS_printf( ( "DNS[0x%04lX]: The answer to '%s' (%s) will%s be stored\n",
 8001c86:	f8b8 1000 	ldrh.w	r1, [r8]
											usNumARecordsStored++; /* Track # of A records stored */
 8001c8a:	b2bf      	uxth	r7, r7
										FreeRTOS_printf( ( "DNS[0x%04lX]: The answer to '%s' (%s) will%s be stored\n",
 8001c8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ca0 <prvParseDNSReply+0x370>)
 8001c8e:	e7e2      	b.n	8001c56 <prvParseDNSReply+0x326>
 8001c90:	08011414 	.word	0x08011414
 8001c94:	20000014 	.word	0x20000014
 8001c98:	0800fef4 	.word	0x0800fef4
 8001c9c:	0800fefc 	.word	0x0800fefc
 8001ca0:	080114a0 	.word	0x080114a0
 8001ca4:	20000390 	.word	0x20000390

08001ca8 <ulDNSHandlePacket>:
		if( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) )
 8001ca8:	69c1      	ldr	r1, [r0, #28]
 8001caa:	2929      	cmp	r1, #41	@ 0x29
 8001cac:	d902      	bls.n	8001cb4 <ulDNSHandlePacket+0xc>
			uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 8001cae:	392a      	subs	r1, #42	@ 0x2a
			if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 8001cb0:	290b      	cmp	r1, #11
 8001cb2:	d801      	bhi.n	8001cb8 <ulDNSHandlePacket+0x10>
	}
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	4770      	bx	lr
				pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( UDPPacket_t ) ] );
 8001cb8:	6980      	ldr	r0, [r0, #24]
				( void ) prvParseDNSReply( pucPayLoadBuffer,
 8001cba:	2200      	movs	r2, #0
	{
 8001cbc:	b508      	push	{r3, lr}
				( void ) prvParseDNSReply( pucPayLoadBuffer,
 8001cbe:	302a      	adds	r0, #42	@ 0x2a
 8001cc0:	f7ff fe36 	bl	8001930 <prvParseDNSReply>
	}
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	bd08      	pop	{r3, pc}

08001cc8 <prvIPTimerCheck>:
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
	BaseType_t xReturn;

	if( pxTimer->bActive == pdFALSE_UNSIGNED )
 8001cc8:	7803      	ldrb	r3, [r0, #0]
 8001cca:	07d9      	lsls	r1, r3, #31
 8001ccc:	d401      	bmi.n	8001cd2 <prvIPTimerCheck+0xa>
	{
		/* The timer is not enabled. */
		xReturn = pdFALSE;
 8001cce:	2000      	movs	r0, #0
			xReturn = pdFALSE;
		}
	}

	return xReturn;
}
 8001cd0:	4770      	bx	lr
		if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 8001cd2:	079a      	lsls	r2, r3, #30
{
 8001cd4:	b570      	push	{r4, r5, r6, lr}
 8001cd6:	4604      	mov	r4, r0
			if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 8001cd8:	f100 0604 	add.w	r6, r0, #4
		if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 8001cdc:	d510      	bpl.n	8001d00 <prvIPTimerCheck+0x38>
			prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 8001cde:	6925      	ldr	r5, [r4, #16]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 8001ce0:	4630      	mov	r0, r6
 8001ce2:	f007 fcc9 	bl	8009678 <vTaskSetTimeOutState>
	pxTimer->bActive = pdTRUE_UNSIGNED;
 8001ce6:	2001      	movs	r0, #1
	if( xTime == ( TickType_t ) 0 )
 8001ce8:	fab5 f385 	clz	r3, r5
	pxTimer->bActive = pdTRUE_UNSIGNED;
 8001cec:	7822      	ldrb	r2, [r4, #0]
	pxTimer->ulRemainingTime = xTime;
 8001cee:	60e5      	str	r5, [r4, #12]
	if( xTime == ( TickType_t ) 0 )
 8001cf0:	095b      	lsrs	r3, r3, #5
	pxTimer->bActive = pdTRUE_UNSIGNED;
 8001cf2:	f022 0203 	bic.w	r2, r2, #3
 8001cf6:	4083      	lsls	r3, r0
 8001cf8:	4303      	orrs	r3, r0
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	7023      	strb	r3, [r4, #0]
}
 8001cfe:	bd70      	pop	{r4, r5, r6, pc}
			if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 8001d00:	f100 010c 	add.w	r1, r0, #12
 8001d04:	4630      	mov	r0, r6
 8001d06:	f007 fcdf 	bl	80096c8 <xTaskCheckForTimeOut>
 8001d0a:	b118      	cbz	r0, 8001d14 <prvIPTimerCheck+0x4c>
				pxTimer->bExpired = pdTRUE_UNSIGNED;
 8001d0c:	7823      	ldrb	r3, [r4, #0]
 8001d0e:	f043 0302 	orr.w	r3, r3, #2
 8001d12:	7023      	strb	r3, [r4, #0]
		if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 8001d14:	7823      	ldrb	r3, [r4, #0]
 8001d16:	079b      	lsls	r3, r3, #30
 8001d18:	d4e1      	bmi.n	8001cde <prvIPTimerCheck+0x16>
		xReturn = pdFALSE;
 8001d1a:	2000      	movs	r0, #0
}
 8001d1c:	bd70      	pop	{r4, r5, r6, pc}
 8001d1e:	bf00      	nop

08001d20 <xIsCallingFromIPTask>:
{
 8001d20:	b508      	push	{r3, lr}
	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 8001d22:	f007 fd19 	bl	8009758 <xTaskGetCurrentTaskHandle>
 8001d26:	4b03      	ldr	r3, [pc, #12]	@ (8001d34 <xIsCallingFromIPTask+0x14>)
 8001d28:	681b      	ldr	r3, [r3, #0]
}
 8001d2a:	1a18      	subs	r0, r3, r0
 8001d2c:	fab0 f080 	clz	r0, r0
 8001d30:	0940      	lsrs	r0, r0, #5
 8001d32:	bd08      	pop	{r3, pc}
 8001d34:	20000360 	.word	0x20000360

08001d38 <FreeRTOS_NetworkDown>:
 * @brief Send a network down event to the IP-task. If it fails to post a message,
 *         the failure will be noted in the variable 'xNetworkDownEventPending'
 *         and later on a 'network-down' event, it will be executed.
 */
void FreeRTOS_NetworkDown( void )
{
 8001d38:	b508      	push	{r3, lr}
	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 8001d3a:	f007 fd0d 	bl	8009758 <xTaskGetCurrentTaskHandle>
			if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
			{
				uxUseTimeout = ( TickType_t ) 0;
			}

			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 8001d3e:	2300      	movs	r3, #0
 8001d40:	480a      	ldr	r0, [pc, #40]	@ (8001d6c <FreeRTOS_NetworkDown+0x34>)
 8001d42:	490b      	ldr	r1, [pc, #44]	@ (8001d70 <FreeRTOS_NetworkDown+0x38>)
 8001d44:	461a      	mov	r2, r3
 8001d46:	6800      	ldr	r0, [r0, #0]
 8001d48:	f006 fd68 	bl	800881c <xQueueGenericSend>

			if( xReturn == pdFAIL )
 8001d4c:	b128      	cbz	r0, 8001d5a <FreeRTOS_NetworkDown+0x22>
	if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 8001d4e:	2801      	cmp	r0, #1
 8001d50:	d107      	bne.n	8001d62 <FreeRTOS_NetworkDown+0x2a>
		xNetworkDownEventPending = pdFALSE;
 8001d52:	4b08      	ldr	r3, [pc, #32]	@ (8001d74 <FreeRTOS_NetworkDown+0x3c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
}
 8001d58:	bd08      	pop	{r3, pc}
			{
				/* A message should have been sent to the IP task, but wasn't. */
				FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 8001d5a:	4601      	mov	r1, r0
 8001d5c:	4806      	ldr	r0, [pc, #24]	@ (8001d78 <FreeRTOS_NetworkDown+0x40>)
 8001d5e:	f00b f8d5 	bl	800cf0c <lUDPLoggingPrintf>
		xNetworkDownEventPending = pdTRUE;
 8001d62:	4b04      	ldr	r3, [pc, #16]	@ (8001d74 <FreeRTOS_NetworkDown+0x3c>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	601a      	str	r2, [r3, #0]
}
 8001d68:	bd08      	pop	{r3, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000394 	.word	0x20000394
 8001d70:	08010118 	.word	0x08010118
 8001d74:	20000364 	.word	0x20000364
 8001d78:	0800ff3c 	.word	0x0800ff3c

08001d7c <pxDuplicateNetworkBufferWithDescriptor>:
{
 8001d7c:	b570      	push	{r4, r5, r6, lr}
 8001d7e:	460e      	mov	r6, r1
 8001d80:	4605      	mov	r5, r0
	pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 8001d82:	2100      	movs	r1, #0
 8001d84:	4630      	mov	r0, r6
 8001d86:	f004 fe03 	bl	8006990 <pxGetNetworkBufferWithDescriptor>
	if( pxNewBuffer != NULL )
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	b148      	cbz	r0, 8001da2 <pxDuplicateNetworkBufferWithDescriptor+0x26>
		pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 8001d8e:	696a      	ldr	r2, [r5, #20]
		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 8001d90:	6a2b      	ldr	r3, [r5, #32]
		pxNewBuffer->xDataLength = uxNewLength;
 8001d92:	61c6      	str	r6, [r0, #28]
		pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 8001d94:	6142      	str	r2, [r0, #20]
		( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8001d96:	e9d5 1206 	ldrd	r1, r2, [r5, #24]
		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 8001d9a:	6203      	str	r3, [r0, #32]
		( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8001d9c:	6980      	ldr	r0, [r0, #24]
 8001d9e:	f00b fe3f 	bl	800da20 <memcpy>
}
 8001da2:	4620      	mov	r0, r4
 8001da4:	bd70      	pop	{r4, r5, r6, pc}
 8001da6:	bf00      	nop

08001da8 <pxPacketBuffer_to_NetworkBuffer>:
	if( pvBuffer == NULL )
 8001da8:	b138      	cbz	r0, 8001dba <pxPacketBuffer_to_NetworkBuffer+0x12>
		uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 8001daa:	f1a0 030a 	sub.w	r3, r0, #10
		if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 8001dae:	079b      	lsls	r3, r3, #30
 8001db0:	d102      	bne.n	8001db8 <pxPacketBuffer_to_NetworkBuffer+0x10>
			pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 8001db2:	f850 0c0a 	ldr.w	r0, [r0, #-10]
 8001db6:	4770      	bx	lr
		pxResult = NULL;
 8001db8:	2000      	movs	r0, #0
	}
 8001dba:	4770      	bx	lr

08001dbc <pxUDPPayloadBuffer_to_NetworkBuffer>:
	if( pvBuffer == NULL )
 8001dbc:	b128      	cbz	r0, 8001dca <pxUDPPayloadBuffer_to_NetworkBuffer+0xe>
		if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 8001dbe:	0783      	lsls	r3, r0, #30
 8001dc0:	d102      	bne.n	8001dc8 <pxUDPPayloadBuffer_to_NetworkBuffer+0xc>
			pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 8001dc2:	f850 0c34 	ldr.w	r0, [r0, #-52]
 8001dc6:	4770      	bx	lr
		pxResult = NULL;
 8001dc8:	2000      	movs	r0, #0
}
 8001dca:	4770      	bx	lr

08001dcc <FreeRTOS_IPInit>:
{
 8001dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
	return xIPTaskInitialised;
 8001dd0:	4c3f      	ldr	r4, [pc, #252]	@ (8001ed0 <FreeRTOS_IPInit+0x104>)
{
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	4681      	mov	r9, r0
 8001dd6:	4688      	mov	r8, r1
	configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 8001dd8:	6824      	ldr	r4, [r4, #0]
{
 8001dda:	4616      	mov	r6, r2
 8001ddc:	461d      	mov	r5, r3
	configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 8001dde:	2c00      	cmp	r4, #0
 8001de0:	d164      	bne.n	8001eac <FreeRTOS_IPInit+0xe0>
	configASSERT( xNetworkEventQueue == NULL );
 8001de2:	4c3c      	ldr	r4, [pc, #240]	@ (8001ed4 <FreeRTOS_IPInit+0x108>)
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	b123      	cbz	r3, 8001df2 <FreeRTOS_IPInit+0x26>
 8001de8:	f240 4179 	movw	r1, #1145	@ 0x479
 8001dec:	483a      	ldr	r0, [pc, #232]	@ (8001ed8 <FreeRTOS_IPInit+0x10c>)
 8001dee:	f7fe ff83 	bl	8000cf8 <vAssertCalled>
	configASSERT( xIPTaskHandle == NULL );
 8001df2:	4f3a      	ldr	r7, [pc, #232]	@ (8001edc <FreeRTOS_IPInit+0x110>)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	b123      	cbz	r3, 8001e02 <FreeRTOS_IPInit+0x36>
 8001df8:	f240 417a 	movw	r1, #1146	@ 0x47a
 8001dfc:	4836      	ldr	r0, [pc, #216]	@ (8001ed8 <FreeRTOS_IPInit+0x10c>)
 8001dfe:	f7fe ff7b 	bl	8000cf8 <vAssertCalled>
	xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
 8001e02:	2200      	movs	r2, #0
 8001e04:	2108      	movs	r1, #8
 8001e06:	2045      	movs	r0, #69	@ 0x45
 8001e08:	f006 fcc6 	bl	8008798 <xQueueGenericCreate>
 8001e0c:	6020      	str	r0, [r4, #0]
	configASSERT( xNetworkEventQueue != NULL );
 8001e0e:	2800      	cmp	r0, #0
 8001e10:	d052      	beq.n	8001eb8 <FreeRTOS_IPInit+0xec>
				vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 8001e12:	4933      	ldr	r1, [pc, #204]	@ (8001ee0 <FreeRTOS_IPInit+0x114>)
 8001e14:	f006 ffb4 	bl	8008d80 <vQueueAddToRegistry>
		if( xNetworkBuffersInitialise() == pdPASS )
 8001e18:	f004 fd80 	bl	800691c <xNetworkBuffersInitialise>
 8001e1c:	2801      	cmp	r0, #1
 8001e1e:	d139      	bne.n	8001e94 <FreeRTOS_IPInit+0xc8>
			xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 8001e20:	f8d9 e000 	ldr.w	lr, [r9]
 8001e24:	482f      	ldr	r0, [pc, #188]	@ (8001ee4 <FreeRTOS_IPInit+0x118>)
			( void ) memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 8001e26:	4c30      	ldr	r4, [pc, #192]	@ (8001ee8 <FreeRTOS_IPInit+0x11c>)
			xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 8001e28:	f8c0 e000 	str.w	lr, [r0]
			( void ) memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 8001e2c:	4684      	mov	ip, r0
			xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 8001e2e:	f8d8 8000 	ldr.w	r8, [r8]
 8001e32:	f8c0 8004 	str.w	r8, [r0, #4]
			xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddressing.ulNetMask ) | ~xNetworkAddressing.ulNetMask;
 8001e36:	ea6e 0908 	orn	r9, lr, r8
			xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 8001e3a:	6836      	ldr	r6, [r6, #0]
 8001e3c:	6086      	str	r6, [r0, #8]
			xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 8001e3e:	682b      	ldr	r3, [r5, #0]
					*ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 8001e40:	4d2a      	ldr	r5, [pc, #168]	@ (8001eec <FreeRTOS_IPInit+0x120>)
			xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 8001e42:	60c3      	str	r3, [r0, #12]
			xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddressing.ulNetMask ) | ~xNetworkAddressing.ulNetMask;
 8001e44:	f8c0 9010 	str.w	r9, [r0, #16]
					*ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 8001e48:	f8c5 e014 	str.w	lr, [r5, #20]
			( void ) memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 8001e4c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e52:	f8c4 9000 	str.w	r9, [r4]
					if( xNetworkAddressing.ulGatewayAddress != 0UL )
 8001e56:	b14e      	cbz	r6, 8001e6c <FreeRTOS_IPInit+0xa0>
						configASSERT( ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) == ( xNetworkAddressing.ulGatewayAddress & xNetworkAddressing.ulNetMask ) );
 8001e58:	ea8e 0e06 	eor.w	lr, lr, r6
 8001e5c:	ea1e 0f08 	tst.w	lr, r8
 8001e60:	d004      	beq.n	8001e6c <FreeRTOS_IPInit+0xa0>
 8001e62:	f240 41b7 	movw	r1, #1207	@ 0x4b7
 8001e66:	481c      	ldr	r0, [pc, #112]	@ (8001ed8 <FreeRTOS_IPInit+0x10c>)
 8001e68:	f7fe ff46 	bl	8000cf8 <vAssertCalled>
			( void ) memcpy( ipLOCAL_MAC_ADDRESS, ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8001e6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	6028      	str	r0, [r5, #0]
 8001e72:	889b      	ldrh	r3, [r3, #4]
 8001e74:	80ab      	strh	r3, [r5, #4]
			vNetworkSocketsInit();
 8001e76:	f000 fcc7 	bl	8002808 <vNetworkSocketsInit>
			xReturn = xTaskCreate( prvIPTask,
 8001e7a:	2004      	movs	r0, #4
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8001e82:	491b      	ldr	r1, [pc, #108]	@ (8001ef0 <FreeRTOS_IPInit+0x124>)
 8001e84:	e9cd 0700 	strd	r0, r7, [sp]
 8001e88:	481a      	ldr	r0, [pc, #104]	@ (8001ef4 <FreeRTOS_IPInit+0x128>)
 8001e8a:	f007 f80d 	bl	8008ea8 <xTaskCreate>
}
 8001e8e:	b003      	add	sp, #12
 8001e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: xNetworkBuffersInitialise() failed\n" ) );
 8001e94:	4818      	ldr	r0, [pc, #96]	@ (8001ef8 <FreeRTOS_IPInit+0x12c>)
 8001e96:	f00b f839 	bl	800cf0c <lUDPLoggingPrintf>
			vQueueDelete( xNetworkEventQueue );
 8001e9a:	6820      	ldr	r0, [r4, #0]
 8001e9c:	f006 ff46 	bl	8008d2c <vQueueDelete>
			xNetworkEventQueue = NULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	6023      	str	r3, [r4, #0]
	BaseType_t xReturn = pdFALSE;
 8001ea4:	2000      	movs	r0, #0
}
 8001ea6:	b003      	add	sp, #12
 8001ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 8001eac:	f44f 618f 	mov.w	r1, #1144	@ 0x478
 8001eb0:	4809      	ldr	r0, [pc, #36]	@ (8001ed8 <FreeRTOS_IPInit+0x10c>)
 8001eb2:	f7fe ff21 	bl	8000cf8 <vAssertCalled>
 8001eb6:	e794      	b.n	8001de2 <FreeRTOS_IPInit+0x16>
	configASSERT( xNetworkEventQueue != NULL );
 8001eb8:	4807      	ldr	r0, [pc, #28]	@ (8001ed8 <FreeRTOS_IPInit+0x10c>)
 8001eba:	f240 4191 	movw	r1, #1169	@ 0x491
 8001ebe:	f7fe ff1b 	bl	8000cf8 <vAssertCalled>
	if( xNetworkEventQueue != NULL )
 8001ec2:	6820      	ldr	r0, [r4, #0]
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	d1a4      	bne.n	8001e12 <FreeRTOS_IPInit+0x46>
		FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: Network event queue could not be created\n" ) );
 8001ec8:	480c      	ldr	r0, [pc, #48]	@ (8001efc <FreeRTOS_IPInit+0x130>)
 8001eca:	f00b f81f 	bl	800cf0c <lUDPLoggingPrintf>
 8001ece:	e7e9      	b.n	8001ea4 <FreeRTOS_IPInit+0xd8>
 8001ed0:	2000032c 	.word	0x2000032c
 8001ed4:	20000394 	.word	0x20000394
 8001ed8:	0800ff68 	.word	0x0800ff68
 8001edc:	20000360 	.word	0x20000360
 8001ee0:	0800ff9c 	.word	0x0800ff9c
 8001ee4:	2000037c 	.word	0x2000037c
 8001ee8:	20000368 	.word	0x20000368
 8001eec:	20000014 	.word	0x20000014
 8001ef0:	0800ffa4 	.word	0x0800ffa4
 8001ef4:	080021b9 	.word	0x080021b9
 8001ef8:	0800ffac 	.word	0x0800ffac
 8001efc:	0800ffe4 	.word	0x0800ffe4

08001f00 <FreeRTOS_GetAddressConfiguration>:
	if( pulIPAddress != NULL )
 8001f00:	b190      	cbz	r0, 8001f28 <FreeRTOS_GetAddressConfiguration+0x28>
{
 8001f02:	b410      	push	{r4}
		*pulIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8001f04:	4c0f      	ldr	r4, [pc, #60]	@ (8001f44 <FreeRTOS_GetAddressConfiguration+0x44>)
 8001f06:	6964      	ldr	r4, [r4, #20]
 8001f08:	6004      	str	r4, [r0, #0]
	if( pulNetMask != NULL )
 8001f0a:	b111      	cbz	r1, 8001f12 <FreeRTOS_GetAddressConfiguration+0x12>
		*pulNetMask = xNetworkAddressing.ulNetMask;
 8001f0c:	480e      	ldr	r0, [pc, #56]	@ (8001f48 <FreeRTOS_GetAddressConfiguration+0x48>)
 8001f0e:	6840      	ldr	r0, [r0, #4]
 8001f10:	6008      	str	r0, [r1, #0]
	if( pulGatewayAddress != NULL )
 8001f12:	b112      	cbz	r2, 8001f1a <FreeRTOS_GetAddressConfiguration+0x1a>
		*pulGatewayAddress = xNetworkAddressing.ulGatewayAddress;
 8001f14:	490c      	ldr	r1, [pc, #48]	@ (8001f48 <FreeRTOS_GetAddressConfiguration+0x48>)
 8001f16:	6889      	ldr	r1, [r1, #8]
 8001f18:	6011      	str	r1, [r2, #0]
	if( pulDNSServerAddress != NULL )
 8001f1a:	b113      	cbz	r3, 8001f22 <FreeRTOS_GetAddressConfiguration+0x22>
		*pulDNSServerAddress = xNetworkAddressing.ulDNSServerAddress;
 8001f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f48 <FreeRTOS_GetAddressConfiguration+0x48>)
 8001f1e:	68d2      	ldr	r2, [r2, #12]
 8001f20:	601a      	str	r2, [r3, #0]
}
 8001f22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f26:	4770      	bx	lr
	if( pulNetMask != NULL )
 8001f28:	b111      	cbz	r1, 8001f30 <FreeRTOS_GetAddressConfiguration+0x30>
		*pulNetMask = xNetworkAddressing.ulNetMask;
 8001f2a:	4807      	ldr	r0, [pc, #28]	@ (8001f48 <FreeRTOS_GetAddressConfiguration+0x48>)
 8001f2c:	6840      	ldr	r0, [r0, #4]
 8001f2e:	6008      	str	r0, [r1, #0]
	if( pulGatewayAddress != NULL )
 8001f30:	b112      	cbz	r2, 8001f38 <FreeRTOS_GetAddressConfiguration+0x38>
		*pulGatewayAddress = xNetworkAddressing.ulGatewayAddress;
 8001f32:	4905      	ldr	r1, [pc, #20]	@ (8001f48 <FreeRTOS_GetAddressConfiguration+0x48>)
 8001f34:	6889      	ldr	r1, [r1, #8]
 8001f36:	6011      	str	r1, [r2, #0]
	if( pulDNSServerAddress != NULL )
 8001f38:	b11b      	cbz	r3, 8001f42 <FreeRTOS_GetAddressConfiguration+0x42>
		*pulDNSServerAddress = xNetworkAddressing.ulDNSServerAddress;
 8001f3a:	4a03      	ldr	r2, [pc, #12]	@ (8001f48 <FreeRTOS_GetAddressConfiguration+0x48>)
 8001f3c:	68d2      	ldr	r2, [r2, #12]
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	4770      	bx	lr
 8001f42:	4770      	bx	lr
 8001f44:	20000014 	.word	0x20000014
 8001f48:	2000037c 	.word	0x2000037c

08001f4c <xSendEventToIPTask>:
	return xIPTaskInitialised;
 8001f4c:	4b16      	ldr	r3, [pc, #88]	@ (8001fa8 <xSendEventToIPTask+0x5c>)
	xEventMessage.pvData = ( void * ) NULL;
 8001f4e:	2200      	movs	r2, #0
{
 8001f50:	b510      	push	{r4, lr}
	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 8001f52:	681b      	ldr	r3, [r3, #0]
{
 8001f54:	b082      	sub	sp, #8
	xEventMessage.pvData = ( void * ) NULL;
 8001f56:	9201      	str	r2, [sp, #4]
	xEventMessage.eEventType = eEvent;
 8001f58:	f88d 0000 	strb.w	r0, [sp]
	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 8001f5c:	b963      	cbnz	r3, 8001f78 <xSendEventToIPTask+0x2c>
 8001f5e:	bb00      	cbnz	r0, 8001fa2 <xSendEventToIPTask+0x56>
 8001f60:	4c12      	ldr	r4, [pc, #72]	@ (8001fac <xSendEventToIPTask+0x60>)
	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 8001f62:	f007 fbf9 	bl	8009758 <xTaskGetCurrentTaskHandle>
			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 8001f66:	2300      	movs	r3, #0
 8001f68:	4669      	mov	r1, sp
 8001f6a:	6820      	ldr	r0, [r4, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f006 fc55 	bl	800881c <xQueueGenericSend>
			if( xReturn == pdFAIL )
 8001f72:	b188      	cbz	r0, 8001f98 <xSendEventToIPTask+0x4c>
}
 8001f74:	b002      	add	sp, #8
 8001f76:	bd10      	pop	{r4, pc}
				if( pxEvent->eEventType == eTCPTimerEvent )
 8001f78:	2806      	cmp	r0, #6
 8001f7a:	d1f1      	bne.n	8001f60 <xSendEventToIPTask+0x14>
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8001f7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb0 <xSendEventToIPTask+0x64>)
					if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 8001f7e:	4c0b      	ldr	r4, [pc, #44]	@ (8001fac <xSendEventToIPTask+0x60>)
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8001f80:	7813      	ldrb	r3, [r2, #0]
					if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 8001f82:	6820      	ldr	r0, [r4, #0]
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8001f84:	f043 0302 	orr.w	r3, r3, #2
 8001f88:	7013      	strb	r3, [r2, #0]
					if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 8001f8a:	f006 fea3 	bl	8008cd4 <uxQueueMessagesWaiting>
 8001f8e:	2800      	cmp	r0, #0
 8001f90:	d0e7      	beq.n	8001f62 <xSendEventToIPTask+0x16>
			xReturn = pdPASS;
 8001f92:	2001      	movs	r0, #1
}
 8001f94:	b002      	add	sp, #8
 8001f96:	bd10      	pop	{r4, pc}
				FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 8001f98:	f99d 1000 	ldrsb.w	r1, [sp]
 8001f9c:	4805      	ldr	r0, [pc, #20]	@ (8001fb4 <xSendEventToIPTask+0x68>)
 8001f9e:	f00a ffb5 	bl	800cf0c <lUDPLoggingPrintf>
		xReturn = pdFAIL;
 8001fa2:	2000      	movs	r0, #0
}
 8001fa4:	b002      	add	sp, #8
 8001fa6:	bd10      	pop	{r4, pc}
 8001fa8:	2000032c 	.word	0x2000032c
 8001fac:	20000394 	.word	0x20000394
 8001fb0:	20000330 	.word	0x20000330
 8001fb4:	0800ff3c 	.word	0x0800ff3c

08001fb8 <xSendEventStructToIPTask>:
	return xIPTaskInitialised;
 8001fb8:	4b17      	ldr	r3, [pc, #92]	@ (8002018 <xSendEventStructToIPTask+0x60>)
{
 8001fba:	b570      	push	{r4, r5, r6, lr}
 8001fbc:	4604      	mov	r4, r0
	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 8001fbe:	6818      	ldr	r0, [r3, #0]
{
 8001fc0:	460d      	mov	r5, r1
	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 8001fc2:	f994 3000 	ldrsb.w	r3, [r4]
 8001fc6:	b988      	cbnz	r0, 8001fec <xSendEventStructToIPTask+0x34>
 8001fc8:	bb23      	cbnz	r3, 8002014 <xSendEventStructToIPTask+0x5c>
 8001fca:	4e14      	ldr	r6, [pc, #80]	@ (800201c <xSendEventStructToIPTask+0x64>)
	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 8001fcc:	f007 fbc4 	bl	8009758 <xTaskGetCurrentTaskHandle>
 8001fd0:	4a13      	ldr	r2, [pc, #76]	@ (8002020 <xSendEventStructToIPTask+0x68>)
 8001fd2:	4603      	mov	r3, r0
			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 8001fd4:	4621      	mov	r1, r4
	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 8001fd6:	6812      	ldr	r2, [r2, #0]
			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 8001fd8:	6830      	ldr	r0, [r6, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	bf14      	ite	ne
 8001fde:	462a      	movne	r2, r5
 8001fe0:	2200      	moveq	r2, #0
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f006 fc1a 	bl	800881c <xQueueGenericSend>
			if( xReturn == pdFAIL )
 8001fe8:	b178      	cbz	r0, 800200a <xSendEventStructToIPTask+0x52>
}
 8001fea:	bd70      	pop	{r4, r5, r6, pc}
				if( pxEvent->eEventType == eTCPTimerEvent )
 8001fec:	2b06      	cmp	r3, #6
 8001fee:	d1ec      	bne.n	8001fca <xSendEventStructToIPTask+0x12>
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8001ff0:	4a0c      	ldr	r2, [pc, #48]	@ (8002024 <xSendEventStructToIPTask+0x6c>)
					if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 8001ff2:	4e0a      	ldr	r6, [pc, #40]	@ (800201c <xSendEventStructToIPTask+0x64>)
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8001ff4:	7813      	ldrb	r3, [r2, #0]
					if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 8001ff6:	6830      	ldr	r0, [r6, #0]
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	7013      	strb	r3, [r2, #0]
					if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 8001ffe:	f006 fe69 	bl	8008cd4 <uxQueueMessagesWaiting>
 8002002:	2800      	cmp	r0, #0
 8002004:	d0e2      	beq.n	8001fcc <xSendEventStructToIPTask+0x14>
			xReturn = pdPASS;
 8002006:	2001      	movs	r0, #1
}
 8002008:	bd70      	pop	{r4, r5, r6, pc}
				FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 800200a:	f994 1000 	ldrsb.w	r1, [r4]
 800200e:	4806      	ldr	r0, [pc, #24]	@ (8002028 <xSendEventStructToIPTask+0x70>)
 8002010:	f00a ff7c 	bl	800cf0c <lUDPLoggingPrintf>
		xReturn = pdFAIL;
 8002014:	2000      	movs	r0, #0
}
 8002016:	bd70      	pop	{r4, r5, r6, pc}
 8002018:	2000032c 	.word	0x2000032c
 800201c:	20000394 	.word	0x20000394
 8002020:	20000360 	.word	0x20000360
 8002024:	20000330 	.word	0x20000330
 8002028:	0800ff3c 	.word	0x0800ff3c

0800202c <prvProcessNetworkDownEvent>:
{
 800202c:	b570      	push	{r4, r5, r6, lr}
	xARPTimer.bActive = pdFALSE_UNSIGNED;
 800202e:	4c1c      	ldr	r4, [pc, #112]	@ (80020a0 <prvProcessNetworkDownEvent+0x74>)
			if( xCallEventHook == pdTRUE )
 8002030:	4d1c      	ldr	r5, [pc, #112]	@ (80020a4 <prvProcessNetworkDownEvent+0x78>)
	xARPTimer.bActive = pdFALSE_UNSIGNED;
 8002032:	7823      	ldrb	r3, [r4, #0]
			if( xCallEventHook == pdTRUE )
 8002034:	6828      	ldr	r0, [r5, #0]
	xARPTimer.bActive = pdFALSE_UNSIGNED;
 8002036:	f36f 0300 	bfc	r3, #0, #1
			if( xCallEventHook == pdTRUE )
 800203a:	2801      	cmp	r0, #1
	xARPTimer.bActive = pdFALSE_UNSIGNED;
 800203c:	7023      	strb	r3, [r4, #0]
			if( xCallEventHook == pdTRUE )
 800203e:	d02b      	beq.n	8002098 <prvProcessNetworkDownEvent+0x6c>
			xCallEventHook = pdTRUE;
 8002040:	2601      	movs	r6, #1
 8002042:	602e      	str	r6, [r5, #0]
	FreeRTOS_ClearARP();
 8002044:	f7ff fb7e 	bl	8001744 <FreeRTOS_ClearARP>
	if( xNetworkInterfaceInitialise() != pdPASS )
 8002048:	f005 f962 	bl	8007310 <xNetworkInterfaceInitialise>
 800204c:	42b0      	cmp	r0, r6
 800204e:	4603      	mov	r3, r0
 8002050:	d00f      	beq.n	8002072 <prvProcessNetworkDownEvent+0x46>
		vTaskDelay( ipINITIALISATION_RETRY_DELAY );
 8002052:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002056:	f007 f9c5 	bl	80093e4 <vTaskDelay>
	if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 800205a:	2100      	movs	r1, #0
 800205c:	4812      	ldr	r0, [pc, #72]	@ (80020a8 <prvProcessNetworkDownEvent+0x7c>)
 800205e:	f7ff ffab 	bl	8001fb8 <xSendEventStructToIPTask>
 8002062:	42b0      	cmp	r0, r6
		xNetworkDownEventPending = pdTRUE;
 8002064:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <prvProcessNetworkDownEvent+0x80>)
	if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 8002066:	d001      	beq.n	800206c <prvProcessNetworkDownEvent+0x40>
		xNetworkDownEventPending = pdTRUE;
 8002068:	601e      	str	r6, [r3, #0]
}
 800206a:	bd70      	pop	{r4, r5, r6, pc}
		xNetworkDownEventPending = pdFALSE;
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
}
 8002070:	bd70      	pop	{r4, r5, r6, pc}
	xNetworkUp = pdTRUE;
 8002072:	4a0f      	ldr	r2, [pc, #60]	@ (80020b0 <prvProcessNetworkDownEvent+0x84>)
			vApplicationIPNetworkEventHook( eNetworkUp );
 8002074:	2000      	movs	r0, #0
	pxTimer->ulReloadTime = xTime;
 8002076:	f242 7510 	movw	r5, #10000	@ 0x2710
	xNetworkUp = pdTRUE;
 800207a:	6013      	str	r3, [r2, #0]
			vApplicationIPNetworkEventHook( eNetworkUp );
 800207c:	f7fe fe62 	bl	8000d44 <vApplicationIPNetworkEventHook>
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 8002080:	480c      	ldr	r0, [pc, #48]	@ (80020b4 <prvProcessNetworkDownEvent+0x88>)
	pxTimer->ulReloadTime = xTime;
 8002082:	6125      	str	r5, [r4, #16]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 8002084:	f007 faf8 	bl	8009678 <vTaskSetTimeOutState>
	pxTimer->bActive = pdTRUE_UNSIGNED;
 8002088:	7823      	ldrb	r3, [r4, #0]
	pxTimer->ulRemainingTime = xTime;
 800208a:	60e5      	str	r5, [r4, #12]
	pxTimer->bActive = pdTRUE_UNSIGNED;
 800208c:	f023 0303 	bic.w	r3, r3, #3
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	7023      	strb	r3, [r4, #0]
}
 8002096:	bd70      	pop	{r4, r5, r6, pc}
				vApplicationIPNetworkEventHook( eNetworkDown );
 8002098:	f7fe fe54 	bl	8000d44 <vApplicationIPNetworkEventHook>
 800209c:	e7d0      	b.n	8002040 <prvProcessNetworkDownEvent+0x14>
 800209e:	bf00      	nop
 80020a0:	20000344 	.word	0x20000344
 80020a4:	20000324 	.word	0x20000324
 80020a8:	08010118 	.word	0x08010118
 80020ac:	20000364 	.word	0x20000364
 80020b0:	20000358 	.word	0x20000358
 80020b4:	20000348 	.word	0x20000348

080020b8 <eConsiderFrameForProcessing>:
{
 80020b8:	b510      	push	{r4, lr}
 80020ba:	4604      	mov	r4, r0
	if( memcmp( ipLOCAL_MAC_ADDRESS, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 80020bc:	2206      	movs	r2, #6
 80020be:	480e      	ldr	r0, [pc, #56]	@ (80020f8 <eConsiderFrameForProcessing+0x40>)
 80020c0:	4621      	mov	r1, r4
 80020c2:	f00c fa18 	bl	800e4f6 <memcmp>
 80020c6:	b128      	cbz	r0, 80020d4 <eConsiderFrameForProcessing+0x1c>
	else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 80020c8:	2206      	movs	r2, #6
 80020ca:	4621      	mov	r1, r4
 80020cc:	480b      	ldr	r0, [pc, #44]	@ (80020fc <eConsiderFrameForProcessing+0x44>)
 80020ce:	f00c fa12 	bl	800e4f6 <memcmp>
 80020d2:	b940      	cbnz	r0, 80020e6 <eConsiderFrameForProcessing+0x2e>
				if( usFrameType <= 0x600U )
 80020d4:	89a0      	ldrh	r0, [r4, #12]
 80020d6:	ba40      	rev16	r0, r0
 80020d8:	b280      	uxth	r0, r0
 80020da:	f5b0 6fc0 	cmp.w	r0, #1536	@ 0x600
 80020de:	bf94      	ite	ls
 80020e0:	2000      	movls	r0, #0
 80020e2:	2001      	movhi	r0, #1
}
 80020e4:	bd10      	pop	{r4, pc}
		if( memcmp( xLLMNR_MacAdress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 80020e6:	2206      	movs	r2, #6
 80020e8:	4621      	mov	r1, r4
 80020ea:	4805      	ldr	r0, [pc, #20]	@ (8002100 <eConsiderFrameForProcessing+0x48>)
 80020ec:	f00c fa03 	bl	800e4f6 <memcmp>
 80020f0:	2800      	cmp	r0, #0
 80020f2:	d0ef      	beq.n	80020d4 <eConsiderFrameForProcessing+0x1c>
		eReturn = eReleaseBuffer;
 80020f4:	2000      	movs	r0, #0
}
 80020f6:	bd10      	pop	{r4, pc}
 80020f8:	20000014 	.word	0x20000014
 80020fc:	08010120 	.word	0x08010120
 8002100:	0800ff34 	.word	0x0800ff34

08002104 <xIsIPv4Multicast>:
	uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 8002104:	ba00      	rev	r0, r0
	if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 8002106:	f100 5000 	add.w	r0, r0, #536870912	@ 0x20000000
}
 800210a:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 800210e:	bf2c      	ite	cs
 8002110:	2000      	movcs	r0, #0
 8002112:	2001      	movcc	r0, #1
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop

08002118 <vSetMultiCastIPv4MacAddress>:
	uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 8002118:	ba03      	rev	r3, r0
	pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 800211a:	225e      	movs	r2, #94	@ 0x5e
	pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 800211c:	f04f 0c01 	mov.w	ip, #1
	pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 8002120:	f3c0 2006 	ubfx	r0, r0, #8, #7
	pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 8002124:	708a      	strb	r2, [r1, #2]
	pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 8002126:	0a1a      	lsrs	r2, r3, #8
	pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 8002128:	f8a1 c000 	strh.w	ip, [r1]
	pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 800212c:	70c8      	strb	r0, [r1, #3]
	pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 800212e:	714b      	strb	r3, [r1, #5]
	pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 8002130:	710a      	strb	r2, [r1, #4]
}
 8002132:	4770      	bx	lr

08002134 <vReturnEthernetFrame>:
{
 8002134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002136:	460d      	mov	r5, r1
			if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8002138:	69c1      	ldr	r1, [r0, #28]
{
 800213a:	4604      	mov	r4, r0
			if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800213c:	293b      	cmp	r1, #59	@ 0x3b
 800213e:	d927      	bls.n	8002190 <vReturnEthernetFrame+0x5c>
		if( xReleaseAfterSend == pdFALSE )
 8002140:	b9a5      	cbnz	r5, 800216c <vReturnEthernetFrame+0x38>
			pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 8002142:	69e7      	ldr	r7, [r4, #28]
	pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 8002144:	4629      	mov	r1, r5
 8002146:	4638      	mov	r0, r7
 8002148:	f004 fc22 	bl	8006990 <pxGetNetworkBufferWithDescriptor>
	if( pxNewBuffer != NULL )
 800214c:	4606      	mov	r6, r0
 800214e:	b370      	cbz	r0, 80021ae <vReturnEthernetFrame+0x7a>
		pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 8002150:	6962      	ldr	r2, [r4, #20]
				xReleaseAfterSend = pdTRUE;
 8002152:	2501      	movs	r5, #1
		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 8002154:	6a23      	ldr	r3, [r4, #32]
		pxNewBuffer->xDataLength = uxNewLength;
 8002156:	61c7      	str	r7, [r0, #28]
		pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 8002158:	6142      	str	r2, [r0, #20]
		( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800215a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800215e:	6203      	str	r3, [r0, #32]
		( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8002160:	6980      	ldr	r0, [r0, #24]
 8002162:	f00b fc5d 	bl	800da20 <memcpy>
				pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 8002166:	69e3      	ldr	r3, [r4, #28]
 8002168:	4634      	mov	r4, r6
 800216a:	61f3      	str	r3, [r6, #28]
		pxEthernetHeader = ipCAST_PTR_TO_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthernetBuffer );
 800216c:	69a3      	ldr	r3, [r4, #24]
		( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 800216e:	4629      	mov	r1, r5
		( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8002170:	4a0f      	ldr	r2, [pc, #60]	@ (80021b0 <vReturnEthernetFrame+0x7c>)
		( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8002172:	f8d3 0006 	ldr.w	r0, [r3, #6]
 8002176:	6018      	str	r0, [r3, #0]
 8002178:	8958      	ldrh	r0, [r3, #10]
 800217a:	8098      	strh	r0, [r3, #4]
		( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800217c:	6810      	ldr	r0, [r2, #0]
 800217e:	f8c3 0006 	str.w	r0, [r3, #6]
		( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 8002182:	4620      	mov	r0, r4
		( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8002184:	8892      	ldrh	r2, [r2, #4]
 8002186:	815a      	strh	r2, [r3, #10]
}
 8002188:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 800218c:	f005 b980 	b.w	8007490 <xNetworkInterfaceOutput>
				FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );
 8002190:	4808      	ldr	r0, [pc, #32]	@ (80021b4 <vReturnEthernetFrame+0x80>)
 8002192:	f00a febb 	bl	800cf0c <lUDPLoggingPrintf>
				for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8002196:	69e3      	ldr	r3, [r4, #28]
 8002198:	2b3b      	cmp	r3, #59	@ 0x3b
 800219a:	dc05      	bgt.n	80021a8 <vReturnEthernetFrame+0x74>
					pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800219c:	2100      	movs	r1, #0
 800219e:	69a2      	ldr	r2, [r4, #24]
 80021a0:	54d1      	strb	r1, [r2, r3]
				for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80021a2:	3301      	adds	r3, #1
 80021a4:	2b3c      	cmp	r3, #60	@ 0x3c
 80021a6:	d1fa      	bne.n	800219e <vReturnEthernetFrame+0x6a>
				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80021a8:	233c      	movs	r3, #60	@ 0x3c
 80021aa:	61e3      	str	r3, [r4, #28]
 80021ac:	e7c8      	b.n	8002140 <vReturnEthernetFrame+0xc>
}
 80021ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021b0:	20000014 	.word	0x20000014
 80021b4:	08010020 	.word	0x08010020

080021b8 <prvIPTask>:
{
 80021b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pxTimer->ulReloadTime = xTime;
 80021bc:	4cb9      	ldr	r4, [pc, #740]	@ (80024a4 <prvIPTask+0x2ec>)
{
 80021be:	b08b      	sub	sp, #44	@ 0x2c
	pxTimer->ulReloadTime = xTime;
 80021c0:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
	FreeRTOS_NetworkDown();
 80021c4:	f7ff fdb8 	bl	8001d38 <FreeRTOS_NetworkDown>
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 80021c8:	1d20      	adds	r0, r4, #4
	pxTimer->bActive = pdTRUE_UNSIGNED;
 80021ca:	46a3      	mov	fp, r4
	pxTimer->ulReloadTime = xTime;
 80021cc:	6125      	str	r5, [r4, #16]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 80021ce:	f007 fa53 	bl	8009678 <vTaskSetTimeOutState>
	pxTimer->bActive = pdTRUE_UNSIGNED;
 80021d2:	7823      	ldrb	r3, [r4, #0]
	xIPTaskInitialised = pdTRUE;
 80021d4:	4ab4      	ldr	r2, [pc, #720]	@ (80024a8 <prvIPTask+0x2f0>)
	pxTimer->bActive = pdTRUE_UNSIGNED;
 80021d6:	f023 0303 	bic.w	r3, r3, #3
	pxTimer->ulRemainingTime = xTime;
 80021da:	60e5      	str	r5, [r4, #12]
	pxTimer->bActive = pdTRUE_UNSIGNED;
 80021dc:	4eb3      	ldr	r6, [pc, #716]	@ (80024ac <prvIPTask+0x2f4>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	4fb3      	ldr	r7, [pc, #716]	@ (80024b0 <prvIPTask+0x2f8>)
 80021e4:	4db3      	ldr	r5, [pc, #716]	@ (80024b4 <prvIPTask+0x2fc>)
 80021e6:	f80b 3b04 	strb.w	r3, [fp], #4
	xIPTaskInitialised = pdTRUE;
 80021ea:	2301      	movs	r3, #1
 80021ec:	f8df 92d8 	ldr.w	r9, [pc, #728]	@ 80024c8 <prvIPTask+0x310>
 80021f0:	f8df 82d8 	ldr.w	r8, [pc, #728]	@ 80024cc <prvIPTask+0x314>
	FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 80021f4:	48b0      	ldr	r0, [pc, #704]	@ (80024b8 <prvIPTask+0x300>)
	xIPTaskInitialised = pdTRUE;
 80021f6:	6013      	str	r3, [r2, #0]
	FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 80021f8:	f00a fe88 	bl	800cf0c <lUDPLoggingPrintf>
	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 80021fc:	4628      	mov	r0, r5
 80021fe:	f7ff fd63 	bl	8001cc8 <prvIPTimerCheck>
 8002202:	2800      	cmp	r0, #0
 8002204:	d140      	bne.n	8002288 <prvIPTask+0xd0>
			if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 8002206:	6830      	ldr	r0, [r6, #0]
 8002208:	f006 fd64 	bl	8008cd4 <uxQueueMessagesWaiting>
 800220c:	2800      	cmp	r0, #0
 800220e:	d148      	bne.n	80022a2 <prvIPTask+0xea>
			xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 8002210:	4620      	mov	r0, r4
 8002212:	f7ff fd59 	bl	8001cc8 <prvIPTimerCheck>
			if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 8002216:	683a      	ldr	r2, [r7, #0]
			xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 8002218:	4603      	mov	r3, r0
				xWillSleep = pdTRUE;
 800221a:	2001      	movs	r0, #1
			if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 800221c:	2a00      	cmp	r2, #0
 800221e:	d045      	beq.n	80022ac <prvIPTask+0xf4>
				xNextTime = xTCPTimerCheck( xWillSleep );
 8002220:	f001 fb4c 	bl	80038bc <xTCPTimerCheck>
 8002224:	4682      	mov	sl, r0
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 8002226:	4658      	mov	r0, fp
 8002228:	f007 fa26 	bl	8009678 <vTaskSetTimeOutState>
	if( xTime == ( TickType_t ) 0 )
 800222c:	faba f38a 	clz	r3, sl
	pxTimer->bActive = pdTRUE_UNSIGNED;
 8002230:	7822      	ldrb	r2, [r4, #0]
	if( xTime == ( TickType_t ) 0 )
 8002232:	095b      	lsrs	r3, r3, #5
	pxTimer->ulRemainingTime = xTime;
 8002234:	f8c4 a00c 	str.w	sl, [r4, #12]
	pxTimer->bActive = pdTRUE_UNSIGNED;
 8002238:	f022 0203 	bic.w	r2, r2, #3
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	4313      	orrs	r3, r2
 8002244:	7023      	strb	r3, [r4, #0]
				xProcessedTCPMessage = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	603b      	str	r3, [r7, #0]
	if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 800224a:	782b      	ldrb	r3, [r5, #0]
 800224c:	07db      	lsls	r3, r3, #31
 800224e:	d534      	bpl.n	80022ba <prvIPTask+0x102>
		if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
 8002250:	68ea      	ldr	r2, [r5, #12]
 8002252:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002256:	429a      	cmp	r2, r3
 8002258:	d82f      	bhi.n	80022ba <prvIPTask+0x102>
			xMaximumSleepTime = xARPTimer.ulReloadTime;
 800225a:	692a      	ldr	r2, [r5, #16]
		if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 800225c:	4552      	cmp	r2, sl
 800225e:	a904      	add	r1, sp, #16
 8002260:	6830      	ldr	r0, [r6, #0]
 8002262:	bf28      	it	cs
 8002264:	4652      	movcs	r2, sl
 8002266:	f006 fbb5 	bl	80089d4 <xQueueReceive>
 800226a:	bb48      	cbnz	r0, 80022c0 <prvIPTask+0x108>
			xReceivedEvent.eEventType = eNoEvent;
 800226c:	23ff      	movs	r3, #255	@ 0xff
 800226e:	f88d 3010 	strb.w	r3, [sp, #16]
		if( xNetworkDownEventPending != pdFALSE )
 8002272:	f8d8 3000 	ldr.w	r3, [r8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0c0      	beq.n	80021fc <prvIPTask+0x44>
			prvProcessNetworkDownEvent();
 800227a:	f7ff fed7 	bl	800202c <prvProcessNetworkDownEvent>
	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 800227e:	4628      	mov	r0, r5
 8002280:	f7ff fd22 	bl	8001cc8 <prvIPTimerCheck>
 8002284:	2800      	cmp	r0, #0
 8002286:	d0be      	beq.n	8002206 <prvIPTask+0x4e>
	xEventMessage.pvData = ( void * ) NULL;
 8002288:	2100      	movs	r1, #0
	xEventMessage.eEventType = eEvent;
 800228a:	2303      	movs	r3, #3
	return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 800228c:	a808      	add	r0, sp, #32
	xEventMessage.pvData = ( void * ) NULL;
 800228e:	9109      	str	r1, [sp, #36]	@ 0x24
	xEventMessage.eEventType = eEvent;
 8002290:	f88d 3020 	strb.w	r3, [sp, #32]
	return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 8002294:	f7ff fe90 	bl	8001fb8 <xSendEventStructToIPTask>
			if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 8002298:	6830      	ldr	r0, [r6, #0]
 800229a:	f006 fd1b 	bl	8008cd4 <uxQueueMessagesWaiting>
 800229e:	2800      	cmp	r0, #0
 80022a0:	d0b6      	beq.n	8002210 <prvIPTask+0x58>
			xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 80022a2:	4620      	mov	r0, r4
 80022a4:	f7ff fd10 	bl	8001cc8 <prvIPTimerCheck>
 80022a8:	4603      	mov	r3, r0
				xWillSleep = pdFALSE;
 80022aa:	2000      	movs	r0, #0
			if( xCheckTCPSockets != pdFALSE )
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1b7      	bne.n	8002220 <prvIPTask+0x68>
	if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 80022b0:	782b      	ldrb	r3, [r5, #0]
			if( xTCPTimer.ulRemainingTime < xMaximumSleepTime )
 80022b2:	f8d4 a00c 	ldr.w	sl, [r4, #12]
	if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 80022b6:	07db      	lsls	r3, r3, #31
 80022b8:	d4ca      	bmi.n	8002250 <prvIPTask+0x98>
	xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 80022ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80022be:	e7cd      	b.n	800225c <prvIPTask+0xa4>
				if( xReceivedEvent.eEventType != eNoEvent )
 80022c0:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 80022c4:	3301      	adds	r3, #1
 80022c6:	d0d4      	beq.n	8002272 <prvIPTask+0xba>
					uxCount = uxQueueSpacesAvailable( xNetworkEventQueue );
 80022c8:	6830      	ldr	r0, [r6, #0]
 80022ca:	f006 fd1b 	bl	8008d04 <uxQueueSpacesAvailable>
					if( uxQueueMinimumSpace > uxCount )
 80022ce:	f8d9 3000 	ldr.w	r3, [r9]
 80022d2:	4283      	cmp	r3, r0
		switch( xReceivedEvent.eEventType )
 80022d4:	f99d 3010 	ldrsb.w	r3, [sp, #16]
						uxQueueMinimumSpace = uxCount;
 80022d8:	bf88      	it	hi
 80022da:	f8c9 0000 	strhi.w	r0, [r9]
		switch( xReceivedEvent.eEventType )
 80022de:	2b0b      	cmp	r3, #11
 80022e0:	d8c7      	bhi.n	8002272 <prvIPTask+0xba>
 80022e2:	a201      	add	r2, pc, #4	@ (adr r2, 80022e8 <prvIPTask+0x130>)
 80022e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e8:	080023bd 	.word	0x080023bd
 80022ec:	0800238f 	.word	0x0800238f
 80022f0:	080023cf 	.word	0x080023cf
 80022f4:	080023c9 	.word	0x080023c9
 80022f8:	080023d9 	.word	0x080023d9
 80022fc:	08002273 	.word	0x08002273
 8002300:	08002385 	.word	0x08002385
 8002304:	08002363 	.word	0x08002363
 8002308:	0800235d 	.word	0x0800235d
 800230c:	08002329 	.word	0x08002329
 8002310:	08002321 	.word	0x08002321
 8002314:	08002319 	.word	0x08002319
							vSocketSelect( ipCAST_PTR_TO_TYPE_PTR( SocketSelect_t, xReceivedEvent.pvData ) );
 8002318:	9805      	ldr	r0, [sp, #20]
 800231a:	f001 fcb3 	bl	8003c84 <vSocketSelect>
				break;
 800231e:	e7a8      	b.n	8002272 <prvIPTask+0xba>
				( void ) vSocketClose( ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData ) );
 8002320:	9805      	ldr	r0, [sp, #20]
 8002322:	f000 fda5 	bl	8002e70 <vSocketClose>
				break;
 8002326:	e7a4      	b.n	8002272 <prvIPTask+0xba>
				pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData );
 8002328:	f8dd a014 	ldr.w	sl, [sp, #20]
				xAddress.sin_addr = 0U; /* For the moment. */
 800232c:	2300      	movs	r3, #0
				( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 800232e:	a906      	add	r1, sp, #24
				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 8002330:	f8ba 2024 	ldrh.w	r2, [sl, #36]	@ 0x24
				( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8002334:	4650      	mov	r0, sl
				pxSocket->usLocalPort = 0U;
 8002336:	f8aa 3024 	strh.w	r3, [sl, #36]	@ 0x24
				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 800233a:	ba52      	rev16	r2, r2
				xAddress.sin_addr = 0U; /* For the moment. */
 800233c:	9307      	str	r3, [sp, #28]
				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 800233e:	f8ad 201a 	strh.w	r2, [sp, #26]
				( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8002342:	2208      	movs	r2, #8
 8002344:	f000 fcb0 	bl	8002ca8 <vSocketBind>
				pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 8002348:	f8da 3000 	ldr.w	r3, [sl]
				vSocketWakeUpUser( pxSocket );
 800234c:	4650      	mov	r0, sl
				pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 800234e:	f043 0310 	orr.w	r3, r3, #16
 8002352:	f8ca 3000 	str.w	r3, [sl]
				vSocketWakeUpUser( pxSocket );
 8002356:	f001 f80b 	bl	8003370 <vSocketWakeUpUser>
				break;
 800235a:	e78a      	b.n	8002272 <prvIPTask+0xba>
					vTCPNetStat();
 800235c:	f001 fbf4 	bl	8003b48 <vTCPNetStat>
				break;
 8002360:	e787      	b.n	8002272 <prvIPTask+0xba>
					pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData );
 8002362:	f8dd a014 	ldr.w	sl, [sp, #20]
					if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 8002366:	4650      	mov	r0, sl
 8002368:	f003 fbf4 	bl	8005b54 <xTCPCheckNewClient>
 800236c:	2800      	cmp	r0, #0
 800236e:	d080      	beq.n	8002272 <prvIPTask+0xba>
						pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8002370:	f8da 3000 	ldr.w	r3, [sl]
						vSocketWakeUpUser( pxSocket );
 8002374:	4650      	mov	r0, sl
						pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8002376:	f043 0304 	orr.w	r3, r3, #4
 800237a:	f8ca 3000 	str.w	r3, [sl]
						vSocketWakeUpUser( pxSocket );
 800237e:	f000 fff7 	bl	8003370 <vSocketWakeUpUser>
 8002382:	e776      	b.n	8002272 <prvIPTask+0xba>
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8002384:	7823      	ldrb	r3, [r4, #0]
 8002386:	f043 0302 	orr.w	r3, r3, #2
 800238a:	7023      	strb	r3, [r4, #0]
				break;
 800238c:	e771      	b.n	8002272 <prvIPTask+0xba>
				prvHandleEthernetPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData ) );
 800238e:	f8dd a014 	ldr.w	sl, [sp, #20]
	configASSERT( pxNetworkBuffer != NULL );
 8002392:	f1ba 0f00 	cmp.w	sl, #0
 8002396:	d03d      	beq.n	8002414 <prvIPTask+0x25c>
	if( pxNetworkBuffer->xDataLength >= sizeof( EthernetHeader_t ) )
 8002398:	f8da 201c 	ldr.w	r2, [sl, #28]
 800239c:	2a0d      	cmp	r2, #13
 800239e:	d909      	bls.n	80023b4 <prvIPTask+0x1fc>
		pxEthernetHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthernetBuffer );
 80023a0:	f8da 3018 	ldr.w	r3, [sl, #24]
			switch( pxEthernetHeader->usFrameType )
 80023a4:	8999      	ldrh	r1, [r3, #12]
 80023a6:	2908      	cmp	r1, #8
 80023a8:	d01a      	beq.n	80023e0 <prvIPTask+0x228>
 80023aa:	f5b1 6fc1 	cmp.w	r1, #1544	@ 0x608
 80023ae:	d101      	bne.n	80023b4 <prvIPTask+0x1fc>
					if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 80023b0:	2a29      	cmp	r2, #41	@ 0x29
 80023b2:	d835      	bhi.n	8002420 <prvIPTask+0x268>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80023b4:	4650      	mov	r0, sl
 80023b6:	f004 fb27 	bl	8006a08 <vReleaseNetworkBufferAndDescriptor>
			break;
 80023ba:	e75a      	b.n	8002272 <prvIPTask+0xba>
				xNetworkUp = pdFALSE;
 80023bc:	2300      	movs	r3, #0
 80023be:	4a3f      	ldr	r2, [pc, #252]	@ (80024bc <prvIPTask+0x304>)
 80023c0:	6013      	str	r3, [r2, #0]
				prvProcessNetworkDownEvent();
 80023c2:	f7ff fe33 	bl	800202c <prvProcessNetworkDownEvent>
				break;
 80023c6:	e754      	b.n	8002272 <prvIPTask+0xba>
				vARPAgeCache();
 80023c8:	f7ff f95e 	bl	8001688 <vARPAgeCache>
				break;
 80023cc:	e751      	b.n	8002272 <prvIPTask+0xba>
				   ( void ) xNetworkInterfaceOutput( pxDescriptor, pdTRUE );
 80023ce:	2101      	movs	r1, #1
 80023d0:	9805      	ldr	r0, [sp, #20]
 80023d2:	f005 f85d 	bl	8007490 <xNetworkInterfaceOutput>
			   break;
 80023d6:	e74c      	b.n	8002272 <prvIPTask+0xba>
				vProcessGeneratedUDPPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData ) );
 80023d8:	9805      	ldr	r0, [sp, #20]
 80023da:	f004 f9bf 	bl	800675c <vProcessGeneratedUDPPacket>
				break;
 80023de:	e748      	b.n	8002272 <prvIPTask+0xba>
					if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 80023e0:	2a21      	cmp	r2, #33	@ 0x21
 80023e2:	d9e7      	bls.n	80023b4 <prvIPTask+0x1fc>
	size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 80023e4:	f893 c00e 	ldrb.w	ip, [r3, #14]
	if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 80023e8:	f1a2 000e 	sub.w	r0, r2, #14
	UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( uxLength & 0x0FU ) << 2 );
 80023ec:	ea4f 018c 	mov.w	r1, ip, lsl #2
 80023f0:	f001 013c 	and.w	r1, r1, #60	@ 0x3c
	if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 80023f4:	4281      	cmp	r1, r0
 80023f6:	d8dd      	bhi.n	80023b4 <prvIPTask+0x1fc>
 80023f8:	2913      	cmp	r1, #19
 80023fa:	d9db      	bls.n	80023b4 <prvIPTask+0x1fc>
			if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 80023fc:	f1ac 0c45 	sub.w	ip, ip, #69	@ 0x45
		ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8002400:	7dd8      	ldrb	r0, [r3, #23]
			if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 8002402:	f1bc 0f0a 	cmp.w	ip, #10
		ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8002406:	9001      	str	r0, [sp, #4]
			if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 8002408:	d918      	bls.n	800243c <prvIPTask+0x284>
				DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800240a:	2102      	movs	r1, #2
			FreeRTOS_printf( ( "xCheckSizeFields: location %ld\n", xLocation ) );
 800240c:	482c      	ldr	r0, [pc, #176]	@ (80024c0 <prvIPTask+0x308>)
 800240e:	f00a fd7d 	bl	800cf0c <lUDPLoggingPrintf>
		if( eReturn == eProcessBuffer )
 8002412:	e7cf      	b.n	80023b4 <prvIPTask+0x1fc>
	configASSERT( pxNetworkBuffer != NULL );
 8002414:	f44f 61d3 	mov.w	r1, #1688	@ 0x698
 8002418:	482a      	ldr	r0, [pc, #168]	@ (80024c4 <prvIPTask+0x30c>)
 800241a:	f7fe fc6d 	bl	8000cf8 <vAssertCalled>
 800241e:	e7bb      	b.n	8002398 <prvIPTask+0x1e0>
						eReturned = eARPProcessPacket( ipCAST_PTR_TO_TYPE_PTR( ARPPacket_t, pxNetworkBuffer->pucEthernetBuffer ) );
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff f801 	bl	8001428 <eARPProcessPacket>
	switch( eReturned )
 8002426:	2802      	cmp	r0, #2
 8002428:	d104      	bne.n	8002434 <prvIPTask+0x27c>
			vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 800242a:	4650      	mov	r0, sl
 800242c:	2101      	movs	r1, #1
 800242e:	f7ff fe81 	bl	8002134 <vReturnEthernetFrame>
			break;
 8002432:	e71e      	b.n	8002272 <prvIPTask+0xba>
	switch( eReturned )
 8002434:	2803      	cmp	r0, #3
 8002436:	f43f af1c 	beq.w	8002272 <prvIPTask+0xba>
 800243a:	e7bb      	b.n	80023b4 <prvIPTask+0x1fc>
			if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 800243c:	f101 000e 	add.w	r0, r1, #14
			uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 8002440:	fa1f fc81 	uxth.w	ip, r1
			if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 8002444:	4282      	cmp	r2, r0
 8002446:	d317      	bcc.n	8002478 <prvIPTask+0x2c0>
			if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 8002448:	8a18      	ldrh	r0, [r3, #16]
 800244a:	ba40      	rev16	r0, r0
 800244c:	b280      	uxth	r0, r0
 800244e:	f100 0e0e 	add.w	lr, r0, #14
 8002452:	9002      	str	r0, [sp, #8]
 8002454:	4572      	cmp	r2, lr
 8002456:	d311      	bcc.n	800247c <prvIPTask+0x2c4>
			if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 8002458:	9801      	ldr	r0, [sp, #4]
 800245a:	2811      	cmp	r0, #17
 800245c:	f000 80e6 	beq.w	800262c <prvIPTask+0x474>
			else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 8002460:	9801      	ldr	r0, [sp, #4]
 8002462:	2806      	cmp	r0, #6
 8002464:	d00c      	beq.n	8002480 <prvIPTask+0x2c8>
			else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 8002466:	9801      	ldr	r0, [sp, #4]
 8002468:	f100 3eff 	add.w	lr, r0, #4294967295
 800246c:	f1be 0f01 	cmp.w	lr, #1
 8002470:	f240 80dc 	bls.w	800262c <prvIPTask+0x474>
				DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 8002474:	2105      	movs	r1, #5
 8002476:	e7c9      	b.n	800240c <prvIPTask+0x254>
				DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 8002478:	2103      	movs	r1, #3
 800247a:	e7c7      	b.n	800240c <prvIPTask+0x254>
				DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800247c:	2104      	movs	r1, #4
 800247e:	e7c5      	b.n	800240c <prvIPTask+0x254>
				uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 8002480:	f10c 0e22 	add.w	lr, ip, #34	@ 0x22
			if( uxBufferLength < uxMinimumLength )
 8002484:	4572      	cmp	r2, lr
 8002486:	f0c0 80cf 	bcc.w	8002628 <prvIPTask+0x470>
			uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 800248a:	9802      	ldr	r0, [sp, #8]
 800248c:	eba0 000c 	sub.w	r0, r0, ip
			if( ( uxLength < ( ( size_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 8002490:	2807      	cmp	r0, #7
 8002492:	d905      	bls.n	80024a0 <prvIPTask+0x2e8>
				( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 8002494:	f240 5edc 	movw	lr, #1500	@ 0x5dc
 8002498:	ebae 0e0c 	sub.w	lr, lr, ip
			if( ( uxLength < ( ( size_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 800249c:	4570      	cmp	r0, lr
 800249e:	d917      	bls.n	80024d0 <prvIPTask+0x318>
				DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 80024a0:	2107      	movs	r1, #7
 80024a2:	e7b3      	b.n	800240c <prvIPTask+0x254>
 80024a4:	20000330 	.word	0x20000330
 80024a8:	2000032c 	.word	0x2000032c
 80024ac:	20000394 	.word	0x20000394
 80024b0:	2000035c 	.word	0x2000035c
 80024b4:	20000344 	.word	0x20000344
 80024b8:	08010044 	.word	0x08010044
 80024bc:	20000358 	.word	0x20000358
 80024c0:	08010058 	.word	0x08010058
 80024c4:	0800ff68 	.word	0x0800ff68
 80024c8:	2000000c 	.word	0x2000000c
 80024cc:	20000364 	.word	0x20000364
						if( pxIPPacket->xIPHeader.ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 80024d0:	9801      	ldr	r0, [sp, #4]
 80024d2:	2811      	cmp	r0, #17
 80024d4:	d05a      	beq.n	800258c <prvIPTask+0x3d4>
			if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 80024d6:	2914      	cmp	r1, #20
 80024d8:	d119      	bne.n	800250e <prvIPTask+0x356>
					vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 80024da:	f8d3 101a 	ldr.w	r1, [r3, #26]
 80024de:	1d98      	adds	r0, r3, #6
 80024e0:	9302      	str	r3, [sp, #8]
 80024e2:	f7fe feeb 	bl	80012bc <vARPRefreshCacheEntry>
				switch( ucProtocol )
 80024e6:	9a01      	ldr	r2, [sp, #4]
 80024e8:	9b02      	ldr	r3, [sp, #8]
 80024ea:	2a01      	cmp	r2, #1
 80024ec:	d062      	beq.n	80025b4 <prvIPTask+0x3fc>
 80024ee:	2a06      	cmp	r2, #6
 80024f0:	f47f af60 	bne.w	80023b4 <prvIPTask+0x1fc>
								if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 80024f4:	4650      	mov	r0, sl
 80024f6:	f002 fbcb 	bl	8004c90 <xProcessReceivedTCPPacket>
								xProcessedTCPMessage++;
 80024fa:	683b      	ldr	r3, [r7, #0]
								if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 80024fc:	2801      	cmp	r0, #1
								xProcessedTCPMessage++;
 80024fe:	f103 0301 	add.w	r3, r3, #1
 8002502:	603b      	str	r3, [r7, #0]
								if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 8002504:	f47f af56 	bne.w	80023b4 <prvIPTask+0x1fc>
 8002508:	e6b3      	b.n	8002272 <prvIPTask+0xba>
			if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 800250a:	2914      	cmp	r1, #20
 800250c:	d019      	beq.n	8002542 <prvIPTask+0x38a>
						const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800250e:	f1a1 0014 	sub.w	r0, r1, #20
						const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 8002512:	3a22      	subs	r2, #34	@ 0x22
						const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 8002514:	310e      	adds	r1, #14
						( void ) memmove( pucTarget, pucSource, xMoveLen );
 8002516:	9303      	str	r3, [sp, #12]
 8002518:	1a12      	subs	r2, r2, r0
 800251a:	9002      	str	r0, [sp, #8]
 800251c:	4419      	add	r1, r3
 800251e:	f103 0022 	add.w	r0, r3, #34	@ 0x22
 8002522:	f00b fff8 	bl	800e516 <memmove>
						pxNetworkBuffer->xDataLength -= optlen;
 8002526:	f8da 201c 	ldr.w	r2, [sl, #28]
 800252a:	9802      	ldr	r0, [sp, #8]
						pxIPHeader->ucVersionHeaderLength = ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 800252c:	9b03      	ldr	r3, [sp, #12]
						pxNetworkBuffer->xDataLength -= optlen;
 800252e:	1a12      	subs	r2, r2, r0
 8002530:	f8ca 201c 	str.w	r2, [sl, #28]
						pxIPHeader->ucVersionHeaderLength = ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 8002534:	2245      	movs	r2, #69	@ 0x45
 8002536:	739a      	strb	r2, [r3, #14]
				if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 8002538:	9a01      	ldr	r2, [sp, #4]
 800253a:	2a11      	cmp	r2, #17
 800253c:	d1cd      	bne.n	80024da <prvIPTask+0x322>
 800253e:	e9da 3206 	ldrd	r3, r2, [sl, #24]
						   usLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength );
 8002542:	8cd9      	ldrh	r1, [r3, #38]	@ 0x26
						   if( ( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) ) &&
 8002544:	2a29      	cmp	r2, #41	@ 0x29
 8002546:	ba49      	rev16	r1, r1
 8002548:	b289      	uxth	r1, r1
 800254a:	f67f af33 	bls.w	80023b4 <prvIPTask+0x1fc>
 800254e:	2907      	cmp	r1, #7
 8002550:	f67f af30 	bls.w	80023b4 <prvIPTask+0x1fc>
							   uxPayloadSize_1 = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 8002554:	3a2a      	subs	r2, #42	@ 0x2a
							   uxPayloadSize_2 = ( ( size_t ) usLength ) - sizeof( UDPHeader_t );
 8002556:	f1a1 0008 	sub.w	r0, r1, #8
							   if( uxPayloadSize_1 > uxPayloadSize_2 )
 800255a:	4282      	cmp	r2, r0
 800255c:	d902      	bls.n	8002564 <prvIPTask+0x3ac>
								   pxNetworkBuffer->xDataLength = uxPayloadSize_2 + sizeof( UDPPacket_t );
 800255e:	3122      	adds	r1, #34	@ 0x22
 8002560:	f8ca 101c 	str.w	r1, [sl, #28]
							   pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
 8002564:	f893 1023 	ldrb.w	r1, [r3, #35]	@ 0x23
							   if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 8002568:	4650      	mov	r0, sl
							   pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
 800256a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800256e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002572:	f8aa 2020 	strh.w	r2, [sl, #32]
							   pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 8002576:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800257a:	f8ca 2014 	str.w	r2, [sl, #20]
							   if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 800257e:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
 8002580:	f004 f952 	bl	8006828 <xProcessReceivedUDPPacket>
 8002584:	2801      	cmp	r0, #1
 8002586:	f47f af15 	bne.w	80023b4 <prvIPTask+0x1fc>
 800258a:	e672      	b.n	8002272 <prvIPTask+0xba>
							if( *pusChecksum == ( uint16_t ) 0U )
 800258c:	1858      	adds	r0, r3, r1
 800258e:	8a80      	ldrh	r0, [r0, #20]
 8002590:	2800      	cmp	r0, #0
 8002592:	d1ba      	bne.n	800250a <prvIPTask+0x352>
										if( xCount < 5 )
 8002594:	4a29      	ldr	r2, [pc, #164]	@ (800263c <prvIPTask+0x484>)
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	2a04      	cmp	r2, #4
 800259a:	f73f af0b 	bgt.w	80023b4 <prvIPTask+0x1fc>
											FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %lxip without CRC dropped\n",
 800259e:	f8d3 101a 	ldr.w	r1, [r3, #26]
 80025a2:	4827      	ldr	r0, [pc, #156]	@ (8002640 <prvIPTask+0x488>)
 80025a4:	ba09      	rev	r1, r1
 80025a6:	f00a fcb1 	bl	800cf0c <lUDPLoggingPrintf>
											xCount++;
 80025aa:	4a24      	ldr	r2, [pc, #144]	@ (800263c <prvIPTask+0x484>)
 80025ac:	6813      	ldr	r3, [r2, #0]
 80025ae:	3301      	adds	r3, #1
 80025b0:	6013      	str	r3, [r2, #0]
		if( eReturn == eProcessBuffer )
 80025b2:	e6ff      	b.n	80023b4 <prvIPTask+0x1fc>
							if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 80025b4:	f8da 201c 	ldr.w	r2, [sl, #28]
 80025b8:	2a29      	cmp	r2, #41	@ 0x29
 80025ba:	f67f aefb 	bls.w	80023b4 <prvIPTask+0x1fc>
								if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 80025be:	f8d3 201e 	ldr.w	r2, [r3, #30]
 80025c2:	4b20      	ldr	r3, [pc, #128]	@ (8002644 <prvIPTask+0x48c>)
 80025c4:	6959      	ldr	r1, [r3, #20]
								ICMPPacket_t * pxICMPPacket = ipCAST_PTR_TO_TYPE_PTR( ICMPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 80025c6:	f8da 3018 	ldr.w	r3, [sl, #24]
								if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 80025ca:	428a      	cmp	r2, r1
 80025cc:	f47f aef2 	bne.w	80023b4 <prvIPTask+0x1fc>
		switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 80025d0:	f893 0022 	ldrb.w	r0, [r3, #34]	@ 0x22
 80025d4:	b1a8      	cbz	r0, 8002602 <prvIPTask+0x44a>
 80025d6:	2808      	cmp	r0, #8
 80025d8:	f47f aeec 	bne.w	80023b4 <prvIPTask+0x1fc>
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80025dc:	f8d3 101a 	ldr.w	r1, [r3, #26]
		pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 80025e0:	f8c3 201a 	str.w	r2, [r3, #26]
		pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 80025e4:	2200      	movs	r2, #0
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80025e6:	f8c3 101e 	str.w	r1, [r3, #30]
		if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFU - usRequest ) )
 80025ea:	f64f 71f6 	movw	r1, #65526	@ 0xfff6
		pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 80025ee:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFU - usRequest ) )
 80025f2:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 80025f4:	428a      	cmp	r2, r1
			pxICMPHeader->usChecksum = pxICMPHeader->usChecksum + FreeRTOS_htons( usRequest + 1U );
 80025f6:	bf8c      	ite	hi
 80025f8:	f502 7284 	addhi.w	r2, r2, #264	@ 0x108
			pxICMPHeader->usChecksum = pxICMPHeader->usChecksum + FreeRTOS_htons( usRequest );
 80025fc:	3208      	addls	r2, #8
 80025fe:	849a      	strh	r2, [r3, #36]	@ 0x24
	switch( eReturned )
 8002600:	e713      	b.n	800242a <prvIPTask+0x272>
		usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMP_HEADER );
 8002602:	8a1a      	ldrh	r2, [r3, #16]
 8002604:	f103 0e29 	add.w	lr, r3, #41	@ 0x29
		for( usCount = 0; usCount < usDataLength; usCount++ )
 8002608:	4601      	mov	r1, r0
 800260a:	ba52      	rev16	r2, r2
		usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMP_HEADER );
 800260c:	3a1c      	subs	r2, #28
 800260e:	b292      	uxth	r2, r2
		for( usCount = 0; usCount < usDataLength; usCount++ )
 8002610:	e004      	b.n	800261c <prvIPTask+0x464>
			if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 8002612:	f81e cf01 	ldrb.w	ip, [lr, #1]!
 8002616:	f1bc 0f78 	cmp.w	ip, #120	@ 0x78
 800261a:	d10a      	bne.n	8002632 <prvIPTask+0x47a>
		for( usCount = 0; usCount < usDataLength; usCount++ )
 800261c:	fa1f fc81 	uxth.w	ip, r1
 8002620:	3101      	adds	r1, #1
 8002622:	4594      	cmp	ip, r2
 8002624:	d3f5      	bcc.n	8002612 <prvIPTask+0x45a>
 8002626:	e005      	b.n	8002634 <prvIPTask+0x47c>
				DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 8002628:	2106      	movs	r1, #6
 800262a:	e6ef      	b.n	800240c <prvIPTask+0x254>
				uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMP_HEADER;
 800262c:	f10c 0e16 	add.w	lr, ip, #22
 8002630:	e728      	b.n	8002484 <prvIPTask+0x2cc>
				eStatus = eInvalidData;
 8002632:	2002      	movs	r0, #2
		vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 8002634:	8cd9      	ldrh	r1, [r3, #38]	@ 0x26
 8002636:	f7fe fbeb 	bl	8000e10 <vApplicationPingReplyHook>
	switch( eReturned )
 800263a:	e6bb      	b.n	80023b4 <prvIPTask+0x1fc>
 800263c:	20000328 	.word	0x20000328
 8002640:	08010078 	.word	0x08010078
 8002644:	20000014 	.word	0x20000014

08002648 <vPrintResourceStats>:
	{
 8002648:	b510      	push	{r4, lr}
		uxCurrentBufferCount = uxGetMinimumFreeNetworkBuffers();
 800264a:	f004 fa03 	bl	8006a54 <uxGetMinimumFreeNetworkBuffers>
		if( uxLastMinBufferCount > uxCurrentBufferCount )
 800264e:	4b1b      	ldr	r3, [pc, #108]	@ (80026bc <vPrintResourceStats+0x74>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	4282      	cmp	r2, r0
 8002654:	d827      	bhi.n	80026a6 <vPrintResourceStats+0x5e>
		uxMinSize = xPortGetMinimumEverFreeHeapSize();
 8002656:	f007 fd63 	bl	800a120 <xPortGetMinimumEverFreeHeapSize>
		if( uxMinLastSize == 0U )
 800265a:	4a19      	ldr	r2, [pc, #100]	@ (80026c0 <vPrintResourceStats+0x78>)
		uxMinSize = xPortGetMinimumEverFreeHeapSize();
 800265c:	4604      	mov	r4, r0
		if( uxMinLastSize == 0U )
 800265e:	6813      	ldr	r3, [r2, #0]
 8002660:	b93b      	cbnz	r3, 8002672 <vPrintResourceStats+0x2a>
			uxMinLastSize = uxMinSize;
 8002662:	6010      	str	r0, [r2, #0]
 *
 * @return The minimum possible space in the IP task queue.
 */
	UBaseType_t uxGetMinimumIPQueueSpace( void )
	{
		return uxQueueMinimumSpace;
 8002664:	4a17      	ldr	r2, [pc, #92]	@ (80026c4 <vPrintResourceStats+0x7c>)
				if( uxLastMinQueueSpace != uxCurrentCount )
 8002666:	4b18      	ldr	r3, [pc, #96]	@ (80026c8 <vPrintResourceStats+0x80>)
		return uxQueueMinimumSpace;
 8002668:	6811      	ldr	r1, [r2, #0]
				if( uxLastMinQueueSpace != uxCurrentCount )
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	428a      	cmp	r2, r1
 800266e:	d114      	bne.n	800269a <vPrintResourceStats+0x52>
	}
 8002670:	bd10      	pop	{r4, pc}
		else if( uxMinSize >= ipMONITOR_MAX_HEAP )
 8002672:	f5b0 1f80 	cmp.w	r0, #1048576	@ 0x100000
 8002676:	d2f5      	bcs.n	8002664 <vPrintResourceStats+0x1c>
		else if( ( uxMinLastSize * ipMONITOR_PERCENTAGE_90 ) > ( uxMinSize * ipMONITOR_PERCENTAGE_100 ) )
 8002678:	205a      	movs	r0, #90	@ 0x5a
 800267a:	2164      	movs	r1, #100	@ 0x64
 800267c:	fb00 f303 	mul.w	r3, r0, r3
 8002680:	fb04 f101 	mul.w	r1, r4, r1
 8002684:	428b      	cmp	r3, r1
 8002686:	d9ed      	bls.n	8002664 <vPrintResourceStats+0x1c>
			uxMinLastSize = uxMinSize;
 8002688:	6014      	str	r4, [r2, #0]
			FreeRTOS_printf( ( "Heap: current %lu lowest %lu\n", ( printf_long_unsigned ) xPortGetFreeHeapSize(), ( printf_long_unsigned ) uxMinSize ) );
 800268a:	f007 fd43 	bl	800a114 <xPortGetFreeHeapSize>
 800268e:	4622      	mov	r2, r4
 8002690:	4601      	mov	r1, r0
 8002692:	480e      	ldr	r0, [pc, #56]	@ (80026cc <vPrintResourceStats+0x84>)
 8002694:	f00a fc3a 	bl	800cf0c <lUDPLoggingPrintf>
 8002698:	e7e4      	b.n	8002664 <vPrintResourceStats+0x1c>
					FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
 800269a:	480d      	ldr	r0, [pc, #52]	@ (80026d0 <vPrintResourceStats+0x88>)
					uxLastMinQueueSpace = uxCurrentCount;
 800269c:	6019      	str	r1, [r3, #0]
	}
 800269e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
 80026a2:	f00a bc33 	b.w	800cf0c <lUDPLoggingPrintf>
			uxLastMinBufferCount = uxCurrentBufferCount;
 80026a6:	4604      	mov	r4, r0
 80026a8:	6018      	str	r0, [r3, #0]
			FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 80026aa:	f004 f9d9 	bl	8006a60 <uxGetNumberOfFreeNetworkBuffers>
 80026ae:	4601      	mov	r1, r0
 80026b0:	4622      	mov	r2, r4
 80026b2:	4808      	ldr	r0, [pc, #32]	@ (80026d4 <vPrintResourceStats+0x8c>)
 80026b4:	f00a fc2a 	bl	800cf0c <lUDPLoggingPrintf>
 80026b8:	e7cd      	b.n	8002656 <vPrintResourceStats+0xe>
 80026ba:	bf00      	nop
 80026bc:	20000008 	.word	0x20000008
 80026c0:	20000320 	.word	0x20000320
 80026c4:	2000000c 	.word	0x2000000c
 80026c8:	2000031c 	.word	0x2000031c
 80026cc:	080100dc 	.word	0x080100dc
 80026d0:	080100fc 	.word	0x080100fc
 80026d4:	080100b8 	.word	0x080100b8

080026d8 <FreeRTOS_GetIPAddress>:
	return *ipLOCAL_IP_ADDRESS_POINTER;
 80026d8:	4b01      	ldr	r3, [pc, #4]	@ (80026e0 <FreeRTOS_GetIPAddress+0x8>)
}
 80026da:	6958      	ldr	r0, [r3, #20]
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20000014 	.word	0x20000014

080026e4 <FreeRTOS_GetNetmask>:
	return xNetworkAddressing.ulNetMask;
 80026e4:	4b01      	ldr	r3, [pc, #4]	@ (80026ec <FreeRTOS_GetNetmask+0x8>)
}
 80026e6:	6858      	ldr	r0, [r3, #4]
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	2000037c 	.word	0x2000037c

080026f0 <FreeRTOS_GetMACAddress>:
}
 80026f0:	4800      	ldr	r0, [pc, #0]	@ (80026f4 <FreeRTOS_GetMACAddress+0x4>)
 80026f2:	4770      	bx	lr
 80026f4:	20000014 	.word	0x20000014

080026f8 <xIPIsNetworkTaskReady>:
	return xIPTaskInitialised;
 80026f8:	4b01      	ldr	r3, [pc, #4]	@ (8002700 <xIPIsNetworkTaskReady+0x8>)
}
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	2000032c 	.word	0x2000032c

08002704 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
	static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
												BaseType_t xIsInputStream )
	{
 8002704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002708:	4606      	mov	r6, r0
		size_t uxLength;
		size_t uxSize;

		/* Now that a stream is created, the maximum size is fixed before
		 * creation, it could still be changed with setsockopt(). */
		if( xIsInputStream != pdFALSE )
 800270a:	460f      	mov	r7, r1
 800270c:	b351      	cbz	r1, 8002764 <prvTCPCreateStream+0x60>
		{
			uxLength = pxSocket->u.xTCP.uxRxStreamSize;

			if( pxSocket->u.xTCP.uxLittleSpace == 0UL )
 800270e:	6e43      	ldr	r3, [r0, #100]	@ 0x64
			uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 8002710:	6ec5      	ldr	r5, [r0, #108]	@ 0x6c
			if( pxSocket->u.xTCP.uxLittleSpace == 0UL )
 8002712:	b93b      	cbnz	r3, 8002724 <prvTCPCreateStream+0x20>
			{
				pxSocket->u.xTCP.uxLittleSpace = ( sock20_PERCENT * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 8002714:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002718:	4a25      	ldr	r2, [pc, #148]	@ (80027b0 <prvTCPCreateStream+0xac>)
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	fba2 2303 	umull	r2, r3, r2, r3
 8002720:	095b      	lsrs	r3, r3, #5
 8002722:	6643      	str	r3, [r0, #100]	@ 0x64
			}

			if( pxSocket->u.xTCP.uxEnoughSpace == 0UL )
 8002724:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 8002726:	b32b      	cbz	r3, 8002774 <prvTCPCreateStream+0x70>
		{
			uxLength = pxSocket->u.xTCP.uxTxStreamSize;
		}

		/* Add an extra 4 (or 8) bytes. */
		uxLength += sizeof( size_t );
 8002728:	3504      	adds	r5, #4

		/* And make the length a multiple of sizeof( size_t ). */
		uxLength &= ~( sizeof( size_t ) - 1U );
 800272a:	f025 0503 	bic.w	r5, r5, #3

		uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 800272e:	f105 0814 	add.w	r8, r5, #20

		pxBuffer = ipCAST_PTR_TO_TYPE_PTR( StreamBuffer_t, pvPortMallocLarge( uxSize ) );
 8002732:	4640      	mov	r0, r8
 8002734:	f007 fc38 	bl	8009fa8 <pvPortMalloc>

		if( pxBuffer == NULL )
 8002738:	4604      	mov	r4, r0
 800273a:	b320      	cbz	r0, 8002786 <prvTCPCreateStream+0x82>
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
		}
		else
		{
			/* Clear the markers of the stream */
			( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800273c:	2200      	movs	r2, #0
			pxBuffer->LENGTH = ( size_t ) uxLength;

			if( xTCPWindowLoggingLevel != 0 )
 800273e:	4b1d      	ldr	r3, [pc, #116]	@ (80027b4 <prvTCPCreateStream+0xb0>)
			pxBuffer->LENGTH = ( size_t ) uxLength;
 8002740:	6105      	str	r5, [r0, #16]
			( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 8002742:	6002      	str	r2, [r0, #0]
			if( xTCPWindowLoggingLevel != 0 )
 8002744:	681b      	ldr	r3, [r3, #0]
			( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 8002746:	6042      	str	r2, [r0, #4]
 8002748:	6082      	str	r2, [r0, #8]
 800274a:	60c2      	str	r2, [r0, #12]
			if( xTCPWindowLoggingLevel != 0 )
 800274c:	b163      	cbz	r3, 8002768 <prvTCPCreateStream+0x64>
			{
				FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', uxLength, uxSize ) );
 800274e:	4643      	mov	r3, r8
 8002750:	462a      	mov	r2, r5
 8002752:	b33f      	cbz	r7, 80027a4 <prvTCPCreateStream+0xa0>
 8002754:	2152      	movs	r1, #82	@ 0x52
 8002756:	4818      	ldr	r0, [pc, #96]	@ (80027b8 <prvTCPCreateStream+0xb4>)
 8002758:	f00a fbd8 	bl	800cf0c <lUDPLoggingPrintf>
				pxSocket->u.xTCP.txStream = pxBuffer;
			}
		}

		return pxBuffer;
	}
 800275c:	4620      	mov	r0, r4
				pxSocket->u.xTCP.rxStream = pxBuffer;
 800275e:	6774      	str	r4, [r6, #116]	@ 0x74
	}
 8002760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 8002764:	6f05      	ldr	r5, [r0, #112]	@ 0x70
 8002766:	e7df      	b.n	8002728 <prvTCPCreateStream+0x24>
			if( xIsInputStream != 0 )
 8002768:	2f00      	cmp	r7, #0
 800276a:	d1f7      	bne.n	800275c <prvTCPCreateStream+0x58>
	}
 800276c:	4620      	mov	r0, r4
				pxSocket->u.xTCP.txStream = pxBuffer;
 800276e:	67b4      	str	r4, [r6, #120]	@ 0x78
	}
 8002770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pxSocket->u.xTCP.uxEnoughSpace = ( sock80_PERCENT * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 8002774:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002778:	4a0d      	ldr	r2, [pc, #52]	@ (80027b0 <prvTCPCreateStream+0xac>)
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	095b      	lsrs	r3, r3, #5
 8002782:	66b3      	str	r3, [r6, #104]	@ 0x68
 8002784:	e7d0      	b.n	8002728 <prvTCPCreateStream+0x24>
			FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
 8002786:	480d      	ldr	r0, [pc, #52]	@ (80027bc <prvTCPCreateStream+0xb8>)
 8002788:	f00a fbc0 	bl	800cf0c <lUDPLoggingPrintf>
			pxSocket->u.xTCP.bits.bMallocError = pdTRUE;
 800278c:	f896 3042 	ldrb.w	r3, [r6, #66]	@ 0x42
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8002790:	2108      	movs	r1, #8
 8002792:	4630      	mov	r0, r6
			pxSocket->u.xTCP.bits.bMallocError = pdTRUE;
 8002794:	430b      	orrs	r3, r1
 8002796:	f886 3042 	strb.w	r3, [r6, #66]	@ 0x42
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800279a:	f001 fddd 	bl	8004358 <vTCPStateChange>
	}
 800279e:	4620      	mov	r0, r4
 80027a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', uxLength, uxSize ) );
 80027a4:	2154      	movs	r1, #84	@ 0x54
 80027a6:	4804      	ldr	r0, [pc, #16]	@ (80027b8 <prvTCPCreateStream+0xb4>)
 80027a8:	f00a fbb0 	bl	800cf0c <lUDPLoggingPrintf>
			if( xIsInputStream != 0 )
 80027ac:	e7de      	b.n	800276c <prvTCPCreateStream+0x68>
 80027ae:	bf00      	nop
 80027b0:	51eb851f 	.word	0x51eb851f
 80027b4:	200003d0 	.word	0x200003d0
 80027b8:	0801014c 	.word	0x0801014c
 80027bc:	08010128 	.word	0x08010128

080027c0 <prvFindSelectedSocket>:
	{
 80027c0:	b530      	push	{r4, r5, lr}
		xSelectEvent.eEventType = eSocketSelectEvent;
 80027c2:	230b      	movs	r3, #11
	{
 80027c4:	b085      	sub	sp, #20
 80027c6:	4604      	mov	r4, r0
				( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, ( BaseType_t ) eSELECT_CALL_IP );
 80027c8:	2110      	movs	r1, #16
 80027ca:	6800      	ldr	r0, [r0, #0]
		xSelectEvent.eEventType = eSocketSelectEvent;
 80027cc:	f88d 3008 	strb.w	r3, [sp, #8]
				xSelectEvent.pvData = pxSocketSet;
 80027d0:	9403      	str	r4, [sp, #12]
				( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, ( BaseType_t ) eSELECT_CALL_IP );
 80027d2:	f005 fe41 	bl	8008458 <xEventGroupClearBits>
		if( xSendEventStructToIPTask( &xSelectEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 80027d6:	f04f 31ff 	mov.w	r1, #4294967295
 80027da:	a802      	add	r0, sp, #8
 80027dc:	f7ff fbec 	bl	8001fb8 <xSendEventStructToIPTask>
 80027e0:	b920      	cbnz	r0, 80027ec <prvFindSelectedSocket+0x2c>
			FreeRTOS_debug_printf( ( "prvFindSelectedSocket: failed\n" ) );
 80027e2:	4808      	ldr	r0, [pc, #32]	@ (8002804 <prvFindSelectedSocket+0x44>)
 80027e4:	f00a fb92 	bl	800cf0c <lUDPLoggingPrintf>
	}
 80027e8:	b005      	add	sp, #20
 80027ea:	bd30      	pop	{r4, r5, pc}
					( void ) xEventGroupWaitBits( pxSocketSet->xSelectGroup, ( BaseType_t ) eSELECT_CALL_IP, pdTRUE, pdFALSE, portMAX_DELAY );
 80027ec:	f04f 35ff 	mov.w	r5, #4294967295
 80027f0:	2300      	movs	r3, #0
 80027f2:	2201      	movs	r2, #1
 80027f4:	2110      	movs	r1, #16
 80027f6:	6820      	ldr	r0, [r4, #0]
 80027f8:	9500      	str	r5, [sp, #0]
 80027fa:	f005 fd9f 	bl	800833c <xEventGroupWaitBits>
	}
 80027fe:	b005      	add	sp, #20
 8002800:	bd30      	pop	{r4, r5, pc}
 8002802:	bf00      	nop
 8002804:	08010188 	.word	0x08010188

08002808 <vNetworkSocketsInit>:
	vListInitialise( &xBoundUDPSocketsList );
 8002808:	4804      	ldr	r0, [pc, #16]	@ (800281c <vNetworkSocketsInit+0x14>)
{
 800280a:	b508      	push	{r3, lr}
	vListInitialise( &xBoundUDPSocketsList );
 800280c:	f005 feb4 	bl	8008578 <vListInitialise>
			vListInitialise( &xBoundTCPSocketsList );
 8002810:	4803      	ldr	r0, [pc, #12]	@ (8002820 <vNetworkSocketsInit+0x18>)
}
 8002812:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			vListInitialise( &xBoundTCPSocketsList );
 8002816:	f005 beaf 	b.w	8008578 <vListInitialise>
 800281a:	bf00      	nop
 800281c:	200003b0 	.word	0x200003b0
 8002820:	2000039c 	.word	0x2000039c

08002824 <FreeRTOS_socket>:
{
 8002824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002826:	4605      	mov	r5, r0
 8002828:	460e      	mov	r6, r1
 800282a:	4614      	mov	r4, r2
	if( xIPIsNetworkTaskReady() == pdFALSE )
 800282c:	f7ff ff64 	bl	80026f8 <xIPIsNetworkTaskReady>
 8002830:	b918      	cbnz	r0, 800283a <FreeRTOS_socket+0x16>
		xReturn = FREERTOS_INVALID_SOCKET;
 8002832:	f04f 35ff 	mov.w	r5, #4294967295
}
 8002836:	4628      	mov	r0, r5
 8002838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		configASSERT( xDomain == FREERTOS_AF_INET );
 800283a:	2d02      	cmp	r5, #2
 800283c:	d004      	beq.n	8002848 <FreeRTOS_socket+0x24>
 800283e:	f240 1149 	movw	r1, #329	@ 0x149
 8002842:	483c      	ldr	r0, [pc, #240]	@ (8002934 <FreeRTOS_socket+0x110>)
 8002844:	f7fe fa58 	bl	8000cf8 <vAssertCalled>
		configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 8002848:	4b3b      	ldr	r3, [pc, #236]	@ (8002938 <FreeRTOS_socket+0x114>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	3301      	adds	r3, #1
 800284e:	d004      	beq.n	800285a <FreeRTOS_socket+0x36>
 8002850:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8002854:	4837      	ldr	r0, [pc, #220]	@ (8002934 <FreeRTOS_socket+0x110>)
 8002856:	f7fe fa4f 	bl	8000cf8 <vAssertCalled>
				configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800285a:	4b38      	ldr	r3, [pc, #224]	@ (800293c <FreeRTOS_socket+0x118>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	3301      	adds	r3, #1
 8002860:	d004      	beq.n	800286c <FreeRTOS_socket+0x48>
 8002862:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8002866:	4833      	ldr	r0, [pc, #204]	@ (8002934 <FreeRTOS_socket+0x110>)
 8002868:	f7fe fa46 	bl	8000cf8 <vAssertCalled>
		if( xProtocol == FREERTOS_IPPROTO_UDP )
 800286c:	2c11      	cmp	r4, #17
 800286e:	d00f      	beq.n	8002890 <FreeRTOS_socket+0x6c>
			else if( xProtocol == FREERTOS_IPPROTO_TCP )
 8002870:	2c06      	cmp	r4, #6
 8002872:	d107      	bne.n	8002884 <FreeRTOS_socket+0x60>
				if( xType != FREERTOS_SOCK_STREAM )
 8002874:	2e01      	cmp	r6, #1
 8002876:	d046      	beq.n	8002906 <FreeRTOS_socket+0xe2>
					configASSERT( xReturn == pdPASS );
 8002878:	f44f 71b3 	mov.w	r1, #358	@ 0x166
 800287c:	482d      	ldr	r0, [pc, #180]	@ (8002934 <FreeRTOS_socket+0x110>)
 800287e:	f7fe fa3b 	bl	8000cf8 <vAssertCalled>
	return xReturn;
 8002882:	e7d6      	b.n	8002832 <FreeRTOS_socket+0xe>
			configASSERT( xReturn == pdPASS );
 8002884:	f240 116f 	movw	r1, #367	@ 0x16f
 8002888:	482a      	ldr	r0, [pc, #168]	@ (8002934 <FreeRTOS_socket+0x110>)
 800288a:	f7fe fa35 	bl	8000cf8 <vAssertCalled>
	return xReturn;
 800288e:	e7d0      	b.n	8002832 <FreeRTOS_socket+0xe>
			if( xType != FREERTOS_SOCK_DGRAM )
 8002890:	2e02      	cmp	r6, #2
 8002892:	d005      	beq.n	80028a0 <FreeRTOS_socket+0x7c>
				configASSERT( xReturn == pdPASS );
 8002894:	f240 1159 	movw	r1, #345	@ 0x159
 8002898:	4826      	ldr	r0, [pc, #152]	@ (8002934 <FreeRTOS_socket+0x110>)
 800289a:	f7fe fa2d 	bl	8000cf8 <vAssertCalled>
	return xReturn;
 800289e:	e7c8      	b.n	8002832 <FreeRTOS_socket+0xe>
			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 80028a0:	2754      	movs	r7, #84	@ 0x54
		pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, pvPortMallocSocket( uxSocketSize ) );
 80028a2:	4638      	mov	r0, r7
 80028a4:	f007 fb80 	bl	8009fa8 <pvPortMalloc>
		if( pxSocket == NULL )
 80028a8:	4605      	mov	r5, r0
 80028aa:	2800      	cmp	r0, #0
 80028ac:	d0c1      	beq.n	8002832 <FreeRTOS_socket+0xe>
			xEventGroup = xEventGroupCreate();
 80028ae:	f005 fd37 	bl	8008320 <xEventGroupCreate>
			if( xEventGroup == NULL )
 80028b2:	4606      	mov	r6, r0
 80028b4:	b350      	cbz	r0, 800290c <FreeRTOS_socket+0xe8>
				( void ) memset( pxSocket, 0, uxSocketSize );
 80028b6:	463a      	mov	r2, r7
 80028b8:	2100      	movs	r1, #0
 80028ba:	4628      	mov	r0, r5
				vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 80028bc:	f105 0708 	add.w	r7, r5, #8
				( void ) memset( pxSocket, 0, uxSocketSize );
 80028c0:	f00b f982 	bl	800dbc8 <memset>
				if( xProtocol == FREERTOS_IPPROTO_UDP )
 80028c4:	2c11      	cmp	r4, #17
				pxSocket->xEventGroup = xEventGroup;
 80028c6:	606e      	str	r6, [r5, #4]
				if( xProtocol == FREERTOS_IPPROTO_UDP )
 80028c8:	d024      	beq.n	8002914 <FreeRTOS_socket+0xf0>
				vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 80028ca:	4638      	mov	r0, r7
 80028cc:	f005 fe60 	bl	8008590 <vListInitialiseItem>
				pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 80028d0:	f241 3388 	movw	r3, #5000	@ 0x1388
				pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 80028d4:	2202      	movs	r2, #2
						if( xProtocol == FREERTOS_IPPROTO_TCP )
 80028d6:	2c06      	cmp	r4, #6
				listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ipPOINTER_CAST( void *, pxSocket ) );
 80028d8:	616d      	str	r5, [r5, #20]
				pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 80028da:	f885 2026 	strb.w	r2, [r5, #38]	@ 0x26
				pxSocket->ucProtocol = ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 80028de:	f885 4027 	strb.w	r4, [r5, #39]	@ 0x27
				pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 80028e2:	e9c5 3307 	strd	r3, r3, [r5, #28]
						if( xProtocol == FREERTOS_IPPROTO_TCP )
 80028e6:	d1a6      	bne.n	8002836 <FreeRTOS_socket+0x12>
									pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 80028e8:	2301      	movs	r3, #1
							pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ipconfigTCP_MSS;
 80028ea:	4815      	ldr	r0, [pc, #84]	@ (8002940 <FreeRTOS_socket+0x11c>)
							pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 80028ec:	f241 111c 	movw	r1, #4380	@ 0x111c
							pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 80028f0:	f640 3268 	movw	r2, #2920	@ 0xb68
							pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ipconfigTCP_MSS;
 80028f4:	f8c5 004a 	str.w	r0, [r5, #74]	@ 0x4a
									pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 80028f8:	f8c5 30dc 	str.w	r3, [r5, #220]	@ 0xdc
									pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 80028fc:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
							pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 8002900:	e9c5 121b 	strd	r1, r2, [r5, #108]	@ 0x6c
									pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 8002904:	e797      	b.n	8002836 <FreeRTOS_socket+0x12>
				*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 8002906:	f44f 77d4 	mov.w	r7, #424	@ 0x1a8
 800290a:	e7ca      	b.n	80028a2 <FreeRTOS_socket+0x7e>
				vPortFreeSocket( pxSocket );
 800290c:	4628      	mov	r0, r5
 800290e:	f007 fbb7 	bl	800a080 <vPortFree>
				iptraceFAILED_TO_CREATE_EVENT_GROUP();
 8002912:	e78e      	b.n	8002832 <FreeRTOS_socket+0xe>
					vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 8002914:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 8002918:	f005 fe2e 	bl	8008578 <vListInitialise>
				vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800291c:	4638      	mov	r0, r7
 800291e:	f005 fe37 	bl	8008590 <vListInitialiseItem>
				pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 8002922:	f241 3388 	movw	r3, #5000	@ 0x1388
				pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 8002926:	f241 1202 	movw	r2, #4354	@ 0x1102
				listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ipPOINTER_CAST( void *, pxSocket ) );
 800292a:	616d      	str	r5, [r5, #20]
				pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800292c:	e9c5 3307 	strd	r3, r3, [r5, #28]
				pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 8002930:	84ea      	strh	r2, [r5, #38]	@ 0x26
						if( xProtocol == FREERTOS_IPPROTO_TCP )
 8002932:	e780      	b.n	8002836 <FreeRTOS_socket+0x12>
 8002934:	080101a8 	.word	0x080101a8
 8002938:	200003b0 	.word	0x200003b0
 800293c:	2000039c 	.word	0x2000039c
 8002940:	05b405b4 	.word	0x05b405b4

08002944 <FreeRTOS_CreateSocketSet>:
	{
 8002944:	b510      	push	{r4, lr}
		pxSocketSet = ipCAST_PTR_TO_TYPE_PTR( SocketSelect_t, pvPortMalloc( sizeof( *pxSocketSet ) ) );
 8002946:	2004      	movs	r0, #4
 8002948:	f007 fb2e 	bl	8009fa8 <pvPortMalloc>
		if( pxSocketSet != NULL )
 800294c:	b158      	cbz	r0, 8002966 <FreeRTOS_CreateSocketSet+0x22>
			( void ) memset( pxSocketSet, 0, sizeof( *pxSocketSet ) );
 800294e:	2300      	movs	r3, #0
 8002950:	4604      	mov	r4, r0
 8002952:	6003      	str	r3, [r0, #0]
			pxSocketSet->xSelectGroup = xEventGroupCreate();
 8002954:	f005 fce4 	bl	8008320 <xEventGroupCreate>
 8002958:	6020      	str	r0, [r4, #0]
			if( pxSocketSet->xSelectGroup == NULL )
 800295a:	b108      	cbz	r0, 8002960 <FreeRTOS_CreateSocketSet+0x1c>
	}
 800295c:	4620      	mov	r0, r4
 800295e:	bd10      	pop	{r4, pc}
				vPortFree( pxSocketSet );
 8002960:	4620      	mov	r0, r4
 8002962:	f007 fb8d 	bl	800a080 <vPortFree>
		pxSocketSet = ipCAST_PTR_TO_TYPE_PTR( SocketSelect_t, pvPortMalloc( sizeof( *pxSocketSet ) ) );
 8002966:	2400      	movs	r4, #0
		return ( SocketSet_t ) pxSocketSet;
 8002968:	e7f8      	b.n	800295c <FreeRTOS_CreateSocketSet+0x18>
 800296a:	bf00      	nop

0800296c <FreeRTOS_FD_SET>:
	{
 800296c:	b570      	push	{r4, r5, r6, lr}
 800296e:	460e      	mov	r6, r1
		configASSERT( pxSocket != NULL );
 8002970:	4605      	mov	r5, r0
	{
 8002972:	4614      	mov	r4, r2
		configASSERT( pxSocket != NULL );
 8002974:	b170      	cbz	r0, 8002994 <FreeRTOS_FD_SET+0x28>
		configASSERT( xSocketSet != NULL );
 8002976:	b1a6      	cbz	r6, 80029a2 <FreeRTOS_FD_SET+0x36>
		pxSocket->xSelectBits |= xBitsToSet & ( ( EventBits_t ) eSELECT_ALL );
 8002978:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800297a:	f004 020f 	and.w	r2, r4, #15
 800297e:	431a      	orrs	r2, r3
		if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_ALL ) ) != ( EventBits_t ) 0U )
 8002980:	0713      	lsls	r3, r2, #28
		pxSocket->xSelectBits |= xBitsToSet & ( ( EventBits_t ) eSELECT_ALL );
 8002982:	632a      	str	r2, [r5, #48]	@ 0x30
		if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_ALL ) ) != ( EventBits_t ) 0U )
 8002984:	d100      	bne.n	8002988 <FreeRTOS_FD_SET+0x1c>
	}
 8002986:	bd70      	pop	{r4, r5, r6, pc}
			prvFindSelectedSocket( pxSocketSet );
 8002988:	4630      	mov	r0, r6
			pxSocket->pxSocketSet = ( SocketSelect_t * ) xSocketSet;
 800298a:	62ee      	str	r6, [r5, #44]	@ 0x2c
	}
 800298c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			prvFindSelectedSocket( pxSocketSet );
 8002990:	f7ff bf16 	b.w	80027c0 <prvFindSelectedSocket>
		configASSERT( pxSocket != NULL );
 8002994:	f240 2145 	movw	r1, #581	@ 0x245
 8002998:	4805      	ldr	r0, [pc, #20]	@ (80029b0 <FreeRTOS_FD_SET+0x44>)
 800299a:	f7fe f9ad 	bl	8000cf8 <vAssertCalled>
		configASSERT( xSocketSet != NULL );
 800299e:	2e00      	cmp	r6, #0
 80029a0:	d1ea      	bne.n	8002978 <FreeRTOS_FD_SET+0xc>
 80029a2:	f240 2146 	movw	r1, #582	@ 0x246
 80029a6:	4802      	ldr	r0, [pc, #8]	@ (80029b0 <FreeRTOS_FD_SET+0x44>)
 80029a8:	f7fe f9a6 	bl	8000cf8 <vAssertCalled>
 80029ac:	e7e4      	b.n	8002978 <FreeRTOS_FD_SET+0xc>
 80029ae:	bf00      	nop
 80029b0:	080101a8 	.word	0x080101a8

080029b4 <FreeRTOS_FD_CLR>:
	{
 80029b4:	b570      	push	{r4, r5, r6, lr}
 80029b6:	460d      	mov	r5, r1
		configASSERT( pxSocket != NULL );
 80029b8:	4604      	mov	r4, r0
	{
 80029ba:	4616      	mov	r6, r2
		configASSERT( pxSocket != NULL );
 80029bc:	b160      	cbz	r0, 80029d8 <FreeRTOS_FD_CLR+0x24>
		configASSERT( xSocketSet != NULL );
 80029be:	b195      	cbz	r5, 80029e6 <FreeRTOS_FD_CLR+0x32>
		pxSocket->xSelectBits &= ~( xBitsToClear & ( ( EventBits_t ) eSELECT_ALL ) );
 80029c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80029c2:	f006 060f 	and.w	r6, r6, #15
 80029c6:	ea23 0306 	bic.w	r3, r3, r6
			pxSocket->pxSocketSet = NULL;
 80029ca:	f013 0f0f 	tst.w	r3, #15
		pxSocket->xSelectBits &= ~( xBitsToClear & ( ( EventBits_t ) eSELECT_ALL ) );
 80029ce:	6323      	str	r3, [r4, #48]	@ 0x30
			pxSocket->pxSocketSet = NULL;
 80029d0:	bf08      	it	eq
 80029d2:	2500      	moveq	r5, #0
 80029d4:	62e5      	str	r5, [r4, #44]	@ 0x2c
	}
 80029d6:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxSocket != NULL );
 80029d8:	f44f 711b 	mov.w	r1, #620	@ 0x26c
 80029dc:	4805      	ldr	r0, [pc, #20]	@ (80029f4 <FreeRTOS_FD_CLR+0x40>)
 80029de:	f7fe f98b 	bl	8000cf8 <vAssertCalled>
		configASSERT( xSocketSet != NULL );
 80029e2:	2d00      	cmp	r5, #0
 80029e4:	d1ec      	bne.n	80029c0 <FreeRTOS_FD_CLR+0xc>
 80029e6:	f240 216d 	movw	r1, #621	@ 0x26d
 80029ea:	4802      	ldr	r0, [pc, #8]	@ (80029f4 <FreeRTOS_FD_CLR+0x40>)
 80029ec:	f7fe f984 	bl	8000cf8 <vAssertCalled>
 80029f0:	e7e6      	b.n	80029c0 <FreeRTOS_FD_CLR+0xc>
 80029f2:	bf00      	nop
 80029f4:	080101a8 	.word	0x080101a8

080029f8 <FreeRTOS_select>:
	{
 80029f8:	b530      	push	{r4, r5, lr}
		configASSERT( xSocketSet != NULL );
 80029fa:	4605      	mov	r5, r0
	{
 80029fc:	b087      	sub	sp, #28
 80029fe:	460c      	mov	r4, r1
		configASSERT( xSocketSet != NULL );
 8002a00:	b1f0      	cbz	r0, 8002a40 <FreeRTOS_select+0x48>
		vTaskSetTimeOutState( &xTimeOut );
 8002a02:	a804      	add	r0, sp, #16
		xRemainingTime = xBlockTimeTicks;
 8002a04:	9403      	str	r4, [sp, #12]
		vTaskSetTimeOutState( &xTimeOut );
 8002a06:	f006 fe37 	bl	8009678 <vTaskSetTimeOutState>
 8002a0a:	e002      	b.n	8002a12 <FreeRTOS_select+0x1a>
			if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 8002a0c:	f006 fe5c 	bl	80096c8 <xTaskCheckForTimeOut>
 8002a10:	b998      	cbnz	r0, 8002a3a <FreeRTOS_select+0x42>
			uxResult = xEventGroupWaitBits( pxSocketSet->xSelectGroup, ( ( EventBits_t ) eSELECT_ALL ), pdFALSE, pdFALSE, xRemainingTime );
 8002a12:	2300      	movs	r3, #0
 8002a14:	9c03      	ldr	r4, [sp, #12]
 8002a16:	210f      	movs	r1, #15
 8002a18:	6828      	ldr	r0, [r5, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	9400      	str	r4, [sp, #0]
 8002a1e:	f005 fc8d 	bl	800833c <xEventGroupWaitBits>
			prvFindSelectedSocket( pxSocketSet );
 8002a22:	4628      	mov	r0, r5
 8002a24:	f7ff fecc 	bl	80027c0 <prvFindSelectedSocket>
			uxResult = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 8002a28:	2100      	movs	r1, #0
 8002a2a:	6828      	ldr	r0, [r5, #0]
 8002a2c:	f005 fd14 	bl	8008458 <xEventGroupClearBits>
 8002a30:	4604      	mov	r4, r0
			if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 8002a32:	a903      	add	r1, sp, #12
 8002a34:	a804      	add	r0, sp, #16
			if( uxResult != 0U )
 8002a36:	2c00      	cmp	r4, #0
 8002a38:	d0e8      	beq.n	8002a0c <FreeRTOS_select+0x14>
	}
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	b007      	add	sp, #28
 8002a3e:	bd30      	pop	{r4, r5, pc}
		configASSERT( xSocketSet != NULL );
 8002a40:	f240 21bd 	movw	r1, #701	@ 0x2bd
 8002a44:	4801      	ldr	r0, [pc, #4]	@ (8002a4c <FreeRTOS_select+0x54>)
 8002a46:	f7fe f957 	bl	8000cf8 <vAssertCalled>
 8002a4a:	e7da      	b.n	8002a02 <FreeRTOS_select+0xa>
 8002a4c:	080101a8 	.word	0x080101a8

08002a50 <FreeRTOS_recvfrom>:
{
 8002a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a54:	4604      	mov	r4, r0
 8002a56:	4692      	mov	sl, r2
 8002a58:	b086      	sub	sp, #24
	TickType_t xRemainingTime = ( TickType_t ) 0; /* Obsolete assignment, but some compilers output a warning if its not done. */
 8002a5a:	2000      	movs	r0, #0
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 8002a5c:	1e62      	subs	r2, r4, #1
	TickType_t xRemainingTime = ( TickType_t ) 0; /* Obsolete assignment, but some compilers output a warning if its not done. */
 8002a5e:	9003      	str	r0, [sp, #12]
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 8002a60:	3203      	adds	r2, #3
 8002a62:	d806      	bhi.n	8002a72 <FreeRTOS_recvfrom+0x22>
	else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 8002a64:	461d      	mov	r5, r3
 8002a66:	69a3      	ldr	r3, [r4, #24]
 8002a68:	b11b      	cbz	r3, 8002a72 <FreeRTOS_recvfrom+0x22>
	else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 8002a6a:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 8002a6e:	2b11      	cmp	r3, #17
 8002a70:	d005      	beq.n	8002a7e <FreeRTOS_recvfrom+0x2e>
		lReturn = -pdFREERTOS_ERRNO_EINVAL;
 8002a72:	f06f 0415 	mvn.w	r4, #21
}
 8002a76:	4620      	mov	r0, r4
 8002a78:	b006      	add	sp, #24
 8002a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 8002a7e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
		while( lPacketCount == 0 )
 8002a80:	460e      	mov	r6, r1
 8002a82:	b9cb      	cbnz	r3, 8002ab8 <FreeRTOS_recvfrom+0x68>
				xRemainingTime = pxSocket->xReceiveBlockTime;
 8002a84:	69e3      	ldr	r3, [r4, #28]
 8002a86:	9303      	str	r3, [sp, #12]
				if( xRemainingTime == ( TickType_t ) 0 )
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d033      	beq.n	8002af4 <FreeRTOS_recvfrom+0xa4>
				if( ( ( ( UBaseType_t ) xFlags ) & ( ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) ) != 0U )
 8002a8c:	06ea      	lsls	r2, r5, #27
 8002a8e:	d431      	bmi.n	8002af4 <FreeRTOS_recvfrom+0xa4>
				vTaskSetTimeOutState( &xTimeOut );
 8002a90:	a804      	add	r0, sp, #16
 8002a92:	f006 fdf1 	bl	8009678 <vTaskSetTimeOutState>
 8002a96:	e002      	b.n	8002a9e <FreeRTOS_recvfrom+0x4e>
			if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 8002a98:	f006 fe16 	bl	80096c8 <xTaskCheckForTimeOut>
 8002a9c:	bb50      	cbnz	r0, 8002af4 <FreeRTOS_recvfrom+0xa4>
			xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, ( ( EventBits_t ) eSOCKET_RECEIVE ) | ( ( EventBits_t ) eSOCKET_INTR ),
 8002a9e:	9f03      	ldr	r7, [sp, #12]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	2141      	movs	r1, #65	@ 0x41
 8002aa4:	6860      	ldr	r0, [r4, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	9700      	str	r7, [sp, #0]
 8002aaa:	f005 fc47 	bl	800833c <xEventGroupWaitBits>
			lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 8002aae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 8002ab0:	a903      	add	r1, sp, #12
 8002ab2:	a804      	add	r0, sp, #16
			if( lPacketCount != 0 )
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0ef      	beq.n	8002a98 <FreeRTOS_recvfrom+0x48>
			taskENTER_CRITICAL();
 8002ab8:	f007 f924 	bl	8009d04 <vPortEnterCritical>
				pxNetworkBuffer = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 8002abc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
				if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_PEEK ) == 0U )
 8002abe:	f015 0904 	ands.w	r9, r5, #4
				pxNetworkBuffer = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 8002ac2:	f8d3 800c 	ldr.w	r8, [r3, #12]
				if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_PEEK ) == 0U )
 8002ac6:	d018      	beq.n	8002afa <FreeRTOS_recvfrom+0xaa>
			taskEXIT_CRITICAL();
 8002ac8:	f007 f93e 	bl	8009d48 <vPortExitCritical>
			uxPayloadLength = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 8002acc:	f8d8 401c 	ldr.w	r4, [r8, #28]
			if( pxSourceAddress != NULL )
 8002ad0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
			uxPayloadLength = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 8002ad2:	3c2a      	subs	r4, #42	@ 0x2a
			if( pxSourceAddress != NULL )
 8002ad4:	b133      	cbz	r3, 8002ae4 <FreeRTOS_recvfrom+0x94>
				pxSourceAddress->sin_port = pxNetworkBuffer->usPort;
 8002ad6:	f8b8 3020 	ldrh.w	r3, [r8, #32]
 8002ada:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002adc:	8053      	strh	r3, [r2, #2]
				pxSourceAddress->sin_addr = pxNetworkBuffer->ulIPAddress;
 8002ade:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8002ae2:	6053      	str	r3, [r2, #4]
				pvCopySource = ( const void * ) &pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ];
 8002ae4:	f8d8 1018 	ldr.w	r1, [r8, #24]
			if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 8002ae8:	07eb      	lsls	r3, r5, #31
				pvCopySource = ( const void * ) &pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ];
 8002aea:	f101 012a 	add.w	r1, r1, #42	@ 0x2a
			if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 8002aee:	d508      	bpl.n	8002b02 <FreeRTOS_recvfrom+0xb2>
				*( ( void ** ) pvBuffer ) = ipPOINTER_CAST( void *, &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ) );
 8002af0:	6031      	str	r1, [r6, #0]
 8002af2:	e7c0      	b.n	8002a76 <FreeRTOS_recvfrom+0x26>
			lReturn = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 8002af4:	f06f 040a 	mvn.w	r4, #10
 8002af8:	e7bd      	b.n	8002a76 <FreeRTOS_recvfrom+0x26>
					( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 8002afa:	4640      	mov	r0, r8
 8002afc:	f005 fd72 	bl	80085e4 <uxListRemove>
 8002b00:	e7e2      	b.n	8002ac8 <FreeRTOS_recvfrom+0x78>
				if( lReturn > ( int32_t ) uxBufferLength )
 8002b02:	4554      	cmp	r4, sl
				( void ) memcpy( pvBuffer, pvCopySource, ( size_t ) lReturn );
 8002b04:	4630      	mov	r0, r6
 8002b06:	bfa8      	it	ge
 8002b08:	4654      	movge	r4, sl
 8002b0a:	4622      	mov	r2, r4
 8002b0c:	f00a ff88 	bl	800da20 <memcpy>
				if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_PEEK ) == 0U )
 8002b10:	f1b9 0f00 	cmp.w	r9, #0
 8002b14:	d1af      	bne.n	8002a76 <FreeRTOS_recvfrom+0x26>
					vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8002b16:	4640      	mov	r0, r8
 8002b18:	f003 ff76 	bl	8006a08 <vReleaseNetworkBufferAndDescriptor>
 8002b1c:	e7ab      	b.n	8002a76 <FreeRTOS_recvfrom+0x26>
 8002b1e:	bf00      	nop

08002b20 <FreeRTOS_bind>:
{
 8002b20:	b530      	push	{r4, r5, lr}
 8002b22:	b085      	sub	sp, #20
 8002b24:	4605      	mov	r5, r0
 8002b26:	460c      	mov	r4, r1
	configASSERT( xIsCallingFromIPTask() == pdFALSE );
 8002b28:	f7ff f8fa 	bl	8001d20 <xIsCallingFromIPTask>
 8002b2c:	bb08      	cbnz	r0, 8002b72 <FreeRTOS_bind+0x52>
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 8002b2e:	1e6b      	subs	r3, r5, #1
 8002b30:	3303      	adds	r3, #3
 8002b32:	d828      	bhi.n	8002b86 <FreeRTOS_bind+0x66>
	else if( socketSOCKET_IS_BOUND( pxSocket ) )
 8002b34:	69ab      	ldr	r3, [r5, #24]
 8002b36:	bb13      	cbnz	r3, 8002b7e <FreeRTOS_bind+0x5e>
		xBindEvent.eEventType = eSocketBindEvent;
 8002b38:	2309      	movs	r3, #9
		xBindEvent.pvData = xSocket;
 8002b3a:	9503      	str	r5, [sp, #12]
		xBindEvent.eEventType = eSocketBindEvent;
 8002b3c:	f88d 3008 	strb.w	r3, [sp, #8]
		if( pxAddress != NULL )
 8002b40:	b114      	cbz	r4, 8002b48 <FreeRTOS_bind+0x28>
			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 8002b42:	8864      	ldrh	r4, [r4, #2]
 8002b44:	ba64      	rev16	r4, r4
 8002b46:	b2a4      	uxth	r4, r4
		if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8002b48:	f04f 31ff 	mov.w	r1, #4294967295
 8002b4c:	a802      	add	r0, sp, #8
 8002b4e:	84ac      	strh	r4, [r5, #36]	@ 0x24
 8002b50:	f7ff fa32 	bl	8001fb8 <xSendEventStructToIPTask>
 8002b54:	b1d0      	cbz	r0, 8002b8c <FreeRTOS_bind+0x6c>
			( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 8002b56:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	2110      	movs	r1, #16
 8002b60:	9000      	str	r0, [sp, #0]
 8002b62:	6868      	ldr	r0, [r5, #4]
 8002b64:	f005 fbea 	bl	800833c <xEventGroupWaitBits>
			if( !socketSOCKET_IS_BOUND( pxSocket ) )
 8002b68:	69ab      	ldr	r3, [r5, #24]
 8002b6a:	b163      	cbz	r3, 8002b86 <FreeRTOS_bind+0x66>
	BaseType_t xReturn = 0;
 8002b6c:	2000      	movs	r0, #0
}
 8002b6e:	b005      	add	sp, #20
 8002b70:	bd30      	pop	{r4, r5, pc}
	configASSERT( xIsCallingFromIPTask() == pdFALSE );
 8002b72:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8002b76:	4808      	ldr	r0, [pc, #32]	@ (8002b98 <FreeRTOS_bind+0x78>)
 8002b78:	f7fe f8be 	bl	8000cf8 <vAssertCalled>
 8002b7c:	e7d7      	b.n	8002b2e <FreeRTOS_bind+0xe>
		FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
 8002b7e:	8ca9      	ldrh	r1, [r5, #36]	@ 0x24
 8002b80:	4806      	ldr	r0, [pc, #24]	@ (8002b9c <FreeRTOS_bind+0x7c>)
 8002b82:	f00a f9c3 	bl	800cf0c <lUDPLoggingPrintf>
		xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8002b86:	f06f 0015 	mvn.w	r0, #21
 8002b8a:	e7f0      	b.n	8002b6e <FreeRTOS_bind+0x4e>
			FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
 8002b8c:	4804      	ldr	r0, [pc, #16]	@ (8002ba0 <FreeRTOS_bind+0x80>)
 8002b8e:	f00a f9bd 	bl	800cf0c <lUDPLoggingPrintf>
			xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 8002b92:	f06f 008b 	mvn.w	r0, #139	@ 0x8b
 8002b96:	e7ea      	b.n	8002b6e <FreeRTOS_bind+0x4e>
 8002b98:	080101a8 	.word	0x080101a8
 8002b9c:	080101e0 	.word	0x080101e0
 8002ba0:	0801020c 	.word	0x0801020c

08002ba4 <FreeRTOS_sendto>:
{
 8002ba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 8002ba8:	2604      	movs	r6, #4
{
 8002baa:	b087      	sub	sp, #28
 8002bac:	4699      	mov	r9, r3
	IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f88d 6008 	strb.w	r6, [sp, #8]
{
 8002bb4:	4607      	mov	r7, r0
 8002bb6:	4614      	mov	r4, r2
	configASSERT( pvBuffer != NULL );
 8002bb8:	460e      	mov	r6, r1
	IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 8002bba:	9303      	str	r3, [sp, #12]
	configASSERT( pvBuffer != NULL );
 8002bbc:	2900      	cmp	r1, #0
 8002bbe:	d05d      	beq.n	8002c7c <FreeRTOS_sendto+0xd8>
	if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 8002bc0:	f5b4 6fb8 	cmp.w	r4, #1472	@ 0x5c0
 8002bc4:	d903      	bls.n	8002bce <FreeRTOS_sendto+0x2a>
	int32_t lReturn = 0;
 8002bc6:	2000      	movs	r0, #0
} /* Tested */
 8002bc8:	b007      	add	sp, #28
 8002bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if( socketSOCKET_IS_BOUND( pxSocket ) ||
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	2a00      	cmp	r2, #0
 8002bd2:	d059      	beq.n	8002c88 <FreeRTOS_sendto+0xe4>
			xTicksToWait = pxSocket->xSendBlockTime;
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	9301      	str	r3, [sp, #4]
					if( xIsCallingFromIPTask() != pdFALSE )
 8002bd8:	f7ff f8a2 	bl	8001d20 <xIsCallingFromIPTask>
 8002bdc:	b108      	cbz	r0, 8002be2 <FreeRTOS_sendto+0x3e>
						xTicksToWait = ( TickType_t ) 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	9301      	str	r3, [sp, #4]
			if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 8002be2:	f019 0f10 	tst.w	r9, #16
 8002be6:	d001      	beq.n	8002bec <FreeRTOS_sendto+0x48>
				xTicksToWait = ( TickType_t ) 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	9301      	str	r3, [sp, #4]
			if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 8002bec:	f019 0901 	ands.w	r9, r9, #1
 8002bf0:	d11b      	bne.n	8002c2a <FreeRTOS_sendto+0x86>
				pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 8002bf2:	f104 082a 	add.w	r8, r4, #42	@ 0x2a
				vTaskSetTimeOutState( &xTimeOut );
 8002bf6:	a804      	add	r0, sp, #16
 8002bf8:	f006 fd3e 	bl	8009678 <vTaskSetTimeOutState>
				pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 8002bfc:	9901      	ldr	r1, [sp, #4]
 8002bfe:	4640      	mov	r0, r8
 8002c00:	f003 fec6 	bl	8006990 <pxGetNetworkBufferWithDescriptor>
				if( pxNetworkBuffer != NULL )
 8002c04:	4605      	mov	r5, r0
 8002c06:	2800      	cmp	r0, #0
 8002c08:	d0dd      	beq.n	8002bc6 <FreeRTOS_sendto+0x22>
					pvCopyDest = ( void * ) &pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ];
 8002c0a:	6980      	ldr	r0, [r0, #24]
					( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 8002c0c:	4631      	mov	r1, r6
 8002c0e:	4622      	mov	r2, r4
 8002c10:	302a      	adds	r0, #42	@ 0x2a
 8002c12:	f00a ff05 	bl	800da20 <memcpy>
					if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 8002c16:	a804      	add	r0, sp, #16
 8002c18:	a901      	add	r1, sp, #4
 8002c1a:	f006 fd55 	bl	80096c8 <xTaskCheckForTimeOut>
 8002c1e:	2801      	cmp	r0, #1
 8002c20:	d10b      	bne.n	8002c3a <FreeRTOS_sendto+0x96>
						xTicksToWait = ( TickType_t ) 0;
 8002c22:	4649      	mov	r1, r9
 8002c24:	f8cd 9004 	str.w	r9, [sp, #4]
			if( pxNetworkBuffer != NULL )
 8002c28:	e008      	b.n	8002c3c <FreeRTOS_sendto+0x98>
				pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 8002c2a:	4630      	mov	r0, r6
 8002c2c:	f7ff f8c6 	bl	8001dbc <pxUDPPayloadBuffer_to_NetworkBuffer>
			if( pxNetworkBuffer != NULL )
 8002c30:	4605      	mov	r5, r0
 8002c32:	2800      	cmp	r0, #0
 8002c34:	d0c7      	beq.n	8002bc6 <FreeRTOS_sendto+0x22>
				pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 8002c36:	f104 082a 	add.w	r8, r4, #42	@ 0x2a
				xARPWaitResolution( pxDestinationAddress->sin_addr, xTicksToWait );
 8002c3a:	9901      	ldr	r1, [sp, #4]
 8002c3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002c3e:	6858      	ldr	r0, [r3, #4]
 8002c40:	f7fe fd56 	bl	80016f0 <xARPWaitResolution>
				pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 8002c44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
				pxNetworkBuffer->xDataLength = uxTotalDataLength + sizeof( UDPPacket_t );
 8002c46:	f8c5 801c 	str.w	r8, [r5, #28]
				if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 8002c4a:	a802      	add	r0, sp, #8
				pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 8002c4c:	885b      	ldrh	r3, [r3, #2]
				if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 8002c4e:	9901      	ldr	r1, [sp, #4]
				pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 8002c50:	842b      	strh	r3, [r5, #32]
				pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	846b      	strh	r3, [r5, #34]	@ 0x22
				pxNetworkBuffer->ulIPAddress = pxDestinationAddress->sin_addr;
 8002c56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	616b      	str	r3, [r5, #20]
				pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 8002c5c:	69ab      	ldr	r3, [r5, #24]
 8002c5e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002c62:	719a      	strb	r2, [r3, #6]
				xStackTxEvent.pvData = pxNetworkBuffer;
 8002c64:	9503      	str	r5, [sp, #12]
				if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 8002c66:	f7ff f9a7 	bl	8001fb8 <xSendEventStructToIPTask>
 8002c6a:	2801      	cmp	r0, #1
 8002c6c:	d013      	beq.n	8002c96 <FreeRTOS_sendto+0xf2>
					if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 8002c6e:	f1b9 0f00 	cmp.w	r9, #0
 8002c72:	d1a8      	bne.n	8002bc6 <FreeRTOS_sendto+0x22>
						vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8002c74:	4628      	mov	r0, r5
 8002c76:	f003 fec7 	bl	8006a08 <vReleaseNetworkBufferAndDescriptor>
 8002c7a:	e7a4      	b.n	8002bc6 <FreeRTOS_sendto+0x22>
	configASSERT( pvBuffer != NULL );
 8002c7c:	f240 4116 	movw	r1, #1046	@ 0x416
 8002c80:	4808      	ldr	r0, [pc, #32]	@ (8002ca4 <FreeRTOS_sendto+0x100>)
 8002c82:	f7fe f839 	bl	8000cf8 <vAssertCalled>
 8002c86:	e79b      	b.n	8002bc0 <FreeRTOS_sendto+0x1c>
			( FreeRTOS_bind( xSocket, NULL, 0U ) == 0 ) )
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4638      	mov	r0, r7
 8002c8c:	f7ff ff48 	bl	8002b20 <FreeRTOS_bind>
		if( socketSOCKET_IS_BOUND( pxSocket ) ||
 8002c90:	2800      	cmp	r0, #0
 8002c92:	d09f      	beq.n	8002bd4 <FreeRTOS_sendto+0x30>
 8002c94:	e797      	b.n	8002bc6 <FreeRTOS_sendto+0x22>
							if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleSent ) )
 8002c96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c98:	b113      	cbz	r3, 8002ca0 <FreeRTOS_sendto+0xfc>
								pxSocket->u.xUDP.pxHandleSent( xSocket, uxTotalDataLength );
 8002c9a:	4621      	mov	r1, r4
 8002c9c:	4638      	mov	r0, r7
 8002c9e:	4798      	blx	r3
					lReturn = ( int32_t ) uxTotalDataLength;
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	e791      	b.n	8002bc8 <FreeRTOS_sendto+0x24>
 8002ca4:	080101a8 	.word	0x080101a8

08002ca8 <vSocketBind>:
{
 8002ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cac:	b087      	sub	sp, #28
			pxSocketList = &xBoundTCPSocketsList;
 8002cae:	4f51      	ldr	r7, [pc, #324]	@ (8002df4 <vSocketBind+0x14c>)
 8002cb0:	4a51      	ldr	r2, [pc, #324]	@ (8002df8 <vSocketBind+0x150>)
{
 8002cb2:	4605      	mov	r5, r0
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	460e      	mov	r6, r1
		if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8002cb8:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
			pxSocketList = &xBoundTCPSocketsList;
 8002cbc:	2b06      	cmp	r3, #6
 8002cbe:	bf08      	it	eq
 8002cc0:	4617      	moveq	r7, r2
	configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 8002cc2:	3001      	adds	r0, #1
			pxSocketList = &xBoundTCPSocketsList;
 8002cc4:	9700      	str	r7, [sp, #0]
	configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 8002cc6:	f000 8088 	beq.w	8002dda <vSocketBind+0x132>
			if( pxAddress == NULL )
 8002cca:	2e00      	cmp	r6, #0
 8002ccc:	d041      	beq.n	8002d52 <vSocketBind+0xaa>
			if( pxAddress->sin_port == 0U )
 8002cce:	f8b6 9002 	ldrh.w	r9, [r6, #2]
 8002cd2:	f1b9 0f00 	cmp.w	r9, #0
 8002cd6:	d03f      	beq.n	8002d58 <vSocketBind+0xb0>
				( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 8002cd8:	464a      	mov	r2, r9
			if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 8002cda:	9b01      	ldr	r3, [sp, #4]
 8002cdc:	b11b      	cbz	r3, 8002ce6 <vSocketBind+0x3e>
 8002cde:	f895 1027 	ldrb.w	r1, [r5, #39]	@ 0x27
 8002ce2:	2906      	cmp	r1, #6
 8002ce4:	d00e      	beq.n	8002d04 <vSocketBind+0x5c>
	if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 8002ce6:	9201      	str	r2, [sp, #4]
 8002ce8:	f7ff fd06 	bl	80026f8 <xIPIsNetworkTaskReady>
 8002cec:	9a01      	ldr	r2, [sp, #4]
 8002cee:	2800      	cmp	r0, #0
 8002cf0:	d070      	beq.n	8002dd4 <vSocketBind+0x12c>
		const ListItem_t * pxEnd = listGET_END_MARKER( pxList );
 8002cf2:	9b00      	ldr	r3, [sp, #0]
 8002cf4:	f8b6 9002 	ldrh.w	r9, [r6, #2]
 8002cf8:	f103 0408 	add.w	r4, r3, #8
		for( pxIterator = listGET_NEXT( pxEnd );
 8002cfc:	68d9      	ldr	r1, [r3, #12]
			 pxIterator != pxEnd;
 8002cfe:	428c      	cmp	r4, r1
 8002d00:	d114      	bne.n	8002d2c <vSocketBind+0x84>
				socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 8002d02:	464a      	mov	r2, r9
				pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 8002d04:	fa99 f399 	rev16.w	r3, r9
				socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 8002d08:	60aa      	str	r2, [r5, #8]
				pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 8002d0a:	84ab      	strh	r3, [r5, #36]	@ 0x24
							vTaskSuspendAll();
 8002d0c:	f006 f9f6 	bl	80090fc <vTaskSuspendAll>
					vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 8002d10:	f105 0108 	add.w	r1, r5, #8
 8002d14:	9800      	ldr	r0, [sp, #0]
 8002d16:	f005 fc3f 	bl	8008598 <vListInsertEnd>
							( void ) xTaskResumeAll();
 8002d1a:	f006 facd 	bl	80092b8 <xTaskResumeAll>
	BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 8002d1e:	2000      	movs	r0, #0
} /* Tested */
 8002d20:	b007      	add	sp, #28
 8002d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			 pxIterator = listGET_NEXT( pxIterator ) )
 8002d26:	6849      	ldr	r1, [r1, #4]
			 pxIterator != pxEnd;
 8002d28:	428c      	cmp	r4, r1
 8002d2a:	d0ea      	beq.n	8002d02 <vSocketBind+0x5a>
			if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 8002d2c:	6808      	ldr	r0, [r1, #0]
 8002d2e:	4290      	cmp	r0, r2
 8002d30:	d1f9      	bne.n	8002d26 <vSocketBind+0x7e>
				FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
 8002d32:	f895 5027 	ldrb.w	r5, [r5, #39]	@ 0x27
 8002d36:	fa99 f399 	rev16.w	r3, r9
 8002d3a:	4930      	ldr	r1, [pc, #192]	@ (8002dfc <vSocketBind+0x154>)
 8002d3c:	4c30      	ldr	r4, [pc, #192]	@ (8002e00 <vSocketBind+0x158>)
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	4830      	ldr	r0, [pc, #192]	@ (8002e04 <vSocketBind+0x15c>)
 8002d42:	2d06      	cmp	r5, #6
 8002d44:	bf18      	it	ne
 8002d46:	4621      	movne	r1, r4
 8002d48:	f00a f8e0 	bl	800cf0c <lUDPLoggingPrintf>
				xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 8002d4c:	f06f 006f 	mvn.w	r0, #111	@ 0x6f
 8002d50:	e7e6      	b.n	8002d20 <vSocketBind+0x78>
				pxAddress->sin_port = 0U;
 8002d52:	f8ad 6012 	strh.w	r6, [sp, #18]
				pxAddress = &xAddress;
 8002d56:	ae04      	add	r6, sp, #16
			pxList = &xBoundTCPSocketsList;
 8002d58:	4b27      	ldr	r3, [pc, #156]	@ (8002df8 <vSocketBind+0x150>)
		pxList = &xBoundUDPSocketsList;
 8002d5a:	f44f 447c 	mov.w	r4, #64512	@ 0xfc00
				pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 8002d5e:	f895 1027 	ldrb.w	r1, [r5, #39]	@ 0x27
			pxList = &xBoundTCPSocketsList;
 8002d62:	4a24      	ldr	r2, [pc, #144]	@ (8002df4 <vSocketBind+0x14c>)
			socketAUTO_PORT_ALLOCATION_START_NUMBER +
 8002d64:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8002e0c <vSocketBind+0x164>
			pxList = &xBoundTCPSocketsList;
 8002d68:	2906      	cmp	r1, #6
 8002d6a:	bf14      	ite	ne
 8002d6c:	4692      	movne	sl, r2
 8002d6e:	469a      	moveq	sl, r3
	uint32_t ulRandomSeed = 0;
 8002d70:	2300      	movs	r3, #0
		const ListItem_t * pxEnd = listGET_END_MARKER( pxList );
 8002d72:	f10a 0708 	add.w	r7, sl, #8
	uint32_t ulRandomSeed = 0;
 8002d76:	9303      	str	r3, [sp, #12]
		if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 8002d78:	a803      	add	r0, sp, #12
 8002d7a:	f7fe f82f 	bl	8000ddc <xApplicationGetRandomNumber>
 8002d7e:	b310      	cbz	r0, 8002dc6 <vSocketBind+0x11e>
			socketAUTO_PORT_ALLOCATION_START_NUMBER +
 8002d80:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8002d84:	ea4f 239b 	mov.w	r3, fp, lsr #10
 8002d88:	fba8 2303 	umull	r2, r3, r8, r3
 8002d8c:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8002d90:	ebab 2b83 	sub.w	fp, fp, r3, lsl #10
		usResult =
 8002d94:	f50b 6b80 	add.w	fp, fp, #1024	@ 0x400
 8002d98:	fa9b fb9b 	rev16.w	fp, fp
 8002d9c:	fa1f f98b 	uxth.w	r9, fp
	if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 8002da0:	f7ff fcaa 	bl	80026f8 <xIPIsNetworkTaskReady>
 8002da4:	b1f8      	cbz	r0, 8002de6 <vSocketBind+0x13e>
		for( pxIterator = listGET_NEXT( pxEnd );
 8002da6:	f8da 000c 	ldr.w	r0, [sl, #12]
		if( NULL == pxListFindListItemWithValue(
 8002daa:	464a      	mov	r2, r9
			 pxIterator != pxEnd;
 8002dac:	4287      	cmp	r7, r0
 8002dae:	d103      	bne.n	8002db8 <vSocketBind+0x110>
 8002db0:	e01c      	b.n	8002dec <vSocketBind+0x144>
			 pxIterator = listGET_NEXT( pxIterator ) )
 8002db2:	6840      	ldr	r0, [r0, #4]
			 pxIterator != pxEnd;
 8002db4:	4287      	cmp	r7, r0
 8002db6:	d016      	beq.n	8002de6 <vSocketBind+0x13e>
			if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 8002db8:	6802      	ldr	r2, [r0, #0]
 8002dba:	4591      	cmp	r9, r2
 8002dbc:	d1f9      	bne.n	8002db2 <vSocketBind+0x10a>
	while( usIterations > 0U );
 8002dbe:	3c01      	subs	r4, #1
 8002dc0:	b2a4      	uxth	r4, r4
 8002dc2:	2c00      	cmp	r4, #0
 8002dc4:	d1d8      	bne.n	8002d78 <vSocketBind+0xd0>
				pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 8002dc6:	2300      	movs	r3, #0
					xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 8002dc8:	f06f 007c 	mvn.w	r0, #124	@ 0x7c
				pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 8002dcc:	8073      	strh	r3, [r6, #2]
} /* Tested */
 8002dce:	b007      	add	sp, #28
 8002dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dd4:	8872      	ldrh	r2, [r6, #2]
				socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 8002dd6:	4691      	mov	r9, r2
 8002dd8:	e794      	b.n	8002d04 <vSocketBind+0x5c>
	configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 8002dda:	f240 5114 	movw	r1, #1300	@ 0x514
 8002dde:	480a      	ldr	r0, [pc, #40]	@ (8002e08 <vSocketBind+0x160>)
 8002de0:	f7fd ff8a 	bl	8000cf8 <vAssertCalled>
 8002de4:	e771      	b.n	8002cca <vSocketBind+0x22>
				pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 8002de6:	f8a6 b002 	strh.w	fp, [r6, #2]
 8002dea:	e775      	b.n	8002cd8 <vSocketBind+0x30>
 8002dec:	f8a6 b002 	strh.w	fp, [r6, #2]
				if( pxAddress->sin_port == ( uint16_t ) 0U )
 8002df0:	e773      	b.n	8002cda <vSocketBind+0x32>
 8002df2:	bf00      	nop
 8002df4:	200003b0 	.word	0x200003b0
 8002df8:	2000039c 	.word	0x2000039c
 8002dfc:	08010230 	.word	0x08010230
 8002e00:	08010234 	.word	0x08010234
 8002e04:	08010238 	.word	0x08010238
 8002e08:	080101a8 	.word	0x080101a8
 8002e0c:	04104114 	.word	0x04104114

08002e10 <FreeRTOS_closesocket>:
{
 8002e10:	b500      	push	{lr}
	xCloseEvent.eEventType = eSocketCloseEvent;
 8002e12:	230a      	movs	r3, #10
{
 8002e14:	b083      	sub	sp, #12
	xCloseEvent.eEventType = eSocketCloseEvent;
 8002e16:	f88d 3000 	strb.w	r3, [sp]
	if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 8002e1a:	1e43      	subs	r3, r0, #1
	xCloseEvent.pvData = xSocket;
 8002e1c:	9001      	str	r0, [sp, #4]
	if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 8002e1e:	3303      	adds	r3, #3
 8002e20:	d80c      	bhi.n	8002e3c <FreeRTOS_closesocket+0x2c>
				if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8002e22:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
 8002e26:	2b06      	cmp	r3, #6
 8002e28:	d00c      	beq.n	8002e44 <FreeRTOS_closesocket+0x34>
		if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	4668      	mov	r0, sp
 8002e2e:	f7ff f8c3 	bl	8001fb8 <xSendEventStructToIPTask>
 8002e32:	b190      	cbz	r0, 8002e5a <FreeRTOS_closesocket+0x4a>
			xResult = 1;
 8002e34:	2001      	movs	r0, #1
}
 8002e36:	b003      	add	sp, #12
 8002e38:	f85d fb04 	ldr.w	pc, [sp], #4
		xResult = 0;
 8002e3c:	2000      	movs	r0, #0
}
 8002e3e:	b003      	add	sp, #12
 8002e40:	f85d fb04 	ldr.w	pc, [sp], #4
					pxSocket->u.xTCP.pxHandleConnected = NULL;
 8002e44:	2300      	movs	r3, #0
		if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
 8002e46:	2100      	movs	r1, #0
					pxSocket->u.xTCP.pxHandleConnected = NULL;
 8002e48:	f8c0 30d4 	str.w	r3, [r0, #212]	@ 0xd4
					pxSocket->u.xTCP.pxHandleReceive = NULL;
 8002e4c:	e9c0 3333 	strd	r3, r3, [r0, #204]	@ 0xcc
		if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
 8002e50:	4668      	mov	r0, sp
 8002e52:	f7ff f8b1 	bl	8001fb8 <xSendEventStructToIPTask>
 8002e56:	2800      	cmp	r0, #0
 8002e58:	d1ec      	bne.n	8002e34 <FreeRTOS_closesocket+0x24>
			FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
 8002e5a:	4804      	ldr	r0, [pc, #16]	@ (8002e6c <FreeRTOS_closesocket+0x5c>)
 8002e5c:	f00a f856 	bl	800cf0c <lUDPLoggingPrintf>
			xResult = -1;
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002e64:	b003      	add	sp, #12
 8002e66:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e6a:	bf00      	nop
 8002e6c:	0801025c 	.word	0x0801025c

08002e70 <vSocketClose>:
{
 8002e70:	b5f0      	push	{r4, r5, r6, r7, lr}
			if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8002e72:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
{
 8002e76:	b083      	sub	sp, #12
 8002e78:	4604      	mov	r4, r0
			if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8002e7a:	2b06      	cmp	r3, #6
 8002e7c:	d01b      	beq.n	8002eb6 <vSocketClose+0x46>
	if( socketSOCKET_IS_BOUND( pxSocket ) )
 8002e7e:	69a3      	ldr	r3, [r4, #24]
 8002e80:	b13b      	cbz	r3, 8002e92 <vSocketClose+0x22>
				vTaskSuspendAll();
 8002e82:	f006 f93b 	bl	80090fc <vTaskSuspendAll>
		( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 8002e86:	f104 0008 	add.w	r0, r4, #8
 8002e8a:	f005 fbab 	bl	80085e4 <uxListRemove>
				( void ) xTaskResumeAll();
 8002e8e:	f006 fa13 	bl	80092b8 <xTaskResumeAll>
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 8002e92:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 8002e96:	2b11      	cmp	r3, #17
 8002e98:	d043      	beq.n	8002f22 <vSocketClose+0xb2>
	if( pxSocket->xEventGroup != NULL )
 8002e9a:	6860      	ldr	r0, [r4, #4]
 8002e9c:	b108      	cbz	r0, 8002ea2 <vSocketClose+0x32>
		vEventGroupDelete( pxSocket->xEventGroup );
 8002e9e:	f005 fb41 	bl	8008524 <vEventGroupDelete>
			if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8002ea2:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 8002ea6:	2b06      	cmp	r3, #6
 8002ea8:	d049      	beq.n	8002f3e <vSocketClose+0xce>
	vPortFreeSocket( pxSocket );
 8002eaa:	4620      	mov	r0, r4
 8002eac:	f007 f8e8 	bl	800a080 <vPortFree>
} /* Tested */
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	b003      	add	sp, #12
 8002eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8002eb6:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8002eb8:	b108      	cbz	r0, 8002ebe <vSocketClose+0x4e>
							vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8002eba:	f003 fda5 	bl	8006a08 <vReleaseNetworkBufferAndDescriptor>
						vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 8002ebe:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 8002ec2:	f002 fff1 	bl	8005ea8 <vTCPWindowDestroy>
				if( pxSocket->u.xTCP.rxStream != NULL )
 8002ec6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8002ec8:	b108      	cbz	r0, 8002ece <vSocketClose+0x5e>
					vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 8002eca:	f007 f8d9 	bl	800a080 <vPortFree>
				if( pxSocket->u.xTCP.txStream != NULL )
 8002ece:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8002ed0:	b108      	cbz	r0, 8002ed6 <vSocketClose+0x66>
					vPortFreeLarge( pxSocket->u.xTCP.txStream );
 8002ed2:	f007 f8d5 	bl	800a080 <vPortFree>
		for( pxIterator = listGET_NEXT( pxEnd );
 8002ed6:	4d26      	ldr	r5, [pc, #152]	@ (8002f70 <vSocketClose+0x100>)
		uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 8002ed8:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		for( pxIterator = listGET_NEXT( pxEnd );
 8002eda:	68eb      	ldr	r3, [r5, #12]
			 pxIterator != pxEnd;
 8002edc:	3508      	adds	r5, #8
 8002ede:	42ab      	cmp	r3, r5
 8002ee0:	d103      	bne.n	8002eea <vSocketClose+0x7a>
 8002ee2:	e7cc      	b.n	8002e7e <vSocketClose+0xe>
			 pxIterator = listGET_NEXT( pxIterator ) )
 8002ee4:	685b      	ldr	r3, [r3, #4]
			 pxIterator != pxEnd;
 8002ee6:	42ab      	cmp	r3, r5
 8002ee8:	d0c9      	beq.n	8002e7e <vSocketClose+0xe>
			pxOtherSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8002eea:	68d8      	ldr	r0, [r3, #12]
			if( ( pxOtherSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN ) &&
 8002eec:	f890 2053 	ldrb.w	r2, [r0, #83]	@ 0x53
 8002ef0:	2a01      	cmp	r2, #1
 8002ef2:	d1f7      	bne.n	8002ee4 <vSocketClose+0x74>
				( pxOtherSocket->usLocalPort == usLocalPort ) &&
 8002ef4:	8c82      	ldrh	r2, [r0, #36]	@ 0x24
			if( ( pxOtherSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN ) &&
 8002ef6:	4291      	cmp	r1, r2
 8002ef8:	d1f4      	bne.n	8002ee4 <vSocketClose+0x74>
				( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 8002efa:	f8b0 204e 	ldrh.w	r2, [r0, #78]	@ 0x4e
				( pxOtherSocket->usLocalPort == usLocalPort ) &&
 8002efe:	2a00      	cmp	r2, #0
 8002f00:	d0f0      	beq.n	8002ee4 <vSocketClose+0x74>
				pxOtherSocket->u.xTCP.usChildCount--;
 8002f02:	3a01      	subs	r2, #1
				FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
 8002f04:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002f08:	4d1a      	ldr	r5, [pc, #104]	@ (8002f74 <vSocketClose+0x104>)
				pxOtherSocket->u.xTCP.usChildCount--;
 8002f0a:	b292      	uxth	r2, r2
 8002f0c:	f8a0 204e 	strh.w	r2, [r0, #78]	@ 0x4e
				FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
 8002f10:	4819      	ldr	r0, [pc, #100]	@ (8002f78 <vSocketClose+0x108>)
 8002f12:	2a01      	cmp	r2, #1
 8002f14:	bf18      	it	ne
 8002f16:	4628      	movne	r0, r5
 8002f18:	9000      	str	r0, [sp, #0]
 8002f1a:	4818      	ldr	r0, [pc, #96]	@ (8002f7c <vSocketClose+0x10c>)
 8002f1c:	f009 fff6 	bl	800cf0c <lUDPLoggingPrintf>
				break;
 8002f20:	e7ad      	b.n	8002e7e <vSocketClose+0xe>
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 8002f22:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002f24:	b303      	cbz	r3, 8002f68 <vSocketClose+0xf8>
			pxNetworkBuffer = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 8002f26:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002f28:	68dd      	ldr	r5, [r3, #12]
			( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 8002f2a:	4628      	mov	r0, r5
 8002f2c:	f005 fb5a 	bl	80085e4 <uxListRemove>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8002f30:	4628      	mov	r0, r5
 8002f32:	f003 fd69 	bl	8006a08 <vReleaseNetworkBufferAndDescriptor>
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 8002f36:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1f4      	bne.n	8002f26 <vSocketClose+0xb6>
 8002f3c:	e7ad      	b.n	8002e9a <vSocketClose+0x2a>
				FreeRTOS_debug_printf( ( "FreeRTOS_closesocket[%u to %lxip:%u]: buffers %lu socks %lu\n",
 8002f3e:	8ca5      	ldrh	r5, [r4, #36]	@ 0x24
 8002f40:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8002f42:	8fa7      	ldrh	r7, [r4, #60]	@ 0x3c
 8002f44:	f003 fd8c 	bl	8006a60 <uxGetNumberOfFreeNetworkBuffers>
 8002f48:	4629      	mov	r1, r5
 8002f4a:	4d09      	ldr	r5, [pc, #36]	@ (8002f70 <vSocketClose+0x100>)
 8002f4c:	9000      	str	r0, [sp, #0]
 8002f4e:	463b      	mov	r3, r7
 8002f50:	682d      	ldr	r5, [r5, #0]
 8002f52:	4632      	mov	r2, r6
 8002f54:	480a      	ldr	r0, [pc, #40]	@ (8002f80 <vSocketClose+0x110>)
 8002f56:	9501      	str	r5, [sp, #4]
 8002f58:	f009 ffd8 	bl	800cf0c <lUDPLoggingPrintf>
	vPortFreeSocket( pxSocket );
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	f007 f88f 	bl	800a080 <vPortFree>
} /* Tested */
 8002f62:	2000      	movs	r0, #0
 8002f64:	b003      	add	sp, #12
 8002f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if( pxSocket->xEventGroup != NULL )
 8002f68:	6860      	ldr	r0, [r4, #4]
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	d197      	bne.n	8002e9e <vSocketClose+0x2e>
 8002f6e:	e79c      	b.n	8002eaa <vSocketClose+0x3a>
 8002f70:	2000039c 	.word	0x2000039c
 8002f74:	0801027c 	.word	0x0801027c
 8002f78:	080114a0 	.word	0x080114a0
 8002f7c:	08010280 	.word	0x08010280
 8002f80:	080102ac 	.word	0x080102ac

08002f84 <FreeRTOS_setsockopt>:
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 8002f84:	1e41      	subs	r1, r0, #1
 8002f86:	3103      	adds	r1, #3
 8002f88:	f200 8147 	bhi.w	800321a <FreeRTOS_setsockopt+0x296>
 8002f8c:	4684      	mov	ip, r0
{
 8002f8e:	b508      	push	{r3, lr}
	switch( lOptionName )
 8002f90:	2a12      	cmp	r2, #18
 8002f92:	f200 80f0 	bhi.w	8003176 <FreeRTOS_setsockopt+0x1f2>
 8002f96:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002f9a:	00e3      	.short	0x00e3
 8002f9c:	00e60088 	.word	0x00e60088
 8002fa0:	00290084 	.word	0x00290084
 8002fa4:	00130029 	.word	0x00130029
 8002fa8:	00130013 	.word	0x00130013
 8002fac:	00130013 	.word	0x00130013
 8002fb0:	00480038 	.word	0x00480038
 8002fb4:	00940058 	.word	0x00940058
 8002fb8:	00ee00bd 	.word	0x00ee00bd
 8002fbc:	00d500ee 	.word	0x00d500ee
							   if( ( lOptionName == FREERTOS_SO_UDP_RECV_HANDLER ) ||
 8002fc0:	f1a2 0109 	sub.w	r1, r2, #9
							   if( pxSocket->ucProtocol != ( uint8_t ) uxProtocol )
 8002fc4:	f890 0027 	ldrb.w	r0, [r0, #39]	@ 0x27
							   if( ( lOptionName == FREERTOS_SO_UDP_RECV_HANDLER ) ||
 8002fc8:	2902      	cmp	r1, #2
 8002fca:	bf34      	ite	cc
 8002fcc:	2111      	movcc	r1, #17
 8002fce:	2106      	movcs	r1, #6
							   if( pxSocket->ucProtocol != ( uint8_t ) uxProtocol )
 8002fd0:	4288      	cmp	r0, r1
 8002fd2:	f040 8103 	bne.w	80031dc <FreeRTOS_setsockopt+0x258>
					   switch( lOptionName )
 8002fd6:	3a07      	subs	r2, #7
								   pxSocket->u.xTCP.pxHandleConnected = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( F_TCP_UDP_Handler_t, pvOptionValue )->pxOnTCPConnected;
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2a03      	cmp	r2, #3
 8002fdc:	f200 8120 	bhi.w	8003220 <FreeRTOS_setsockopt+0x29c>
 8002fe0:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002fe4:	00eb00ee 	.word	0x00eb00ee
 8002fe8:	00e800f1 	.word	0x00e800f1
		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8002fec:	f890 1027 	ldrb.w	r1, [r0, #39]	@ 0x27
 8002ff0:	2906      	cmp	r1, #6
 8002ff2:	f040 80f6 	bne.w	80031e2 <FreeRTOS_setsockopt+0x25e>
		else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 8002ff6:	2a04      	cmp	r2, #4
 8002ff8:	f000 80ce 	beq.w	8003198 <FreeRTOS_setsockopt+0x214>
				 ( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 8002ffc:	6f42      	ldr	r2, [r0, #116]	@ 0x74
 8002ffe:	2a00      	cmp	r2, #0
 8003000:	f040 8104 	bne.w	800320c <FreeRTOS_setsockopt+0x288>
			ulNewValue = *( ipPOINTER_CAST( const uint32_t *, pvOptionValue ) );
 8003004:	681b      	ldr	r3, [r3, #0]
				pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 8003006:	66c3      	str	r3, [r0, #108]	@ 0x6c
 8003008:	e04d      	b.n	80030a6 <FreeRTOS_setsockopt+0x122>
					   if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800300a:	f890 2027 	ldrb.w	r2, [r0, #39]	@ 0x27
 800300e:	2a06      	cmp	r2, #6
 8003010:	f040 80e4 	bne.w	80031dc <FreeRTOS_setsockopt+0x258>
					   if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80b7 	beq.w	800318a <FreeRTOS_setsockopt+0x206>
						   pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 800301c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8003020:	f043 0308 	orr.w	r3, r3, #8
 8003024:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8003028:	e03d      	b.n	80030a6 <FreeRTOS_setsockopt+0x122>
					   if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800302a:	f890 2027 	ldrb.w	r2, [r0, #39]	@ 0x27
 800302e:	2a06      	cmp	r2, #6
 8003030:	f040 80d4 	bne.w	80031dc <FreeRTOS_setsockopt+0x258>
					   if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 80a0 	beq.w	800317c <FreeRTOS_setsockopt+0x1f8>
						   pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE;
 800303c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8003040:	f043 0310 	orr.w	r3, r3, #16
 8003044:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8003048:	e02d      	b.n	80030a6 <FreeRTOS_setsockopt+0x122>
					   if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800304a:	f890 2027 	ldrb.w	r2, [r0, #39]	@ 0x27
 800304e:	2a06      	cmp	r2, #6
 8003050:	f040 80d8 	bne.w	8003204 <FreeRTOS_setsockopt+0x280>
					   if( ( pxSocket->u.xTCP.txStream != NULL ) || ( pxSocket->u.xTCP.rxStream != NULL ) )
 8003054:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 8003056:	2a00      	cmp	r2, #0
 8003058:	f040 80bd 	bne.w	80031d6 <FreeRTOS_setsockopt+0x252>
 800305c:	6f42      	ldr	r2, [r0, #116]	@ 0x74
 800305e:	2a00      	cmp	r2, #0
 8003060:	f040 80b9 	bne.w	80031d6 <FreeRTOS_setsockopt+0x252>
            return ( a <= b ) ? a : b;
        }
        static portINLINE uint32_t FreeRTOS_round_up( uint32_t a,
                                                      uint32_t d )
        {
            return d * ( ( a + d - 1U ) / d );
 8003064:	681a      	ldr	r2, [r3, #0]
				ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 8003066:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 800306a:	3a01      	subs	r2, #1
							   pxSocket->u.xTCP.uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 800306c:	68d8      	ldr	r0, [r3, #12]
 800306e:	440a      	add	r2, r1
 8003070:	fbb2 f2f1 	udiv	r2, r2, r1
 8003074:	fb01 f202 	mul.w	r2, r1, r2
				pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 8003078:	f8cc 2070 	str.w	r2, [ip, #112]	@ 0x70
							   pxSocket->u.xTCP.uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 800307c:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
							   pxSocket->u.xTCP.uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 8003080:	f8cc 00dc 	str.w	r0, [ip, #220]	@ 0xdc
				pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 8003084:	f8cc 206c 	str.w	r2, [ip, #108]	@ 0x6c
					   if( pxSocket->u.xTCP.xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 8003088:	f89c 20e4 	ldrb.w	r2, [ip, #228]	@ 0xe4
							   pxSocket->u.xTCP.uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 800308c:	f8cc 30e0 	str.w	r3, [ip, #224]	@ 0xe0
					   if( pxSocket->u.xTCP.xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 8003090:	07d2      	lsls	r2, r2, #31
 8003092:	d508      	bpl.n	80030a6 <FreeRTOS_setsockopt+0x122>
						   pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength = pxSocket->u.xTCP.uxRxWinSize * pxSocket->u.xTCP.usInitMSS;
 8003094:	fb01 f000 	mul.w	r0, r1, r0
						   pxSocket->u.xTCP.xTCPWindow.xSize.ulTxWindowLength = pxSocket->u.xTCP.uxTxWinSize * pxSocket->u.xTCP.usInitMSS;
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	e9cc 033a 	strd	r0, r3, [ip, #232]	@ 0xe8
 80030a0:	e001      	b.n	80030a6 <FreeRTOS_setsockopt+0x122>
						   pxSocket->pxUserSemaphore = *( ipPOINTER_CAST( SemaphoreHandle_t *, pvOptionValue ) );
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6283      	str	r3, [r0, #40]	@ 0x28
			xReturn = 0;
 80030a6:	2000      	movs	r0, #0
} /* Tested */
 80030a8:	bd08      	pop	{r3, pc}
			if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 80030aa:	f890 2027 	ldrb.w	r2, [r0, #39]	@ 0x27
			pxSocket->xSendBlockTime = *( ( const TickType_t * ) pvOptionValue );
 80030ae:	681b      	ldr	r3, [r3, #0]
				if( pxSocket->xSendBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 80030b0:	2a11      	cmp	r2, #17
			pxSocket->xSendBlockTime = *( ( const TickType_t * ) pvOptionValue );
 80030b2:	6203      	str	r3, [r0, #32]
				if( pxSocket->xSendBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 80030b4:	d1f7      	bne.n	80030a6 <FreeRTOS_setsockopt+0x122>
 80030b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d9f3      	bls.n	80030a6 <FreeRTOS_setsockopt+0x122>
					pxSocket->xSendBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 80030be:	6202      	str	r2, [r0, #32]
 80030c0:	e7f1      	b.n	80030a6 <FreeRTOS_setsockopt+0x122>
					   if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 80030c2:	f890 2027 	ldrb.w	r2, [r0, #39]	@ 0x27
 80030c6:	2a06      	cmp	r2, #6
 80030c8:	f040 8088 	bne.w	80031dc <FreeRTOS_setsockopt+0x258>
					   if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	f890 30e4 	ldrb.w	r3, [r0, #228]	@ 0xe4
 80030d2:	3a00      	subs	r2, #0
 80030d4:	bf18      	it	ne
 80030d6:	2201      	movne	r2, #1
 80030d8:	f362 0341 	bfi	r3, r2, #1, #1
 80030dc:	f880 30e4 	strb.w	r3, [r0, #228]	@ 0xe4
					   if( ( pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize == pdFALSE_UNSIGNED ) &&
 80030e0:	079b      	lsls	r3, r3, #30
 80030e2:	d4e0      	bmi.n	80030a6 <FreeRTOS_setsockopt+0x122>
 80030e4:	f890 3053 	ldrb.w	r3, [r0, #83]	@ 0x53
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d9dc      	bls.n	80030a6 <FreeRTOS_setsockopt+0x122>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
		}
		else
		{
			if( pxSocket->u.xTCP.txStream != NULL )
 80030ec:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 80030ee:	2a00      	cmp	r2, #0
 80030f0:	d0d9      	beq.n	80030a6 <FreeRTOS_setsockopt+0x122>
                                                     const size_t uxUpper )
    {
/* Returns the distance between uxLower and uxUpper */
        size_t uxCount;

        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 80030f2:	6911      	ldr	r1, [r2, #16]
    static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t * pxBuffer );
    static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t * pxBuffer )
    {
/* Returns the number of items which can be read from uxTail
 * before reaching uxHead */
        size_t uxHead = pxBuffer->uxHead;
 80030f4:	6893      	ldr	r3, [r2, #8]
        size_t uxTail = pxBuffer->uxTail;
 80030f6:	6812      	ldr	r2, [r2, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 80030f8:	440b      	add	r3, r1
 80030fa:	1a9b      	subs	r3, r3, r2
        if( uxCount >= pxBuffer->LENGTH )
 80030fc:	4299      	cmp	r1, r3
            uxCount -= pxBuffer->LENGTH;
 80030fe:	bf98      	it	ls
 8003100:	1a5b      	subls	r3, r3, r1
						   ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0cf      	beq.n	80030a6 <FreeRTOS_setsockopt+0x122>
						   pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bSendFullSize */
 8003106:	2301      	movs	r3, #1
						   ( void ) xSendEventToIPTask( eTCPTimerEvent );
 8003108:	2006      	movs	r0, #6
						   pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bSendFullSize */
 800310a:	f8ac 3048 	strh.w	r3, [ip, #72]	@ 0x48
						   ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800310e:	f7fe ff1d 	bl	8001f4c <xSendEventToIPTask>
 8003112:	e7c8      	b.n	80030a6 <FreeRTOS_setsockopt+0x122>
					   if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8003114:	f890 0027 	ldrb.w	r0, [r0, #39]	@ 0x27
 8003118:	2806      	cmp	r0, #6
 800311a:	d15f      	bne.n	80031dc <FreeRTOS_setsockopt+0x258>
					   if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800311c:	681b      	ldr	r3, [r3, #0]
					   pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 800311e:	f8dc 1040 	ldr.w	r1, [ip, #64]	@ 0x40
					   if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 8003122:	3b00      	subs	r3, #0
					   pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 8003124:	4a40      	ldr	r2, [pc, #256]	@ (8003228 <FreeRTOS_setsockopt+0x2a4>)
					   if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 8003126:	bf18      	it	ne
 8003128:	2301      	movne	r3, #1
					   pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 800312a:	400a      	ands	r2, r1
					   pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 800312c:	2101      	movs	r1, #1
					   pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 800312e:	049b      	lsls	r3, r3, #18
					   pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 8003130:	f8ac 1048 	strh.w	r1, [ip, #72]	@ 0x48
					   pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 8003134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003138:	4313      	orrs	r3, r2
 800313a:	f8cc 3040 	str.w	r3, [ip, #64]	@ 0x40
					   ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800313e:	f7fe ff05 	bl	8001f4c <xSendEventToIPTask>
					break;
 8003142:	e7b0      	b.n	80030a6 <FreeRTOS_setsockopt+0x122>
					   if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8003144:	f890 2027 	ldrb.w	r2, [r0, #39]	@ 0x27
 8003148:	2a06      	cmp	r2, #6
 800314a:	d157      	bne.n	80031fc <FreeRTOS_setsockopt+0x278>
					   if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800314c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003150:	4293      	cmp	r3, r2
 8003152:	d94f      	bls.n	80031f4 <FreeRTOS_setsockopt+0x270>
 8003154:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 8003156:	4299      	cmp	r1, r3
 8003158:	d34c      	bcc.n	80031f4 <FreeRTOS_setsockopt+0x270>
					   pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 800315a:	e9c0 2319 	strd	r2, r3, [r0, #100]	@ 0x64
				   break;
 800315e:	e7a2      	b.n	80030a6 <FreeRTOS_setsockopt+0x122>
			pxSocket->xReceiveBlockTime = *( ( const TickType_t * ) pvOptionValue );
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	61c3      	str	r3, [r0, #28]
			break;
 8003164:	e79f      	b.n	80030a6 <FreeRTOS_setsockopt+0x122>
				pxSocket->ucSocketOptions &= ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT );
 8003166:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
			if( pvOptionValue == NULL )
 800316a:	b37b      	cbz	r3, 80031cc <FreeRTOS_setsockopt+0x248>
				pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800316c:	f042 0202 	orr.w	r2, r2, #2
 8003170:	f880 2026 	strb.w	r2, [r0, #38]	@ 0x26
 8003174:	e797      	b.n	80030a6 <FreeRTOS_setsockopt+0x122>
	switch( lOptionName )
 8003176:	f06f 006c 	mvn.w	r0, #108	@ 0x6c
} /* Tested */
 800317a:	bd08      	pop	{r3, pc}
						   pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE;
 800317c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8003180:	f363 1204 	bfi	r2, r3, #4, #1
 8003184:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
 8003188:	e78d      	b.n	80030a6 <FreeRTOS_setsockopt+0x122>
						   pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE;
 800318a:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800318e:	f363 02c3 	bfi	r2, r3, #3, #1
 8003192:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
 8003196:	e786      	b.n	80030a6 <FreeRTOS_setsockopt+0x122>
		else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 8003198:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800319a:	2a00      	cmp	r2, #0
 800319c:	d13b      	bne.n	8003216 <FreeRTOS_setsockopt+0x292>
 800319e:	681b      	ldr	r3, [r3, #0]
				ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 80031a0:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 80031a4:	3b01      	subs	r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80031ac:	fb02 f303 	mul.w	r3, r2, r3
				pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 80031b0:	6703      	str	r3, [r0, #112]	@ 0x70
 80031b2:	e778      	b.n	80030a6 <FreeRTOS_setsockopt+0x122>
							   pxSocket->u.xUDP.pxHandleSent = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( F_TCP_UDP_Handler_t, pvOptionValue )->pxOnUDPSent;
 80031b4:	f8cc 3050 	str.w	r3, [ip, #80]	@ 0x50
							   break;
 80031b8:	e775      	b.n	80030a6 <FreeRTOS_setsockopt+0x122>
								   pxSocket->u.xTCP.pxHandleSent = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( F_TCP_UDP_Handler_t, pvOptionValue )->pxOnTCPSent;
 80031ba:	f8cc 30d0 	str.w	r3, [ip, #208]	@ 0xd0
								   break;
 80031be:	e772      	b.n	80030a6 <FreeRTOS_setsockopt+0x122>
								   pxSocket->u.xTCP.pxHandleReceive = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( F_TCP_UDP_Handler_t, pvOptionValue )->pxOnTCPReceive;
 80031c0:	f8cc 30cc 	str.w	r3, [ip, #204]	@ 0xcc
								   break;
 80031c4:	e76f      	b.n	80030a6 <FreeRTOS_setsockopt+0x122>
							   pxSocket->u.xUDP.pxHandleReceive = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( F_TCP_UDP_Handler_t, pvOptionValue )->pxOnUDPReceive;
 80031c6:	f8cc 304c 	str.w	r3, [ip, #76]	@ 0x4c
							   break;
 80031ca:	e76c      	b.n	80030a6 <FreeRTOS_setsockopt+0x122>
				pxSocket->ucSocketOptions &= ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT );
 80031cc:	f022 0202 	bic.w	r2, r2, #2
 80031d0:	f880 2026 	strb.w	r2, [r0, #38]	@ 0x26
 80031d4:	e767      	b.n	80030a6 <FreeRTOS_setsockopt+0x122>
						   FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: buffer already created\n" ) );
 80031d6:	4815      	ldr	r0, [pc, #84]	@ (800322c <FreeRTOS_setsockopt+0x2a8>)
 80031d8:	f009 fe98 	bl	800cf0c <lUDPLoggingPrintf>
		return xReturn;
 80031dc:	f06f 0015 	mvn.w	r0, #21
} /* Tested */
 80031e0:	bd08      	pop	{r3, pc}
			FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
 80031e2:	4b13      	ldr	r3, [pc, #76]	@ (8003230 <FreeRTOS_setsockopt+0x2ac>)
 80031e4:	4913      	ldr	r1, [pc, #76]	@ (8003234 <FreeRTOS_setsockopt+0x2b0>)
 80031e6:	4814      	ldr	r0, [pc, #80]	@ (8003238 <FreeRTOS_setsockopt+0x2b4>)
 80031e8:	2a04      	cmp	r2, #4
 80031ea:	bf08      	it	eq
 80031ec:	4619      	moveq	r1, r3
 80031ee:	f009 fe8d 	bl	800cf0c <lUDPLoggingPrintf>
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 80031f2:	e7f3      	b.n	80031dc <FreeRTOS_setsockopt+0x258>
						   FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
 80031f4:	4811      	ldr	r0, [pc, #68]	@ (800323c <FreeRTOS_setsockopt+0x2b8>)
 80031f6:	f009 fe89 	bl	800cf0c <lUDPLoggingPrintf>
						   break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 80031fa:	e7ef      	b.n	80031dc <FreeRTOS_setsockopt+0x258>
						   FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
 80031fc:	4810      	ldr	r0, [pc, #64]	@ (8003240 <FreeRTOS_setsockopt+0x2bc>)
 80031fe:	f009 fe85 	bl	800cf0c <lUDPLoggingPrintf>
						   break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 8003202:	e7eb      	b.n	80031dc <FreeRTOS_setsockopt+0x258>
						   FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
 8003204:	480f      	ldr	r0, [pc, #60]	@ (8003244 <FreeRTOS_setsockopt+0x2c0>)
 8003206:	f009 fe81 	bl	800cf0c <lUDPLoggingPrintf>
						   break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800320a:	e7e7      	b.n	80031dc <FreeRTOS_setsockopt+0x258>
			FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
 800320c:	4909      	ldr	r1, [pc, #36]	@ (8003234 <FreeRTOS_setsockopt+0x2b0>)
 800320e:	480e      	ldr	r0, [pc, #56]	@ (8003248 <FreeRTOS_setsockopt+0x2c4>)
 8003210:	f009 fe7c 	bl	800cf0c <lUDPLoggingPrintf>
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8003214:	e7e2      	b.n	80031dc <FreeRTOS_setsockopt+0x258>
			FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
 8003216:	4906      	ldr	r1, [pc, #24]	@ (8003230 <FreeRTOS_setsockopt+0x2ac>)
 8003218:	e7f9      	b.n	800320e <FreeRTOS_setsockopt+0x28a>
		return xReturn;
 800321a:	f06f 0015 	mvn.w	r0, #21
} /* Tested */
 800321e:	4770      	bx	lr
								   pxSocket->u.xTCP.pxHandleConnected = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( F_TCP_UDP_Handler_t, pvOptionValue )->pxOnTCPConnected;
 8003220:	f8cc 30d4 	str.w	r3, [ip, #212]	@ 0xd4
								   break;
 8003224:	e73f      	b.n	80030a6 <FreeRTOS_setsockopt+0x122>
 8003226:	bf00      	nop
 8003228:	fffbfeff 	.word	0xfffbfeff
 800322c:	080103c4 	.word	0x080103c4
 8003230:	080102ec 	.word	0x080102ec
 8003234:	080102f0 	.word	0x080102f0
 8003238:	08010354 	.word	0x08010354
 800323c:	08010328 	.word	0x08010328
 8003240:	080102f4 	.word	0x080102f4
 8003244:	080103a0 	.word	0x080103a0
 8003248:	08010378 	.word	0x08010378

0800324c <pxUDPSocketLookup>:
{
 800324c:	b510      	push	{r4, lr}
 800324e:	4604      	mov	r4, r0
	if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 8003250:	f7ff fa52 	bl	80026f8 <xIPIsNetworkTaskReady>
 8003254:	b178      	cbz	r0, 8003276 <pxUDPSocketLookup+0x2a>
		for( pxIterator = listGET_NEXT( pxEnd );
 8003256:	490c      	ldr	r1, [pc, #48]	@ (8003288 <pxUDPSocketLookup+0x3c>)
 8003258:	68cb      	ldr	r3, [r1, #12]
			 pxIterator != pxEnd;
 800325a:	3108      	adds	r1, #8
 800325c:	428b      	cmp	r3, r1
 800325e:	d103      	bne.n	8003268 <pxUDPSocketLookup+0x1c>
 8003260:	e009      	b.n	8003276 <pxUDPSocketLookup+0x2a>
			 pxIterator = listGET_NEXT( pxIterator ) )
 8003262:	685b      	ldr	r3, [r3, #4]
			 pxIterator != pxEnd;
 8003264:	428b      	cmp	r3, r1
 8003266:	d006      	beq.n	8003276 <pxUDPSocketLookup+0x2a>
			if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	4294      	cmp	r4, r2
 800326c:	d1f9      	bne.n	8003262 <pxUDPSocketLookup+0x16>
		pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxListItem ) );
 800326e:	68dc      	ldr	r4, [r3, #12]
		configASSERT( pxSocket != NULL );
 8003270:	b124      	cbz	r4, 800327c <pxUDPSocketLookup+0x30>
}
 8003272:	4620      	mov	r0, r4
 8003274:	bd10      	pop	{r4, pc}
	FreeRTOS_Socket_t * pxSocket = NULL;
 8003276:	2400      	movs	r4, #0
}
 8003278:	4620      	mov	r0, r4
 800327a:	bd10      	pop	{r4, pc}
		configASSERT( pxSocket != NULL );
 800327c:	f640 018e 	movw	r1, #2190	@ 0x88e
 8003280:	4802      	ldr	r0, [pc, #8]	@ (800328c <pxUDPSocketLookup+0x40>)
 8003282:	f7fd fd39 	bl	8000cf8 <vAssertCalled>
 8003286:	e7f4      	b.n	8003272 <pxUDPSocketLookup+0x26>
 8003288:	200003b0 	.word	0x200003b0
 800328c:	080101a8 	.word	0x080101a8

08003290 <FreeRTOS_inet_ntoa>:
{
 8003290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003294:	b085      	sub	sp, #20
	socklen_t uxIndex = 0;
 8003296:	f04f 0c00 	mov.w	ip, #0
			pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800329a:	4c2c      	ldr	r4, [pc, #176]	@ (800334c <FreeRTOS_inet_ntoa+0xbc>)
			pcBuffer[ uxIndex ] = '.';
 800329c:	262e      	movs	r6, #46	@ 0x2e
{
 800329e:	9001      	str	r0, [sp, #4]
 80032a0:	f10d 0e04 	add.w	lr, sp, #4
 80032a4:	ad02      	add	r5, sp, #8
 80032a6:	f10d 000f 	add.w	r0, sp, #15
		uint8_t ucValue = pucAddress[ uxNibble ];
 80032aa:	f81e 2b01 	ldrb.w	r2, [lr], #1
			pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 80032ae:	fba4 7302 	umull	r7, r3, r4, r2
			if( pucDigits[ uxSource ] != 0U )
 80032b2:	2a63      	cmp	r2, #99	@ 0x63
			pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 80032b4:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80032b8:	eb03 0883 	add.w	r8, r3, r3, lsl #2
			ucValue /= ( uint8_t ) 10U;
 80032bc:	b2df      	uxtb	r7, r3
			pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 80032be:	eba2 0348 	sub.w	r3, r2, r8, lsl #1
 80032c2:	f88d 300e 	strb.w	r3, [sp, #14]
 80032c6:	fba4 8307 	umull	r8, r3, r4, r7
 80032ca:	ea4f 03d3 	mov.w	r3, r3, lsr #3
		pucDigits[ 0 ] = ucValue;
 80032ce:	f88d 300c 	strb.w	r3, [sp, #12]
			pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 80032d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80032d6:	eba7 0343 	sub.w	r3, r7, r3, lsl #1
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f88d 300d 	strb.w	r3, [sp, #13]
			if( pucDigits[ uxSource ] != 0U )
 80032e0:	d827      	bhi.n	8003332 <FreeRTOS_inet_ntoa+0xa2>
		for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 80032e2:	2b00      	cmp	r3, #0
		if( ( uxIndex + uxNeeded ) > uxSize )
 80032e4:	f10c 0804 	add.w	r8, ip, #4
		for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 80032e8:	bf0c      	ite	eq
 80032ea:	f04f 0902 	moveq.w	r9, #2
 80032ee:	f04f 0901 	movne.w	r9, #1
		if( ( uxIndex + uxNeeded ) > uxSize )
 80032f2:	eba8 0809 	sub.w	r8, r8, r9
 80032f6:	f1b8 0f10 	cmp.w	r8, #16
 80032fa:	d823      	bhi.n	8003344 <FreeRTOS_inet_ntoa+0xb4>
 80032fc:	ab03      	add	r3, sp, #12
 80032fe:	eb01 070c 	add.w	r7, r1, ip
 8003302:	eb03 0209 	add.w	r2, r3, r9
			pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 8003306:	f812 3b01 	ldrb.w	r3, [r2], #1
 800330a:	3330      	adds	r3, #48	@ 0x30
		for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800330c:	4290      	cmp	r0, r2
			pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800330e:	f807 3b01 	strb.w	r3, [r7], #1
		for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 8003312:	d1f8      	bne.n	8003306 <FreeRTOS_inet_ntoa+0x76>
 8003314:	f10c 0303 	add.w	r3, ip, #3
		if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 8003318:	45ae      	cmp	lr, r5
			uxIndex++;
 800331a:	eba3 0309 	sub.w	r3, r3, r9
		if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800331e:	d002      	beq.n	8003326 <FreeRTOS_inet_ntoa+0x96>
		uxIndex++;
 8003320:	46c4      	mov	ip, r8
			pcBuffer[ uxIndex ] = '.';
 8003322:	54ce      	strb	r6, [r1, r3]
	for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 8003324:	e7c1      	b.n	80032aa <FreeRTOS_inet_ntoa+0x1a>
			pcBuffer[ uxIndex ] = '\0';
 8003326:	2200      	movs	r2, #0
	const char * pcResult = pcBuffer;
 8003328:	4608      	mov	r0, r1
			pcBuffer[ uxIndex ] = '\0';
 800332a:	54ca      	strb	r2, [r1, r3]
}
 800332c:	b005      	add	sp, #20
 800332e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 8003332:	f04f 0900 	mov.w	r9, #0
		if( ( uxIndex + uxNeeded ) > uxSize )
 8003336:	f10c 0804 	add.w	r8, ip, #4
 800333a:	eba8 0809 	sub.w	r8, r8, r9
 800333e:	f1b8 0f10 	cmp.w	r8, #16
 8003342:	d9db      	bls.n	80032fc <FreeRTOS_inet_ntoa+0x6c>
			pcResult = NULL;
 8003344:	2000      	movs	r0, #0
}
 8003346:	b005      	add	sp, #20
 8003348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800334c:	cccccccd 	.word	0xcccccccd

08003350 <FreeRTOS_inet_ntop>:
	if( uxSize < 16U )
 8003350:	2b0f      	cmp	r3, #15
 8003352:	d901      	bls.n	8003358 <FreeRTOS_inet_ntop+0x8>
 8003354:	2802      	cmp	r0, #2
 8003356:	d001      	beq.n	800335c <FreeRTOS_inet_ntop+0xc>
			pcResult = NULL;
 8003358:	2000      	movs	r0, #0
}
 800335a:	4770      	bx	lr
		( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 800335c:	468c      	mov	ip, r1
		( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 800335e:	4611      	mov	r1, r2
{
 8003360:	b508      	push	{r3, lr}
		( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 8003362:	f8dc 0000 	ldr.w	r0, [ip]
 8003366:	f7ff ff93 	bl	8003290 <FreeRTOS_inet_ntoa>
		pcReturn = pcDestination;
 800336a:	4608      	mov	r0, r1
}
 800336c:	bd08      	pop	{r3, pc}
 800336e:	bf00      	nop

08003370 <vSocketWakeUpUser>:
{
 8003370:	b510      	push	{r4, lr}
 8003372:	4604      	mov	r4, r0
			if( pxSocket->pxUserSemaphore != NULL )
 8003374:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003376:	b120      	cbz	r0, 8003382 <vSocketWakeUpUser+0x12>
				( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 8003378:	2300      	movs	r3, #0
 800337a:	461a      	mov	r2, r3
 800337c:	4619      	mov	r1, r3
 800337e:	f005 fa4d 	bl	800881c <xQueueGenericSend>
			if( pxSocket->pxSocketSet != NULL )
 8003382:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
				EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 8003384:	6823      	ldr	r3, [r4, #0]
			if( pxSocket->pxSocketSet != NULL )
 8003386:	b122      	cbz	r2, 8003392 <vSocketWakeUpUser+0x22>
				if( xSelectBits != 0UL )
 8003388:	f413 6f70 	tst.w	r3, #3840	@ 0xf00
				EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800338c:	f3c3 2103 	ubfx	r1, r3, #8, #4
				if( xSelectBits != 0UL )
 8003390:	d10d      	bne.n	80033ae <vSocketWakeUpUser+0x3e>
			pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 8003392:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
	if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 8003396:	6860      	ldr	r0, [r4, #4]
			pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 8003398:	6021      	str	r1, [r4, #0]
	if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800339a:	b101      	cbz	r1, 800339e <vSocketWakeUpUser+0x2e>
 800339c:	b910      	cbnz	r0, 80033a4 <vSocketWakeUpUser+0x34>
	pxSocket->xEventBits = 0UL;
 800339e:	2300      	movs	r3, #0
 80033a0:	6023      	str	r3, [r4, #0]
}
 80033a2:	bd10      	pop	{r4, pc}
		( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 80033a4:	f005 f878 	bl	8008498 <xEventGroupSetBits>
	pxSocket->xEventBits = 0UL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	6023      	str	r3, [r4, #0]
}
 80033ac:	bd10      	pop	{r4, pc}
					pxSocket->xSocketBits |= xSelectBits;
 80033ae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
					( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 80033b0:	6810      	ldr	r0, [r2, #0]
					pxSocket->xSocketBits |= xSelectBits;
 80033b2:	430b      	orrs	r3, r1
 80033b4:	6363      	str	r3, [r4, #52]	@ 0x34
					( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 80033b6:	f005 f86f 	bl	8008498 <xEventGroupSetBits>
			pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	e7e9      	b.n	8003392 <vSocketWakeUpUser+0x22>
 80033be:	bf00      	nop

080033c0 <FreeRTOS_accept>:
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 80033c0:	1e43      	subs	r3, r0, #1
 80033c2:	3303      	adds	r3, #3
	{
 80033c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033c8:	b089      	sub	sp, #36	@ 0x24
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 80033ca:	d806      	bhi.n	80033da <FreeRTOS_accept+0x1a>
	else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 80033cc:	6983      	ldr	r3, [r0, #24]
 80033ce:	4604      	mov	r4, r0
 80033d0:	b11b      	cbz	r3, 80033da <FreeRTOS_accept+0x1a>
	else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 80033d2:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
 80033d6:	2b06      	cmp	r3, #6
 80033d8:	d005      	beq.n	80033e6 <FreeRTOS_accept+0x26>
			pxClientSocket = FREERTOS_INVALID_SOCKET;
 80033da:	f04f 35ff 	mov.w	r5, #4294967295
	}
 80033de:	4628      	mov	r0, r5
 80033e0:	b009      	add	sp, #36	@ 0x24
 80033e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		else if( ( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) &&
 80033e6:	f890 9040 	ldrb.w	r9, [r0, #64]	@ 0x40
 80033ea:	460e      	mov	r6, r1
 80033ec:	4617      	mov	r7, r2
 80033ee:	f019 0908 	ands.w	r9, r9, #8
 80033f2:	d056      	beq.n	80034a2 <FreeRTOS_accept+0xe2>
 80033f4:	f04f 0900 	mov.w	r9, #0
				vTaskSuspendAll();
 80033f8:	f005 fe80 	bl	80090fc <vTaskSuspendAll>
					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 80033fc:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
						pxSocket->u.xTCP.pxPeerSocket = NULL;
 8003400:	f04f 0800 	mov.w	r8, #0
					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 8003404:	0719      	lsls	r1, r3, #28
 8003406:	d44a      	bmi.n	800349e <FreeRTOS_accept+0xde>
						pxClientSocket = pxSocket->u.xTCP.pxPeerSocket;
 8003408:	6d65      	ldr	r5, [r4, #84]	@ 0x54
					if( pxClientSocket != NULL )
 800340a:	b345      	cbz	r5, 800345e <FreeRTOS_accept+0x9e>
						if( pxClientSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED )
 800340c:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 8003410:	079a      	lsls	r2, r3, #30
						pxSocket->u.xTCP.pxPeerSocket = NULL;
 8003412:	f8c4 8054 	str.w	r8, [r4, #84]	@ 0x54
						if( pxClientSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED )
 8003416:	d522      	bpl.n	800345e <FreeRTOS_accept+0x9e>
							pxClientSocket->u.xTCP.bits.bPassAccept = pdFALSE;
 8003418:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 800341c:	f368 0341 	bfi	r3, r8, #1, #1
 8003420:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
				( void ) xTaskResumeAll();
 8003424:	f005 ff48 	bl	80092b8 <xTaskResumeAll>
					if( pxAddress != NULL )
 8003428:	b12e      	cbz	r6, 8003436 <FreeRTOS_accept+0x76>
						pxAddress->sin_addr = FreeRTOS_ntohl( pxClientSocket->u.xTCP.ulRemoteIP );
 800342a:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800342c:	ba1b      	rev	r3, r3
 800342e:	6073      	str	r3, [r6, #4]
						pxAddress->sin_port = FreeRTOS_ntohs( pxClientSocket->u.xTCP.usRemotePort );
 8003430:	8fab      	ldrh	r3, [r5, #60]	@ 0x3c
 8003432:	ba5b      	rev16	r3, r3
 8003434:	8073      	strh	r3, [r6, #2]
					if( pxAddressLength != NULL )
 8003436:	b10f      	cbz	r7, 800343c <FreeRTOS_accept+0x7c>
						*pxAddressLength = sizeof( *pxAddress );
 8003438:	2308      	movs	r3, #8
 800343a:	603b      	str	r3, [r7, #0]
					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800343c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8003440:	071b      	lsls	r3, r3, #28
 8003442:	d4cc      	bmi.n	80033de <FreeRTOS_accept+0x1e>
					xAskEvent.eEventType = eTCPAcceptEvent;
 8003444:	2307      	movs	r3, #7
					( void ) xSendEventStructToIPTask( &xAskEvent, portMAX_DELAY );
 8003446:	f04f 31ff 	mov.w	r1, #4294967295
 800344a:	a806      	add	r0, sp, #24
					xAskEvent.pvData = pxSocket;
 800344c:	9407      	str	r4, [sp, #28]
					xAskEvent.eEventType = eTCPAcceptEvent;
 800344e:	f88d 3018 	strb.w	r3, [sp, #24]
					( void ) xSendEventStructToIPTask( &xAskEvent, portMAX_DELAY );
 8003452:	f7fe fdb1 	bl	8001fb8 <xSendEventStructToIPTask>
	}
 8003456:	4628      	mov	r0, r5
 8003458:	b009      	add	sp, #36	@ 0x24
 800345a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				( void ) xTaskResumeAll();
 800345e:	f005 ff2b 	bl	80092b8 <xTaskResumeAll>
				if( xTimed == pdFALSE )
 8003462:	f1b9 0f00 	cmp.w	r9, #0
 8003466:	d105      	bne.n	8003474 <FreeRTOS_accept+0xb4>
					xRemainingTime = pxSocket->xReceiveBlockTime;
 8003468:	69e3      	ldr	r3, [r4, #28]
 800346a:	9303      	str	r3, [sp, #12]
					if( xRemainingTime == ( TickType_t ) 0 )
 800346c:	b1f3      	cbz	r3, 80034ac <FreeRTOS_accept+0xec>
					vTaskSetTimeOutState( &xTimeOut );
 800346e:	a804      	add	r0, sp, #16
 8003470:	f006 f902 	bl	8009678 <vTaskSetTimeOutState>
				if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 8003474:	a903      	add	r1, sp, #12
 8003476:	a804      	add	r0, sp, #16
 8003478:	f006 f926 	bl	80096c8 <xTaskCheckForTimeOut>
 800347c:	4603      	mov	r3, r0
 800347e:	b9a8      	cbnz	r0, 80034ac <FreeRTOS_accept+0xec>
				( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_ACCEPT, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
 8003480:	9a03      	ldr	r2, [sp, #12]
 8003482:	2104      	movs	r1, #4
				vTaskSuspendAll();
 8003484:	f04f 0901 	mov.w	r9, #1
				( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_ACCEPT, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
 8003488:	9200      	str	r2, [sp, #0]
 800348a:	2201      	movs	r2, #1
 800348c:	6860      	ldr	r0, [r4, #4]
 800348e:	f004 ff55 	bl	800833c <xEventGroupWaitBits>
				vTaskSuspendAll();
 8003492:	f005 fe33 	bl	80090fc <vTaskSuspendAll>
					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 8003496:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800349a:	0719      	lsls	r1, r3, #28
 800349c:	d5b4      	bpl.n	8003408 <FreeRTOS_accept+0x48>
 800349e:	4625      	mov	r5, r4
 80034a0:	e7b6      	b.n	8003410 <FreeRTOS_accept+0x50>
		else if( ( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) &&
 80034a2:	f890 3053 	ldrb.w	r3, [r0, #83]	@ 0x53
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d197      	bne.n	80033da <FreeRTOS_accept+0x1a>
 80034aa:	e7a5      	b.n	80033f8 <FreeRTOS_accept+0x38>
 80034ac:	2500      	movs	r5, #0
 80034ae:	e796      	b.n	80033de <FreeRTOS_accept+0x1e>

080034b0 <FreeRTOS_recv>:
	{
 80034b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034b4:	461e      	mov	r6, r3
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 80034b6:	1e43      	subs	r3, r0, #1
	{
 80034b8:	b086      	sub	sp, #24
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 80034ba:	3303      	adds	r3, #3
 80034bc:	d806      	bhi.n	80034cc <FreeRTOS_recv+0x1c>
	else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 80034be:	6983      	ldr	r3, [r0, #24]
 80034c0:	4605      	mov	r5, r0
 80034c2:	b11b      	cbz	r3, 80034cc <FreeRTOS_recv+0x1c>
	else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 80034c4:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
 80034c8:	2b06      	cmp	r3, #6
 80034ca:	d004      	beq.n	80034d6 <FreeRTOS_recv+0x26>
			xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 80034cc:	f06f 0015 	mvn.w	r0, #21
	}
 80034d0:	b006      	add	sp, #24
 80034d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		else if( ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) != 0U ) &&
 80034d6:	460f      	mov	r7, r1
 80034d8:	4690      	mov	r8, r2
 80034da:	b909      	cbnz	r1, 80034e0 <FreeRTOS_recv+0x30>
 80034dc:	07f2      	lsls	r2, r6, #31
 80034de:	d4f5      	bmi.n	80034cc <FreeRTOS_recv+0x1c>
			if( pxSocket->u.xTCP.rxStream != NULL )
 80034e0:	f8d5 e074 	ldr.w	lr, [r5, #116]	@ 0x74
 80034e4:	f1be 0f00 	cmp.w	lr, #0
 80034e8:	d00c      	beq.n	8003504 <FreeRTOS_recv+0x54>
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 80034ea:	f8de 2010 	ldr.w	r2, [lr, #16]
        size_t uxHead = pxBuffer->uxHead;
 80034ee:	f8de 3008 	ldr.w	r3, [lr, #8]
        size_t uxTail = pxBuffer->uxTail;
 80034f2:	f8de 0000 	ldr.w	r0, [lr]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 80034f6:	4413      	add	r3, r2
 80034f8:	1a18      	subs	r0, r3, r0
        if( uxCount >= pxBuffer->LENGTH )
 80034fa:	4282      	cmp	r2, r0
            uxCount -= pxBuffer->LENGTH;
 80034fc:	bf98      	it	ls
 80034fe:	1a80      	subls	r0, r0, r2
			while( xByteCount == 0 )
 8003500:	2800      	cmp	r0, #0
 8003502:	d139      	bne.n	8003578 <FreeRTOS_recv+0xc8>
				switch( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) )
 8003504:	f895 3053 	ldrb.w	r3, [r5, #83]	@ 0x53
 8003508:	2b00      	cmp	r3, #0
 800350a:	d07e      	beq.n	800360a <FreeRTOS_recv+0x15a>
 800350c:	3b08      	subs	r3, #8
 800350e:	2b01      	cmp	r3, #1
 8003510:	d97b      	bls.n	800360a <FreeRTOS_recv+0x15a>
					xRemainingTime = pxSocket->xReceiveBlockTime;
 8003512:	69eb      	ldr	r3, [r5, #28]
 8003514:	9303      	str	r3, [sp, #12]
					if( xRemainingTime == ( TickType_t ) 0 )
 8003516:	2b00      	cmp	r3, #0
 8003518:	d042      	beq.n	80035a0 <FreeRTOS_recv+0xf0>
					if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800351a:	06f3      	lsls	r3, r6, #27
 800351c:	d440      	bmi.n	80035a0 <FreeRTOS_recv+0xf0>
					vTaskSetTimeOutState( &xTimeOut );
 800351e:	a804      	add	r0, sp, #16
 8003520:	f006 f8aa 	bl	8009678 <vTaskSetTimeOutState>
 8003524:	e007      	b.n	8003536 <FreeRTOS_recv+0x86>
				switch( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) )
 8003526:	f895 3053 	ldrb.w	r3, [r5, #83]	@ 0x53
 800352a:	f1a3 0208 	sub.w	r2, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d06b      	beq.n	800360a <FreeRTOS_recv+0x15a>
 8003532:	2a01      	cmp	r2, #1
 8003534:	d969      	bls.n	800360a <FreeRTOS_recv+0x15a>
				if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 8003536:	a903      	add	r1, sp, #12
 8003538:	a804      	add	r0, sp, #16
 800353a:	f006 f8c5 	bl	80096c8 <xTaskCheckForTimeOut>
				xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup,
 800353e:	2201      	movs	r2, #1
 8003540:	2161      	movs	r1, #97	@ 0x61
				if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 8003542:	4603      	mov	r3, r0
 8003544:	bb60      	cbnz	r0, 80035a0 <FreeRTOS_recv+0xf0>
				xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup,
 8003546:	9c03      	ldr	r4, [sp, #12]
 8003548:	9400      	str	r4, [sp, #0]
 800354a:	6868      	ldr	r0, [r5, #4]
 800354c:	f004 fef6 	bl	800833c <xEventGroupWaitBits>
				if( pxSocket->u.xTCP.rxStream != NULL )
 8003550:	f8d5 e074 	ldr.w	lr, [r5, #116]	@ 0x74
 8003554:	f1be 0f00 	cmp.w	lr, #0
 8003558:	d0e5      	beq.n	8003526 <FreeRTOS_recv+0x76>
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800355a:	f8de 3010 	ldr.w	r3, [lr, #16]
        size_t uxHead = pxBuffer->uxHead;
 800355e:	f8de 4008 	ldr.w	r4, [lr, #8]
        size_t uxTail = pxBuffer->uxTail;
 8003562:	f8de 0000 	ldr.w	r0, [lr]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003566:	eb04 0c03 	add.w	ip, r4, r3
 800356a:	ebac 0000 	sub.w	r0, ip, r0
        if( uxCount >= pxBuffer->LENGTH )
 800356e:	4283      	cmp	r3, r0
            uxCount -= pxBuffer->LENGTH;
 8003570:	bf98      	it	ls
 8003572:	1ac0      	subls	r0, r0, r3
			while( xByteCount == 0 )
 8003574:	2800      	cmp	r0, #0
 8003576:	d0d6      	beq.n	8003526 <FreeRTOS_recv+0x76>
			if( xByteCount > 0 )
 8003578:	2800      	cmp	r0, #0
 800357a:	dda9      	ble.n	80034d0 <FreeRTOS_recv+0x20>
				if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) == 0U )
 800357c:	f016 0101 	ands.w	r1, r6, #1
 8003580:	d12d      	bne.n	80035de <FreeRTOS_recv+0x12e>
					BaseType_t xIsPeek = ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_PEEK ) != 0U ) ? 1L : 0L;
 8003582:	f3c6 0680 	ubfx	r6, r6, #2, #1
								 uxStreamBufferGet( pxSocket->u.xTCP.rxStream,
 8003586:	4643      	mov	r3, r8
 8003588:	463a      	mov	r2, r7
 800358a:	4670      	mov	r0, lr
 800358c:	9600      	str	r6, [sp, #0]
 800358e:	f000 fc97 	bl	8003ec0 <uxStreamBufferGet>
					if( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED )
 8003592:	f995 3040 	ldrsb.w	r3, [r5, #64]	@ 0x40
								 uxStreamBufferGet( pxSocket->u.xTCP.rxStream,
 8003596:	4604      	mov	r4, r0
					if( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED )
 8003598:	2b00      	cmp	r3, #0
 800359a:	db03      	blt.n	80035a4 <FreeRTOS_recv+0xf4>
					xByteCount = ( BaseType_t )
 800359c:	4620      	mov	r0, r4
 800359e:	e797      	b.n	80034d0 <FreeRTOS_recv+0x20>
							xByteCount = -pdFREERTOS_ERRNO_ENOTCONN;
 80035a0:	2000      	movs	r0, #0
 80035a2:	e795      	b.n	80034d0 <FreeRTOS_recv+0x20>
						size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 80035a4:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
        size_t uxFront = pxBuffer->uxFront;
 80035a6:	68d1      	ldr	r1, [r2, #12]
        size_t uxTail = pxBuffer->uxTail;
 80035a8:	6813      	ldr	r3, [r2, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 80035aa:	6912      	ldr	r2, [r2, #16]
 80035ac:	4413      	add	r3, r2
 80035ae:	3b01      	subs	r3, #1
 80035b0:	1a5b      	subs	r3, r3, r1
        if( uxCount >= pxBuffer->LENGTH )
 80035b2:	429a      	cmp	r2, r3
            uxCount -= pxBuffer->LENGTH;
 80035b4:	bf98      	it	ls
 80035b6:	1a9b      	subls	r3, r3, r2
						if( uxFrontSpace >= pxSocket->u.xTCP.uxEnoughSpace )
 80035b8:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d8ee      	bhi.n	800359c <FreeRTOS_recv+0xec>
							pxSocket->u.xTCP.bits.bLowWater = pdFALSE;
 80035be:	f8b5 3040 	ldrh.w	r3, [r5, #64]	@ 0x40
							pxSocket->u.xTCP.usTimeout = 1U; /* because bLowWater is cleared. */
 80035c2:	2201      	movs	r2, #1
							( void ) xSendEventToIPTask( eTCPTimerEvent );
 80035c4:	2006      	movs	r0, #6
							pxSocket->u.xTCP.bits.bLowWater = pdFALSE;
 80035c6:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
							pxSocket->u.xTCP.usTimeout = 1U; /* because bLowWater is cleared. */
 80035ca:	f8a5 2048 	strh.w	r2, [r5, #72]	@ 0x48
							pxSocket->u.xTCP.bits.bLowWater = pdFALSE;
 80035ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035d2:	f8a5 3040 	strh.w	r3, [r5, #64]	@ 0x40
							( void ) xSendEventToIPTask( eTCPTimerEvent );
 80035d6:	f7fe fcb9 	bl	8001f4c <xSendEventToIPTask>
					xByteCount = ( BaseType_t )
 80035da:	4620      	mov	r0, r4
 80035dc:	e778      	b.n	80034d0 <FreeRTOS_recv+0x20>
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 80035de:	f8de 0010 	ldr.w	r0, [lr, #16]
                                                   uint8_t ** ppucData )
    {
        size_t uxNextTail = pxBuffer->uxTail;
        size_t uxSize = uxStreamBufferGetSize( pxBuffer );

        *ppucData = pxBuffer->ucArray + uxNextTail;
 80035e2:	f10e 0e14 	add.w	lr, lr, #20
        size_t uxNextTail = pxBuffer->uxTail;
 80035e6:	f85e 3c14 	ldr.w	r3, [lr, #-20]
        size_t uxHead = pxBuffer->uxHead;
 80035ea:	f85e 2c0c 	ldr.w	r2, [lr, #-12]
        size_t uxTail = pxBuffer->uxTail;
 80035ee:	f85e 1c14 	ldr.w	r1, [lr, #-20]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 80035f2:	4402      	add	r2, r0
 80035f4:	1a52      	subs	r2, r2, r1
        if( uxCount >= pxBuffer->LENGTH )
 80035f6:	4290      	cmp	r0, r2
            uxCount -= pxBuffer->LENGTH;
 80035f8:	bf98      	it	ls
 80035fa:	1a12      	subls	r2, r2, r0

        return FreeRTOS_min_uint32( uxSize, pxBuffer->LENGTH - uxNextTail );
 80035fc:	1ac0      	subs	r0, r0, r3
        *ppucData = pxBuffer->ucArray + uxNextTail;
 80035fe:	4473      	add	r3, lr
            return ( a <= b ) ? a : b;
 8003600:	4290      	cmp	r0, r2
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	bf28      	it	cs
 8003606:	4610      	movcs	r0, r2
 8003608:	e762      	b.n	80034d0 <FreeRTOS_recv+0x20>
						if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800360a:	f895 3042 	ldrb.w	r3, [r5, #66]	@ 0x42
							xByteCount = -pdFREERTOS_ERRNO_ENOMEM;
 800360e:	f013 0f08 	tst.w	r3, #8
 8003612:	bf0c      	ite	eq
 8003614:	f06f 007f 	mvneq.w	r0, #127	@ 0x7f
 8003618:	f06f 000b 	mvnne.w	r0, #11
 800361c:	e758      	b.n	80034d0 <FreeRTOS_recv+0x20>
 800361e:	bf00      	nop

08003620 <FreeRTOS_send>:
	{
 8003620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003624:	b089      	sub	sp, #36	@ 0x24
 8003626:	9303      	str	r3, [sp, #12]
		if( pvBuffer != NULL )
 8003628:	b119      	cbz	r1, 8003632 <FreeRTOS_send+0x12>
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 800362a:	1e43      	subs	r3, r0, #1
 800362c:	4604      	mov	r4, r0
 800362e:	3303      	adds	r3, #3
 8003630:	d905      	bls.n	800363e <FreeRTOS_send+0x1e>
		BaseType_t xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 8003632:	f06f 0b15 	mvn.w	fp, #21
	}
 8003636:	4658      	mov	r0, fp
 8003638:	b009      	add	sp, #36	@ 0x24
 800363a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800363e:	6983      	ldr	r3, [r0, #24]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f6      	beq.n	8003632 <FreeRTOS_send+0x12>
	else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 8003644:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
 8003648:	2b06      	cmp	r3, #6
 800364a:	d1f2      	bne.n	8003632 <FreeRTOS_send+0x12>
		else if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800364c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8003650:	0718      	lsls	r0, r3, #28
 8003652:	f100 80c3 	bmi.w	80037dc <FreeRTOS_send+0x1bc>
		else if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSED ) ||
 8003656:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 800365a:	4691      	mov	r9, r2
 800365c:	f1a3 0208 	sub.w	r2, r3, #8
				 ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSE_WAIT ) ||
 8003660:	2a01      	cmp	r2, #1
 8003662:	d90a      	bls.n	800367a <FreeRTOS_send+0x5a>
 8003664:	b14b      	cbz	r3, 800367a <FreeRTOS_send+0x5a>
		else if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 8003666:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
		else if( uxDataLength == 0UL )
 800366a:	065a      	lsls	r2, r3, #25
 800366c:	d402      	bmi.n	8003674 <FreeRTOS_send+0x54>
 800366e:	f1b9 0f00 	cmp.w	r9, #0
 8003672:	d108      	bne.n	8003686 <FreeRTOS_send+0x66>
			xResult = 0;
 8003674:	f04f 0b00 	mov.w	fp, #0
		return xByteCount;
 8003678:	e7dd      	b.n	8003636 <FreeRTOS_send+0x16>
			xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800367a:	f06f 0b7f 	mvn.w	fp, #127	@ 0x7f
	}
 800367e:	4658      	mov	r0, fp
 8003680:	b009      	add	sp, #36	@ 0x24
 8003682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if( pxSocket->u.xTCP.txStream == NULL )
 8003686:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8003688:	460f      	mov	r7, r1
 800368a:	2800      	cmp	r0, #0
 800368c:	f000 809e 	beq.w	80037cc <FreeRTOS_send+0x1ac>
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8003690:	6902      	ldr	r2, [r0, #16]
			xBytesLeft = ( BaseType_t ) uxDataLength;
 8003692:	46cb      	mov	fp, r9
        size_t uxHead = pxBuffer->uxHead;
 8003694:	6881      	ldr	r1, [r0, #8]
        size_t uxTail = pxBuffer->uxTail;
 8003696:	6803      	ldr	r3, [r0, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8003698:	4413      	add	r3, r2
 800369a:	3b01      	subs	r3, #1
 800369c:	1a5b      	subs	r3, r3, r1
        if( uxCount >= pxBuffer->LENGTH )
 800369e:	429a      	cmp	r2, r3
            uxCount -= pxBuffer->LENGTH;
 80036a0:	bf98      	it	ls
 80036a2:	1a9b      	subls	r3, r3, r2
			while( xBytesLeft > 0 )
 80036a4:	f1b9 0f00 	cmp.w	r9, #0
			xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 80036a8:	461a      	mov	r2, r3
			while( xBytesLeft > 0 )
 80036aa:	dd2d      	ble.n	8003708 <FreeRTOS_send+0xe8>
			xBytesLeft = ( BaseType_t ) uxDataLength;
 80036ac:	464d      	mov	r5, r9
		BaseType_t xTimed = pdFALSE;
 80036ae:	f04f 0800 	mov.w	r8, #0
					pxSocket->u.xTCP.usTimeout = 1U;
 80036b2:	f04f 0a01 	mov.w	sl, #1
				if( xByteCount > 0 )
 80036b6:	2a00      	cmp	r2, #0
 80036b8:	dd16      	ble.n	80036e8 <FreeRTOS_send+0xc8>
					xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0UL, pucSource, ( size_t ) xByteCount );
 80036ba:	4295      	cmp	r5, r2
					if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) && ( xByteCount == xBytesLeft ) )
 80036bc:	f894 1040 	ldrb.w	r1, [r4, #64]	@ 0x40
					xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0UL, pucSource, ( size_t ) xByteCount );
 80036c0:	462e      	mov	r6, r5
 80036c2:	bfa8      	it	ge
 80036c4:	4616      	movge	r6, r2
					if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) && ( xByteCount == xBytesLeft ) )
 80036c6:	f011 0110 	ands.w	r1, r1, #16
 80036ca:	d158      	bne.n	800377e <FreeRTOS_send+0x15e>
					xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0UL, pucSource, ( size_t ) xByteCount );
 80036cc:	4633      	mov	r3, r6
 80036ce:	463a      	mov	r2, r7
 80036d0:	f000 fb8a 	bl	8003de8 <uxStreamBufferAdd>
 80036d4:	4606      	mov	r6, r0
					pxSocket->u.xTCP.usTimeout = 1U;
 80036d6:	f8a4 a048 	strh.w	sl, [r4, #72]	@ 0x48
					if( xIsCallingFromIPTask() == pdFALSE )
 80036da:	f7fe fb21 	bl	8001d20 <xIsCallingFromIPTask>
 80036de:	2800      	cmp	r0, #0
 80036e0:	d05b      	beq.n	800379a <FreeRTOS_send+0x17a>
					if( xBytesLeft == 0 )
 80036e2:	1bad      	subs	r5, r5, r6
 80036e4:	d0a7      	beq.n	8003636 <FreeRTOS_send+0x16>
					pucSource = &( pucSource[ xByteCount ] );
 80036e6:	4437      	add	r7, r6
				if( xTimed == pdFALSE )
 80036e8:	f1b8 0f00 	cmp.w	r8, #0
 80036ec:	d11b      	bne.n	8003726 <FreeRTOS_send+0x106>
					xRemainingTime = pxSocket->xSendBlockTime;
 80036ee:	6a23      	ldr	r3, [r4, #32]
 80036f0:	9305      	str	r3, [sp, #20]
							if( xIsCallingFromIPTask() != pdFALSE )
 80036f2:	f7fe fb15 	bl	8001d20 <xIsCallingFromIPTask>
 80036f6:	2800      	cmp	r0, #0
 80036f8:	d038      	beq.n	800376c <FreeRTOS_send+0x14c>
			xByteCount = ( ( BaseType_t ) uxDataLength ) - xBytesLeft;
 80036fa:	eba9 0b05 	sub.w	fp, r9, r5
								xRemainingTime = ( TickType_t ) 0;
 80036fe:	f8cd 8014 	str.w	r8, [sp, #20]
			if( xByteCount == 0 )
 8003702:	f1bb 0f00 	cmp.w	fp, #0
 8003706:	d196      	bne.n	8003636 <FreeRTOS_send+0x16>
				if( pxSocket->u.xTCP.ucTCPState > ( uint8_t ) eESTABLISHED )
 8003708:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 800370c:	2b05      	cmp	r3, #5
 800370e:	d8b4      	bhi.n	800367a <FreeRTOS_send+0x5a>
					if( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 8003710:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
 8003712:	2917      	cmp	r1, #23
 8003714:	d004      	beq.n	8003720 <FreeRTOS_send+0x100>
						FreeRTOS_debug_printf( ( "FreeRTOS_send: %u -> %lxip:%d: no space\n",
 8003716:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8003718:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800371a:	4832      	ldr	r0, [pc, #200]	@ (80037e4 <FreeRTOS_send+0x1c4>)
 800371c:	f009 fbf6 	bl	800cf0c <lUDPLoggingPrintf>
					xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOSPC;
 8003720:	f06f 0b1b 	mvn.w	fp, #27
 8003724:	e787      	b.n	8003636 <FreeRTOS_send+0x16>
					if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 8003726:	a905      	add	r1, sp, #20
 8003728:	a806      	add	r0, sp, #24
 800372a:	f005 ffcd 	bl	80096c8 <xTaskCheckForTimeOut>
 800372e:	2800      	cmp	r0, #0
 8003730:	d149      	bne.n	80037c6 <FreeRTOS_send+0x1a6>
				( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_SEND | ( EventBits_t ) eSOCKET_CLOSED,
 8003732:	9e05      	ldr	r6, [sp, #20]
 8003734:	2300      	movs	r3, #0
 8003736:	2201      	movs	r2, #1
 8003738:	2122      	movs	r1, #34	@ 0x22
 800373a:	6860      	ldr	r0, [r4, #4]
 800373c:	f04f 0801 	mov.w	r8, #1
 8003740:	9600      	str	r6, [sp, #0]
 8003742:	f004 fdfb 	bl	800833c <xEventGroupWaitBits>
				xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 8003746:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8003748:	6902      	ldr	r2, [r0, #16]
        size_t uxHead = pxBuffer->uxHead;
 800374a:	6881      	ldr	r1, [r0, #8]
        size_t uxTail = pxBuffer->uxTail;
 800374c:	6803      	ldr	r3, [r0, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800374e:	4413      	add	r3, r2
 8003750:	3b01      	subs	r3, #1
 8003752:	1a5b      	subs	r3, r3, r1
        if( uxCount >= pxBuffer->LENGTH )
 8003754:	429a      	cmp	r2, r3
            uxCount -= pxBuffer->LENGTH;
 8003756:	bf98      	it	ls
 8003758:	1a9b      	subls	r3, r3, r2
			while( xBytesLeft > 0 )
 800375a:	2d00      	cmp	r5, #0
				xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800375c:	461a      	mov	r2, r3
			while( xBytesLeft > 0 )
 800375e:	dcaa      	bgt.n	80036b6 <FreeRTOS_send+0x96>
			xByteCount = ( ( BaseType_t ) uxDataLength ) - xBytesLeft;
 8003760:	eba9 0b05 	sub.w	fp, r9, r5
	}
 8003764:	4658      	mov	r0, fp
 8003766:	b009      	add	sp, #36	@ 0x24
 8003768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if( xRemainingTime == ( TickType_t ) 0 )
 800376c:	9b05      	ldr	r3, [sp, #20]
 800376e:	b353      	cbz	r3, 80037c6 <FreeRTOS_send+0x1a6>
					if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 8003770:	9b03      	ldr	r3, [sp, #12]
 8003772:	06db      	lsls	r3, r3, #27
 8003774:	d427      	bmi.n	80037c6 <FreeRTOS_send+0x1a6>
					vTaskSetTimeOutState( &xTimeOut );
 8003776:	a806      	add	r0, sp, #24
 8003778:	f005 ff7e 	bl	8009678 <vTaskSetTimeOutState>
 800377c:	e7d9      	b.n	8003732 <FreeRTOS_send+0x112>
					if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) && ( xByteCount == xBytesLeft ) )
 800377e:	4295      	cmp	r5, r2
 8003780:	dd0f      	ble.n	80037a2 <FreeRTOS_send+0x182>
					xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0UL, pucSource, ( size_t ) xByteCount );
 8003782:	4633      	mov	r3, r6
 8003784:	463a      	mov	r2, r7
 8003786:	2100      	movs	r1, #0
 8003788:	f000 fb2e 	bl	8003de8 <uxStreamBufferAdd>
					pxSocket->u.xTCP.usTimeout = 1U;
 800378c:	f8a4 a048 	strh.w	sl, [r4, #72]	@ 0x48
					xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0UL, pucSource, ( size_t ) xByteCount );
 8003790:	4606      	mov	r6, r0
					if( xIsCallingFromIPTask() == pdFALSE )
 8003792:	f7fe fac5 	bl	8001d20 <xIsCallingFromIPTask>
 8003796:	2800      	cmp	r0, #0
 8003798:	d1a3      	bne.n	80036e2 <FreeRTOS_send+0xc2>
						( void ) xSendEventToIPTask( eTCPTimerEvent );
 800379a:	2006      	movs	r0, #6
 800379c:	f7fe fbd6 	bl	8001f4c <xSendEventToIPTask>
 80037a0:	e79f      	b.n	80036e2 <FreeRTOS_send+0xc2>
						vTaskSuspendAll();
 80037a2:	f005 fcab 	bl	80090fc <vTaskSuspendAll>
						pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE;
 80037a6:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
					xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0UL, pucSource, ( size_t ) xByteCount );
 80037aa:	4633      	mov	r3, r6
 80037ac:	2100      	movs	r1, #0
						pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE;
 80037ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
					xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0UL, pucSource, ( size_t ) xByteCount );
 80037b2:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
						pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE;
 80037b4:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
					xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0UL, pucSource, ( size_t ) xByteCount );
 80037b8:	463a      	mov	r2, r7
 80037ba:	f000 fb15 	bl	8003de8 <uxStreamBufferAdd>
 80037be:	4606      	mov	r6, r0
						( void ) xTaskResumeAll();
 80037c0:	f005 fd7a 	bl	80092b8 <xTaskResumeAll>
 80037c4:	e787      	b.n	80036d6 <FreeRTOS_send+0xb6>
			xByteCount = ( ( BaseType_t ) uxDataLength ) - xBytesLeft;
 80037c6:	eba9 0b05 	sub.w	fp, r9, r5
 80037ca:	e79a      	b.n	8003702 <FreeRTOS_send+0xe2>
			( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 80037cc:	2100      	movs	r1, #0
 80037ce:	4620      	mov	r0, r4
 80037d0:	f7fe ff98 	bl	8002704 <prvTCPCreateStream>
			if( pxSocket->u.xTCP.txStream == NULL )
 80037d4:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 80037d6:	2800      	cmp	r0, #0
 80037d8:	f47f af5a 	bne.w	8003690 <FreeRTOS_send+0x70>
			xResult = -pdFREERTOS_ERRNO_ENOMEM;
 80037dc:	f06f 0b0b 	mvn.w	fp, #11
 80037e0:	e729      	b.n	8003636 <FreeRTOS_send+0x16>
 80037e2:	bf00      	nop
 80037e4:	080103f0 	.word	0x080103f0

080037e8 <FreeRTOS_listen>:
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 80037e8:	1e43      	subs	r3, r0, #1
 80037ea:	3303      	adds	r3, #3
 80037ec:	d80a      	bhi.n	8003804 <FreeRTOS_listen+0x1c>
	else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 80037ee:	6983      	ldr	r3, [r0, #24]
	{
 80037f0:	b510      	push	{r4, lr}
 80037f2:	4604      	mov	r4, r0
	else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 80037f4:	b11b      	cbz	r3, 80037fe <FreeRTOS_listen+0x16>
	else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 80037f6:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
 80037fa:	2b06      	cmp	r3, #6
 80037fc:	d005      	beq.n	800380a <FreeRTOS_listen+0x22>
			xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 80037fe:	f06f 005e 	mvn.w	r0, #94	@ 0x5e
	}
 8003802:	bd10      	pop	{r4, pc}
			xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 8003804:	f06f 005e 	mvn.w	r0, #94	@ 0x5e
	}
 8003808:	4770      	bx	lr
		else if( ( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCLOSED ) && ( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCLOSE_WAIT ) )
 800380a:	f890 3053 	ldrb.w	r3, [r0, #83]	@ 0x53
 800380e:	f013 03f7 	ands.w	r3, r3, #247	@ 0xf7
 8003812:	d1f4      	bne.n	80037fe <FreeRTOS_listen+0x16>
            return ( a <= b ) ? a : b;
 8003814:	f64f 70ff 	movw	r0, #65535	@ 0xffff
			if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8003818:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
 800381c:	4281      	cmp	r1, r0
 800381e:	bfa8      	it	ge
 8003820:	4601      	movge	r1, r0
 8003822:	0712      	lsls	r2, r2, #28
			pxSocket->u.xTCP.usBacklog = ( uint16_t ) FreeRTOS_min_int32( ( int32_t ) 0xffff, ( int32_t ) xBacklog );
 8003824:	f8a4 1050 	strh.w	r1, [r4, #80]	@ 0x50
			if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8003828:	d520      	bpl.n	800386c <FreeRTOS_listen+0x84>
				if( pxSocket->u.xTCP.rxStream != NULL )
 800382a:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 800382c:	b11a      	cbz	r2, 8003836 <FreeRTOS_listen+0x4e>
        pxBuffer->uxHead = 0U;
 800382e:	6093      	str	r3, [r2, #8]
        pxBuffer->uxTail = 0U;
 8003830:	6013      	str	r3, [r2, #0]
        pxBuffer->uxFront = 0U;
 8003832:	60d3      	str	r3, [r2, #12]
        pxBuffer->uxMid = 0U;
 8003834:	6053      	str	r3, [r2, #4]
				if( pxSocket->u.xTCP.txStream != NULL )
 8003836:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8003838:	b123      	cbz	r3, 8003844 <FreeRTOS_listen+0x5c>
        pxBuffer->uxHead = 0U;
 800383a:	2200      	movs	r2, #0
 800383c:	609a      	str	r2, [r3, #8]
        pxBuffer->uxTail = 0U;
 800383e:	601a      	str	r2, [r3, #0]
        pxBuffer->uxFront = 0U;
 8003840:	60da      	str	r2, [r3, #12]
        pxBuffer->uxMid = 0U;
 8003842:	605a      	str	r2, [r3, #4]
				( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8003844:	2246      	movs	r2, #70	@ 0x46
 8003846:	2100      	movs	r1, #0
 8003848:	f104 0082 	add.w	r0, r4, #130	@ 0x82
 800384c:	f00a f9bc 	bl	800dbc8 <memset>
				( void ) memset( &pxSocket->u.xTCP.xTCPWindow, 0, sizeof( pxSocket->u.xTCP.xTCPWindow ) );
 8003850:	22c0      	movs	r2, #192	@ 0xc0
 8003852:	2100      	movs	r1, #0
 8003854:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 8003858:	f00a f9b6 	bl	800dbc8 <memset>
				( void ) memset( &pxSocket->u.xTCP.bits, 0, sizeof( pxSocket->u.xTCP.bits ) );
 800385c:	2300      	movs	r3, #0
 800385e:	6423      	str	r3, [r4, #64]	@ 0x40
				pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 8003860:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8003864:	f043 0308 	orr.w	r3, r3, #8
 8003868:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			vTCPStateChange( pxSocket, eTCP_LISTEN );
 800386c:	4620      	mov	r0, r4
 800386e:	2101      	movs	r1, #1
 8003870:	f000 fd72 	bl	8004358 <vTCPStateChange>
		BaseType_t xResult = 0;
 8003874:	2000      	movs	r0, #0
	}
 8003876:	bd10      	pop	{r4, pc}

08003878 <FreeRTOS_shutdown>:
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 8003878:	1e42      	subs	r2, r0, #1
 800387a:	3203      	adds	r2, #3
 800387c:	d80a      	bhi.n	8003894 <FreeRTOS_shutdown+0x1c>
	else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800387e:	6982      	ldr	r2, [r0, #24]
	{
 8003880:	b508      	push	{r3, lr}
 8003882:	4603      	mov	r3, r0
	else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 8003884:	b11a      	cbz	r2, 800388e <FreeRTOS_shutdown+0x16>
	else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 8003886:	f890 0027 	ldrb.w	r0, [r0, #39]	@ 0x27
 800388a:	2806      	cmp	r0, #6
 800388c:	d005      	beq.n	800389a <FreeRTOS_shutdown+0x22>
			xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800388e:	f06f 005e 	mvn.w	r0, #94	@ 0x5e
	}
 8003892:	bd08      	pop	{r3, pc}
			xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 8003894:	f06f 005e 	mvn.w	r0, #94	@ 0x5e
	}
 8003898:	4770      	bx	lr
		else if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eESTABLISHED )
 800389a:	f893 2053 	ldrb.w	r2, [r3, #83]	@ 0x53
 800389e:	2a05      	cmp	r2, #5
 80038a0:	d1f5      	bne.n	800388e <FreeRTOS_shutdown+0x16>
			pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
 80038a2:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
			pxSocket->u.xTCP.usTimeout = 1U;
 80038a6:	2101      	movs	r1, #1
			pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
 80038a8:	f042 0220 	orr.w	r2, r2, #32
			pxSocket->u.xTCP.usTimeout = 1U;
 80038ac:	f8a3 1048 	strh.w	r1, [r3, #72]	@ 0x48
			pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
 80038b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			( void ) xSendEventToIPTask( eTCPTimerEvent );
 80038b4:	f7fe fb4a 	bl	8001f4c <xSendEventToIPTask>
			xResult = 0;
 80038b8:	2000      	movs	r0, #0
	}
 80038ba:	bd08      	pop	{r3, pc}

080038bc <xTCPTimerCheck>:
	{
 80038bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038c0:	4607      	mov	r7, r0
		TickType_t xNow = xTaskGetTickCount();
 80038c2:	f005 fc23 	bl	800910c <xTaskGetTickCount>
		TickType_t xDelta = xNow - xLastTime;
 80038c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003938 <xTCPTimerCheck+0x7c>)
		while( pxIterator != pxEnd )
 80038c8:	f44f 797a 	mov.w	r9, #1000	@ 0x3e8
		const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 80038cc:	4b1b      	ldr	r3, [pc, #108]	@ (800393c <xTCPTimerCheck+0x80>)
		TickType_t xDelta = xNow - xLastTime;
 80038ce:	6816      	ldr	r6, [r2, #0]
		const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 80038d0:	68dc      	ldr	r4, [r3, #12]
		while( pxIterator != pxEnd )
 80038d2:	f103 0a08 	add.w	sl, r3, #8
		TickType_t xDelta = xNow - xLastTime;
 80038d6:	1b86      	subs	r6, r0, r6
		xLastTime = xNow;
 80038d8:	6010      	str	r0, [r2, #0]
 80038da:	2e01      	cmp	r6, #1
 80038dc:	bf38      	it	cc
 80038de:	2601      	movcc	r6, #1
		while( pxIterator != pxEnd )
 80038e0:	4554      	cmp	r4, sl
 80038e2:	d022      	beq.n	800392a <xTCPTimerCheck+0x6e>
				pxSocket->u.xTCP.usTimeout = 0U;
 80038e4:	f04f 0800 	mov.w	r8, #0
 80038e8:	e00e      	b.n	8003908 <xTCPTimerCheck+0x4c>
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 80038ea:	1b9b      	subs	r3, r3, r6
 80038ec:	f8a5 3048 	strh.w	r3, [r5, #72]	@ 0x48
			if( pxSocket->xEventBits != 0U )
 80038f0:	682b      	ldr	r3, [r5, #0]
 80038f2:	b10b      	cbz	r3, 80038f8 <xTCPTimerCheck+0x3c>
				if( xWillSleep != pdFALSE )
 80038f4:	b9e7      	cbnz	r7, 8003930 <xTCPTimerCheck+0x74>
					xShortest = ( TickType_t ) 0;
 80038f6:	46b9      	mov	r9, r7
			if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 80038f8:	f8b5 3048 	ldrh.w	r3, [r5, #72]	@ 0x48
 80038fc:	b113      	cbz	r3, 8003904 <xTCPTimerCheck+0x48>
 80038fe:	4599      	cmp	r9, r3
 8003900:	bf28      	it	cs
 8003902:	4699      	movcs	r9, r3
		while( pxIterator != pxEnd )
 8003904:	4554      	cmp	r4, sl
 8003906:	d010      	beq.n	800392a <xTCPTimerCheck+0x6e>
			pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8003908:	68e5      	ldr	r5, [r4, #12]
			pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800390a:	6864      	ldr	r4, [r4, #4]
			if( pxSocket->u.xTCP.usTimeout == 0U )
 800390c:	f8b5 3048 	ldrh.w	r3, [r5, #72]	@ 0x48
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f7      	beq.n	8003904 <xTCPTimerCheck+0x48>
			if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 8003914:	42b3      	cmp	r3, r6
 8003916:	d8e8      	bhi.n	80038ea <xTCPTimerCheck+0x2e>
				xRc = xTCPSocketCheck( pxSocket );
 8003918:	4628      	mov	r0, r5
				pxSocket->u.xTCP.usTimeout = 0U;
 800391a:	f8a5 8048 	strh.w	r8, [r5, #72]	@ 0x48
				xRc = xTCPSocketCheck( pxSocket );
 800391e:	f001 f857 	bl	80049d0 <xTCPSocketCheck>
				if( xRc < 0 )
 8003922:	2800      	cmp	r0, #0
 8003924:	dae4      	bge.n	80038f0 <xTCPTimerCheck+0x34>
		while( pxIterator != pxEnd )
 8003926:	4554      	cmp	r4, sl
 8003928:	d1ee      	bne.n	8003908 <xTCPTimerCheck+0x4c>
	}
 800392a:	4648      	mov	r0, r9
 800392c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vSocketWakeUpUser( pxSocket );
 8003930:	4628      	mov	r0, r5
 8003932:	f7ff fd1d 	bl	8003370 <vSocketWakeUpUser>
 8003936:	e7df      	b.n	80038f8 <xTCPTimerCheck+0x3c>
 8003938:	20000398 	.word	0x20000398
 800393c:	2000039c 	.word	0x2000039c

08003940 <pxTCPSocketLookup>:
		for( pxIterator = listGET_NEXT( pxEnd );
 8003940:	4811      	ldr	r0, [pc, #68]	@ (8003988 <pxTCPSocketLookup+0x48>)
	{
 8003942:	b530      	push	{r4, r5, lr}
			 pxIterator != pxEnd;
 8003944:	f100 0c08 	add.w	ip, r0, #8
		for( pxIterator = listGET_NEXT( pxEnd );
 8003948:	68c4      	ldr	r4, [r0, #12]
			 pxIterator != pxEnd;
 800394a:	4564      	cmp	r4, ip
 800394c:	d019      	beq.n	8003982 <pxTCPSocketLookup+0x42>
			if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800394e:	fa1f fe81 	uxth.w	lr, r1
		FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 8003952:	2000      	movs	r0, #0
				else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 8003954:	b29d      	uxth	r5, r3
 8003956:	e002      	b.n	800395e <pxTCPSocketLookup+0x1e>
			 pxIterator = listGET_NEXT( pxIterator ) )
 8003958:	6864      	ldr	r4, [r4, #4]
			 pxIterator != pxEnd;
 800395a:	4564      	cmp	r4, ip
 800395c:	d00e      	beq.n	800397c <pxTCPSocketLookup+0x3c>
			FreeRTOS_Socket_t * pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800395e:	68e3      	ldr	r3, [r4, #12]
			if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 8003960:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
 8003962:	4571      	cmp	r1, lr
 8003964:	d1f8      	bne.n	8003958 <pxTCPSocketLookup+0x18>
				if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 8003966:	f893 1053 	ldrb.w	r1, [r3, #83]	@ 0x53
 800396a:	2901      	cmp	r1, #1
 800396c:	d007      	beq.n	800397e <pxTCPSocketLookup+0x3e>
				else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 800396e:	8f99      	ldrh	r1, [r3, #60]	@ 0x3c
 8003970:	42a9      	cmp	r1, r5
 8003972:	d1f1      	bne.n	8003958 <pxTCPSocketLookup+0x18>
 8003974:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003976:	4291      	cmp	r1, r2
 8003978:	d1ee      	bne.n	8003958 <pxTCPSocketLookup+0x18>
			FreeRTOS_Socket_t * pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800397a:	4618      	mov	r0, r3
	}
 800397c:	bd30      	pop	{r4, r5, pc}
			FreeRTOS_Socket_t * pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800397e:	4618      	mov	r0, r3
 8003980:	e7ea      	b.n	8003958 <pxTCPSocketLookup+0x18>
		FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 8003982:	2000      	movs	r0, #0
	}
 8003984:	bd30      	pop	{r4, r5, pc}
 8003986:	bf00      	nop
 8003988:	2000039c 	.word	0x2000039c

0800398c <lTCPAddRxdata>:
	{
 800398c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003990:	461c      	mov	r4, r3
			BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 8003992:	f8d0 30cc 	ldr.w	r3, [r0, #204]	@ 0xcc
	{
 8003996:	b086      	sub	sp, #24
 8003998:	4606      	mov	r6, r0
 800399a:	460f      	mov	r7, r1
		StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 800399c:	6f45      	ldr	r5, [r0, #116]	@ 0x74
			BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d060      	beq.n	8003a64 <lTCPAddRxdata+0xd8>
		if( pxStream == NULL )
 80039a2:	2d00      	cmp	r5, #0
 80039a4:	f000 8082 	beq.w	8003aac <lTCPAddRxdata+0x120>
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 80039a8:	6929      	ldr	r1, [r5, #16]
        size_t uxHead = pxBuffer->uxHead;
 80039aa:	68ab      	ldr	r3, [r5, #8]
        size_t uxTail = pxBuffer->uxTail;
 80039ac:	6828      	ldr	r0, [r5, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 80039ae:	440b      	add	r3, r1
 80039b0:	1a1b      	subs	r3, r3, r0
        if( uxCount >= pxBuffer->LENGTH )
 80039b2:	4299      	cmp	r1, r3
            uxCount -= pxBuffer->LENGTH;
 80039b4:	bf98      	it	ls
 80039b6:	1a5b      	subls	r3, r3, r1
					if( ( bHasHandler != pdFALSE ) && ( uxStreamBufferGetSize( pxStream ) == 0U ) && ( uxOffset == 0UL ) && ( pcData != NULL ) )
 80039b8:	433b      	orrs	r3, r7
 80039ba:	d04e      	beq.n	8003a5a <lTCPAddRxdata+0xce>
 80039bc:	f04f 0a01 	mov.w	sl, #1
			const uint8_t * pucBuffer = NULL;
 80039c0:	f04f 0900 	mov.w	r9, #0
			xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 80039c4:	4623      	mov	r3, r4
 80039c6:	4639      	mov	r1, r7
 80039c8:	4628      	mov	r0, r5
 80039ca:	f000 fa0d 	bl	8003de8 <uxStreamBufferAdd>
					if( xResult != ( int32_t ) ulByteCount )
 80039ce:	42a0      	cmp	r0, r4
			xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 80039d0:	4680      	mov	r8, r0
					if( xResult != ( int32_t ) ulByteCount )
 80039d2:	d017      	beq.n	8003a04 <lTCPAddRxdata+0x78>
						FreeRTOS_debug_printf( ( "lTCPAddRxdata: at %u: %d/%u bytes (tail %u head %u space %u front %u)\n",
 80039d4:	6829      	ldr	r1, [r5, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 80039d6:	692a      	ldr	r2, [r5, #16]
 80039d8:	68a8      	ldr	r0, [r5, #8]
        size_t uxFront = pxBuffer->uxFront;
 80039da:	f8d5 c00c 	ldr.w	ip, [r5, #12]
        size_t uxTail = pxBuffer->uxTail;
 80039de:	682b      	ldr	r3, [r5, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 80039e0:	4413      	add	r3, r2
 80039e2:	3b01      	subs	r3, #1
 80039e4:	eba3 030c 	sub.w	r3, r3, ip
        if( uxCount >= pxBuffer->LENGTH )
 80039e8:	429a      	cmp	r2, r3
            uxCount -= pxBuffer->LENGTH;
 80039ea:	bf98      	it	ls
 80039ec:	1a9b      	subls	r3, r3, r2
 80039ee:	68ea      	ldr	r2, [r5, #12]
 80039f0:	9100      	str	r1, [sp, #0]
 80039f2:	4639      	mov	r1, r7
 80039f4:	9203      	str	r2, [sp, #12]
 80039f6:	4642      	mov	r2, r8
 80039f8:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80039fc:	4623      	mov	r3, r4
 80039fe:	483e      	ldr	r0, [pc, #248]	@ (8003af8 <lTCPAddRxdata+0x16c>)
 8003a00:	f009 fa84 	bl	800cf0c <lUDPLoggingPrintf>
			if( uxOffset == 0U )
 8003a04:	bb2f      	cbnz	r7, 8003a52 <lTCPAddRxdata+0xc6>
					if( bHasHandler != pdFALSE )
 8003a06:	f1ba 0f00 	cmp.w	sl, #0
 8003a0a:	d02f      	beq.n	8003a6c <lTCPAddRxdata+0xe0>
							if( pucBuffer != NULL )
 8003a0c:	f1b9 0f00 	cmp.w	r9, #0
 8003a10:	d00d      	beq.n	8003a2e <lTCPAddRxdata+0xa2>
							if( ulCount == 0UL )
 8003a12:	b1f4      	cbz	r4, 8003a52 <lTCPAddRxdata+0xc6>
							( void ) pxSocket->u.xTCP.pxHandleReceive( pxSocket, ucReadPtr, ( size_t ) ulCount );
 8003a14:	4622      	mov	r2, r4
 8003a16:	4649      	mov	r1, r9
 8003a18:	f8d6 30cc 	ldr.w	r3, [r6, #204]	@ 0xcc
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	4798      	blx	r3
							( void ) uxStreamBufferGet( pxStream, 0UL, NULL, ( size_t ) ulCount, pdFALSE );
 8003a20:	2200      	movs	r2, #0
 8003a22:	4623      	mov	r3, r4
 8003a24:	4628      	mov	r0, r5
 8003a26:	4611      	mov	r1, r2
 8003a28:	9200      	str	r2, [sp, #0]
 8003a2a:	f000 fa49 	bl	8003ec0 <uxStreamBufferGet>
        size_t uxNextTail = pxBuffer->uxTail;
 8003a2e:	682a      	ldr	r2, [r5, #0]
        *ppucData = pxBuffer->ucArray + uxNextTail;
 8003a30:	f105 0914 	add.w	r9, r5, #20
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003a34:	692c      	ldr	r4, [r5, #16]
        size_t uxHead = pxBuffer->uxHead;
 8003a36:	68ab      	ldr	r3, [r5, #8]
        *ppucData = pxBuffer->ucArray + uxNextTail;
 8003a38:	4491      	add	r9, r2
        size_t uxTail = pxBuffer->uxTail;
 8003a3a:	6829      	ldr	r1, [r5, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003a3c:	4423      	add	r3, r4
 8003a3e:	1a5b      	subs	r3, r3, r1
        if( uxCount >= pxBuffer->LENGTH )
 8003a40:	429c      	cmp	r4, r3
            uxCount -= pxBuffer->LENGTH;
 8003a42:	bf98      	it	ls
 8003a44:	1b1b      	subls	r3, r3, r4
        return FreeRTOS_min_uint32( uxSize, pxBuffer->LENGTH - uxNextTail );
 8003a46:	1aa4      	subs	r4, r4, r2
            return ( a <= b ) ? a : b;
 8003a48:	429c      	cmp	r4, r3
 8003a4a:	bf28      	it	cs
 8003a4c:	461c      	movcs	r4, r3
							if( ulCount == 0UL )
 8003a4e:	2c00      	cmp	r4, #0
 8003a50:	d1e0      	bne.n	8003a14 <lTCPAddRxdata+0x88>
	}
 8003a52:	4640      	mov	r0, r8
 8003a54:	b006      	add	sp, #24
 8003a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a5a:	4691      	mov	r9, r2
 8003a5c:	f04f 0a01 	mov.w	sl, #1
						pcData = NULL;
 8003a60:	461a      	mov	r2, r3
 8003a62:	e7af      	b.n	80039c4 <lTCPAddRxdata+0x38>
		if( pxStream == NULL )
 8003a64:	b375      	cbz	r5, 8003ac4 <lTCPAddRxdata+0x138>
			BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 8003a66:	469a      	mov	sl, r3
			const uint8_t * pucBuffer = NULL;
 8003a68:	4699      	mov	r9, r3
 8003a6a:	e7ab      	b.n	80039c4 <lTCPAddRxdata+0x38>
					if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 8003a6c:	f996 3040 	ldrsb.w	r3, [r6, #64]	@ 0x40
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	db0c      	blt.n	8003a8e <lTCPAddRxdata+0x102>
						size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 8003a74:	6f72      	ldr	r2, [r6, #116]	@ 0x74
        size_t uxFront = pxBuffer->uxFront;
 8003a76:	68d1      	ldr	r1, [r2, #12]
        size_t uxTail = pxBuffer->uxTail;
 8003a78:	6813      	ldr	r3, [r2, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8003a7a:	6912      	ldr	r2, [r2, #16]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	1a5b      	subs	r3, r3, r1
        if( uxCount >= pxBuffer->LENGTH )
 8003a82:	429a      	cmp	r2, r3
            uxCount -= pxBuffer->LENGTH;
 8003a84:	bf98      	it	ls
 8003a86:	1a9b      	subls	r3, r3, r2
						if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 8003a88:	6e72      	ldr	r2, [r6, #100]	@ 0x64
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d227      	bcs.n	8003ade <lTCPAddRxdata+0x152>
					pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 8003a8e:	6833      	ldr	r3, [r6, #0]
							if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 8003a90:	6b32      	ldr	r2, [r6, #48]	@ 0x30
					pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 8003a92:	f043 0101 	orr.w	r1, r3, #1
							if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 8003a96:	07d2      	lsls	r2, r2, #31
					pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 8003a98:	6031      	str	r1, [r6, #0]
							if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 8003a9a:	d5da      	bpl.n	8003a52 <lTCPAddRxdata+0xc6>
								pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 8003a9c:	f240 1201 	movw	r2, #257	@ 0x101
	}
 8003aa0:	4640      	mov	r0, r8
								pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	6032      	str	r2, [r6, #0]
	}
 8003aa6:	b006      	add	sp, #24
 8003aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 8003aac:	2101      	movs	r1, #1
 8003aae:	9204      	str	r2, [sp, #16]
 8003ab0:	f7fe fe28 	bl	8002704 <prvTCPCreateStream>
			if( pxStream == NULL )
 8003ab4:	9a04      	ldr	r2, [sp, #16]
 8003ab6:	4605      	mov	r5, r0
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	f47f af75 	bne.w	80039a8 <lTCPAddRxdata+0x1c>
				xResult = -1;
 8003abe:	f04f 38ff 	mov.w	r8, #4294967295
 8003ac2:	e7c6      	b.n	8003a52 <lTCPAddRxdata+0xc6>
			pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003aca:	f7fe fe1b 	bl	8002704 <prvTCPCreateStream>
			if( pxStream == NULL )
 8003ace:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ad2:	2800      	cmp	r0, #0
 8003ad4:	d0f3      	beq.n	8003abe <lTCPAddRxdata+0x132>
			const uint8_t * pucBuffer = NULL;
 8003ad6:	46a9      	mov	r9, r5
			if( pxStream == NULL )
 8003ad8:	469a      	mov	sl, r3
			pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 8003ada:	4605      	mov	r5, r0
 8003adc:	e772      	b.n	80039c4 <lTCPAddRxdata+0x38>
							pxSocket->u.xTCP.bits.bLowWater = pdTRUE;
 8003ade:	f8b6 3040 	ldrh.w	r3, [r6, #64]	@ 0x40
							pxSocket->u.xTCP.usTimeout = 1U;
 8003ae2:	2201      	movs	r2, #1
							( void ) xSendEventToIPTask( eTCPTimerEvent );
 8003ae4:	2006      	movs	r0, #6
							pxSocket->u.xTCP.bits.bLowWater = pdTRUE;
 8003ae6:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
							pxSocket->u.xTCP.usTimeout = 1U;
 8003aea:	f8a6 2048 	strh.w	r2, [r6, #72]	@ 0x48
							pxSocket->u.xTCP.bits.bLowWater = pdTRUE;
 8003aee:	f8a6 3040 	strh.w	r3, [r6, #64]	@ 0x40
							( void ) xSendEventToIPTask( eTCPTimerEvent );
 8003af2:	f7fe fa2b 	bl	8001f4c <xSendEventToIPTask>
 8003af6:	e7ca      	b.n	8003a8e <lTCPAddRxdata+0x102>
 8003af8:	0801041c 	.word	0x0801041c

08003afc <FreeRTOS_GetRemoteAddress>:
		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8003afc:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
 8003b00:	2b06      	cmp	r3, #6
 8003b02:	d107      	bne.n	8003b14 <FreeRTOS_GetRemoteAddress+0x18>
			pxAddress->sin_addr = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 8003b04:	6b82      	ldr	r2, [r0, #56]	@ 0x38
			pxAddress->sin_port = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8003b06:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
			xResult = ( BaseType_t ) sizeof( *pxAddress );
 8003b08:	2008      	movs	r0, #8
 8003b0a:	ba12      	rev	r2, r2
			pxAddress->sin_port = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8003b0c:	ba5b      	rev16	r3, r3
			pxAddress->sin_addr = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 8003b0e:	604a      	str	r2, [r1, #4]
			pxAddress->sin_port = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8003b10:	804b      	strh	r3, [r1, #2]
			xResult = ( BaseType_t ) sizeof( *pxAddress );
 8003b12:	4770      	bx	lr
			xResult = -pdFREERTOS_ERRNO_EINVAL;
 8003b14:	f06f 0015 	mvn.w	r0, #21
	}
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop

08003b1c <FreeRTOS_tx_space>:
		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8003b1c:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
 8003b20:	2b06      	cmp	r3, #6
 8003b22:	d10b      	bne.n	8003b3c <FreeRTOS_tx_space+0x20>
			if( pxSocket->u.xTCP.txStream != NULL )
 8003b24:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8003b26:	b163      	cbz	r3, 8003b42 <FreeRTOS_tx_space+0x26>
        size_t uxHead = pxBuffer->uxHead;
 8003b28:	6899      	ldr	r1, [r3, #8]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8003b2a:	691a      	ldr	r2, [r3, #16]
        size_t uxTail = pxBuffer->uxTail;
 8003b2c:	6818      	ldr	r0, [r3, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8003b2e:	4410      	add	r0, r2
 8003b30:	3801      	subs	r0, #1
 8003b32:	1a40      	subs	r0, r0, r1
        if( uxCount >= pxBuffer->LENGTH )
 8003b34:	4282      	cmp	r2, r0
 8003b36:	d803      	bhi.n	8003b40 <FreeRTOS_tx_space+0x24>
            uxCount -= pxBuffer->LENGTH;
 8003b38:	1a80      	subs	r0, r0, r2
        return uxCount;
 8003b3a:	4770      	bx	lr
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8003b3c:	f06f 0015 	mvn.w	r0, #21
	}
 8003b40:	4770      	bx	lr
				xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 8003b42:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop

08003b48 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
	void vTCPNetStat( void )
	{
 8003b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const ListItem_t * pxIterator;
		BaseType_t count = 0;
		size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
		size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();

		if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 8003b4c:	4c43      	ldr	r4, [pc, #268]	@ (8003c5c <vTCPNetStat+0x114>)
	{
 8003b4e:	b08f      	sub	sp, #60	@ 0x3c
		size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 8003b50:	f002 ff80 	bl	8006a54 <uxGetMinimumFreeNetworkBuffers>
 8003b54:	4605      	mov	r5, r0
		size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 8003b56:	f002 ff83 	bl	8006a60 <uxGetNumberOfFreeNetworkBuffers>
		if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 8003b5a:	68a3      	ldr	r3, [r4, #8]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	d005      	beq.n	8003b6c <vTCPNetStat+0x24>
		{
			FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 8003b60:	483f      	ldr	r0, [pc, #252]	@ (8003c60 <vTCPNetStat+0x118>)
							   ( UBaseType_t ) count,
							   ( UBaseType_t ) uxMinimum,
							   ( UBaseType_t ) uxCurrent,
							   ( BaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
		}
	}
 8003b62:	b00f      	add	sp, #60	@ 0x3c
 8003b64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 8003b68:	f009 b9d0 	b.w	800cf0c <lUDPLoggingPrintf>
 8003b6c:	4680      	mov	r8, r0
			FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );
 8003b6e:	483d      	ldr	r0, [pc, #244]	@ (8003c64 <vTCPNetStat+0x11c>)
 8003b70:	f009 f9cc 	bl	800cf0c <lUDPLoggingPrintf>
			for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8003b74:	f8d4 900c 	ldr.w	r9, [r4, #12]
				 pxIterator != pxEndTCP;
 8003b78:	4b3b      	ldr	r3, [pc, #236]	@ (8003c68 <vTCPNetStat+0x120>)
		BaseType_t count = 0;
 8003b7a:	2600      	movs	r6, #0
				 pxIterator != pxEndTCP;
 8003b7c:	4599      	cmp	r9, r3
 8003b7e:	d04e      	beq.n	8003c1e <vTCPNetStat+0xd6>
				FreeRTOS_printf( ( "TCP %5d %-16lxip:%5d %d/%d %-13.13s %6lu %6u%s\n",
 8003b80:	464f      	mov	r7, r9
 8003b82:	46b1      	mov	r9, r6
 8003b84:	e9cd 5808 	strd	r5, r8, [sp, #32]
 8003b88:	e029      	b.n	8003bde <vTCPNetStat+0x96>
 8003b8a:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8003b90:	3e00      	subs	r6, #0
 8003b92:	f8b4 a024 	ldrh.w	sl, [r4, #36]	@ 0x24
 8003b96:	f8b4 803c 	ldrh.w	r8, [r4, #60]	@ 0x3c
 8003b9a:	bf18      	it	ne
 8003b9c:	2601      	movne	r6, #1
 8003b9e:	f1b2 0b00 	subs.w	fp, r2, #0
 8003ba2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003ba4:	bf18      	it	ne
 8003ba6:	f04f 0b01 	movne.w	fp, #1
 8003baa:	9207      	str	r2, [sp, #28]
 8003bac:	f001 ffc6 	bl	8005b3c <FreeRTOS_GetTCPStateName>
 8003bb0:	ab0a      	add	r3, sp, #40	@ 0x28
 8003bb2:	9a07      	ldr	r2, [sp, #28]
 8003bb4:	9305      	str	r3, [sp, #20]
 8003bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8003c6c <vTCPNetStat+0x124>)
 8003bb8:	f8b4 1048 	ldrh.w	r1, [r4, #72]	@ 0x48
 8003bbc:	429d      	cmp	r5, r3
 8003bbe:	9600      	str	r6, [sp, #0]
 8003bc0:	bf28      	it	cs
 8003bc2:	461d      	movcs	r5, r3
 8003bc4:	4643      	mov	r3, r8
 8003bc6:	e9cd b001 	strd	fp, r0, [sp, #4]
 8003bca:	e9cd 5103 	strd	r5, r1, [sp, #12]
 8003bce:	4828      	ldr	r0, [pc, #160]	@ (8003c70 <vTCPNetStat+0x128>)
 8003bd0:	4651      	mov	r1, sl
 8003bd2:	f009 f99b 	bl	800cf0c <lUDPLoggingPrintf>
				 pxIterator = listGET_NEXT( pxIterator ) )
 8003bd6:	687f      	ldr	r7, [r7, #4]
				 pxIterator != pxEndTCP;
 8003bd8:	4b23      	ldr	r3, [pc, #140]	@ (8003c68 <vTCPNetStat+0x120>)
 8003bda:	429f      	cmp	r7, r3
 8003bdc:	d01c      	beq.n	8003c18 <vTCPNetStat+0xd0>
				const FreeRTOS_Socket_t * pxSocket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8003bde:	68fc      	ldr	r4, [r7, #12]
					TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8003be0:	f005 fa94 	bl	800910c <xTaskGetTickCount>
				count++;
 8003be4:	f109 0901 	add.w	r9, r9, #1
					TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8003be8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
				if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 8003bea:	f894 2053 	ldrb.w	r2, [r4, #83]	@ 0x53
					TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8003bee:	1ac5      	subs	r5, r0, r3
				char ucChildText[ 16 ] = "";
 8003bf0:	2300      	movs	r3, #0
				if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 8003bf2:	2a01      	cmp	r2, #1
				char ucChildText[ 16 ] = "";
 8003bf4:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8003bf8:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
				if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 8003bfc:	d1c5      	bne.n	8003b8a <vTCPNetStat+0x42>
					const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %u/%u",
 8003bfe:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8003c02:	2110      	movs	r1, #16
 8003c04:	f8b4 304e 	ldrh.w	r3, [r4, #78]	@ 0x4e
 8003c08:	a80a      	add	r0, sp, #40	@ 0x28
 8003c0a:	9200      	str	r2, [sp, #0]
 8003c0c:	4a19      	ldr	r2, [pc, #100]	@ (8003c74 <vTCPNetStat+0x12c>)
 8003c0e:	f00a fae7 	bl	800e1e0 <snprintf>
				FreeRTOS_printf( ( "TCP %5d %-16lxip:%5d %d/%d %-13.13s %6lu %6u%s\n",
 8003c12:	f894 2053 	ldrb.w	r2, [r4, #83]	@ 0x53
 8003c16:	e7b8      	b.n	8003b8a <vTCPNetStat+0x42>
 8003c18:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
 8003c1c:	464e      	mov	r6, r9
			for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 8003c1e:	4f16      	ldr	r7, [pc, #88]	@ (8003c78 <vTCPNetStat+0x130>)
 8003c20:	68fc      	ldr	r4, [r7, #12]
				 pxIterator != pxEndUDP;
 8003c22:	3708      	adds	r7, #8
 8003c24:	42bc      	cmp	r4, r7
 8003c26:	d00d      	beq.n	8003c44 <vTCPNetStat+0xfc>
				FreeRTOS_printf( ( "UDP Port %5u\n",
 8003c28:	f8df 9054 	ldr.w	r9, [pc, #84]	@ 8003c80 <vTCPNetStat+0x138>
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	4648      	mov	r0, r9
				count++;
 8003c30:	3601      	adds	r6, #1
				FreeRTOS_printf( ( "UDP Port %5u\n",
 8003c32:	0a19      	lsrs	r1, r3, #8
 8003c34:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8003c38:	b289      	uxth	r1, r1
 8003c3a:	f009 f967 	bl	800cf0c <lUDPLoggingPrintf>
				 pxIterator = listGET_NEXT( pxIterator ) )
 8003c3e:	6864      	ldr	r4, [r4, #4]
				 pxIterator != pxEndUDP;
 8003c40:	42bc      	cmp	r4, r7
 8003c42:	d1f3      	bne.n	8003c2c <vTCPNetStat+0xe4>
			FreeRTOS_printf( ( "FreeRTOS_netstat: %lu sockets %lu < %lu < %ld buffers free\n",
 8003c44:	2440      	movs	r4, #64	@ 0x40
 8003c46:	4643      	mov	r3, r8
 8003c48:	462a      	mov	r2, r5
 8003c4a:	4631      	mov	r1, r6
 8003c4c:	9400      	str	r4, [sp, #0]
 8003c4e:	480b      	ldr	r0, [pc, #44]	@ (8003c7c <vTCPNetStat+0x134>)
 8003c50:	f009 f95c 	bl	800cf0c <lUDPLoggingPrintf>
	}
 8003c54:	b00f      	add	sp, #60	@ 0x3c
 8003c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c5a:	bf00      	nop
 8003c5c:	2000039c 	.word	0x2000039c
 8003c60:	08010464 	.word	0x08010464
 8003c64:	08010480 	.word	0x08010480
 8003c68:	200003a4 	.word	0x200003a4
 8003c6c:	000f423f 	.word	0x000f423f
 8003c70:	080104d0 	.word	0x080104d0
 8003c74:	080104c8 	.word	0x080104c8
 8003c78:	200003b0 	.word	0x200003b0
 8003c7c:	08010510 	.word	0x08010510
 8003c80:	08010500 	.word	0x08010500

08003c84 <vSocketSelect>:
				{
					pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
				}
			#endif /* ipconfigUSE_TCP == 1 */

			for( pxIterator = listGET_NEXT( pxEnd );
 8003c84:	4a56      	ldr	r2, [pc, #344]	@ (8003de0 <vSocketSelect+0x15c>)
 8003c86:	68d3      	ldr	r3, [r2, #12]
				 pxIterator != pxEnd;
 8003c88:	3208      	adds	r2, #8
 8003c8a:	4293      	cmp	r3, r2
	{
 8003c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c90:	4604      	mov	r4, r0
		EventBits_t xGroupBits = 0;
 8003c92:	f04f 0500 	mov.w	r5, #0
				 pxIterator != pxEnd;
 8003c96:	d01c      	beq.n	8003cd2 <vSocketSelect+0x4e>
				pxEnd = listGET_END_MARKER( &xBoundUDPSocketsList );
 8003c98:	4696      	mov	lr, r2
		for( xRound = 0; xRound <= xLastRound; xRound++ )
 8003c9a:	462f      	mov	r7, r5
 8003c9c:	e002      	b.n	8003ca4 <vSocketSelect+0x20>
				 pxIterator = listGET_NEXT( pxIterator ) )
 8003c9e:	685b      	ldr	r3, [r3, #4]
				 pxIterator != pxEnd;
 8003ca0:	459e      	cmp	lr, r3
 8003ca2:	d015      	beq.n	8003cd0 <vSocketSelect+0x4c>
			{
				FreeRTOS_Socket_t * pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8003ca4:	68da      	ldr	r2, [r3, #12]

				if( pxSocket->pxSocketSet != pxSocketSet )
 8003ca6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003ca8:	42a1      	cmp	r1, r4
 8003caa:	d1f8      	bne.n	8003c9e <vSocketSelect+0x1a>
				}

				xSocketBits = 0;

				#if ( ipconfigUSE_TCP == 1 )
					if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8003cac:	f892 c027 	ldrb.w	ip, [r2, #39]	@ 0x27
								bAccepted = pdTRUE;
							}
						}

						/* Is the set owner interested in READ events? */
						if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 8003cb0:	6b10      	ldr	r0, [r2, #48]	@ 0x30
					if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8003cb2:	f1bc 0f06 	cmp.w	ip, #6
						if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 8003cb6:	f000 0101 	and.w	r1, r0, #1
					if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8003cba:	d021      	beq.n	8003d00 <vSocketSelect+0x7c>
					}
					else
				#endif /* ipconfigUSE_TCP == 1 */
				{
					/* Select events for UDP are simpler. */
					if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 8003cbc:	b121      	cbz	r1, 8003cc8 <vSocketSelect+0x44>
						( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 8003cbe:	6b91      	ldr	r1, [r2, #56]	@ 0x38
					if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 8003cc0:	3900      	subs	r1, #0
 8003cc2:	bf18      	it	ne
 8003cc4:	2101      	movne	r1, #1
				 * by FreeRTOS_FD_ISSSET() */
				pxSocket->xSocketBits = xSocketBits;

				/* The ORed value will be used to set the bits in the event
				 * group. */
				xGroupBits |= xSocketBits;
 8003cc6:	430d      	orrs	r5, r1
				 pxIterator = listGET_NEXT( pxIterator ) )
 8003cc8:	685b      	ldr	r3, [r3, #4]
				pxSocket->xSocketBits = xSocketBits;
 8003cca:	6351      	str	r1, [r2, #52]	@ 0x34
				 pxIterator != pxEnd;
 8003ccc:	459e      	cmp	lr, r3
 8003cce:	d1e9      	bne.n	8003ca4 <vSocketSelect+0x20>
		for( xRound = 0; xRound <= xLastRound; xRound++ )
 8003cd0:	b937      	cbnz	r7, 8003ce0 <vSocketSelect+0x5c>
			for( pxIterator = listGET_NEXT( pxEnd );
 8003cd2:	4a44      	ldr	r2, [pc, #272]	@ (8003de4 <vSocketSelect+0x160>)
 8003cd4:	2701      	movs	r7, #1
 8003cd6:	68d3      	ldr	r3, [r2, #12]
					pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 8003cd8:	f102 0e08 	add.w	lr, r2, #8
				 pxIterator != pxEnd;
 8003cdc:	4573      	cmp	r3, lr
 8003cde:	d1e1      	bne.n	8003ca4 <vSocketSelect+0x20>
			} /* for( pxIterator ... ) */
		}     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

		xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	6820      	ldr	r0, [r4, #0]
 8003ce4:	f004 fbb8 	bl	8008458 <xEventGroupClearBits>

		/* Now set the necessary bits. */
		xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 8003ce8:	ea20 0005 	bic.w	r0, r0, r5
				 * and cleared in FreeRTOS_select(). */
				xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
			}
		#endif /* ipconfigSUPPORT_SIGNALS */

		if( xBitsToClear != 0U )
 8003cec:	f010 010f 	ands.w	r1, r0, #15
 8003cf0:	d14e      	bne.n	8003d90 <vSocketSelect+0x10c>
		{
			( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
		}

		/* Now include eSELECT_CALL_IP to wakeup the caller. */
		( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 8003cf2:	f045 0110 	orr.w	r1, r5, #16
 8003cf6:	6820      	ldr	r0, [r4, #0]
	}
 8003cf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 8003cfc:	f004 bbcc 	b.w	8008498 <xEventGroupSetBits>
						if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 8003d00:	f892 c040 	ldrb.w	ip, [r2, #64]	@ 0x40
							if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 8003d04:	f00c 0606 	and.w	r6, ip, #6
						if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 8003d08:	b161      	cbz	r1, 8003d24 <vSocketSelect+0xa0>
							if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 8003d0a:	f892 8053 	ldrb.w	r8, [r2, #83]	@ 0x53
 8003d0e:	f1b8 0f01 	cmp.w	r8, #1
 8003d12:	d023      	beq.n	8003d5c <vSocketSelect+0xd8>
							else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8003d14:	f00c 0c0a 	and.w	ip, ip, #10
 8003d18:	f1bc 0f0a 	cmp.w	ip, #10
 8003d1c:	d002      	beq.n	8003d24 <vSocketSelect+0xa0>
							else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 8003d1e:	2e00      	cmp	r6, #0
 8003d20:	d040      	beq.n	8003da4 <vSocketSelect+0x120>
				xSocketBits = 0;
 8003d22:	2100      	movs	r1, #0
						if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8003d24:	f010 0f04 	tst.w	r0, #4
 8003d28:	d006      	beq.n	8003d38 <vSocketSelect+0xb4>
							if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSE_WAIT ) || ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSED ) )
 8003d2a:	f892 c053 	ldrb.w	ip, [r2, #83]	@ 0x53
 8003d2e:	f01c 0ff7 	tst.w	ip, #247	@ 0xf7
								xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 8003d32:	bf08      	it	eq
 8003d34:	f041 0104 	orreq.w	r1, r1, #4
						if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 8003d38:	0780      	lsls	r0, r0, #30
 8003d3a:	d5c4      	bpl.n	8003cc6 <vSocketSelect+0x42>
							if( bAccepted != 0 )
 8003d3c:	b1b6      	cbz	r6, 8003d6c <vSocketSelect+0xe8>
								if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 8003d3e:	f892 0041 	ldrb.w	r0, [r2, #65]	@ 0x41
 8003d42:	0706      	lsls	r6, r0, #28
 8003d44:	d5bf      	bpl.n	8003cc6 <vSocketSelect+0x42>
 8003d46:	f892 6053 	ldrb.w	r6, [r2, #83]	@ 0x53
 8003d4a:	2e04      	cmp	r6, #4
 8003d4c:	d9bb      	bls.n	8003cc6 <vSocketSelect+0x42>
									( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 8003d4e:	06c6      	lsls	r6, r0, #27
 8003d50:	d4b9      	bmi.n	8003cc6 <vSocketSelect+0x42>
									pxSocket->u.xTCP.bits.bConnPassed = pdTRUE;
 8003d52:	f040 0010 	orr.w	r0, r0, #16
 8003d56:	f882 0041 	strb.w	r0, [r2, #65]	@ 0x41
							if( bMatch != pdFALSE )
 8003d5a:	e015      	b.n	8003d88 <vSocketSelect+0x104>
								if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8003d5c:	6d51      	ldr	r1, [r2, #84]	@ 0x54
 8003d5e:	2900      	cmp	r1, #0
 8003d60:	d0ea      	beq.n	8003d38 <vSocketSelect+0xb4>
 8003d62:	f891 1040 	ldrb.w	r1, [r1, #64]	@ 0x40
 8003d66:	f3c1 0140 	ubfx	r1, r1, #1, #1
 8003d6a:	e7e5      	b.n	8003d38 <vSocketSelect+0xb4>
			if( pxSocket->u.xTCP.txStream != NULL )
 8003d6c:	6f90      	ldr	r0, [r2, #120]	@ 0x78
 8003d6e:	b390      	cbz	r0, 8003dd6 <vSocketSelect+0x152>
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8003d70:	6906      	ldr	r6, [r0, #16]
        size_t uxHead = pxBuffer->uxHead;
 8003d72:	f8d0 c008 	ldr.w	ip, [r0, #8]
        size_t uxTail = pxBuffer->uxTail;
 8003d76:	6800      	ldr	r0, [r0, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8003d78:	4430      	add	r0, r6
 8003d7a:	3801      	subs	r0, #1
 8003d7c:	eba0 000c 	sub.w	r0, r0, ip
        if( uxCount >= pxBuffer->LENGTH )
 8003d80:	4286      	cmp	r6, r0
 8003d82:	d926      	bls.n	8003dd2 <vSocketSelect+0x14e>
								if( FreeRTOS_tx_space( pxSocket ) > 0 )
 8003d84:	2800      	cmp	r0, #0
 8003d86:	ddda      	ble.n	8003d3e <vSocketSelect+0xba>
								xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 8003d88:	f041 0102 	orr.w	r1, r1, #2
				xGroupBits |= xSocketBits;
 8003d8c:	430d      	orrs	r5, r1
 8003d8e:	e79b      	b.n	8003cc8 <vSocketSelect+0x44>
			( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 8003d90:	6820      	ldr	r0, [r4, #0]
 8003d92:	f004 fb61 	bl	8008458 <xEventGroupClearBits>
		( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 8003d96:	f045 0110 	orr.w	r1, r5, #16
 8003d9a:	6820      	ldr	r0, [r4, #0]
	}
 8003d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 8003da0:	f004 bb7a 	b.w	8008498 <xEventGroupSetBits>
		else if( pxSocket->u.xTCP.rxStream != NULL )
 8003da4:	f8d2 c074 	ldr.w	ip, [r2, #116]	@ 0x74
 8003da8:	f1bc 0f00 	cmp.w	ip, #0
 8003dac:	d015      	beq.n	8003dda <vSocketSelect+0x156>
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003dae:	f8dc 8010 	ldr.w	r8, [ip, #16]
        size_t uxHead = pxBuffer->uxHead;
 8003db2:	f8dc 1008 	ldr.w	r1, [ip, #8]
        size_t uxTail = pxBuffer->uxTail;
 8003db6:	f8dc c000 	ldr.w	ip, [ip]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003dba:	4441      	add	r1, r8
 8003dbc:	eba1 010c 	sub.w	r1, r1, ip
        if( uxCount >= pxBuffer->LENGTH )
 8003dc0:	4588      	cmp	r8, r1
            uxCount -= pxBuffer->LENGTH;
 8003dc2:	bf98      	it	ls
 8003dc4:	eba1 0108 	subls.w	r1, r1, r8
							else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 8003dc8:	2900      	cmp	r1, #0
 8003dca:	bfd4      	ite	le
 8003dcc:	2100      	movle	r1, #0
 8003dce:	2101      	movgt	r1, #1
 8003dd0:	e7a8      	b.n	8003d24 <vSocketSelect+0xa0>
            uxCount -= pxBuffer->LENGTH;
 8003dd2:	1b80      	subs	r0, r0, r6
        return uxCount;
 8003dd4:	e7d6      	b.n	8003d84 <vSocketSelect+0x100>
				xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 8003dd6:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8003dd8:	e7d4      	b.n	8003d84 <vSocketSelect+0x100>
				xSocketBits = 0;
 8003dda:	4631      	mov	r1, r6
 8003ddc:	e7a2      	b.n	8003d24 <vSocketSelect+0xa0>
 8003dde:	bf00      	nop
 8003de0:	200003b0 	.word	0x200003b0
 8003de4:	2000039c 	.word	0x2000039c

08003de8 <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * pxBuffer,
						  size_t uxOffset,
						  const uint8_t * pucData,
						  size_t uxByteCount )
{
 8003de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8003dec:	6906      	ldr	r6, [r0, #16]
 8003dee:	4617      	mov	r7, r2
        size_t uxHead = pxBuffer->uxHead;
 8003df0:	6882      	ldr	r2, [r0, #8]
 8003df2:	4605      	mov	r5, r0
        size_t uxTail = pxBuffer->uxTail;
 8003df4:	6804      	ldr	r4, [r0, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8003df6:	eb04 0c06 	add.w	ip, r4, r6
 8003dfa:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003dfe:	ebac 0c02 	sub.w	ip, ip, r2
        if( uxCount >= pxBuffer->LENGTH )
 8003e02:	4566      	cmp	r6, ip
            uxCount -= pxBuffer->LENGTH;
 8003e04:	bf98      	it	ls
 8003e06:	ebac 0c06 	subls.w	ip, ip, r6
	size_t uxCount = uxByteCount;

	uxSpace = uxStreamBufferGetSpace( pxBuffer );

	/* If uxOffset > 0, items can be placed in front of uxHead */
	if( uxSpace > uxOffset )
 8003e0a:	4561      	cmp	r1, ip
 8003e0c:	d221      	bcs.n	8003e52 <uxStreamBufferAdd+0x6a>
	{
		uxSpace -= uxOffset;
 8003e0e:	ebac 0401 	sub.w	r4, ip, r1
 8003e12:	429c      	cmp	r4, r3
 8003e14:	bf28      	it	cs
 8003e16:	461c      	movcs	r4, r3

	/* The number of bytes that can be written is the minimum of the number of
	 * bytes requested and the number available. */
	uxCount = FreeRTOS_min_uint32( uxSpace, uxCount );

	if( uxCount != 0U )
 8003e18:	b1e4      	cbz	r4, 8003e54 <uxStreamBufferAdd+0x6c>
	{
		uxNextHead = pxBuffer->uxHead;
 8003e1a:	f8d0 8008 	ldr.w	r8, [r0, #8]

		if( uxOffset != 0U )
 8003e1e:	b1e1      	cbz	r1, 8003e5a <uxStreamBufferAdd+0x72>
		{
			/* ( uxOffset > 0 ) means: write in front if the uxHead marker */
			uxNextHead += uxOffset;
 8003e20:	4488      	add	r8, r1

			if( uxNextHead >= pxBuffer->LENGTH )
 8003e22:	45b0      	cmp	r8, r6
 8003e24:	d240      	bcs.n	8003ea8 <uxStreamBufferAdd+0xc0>
			{
				uxNextHead -= pxBuffer->LENGTH;
			}
		}

		if( pucData != NULL )
 8003e26:	b37f      	cbz	r7, 8003e88 <uxStreamBufferAdd+0xa0>
		{
			/* Calculate the number of bytes that can be added in the first
			* write - which may be less than the total number of bytes that need
			* to be added if the buffer will wrap back to the beginning. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
 8003e28:	eba6 0608 	sub.w	r6, r6, r8

			/* Write as many bytes as can be written in the first write. */
			( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 8003e2c:	f108 0014 	add.w	r0, r8, #20
 8003e30:	4639      	mov	r1, r7
 8003e32:	42a6      	cmp	r6, r4
 8003e34:	4428      	add	r0, r5
 8003e36:	bf28      	it	cs
 8003e38:	4626      	movcs	r6, r4
 8003e3a:	4632      	mov	r2, r6
 8003e3c:	f009 fdf0 	bl	800da20 <memcpy>

			/* If the number of bytes written was less than the number that
			 * could be written in the first write... */
			if( uxCount > uxFirst )
 8003e40:	42b4      	cmp	r4, r6
 8003e42:	d921      	bls.n	8003e88 <uxStreamBufferAdd+0xa0>
			{
				/* ...then write the remaining bytes to the start of the
				 * buffer. */
				( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 8003e44:	19b9      	adds	r1, r7, r6
 8003e46:	1ba2      	subs	r2, r4, r6
 8003e48:	f105 0014 	add.w	r0, r5, #20
 8003e4c:	f009 fde8 	bl	800da20 <memcpy>
			}
		}

		if( uxOffset == 0U )
 8003e50:	e01a      	b.n	8003e88 <uxStreamBufferAdd+0xa0>
 8003e52:	2400      	movs	r4, #0
			pxBuffer->uxFront = uxNextHead;
		}
	}

	return uxCount;
}
 8003e54:	4620      	mov	r0, r4
 8003e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if( pucData != NULL )
 8003e5a:	b177      	cbz	r7, 8003e7a <uxStreamBufferAdd+0x92>
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
 8003e5c:	eba6 0608 	sub.w	r6, r6, r8
			( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 8003e60:	f108 0014 	add.w	r0, r8, #20
 8003e64:	4639      	mov	r1, r7
 8003e66:	42a6      	cmp	r6, r4
 8003e68:	4428      	add	r0, r5
 8003e6a:	bf28      	it	cs
 8003e6c:	4626      	movcs	r6, r4
 8003e6e:	4632      	mov	r2, r6
 8003e70:	f009 fdd6 	bl	800da20 <memcpy>
			if( uxCount > uxFirst )
 8003e74:	42b4      	cmp	r4, r6
 8003e76:	d81c      	bhi.n	8003eb2 <uxStreamBufferAdd+0xca>
			if( uxNextHead >= pxBuffer->LENGTH )
 8003e78:	692e      	ldr	r6, [r5, #16]
			uxNextHead += uxCount;
 8003e7a:	44a0      	add	r8, r4
			if( uxNextHead >= pxBuffer->LENGTH )
 8003e7c:	4546      	cmp	r6, r8
				uxNextHead -= pxBuffer->LENGTH;
 8003e7e:	bf98      	it	ls
 8003e80:	eba8 0806 	subls.w	r8, r8, r6
			pxBuffer->uxHead = uxNextHead;
 8003e84:	f8c5 8008 	str.w	r8, [r5, #8]
		if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 8003e88:	68ea      	ldr	r2, [r5, #12]
        size_t uxTail = pxBuffer->uxTail;
 8003e8a:	682b      	ldr	r3, [r5, #0]
        if( ( ( ( uxLeft < uxTail ) ? 1U : 0U ) ^ ( ( uxRight < uxTail ) ? 1U : 0U ) ) != 0U )
 8003e8c:	4598      	cmp	r8, r3
 8003e8e:	d206      	bcs.n	8003e9e <uxStreamBufferAdd+0xb6>
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d306      	bcc.n	8003ea2 <uxStreamBufferAdd+0xba>
}
 8003e94:	4620      	mov	r0, r4
			pxBuffer->uxFront = uxNextHead;
 8003e96:	f8c5 800c 	str.w	r8, [r5, #12]
}
 8003e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d3d8      	bcc.n	8003e54 <uxStreamBufferAdd+0x6c>
            if( uxLeft <= uxRight )
 8003ea2:	4542      	cmp	r2, r8
 8003ea4:	d8d6      	bhi.n	8003e54 <uxStreamBufferAdd+0x6c>
 8003ea6:	e7f5      	b.n	8003e94 <uxStreamBufferAdd+0xac>
				uxNextHead -= pxBuffer->LENGTH;
 8003ea8:	eba8 0806 	sub.w	r8, r8, r6
		if( pucData != NULL )
 8003eac:	2f00      	cmp	r7, #0
 8003eae:	d1bb      	bne.n	8003e28 <uxStreamBufferAdd+0x40>
 8003eb0:	e7ea      	b.n	8003e88 <uxStreamBufferAdd+0xa0>
				( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 8003eb2:	19b9      	adds	r1, r7, r6
 8003eb4:	1ba2      	subs	r2, r4, r6
 8003eb6:	f105 0014 	add.w	r0, r5, #20
 8003eba:	f009 fdb1 	bl	800da20 <memcpy>
 8003ebe:	e7db      	b.n	8003e78 <uxStreamBufferAdd+0x90>

08003ec0 <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * pxBuffer,
						  size_t uxOffset,
						  uint8_t * pucData,
						  size_t uxMaxCount,
						  BaseType_t xPeek )
{
 8003ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ec4:	460e      	mov	r6, r1
        size_t uxHead = pxBuffer->uxHead;
 8003ec6:	6884      	ldr	r4, [r0, #8]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003ec8:	6901      	ldr	r1, [r0, #16]
 8003eca:	4617      	mov	r7, r2
        size_t uxTail = pxBuffer->uxTail;
 8003ecc:	6802      	ldr	r2, [r0, #0]
 8003ece:	4605      	mov	r5, r0
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003ed0:	eb04 0c01 	add.w	ip, r4, r1
 8003ed4:	ebac 0c02 	sub.w	ip, ip, r2
        if( uxCount >= pxBuffer->LENGTH )
 8003ed8:	4561      	cmp	r1, ip
            uxCount -= pxBuffer->LENGTH;
 8003eda:	bf98      	it	ls
 8003edc:	ebac 0c01 	subls.w	ip, ip, r1
	size_t uxSize, uxCount, uxFirst, uxNextTail;

	/* How much data is available? */
	uxSize = uxStreamBufferGetSize( pxBuffer );

	if( uxSize > uxOffset )
 8003ee0:	4566      	cmp	r6, ip
 8003ee2:	d229      	bcs.n	8003f38 <uxStreamBufferGet+0x78>
	{
		uxSize -= uxOffset;
 8003ee4:	ebac 0406 	sub.w	r4, ip, r6
 8003ee8:	429c      	cmp	r4, r3
 8003eea:	bf28      	it	cs
 8003eec:	461c      	movcs	r4, r3
	}

	/* Use the minimum of the wanted bytes and the available bytes. */
	uxCount = FreeRTOS_min_uint32( uxSize, uxMaxCount );

	if( uxCount > 0U )
 8003eee:	b304      	cbz	r4, 8003f32 <uxStreamBufferGet+0x72>
	{
		uxNextTail = pxBuffer->uxTail;
 8003ef0:	f8d0 9000 	ldr.w	r9, [r0]

		if( uxOffset != 0U )
 8003ef4:	b326      	cbz	r6, 8003f40 <uxStreamBufferGet+0x80>
		{
			uxNextTail += uxOffset;
 8003ef6:	44b1      	add	r9, r6

			if( uxNextTail >= pxBuffer->LENGTH )
 8003ef8:	4589      	cmp	r9, r1
 8003efa:	d324      	bcc.n	8003f46 <uxStreamBufferGet+0x86>
			{
				uxNextTail -= pxBuffer->LENGTH;
			}
		}

		if( pucData != NULL )
 8003efc:	b1cf      	cbz	r7, 8003f32 <uxStreamBufferGet+0x72>
				uxNextTail -= pxBuffer->LENGTH;
 8003efe:	eba9 0901 	sub.w	r9, r9, r1
		{
			/* Calculate the number of bytes that can be read - which may be
			 * less than the number wanted if the data wraps around to the start of
			 * the buffer. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextTail, uxCount );
 8003f02:	eba1 0809 	sub.w	r8, r1, r9

			/* Obtain the number of bytes it is possible to obtain in the first
			 * read. */
			( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 8003f06:	f109 0114 	add.w	r1, r9, #20
 8003f0a:	4638      	mov	r0, r7
 8003f0c:	45a0      	cmp	r8, r4
 8003f0e:	4429      	add	r1, r5
 8003f10:	bf28      	it	cs
 8003f12:	46a0      	movcs	r8, r4
 8003f14:	4642      	mov	r2, r8
 8003f16:	f009 fd83 	bl	800da20 <memcpy>

			/* If the total number of wanted bytes is greater than the number
			 * that could be read in the first read... */
			if( uxCount > uxFirst )
 8003f1a:	4544      	cmp	r4, r8
 8003f1c:	d816      	bhi.n	8003f4c <uxStreamBufferGet+0x8c>
				/*...then read the remaining bytes from the start of the buffer. */
				( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
			}
		}

		if( ( xPeek == pdFALSE ) && ( uxOffset == 0UL ) )
 8003f1e:	9b08      	ldr	r3, [sp, #32]
 8003f20:	431e      	orrs	r6, r3
 8003f22:	d106      	bne.n	8003f32 <uxStreamBufferGet+0x72>
		{
			/* Move the tail pointer to effectively remove the data read from
			 * the buffer. */
			uxNextTail += uxCount;
 8003f24:	eb04 0309 	add.w	r3, r4, r9

			if( uxNextTail >= pxBuffer->LENGTH )
 8003f28:	692a      	ldr	r2, [r5, #16]
 8003f2a:	429a      	cmp	r2, r3
			{
				uxNextTail -= pxBuffer->LENGTH;
 8003f2c:	bf98      	it	ls
 8003f2e:	1a9b      	subls	r3, r3, r2
			}

			pxBuffer->uxTail = uxNextTail;
 8003f30:	602b      	str	r3, [r5, #0]
		}
	}

	return uxCount;
}
 8003f32:	4620      	mov	r0, r4
 8003f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f38:	2400      	movs	r4, #0
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if( pucData != NULL )
 8003f40:	2f00      	cmp	r7, #0
 8003f42:	d1de      	bne.n	8003f02 <uxStreamBufferGet+0x42>
 8003f44:	e7eb      	b.n	8003f1e <uxStreamBufferGet+0x5e>
 8003f46:	2f00      	cmp	r7, #0
 8003f48:	d1db      	bne.n	8003f02 <uxStreamBufferGet+0x42>
 8003f4a:	e7f2      	b.n	8003f32 <uxStreamBufferGet+0x72>
				( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 8003f4c:	eb07 0008 	add.w	r0, r7, r8
 8003f50:	eba4 0208 	sub.w	r2, r4, r8
 8003f54:	f105 0114 	add.w	r1, r5, #20
 8003f58:	f009 fd62 	bl	800da20 <memcpy>
 8003f5c:	e7df      	b.n	8003f1e <uxStreamBufferGet+0x5e>
 8003f5e:	bf00      	nop

08003f60 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket: The socket whose MSS is to be set.
 */
	static void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
	{
 8003f60:	b538      	push	{r3, r4, r5, lr}
		uint32_t ulMSS = ipconfigTCP_MSS;

		if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) != 0UL )
 8003f62:	4a0d      	ldr	r2, [pc, #52]	@ (8003f98 <prvSocketSetMSS+0x38>)
	{
 8003f64:	4604      	mov	r4, r0
		if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) != 0UL )
 8003f66:	4b0d      	ldr	r3, [pc, #52]	@ (8003f9c <prvSocketSetMSS+0x3c>)
 8003f68:	2500      	movs	r5, #0
 8003f6a:	6950      	ldr	r0, [r2, #20]
 8003f6c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003f6e:	6859      	ldr	r1, [r3, #4]
 8003f70:	ba13      	rev	r3, r2
 8003f72:	4043      	eors	r3, r0
			/* Data for this peer will pass through a router, and maybe through
			 * the internet.  Limit the MSS to 1400 bytes or less. */
			ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
		}

		FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );
 8003f74:	480a      	ldr	r0, [pc, #40]	@ (8003fa0 <prvSocketSetMSS+0x40>)
		if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) != 0UL )
 8003f76:	420b      	tst	r3, r1
 8003f78:	bf0c      	ite	eq
 8003f7a:	f240 53b4 	movweq	r3, #1460	@ 0x5b4
 8003f7e:	f44f 63af 	movne.w	r3, #1400	@ 0x578
 8003f82:	f363 050f 	bfi	r5, r3, #0, #16
			ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 8003f86:	4619      	mov	r1, r3
 8003f88:	f363 451f 	bfi	r5, r3, #16, #16
		FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );
 8003f8c:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8003f8e:	f008 ffbd 	bl	800cf0c <lUDPLoggingPrintf>

		pxSocket->u.xTCP.usInitMSS = ( uint16_t ) ulMSS;
		pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
 8003f92:	f8c4 504a 	str.w	r5, [r4, #74]	@ 0x4a
	}
 8003f96:	bd38      	pop	{r3, r4, r5, pc}
 8003f98:	20000014 	.word	0x20000014
 8003f9c:	2000037c 	.word	0x2000037c
 8003fa0:	0801054c 	.word	0x0801054c

08003fa4 <prvSetSynAckOptions>:
		uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
 8003fa4:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
		pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 8003fa8:	f240 4302 	movw	r3, #1026	@ 0x402
	{
 8003fac:	b570      	push	{r4, r5, r6, lr}
		pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 8003fae:	828b      	strh	r3, [r1, #20]
		pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 8003fb0:	0a13      	lsrs	r3, r2, #8
	{
 8003fb2:	460d      	mov	r5, r1
		pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 8003fb4:	75ca      	strb	r2, [r1, #23]
		pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 8003fb6:	758b      	strb	r3, [r1, #22]
	{
 8003fb8:	4606      	mov	r6, r0
			uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 8003fba:	f8d0 10dc 	ldr.w	r1, [r0, #220]	@ 0xdc
 8003fbe:	fb02 f301 	mul.w	r3, r2, r1
			while( uxWinSize > 0xffffUL )
 8003fc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fc6:	d31b      	bcc.n	8004000 <prvSetSynAckOptions+0x5c>
			ucFactor = 0U;
 8003fc8:	2400      	movs	r4, #0
				uxWinSize >>= 1;
 8003fca:	085b      	lsrs	r3, r3, #1
				ucFactor++;
 8003fcc:	3401      	adds	r4, #1
			while( uxWinSize > 0xffffUL )
 8003fce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
				ucFactor++;
 8003fd2:	b2e4      	uxtb	r4, r4
			while( uxWinSize > 0xffffUL )
 8003fd4:	d2f9      	bcs.n	8003fca <prvSetSynAckOptions+0x26>
			FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
 8003fd6:	4623      	mov	r3, r4
 8003fd8:	480b      	ldr	r0, [pc, #44]	@ (8004008 <prvSetSynAckOptions+0x64>)
 8003fda:	f008 ff97 	bl	800cf0c <lUDPLoggingPrintf>
				pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 8003fde:	2203      	movs	r2, #3
				pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 8003fe0:	f886 40c9 	strb.w	r4, [r6, #201]	@ 0xc9
				pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 8003fe4:	2301      	movs	r3, #1
				pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 8003fe6:	f240 3001 	movw	r0, #769	@ 0x301
				pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 8003fea:	2104      	movs	r1, #4
				pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 8003fec:	76aa      	strb	r2, [r5, #26]
				pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 8003fee:	2202      	movs	r2, #2
				pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 8003ff0:	8328      	strh	r0, [r5, #24]
	}
 8003ff2:	200c      	movs	r0, #12
				pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 8003ff4:	76ec      	strb	r4, [r5, #27]
				pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 8003ff6:	772b      	strb	r3, [r5, #28]
				pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 8003ff8:	776b      	strb	r3, [r5, #29]
				pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 8003ffa:	77a9      	strb	r1, [r5, #30]
				pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 8003ffc:	77ea      	strb	r2, [r5, #31]
	}
 8003ffe:	bd70      	pop	{r4, r5, r6, pc}
			while( uxWinSize > 0xffffUL )
 8004000:	2300      	movs	r3, #0
			ucFactor = 0U;
 8004002:	461c      	mov	r4, r3
 8004004:	e7e8      	b.n	8003fd8 <prvSetSynAckOptions+0x34>
 8004006:	bf00      	nop
 8004008:	08010578 	.word	0x08010578

0800400c <prvTCPAddTxData>:
		lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 800400c:	6f82      	ldr	r2, [r0, #120]	@ 0x78
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800400e:	6913      	ldr	r3, [r2, #16]
        size_t uxHead = pxBuffer->uxHead;
 8004010:	6891      	ldr	r1, [r2, #8]
	{
 8004012:	b510      	push	{r4, lr}
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8004014:	4419      	add	r1, r3
 8004016:	4604      	mov	r4, r0
        size_t uxMid = pxBuffer->uxMid;
 8004018:	6850      	ldr	r0, [r2, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800401a:	1a09      	subs	r1, r1, r0
        if( uxCount >= pxBuffer->LENGTH )
 800401c:	428b      	cmp	r3, r1
            uxCount -= pxBuffer->LENGTH;
 800401e:	bf98      	it	ls
 8004020:	1ac9      	subls	r1, r1, r3
		if( lLength > 0 )
 8004022:	2900      	cmp	r1, #0
 8004024:	dc00      	bgt.n	8004028 <prvTCPAddTxData+0x1c>
	}
 8004026:	bd10      	pop	{r4, pc}
									  ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 8004028:	6852      	ldr	r2, [r2, #4]
			lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800402a:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 800402e:	f002 f951 	bl	80062d4 <lTCPWindowTxAdd>
			if( lCount > 0 )
 8004032:	2800      	cmp	r0, #0
 8004034:	ddf7      	ble.n	8004026 <prvTCPAddTxData+0x1a>
				vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 8004036:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
        size_t uxHead = pxBuffer->uxHead;
 8004038:	689a      	ldr	r2, [r3, #8]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800403a:	6919      	ldr	r1, [r3, #16]
        size_t uxMid = pxBuffer->uxMid;
 800403c:	685c      	ldr	r4, [r3, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800403e:	440a      	add	r2, r1
 8004040:	1b12      	subs	r2, r2, r4
        pxBuffer->uxMid += uxMoveCount;
 8004042:	685c      	ldr	r4, [r3, #4]
        if( uxCount >= pxBuffer->LENGTH )
 8004044:	4291      	cmp	r1, r2
            uxCount -= pxBuffer->LENGTH;
 8004046:	bf98      	it	ls
 8004048:	1a52      	subls	r2, r2, r1
        pxBuffer->uxMid += uxMoveCount;
 800404a:	4290      	cmp	r0, r2
 800404c:	bf94      	ite	ls
 800404e:	1824      	addls	r4, r4, r0
 8004050:	18a4      	addhi	r4, r4, r2
 8004052:	605c      	str	r4, [r3, #4]
        if( pxBuffer->uxMid >= pxBuffer->LENGTH )
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	4291      	cmp	r1, r2
 8004058:	d8e5      	bhi.n	8004026 <prvTCPAddTxData+0x1a>
            pxBuffer->uxMid -= pxBuffer->LENGTH;
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	1a52      	subs	r2, r2, r1
 800405e:	605a      	str	r2, [r3, #4]
	}
 8004060:	bd10      	pop	{r4, pc}
 8004062:	bf00      	nop

08004064 <prvTCPReturnPacket>:
	{
 8004064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004068:	4606      	mov	r6, r0
 800406a:	b08a      	sub	sp, #40	@ 0x28
 800406c:	4617      	mov	r7, r2
		if( pxNetworkBuffer == NULL )
 800406e:	2900      	cmp	r1, #0
 8004070:	f000 80b3 	beq.w	80041da <prvTCPReturnPacket+0x176>
				if( xDoRelease == pdFALSE )
 8004074:	460d      	mov	r5, r1
 8004076:	b93b      	cbnz	r3, 8004088 <prvTCPReturnPacket+0x24>
					pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8004078:	4628      	mov	r0, r5
 800407a:	69c9      	ldr	r1, [r1, #28]
 800407c:	f7fd fe7e 	bl	8001d7c <pxDuplicateNetworkBufferWithDescriptor>
					if( pxNetworkBuffer == NULL )
 8004080:	4605      	mov	r5, r0
 8004082:	2800      	cmp	r0, #0
 8004084:	f000 80b7 	beq.w	80041f6 <prvTCPReturnPacket+0x192>
			pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 8004088:	ea4f 2817 	mov.w	r8, r7, lsr #8
			pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800408c:	69ac      	ldr	r4, [r5, #24]
			pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 800408e:	ea48 2807 	orr.w	r8, r8, r7, lsl #8
 8004092:	fa1f f888 	uxth.w	r8, r8
			if( pxSocket != NULL )
 8004096:	2e00      	cmp	r6, #0
 8004098:	f000 80b3 	beq.w	8004202 <prvTCPReturnPacket+0x19e>
				if( pxSocket->u.xTCP.rxStream != NULL )
 800409c:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 80bd 	beq.w	800421e <prvTCPReturnPacket+0x1ba>
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 80040a4:	691a      	ldr	r2, [r3, #16]
        size_t uxFront = pxBuffer->uxFront;
 80040a6:	68d9      	ldr	r1, [r3, #12]
        size_t uxTail = pxBuffer->uxTail;
 80040a8:	681b      	ldr	r3, [r3, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 80040aa:	4413      	add	r3, r2
 80040ac:	3b01      	subs	r3, #1
 80040ae:	1a5b      	subs	r3, r3, r1
        if( uxCount >= pxBuffer->LENGTH )
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d800      	bhi.n	80040b6 <prvTCPReturnPacket+0x52>
            uxCount -= pxBuffer->LENGTH;
 80040b4:	1a9b      	subs	r3, r3, r2
				if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 80040b6:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80040b8:	4a5b      	ldr	r2, [pc, #364]	@ (8004228 <prvTCPReturnPacket+0x1c4>)
 80040ba:	400a      	ands	r2, r1
				ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 80040bc:	f8d6 10e8 	ldr.w	r1, [r6, #232]	@ 0xe8
				if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 80040c0:	2a00      	cmp	r2, #0
 80040c2:	f040 8088 	bne.w	80041d6 <prvTCPReturnPacket+0x172>
 80040c6:	4299      	cmp	r1, r3
 80040c8:	bf28      	it	cs
 80040ca:	4619      	movcs	r1, r3
				if( ( ulSpace < pxSocket->u.xTCP.usCurMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usCurMSS ) )
 80040cc:	f8b6 204a 	ldrh.w	r2, [r6, #74]	@ 0x4a
 80040d0:	429a      	cmp	r2, r3
 80040d2:	f200 80a6 	bhi.w	8004222 <prvTCPReturnPacket+0x1be>
 80040d6:	428a      	cmp	r2, r1
 80040d8:	f240 80a3 	bls.w	8004222 <prvTCPReturnPacket+0x1be>
						ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 80040dc:	f896 30c9 	ldrb.w	r3, [r6, #201]	@ 0xc9
				if( ulWinSize > 0xfffcUL )
 80040e0:	f64f 71fc 	movw	r1, #65532	@ 0xfffc
						ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 80040e4:	fa22 f303 	lsr.w	r3, r2, r3
				if( ulWinSize > 0xfffcUL )
 80040e8:	428b      	cmp	r3, r1
 80040ea:	bf28      	it	cs
 80040ec:	460b      	movcs	r3, r1
						pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1UL;
 80040ee:	f8d6 1110 	ldr.w	r1, [r6, #272]	@ 0x110
				pxTCPPacket->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 80040f2:	ba5b      	rev16	r3, r3
 80040f4:	8623      	strh	r3, [r4, #48]	@ 0x30
				pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 80040f6:	f8d6 30f4 	ldr.w	r3, [r6, #244]	@ 0xf4
 80040fa:	4413      	add	r3, r2
 80040fc:	6473      	str	r3, [r6, #68]	@ 0x44
				pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 80040fe:	f896 3041 	ldrb.w	r3, [r6, #65]	@ 0x41
 8004102:	f36f 0300 	bfc	r3, #0, #1
					if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 8004106:	0798      	lsls	r0, r3, #30
 8004108:	b2da      	uxtb	r2, r3
				pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 800410a:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
					if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 800410e:	d547      	bpl.n	80041a0 <prvTCPReturnPacket+0x13c>
						pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8004110:	f022 0206 	bic.w	r2, r2, #6
						pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1UL;
 8004114:	3901      	subs	r1, #1
						pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8004116:	f042 0204 	orr.w	r2, r2, #4
 800411a:	ba09      	rev	r1, r1
 800411c:	f886 2041 	strb.w	r2, [r6, #65]	@ 0x41
						pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8004120:	f8c4 1026 	str.w	r1, [r4, #38]	@ 0x26
				pxTCPPacket->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 8004124:	f8d6 30f4 	ldr.w	r3, [r6, #244]	@ 0xf4
			if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ) )
 8004128:	4a40      	ldr	r2, [pc, #256]	@ (800422c <prvTCPReturnPacket+0x1c8>)
 800412a:	ba1b      	rev	r3, r3
			pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 800412c:	f8a4 8010 	strh.w	r8, [r4, #16]
				pxTCPPacket->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 8004130:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
			pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8004134:	2380      	movs	r3, #128	@ 0x80
 8004136:	75a3      	strb	r3, [r4, #22]
			if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ) )
 8004138:	6953      	ldr	r3, [r2, #20]
 800413a:	b90b      	cbnz	r3, 8004140 <prvTCPReturnPacket+0xdc>
				ulSourceAddress = pxIPHeader->ulDestinationIPAddress;
 800413c:	f8d4 301e 	ldr.w	r3, [r4, #30]
			pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8004140:	f8d4 101a 	ldr.w	r1, [r4, #26]
			pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 8004144:	370e      	adds	r7, #14
 8004146:	483a      	ldr	r0, [pc, #232]	@ (8004230 <prvTCPReturnPacket+0x1cc>)
			vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8004148:	8c66      	ldrh	r6, [r4, #34]	@ 0x22
			pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 800414a:	f8c4 301a 	str.w	r3, [r4, #26]
			pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800414e:	f8c4 101e 	str.w	r1, [r4, #30]
			vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8004152:	8803      	ldrh	r3, [r0, #0]
 8004154:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
 8004156:	84a6      	strh	r6, [r4, #36]	@ 0x24
			pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8004158:	ba5e      	rev16	r6, r3
			vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800415a:	8461      	strh	r1, [r4, #34]	@ 0x22
			usPacketIdentifier++;
 800415c:	3301      	adds	r3, #1
			pxIPHeader->usFragmentOffset = 0U;
 800415e:	2100      	movs	r1, #0
			pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8004160:	8266      	strh	r6, [r4, #18]
			usPacketIdentifier++;
 8004162:	8003      	strh	r3, [r0, #0]
			pxIPHeader->usFragmentOffset = 0U;
 8004164:	7521      	strb	r1, [r4, #20]
 8004166:	7561      	strb	r1, [r4, #21]
			pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 8004168:	61ef      	str	r7, [r5, #28]
			( void ) memcpy( ( void * ) ( &( pxEthernetHeader->xDestinationAddress ) ),
 800416a:	f8d4 3006 	ldr.w	r3, [r4, #6]
 800416e:	6023      	str	r3, [r4, #0]
 8004170:	8963      	ldrh	r3, [r4, #10]
 8004172:	80a3      	strh	r3, [r4, #4]
			( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8004174:	6810      	ldr	r0, [r2, #0]
 8004176:	f8c4 0006 	str.w	r0, [r4, #6]
 800417a:	8893      	ldrh	r3, [r2, #4]
 800417c:	8163      	strh	r3, [r4, #10]
					if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800417e:	69eb      	ldr	r3, [r5, #28]
 8004180:	2b3b      	cmp	r3, #59	@ 0x3b
 8004182:	d906      	bls.n	8004192 <prvTCPReturnPacket+0x12e>
			( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xDoRelease );
 8004184:	2101      	movs	r1, #1
 8004186:	4628      	mov	r0, r5
 8004188:	f003 f982 	bl	8007490 <xNetworkInterfaceOutput>
	}
 800418c:	b00a      	add	sp, #40	@ 0x28
 800418e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
							pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8004192:	69aa      	ldr	r2, [r5, #24]
 8004194:	54d1      	strb	r1, [r2, r3]
						for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8004196:	3301      	adds	r3, #1
 8004198:	2b3c      	cmp	r3, #60	@ 0x3c
 800419a:	d1fa      	bne.n	8004192 <prvTCPReturnPacket+0x12e>
						pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 800419c:	61eb      	str	r3, [r5, #28]
 800419e:	e7f1      	b.n	8004184 <prvTCPReturnPacket+0x120>
					pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 80041a0:	ba0b      	rev	r3, r1
					if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 80041a2:	f894 002f 	ldrb.w	r0, [r4, #47]	@ 0x2f
					pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 80041a6:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
					if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 80041aa:	07c3      	lsls	r3, r0, #31
 80041ac:	d5ba      	bpl.n	8004124 <prvTCPReturnPacket+0xc0>
						uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + ipSIZE_OF_IPv4_HEADER ) );
 80041ae:	f1a7 0228 	sub.w	r2, r7, #40	@ 0x28
						if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 80041b2:	f8d6 3108 	ldr.w	r3, [r6, #264]	@ 0x108
 80041b6:	eb02 0c01 	add.w	ip, r2, r1
 80041ba:	459c      	cmp	ip, r3
 80041bc:	d0b2      	beq.n	8004124 <prvTCPReturnPacket+0xc0>
							pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 80041be:	f020 0001 	bic.w	r0, r0, #1
 80041c2:	f884 002f 	strb.w	r0, [r4, #47]	@ 0x2f
							FreeRTOS_debug_printf( ( "Suppress FIN for %lu + %lu < %lu\n",
 80041c6:	f8d6 0100 	ldr.w	r0, [r6, #256]	@ 0x100
 80041ca:	1a1b      	subs	r3, r3, r0
 80041cc:	1a09      	subs	r1, r1, r0
 80041ce:	4819      	ldr	r0, [pc, #100]	@ (8004234 <prvTCPReturnPacket+0x1d0>)
 80041d0:	f008 fe9c 	bl	800cf0c <lUDPLoggingPrintf>
 80041d4:	e7a6      	b.n	8004124 <prvTCPReturnPacket+0xc0>
					ulSpace = 0U;
 80041d6:	2100      	movs	r1, #0
 80041d8:	e778      	b.n	80040cc <prvTCPReturnPacket+0x68>
			pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80041da:	2346      	movs	r3, #70	@ 0x46
			pxNetworkBuffer = &xTempBuffer;
 80041dc:	ad01      	add	r5, sp, #4
			pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 80041de:	f100 0282 	add.w	r2, r0, #130	@ 0x82
			pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80041e2:	4619      	mov	r1, r3
					pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 80041e4:	4628      	mov	r0, r5
			pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80041e6:	e9cd 2307 	strd	r2, r3, [sp, #28]
					pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 80041ea:	f7fd fdc7 	bl	8001d7c <pxDuplicateNetworkBufferWithDescriptor>
					if( pxNetworkBuffer == NULL )
 80041ee:	4605      	mov	r5, r0
 80041f0:	2800      	cmp	r0, #0
 80041f2:	f47f af49 	bne.w	8004088 <prvTCPReturnPacket+0x24>
						FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 80041f6:	4810      	ldr	r0, [pc, #64]	@ (8004238 <prvTCPReturnPacket+0x1d4>)
 80041f8:	f008 fe88 	bl	800cf0c <lUDPLoggingPrintf>
	}
 80041fc:	b00a      	add	sp, #40	@ 0x28
 80041fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 8004202:	f8d4 3026 	ldr.w	r3, [r4, #38]	@ 0x26
 8004206:	f8d4 202a 	ldr.w	r2, [r4, #42]	@ 0x2a
 800420a:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
			pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800420e:	2380      	movs	r3, #128	@ 0x80
				vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 8004210:	f8c4 2026 	str.w	r2, [r4, #38]	@ 0x26
			pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 8004214:	f8a4 8010 	strh.w	r8, [r4, #16]
 8004218:	4a04      	ldr	r2, [pc, #16]	@ (800422c <prvTCPReturnPacket+0x1c8>)
			pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800421a:	75a3      	strb	r3, [r4, #22]
			if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ) )
 800421c:	e78e      	b.n	800413c <prvTCPReturnPacket+0xd8>
					ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800421e:	6ef3      	ldr	r3, [r6, #108]	@ 0x6c
 8004220:	e749      	b.n	80040b6 <prvTCPReturnPacket+0x52>
 8004222:	460a      	mov	r2, r1
 8004224:	e75a      	b.n	80040dc <prvTCPReturnPacket+0x78>
 8004226:	bf00      	nop
 8004228:	00040080 	.word	0x00040080
 800422c:	20000014 	.word	0x20000014
 8004230:	20000390 	.word	0x20000390
 8004234:	080105d4 	.word	0x080105d4
 8004238:	080105ac 	.word	0x080105ac

0800423c <prvTCPCreateWindow>:
		if( xTCPWindowLoggingLevel != 0 )
 800423c:	4b14      	ldr	r3, [pc, #80]	@ (8004290 <prvTCPCreateWindow+0x54>)
 800423e:	681b      	ldr	r3, [r3, #0]
	{
 8004240:	b530      	push	{r4, r5, lr}
 8004242:	4604      	mov	r4, r0
 8004244:	b083      	sub	sp, #12
		if( xTCPWindowLoggingLevel != 0 )
 8004246:	b9ab      	cbnz	r3, 8004274 <prvTCPCreateWindow+0x38>
		vTCPWindowCreate(
 8004248:	f8b4 504c 	ldrh.w	r5, [r4, #76]	@ 0x4c
			ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
 800424c:	f240 53b4 	movw	r3, #1460	@ 0x5b4
		vTCPWindowCreate(
 8004250:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
			ipconfigTCP_MSS * pxSocket->u.xTCP.uxRxWinSize,
 8004254:	e9d4 1237 	ldrd	r1, r2, [r4, #220]	@ 0xdc
		vTCPWindowCreate(
 8004258:	9501      	str	r5, [sp, #4]
 800425a:	f8d4 5110 	ldr.w	r5, [r4, #272]	@ 0x110
 800425e:	fb03 f202 	mul.w	r2, r3, r2
 8004262:	fb03 f101 	mul.w	r1, r3, r1
 8004266:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 800426a:	9500      	str	r5, [sp, #0]
 800426c:	f001 fe66 	bl	8005f3c <vTCPWindowCreate>
	}
 8004270:	b003      	add	sp, #12
 8004272:	bd30      	pop	{r4, r5, pc}
			FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %u Water %u <= %u <= %u\n",
 8004274:	f8d0 10dc 	ldr.w	r1, [r0, #220]	@ 0xdc
 8004278:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 800427c:	e9d4 321a 	ldrd	r3, r2, [r4, #104]	@ 0x68
 8004280:	fb00 f101 	mul.w	r1, r0, r1
 8004284:	4803      	ldr	r0, [pc, #12]	@ (8004294 <prvTCPCreateWindow+0x58>)
 8004286:	9200      	str	r2, [sp, #0]
 8004288:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800428a:	f008 fe3f 	bl	800cf0c <lUDPLoggingPrintf>
 800428e:	e7db      	b.n	8004248 <prvTCPCreateWindow+0xc>
 8004290:	200003d0 	.word	0x200003d0
 8004294:	080105f8 	.word	0x080105f8

08004298 <prvTCPNextTimeout>:
		if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 8004298:	f890 3053 	ldrb.w	r3, [r0, #83]	@ 0x53
	{
 800429c:	b530      	push	{r4, r5, lr}
		if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800429e:	2b02      	cmp	r3, #2
	{
 80042a0:	b085      	sub	sp, #20
		TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 80042a2:	f644 6520 	movw	r5, #20000	@ 0x4e20
	{
 80042a6:	4604      	mov	r4, r0
		TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 80042a8:	9503      	str	r5, [sp, #12]
		if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 80042aa:	d019      	beq.n	80042e0 <prvTCPNextTimeout+0x48>
		else if( pxSocket->u.xTCP.usTimeout == 0U )
 80042ac:	f8b0 0048 	ldrh.w	r0, [r0, #72]	@ 0x48
 80042b0:	b108      	cbz	r0, 80042b6 <prvTCPNextTimeout+0x1e>
	}
 80042b2:	b005      	add	sp, #20
 80042b4:	bd30      	pop	{r4, r5, pc}
			BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 80042b6:	aa03      	add	r2, sp, #12
 80042b8:	f8d4 10d8 	ldr.w	r1, [r4, #216]	@ 0xd8
 80042bc:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 80042c0:	f002 f8c0 	bl	8006444 <xTCPWindowTxHasData>
			if( ulDelayMs == 0U )
 80042c4:	9b03      	ldr	r3, [sp, #12]
 80042c6:	b393      	cbz	r3, 800432e <prvTCPNextTimeout+0x96>
			pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 80042c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80042cc:	fb02 f303 	mul.w	r3, r2, r3
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d237      	bcs.n	8004344 <prvTCPNextTimeout+0xac>
 80042d4:	2001      	movs	r0, #1
 80042d6:	4602      	mov	r2, r0
 80042d8:	f8a4 2048 	strh.w	r2, [r4, #72]	@ 0x48
	}
 80042dc:	b005      	add	sp, #20
 80042de:	bd30      	pop	{r4, r5, pc}
			if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 80042e0:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
				if( pxSocket->u.xTCP.ucRepCount < 3U )
 80042e4:	f890 3052 	ldrb.w	r3, [r0, #82]	@ 0x52
			if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 80042e8:	0712      	lsls	r2, r2, #28
 80042ea:	d419      	bmi.n	8004320 <prvTCPNextTimeout+0x88>
 80042ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
			FreeRTOS_debug_printf( ( "Connect[%lxip:%u]: next timeout %u: %lu ms\n",
 80042f0:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 80042f2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
					ulDelayMs = 11000UL;
 80042f4:	9003      	str	r0, [sp, #12]
			FreeRTOS_debug_printf( ( "Connect[%lxip:%u]: next timeout %u: %lu ms\n",
 80042f6:	9000      	str	r0, [sp, #0]
 80042f8:	4815      	ldr	r0, [pc, #84]	@ (8004350 <prvTCPNextTimeout+0xb8>)
 80042fa:	f008 fe07 	bl	800cf0c <lUDPLoggingPrintf>
			pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 80042fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004302:	9803      	ldr	r0, [sp, #12]
 8004304:	fb03 f000 	mul.w	r0, r3, r0
 8004308:	4298      	cmp	r0, r3
 800430a:	d315      	bcc.n	8004338 <prvTCPNextTimeout+0xa0>
 800430c:	4b11      	ldr	r3, [pc, #68]	@ (8004354 <prvTCPNextTimeout+0xbc>)
 800430e:	fba3 3000 	umull	r3, r0, r3, r0
 8004312:	f3c0 138f 	ubfx	r3, r0, #6, #16
 8004316:	4618      	mov	r0, r3
 8004318:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
	}
 800431c:	b005      	add	sp, #20
 800431e:	bd30      	pop	{r4, r5, pc}
				if( pxSocket->u.xTCP.ucRepCount < 3U )
 8004320:	2b02      	cmp	r3, #2
 8004322:	d80c      	bhi.n	800433e <prvTCPNextTimeout+0xa6>
					ulDelayMs = ( 3000UL << ( pxSocket->u.xTCP.ucRepCount - 1U ) );
 8004324:	1e5a      	subs	r2, r3, #1
 8004326:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800432a:	4090      	lsls	r0, r2
 800432c:	e7e0      	b.n	80042f0 <prvTCPNextTimeout+0x58>
				if( xResult != ( BaseType_t ) 0 )
 800432e:	2800      	cmp	r0, #0
 8004330:	d1d0      	bne.n	80042d4 <prvTCPNextTimeout+0x3c>
 8004332:	4628      	mov	r0, r5
 8004334:	462a      	mov	r2, r5
 8004336:	e7cf      	b.n	80042d8 <prvTCPNextTimeout+0x40>
 8004338:	2001      	movs	r0, #1
			pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 800433a:	4603      	mov	r3, r0
 800433c:	e7ec      	b.n	8004318 <prvTCPNextTimeout+0x80>
 800433e:	f642 20f8 	movw	r0, #11000	@ 0x2af8
 8004342:	e7d5      	b.n	80042f0 <prvTCPNextTimeout+0x58>
			pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 8004344:	fbb3 f3f2 	udiv	r3, r3, r2
 8004348:	b29a      	uxth	r2, r3
 800434a:	4610      	mov	r0, r2
 800434c:	e7c4      	b.n	80042d8 <prvTCPNextTimeout+0x40>
 800434e:	bf00      	nop
 8004350:	08010630 	.word	0x08010630
 8004354:	10624dd3 	.word	0x10624dd3

08004358 <vTCPStateChange>:
	{
 8004358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		BaseType_t bAfter = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );                    /* Is it connected now ? */
 800435c:	2908      	cmp	r1, #8
 800435e:	bf18      	it	ne
 8004360:	2904      	cmpne	r1, #4
		BaseType_t bBefore = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.ucTCPState ) ); /* Was it connected ? */
 8004362:	f890 8053 	ldrb.w	r8, [r0, #83]	@ 0x53
	{
 8004366:	b083      	sub	sp, #12
 8004368:	4604      	mov	r4, r0
		BaseType_t bAfter = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );                    /* Is it connected now ? */
 800436a:	bf8c      	ite	hi
 800436c:	2301      	movhi	r3, #1
 800436e:	2300      	movls	r3, #0
		BaseType_t bBefore = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.ucTCPState ) ); /* Was it connected ? */
 8004370:	f1b8 0f04 	cmp.w	r8, #4
	{
 8004374:	460d      	mov	r5, r1
		BaseType_t bBefore = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.ucTCPState ) ); /* Was it connected ? */
 8004376:	d93f      	bls.n	80043f8 <vTCPStateChange+0xa0>
 8004378:	f1b8 0f08 	cmp.w	r8, #8
 800437c:	d03c      	beq.n	80043f8 <vTCPStateChange+0xa0>
		BaseType_t bAfter = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );                    /* Is it connected now ? */
 800437e:	2b00      	cmp	r3, #0
 8004380:	d046      	beq.n	8004410 <vTCPStateChange+0xb8>
 8004382:	f04f 0901 	mov.w	r9, #1
		pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 8004386:	f884 5053 	strb.w	r5, [r4, #83]	@ 0x53
				pxSocket->u.xTCP.ucKeepRepCount = 0U;
 800438a:	2700      	movs	r7, #0
				pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 800438c:	f004 febe 	bl	800910c <xTaskGetTickCount>
				pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8004390:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
				pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 8004394:	6620      	str	r0, [r4, #96]	@ 0x60
				pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8004396:	f023 0306 	bic.w	r3, r3, #6
				pxSocket->u.xTCP.ucKeepRepCount = 0U;
 800439a:	f884 7058 	strb.w	r7, [r4, #88]	@ 0x58
				pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800439e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
				pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 80043a2:	f004 feb3 	bl	800910c <xTaskGetTickCount>
				if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 80043a6:	4b86      	ldr	r3, [pc, #536]	@ (80045c0 <vTCPStateChange+0x268>)
				pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 80043a8:	65e0      	str	r0, [r4, #92]	@ 0x5c
				if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	42bb      	cmp	r3, r7
 80043ae:	db6b      	blt.n	8004488 <vTCPStateChange+0x130>
 80043b0:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
 80043b2:	2917      	cmp	r1, #23
 80043b4:	d068      	beq.n	8004488 <vTCPStateChange+0x130>
				"eTIME_WAIT",
				"eUNKNOWN",
			};
			BaseType_t xIndex = ( BaseType_t ) ulState;

			if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 80043b6:	f1b8 0f0c 	cmp.w	r8, #12
				if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 80043ba:	463e      	mov	r6, r7
					FreeRTOS_debug_printf( ( "Socket %d -> %lxip:%u State %s->%s\n",
 80043bc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80043be:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
			if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 80043c0:	d85f      	bhi.n	8004482 <vTCPStateChange+0x12a>
				/* The last item is called 'eUNKNOWN' */
				xIndex = ARRAY_SIZE( pcStateNames );
				xIndex--;
			}

			return pcStateNames[ xIndex ];
 80043c2:	4880      	ldr	r0, [pc, #512]	@ (80045c4 <vTCPStateChange+0x26c>)
 80043c4:	f850 4028 	ldr.w	r4, [r0, r8, lsl #2]
			if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 80043c8:	2d0c      	cmp	r5, #12
					FreeRTOS_debug_printf( ( "Socket %d -> %lxip:%u State %s->%s\n",
 80043ca:	9400      	str	r4, [sp, #0]
			if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 80043cc:	bf28      	it	cs
 80043ce:	250c      	movcs	r5, #12
					FreeRTOS_debug_printf( ( "Socket %d -> %lxip:%u State %s->%s\n",
 80043d0:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80043d4:	9001      	str	r0, [sp, #4]
 80043d6:	487c      	ldr	r0, [pc, #496]	@ (80045c8 <vTCPStateChange+0x270>)
 80043d8:	f008 fd98 	bl	800cf0c <lUDPLoggingPrintf>
				if( xConnected != NULL )
 80043dc:	b127      	cbz	r7, 80043e8 <vTCPStateChange+0x90>
					xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
 80043de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043e2:	4649      	mov	r1, r9
 80043e4:	4638      	mov	r0, r7
 80043e6:	4798      	blx	r3
		if( xParent != NULL )
 80043e8:	2e00      	cmp	r6, #0
 80043ea:	d04d      	beq.n	8004488 <vTCPStateChange+0x130>
			vSocketWakeUpUser( xParent );
 80043ec:	4630      	mov	r0, r6
	}
 80043ee:	b003      	add	sp, #12
 80043f0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			vSocketWakeUpUser( xParent );
 80043f4:	f7fe bfbc 	b.w	8003370 <vSocketWakeUpUser>
		BaseType_t bAfter = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );                    /* Is it connected now ? */
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d148      	bne.n	800448e <vTCPStateChange+0x136>
			if( ( ( BaseType_t ) eTCPState ) == ( ( BaseType_t ) eCLOSED ) )
 80043fc:	b92d      	cbnz	r5, 800440a <vTCPStateChange+0xb2>
				if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 80043fe:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004402:	f013 0f06 	tst.w	r3, #6
 8004406:	f040 8088 	bne.w	800451a <vTCPStateChange+0x1c2>
		BaseType_t bAfter = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );                    /* Is it connected now ? */
 800440a:	f04f 0900 	mov.w	r9, #0
 800440e:	e7ba      	b.n	8004386 <vTCPStateChange+0x2e>
				pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 8004410:	6803      	ldr	r3, [r0, #0]
						if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8004412:	6b01      	ldr	r1, [r0, #48]	@ 0x30
				pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 8004414:	f043 0220 	orr.w	r2, r3, #32
						if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8004418:	074e      	lsls	r6, r1, #29
				pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 800441a:	6002      	str	r2, [r0, #0]
					if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 800441c:	f8d0 20d4 	ldr.w	r2, [r0, #212]	@ 0xd4
						if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8004420:	d463      	bmi.n	80044ea <vTCPStateChange+0x192>
					if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 8004422:	2a00      	cmp	r2, #0
 8004424:	f000 80a4 	beq.w	8004570 <vTCPStateChange+0x218>
			if( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == 0 )
 8004428:	4642      	mov	r2, r8
 800442a:	4627      	mov	r7, r4
		BaseType_t bAfter = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );                    /* Is it connected now ? */
 800442c:	f04f 0900 	mov.w	r9, #0
		switch( xStatus )
 8004430:	2a0b      	cmp	r2, #11
 8004432:	f04f 0600 	mov.w	r6, #0
 8004436:	d807      	bhi.n	8004448 <vTCPStateChange+0xf0>
 8004438:	f640 3381 	movw	r3, #2945	@ 0xb81
 800443c:	40d3      	lsrs	r3, r2
 800443e:	07da      	lsls	r2, r3, #31
 8004440:	d502      	bpl.n	8004448 <vTCPStateChange+0xf0>
				pxSocket->u.xTCP.usTimeout = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
		pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 8004448:	f884 5053 	strb.w	r5, [r4, #83]	@ 0x53
				pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 800444c:	f004 fe5e 	bl	800910c <xTaskGetTickCount>
				pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8004450:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
				pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 8004454:	6620      	str	r0, [r4, #96]	@ 0x60
				pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8004456:	f023 0306 	bic.w	r3, r3, #6
 800445a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
				pxSocket->u.xTCP.ucKeepRepCount = 0U;
 800445e:	2300      	movs	r3, #0
 8004460:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
				pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8004464:	f004 fe52 	bl	800910c <xTaskGetTickCount>
				if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8004468:	4b55      	ldr	r3, [pc, #340]	@ (80045c0 <vTCPStateChange+0x268>)
				pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 800446a:	65e0      	str	r0, [r4, #92]	@ 0x5c
				if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	dbb4      	blt.n	80043dc <vTCPStateChange+0x84>
 8004472:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
 8004474:	2917      	cmp	r1, #23
 8004476:	d0b1      	beq.n	80043dc <vTCPStateChange+0x84>
			if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 8004478:	f1b8 0f0c 	cmp.w	r8, #12
					FreeRTOS_debug_printf( ( "Socket %d -> %lxip:%u State %s->%s\n",
 800447c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800447e:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
			if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 8004480:	d99f      	bls.n	80043c2 <vTCPStateChange+0x6a>
 8004482:	4c52      	ldr	r4, [pc, #328]	@ (80045cc <vTCPStateChange+0x274>)
 8004484:	484f      	ldr	r0, [pc, #316]	@ (80045c4 <vTCPStateChange+0x26c>)
 8004486:	e79f      	b.n	80043c8 <vTCPStateChange+0x70>
	}
 8004488:	b003      	add	sp, #12
 800448a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800448e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004492:	f013 0104 	ands.w	r1, r3, #4
 8004496:	d02c      	beq.n	80044f2 <vTCPStateChange+0x19a>
					if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8004498:	0718      	lsls	r0, r3, #28
						xParent = pxSocket->u.xTCP.pxPeerSocket;
 800449a:	6d66      	ldr	r6, [r4, #84]	@ 0x54
					if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800449c:	d460      	bmi.n	8004560 <vTCPStateChange+0x208>
						configASSERT( xParent != NULL );
 800449e:	2e00      	cmp	r6, #0
 80044a0:	d073      	beq.n	800458a <vTCPStateChange+0x232>
						if( xParent->u.xTCP.pxPeerSocket == NULL )
 80044a2:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d068      	beq.n	800457a <vTCPStateChange+0x222>
						xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 80044a8:	6833      	ldr	r3, [r6, #0]
								if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 80044aa:	6b32      	ldr	r2, [r6, #48]	@ 0x30
						xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 80044ac:	f043 0104 	orr.w	r1, r3, #4
 80044b0:	6031      	str	r1, [r6, #0]
								if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 80044b2:	07d1      	lsls	r1, r2, #31
 80044b4:	d502      	bpl.n	80044bc <vTCPStateChange+0x164>
									xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 80044b6:	f443 7382 	orr.w	r3, r3, #260	@ 0x104
 80044ba:	6033      	str	r3, [r6, #0]
								if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 80044bc:	f8d6 30d4 	ldr.w	r3, [r6, #212]	@ 0xd4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d039      	beq.n	8004538 <vTCPStateChange+0x1e0>
									( xParent->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) )
 80044c4:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
								if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 80044c8:	f013 0308 	ands.w	r3, r3, #8
 80044cc:	d134      	bne.n	8004538 <vTCPStateChange+0x1e0>
					pxSocket->u.xTCP.pxPeerSocket = NULL;
 80044ce:	6563      	str	r3, [r4, #84]	@ 0x54
					pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 80044d0:	4642      	mov	r2, r8
 80044d2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80044d6:	4637      	mov	r7, r6
 80044d8:	f04f 0901 	mov.w	r9, #1
 80044dc:	f023 0306 	bic.w	r3, r3, #6
 80044e0:	f043 0302 	orr.w	r3, r3, #2
 80044e4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		switch( xStatus )
 80044e8:	e7a6      	b.n	8004438 <vTCPStateChange+0xe0>
							pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 80044ea:	f443 6384 	orr.w	r3, r3, #1056	@ 0x420
 80044ee:	6003      	str	r3, [r0, #0]
 80044f0:	e797      	b.n	8004422 <vTCPStateChange+0xca>
					pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 80044f2:	6823      	ldr	r3, [r4, #0]
							if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 80044f4:	6b26      	ldr	r6, [r4, #48]	@ 0x30
					pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 80044f6:	f043 0208 	orr.w	r2, r3, #8
					if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 80044fa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	@ 0xd4
							if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 80044fe:	f016 0602 	ands.w	r6, r6, #2
					pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 8004502:	6022      	str	r2, [r4, #0]
							if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 8004504:	d02e      	beq.n	8004564 <vTCPStateChange+0x20c>
								pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8004506:	f443 7302 	orr.w	r3, r3, #520	@ 0x208
 800450a:	6023      	str	r3, [r4, #0]
					if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 800450c:	b3b8      	cbz	r0, 800457e <vTCPStateChange+0x226>
 800450e:	4642      	mov	r2, r8
		FreeRTOS_Socket_t * xParent = NULL;
 8004510:	460e      	mov	r6, r1
					if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 8004512:	4627      	mov	r7, r4
 8004514:	f04f 0901 	mov.w	r9, #1
 8004518:	e78e      	b.n	8004438 <vTCPStateChange+0xe0>
					FreeRTOS_debug_printf( ( "vTCPStateChange: Closing socket\n" ) );
 800451a:	482d      	ldr	r0, [pc, #180]	@ (80045d0 <vTCPStateChange+0x278>)
 800451c:	f008 fcf6 	bl	800cf0c <lUDPLoggingPrintf>
					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 8004520:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004524:	071b      	lsls	r3, r3, #28
 8004526:	f53f af70 	bmi.w	800440a <vTCPStateChange+0xb2>
						FreeRTOS_debug_printf( ( "Closing a socket to avoid getting an orphan. \n" ) );
 800452a:	482a      	ldr	r0, [pc, #168]	@ (80045d4 <vTCPStateChange+0x27c>)
 800452c:	f008 fcee 	bl	800cf0c <lUDPLoggingPrintf>
						FreeRTOS_closesocket( pxSocket );
 8004530:	4620      	mov	r0, r4
 8004532:	f7fe fc6d 	bl	8002e10 <FreeRTOS_closesocket>
 8004536:	e768      	b.n	800440a <vTCPStateChange+0xb2>
					pxSocket->u.xTCP.pxPeerSocket = NULL;
 8004538:	2300      	movs	r3, #0
					if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 800453a:	4642      	mov	r2, r8
 800453c:	f04f 0901 	mov.w	r9, #1
					pxSocket->u.xTCP.pxPeerSocket = NULL;
 8004540:	6563      	str	r3, [r4, #84]	@ 0x54
					pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 8004542:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004546:	f023 0306 	bic.w	r3, r3, #6
 800454a:	f043 0302 	orr.w	r3, r3, #2
 800454e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
					if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 8004552:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8004556:	2b00      	cmp	r3, #0
 8004558:	bf14      	ite	ne
 800455a:	4627      	movne	r7, r4
 800455c:	2700      	moveq	r7, #0
 800455e:	e76b      	b.n	8004438 <vTCPStateChange+0xe0>
 8004560:	4626      	mov	r6, r4
 8004562:	e79e      	b.n	80044a2 <vTCPStateChange+0x14a>
 8004564:	b158      	cbz	r0, 800457e <vTCPStateChange+0x226>
 8004566:	4642      	mov	r2, r8
 8004568:	4627      	mov	r7, r4
 800456a:	f04f 0901 	mov.w	r9, #1
 800456e:	e763      	b.n	8004438 <vTCPStateChange+0xe0>
		BaseType_t bAfter = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );                    /* Is it connected now ? */
 8004570:	f04f 0900 	mov.w	r9, #0
			if( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == 0 )
 8004574:	4642      	mov	r2, r8
			FreeRTOS_Socket_t * xConnected = NULL;
 8004576:	464f      	mov	r7, r9
 8004578:	e75a      	b.n	8004430 <vTCPStateChange+0xd8>
							xParent->u.xTCP.pxPeerSocket = pxSocket;
 800457a:	6574      	str	r4, [r6, #84]	@ 0x54
 800457c:	e794      	b.n	80044a8 <vTCPStateChange+0x150>
		FreeRTOS_Socket_t * xParent = NULL;
 800457e:	2600      	movs	r6, #0
 8004580:	4642      	mov	r2, r8
 8004582:	f04f 0901 	mov.w	r9, #1
			FreeRTOS_Socket_t * xConnected = NULL;
 8004586:	4637      	mov	r7, r6
 8004588:	e756      	b.n	8004438 <vTCPStateChange+0xe0>
						configASSERT( xParent != NULL );
 800458a:	f240 61dd 	movw	r1, #1757	@ 0x6dd
 800458e:	4812      	ldr	r0, [pc, #72]	@ (80045d8 <vTCPStateChange+0x280>)
 8004590:	f7fc fbb2 	bl	8000cf8 <vAssertCalled>
					pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 8004594:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
					if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 8004598:	f8d4 70d4 	ldr.w	r7, [r4, #212]	@ 0xd4
					pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 800459c:	f023 0306 	bic.w	r3, r3, #6
			if( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == 0 )
 80045a0:	f894 2053 	ldrb.w	r2, [r4, #83]	@ 0x53
					pxSocket->u.xTCP.pxPeerSocket = NULL;
 80045a4:	6566      	str	r6, [r4, #84]	@ 0x54
					pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 80045a6:	f043 0302 	orr.w	r3, r3, #2
 80045aa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
					if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 80045ae:	b11f      	cbz	r7, 80045b8 <vTCPStateChange+0x260>
			if( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == 0 )
 80045b0:	4627      	mov	r7, r4
 80045b2:	f04f 0901 	mov.w	r9, #1
 80045b6:	e73b      	b.n	8004430 <vTCPStateChange+0xd8>
 80045b8:	f04f 0901 	mov.w	r9, #1
 80045bc:	e738      	b.n	8004430 <vTCPStateChange+0xd8>
 80045be:	bf00      	nop
 80045c0:	200003d0 	.word	0x200003d0
 80045c4:	08010d58 	.word	0x08010d58
 80045c8:	080106f4 	.word	0x080106f4
 80045cc:	0801065c 	.word	0x0801065c
 80045d0:	080106a0 	.word	0x080106a0
 80045d4:	080106c4 	.word	0x080106c4
 80045d8:	08010668 	.word	0x08010668

080045dc <prvTCPPrepareSend.constprop.0>:
		if( ( *ppxNetworkBuffer ) != NULL )
 80045dc:	680b      	ldr	r3, [r1, #0]
	static int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
 80045de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e2:	460e      	mov	r6, r1
 80045e4:	b087      	sub	sp, #28
 80045e6:	4604      	mov	r4, r0
		if( ( *ppxNetworkBuffer ) != NULL )
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d047      	beq.n	800467c <prvTCPPrepareSend.constprop.0+0xa0>
			pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 80045ec:	699b      	ldr	r3, [r3, #24]
		pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 80045ee:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
		pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 80045f2:	f103 0722 	add.w	r7, r3, #34	@ 0x22
		pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80045f6:	f104 08e4 	add.w	r8, r4, #228	@ 0xe4
		pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 80045fa:	f042 0210 	orr.w	r2, r2, #16
 80045fe:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		lStreamPos = 0;
 8004602:	2200      	movs	r2, #0
		if( pxSocket->u.xTCP.txStream != NULL )
 8004604:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
		lStreamPos = 0;
 8004606:	9205      	str	r2, [sp, #20]
		if( pxSocket->u.xTCP.txStream != NULL )
 8004608:	b11b      	cbz	r3, 8004612 <prvTCPPrepareSend.constprop.0+0x36>
			if( pxSocket->u.xTCP.usCurMSS > 1U )
 800460a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	@ 0x4a
 800460e:	2b01      	cmp	r3, #1
 8004610:	d815      	bhi.n	800463e <prvTCPPrepareSend.constprop.0+0x62>
		if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) )
 8004612:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 8004616:	2b05      	cmp	r3, #5
 8004618:	d042      	beq.n	80046a0 <prvTCPPrepareSend.constprop.0+0xc4>
			( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800461a:	f894 5041 	ldrb.w	r5, [r4, #65]	@ 0x41
 800461e:	f015 0503 	ands.w	r5, r5, #3
 8004622:	d008      	beq.n	8004636 <prvTCPPrepareSend.constprop.0+0x5a>
			pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 8004624:	7b7b      	ldrb	r3, [r7, #13]
			pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 8004626:	2250      	movs	r2, #80	@ 0x50
			pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 8004628:	2528      	movs	r5, #40	@ 0x28
			pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 800462a:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
			pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 800462e:	733a      	strb	r2, [r7, #12]
			pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 8004630:	f043 0310 	orr.w	r3, r3, #16
 8004634:	737b      	strb	r3, [r7, #13]
	}
 8004636:	4628      	mov	r0, r5
 8004638:	b007      	add	sp, #28
 800463a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 800463e:	aa05      	add	r2, sp, #20
 8004640:	f8d4 10d8 	ldr.w	r1, [r4, #216]	@ 0xd8
 8004644:	4640      	mov	r0, r8
 8004646:	f001 ff2f 	bl	80064a8 <ulTCPWindowTxGet>
			if( lDataLen > 0 )
 800464a:	2800      	cmp	r0, #0
				lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 800464c:	4681      	mov	r9, r0
 800464e:	4605      	mov	r5, r0
			if( lDataLen > 0 )
 8004650:	dc17      	bgt.n	8004682 <prvTCPPrepareSend.constprop.0+0xa6>
		if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) )
 8004652:	d0de      	beq.n	8004612 <prvTCPPrepareSend.constprop.0+0x36>
			( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 8004654:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8004658:	079b      	lsls	r3, r3, #30
 800465a:	d0ec      	beq.n	8004636 <prvTCPPrepareSend.constprop.0+0x5a>
			pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 800465c:	7b7b      	ldrb	r3, [r7, #13]
			pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 800465e:	2250      	movs	r2, #80	@ 0x50
			pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 8004660:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
			pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 8004664:	733a      	strb	r2, [r7, #12]
			pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 8004666:	f043 0210 	orr.w	r2, r3, #16
 800466a:	737a      	strb	r2, [r7, #13]
			lDataLen += ( int32_t ) uxIntermediateResult;
 800466c:	3528      	adds	r5, #40	@ 0x28
				pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 800466e:	f043 0318 	orr.w	r3, r3, #24
	}
 8004672:	4628      	mov	r0, r5
				pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 8004674:	737b      	strb	r3, [r7, #13]
	}
 8004676:	b007      	add	sp, #28
 8004678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800467c:	f100 0382 	add.w	r3, r0, #130	@ 0x82
 8004680:	e7b5      	b.n	80045ee <prvTCPPrepareSend.constprop.0+0x12>
		if( xBufferAllocFixedSize != pdFALSE )
 8004682:	4b8b      	ldr	r3, [pc, #556]	@ (80048b0 <prvTCPPrepareSend.constprop.0+0x2d4>)
				pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 8004684:	f8d6 a000 	ldr.w	sl, [r6]
		if( xBufferAllocFixedSize != pdFALSE )
 8004688:	6819      	ldr	r1, [r3, #0]
 800468a:	2900      	cmp	r1, #0
 800468c:	d072      	beq.n	8004774 <prvTCPPrepareSend.constprop.0+0x198>
			if( pxNetworkBuffer == NULL )
 800468e:	f1ba 0f00 	cmp.w	sl, #0
 8004692:	f000 80c4 	beq.w	800481e <prvTCPPrepareSend.constprop.0+0x242>
			uxNeeded = ipNUMERIC_CAST( size_t, ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + lDataLen;
 8004696:	f100 0236 	add.w	r2, r0, #54	@ 0x36
			pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 800469a:	f8ca 201c 	str.w	r2, [sl, #28]
				if( pxNewBuffer != NULL )
 800469e:	e08a      	b.n	80047b6 <prvTCPPrepareSend.constprop.0+0x1da>
		lDataLen = 0;
 80046a0:	2500      	movs	r5, #0
			if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 80046a2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80046a6:	0699      	lsls	r1, r3, #26
 80046a8:	d444      	bmi.n	8004734 <prvTCPPrepareSend.constprop.0+0x158>
					if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 80046aa:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d834      	bhi.n	800471c <prvTCPPrepareSend.constprop.0+0x140>
					if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 80046b2:	b145      	cbz	r5, 80046c6 <prvTCPPrepareSend.constprop.0+0xea>
			pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 80046b4:	7b7b      	ldrb	r3, [r7, #13]
 80046b6:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
			pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 80046ba:	2150      	movs	r1, #80	@ 0x50
			pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 80046bc:	f043 0210 	orr.w	r2, r3, #16
			pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 80046c0:	7339      	strb	r1, [r7, #12]
			pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 80046c2:	737a      	strb	r2, [r7, #13]
			if( lDataLen != 0L )
 80046c4:	e7d2      	b.n	800466c <prvTCPPrepareSend.constprop.0+0x90>
					if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 80046c6:	f894 5041 	ldrb.w	r5, [r4, #65]	@ 0x41
 80046ca:	07ea      	lsls	r2, r5, #31
 80046cc:	d4a7      	bmi.n	800461e <prvTCPPrepareSend.constprop.0+0x42>
						TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 80046ce:	f004 fd1d 	bl	800910c <xTaskGetTickCount>
 80046d2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
						if( pxSocket->u.xTCP.ucKeepRepCount != ( uint8_t ) 0U )
 80046d4:	f894 1058 	ldrb.w	r1, [r4, #88]	@ 0x58
						xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 80046d8:	f644 6220 	movw	r2, #20000	@ 0x4e20
						TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 80046dc:	1ac0      	subs	r0, r0, r3
						xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 80046de:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80046e2:	2900      	cmp	r1, #0
 80046e4:	bf08      	it	eq
 80046e6:	4613      	moveq	r3, r2
						if( xAge > xMax )
 80046e8:	4298      	cmp	r0, r3
 80046ea:	d996      	bls.n	800461a <prvTCPPrepareSend.constprop.0+0x3e>
							pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 80046ec:	f004 fd0e 	bl	800910c <xTaskGetTickCount>
							if( xTCPWindowLoggingLevel != 0 )
 80046f0:	4b70      	ldr	r3, [pc, #448]	@ (80048b4 <prvTCPPrepareSend.constprop.0+0x2d8>)
							pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 80046f2:	65e0      	str	r0, [r4, #92]	@ 0x5c
							if( xTCPWindowLoggingLevel != 0 )
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f040 80d2 	bne.w	80048a0 <prvTCPPrepareSend.constprop.0+0x2c4>
							pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 80046fc:	f894 5041 	ldrb.w	r5, [r4, #65]	@ 0x41
							pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 8004700:	f640 12c4 	movw	r2, #2500	@ 0x9c4
							pxSocket->u.xTCP.ucKeepRepCount++;
 8004704:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
							pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 8004708:	f045 0502 	orr.w	r5, r5, #2
							pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 800470c:	f8a4 2048 	strh.w	r2, [r4, #72]	@ 0x48
							pxSocket->u.xTCP.ucKeepRepCount++;
 8004710:	3301      	adds	r3, #1
							pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 8004712:	f884 5041 	strb.w	r5, [r4, #65]	@ 0x41
							pxSocket->u.xTCP.ucKeepRepCount++;
 8004716:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
		if( ( lDataLen > 0 ) ||
 800471a:	e780      	b.n	800461e <prvTCPPrepareSend.constprop.0+0x42>
						FreeRTOS_debug_printf( ( "keep-alive: giving up %lxip:%u\n",
 800471c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
						lDataLen = -1;
 800471e:	f04f 35ff 	mov.w	r5, #4294967295
						FreeRTOS_debug_printf( ( "keep-alive: giving up %lxip:%u\n",
 8004722:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 8004724:	4864      	ldr	r0, [pc, #400]	@ (80048b8 <prvTCPPrepareSend.constprop.0+0x2dc>)
 8004726:	f008 fbf1 	bl	800cf0c <lUDPLoggingPrintf>
						vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800472a:	2108      	movs	r1, #8
 800472c:	4620      	mov	r0, r4
 800472e:	f7ff fe13 	bl	8004358 <vTCPStateChange>
		if( ( lDataLen > 0 ) ||
 8004732:	e78f      	b.n	8004654 <prvTCPPrepareSend.constprop.0+0x78>
				( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 8004734:	4640      	mov	r0, r8
 8004736:	f001 fe7f 	bl	8006438 <xTCPWindowTxDone>
			if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800473a:	2800      	cmp	r0, #0
 800473c:	d0b5      	beq.n	80046aa <prvTCPPrepareSend.constprop.0+0xce>
				pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800473e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
				vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 8004742:	4620      	mov	r0, r4
				pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8004744:	7b7a      	ldrb	r2, [r7, #13]
				pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 8004746:	f894 1040 	ldrb.w	r1, [r4, #64]	@ 0x40
				pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800474a:	f023 0341 	bic.w	r3, r3, #65	@ 0x41
				pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 800474e:	f042 0201 	orr.w	r2, r2, #1
				pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 8004752:	f36f 1145 	bfc	r1, #5, #1
				pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8004756:	f043 0341 	orr.w	r3, r3, #65	@ 0x41
				pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 800475a:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
				vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 800475e:	2106      	movs	r1, #6
				pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8004760:	737a      	strb	r2, [r7, #13]
				pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8004762:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
				pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8004766:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 800476a:	f8c4 3108 	str.w	r3, [r4, #264]	@ 0x108
				vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 800476e:	f7ff fdf3 	bl	8004358 <vTCPStateChange>
 8004772:	e79a      	b.n	80046aa <prvTCPPrepareSend.constprop.0+0xce>
			uxNeeded = ipNUMERIC_CAST( size_t, ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + lDataLen;
 8004774:	f100 0236 	add.w	r2, r0, #54	@ 0x36
			if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 8004778:	2a46      	cmp	r2, #70	@ 0x46
 800477a:	4693      	mov	fp, r2
 800477c:	bf38      	it	cc
 800477e:	f04f 0b46 	movcc.w	fp, #70	@ 0x46
			if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 8004782:	f1ba 0f00 	cmp.w	sl, #0
 8004786:	d04c      	beq.n	8004822 <prvTCPPrepareSend.constprop.0+0x246>
 8004788:	f8da 301c 	ldr.w	r3, [sl, #28]
 800478c:	459b      	cmp	fp, r3
 800478e:	d984      	bls.n	800469a <prvTCPPrepareSend.constprop.0+0xbe>
			pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 8004790:	4658      	mov	r0, fp
 8004792:	f002 f8fd 	bl	8006990 <pxGetNetworkBufferWithDescriptor>
			if( pxReturn != NULL )
 8004796:	4603      	mov	r3, r0
 8004798:	2800      	cmp	r0, #0
 800479a:	d048      	beq.n	800482e <prvTCPPrepareSend.constprop.0+0x252>
				pxReturn->xDataLength = uxNeeded;
 800479c:	f8c3 b01c 	str.w	fp, [r3, #28]
					( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 80047a0:	6998      	ldr	r0, [r3, #24]
 80047a2:	9303      	str	r3, [sp, #12]
 80047a4:	e9da 1206 	ldrd	r1, r2, [sl, #24]
 80047a8:	f009 f93a 	bl	800da20 <memcpy>
					vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80047ac:	4650      	mov	r0, sl
 80047ae:	f002 f92b 	bl	8006a08 <vReleaseNetworkBufferAndDescriptor>
			pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 80047b2:	9b03      	ldr	r3, [sp, #12]
 80047b4:	469a      	mov	sl, r3
					*ppxNetworkBuffer = pxNewBuffer;
 80047b6:	f8c6 a000 	str.w	sl, [r6]
					uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 80047ba:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 80047bc:	9b05      	ldr	r3, [sp, #20]
 80047be:	6901      	ldr	r1, [r0, #16]
					pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 80047c0:	f8da 6018 	ldr.w	r6, [sl, #24]
 80047c4:	440b      	add	r3, r1
					uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 80047c6:	f8d0 a000 	ldr.w	sl, [r0]
					pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 80047ca:	f106 0236 	add.w	r2, r6, #54	@ 0x36
					pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 80047ce:	f106 0722 	add.w	r7, r6, #34	@ 0x22
 80047d2:	eba3 0a0a 	sub.w	sl, r3, sl
					ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 80047d6:	2301      	movs	r3, #1
        if( uxCount >= pxBuffer->LENGTH )
 80047d8:	4551      	cmp	r1, sl
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	464b      	mov	r3, r9
            uxCount -= pxBuffer->LENGTH;
 80047de:	bf98      	it	ls
 80047e0:	ebaa 0a01 	subls.w	sl, sl, r1
 80047e4:	4651      	mov	r1, sl
 80047e6:	f7ff fb6b 	bl	8003ec0 <uxStreamBufferGet>
							if( ulDataGot != ( uint32_t ) lDataLen )
 80047ea:	4581      	cmp	r9, r0
					ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 80047ec:	4683      	mov	fp, r0
							if( ulDataGot != ( uint32_t ) lDataLen )
 80047ee:	d007      	beq.n	8004800 <prvTCPPrepareSend.constprop.0+0x224>
								FreeRTOS_debug_printf( ( "uxStreamBufferGet: pos %d offs %u only %u != %d\n",
 80047f0:	4603      	mov	r3, r0
 80047f2:	4652      	mov	r2, sl
 80047f4:	9905      	ldr	r1, [sp, #20]
 80047f6:	4831      	ldr	r0, [pc, #196]	@ (80048bc <prvTCPPrepareSend.constprop.0+0x2e0>)
 80047f8:	f8cd 9000 	str.w	r9, [sp]
 80047fc:	f008 fb86 	bl	800cf0c <lUDPLoggingPrintf>
					if( ( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) )
 8004800:	f244 0340 	movw	r3, #16448	@ 0x4040
 8004804:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8004808:	4013      	ands	r3, r2
 800480a:	2b40      	cmp	r3, #64	@ 0x40
 800480c:	d012      	beq.n	8004834 <prvTCPPrepareSend.constprop.0+0x258>
		if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) )
 800480e:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 8004812:	2b05      	cmp	r3, #5
 8004814:	f43f af45 	beq.w	80046a2 <prvTCPPrepareSend.constprop.0+0xc6>
			pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 8004818:	f896 302f 	ldrb.w	r3, [r6, #47]	@ 0x2f
 800481c:	e74b      	b.n	80046b6 <prvTCPPrepareSend.constprop.0+0xda>
			uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 800481e:	f240 5bf2 	movw	fp, #1522	@ 0x5f2
			pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 8004822:	2100      	movs	r1, #0
 8004824:	4658      	mov	r0, fp
 8004826:	f002 f8b3 	bl	8006990 <pxGetNetworkBufferWithDescriptor>
			if( pxReturn != NULL )
 800482a:	4682      	mov	sl, r0
 800482c:	bb70      	cbnz	r0, 800488c <prvTCPPrepareSend.constprop.0+0x2b0>
					lDataLen = -1;
 800482e:	f04f 35ff 	mov.w	r5, #4294967295
 8004832:	e70f      	b.n	8004654 <prvTCPPrepareSend.constprop.0+0x78>
						ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 8004834:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8004836:	9905      	ldr	r1, [sp, #20]
 8004838:	6910      	ldr	r0, [r2, #16]
 800483a:	6893      	ldr	r3, [r2, #8]
 800483c:	4403      	add	r3, r0
 800483e:	1a5b      	subs	r3, r3, r1
        if( uxCount >= pxBuffer->LENGTH )
 8004840:	4298      	cmp	r0, r3
            uxCount -= pxBuffer->LENGTH;
 8004842:	bf98      	it	ls
 8004844:	1a1b      	subls	r3, r3, r0
						if( ulDistance == ulDataGot )
 8004846:	459b      	cmp	fp, r3
 8004848:	d1e1      	bne.n	800480e <prvTCPPrepareSend.constprop.0+0x232>
									size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
 800484a:	6890      	ldr	r0, [r2, #8]
									size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
 800484c:	6851      	ldr	r1, [r2, #4]
									size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
 800484e:	6813      	ldr	r3, [r2, #0]
									FreeRTOS_debug_printf( ( "CheckClose %u <= %u (%u <= %u <= %u)\n",
 8004850:	465a      	mov	r2, fp
 8004852:	e9cd 1000 	strd	r1, r0, [sp]
 8004856:	4659      	mov	r1, fp
 8004858:	4819      	ldr	r0, [pc, #100]	@ (80048c0 <prvTCPPrepareSend.constprop.0+0x2e4>)
 800485a:	f008 fb57 	bl	800cf0c <lUDPLoggingPrintf>
							pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 800485e:	f896 302f 	ldrb.w	r3, [r6, #47]	@ 0x2f
							pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 8004862:	f8d4 2110 	ldr.w	r2, [r4, #272]	@ 0x110
							pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8004866:	f043 0301 	orr.w	r3, r3, #1
							pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 800486a:	444a      	add	r2, r9
							pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 800486c:	f886 302f 	strb.w	r3, [r6, #47]	@ 0x2f
							pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 8004870:	f8c4 2108 	str.w	r2, [r4, #264]	@ 0x108
							pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8004874:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8004878:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800487c:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
		if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) )
 8004880:	f894 2053 	ldrb.w	r2, [r4, #83]	@ 0x53
 8004884:	2a05      	cmp	r2, #5
 8004886:	f47f af16 	bne.w	80046b6 <prvTCPPrepareSend.constprop.0+0xda>
 800488a:	e70a      	b.n	80046a2 <prvTCPPrepareSend.constprop.0+0xc6>
					( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800488c:	2246      	movs	r2, #70	@ 0x46
 800488e:	f104 0182 	add.w	r1, r4, #130	@ 0x82
 8004892:	f8da 0018 	ldr.w	r0, [sl, #24]
				pxReturn->xDataLength = uxNeeded;
 8004896:	f8ca b01c 	str.w	fp, [sl, #28]
					( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800489a:	f009 f8c1 	bl	800da20 <memcpy>
				if( pxNewBuffer != NULL )
 800489e:	e78a      	b.n	80047b6 <prvTCPPrepareSend.constprop.0+0x1da>
								FreeRTOS_debug_printf( ( "keep-alive: %lxip:%u count %u\n",
 80048a0:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 80048a4:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 80048a6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80048a8:	4806      	ldr	r0, [pc, #24]	@ (80048c4 <prvTCPPrepareSend.constprop.0+0x2e8>)
 80048aa:	f008 fb2f 	bl	800cf0c <lUDPLoggingPrintf>
 80048ae:	e725      	b.n	80046fc <prvTCPPrepareSend.constprop.0+0x120>
 80048b0:	08011414 	.word	0x08011414
 80048b4:	200003d0 	.word	0x200003d0
 80048b8:	08010774 	.word	0x08010774
 80048bc:	08010718 	.word	0x08010718
 80048c0:	0801074c 	.word	0x0801074c
 80048c4:	08010794 	.word	0x08010794

080048c8 <prvTCPHandleFin.isra.0>:
	static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
 80048c8:	b5f0      	push	{r4, r5, r6, r7, lr}
		if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 80048ca:	f891 302f 	ldrb.w	r3, [r1, #47]	@ 0x2f
	static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
 80048ce:	b083      	sub	sp, #12
 80048d0:	f8d1 702a 	ldr.w	r7, [r1, #42]	@ 0x2a
 80048d4:	460d      	mov	r5, r1
		if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 80048d6:	07de      	lsls	r6, r3, #31
	static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
 80048d8:	4604      	mov	r4, r0
		uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 80048da:	ba3f      	rev	r7, r7
		if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 80048dc:	d504      	bpl.n	80048e8 <prvTCPHandleFin.isra.0+0x20>
			pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 80048de:	f8d0 30f8 	ldr.w	r3, [r0, #248]	@ 0xf8
 80048e2:	3301      	adds	r3, #1
 80048e4:	f8c0 30f4 	str.w	r3, [r0, #244]	@ 0xf4
		if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 80048e8:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80048ec:	0658      	lsls	r0, r3, #25
 80048ee:	d43c      	bmi.n	800496a <prvTCPHandleFin.isra.0+0xa2>
			pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80048f0:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
			pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 80048f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
			pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80048f8:	f8c4 2108 	str.w	r2, [r4, #264]	@ 0x108
			pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 80048fc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
		if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 8004900:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8004904:	07d9      	lsls	r1, r3, #31
 8004906:	d53f      	bpl.n	8004988 <prvTCPHandleFin.isra.0+0xc0>
			if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 8004908:	f994 1041 	ldrsb.w	r1, [r4, #65]	@ 0x41
			pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 800490c:	3201      	adds	r2, #1
			if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 800490e:	2900      	cmp	r1, #0
			pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 8004910:	f8c4 2104 	str.w	r2, [r4, #260]	@ 0x104
			if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 8004914:	db10      	blt.n	8004938 <prvTCPHandleFin.isra.0+0x70>
				pxTCPHeader->ucTCPFlags = 0U;
 8004916:	2600      	movs	r6, #0
 8004918:	f885 602f 	strb.w	r6, [r5, #47]	@ 0x2f
			ucIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength;
 800491c:	f894 3120 	ldrb.w	r3, [r4, #288]	@ 0x120
		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8004920:	f8c4 2110 	str.w	r2, [r4, #272]	@ 0x110
		pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 8004924:	3314      	adds	r3, #20
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	f885 302e 	strb.w	r3, [r5, #46]	@ 0x2e
		if( xTCPWindowLoggingLevel != 0 )
 800492c:	4b26      	ldr	r3, [pc, #152]	@ (80049c8 <prvTCPHandleFin.isra.0+0x100>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	bbc3      	cbnz	r3, 80049a4 <prvTCPHandleFin.isra.0+0xdc>
	}
 8004932:	4630      	mov	r0, r6
 8004934:	b003      	add	sp, #12
 8004936:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 8004938:	f083 0302 	eor.w	r3, r3, #2
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800493c:	2108      	movs	r1, #8
 800493e:	4620      	mov	r0, r4
				if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 8004940:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	f885 302f 	strb.w	r3, [r5, #47]	@ 0x2f
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800494a:	f7ff fd05 	bl	8004358 <vTCPStateChange>
		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800494e:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
		if( pxTCPHeader->ucTCPFlags != 0U )
 8004952:	f895 602f 	ldrb.w	r6, [r5, #47]	@ 0x2f
			ucIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength;
 8004956:	f894 3120 	ldrb.w	r3, [r4, #288]	@ 0x120
		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800495a:	f8c4 2110 	str.w	r2, [r4, #272]	@ 0x110
		if( pxTCPHeader->ucTCPFlags != 0U )
 800495e:	2e00      	cmp	r6, #0
 8004960:	d0e0      	beq.n	8004924 <prvTCPHandleFin.isra.0+0x5c>
			ucIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength;
 8004962:	f103 0628 	add.w	r6, r3, #40	@ 0x28
			xSendLength = ( BaseType_t ) ucIntermediateResult;
 8004966:	b2f6      	uxtb	r6, r6
 8004968:	e7dc      	b.n	8004924 <prvTCPHandleFin.isra.0+0x5c>
			if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1UL ) )
 800496a:	f8d4 2108 	ldr.w	r2, [r4, #264]	@ 0x108
 800496e:	1c53      	adds	r3, r2, #1
 8004970:	429f      	cmp	r7, r3
 8004972:	d1c5      	bne.n	8004900 <prvTCPHandleFin.isra.0+0x38>
				pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 8004974:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8004978:	f043 0301 	orr.w	r3, r3, #1
 800497c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
		if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 8004980:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8004984:	07d9      	lsls	r1, r3, #31
 8004986:	d4bf      	bmi.n	8004908 <prvTCPHandleFin.isra.0+0x40>
			pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 8004988:	2311      	movs	r3, #17
			pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800498a:	f8c4 2104 	str.w	r2, [r4, #260]	@ 0x104
			vTCPStateChange( pxSocket, eLAST_ACK );
 800498e:	210a      	movs	r1, #10
 8004990:	4620      	mov	r0, r4
			pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 8004992:	f885 302f 	strb.w	r3, [r5, #47]	@ 0x2f
			vTCPStateChange( pxSocket, eLAST_ACK );
 8004996:	f7ff fcdf 	bl	8004358 <vTCPStateChange>
		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800499a:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
		if( pxTCPHeader->ucTCPFlags != 0U )
 800499e:	f895 602f 	ldrb.w	r6, [r5, #47]	@ 0x2f
 80049a2:	e7d8      	b.n	8004956 <prvTCPHandleFin.isra.0+0x8e>
			FreeRTOS_debug_printf( ( "TCP: send FIN+ACK (ack %lu, cur/nxt %lu/%lu) ourSeqNr %lu | Rx %lu\n",
 80049a4:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 80049a8:	1ad2      	subs	r2, r2, r3
 80049aa:	1af9      	subs	r1, r7, r3
 80049ac:	9200      	str	r2, [sp, #0]
 80049ae:	e9d4 503c 	ldrd	r5, r0, [r4, #240]	@ 0xf0
 80049b2:	1b40      	subs	r0, r0, r5
 80049b4:	9001      	str	r0, [sp, #4]
 80049b6:	f8d4 0118 	ldr.w	r0, [r4, #280]	@ 0x118
 80049ba:	1ac3      	subs	r3, r0, r3
 80049bc:	4803      	ldr	r0, [pc, #12]	@ (80049cc <prvTCPHandleFin.isra.0+0x104>)
 80049be:	f008 faa5 	bl	800cf0c <lUDPLoggingPrintf>
	}
 80049c2:	4630      	mov	r0, r6
 80049c4:	b003      	add	sp, #12
 80049c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049c8:	200003d0 	.word	0x200003d0
 80049cc:	080107b4 	.word	0x080107b4

080049d0 <xTCPSocketCheck>:
		if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 80049d0:	f890 3053 	ldrb.w	r3, [r0, #83]	@ 0x53
 80049d4:	2b04      	cmp	r3, #4
	{
 80049d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049d8:	4604      	mov	r4, r0
 80049da:	b08b      	sub	sp, #44	@ 0x2c
		if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 80049dc:	d904      	bls.n	80049e8 <xTCPSocketCheck+0x18>
 80049de:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d055      	beq.n	8004a90 <xTCPSocketCheck+0xc0>
			prvTCPAddTxData( pxSocket );
 80049e4:	f7ff fb12 	bl	800400c <prvTCPAddTxData>
				if( pxSocket->u.xTCP.pxAckMessage != NULL )
 80049e8:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80049ea:	b1d0      	cbz	r0, 8004a22 <xTCPSocketCheck+0x52>
					if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 80049ec:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80049f0:	069d      	lsls	r5, r3, #26
 80049f2:	d412      	bmi.n	8004a1a <xTCPSocketCheck+0x4a>
						if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCLOSED )
 80049f4:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d150      	bne.n	8004a9e <xTCPSocketCheck+0xce>
						if( prvTCPNextTimeout( pxSocket ) > 1U )
 80049fc:	4620      	mov	r0, r4
 80049fe:	f7ff fc4b 	bl	8004298 <prvTCPNextTimeout>
 8004a02:	2801      	cmp	r0, #1
					if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8004a04:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
						if( prvTCPNextTimeout( pxSocket ) > 1U )
 8004a06:	d907      	bls.n	8004a18 <xTCPSocketCheck+0x48>
					if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8004a08:	b118      	cbz	r0, 8004a12 <xTCPSocketCheck+0x42>
						vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8004a0a:	f001 fffd 	bl	8006a08 <vReleaseNetworkBufferAndDescriptor>
						pxSocket->u.xTCP.pxAckMessage = NULL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	67e3      	str	r3, [r4, #124]	@ 0x7c
		BaseType_t xResult = 0;
 8004a12:	2000      	movs	r0, #0
	}
 8004a14:	b00b      	add	sp, #44	@ 0x2c
 8004a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8004a18:	b118      	cbz	r0, 8004a22 <xTCPSocketCheck+0x52>
						vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8004a1a:	f001 fff5 	bl	8006a08 <vReleaseNetworkBufferAndDescriptor>
						pxSocket->u.xTCP.pxAckMessage = NULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	67e3      	str	r3, [r4, #124]	@ 0x7c
			if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) ||
 8004a22:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d85c      	bhi.n	8004ae4 <xTCPSocketCheck+0x114>
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d05c      	beq.n	8004ae8 <xTCPSocketCheck+0x118>
			( void ) prvTCPNextTimeout( pxSocket );
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f7ff fc32 	bl	8004298 <prvTCPNextTimeout>
			eIPTCPState_t eState = ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState );
 8004a34:	f894 2053 	ldrb.w	r2, [r4, #83]	@ 0x53
			switch( eState )
 8004a38:	2a08      	cmp	r2, #8
 8004a3a:	d804      	bhi.n	8004a46 <xTCPSocketCheck+0x76>
 8004a3c:	f240 1323 	movw	r3, #291	@ 0x123
 8004a40:	40d3      	lsrs	r3, r2
 8004a42:	07d8      	lsls	r0, r3, #31
 8004a44:	d4e5      	bmi.n	8004a12 <xTCPSocketCheck+0x42>
				TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 8004a46:	f004 fb61 	bl	800910c <xTaskGetTickCount>
 8004a4a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
				if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 8004a4c:	f247 5330 	movw	r3, #30000	@ 0x7530
				TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 8004a50:	1a80      	subs	r0, r0, r2
				if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 8004a52:	4298      	cmp	r0, r3
 8004a54:	d943      	bls.n	8004ade <xTCPSocketCheck+0x10e>
			if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 8004a56:	f894 1053 	ldrb.w	r1, [r4, #83]	@ 0x53
			return pcStateNames[ xIndex ];
 8004a5a:	4886      	ldr	r0, [pc, #536]	@ (8004c74 <xTCPSocketCheck+0x2a4>)
			if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 8004a5c:	290c      	cmp	r1, #12
							FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %lxip:%u status %s\n",
 8004a5e:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8004a60:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
			if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 8004a62:	bf28      	it	cs
 8004a64:	210c      	movcs	r1, #12
							FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %lxip:%u status %s\n",
 8004a66:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8004a6a:	4883      	ldr	r0, [pc, #524]	@ (8004c78 <xTCPSocketCheck+0x2a8>)
 8004a6c:	9100      	str	r1, [sp, #0]
 8004a6e:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
 8004a70:	f008 fa4c 	bl	800cf0c <lUDPLoggingPrintf>
					vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8004a74:	2108      	movs	r1, #8
 8004a76:	4620      	mov	r0, r4
 8004a78:	f7ff fc6e 	bl	8004358 <vTCPStateChange>
					if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8004a7c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004a80:	0759      	lsls	r1, r3, #29
 8004a82:	d52c      	bpl.n	8004ade <xTCPSocketCheck+0x10e>
						if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 8004a84:	071a      	lsls	r2, r3, #28
 8004a86:	f140 80f1 	bpl.w	8004c6c <xTCPSocketCheck+0x29c>
						xResult = -1;
 8004a8a:	f04f 30ff 	mov.w	r0, #4294967295
		return xResult;
 8004a8e:	e027      	b.n	8004ae0 <xTCPSocketCheck+0x110>
				if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8004a90:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8004a92:	2800      	cmp	r0, #0
 8004a94:	d061      	beq.n	8004b5a <xTCPSocketCheck+0x18a>
					if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 8004a96:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004a9a:	069b      	lsls	r3, r3, #26
 8004a9c:	d4bd      	bmi.n	8004a1a <xTCPSocketCheck+0x4a>
							if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 8004a9e:	4b77      	ldr	r3, [pc, #476]	@ (8004c7c <xTCPSocketCheck+0x2ac>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	dd12      	ble.n	8004acc <xTCPSocketCheck+0xfc>
 8004aa6:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
 8004aa8:	2917      	cmp	r1, #23
 8004aaa:	d00f      	beq.n	8004acc <xTCPSocketCheck+0xfc>
								FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %lu SEQ %lu (len %u)\n",
 8004aac:	f8d4 0110 	ldr.w	r0, [r4, #272]	@ 0x110
 8004ab0:	e9d4 323c 	ldrd	r3, r2, [r4, #240]	@ 0xf0
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2228      	movs	r2, #40	@ 0x28
 8004ab8:	9201      	str	r2, [sp, #4]
 8004aba:	f8d4 2100 	ldr.w	r2, [r4, #256]	@ 0x100
 8004abe:	1a80      	subs	r0, r0, r2
 8004ac0:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 8004ac2:	9000      	str	r0, [sp, #0]
 8004ac4:	486e      	ldr	r0, [pc, #440]	@ (8004c80 <xTCPSocketCheck+0x2b0>)
 8004ac6:	f008 fa21 	bl	800cf0c <lUDPLoggingPrintf>
 8004aca:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
							prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER, ipconfigZERO_COPY_TX_DRIVER );
 8004acc:	2301      	movs	r3, #1
 8004ace:	4601      	mov	r1, r0
 8004ad0:	2228      	movs	r2, #40	@ 0x28
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f7ff fac6 	bl	8004064 <prvTCPReturnPacket>
									pxSocket->u.xTCP.pxAckMessage = NULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8004adc:	e78e      	b.n	80049fc <xTCPSocketCheck+0x2c>
					xResult = pdTRUE;
 8004ade:	2001      	movs	r0, #1
	}
 8004ae0:	b00b      	add	sp, #44	@ 0x2c
 8004ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCONNECT_SYN )
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d138      	bne.n	8004b5a <xTCPSocketCheck+0x18a>
			if( pxSocket->u.xTCP.ucRepCount >= 3U )
 8004ae8:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	f200 80b3 	bhi.w	8004c58 <xTCPSocketCheck+0x288>
			else if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) || ( prvTCPPrepareConnect( pxSocket ) == pdTRUE ) )
 8004af2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8004af6:	f013 0508 	ands.w	r5, r3, #8
 8004afa:	f040 8096 	bne.w	8004c2a <xTCPSocketCheck+0x25a>
				( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8004afe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
		eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 8004b00:	a807      	add	r0, sp, #28
 8004b02:	a908      	add	r1, sp, #32
				( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8004b04:	9508      	str	r5, [sp, #32]
 8004b06:	ba1b      	rev	r3, r3
 8004b08:	f8ad 5024 	strh.w	r5, [sp, #36]	@ 0x24
		ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 8004b0c:	9307      	str	r3, [sp, #28]
		eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 8004b0e:	f7fc fcd1 	bl	80014b4 <eARPGetCacheEntry>
		switch( eReturned )
 8004b12:	2801      	cmp	r0, #1
		eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 8004b14:	4603      	mov	r3, r0
		switch( eReturned )
 8004b16:	d03a      	beq.n	8004b8e <xTCPSocketCheck+0x1be>
				pxSocket->u.xTCP.ucRepCount++;
 8004b18:	f894 1052 	ldrb.w	r1, [r4, #82]	@ 0x52
				FreeRTOS_debug_printf( ( "ARP for %lxip (using %lxip): rc=%d %02X:%02X:%02X %02X:%02X:%02X\n",
 8004b1c:	f89d 0025 	ldrb.w	r0, [sp, #37]	@ 0x25
				pxSocket->u.xTCP.ucRepCount++;
 8004b20:	3101      	adds	r1, #1
 8004b22:	9a07      	ldr	r2, [sp, #28]
				FreeRTOS_debug_printf( ( "ARP for %lxip (using %lxip): rc=%d %02X:%02X:%02X %02X:%02X:%02X\n",
 8004b24:	9005      	str	r0, [sp, #20]
 8004b26:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8004b2a:	ba12      	rev	r2, r2
				pxSocket->u.xTCP.ucRepCount++;
 8004b2c:	f884 1052 	strb.w	r1, [r4, #82]	@ 0x52
				FreeRTOS_debug_printf( ( "ARP for %lxip (using %lxip): rc=%d %02X:%02X:%02X %02X:%02X:%02X\n",
 8004b30:	f89d 1022 	ldrb.w	r1, [sp, #34]	@ 0x22
 8004b34:	9004      	str	r0, [sp, #16]
 8004b36:	f89d 0023 	ldrb.w	r0, [sp, #35]	@ 0x23
 8004b3a:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8004b3e:	f89d 0021 	ldrb.w	r0, [sp, #33]	@ 0x21
 8004b42:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8004b46:	e9cd 1000 	strd	r1, r0, [sp]
 8004b4a:	484e      	ldr	r0, [pc, #312]	@ (8004c84 <xTCPSocketCheck+0x2b4>)
 8004b4c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004b4e:	f008 f9dd 	bl	800cf0c <lUDPLoggingPrintf>
				FreeRTOS_OutputARPRequest( ulRemoteIP );
 8004b52:	9807      	ldr	r0, [sp, #28]
 8004b54:	f7fc fd68 	bl	8001628 <FreeRTOS_OutputARPRequest>
		return xReturn;
 8004b58:	e769      	b.n	8004a2e <xTCPSocketCheck+0x5e>
			pxNetworkBuffer = NULL;
 8004b5a:	2600      	movs	r6, #0
 8004b5c:	2508      	movs	r5, #8
 8004b5e:	9608      	str	r6, [sp, #32]
			xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8004b60:	a908      	add	r1, sp, #32
 8004b62:	4620      	mov	r0, r4
 8004b64:	f7ff fd3a 	bl	80045dc <prvTCPPrepareSend.constprop.0>
			if( xSendLength <= 0 )
 8004b68:	1e02      	subs	r2, r0, #0
			prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8004b6a:	f04f 0301 	mov.w	r3, #1
			if( xSendLength <= 0 )
 8004b6e:	dd07      	ble.n	8004b80 <xTCPSocketCheck+0x1b0>
			prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8004b70:	9908      	ldr	r1, [sp, #32]
 8004b72:	4620      	mov	r0, r4
 8004b74:	f7ff fa76 	bl	8004064 <prvTCPReturnPacket>
		for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8004b78:	3d01      	subs	r5, #1
					*ppxNetworkBuffer = NULL;
 8004b7a:	9608      	str	r6, [sp, #32]
		for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8004b7c:	d1f0      	bne.n	8004b60 <xTCPSocketCheck+0x190>
 8004b7e:	e756      	b.n	8004a2e <xTCPSocketCheck+0x5e>
			prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8004b80:	9808      	ldr	r0, [sp, #32]
			if( pxNetworkBuffer != NULL )
 8004b82:	2800      	cmp	r0, #0
 8004b84:	f43f af53 	beq.w	8004a2e <xTCPSocketCheck+0x5e>
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8004b88:	f001 ff3e 	bl	8006a08 <vReleaseNetworkBufferAndDescriptor>
 8004b8c:	e74f      	b.n	8004a2e <xTCPSocketCheck+0x5e>
			ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
 8004b8e:	4f3e      	ldr	r7, [pc, #248]	@ (8004c88 <xTCPSocketCheck+0x2b8>)
 8004b90:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8004b92:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004b94:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
 8004b96:	6978      	ldr	r0, [r7, #20]
 8004b98:	f7fc f8d2 	bl	8000d40 <ulApplicationGetNextSequenceNumber>
			if( ulInitialSequenceNumber == 0UL )
 8004b9c:	4606      	mov	r6, r0
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	f43f af45 	beq.w	8004a2e <xTCPSocketCheck+0x5e>
			pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8004ba4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
			( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8004ba8:	2246      	movs	r2, #70	@ 0x46
 8004baa:	4629      	mov	r1, r5
 8004bac:	f104 0082 	add.w	r0, r4, #130	@ 0x82
			pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8004bb0:	f043 0308 	orr.w	r3, r3, #8
			pxSocket->u.xTCP.ucRepCount = 0U;
 8004bb4:	f884 5052 	strb.w	r5, [r4, #82]	@ 0x52
			pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8004bb8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
			( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8004bbc:	f009 f804 	bl	800dbc8 <memset>
			( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8004bc0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
			pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8004bc4:	6978      	ldr	r0, [r7, #20]
			pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8004bc6:	2108      	movs	r1, #8
			( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8004bc8:	f8a4 308c 	strh.w	r3, [r4, #140]	@ 0x8c
			pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8004bcc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8004bce:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 8004bd0:	ba1b      	rev	r3, r3
			pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8004bd2:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0
			pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8004bd6:	f884 108e 	strb.w	r1, [r4, #142]	@ 0x8e
			pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 8004bda:	f44f 7014 	mov.w	r0, #592	@ 0x250
			pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 8004bde:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
			pxIPHeader->ucVersionHeaderLength = 0x45U;
 8004be2:	2145      	movs	r1, #69	@ 0x45
			pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8004be4:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
			pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8004be6:	ba52      	rev16	r2, r2
			pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 8004be8:	f8a4 00b0 	strh.w	r0, [r4, #176]	@ 0xb0
			pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8004bec:	ba5b      	rev16	r3, r3
			( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8004bee:	9808      	ldr	r0, [sp, #32]
			pxIPHeader->ucVersionHeaderLength = 0x45U;
 8004bf0:	f884 1090 	strb.w	r1, [r4, #144]	@ 0x90
			pxIPHeader->usLength = FreeRTOS_htons( usLength );
 8004bf4:	2138      	movs	r1, #56	@ 0x38
			pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8004bf6:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
			pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8004bfa:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
			( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8004bfe:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
			prvSocketSetMSS( pxSocket );
 8004c02:	4620      	mov	r0, r4
			pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8004c04:	f8c4 6110 	str.w	r6, [r4, #272]	@ 0x110
			pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8004c08:	f884 508f 	strb.w	r5, [r4, #143]	@ 0x8f
			pxIPHeader->usLength = FreeRTOS_htons( usLength );
 8004c0c:	f884 5092 	strb.w	r5, [r4, #146]	@ 0x92
			pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8004c10:	f8a4 20a4 	strh.w	r2, [r4, #164]	@ 0xa4
			pxIPHeader->usLength = FreeRTOS_htons( usLength );
 8004c14:	f884 1093 	strb.w	r1, [r4, #147]	@ 0x93
			pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0UL;
 8004c18:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
			pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8004c1c:	f8a4 3098 	strh.w	r3, [r4, #152]	@ 0x98
			prvSocketSetMSS( pxSocket );
 8004c20:	f7ff f99e 	bl	8003f60 <prvSocketSetMSS>
			prvTCPCreateWindow( pxSocket );
 8004c24:	4620      	mov	r0, r4
 8004c26:	f7ff fb09 	bl	800423c <prvTCPCreateWindow>
				uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 8004c2a:	f104 01a4 	add.w	r1, r4, #164	@ 0xa4
 8004c2e:	4620      	mov	r0, r4
 8004c30:	f7ff f9b8 	bl	8003fa4 <prvSetSynAckOptions>
				pxSocket->u.xTCP.ucRepCount++;
 8004c34:	f894 1052 	ldrb.w	r1, [r4, #82]	@ 0x52
				pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8004c38:	f100 0514 	add.w	r5, r0, #20
				prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8004c3c:	2300      	movs	r3, #0
				pxSocket->u.xTCP.ucRepCount++;
 8004c3e:	3101      	adds	r1, #1
				prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8004c40:	f100 0228 	add.w	r2, r0, #40	@ 0x28
				pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8004c44:	00ad      	lsls	r5, r5, #2
				prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8004c46:	4620      	mov	r0, r4
				pxSocket->u.xTCP.ucRepCount++;
 8004c48:	f884 1052 	strb.w	r1, [r4, #82]	@ 0x52
				prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8004c4c:	4619      	mov	r1, r3
				pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8004c4e:	f884 50b0 	strb.w	r5, [r4, #176]	@ 0xb0
				prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8004c52:	f7ff fa07 	bl	8004064 <prvTCPReturnPacket>
		return lResult;
 8004c56:	e6ea      	b.n	8004a2e <xTCPSocketCheck+0x5e>
				FreeRTOS_debug_printf( ( "Connect: giving up %lxip:%u\n",
 8004c58:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004c5a:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 8004c5c:	480b      	ldr	r0, [pc, #44]	@ (8004c8c <xTCPSocketCheck+0x2bc>)
 8004c5e:	f008 f955 	bl	800cf0c <lUDPLoggingPrintf>
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8004c62:	2108      	movs	r1, #8
 8004c64:	4620      	mov	r0, r4
 8004c66:	f7ff fb77 	bl	8004358 <vTCPStateChange>
 8004c6a:	e6e0      	b.n	8004a2e <xTCPSocketCheck+0x5e>
							( void ) FreeRTOS_closesocket( pxSocket );
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	f7fe f8cf 	bl	8002e10 <FreeRTOS_closesocket>
 8004c72:	e70a      	b.n	8004a8a <xTCPSocketCheck+0xba>
 8004c74:	08010d58 	.word	0x08010d58
 8004c78:	08010888 	.word	0x08010888
 8004c7c:	200003d0 	.word	0x200003d0
 8004c80:	080107f8 	.word	0x080107f8
 8004c84:	08010844 	.word	0x08010844
 8004c88:	20000014 	.word	0x20000014
 8004c8c:	08010824 	.word	0x08010824

08004c90 <xProcessReceivedTCPPacket>:
	{
 8004c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if( pxNetworkBuffer->xDataLength < ( ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER ) )
 8004c94:	69c3      	ldr	r3, [r0, #28]
	{
 8004c96:	b093      	sub	sp, #76	@ 0x4c
		const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 8004c98:	6984      	ldr	r4, [r0, #24]
		if( pxNetworkBuffer->xDataLength < ( ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER ) )
 8004c9a:	2b35      	cmp	r3, #53	@ 0x35
		NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8004c9c:	900f      	str	r0, [sp, #60]	@ 0x3c
		uint16_t ucTCPFlags = pxProtocolHeaders->xTCPHeader.ucTCPFlags;
 8004c9e:	f8d4 202a 	ldr.w	r2, [r4, #42]	@ 0x2a
 8004ca2:	f894 a02f 	ldrb.w	sl, [r4, #47]	@ 0x2f
		uint16_t xLocalPort = FreeRTOS_htons( pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8004ca6:	8ca7      	ldrh	r7, [r4, #36]	@ 0x24
		uint16_t xRemotePort = FreeRTOS_htons( pxProtocolHeaders->xTCPHeader.usSourcePort );
 8004ca8:	8c66      	ldrh	r6, [r4, #34]	@ 0x22
		uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8004caa:	f8d4 9026 	ldr.w	r9, [r4, #38]	@ 0x26
		uint32_t ulAckNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulAckNr );
 8004cae:	9208      	str	r2, [sp, #32]
		if( pxNetworkBuffer->xDataLength < ( ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER ) )
 8004cb0:	d803      	bhi.n	8004cba <xProcessReceivedTCPPacket+0x2a>
			xResult = pdFAIL;
 8004cb2:	2000      	movs	r0, #0
	}
 8004cb4:	b013      	add	sp, #76	@ 0x4c
 8004cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cba:	f8d4 801a 	ldr.w	r8, [r4, #26]
 8004cbe:	ba7f      	rev16	r7, r7
 8004cc0:	ba76      	rev16	r6, r6
 8004cc2:	4605      	mov	r5, r0
 8004cc4:	fa98 f388 	rev.w	r3, r8
 8004cc8:	f8d4 001e 	ldr.w	r0, [r4, #30]
 8004ccc:	b2bf      	uxth	r7, r7
 8004cce:	b2b6      	uxth	r6, r6
			ulRemoteIP = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	9309      	str	r3, [sp, #36]	@ 0x24
			pxSocket = ( FreeRTOS_Socket_t * ) pxTCPSocketLookup( ulLocalIP, xLocalPort, ulRemoteIP, xRemotePort );
 8004cd4:	ba00      	rev	r0, r0
 8004cd6:	4633      	mov	r3, r6
 8004cd8:	4639      	mov	r1, r7
 8004cda:	f7fe fe31 	bl	8003940 <pxTCPSocketLookup>
			if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == pdFALSE ) )
 8004cde:	4683      	mov	fp, r0
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	d074      	beq.n	8004dce <xProcessReceivedTCPPacket+0x13e>
 8004ce4:	f890 8053 	ldrb.w	r8, [r0, #83]	@ 0x53
		switch( xStatus )
 8004ce8:	f1b8 0f0b 	cmp.w	r8, #11
 8004cec:	f200 8088 	bhi.w	8004e00 <xProcessReceivedTCPPacket+0x170>
 8004cf0:	f640 3381 	movw	r3, #2945	@ 0xb81
 8004cf4:	fa23 f308 	lsr.w	r3, r3, r8
 8004cf8:	f013 0301 	ands.w	r3, r3, #1
 8004cfc:	d167      	bne.n	8004dce <xProcessReceivedTCPPacket+0x13e>
				if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 8004cfe:	f1b8 0f01 	cmp.w	r8, #1
				pxSocket->u.xTCP.ucRepCount = 0U;
 8004d02:	f880 3052 	strb.w	r3, [r0, #82]	@ 0x52
				if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 8004d06:	d17e      	bne.n	8004e06 <xProcessReceivedTCPPacket+0x176>
					if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 8004d08:	f00a 091f 	and.w	r9, sl, #31
 8004d0c:	f1b9 0f02 	cmp.w	r9, #2
 8004d10:	f000 81a3 	beq.w	800505a <xProcessReceivedTCPPacket+0x3ca>
			( void ) snprintf( retString,
 8004d14:	f01a 0f01 	tst.w	sl, #1
 8004d18:	4ac1      	ldr	r2, [pc, #772]	@ (8005020 <xProcessReceivedTCPPacket+0x390>)
 8004d1a:	f04f 010a 	mov.w	r1, #10
 8004d1e:	48c1      	ldr	r0, [pc, #772]	@ (8005024 <xProcessReceivedTCPPacket+0x394>)
 8004d20:	bf14      	ite	ne
 8004d22:	2346      	movne	r3, #70	@ 0x46
 8004d24:	232e      	moveq	r3, #46	@ 0x2e
 8004d26:	f01a 0f02 	tst.w	sl, #2
 8004d2a:	bf14      	ite	ne
 8004d2c:	2453      	movne	r4, #83	@ 0x53
 8004d2e:	242e      	moveq	r4, #46	@ 0x2e
 8004d30:	9400      	str	r4, [sp, #0]
 8004d32:	f01a 0404 	ands.w	r4, sl, #4
 8004d36:	bf14      	ite	ne
 8004d38:	f04f 0c52 	movne.w	ip, #82	@ 0x52
 8004d3c:	f04f 0c2e 	moveq.w	ip, #46	@ 0x2e
 8004d40:	f01a 0f08 	tst.w	sl, #8
 8004d44:	f8cd c004 	str.w	ip, [sp, #4]
 8004d48:	bf14      	ite	ne
 8004d4a:	f04f 0c50 	movne.w	ip, #80	@ 0x50
 8004d4e:	f04f 0c2e 	moveq.w	ip, #46	@ 0x2e
 8004d52:	f01a 0f10 	tst.w	sl, #16
 8004d56:	f8cd c008 	str.w	ip, [sp, #8]
 8004d5a:	bf14      	ite	ne
 8004d5c:	f04f 0c41 	movne.w	ip, #65	@ 0x41
 8004d60:	f04f 0c2e 	moveq.w	ip, #46	@ 0x2e
 8004d64:	f01a 0f20 	tst.w	sl, #32
 8004d68:	f8cd c00c 	str.w	ip, [sp, #12]
 8004d6c:	bf14      	ite	ne
 8004d6e:	f04f 0c55 	movne.w	ip, #85	@ 0x55
 8004d72:	f04f 0c2e 	moveq.w	ip, #46	@ 0x2e
 8004d76:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8004d7a:	f8cd c010 	str.w	ip, [sp, #16]
 8004d7e:	bf14      	ite	ne
 8004d80:	f04f 0c45 	movne.w	ip, #69	@ 0x45
 8004d84:	f04f 0c2e 	moveq.w	ip, #46	@ 0x2e
 8004d88:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 8004d8c:	f8cd c014 	str.w	ip, [sp, #20]
 8004d90:	bf0c      	ite	eq
 8004d92:	f04f 0c2e 	moveq.w	ip, #46	@ 0x2e
 8004d96:	f04f 0c43 	movne.w	ip, #67	@ 0x43
 8004d9a:	f8cd c018 	str.w	ip, [sp, #24]
 8004d9e:	f009 fa1f 	bl	800e1e0 <snprintf>
								FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s (0x%02x) from %lxip:%u to port %u\n",
 8004da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004da4:	4652      	mov	r2, sl
 8004da6:	499f      	ldr	r1, [pc, #636]	@ (8005024 <xProcessReceivedTCPPacket+0x394>)
 8004da8:	489f      	ldr	r0, [pc, #636]	@ (8005028 <xProcessReceivedTCPPacket+0x398>)
 8004daa:	9701      	str	r7, [sp, #4]
 8004dac:	9600      	str	r6, [sp, #0]
 8004dae:	f008 f8ad 	bl	800cf0c <lUDPLoggingPrintf>
						if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 8004db2:	2c00      	cmp	r4, #0
 8004db4:	f47f af7d 	bne.w	8004cb2 <xProcessReceivedTCPPacket+0x22>
				TCPPacket_t * pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8004db8:	69aa      	ldr	r2, [r5, #24]
				pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8004dba:	f241 4650 	movw	r6, #5200	@ 0x1450
				prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 8004dbe:	4623      	mov	r3, r4
 8004dc0:	4629      	mov	r1, r5
				pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8004dc2:	85d6      	strh	r6, [r2, #46]	@ 0x2e
				prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	2228      	movs	r2, #40	@ 0x28
 8004dc8:	f7ff f94c 	bl	8004064 <prvTCPReturnPacket>
		return pdFAIL;
 8004dcc:	e771      	b.n	8004cb2 <xProcessReceivedTCPPacket+0x22>
				FreeRTOS_debug_printf( ( "TCP: No active socket on port %d (%lxip:%d)\n", xLocalPort, ulRemoteIP, xRemotePort ) );
 8004dce:	4633      	mov	r3, r6
 8004dd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004dd2:	4639      	mov	r1, r7
 8004dd4:	4895      	ldr	r0, [pc, #596]	@ (800502c <xProcessReceivedTCPPacket+0x39c>)
 8004dd6:	f008 f899 	bl	800cf0c <lUDPLoggingPrintf>
				if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8004dda:	f00a 031f 	and.w	r3, sl, #31
 8004dde:	2b10      	cmp	r3, #16
 8004de0:	f43f af67 	beq.w	8004cb2 <xProcessReceivedTCPPacket+0x22>
 8004de4:	f01a 0304 	ands.w	r3, sl, #4
 8004de8:	f47f af63 	bne.w	8004cb2 <xProcessReceivedTCPPacket+0x22>
				TCPPacket_t * pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8004dec:	69aa      	ldr	r2, [r5, #24]
				pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8004dee:	f241 4450 	movw	r4, #5200	@ 0x1450
 8004df2:	85d4      	strh	r4, [r2, #46]	@ 0x2e
				prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 8004df4:	4629      	mov	r1, r5
 8004df6:	4618      	mov	r0, r3
 8004df8:	2228      	movs	r2, #40	@ 0x28
 8004dfa:	f7ff f933 	bl	8004064 <prvTCPReturnPacket>
						if( pxSocket == NULL )
 8004dfe:	e758      	b.n	8004cb2 <xProcessReceivedTCPPacket+0x22>
				pxSocket->u.xTCP.ucRepCount = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	f880 3052 	strb.w	r3, [r0, #82]	@ 0x52
					if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 8004e06:	f01a 0f04 	tst.w	sl, #4
 8004e0a:	f040 8261 	bne.w	80052d0 <xProcessReceivedTCPPacket+0x640>
					else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) )
 8004e0e:	f00a 031f 	and.w	r3, sl, #31
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d108      	bne.n	8004e28 <xProcessReceivedTCPPacket+0x198>
 8004e16:	f1b8 0f04 	cmp.w	r8, #4
 8004e1a:	d905      	bls.n	8004e28 <xProcessReceivedTCPPacket+0x198>
						FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %lxip:%u\n", ulRemoteIP, xRemotePort ) );
 8004e1c:	4632      	mov	r2, r6
 8004e1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004e20:	4883      	ldr	r0, [pc, #524]	@ (8005030 <xProcessReceivedTCPPacket+0x3a0>)
 8004e22:	f008 f873 	bl	800cf0c <lUDPLoggingPrintf>
			if( xResult != pdFAIL )
 8004e26:	e744      	b.n	8004cb2 <xProcessReceivedTCPPacket+0x22>
										 ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ uxOffset ] ) ),
 8004e28:	69ab      	ldr	r3, [r5, #24]
						( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 8004e2a:	f8d3 2022 	ldr.w	r2, [r3, #34]	@ 0x22
 8004e2e:	f8d3 6026 	ldr.w	r6, [r3, #38]	@ 0x26
 8004e32:	f8d3 002a 	ldr.w	r0, [r3, #42]	@ 0x2a
 8004e36:	f8d3 102e 	ldr.w	r1, [r3, #46]	@ 0x2e
 8004e3a:	f8cb 20a4 	str.w	r2, [fp, #164]	@ 0xa4
 8004e3e:	f8cb 60a8 	str.w	r6, [fp, #168]	@ 0xa8
 8004e42:	f8cb 00ac 	str.w	r0, [fp, #172]	@ 0xac
 8004e46:	f8cb 10b0 	str.w	r1, [fp, #176]	@ 0xb0
 8004e4a:	f8d3 2032 	ldr.w	r2, [r3, #50]	@ 0x32
 8004e4e:	f8cb 20b4 	str.w	r2, [fp, #180]	@ 0xb4
				pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 8004e52:	f004 f95b 	bl	800910c <xTaskGetTickCount>
				pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8004e56:	f89b 3041 	ldrb.w	r3, [fp, #65]	@ 0x41
				pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 8004e5a:	f8cb 0060 	str.w	r0, [fp, #96]	@ 0x60
				pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8004e5e:	f023 0306 	bic.w	r3, r3, #6
 8004e62:	f88b 3041 	strb.w	r3, [fp, #65]	@ 0x41
				pxSocket->u.xTCP.ucKeepRepCount = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	f88b 3058 	strb.w	r3, [fp, #88]	@ 0x58
				pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8004e6c:	f004 f94e 	bl	800910c <xTaskGetTickCount>
				if( ( pxProtocolHeaders->xTCPHeader.ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 8004e70:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
		const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 8004e74:	69ae      	ldr	r6, [r5, #24]
				if( ( pxProtocolHeaders->xTCPHeader.ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 8004e76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
				pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8004e7a:	f8cb 005c 	str.w	r0, [fp, #92]	@ 0x5c
				if( ( pxProtocolHeaders->xTCPHeader.ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 8004e7e:	2b50      	cmp	r3, #80	@ 0x50
 8004e80:	f200 808b 	bhi.w	8004f9a <xProcessReceivedTCPPacket+0x30a>
 8004e84:	f10b 03e4 	add.w	r3, fp, #228	@ 0xe4
 8004e88:	9308      	str	r3, [sp, #32]
		if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 8004e8a:	f896 302e 	ldrb.w	r3, [r6, #46]	@ 0x2e
				pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 8004e8e:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
						if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 8004e90:	f01a 0f02 	tst.w	sl, #2
				pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 8004e94:	ba52      	rev16	r2, r2
 8004e96:	b292      	uxth	r2, r2
 8004e98:	f8cb 20d8 	str.w	r2, [fp, #216]	@ 0xd8
						if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 8004e9c:	d104      	bne.n	8004ea8 <xProcessReceivedTCPPacket+0x218>
								( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8004e9e:	f89b 10ca 	ldrb.w	r1, [fp, #202]	@ 0xca
 8004ea2:	408a      	lsls	r2, r1
							pxSocket->u.xTCP.ulWindowSize =
 8004ea4:	f8cb 20d8 	str.w	r2, [fp, #216]	@ 0xd8
		lLength = ( int32_t ) usLength;
 8004ea8:	8a32      	ldrh	r2, [r6, #16]
		ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 8004eaa:	089b      	lsrs	r3, r3, #2
		lReceiveLength = ipNUMERIC_CAST( int32_t, pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 8004eac:	69ec      	ldr	r4, [r5, #28]
		lLength = ( int32_t ) usLength;
 8004eae:	ba52      	rev16	r2, r2
		ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 8004eb0:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
		lReceiveLength = ipNUMERIC_CAST( int32_t, pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 8004eb4:	3c0e      	subs	r4, #14
		uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8004eb6:	f896 802f 	ldrb.w	r8, [r6, #47]	@ 0x2f
		lLength = ( int32_t ) usLength;
 8004eba:	b292      	uxth	r2, r2
		*ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 8004ebc:	f103 0a22 	add.w	sl, r3, #34	@ 0x22
		if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 8004ec0:	3314      	adds	r3, #20
 8004ec2:	f8d6 7026 	ldr.w	r7, [r6, #38]	@ 0x26
 8004ec6:	4294      	cmp	r4, r2
		*ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 8004ec8:	44b2      	add	sl, r6
 8004eca:	ba3f      	rev	r7, r7
		if( lReceiveLength > lLength )
 8004ecc:	bfa8      	it	ge
 8004ece:	4614      	movge	r4, r2
		if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 8004ed0:	429c      	cmp	r4, r3
			lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 8004ed2:	bfcc      	ite	gt
 8004ed4:	1ae4      	subgt	r4, r4, r3
			lReceiveLength = 0;
 8004ed6:	2400      	movle	r4, #0
		if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 8004ed8:	f018 0f20 	tst.w	r8, #32
 8004edc:	d007      	beq.n	8004eee <xProcessReceivedTCPPacket+0x25e>
			lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 8004ede:	8eb3      	ldrh	r3, [r6, #52]	@ 0x34
 8004ee0:	ba5b      	rev16	r3, r3
 8004ee2:	b29b      	uxth	r3, r3
			lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 8004ee4:	42a3      	cmp	r3, r4
			*ppucRecvData += lUrgentLength;
 8004ee6:	449a      	add	sl, r3
			lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 8004ee8:	bfd4      	ite	le
 8004eea:	1ae4      	suble	r4, r4, r3
 8004eec:	1b24      	subgt	r4, r4, r4
		if( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED )
 8004eee:	f89b 0053 	ldrb.w	r0, [fp, #83]	@ 0x53
		if( ( ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber ) ) > 0L )
 8004ef2:	eb07 0904 	add.w	r9, r7, r4
 8004ef6:	f8db 30fc 	ldr.w	r3, [fp, #252]	@ 0xfc
		if( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED )
 8004efa:	2804      	cmp	r0, #4
 8004efc:	4602      	mov	r2, r0
		if( ( ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber ) ) > 0L )
 8004efe:	eba9 0303 	sub.w	r3, r9, r3
		if( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED )
 8004f02:	f240 81d5 	bls.w	80052b0 <xProcessReceivedTCPPacket+0x620>
			if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 8004f06:	f107 0c01 	add.w	ip, r7, #1
 8004f0a:	f8db 10f4 	ldr.w	r1, [fp, #244]	@ 0xf4
 8004f0e:	4561      	cmp	r1, ip
 8004f10:	d105      	bne.n	8004f1e <xProcessReceivedTCPPacket+0x28e>
				pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8004f12:	f89b 1041 	ldrb.w	r1, [fp, #65]	@ 0x41
 8004f16:	f041 0101 	orr.w	r1, r1, #1
 8004f1a:	f88b 1041 	strb.w	r1, [fp, #65]	@ 0x41
		if( ( ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber ) ) > 0L )
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f340 8265 	ble.w	80053ee <xProcessReceivedTCPPacket+0x75e>
		if( ( ulReceiveLength > 0U ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eSYN_RECEIVED ) )
 8004f24:	2803      	cmp	r0, #3
			pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8004f26:	f8cb 90fc 	str.w	r9, [fp, #252]	@ 0xfc
		if( ( ulReceiveLength > 0U ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eSYN_RECEIVED ) )
 8004f2a:	d902      	bls.n	8004f32 <xProcessReceivedTCPPacket+0x2a2>
 8004f2c:	2c00      	cmp	r4, #0
 8004f2e:	f040 8211 	bne.w	8005354 <xProcessReceivedTCPPacket+0x6c4>
			pxTCPWindow->ucOptionLength = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	46b2      	mov	sl, r6
 8004f36:	f88b 3120 	strb.w	r3, [fp, #288]	@ 0x120
		if( ( pxSocket->u.xTCP.ucTCPState >= ( EventBits_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 8004f3a:	2804      	cmp	r0, #4
 8004f3c:	f240 835e 	bls.w	80055fc <xProcessReceivedTCPPacket+0x96c>
 8004f40:	f89b 3040 	ldrb.w	r3, [fp, #64]	@ 0x40
 8004f44:	f013 0201 	ands.w	r2, r3, #1
 8004f48:	f040 832a 	bne.w	80055a0 <xProcessReceivedTCPPacket+0x910>
		UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 8004f4c:	9209      	str	r2, [sp, #36]	@ 0x24
			if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 8004f4e:	f018 0f01 	tst.w	r8, #1
 8004f52:	d013      	beq.n	8004f7c <xProcessReceivedTCPPacket+0x2ec>
 8004f54:	f99b 3041 	ldrsb.w	r3, [fp, #65]	@ 0x41
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	db0f      	blt.n	8004f7c <xProcessReceivedTCPPacket+0x2ec>
				pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 8004f5c:	f89b 3041 	ldrb.w	r3, [fp, #65]	@ 0x41
				pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8004f60:	f8cb 90f8 	str.w	r9, [fp, #248]	@ 0xf8
				pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 8004f64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f68:	f88b 3041 	strb.w	r3, [fp, #65]	@ 0x41
				if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8004f6c:	065b      	lsls	r3, r3, #25
 8004f6e:	d405      	bmi.n	8004f7c <xProcessReceivedTCPPacket+0x2ec>
					pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 8004f70:	f89b 3042 	ldrb.w	r3, [fp, #66]	@ 0x42
 8004f74:	f043 0302 	orr.w	r3, r3, #2
 8004f78:	f88b 3042 	strb.w	r3, [fp, #66]	@ 0x42
			switch( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) )
 8004f7c:	1e83      	subs	r3, r0, #2
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	f200 8136 	bhi.w	80051f0 <xProcessReceivedTCPPacket+0x560>
 8004f84:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004f88:	017000a5 	.word	0x017000a5
 8004f8c:	013600a5 	.word	0x013600a5
 8004f90:	00560056 	.word	0x00560056
 8004f94:	01340134 	.word	0x01340134
 8004f98:	0056      	.short	0x0056
		if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 8004f9a:	f896 302e 	ldrb.w	r3, [r6, #46]	@ 0x2e
 8004f9e:	2b50      	cmp	r3, #80	@ 0x50
 8004fa0:	f240 81c7 	bls.w	8005332 <xProcessReceivedTCPPacket+0x6a2>
			if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 8004fa4:	69ea      	ldr	r2, [r5, #28]
 8004fa6:	2a36      	cmp	r2, #54	@ 0x36
 8004fa8:	f240 81c3 	bls.w	8005332 <xProcessReceivedTCPPacket+0x6a2>
			ucLength = ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 8004fac:	0919      	lsrs	r1, r3, #4
					( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) ) )
 8004fae:	3a36      	subs	r2, #54	@ 0x36
			ucLength = ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 8004fb0:	3905      	subs	r1, #5
 8004fb2:	0089      	lsls	r1, r1, #2
 8004fb4:	fa5f f881 	uxtb.w	r8, r1
				if( ( pxNetworkBuffer->xDataLength > uxOptionOffset ) &&
 8004fb8:	4590      	cmp	r8, r2
 8004fba:	f200 81ba 	bhi.w	8005332 <xProcessReceivedTCPPacket+0x6a2>
					if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 8004fbe:	f896 202f 	ldrb.w	r2, [r6, #47]	@ 0x2f
 8004fc2:	f002 0202 	and.w	r2, r2, #2
 8004fc6:	9209      	str	r2, [sp, #36]	@ 0x24
						if( uxOptionsLength == 0U )
 8004fc8:	f1b8 0f00 	cmp.w	r8, #0
 8004fcc:	f000 81b1 	beq.w	8005332 <xProcessReceivedTCPPacket+0x6a2>
 8004fd0:	f10b 03e4 	add.w	r3, fp, #228	@ 0xe4
		pucPtr = pxTCPHeader->ucOptdata;
 8004fd4:	f106 0936 	add.w	r9, r6, #54	@ 0x36
 8004fd8:	9308      	str	r3, [sp, #32]
 8004fda:	e019      	b.n	8005010 <xProcessReceivedTCPPacket+0x380>
		else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 8004fdc:	2a01      	cmp	r2, #1
 8004fde:	f000 8349 	beq.w	8005674 <xProcessReceivedTCPPacket+0x9e4>
		else if( uxRemainingOptionsBytes < 2U )
 8004fe2:	f1b8 0f01 	cmp.w	r8, #1
 8004fe6:	d017      	beq.n	8005018 <xProcessReceivedTCPPacket+0x388>
			else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 8004fe8:	2a03      	cmp	r2, #3
 8004fea:	f000 841c 	beq.w	8005826 <xProcessReceivedTCPPacket+0xb96>
		else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 8004fee:	2a02      	cmp	r2, #2
 8004ff0:	f000 8480 	beq.w	80058f4 <xProcessReceivedTCPPacket+0xc64>
			ucLen = pucPtr[ 1 ];
 8004ff4:	f899 1001 	ldrb.w	r1, [r9, #1]
			if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 8004ff8:	2901      	cmp	r1, #1
 8004ffa:	d90d      	bls.n	8005018 <xProcessReceivedTCPPacket+0x388>
 8004ffc:	4541      	cmp	r1, r8
 8004ffe:	460b      	mov	r3, r1
 8005000:	d80a      	bhi.n	8005018 <xProcessReceivedTCPPacket+0x388>
						if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 8005002:	2a05      	cmp	r2, #5
 8005004:	f000 8510 	beq.w	8005a28 <xProcessReceivedTCPPacket+0xd98>
						if( uxOptionsLength == 0U )
 8005008:	ebb8 0803 	subs.w	r8, r8, r3
						pucPtr = &( pucPtr[ uxResult ] );
 800500c:	4499      	add	r9, r3
						if( uxOptionsLength == 0U )
 800500e:	d003      	beq.n	8005018 <xProcessReceivedTCPPacket+0x388>
		if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 8005010:	f899 2000 	ldrb.w	r2, [r9]
 8005014:	2a00      	cmp	r2, #0
 8005016:	d1e1      	bne.n	8004fdc <xProcessReceivedTCPPacket+0x34c>
		ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 8005018:	69ae      	ldr	r6, [r5, #24]
		ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 800501a:	f896 302e 	ldrb.w	r3, [r6, #46]	@ 0x2e
 800501e:	e736      	b.n	8004e8e <xProcessReceivedTCPPacket+0x1fe>
 8005020:	08010920 	.word	0x08010920
 8005024:	200003c4 	.word	0x200003c4
 8005028:	08010934 	.word	0x08010934
 800502c:	080108f0 	.word	0x080108f0
 8005030:	08010a44 	.word	0x08010a44
					xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 8005034:	69a9      	ldr	r1, [r5, #24]
 8005036:	4658      	mov	r0, fp
 8005038:	f7ff fc46 	bl	80048c8 <prvTCPHandleFin.isra.0>
				if( pxNetworkBuffer != NULL )
 800503c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
					xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800503e:	4680      	mov	r8, r0
		if( xSendLength > 0 )
 8005040:	f1b8 0f00 	cmp.w	r8, #0
 8005044:	f300 8131 	bgt.w	80052aa <xProcessReceivedTCPPacket+0x61a>
				if( pxNetworkBuffer != NULL )
 8005048:	b115      	cbz	r5, 8005050 <xProcessReceivedTCPPacket+0x3c0>
					vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800504a:	4628      	mov	r0, r5
 800504c:	f001 fcdc 	bl	8006a08 <vReleaseNetworkBufferAndDescriptor>
				( void ) prvTCPNextTimeout( pxSocket );
 8005050:	4658      	mov	r0, fp
 8005052:	f7ff f921 	bl	8004298 <prvTCPNextTimeout>
				xResult = pdPASS;
 8005056:	2001      	movs	r0, #1
		return xResult;
 8005058:	e62c      	b.n	8004cb4 <xProcessReceivedTCPPacket+0x24>
		const TCPPacket_t * pxTCPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800505a:	69af      	ldr	r7, [r5, #24]
		ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
 800505c:	8c81      	ldrh	r1, [r0, #36]	@ 0x24
 800505e:	48b7      	ldr	r0, [pc, #732]	@ (800533c <xProcessReceivedTCPPacket+0x6ac>)
 8005060:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005062:	f8d7 201a 	ldr.w	r2, [r7, #26]
 8005066:	6940      	ldr	r0, [r0, #20]
 8005068:	f7fb fe6a 	bl	8000d40 <ulApplicationGetNextSequenceNumber>
		if( ulInitialSequenceNumber != 0UL )
 800506c:	4606      	mov	r6, r0
 800506e:	2800      	cmp	r0, #0
 8005070:	f43f ae1f 	beq.w	8004cb2 <xProcessReceivedTCPPacket+0x22>
			if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8005074:	f89b 3040 	ldrb.w	r3, [fp, #64]	@ 0x40
 8005078:	f013 0208 	ands.w	r2, r3, #8
 800507c:	9208      	str	r2, [sp, #32]
 800507e:	f000 8226 	beq.w	80054ce <xProcessReceivedTCPPacket+0x83e>
				pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8005082:	f043 0304 	orr.w	r3, r3, #4
				pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8005086:	f8cb b054 	str.w	fp, [fp, #84]	@ 0x54
				pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800508a:	f88b 3040 	strb.w	r3, [fp, #64]	@ 0x40
			pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800508e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
			prvSocketSetMSS( pxReturn );
 8005090:	4658      	mov	r0, fp
			const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 8005092:	69aa      	ldr	r2, [r5, #24]
			pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 8005094:	ba5b      	rev16	r3, r3
 8005096:	f8d2 2026 	ldr.w	r2, [r2, #38]	@ 0x26
 800509a:	f8ab 303c 	strh.w	r3, [fp, #60]	@ 0x3c
			pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800509e:	f8d7 301a 	ldr.w	r3, [r7, #26]
 80050a2:	ba12      	rev	r2, r2
			pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 80050a4:	f8cb 6110 	str.w	r6, [fp, #272]	@ 0x110
 80050a8:	ba1b      	rev	r3, r3
			pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 80050aa:	f8cb 20f4 	str.w	r2, [fp, #244]	@ 0xf4
			pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 80050ae:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
			prvSocketSetMSS( pxReturn );
 80050b2:	f7fe ff55 	bl	8003f60 <prvSocketSetMSS>
			prvTCPCreateWindow( pxReturn );
 80050b6:	4658      	mov	r0, fp
 80050b8:	f7ff f8c0 	bl	800423c <prvTCPCreateWindow>
			vTCPStateChange( pxReturn, eSYN_FIRST );
 80050bc:	4658      	mov	r0, fp
 80050be:	2103      	movs	r1, #3
 80050c0:	f7ff f94a 	bl	8004358 <vTCPStateChange>
			( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 80050c4:	2246      	movs	r2, #70	@ 0x46
 80050c6:	69a9      	ldr	r1, [r5, #24]
 80050c8:	f10b 0082 	add.w	r0, fp, #130	@ 0x82
 80050cc:	f008 fca8 	bl	800da20 <memcpy>
						if( pxSocket == NULL )
 80050d0:	e6bf      	b.n	8004e52 <xProcessReceivedTCPPacket+0x1c2>
 80050d2:	69af      	ldr	r7, [r5, #24]
		if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 80050d4:	2802      	cmp	r0, #2
				if( pxNetworkBuffer != NULL )
 80050d6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
		uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80050d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
		uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 80050dc:	f8d7 6026 	ldr.w	r6, [r7, #38]	@ 0x26
		if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 80050e0:	f003 0217 	and.w	r2, r3, #23
 80050e4:	ba36      	rev	r6, r6
		if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 80050e6:	f040 81d4 	bne.w	8005492 <xProcessReceivedTCPPacket+0x802>
		if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 80050ea:	2a12      	cmp	r2, #18
 80050ec:	f000 83cd 	beq.w	800588a <xProcessReceivedTCPPacket+0xbfa>
 80050f0:	2212      	movs	r2, #18
			FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X Queued %d, %d\n",
 80050f2:	4993      	ldr	r1, [pc, #588]	@ (8005340 <xProcessReceivedTCPPacket+0x6b0>)
 80050f4:	f89b 0040 	ldrb.w	r0, [fp, #64]	@ 0x40
 80050f8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80050fc:	9001      	str	r0, [sp, #4]
 80050fe:	f89b 0040 	ldrb.w	r0, [fp, #64]	@ 0x40
 8005102:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8005106:	9000      	str	r0, [sp, #0]
 8005108:	488e      	ldr	r0, [pc, #568]	@ (8005344 <xProcessReceivedTCPPacket+0x6b4>)
 800510a:	f007 feff 	bl	800cf0c <lUDPLoggingPrintf>
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800510e:	2108      	movs	r1, #8
 8005110:	4658      	mov	r0, fp
 8005112:	f7ff f921 	bl	8004358 <vTCPStateChange>
			if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 8005116:	f89b 3040 	ldrb.w	r3, [fp, #64]	@ 0x40
 800511a:	0719      	lsls	r1, r3, #28
 800511c:	d403      	bmi.n	8005126 <xProcessReceivedTCPPacket+0x496>
				if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800511e:	f013 0f06 	tst.w	r3, #6
 8005122:	f040 83e3 	bne.w	80058ec <xProcessReceivedTCPPacket+0xc5c>
			pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 8005126:	f8d7 302a 	ldr.w	r3, [r7, #42]	@ 0x2a
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800512a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800512c:	ba1b      	rev	r3, r3
			pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800512e:	f8cb 60f4 	str.w	r6, [fp, #244]	@ 0xf4
			uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8005132:	f102 0828 	add.w	r8, r2, #40	@ 0x28
			pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 8005136:	f8cb 3110 	str.w	r3, [fp, #272]	@ 0x110
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800513a:	f102 0314 	add.w	r3, r2, #20
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
			pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 8005144:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005148:	f043 0304 	orr.w	r3, r3, #4
 800514c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8005150:	f8db 3044 	ldr.w	r3, [fp, #68]	@ 0x44
		const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 8005154:	69aa      	ldr	r2, [r5, #24]
		ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8005156:	1b9e      	subs	r6, r3, r6
						lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usCurMSS );
 8005158:	f8bb 304a 	ldrh.w	r3, [fp, #74]	@ 0x4a
					if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800515c:	f8db 007c 	ldr.w	r0, [fp, #124]	@ 0x7c
				if( ( ulReceiveLength > 0U ) &&                                                   /* Data was sent to this socket. */
 8005160:	ebb6 0f43 	cmp.w	r6, r3, lsl #1
 8005164:	db08      	blt.n	8005178 <xProcessReceivedTCPPacket+0x4e8>
 8005166:	b13c      	cbz	r4, 8005178 <xProcessReceivedTCPPacket+0x4e8>
					( lRxSpace >= lMinLength ) &&                                                 /* There is Rx space for more data. */
 8005168:	f89b 1041 	ldrb.w	r1, [fp, #65]	@ 0x41
					( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&                     /* Not in a closure phase. */
 800516c:	0649      	lsls	r1, r1, #25
 800516e:	d403      	bmi.n	8005178 <xProcessReceivedTCPPacket+0x4e8>
 8005170:	f1b8 0f28 	cmp.w	r8, #40	@ 0x28
 8005174:	f000 834f 	beq.w	8005816 <xProcessReceivedTCPPacket+0xb86>
 8005178:	4647      	mov	r7, r8
 800517a:	ae0f      	add	r6, sp, #60	@ 0x3c
				else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800517c:	b130      	cbz	r0, 800518c <xProcessReceivedTCPPacket+0x4fc>
					if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800517e:	42a8      	cmp	r0, r5
 8005180:	d001      	beq.n	8005186 <xProcessReceivedTCPPacket+0x4f6>
						vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8005182:	f001 fc41 	bl	8006a08 <vReleaseNetworkBufferAndDescriptor>
					pxSocket->u.xTCP.pxAckMessage = NULL;
 8005186:	2300      	movs	r3, #0
 8005188:	f8cb 307c 	str.w	r3, [fp, #124]	@ 0x7c
			if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 800518c:	4b6e      	ldr	r3, [pc, #440]	@ (8005348 <xProcessReceivedTCPPacket+0x6b8>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b01      	cmp	r3, #1
 8005192:	dd13      	ble.n	80051bc <xProcessReceivedTCPPacket+0x52c>
 8005194:	f8bb 1024 	ldrh.w	r1, [fp, #36]	@ 0x24
 8005198:	2917      	cmp	r1, #23
 800519a:	d00f      	beq.n	80051bc <xProcessReceivedTCPPacket+0x52c>
				FreeRTOS_debug_printf( ( "Send[%u->%u] imm ACK %lu SEQ %lu (len %lu)\n",
 800519c:	e9db 323c 	ldrd	r3, r2, [fp, #240]	@ 0xf0
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	f8bb 203c 	ldrh.w	r2, [fp, #60]	@ 0x3c
 80051a6:	f8cd 8004 	str.w	r8, [sp, #4]
 80051aa:	f8db 0110 	ldr.w	r0, [fp, #272]	@ 0x110
 80051ae:	f8db 4100 	ldr.w	r4, [fp, #256]	@ 0x100
 80051b2:	1b00      	subs	r0, r0, r4
 80051b4:	9000      	str	r0, [sp, #0]
 80051b6:	4865      	ldr	r0, [pc, #404]	@ (800534c <xProcessReceivedTCPPacket+0x6bc>)
 80051b8:	f007 fea8 	bl	800cf0c <lUDPLoggingPrintf>
			prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 80051bc:	4629      	mov	r1, r5
					*ppxNetworkBuffer = NULL;
 80051be:	2500      	movs	r5, #0
			prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 80051c0:	2301      	movs	r3, #1
 80051c2:	463a      	mov	r2, r7
 80051c4:	4658      	mov	r0, fp
					*ppxNetworkBuffer = NULL;
 80051c6:	2408      	movs	r4, #8
			prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 80051c8:	f7fe ff4c 	bl	8004064 <prvTCPReturnPacket>
					*ppxNetworkBuffer = NULL;
 80051cc:	950f      	str	r5, [sp, #60]	@ 0x3c
		for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 80051ce:	e007      	b.n	80051e0 <xProcessReceivedTCPPacket+0x550>
			prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 80051d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80051d2:	4658      	mov	r0, fp
 80051d4:	f7fe ff46 	bl	8004064 <prvTCPReturnPacket>
		for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 80051d8:	3c01      	subs	r4, #1
					*ppxNetworkBuffer = NULL;
 80051da:	950f      	str	r5, [sp, #60]	@ 0x3c
		for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 80051dc:	f43f af38 	beq.w	8005050 <xProcessReceivedTCPPacket+0x3c0>
			xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 80051e0:	4631      	mov	r1, r6
 80051e2:	4658      	mov	r0, fp
 80051e4:	f7ff f9fa 	bl	80045dc <prvTCPPrepareSend.constprop.0>
			if( xSendLength <= 0 )
 80051e8:	1e02      	subs	r2, r0, #0
			prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 80051ea:	f04f 0301 	mov.w	r3, #1
			if( xSendLength <= 0 )
 80051ee:	dcef      	bgt.n	80051d0 <xProcessReceivedTCPPacket+0x540>
				if( pxNetworkBuffer != NULL )
 80051f0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80051f2:	e729      	b.n	8005048 <xProcessReceivedTCPPacket+0x3b8>
		ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 80051f4:	69ae      	ldr	r6, [r5, #24]
					( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 80051f6:	f89b 20ca 	ldrb.w	r2, [fp, #202]	@ 0xca
		pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 80051fa:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
		uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80051fc:	f896 702f 	ldrb.w	r7, [r6, #47]	@ 0x2f
		pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 8005200:	ba5b      	rev16	r3, r3
 8005202:	f8d6 8026 	ldr.w	r8, [r6, #38]	@ 0x26
 8005206:	b29b      	uxth	r3, r3
 8005208:	fa98 f888 	rev.w	r8, r8
					( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800520c:	4093      	lsls	r3, r2
		if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) != 0U )
 800520e:	06fa      	lsls	r2, r7, #27
				pxSocket->u.xTCP.ulWindowSize =
 8005210:	f8cb 30d8 	str.w	r3, [fp, #216]	@ 0xd8
		if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) != 0U )
 8005214:	f100 81fd 	bmi.w	8005612 <xProcessReceivedTCPPacket+0x982>
		if( pxSocket->u.xTCP.txStream != NULL )
 8005218:	f8db 3078 	ldr.w	r3, [fp, #120]	@ 0x78
 800521c:	b113      	cbz	r3, 8005224 <xProcessReceivedTCPPacket+0x594>
			prvTCPAddTxData( pxSocket );
 800521e:	4658      	mov	r0, fp
 8005220:	f7fe fef4 	bl	800400c <prvTCPAddTxData>
		if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 8005224:	f89b 2041 	ldrb.w	r2, [fp, #65]	@ 0x41
 8005228:	f007 0701 	and.w	r7, r7, #1
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800522c:	f8db 1104 	ldr.w	r1, [fp, #260]	@ 0x104
		if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 8005230:	f002 0320 	and.w	r3, r2, #32
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8005234:	f8cb 1110 	str.w	r1, [fp, #272]	@ 0x110
		if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 8005238:	433b      	orrs	r3, r7
 800523a:	f000 8107 	beq.w	800544c <xProcessReceivedTCPPacket+0x7bc>
			if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800523e:	0657      	lsls	r7, r2, #25
 8005240:	f140 826e 	bpl.w	8005720 <xProcessReceivedTCPPacket+0xa90>
			if( xTCPWindowLoggingLevel > 0 )
 8005244:	4b40      	ldr	r3, [pc, #256]	@ (8005348 <xProcessReceivedTCPPacket+0x6b8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	f300 8286 	bgt.w	800575a <xProcessReceivedTCPPacket+0xaca>
				pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 800524e:	f89b 3041 	ldrb.w	r3, [fp, #65]	@ 0x41
				xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 8005252:	4658      	mov	r0, fp
				pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 8005254:	f043 0320 	orr.w	r3, r3, #32
 8005258:	f88b 3041 	strb.w	r3, [fp, #65]	@ 0x41
				xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800525c:	69a9      	ldr	r1, [r5, #24]
 800525e:	f7ff fb33 	bl	80048c8 <prvTCPHandleFin.isra.0>
				if( pxNetworkBuffer != NULL )
 8005262:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
				xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 8005264:	4680      	mov	r8, r0
		if( xMayClose == pdFALSE )
 8005266:	e6eb      	b.n	8005040 <xProcessReceivedTCPPacket+0x3b0>
					uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 8005268:	f106 0122 	add.w	r1, r6, #34	@ 0x22
 800526c:	4658      	mov	r0, fp
 800526e:	f7fe fe99 	bl	8003fa4 <prvSetSynAckOptions>
					pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 8005272:	2312      	movs	r3, #18
					uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8005274:	f100 0828 	add.w	r8, r0, #40	@ 0x28
					vTCPStateChange( pxSocket, eSYN_RECEIVED );
 8005278:	2104      	movs	r1, #4
					pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 800527a:	f886 302f 	strb.w	r3, [r6, #47]	@ 0x2f
					pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800527e:	f100 0314 	add.w	r3, r0, #20
					vTCPStateChange( pxSocket, eSYN_RECEIVED );
 8005282:	4658      	mov	r0, fp
					pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1UL;
 8005284:	3701      	adds	r7, #1
					pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	f886 302e 	strb.w	r3, [r6, #46]	@ 0x2e
					vTCPStateChange( pxSocket, eSYN_RECEIVED );
 800528c:	f7ff f864 	bl	8004358 <vTCPStateChange>
					pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL;
 8005290:	f8db 3100 	ldr.w	r3, [fp, #256]	@ 0x100
				if( pxNetworkBuffer != NULL )
 8005294:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
					pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL;
 8005296:	3301      	adds	r3, #1
					pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1UL;
 8005298:	f8cb 70fc 	str.w	r7, [fp, #252]	@ 0xfc
					pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1UL;
 800529c:	f8cb 70f4 	str.w	r7, [fp, #244]	@ 0xf4
					pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL;
 80052a0:	f8cb 3118 	str.w	r3, [fp, #280]	@ 0x118
					pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL; /* because we send a TCP_SYN. */
 80052a4:	f8cb 3104 	str.w	r3, [fp, #260]	@ 0x104
					break;
 80052a8:	e6ca      	b.n	8005040 <xProcessReceivedTCPPacket+0x3b0>
		ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 80052aa:	f8db 60f4 	ldr.w	r6, [fp, #244]	@ 0xf4
 80052ae:	e74f      	b.n	8005150 <xProcessReceivedTCPPacket+0x4c0>
		if( ( ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber ) ) > 0L )
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f73f ae37 	bgt.w	8004f24 <xProcessReceivedTCPPacket+0x294>
		if( ( ulReceiveLength > 0U ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eSYN_RECEIVED ) )
 80052b6:	2803      	cmp	r0, #3
 80052b8:	d901      	bls.n	80052be <xProcessReceivedTCPPacket+0x62e>
 80052ba:	2c00      	cmp	r4, #0
 80052bc:	d14a      	bne.n	8005354 <xProcessReceivedTCPPacket+0x6c4>
			pxTCPWindow->ucOptionLength = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	f88b 3120 	strb.w	r3, [fp, #288]	@ 0x120
		UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 80052c4:	9309      	str	r3, [sp, #36]	@ 0x24
			if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 80052c6:	2a04      	cmp	r2, #4
 80052c8:	d027      	beq.n	800531a <xProcessReceivedTCPPacket+0x68a>
 80052ca:	f89b 0053 	ldrb.w	r0, [fp, #83]	@ 0x53
 80052ce:	e63e      	b.n	8004f4e <xProcessReceivedTCPPacket+0x2be>
						FreeRTOS_debug_printf( ( "TCP: RST received from %lxip:%u for %u\n", ulRemoteIP, xRemotePort, xLocalPort ) );
 80052d0:	463b      	mov	r3, r7
 80052d2:	4632      	mov	r2, r6
 80052d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80052d6:	481e      	ldr	r0, [pc, #120]	@ (8005350 <xProcessReceivedTCPPacket+0x6c0>)
 80052d8:	f007 fe18 	bl	800cf0c <lUDPLoggingPrintf>
						if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 80052dc:	f89b 3053 	ldrb.w	r3, [fp, #83]	@ 0x53
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	f000 808b 	beq.w	80053fc <xProcessReceivedTCPPacket+0x76c>
 80052e6:	fa99 f989 	rev.w	r9, r9
							if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 80052ea:	f8db 30f4 	ldr.w	r3, [fp, #244]	@ 0xf4
 80052ee:	454b      	cmp	r3, r9
 80052f0:	f000 808d 	beq.w	800540e <xProcessReceivedTCPPacket+0x77e>
							else if( ( ulSequenceNumber > pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) &&
 80052f4:	f4bf acdd 	bcs.w	8004cb2 <xProcessReceivedTCPPacket+0x22>
									 ( ulSequenceNumber < ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 80052f8:	f8db 20e8 	ldr.w	r2, [fp, #232]	@ 0xe8
 80052fc:	4413      	add	r3, r2
							else if( ( ulSequenceNumber > pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) &&
 80052fe:	454b      	cmp	r3, r9
 8005300:	f67f acd7 	bls.w	8004cb2 <xProcessReceivedTCPPacket+0x22>
				TCPPacket_t * pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8005304:	69a8      	ldr	r0, [r5, #24]
				pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8005306:	f241 0450 	movw	r4, #4176	@ 0x1050
				prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 800530a:	2300      	movs	r3, #0
				pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 800530c:	85c4      	strh	r4, [r0, #46]	@ 0x2e
				prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 800530e:	2228      	movs	r2, #40	@ 0x28
 8005310:	4629      	mov	r1, r5
 8005312:	4618      	mov	r0, r3
 8005314:	f7fe fea6 	bl	8004064 <prvTCPReturnPacket>
		return pdFAIL;
 8005318:	e4cb      	b.n	8004cb2 <xProcessReceivedTCPPacket+0x22>
			if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 800531a:	f008 031f 	and.w	r3, r8, #31
 800531e:	2b02      	cmp	r3, #2
 8005320:	f000 816f 	beq.w	8005602 <xProcessReceivedTCPPacket+0x972>
			if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 8005324:	f018 0f01 	tst.w	r8, #1
 8005328:	f000 80ab 	beq.w	8005482 <xProcessReceivedTCPPacket+0x7f2>
 800532c:	f89b 0053 	ldrb.w	r0, [fp, #83]	@ 0x53
 8005330:	e610      	b.n	8004f54 <xProcessReceivedTCPPacket+0x2c4>
 8005332:	f10b 02e4 	add.w	r2, fp, #228	@ 0xe4
 8005336:	9208      	str	r2, [sp, #32]
 8005338:	e5a9      	b.n	8004e8e <xProcessReceivedTCPPacket+0x1fe>
 800533a:	bf00      	nop
 800533c:	20000014 	.word	0x20000014
 8005340:	080108d0 	.word	0x080108d0
 8005344:	08010b44 	.word	0x08010b44
 8005348:	200003d0 	.word	0x200003d0
 800534c:	08010c4c 	.word	0x08010c4c
 8005350:	08010a1c 	.word	0x08010a1c
			if( pxSocket->u.xTCP.rxStream != NULL )
 8005354:	f8db 3074 	ldr.w	r3, [fp, #116]	@ 0x74
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 8146 	beq.w	80055ea <xProcessReceivedTCPPacket+0x95a>
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800535e:	691a      	ldr	r2, [r3, #16]
        size_t uxHead = pxBuffer->uxHead;
 8005360:	6899      	ldr	r1, [r3, #8]
        size_t uxTail = pxBuffer->uxTail;
 8005362:	681b      	ldr	r3, [r3, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8005364:	4413      	add	r3, r2
 8005366:	3b01      	subs	r3, #1
 8005368:	1a5b      	subs	r3, r3, r1
        if( uxCount >= pxBuffer->LENGTH )
 800536a:	429a      	cmp	r2, r3
 800536c:	d800      	bhi.n	8005370 <xProcessReceivedTCPPacket+0x6e0>
            uxCount -= pxBuffer->LENGTH;
 800536e:	1a9b      	subs	r3, r3, r2
			lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulReceiveLength, ulSpace );
 8005370:	4639      	mov	r1, r7
 8005372:	4622      	mov	r2, r4
 8005374:	9808      	ldr	r0, [sp, #32]
 8005376:	f000 fe93 	bl	80060a0 <lTCPWindowRxCheck>
			if( lOffset >= 0 )
 800537a:	1e01      	subs	r1, r0, #0
 800537c:	f280 808f 	bge.w	800549e <xProcessReceivedTCPPacket+0x80e>
					if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 8005380:	f8db 3114 	ldr.w	r3, [fp, #276]	@ 0x114
 8005384:	2b00      	cmp	r3, #0
 8005386:	f040 8127 	bne.w	80055d8 <xProcessReceivedTCPPacket+0x948>
		UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 800538a:	f89b 3120 	ldrb.w	r3, [fp, #288]	@ 0x120
 800538e:	f8d5 a018 	ldr.w	sl, [r5, #24]
 8005392:	9309      	str	r3, [sp, #36]	@ 0x24
			if( uxOptionsLength != 0U )
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 83c5 	beq.w	8005b24 <xProcessReceivedTCPPacket+0xe94>
				if( xTCPWindowLoggingLevel >= 0 )
 800539a:	4ab7      	ldr	r2, [pc, #732]	@ (8005678 <xProcessReceivedTCPPacket+0x9e8>)
 800539c:	6812      	ldr	r2, [r2, #0]
 800539e:	2a00      	cmp	r2, #0
 80053a0:	db15      	blt.n	80053ce <xProcessReceivedTCPPacket+0x73e>
					FreeRTOS_debug_printf( ( "SACK[%d,%d]: optlen %lu sending %lu - %lu\n",
 80053a2:	f8db 2168 	ldr.w	r2, [fp, #360]	@ 0x168
 80053a6:	f8db 116c 	ldr.w	r1, [fp, #364]	@ 0x16c
 80053aa:	f8db 00f0 	ldr.w	r0, [fp, #240]	@ 0xf0
 80053ae:	ba12      	rev	r2, r2
 80053b0:	ba09      	rev	r1, r1
 80053b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80053b4:	eba1 0c00 	sub.w	ip, r1, r0
 80053b8:	1a10      	subs	r0, r2, r0
 80053ba:	f8bb 1024 	ldrh.w	r1, [fp, #36]	@ 0x24
 80053be:	f8bb 203c 	ldrh.w	r2, [fp, #60]	@ 0x3c
 80053c2:	e9cd 0c00 	strd	r0, ip, [sp]
 80053c6:	48ad      	ldr	r0, [pc, #692]	@ (800567c <xProcessReceivedTCPPacket+0x9ec>)
 80053c8:	f007 fda0 	bl	800cf0c <lUDPLoggingPrintf>
 80053cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
				( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 80053ce:	461a      	mov	r2, r3
 80053d0:	f50b 71b2 	add.w	r1, fp, #356	@ 0x164
 80053d4:	f10a 0036 	add.w	r0, sl, #54	@ 0x36
 80053d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80053da:	f008 fb21 	bl	800da20 <memcpy>
				pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80053de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053e0:	3314      	adds	r3, #20
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	f88a 302e 	strb.w	r3, [sl, #46]	@ 0x2e
			if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 80053e8:	f89b 2053 	ldrb.w	r2, [fp, #83]	@ 0x53
 80053ec:	e76b      	b.n	80052c6 <xProcessReceivedTCPPacket+0x636>
		if( ( ulReceiveLength > 0U ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eSYN_RECEIVED ) )
 80053ee:	2c00      	cmp	r4, #0
 80053f0:	d1b0      	bne.n	8005354 <xProcessReceivedTCPPacket+0x6c4>
			pxTCPWindow->ucOptionLength = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	46b2      	mov	sl, r6
 80053f6:	f88b 3120 	strb.w	r3, [fp, #288]	@ 0x120
 80053fa:	e5a1      	b.n	8004f40 <xProcessReceivedTCPPacket+0x2b0>
							if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1UL ) )
 80053fc:	f8db 3110 	ldr.w	r3, [fp, #272]	@ 0x110
 8005400:	9a08      	ldr	r2, [sp, #32]
 8005402:	3301      	adds	r3, #1
 8005404:	fa92 fa82 	rev.w	sl, r2
 8005408:	4553      	cmp	r3, sl
 800540a:	f47f ac52 	bne.w	8004cb2 <xProcessReceivedTCPPacket+0x22>
								vTCPStateChange( pxSocket, eCLOSED );
 800540e:	2100      	movs	r1, #0
 8005410:	4658      	mov	r0, fp
 8005412:	f7fe ffa1 	bl	8004358 <vTCPStateChange>
 8005416:	e44c      	b.n	8004cb2 <xProcessReceivedTCPPacket+0x22>
					FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %lu tx done %ld\n",
 8005418:	463b      	mov	r3, r7
 800541a:	f8bb 203c 	ldrh.w	r2, [fp, #60]	@ 0x3c
 800541e:	f8bb 1024 	ldrh.w	r1, [fp, #36]	@ 0x24
 8005422:	9000      	str	r0, [sp, #0]
 8005424:	4896      	ldr	r0, [pc, #600]	@ (8005680 <xProcessReceivedTCPPacket+0x9f0>)
 8005426:	f007 fd71 	bl	800cf0c <lUDPLoggingPrintf>
			if( xTCPWindowLoggingLevel > 0 )
 800542a:	4b93      	ldr	r3, [pc, #588]	@ (8005678 <xProcessReceivedTCPPacket+0x9e8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	dd0c      	ble.n	800544c <xProcessReceivedTCPPacket+0x7bc>
				FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %ld (Rx %lu Len %ld, Tx %lu)\n",
 8005432:	2100      	movs	r1, #0
 8005434:	4893      	ldr	r0, [pc, #588]	@ (8005684 <xProcessReceivedTCPPacket+0x9f4>)
 8005436:	e9db 2340 	ldrd	r2, r3, [fp, #256]	@ 0x100
 800543a:	1a9b      	subs	r3, r3, r2
 800543c:	f8db 20f0 	ldr.w	r2, [fp, #240]	@ 0xf0
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	eba8 0202 	sub.w	r2, r8, r2
 8005446:	4623      	mov	r3, r4
 8005448:	f007 fd60 	bl	800cf0c <lUDPLoggingPrintf>
			pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800544c:	2310      	movs	r3, #16
 800544e:	f886 302f 	strb.w	r3, [r6, #47]	@ 0x2f
			if( ulReceiveLength != 0U )
 8005452:	2c00      	cmp	r4, #0
 8005454:	f000 80cc 	beq.w	80055f0 <xProcessReceivedTCPPacket+0x960>
				uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8005458:	9a09      	ldr	r2, [sp, #36]	@ 0x24
				pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800545a:	f102 0314 	add.w	r3, r2, #20
				uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800545e:	f102 0828 	add.w	r8, r2, #40	@ 0x28
				pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8005462:	009b      	lsls	r3, r3, #2
				xSendLength = ( BaseType_t ) uxIntermediateResult;
 8005464:	4647      	mov	r7, r8
				pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8005466:	f886 302e 	strb.w	r3, [r6, #46]	@ 0x2e
				if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800546a:	f89b 3041 	ldrb.w	r3, [fp, #65]	@ 0x41
 800546e:	0658      	lsls	r0, r3, #25
 8005470:	f100 81c6 	bmi.w	8005800 <xProcessReceivedTCPPacket+0xb70>
			if( uxOptionsLength == 0U )
 8005474:	2a00      	cmp	r2, #0
 8005476:	f000 81ee 	beq.w	8005856 <xProcessReceivedTCPPacket+0xbc6>
				if( pxNetworkBuffer != NULL )
 800547a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
		ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 800547c:	f8db 60f4 	ldr.w	r6, [fp, #244]	@ 0xf4
 8005480:	e666      	b.n	8005150 <xProcessReceivedTCPPacket+0x4c0>
					xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 8005482:	69af      	ldr	r7, [r5, #24]
		uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8005484:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
		uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8005488:	f8d7 6026 	ldr.w	r6, [r7, #38]	@ 0x26
		if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 800548c:	f003 0217 	and.w	r2, r3, #23
 8005490:	ba36      	rev	r6, r6
 8005492:	2a10      	cmp	r2, #16
 8005494:	f000 8106 	beq.w	80056a4 <xProcessReceivedTCPPacket+0xa14>
 8005498:	2210      	movs	r2, #16
			FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X Queued %d, %d\n",
 800549a:	497b      	ldr	r1, [pc, #492]	@ (8005688 <xProcessReceivedTCPPacket+0x9f8>)
 800549c:	e62a      	b.n	80050f4 <xProcessReceivedTCPPacket+0x464>
				lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRecvData, ulReceiveLength );
 800549e:	4652      	mov	r2, sl
 80054a0:	4623      	mov	r3, r4
 80054a2:	4658      	mov	r0, fp
 80054a4:	f7fe fa72 	bl	800398c <lTCPAddRxdata>
				if( lStored != ( int32_t ) ulReceiveLength )
 80054a8:	4284      	cmp	r4, r0
 80054aa:	f43f af69 	beq.w	8005380 <xProcessReceivedTCPPacket+0x6f0>
					FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %ld / %lu bytes? ?\n", lStored, ulReceiveLength ) );
 80054ae:	4622      	mov	r2, r4
 80054b0:	4601      	mov	r1, r0
 80054b2:	4876      	ldr	r0, [pc, #472]	@ (800568c <xProcessReceivedTCPPacket+0x9fc>)
 80054b4:	f007 fd2a 	bl	800cf0c <lUDPLoggingPrintf>
				TCPPacket_t * pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 80054b8:	69aa      	ldr	r2, [r5, #24]
				pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 80054ba:	f241 4150 	movw	r1, #5200	@ 0x1450
				prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 80054be:	2300      	movs	r3, #0
				pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 80054c0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
				prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 80054c2:	4618      	mov	r0, r3
 80054c4:	2228      	movs	r2, #40	@ 0x28
 80054c6:	4629      	mov	r1, r5
 80054c8:	f7fe fdcc 	bl	8004064 <prvTCPReturnPacket>
		return xSendLength;
 80054cc:	e5bd      	b.n	800504a <xProcessReceivedTCPPacket+0x3ba>
				if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 80054ce:	f8bb 204e 	ldrh.w	r2, [fp, #78]	@ 0x4e
 80054d2:	f8bb 3050 	ldrh.w	r3, [fp, #80]	@ 0x50
 80054d6:	429a      	cmp	r2, r3
 80054d8:	f080 8169 	bcs.w	80057ae <xProcessReceivedTCPPacket+0xb1e>
													  FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 80054dc:	4648      	mov	r0, r9
 80054de:	4641      	mov	r1, r8
 80054e0:	2206      	movs	r2, #6
 80054e2:	f7fd f99f 	bl	8002824 <FreeRTOS_socket>
					if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 80054e6:	1e43      	subs	r3, r0, #1
													  FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 80054e8:	4681      	mov	r9, r0
					if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 80054ea:	3303      	adds	r3, #3
 80054ec:	f200 8222 	bhi.w	8005934 <xProcessReceivedTCPPacket+0xca4>
		pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 80054f0:	e9db 2307 	ldrd	r2, r3, [fp, #28]
 80054f4:	e9c0 2307 	strd	r2, r3, [r0, #28]
		pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 80054f8:	f89b 3026 	ldrb.w	r3, [fp, #38]	@ 0x26
 80054fc:	f880 3026 	strb.w	r3, [r0, #38]	@ 0x26
		pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 8005500:	e9db 0119 	ldrd	r0, r1, [fp, #100]	@ 0x64
 8005504:	e9db 231b 	ldrd	r2, r3, [fp, #108]	@ 0x6c
 8005508:	e9c9 0119 	strd	r0, r1, [r9, #100]	@ 0x64
 800550c:	e9c9 231b 	strd	r2, r3, [r9, #108]	@ 0x6c
		pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 8005510:	e9db 2337 	ldrd	r2, r3, [fp, #220]	@ 0xdc
 8005514:	e9c9 2337 	strd	r2, r3, [r9, #220]	@ 0xdc
				pxNewSocket->pxUserSemaphore = pxSocket->pxUserSemaphore;
 8005518:	f8db 3028 	ldr.w	r3, [fp, #40]	@ 0x28
 800551c:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
				pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
 8005520:	f8db 30d4 	ldr.w	r3, [fp, #212]	@ 0xd4
 8005524:	e9db 1233 	ldrd	r1, r2, [fp, #204]	@ 0xcc
 8005528:	f8c9 30d4 	str.w	r3, [r9, #212]	@ 0xd4
				if( pxSocket->pxSocketSet != NULL )
 800552c:	f8db 302c 	ldr.w	r3, [fp, #44]	@ 0x2c
				pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
 8005530:	e9c9 1233 	strd	r1, r2, [r9, #204]	@ 0xcc
				if( pxSocket->pxSocketSet != NULL )
 8005534:	b13b      	cbz	r3, 8005546 <xProcessReceivedTCPPacket+0x8b6>
					pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 8005536:	f8c9 302c 	str.w	r3, [r9, #44]	@ 0x2c
					pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 800553a:	f8db 3030 	ldr.w	r3, [fp, #48]	@ 0x30
 800553e:	f043 0305 	orr.w	r3, r3, #5
 8005542:	f8c9 3030 	str.w	r3, [r9, #48]	@ 0x30
		xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 8005546:	4b52      	ldr	r3, [pc, #328]	@ (8005690 <xProcessReceivedTCPPacket+0xa00>)
 8005548:	f8bb 1024 	ldrh.w	r1, [fp, #36]	@ 0x24
 800554c:	695b      	ldr	r3, [r3, #20]
		FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s\n",
 800554e:	f8df c150 	ldr.w	ip, [pc, #336]	@ 80056a0 <xProcessReceivedTCPPacket+0xa10>
		xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 8005552:	9311      	str	r3, [sp, #68]	@ 0x44
				pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8005554:	f899 3040 	ldrb.w	r3, [r9, #64]	@ 0x40
		FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s\n",
 8005558:	484e      	ldr	r0, [pc, #312]	@ (8005694 <xProcessReceivedTCPPacket+0xa04>)
				pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800555a:	f043 0304 	orr.w	r3, r3, #4
				pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 800555e:	f8c9 b054 	str.w	fp, [r9, #84]	@ 0x54
				pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8005562:	f889 3040 	strb.w	r3, [r9, #64]	@ 0x40
		pxSocket->u.xTCP.usChildCount++;
 8005566:	f8bb 204e 	ldrh.w	r2, [fp, #78]	@ 0x4e
		FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s\n",
 800556a:	f8bb 3050 	ldrh.w	r3, [fp, #80]	@ 0x50
		pxSocket->u.xTCP.usChildCount++;
 800556e:	3201      	adds	r2, #1
 8005570:	b292      	uxth	r2, r2
		FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s\n",
 8005572:	2a01      	cmp	r2, #1
 8005574:	bf18      	it	ne
 8005576:	4660      	movne	r0, ip
		pxSocket->u.xTCP.usChildCount++;
 8005578:	f8ab 204e 	strh.w	r2, [fp, #78]	@ 0x4e
		FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s\n",
 800557c:	9000      	str	r0, [sp, #0]
		xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800557e:	ba48      	rev16	r0, r1
 8005580:	f8ad 0042 	strh.w	r0, [sp, #66]	@ 0x42
		FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s\n",
 8005584:	4844      	ldr	r0, [pc, #272]	@ (8005698 <xProcessReceivedTCPPacket+0xa08>)
 8005586:	f007 fcc1 	bl	800cf0c <lUDPLoggingPrintf>
		if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 800558a:	2301      	movs	r3, #1
 800558c:	2208      	movs	r2, #8
 800558e:	a910      	add	r1, sp, #64	@ 0x40
 8005590:	4648      	mov	r0, r9
 8005592:	f7fd fb89 	bl	8002ca8 <vSocketBind>
 8005596:	2800      	cmp	r0, #0
 8005598:	f040 81e2 	bne.w	8005960 <xProcessReceivedTCPPacket+0xcd0>
		if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 800559c:	46cb      	mov	fp, r9
 800559e:	e576      	b.n	800508e <xProcessReceivedTCPPacket+0x3fe>
			pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 80055a0:	f36f 0300 	bfc	r3, #0, #1
 80055a4:	f88b 3040 	strb.w	r3, [fp, #64]	@ 0x40
			if( xTCPWindowLoggingLevel >= 0 )
 80055a8:	4b33      	ldr	r3, [pc, #204]	@ (8005678 <xProcessReceivedTCPPacket+0x9e8>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f280 810f 	bge.w	80057d0 <xProcessReceivedTCPPacket+0xb40>
			pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 80055b2:	f240 4302 	movw	r3, #1026	@ 0x402
 80055b6:	f8aa 3036 	strh.w	r3, [sl, #54]	@ 0x36
			pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 80055ba:	f8bb 304a 	ldrh.w	r3, [fp, #74]	@ 0x4a
			pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffU );
 80055be:	f88a 3039 	strb.w	r3, [sl, #57]	@ 0x39
			pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 80055c2:	0a1b      	lsrs	r3, r3, #8
 80055c4:	f88a 3038 	strb.w	r3, [sl, #56]	@ 0x38
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80055c8:	2360      	movs	r3, #96	@ 0x60
 80055ca:	f88a 302e 	strb.w	r3, [sl, #46]	@ 0x2e
			uxOptionsLength = 4U;
 80055ce:	2304      	movs	r3, #4
 80055d0:	f89b 0053 	ldrb.w	r0, [fp, #83]	@ 0x53
 80055d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80055d6:	e4ba      	b.n	8004f4e <xProcessReceivedTCPPacket+0x2be>
						( void ) lTCPAddRxdata( pxSocket, 0UL, NULL, pxTCPWindow->ulUserDataLength );
 80055d8:	2200      	movs	r2, #0
 80055da:	4658      	mov	r0, fp
 80055dc:	4611      	mov	r1, r2
 80055de:	f7fe f9d5 	bl	800398c <lTCPAddRxdata>
						pxTCPWindow->ulUserDataLength = 0;
 80055e2:	2300      	movs	r3, #0
 80055e4:	f8cb 3114 	str.w	r3, [fp, #276]	@ 0x114
		return xResult;
 80055e8:	e6cf      	b.n	800538a <xProcessReceivedTCPPacket+0x6fa>
				ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 80055ea:	f8db 306c 	ldr.w	r3, [fp, #108]	@ 0x6c
 80055ee:	e6bf      	b.n	8005370 <xProcessReceivedTCPPacket+0x6e0>
			if( uxOptionsLength == 0U )
 80055f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 813b 	beq.w	800586e <xProcessReceivedTCPPacket+0xbde>
				if( pxNetworkBuffer != NULL )
 80055f8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80055fa:	e526      	b.n	800504a <xProcessReceivedTCPPacket+0x3ba>
		UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 80055fc:	2300      	movs	r3, #0
 80055fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005600:	e661      	b.n	80052c6 <xProcessReceivedTCPPacket+0x636>
				FreeRTOS_debug_printf( ( "eSYN_RECEIVED: ACK expected, not SYN: peer missed our SYN+ACK\n" ) );
 8005602:	4826      	ldr	r0, [pc, #152]	@ (800569c <xProcessReceivedTCPPacket+0xa0c>)
 8005604:	f007 fc82 	bl	800cf0c <lUDPLoggingPrintf>
				vTCPStateChange( pxSocket, eSYN_FIRST );
 8005608:	2103      	movs	r1, #3
 800560a:	4658      	mov	r0, fp
 800560c:	f7fe fea4 	bl	8004358 <vTCPStateChange>
 8005610:	e65b      	b.n	80052ca <xProcessReceivedTCPPacket+0x63a>
			ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 8005612:	f8d6 102a 	ldr.w	r1, [r6, #42]	@ 0x2a
 8005616:	9808      	ldr	r0, [sp, #32]
 8005618:	ba09      	rev	r1, r1
 800561a:	f001 f823 	bl	8006664 <ulTCPWindowTxAck>
			if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 800561e:	f8db 3078 	ldr.w	r3, [fp, #120]	@ 0x78
 8005622:	4681      	mov	r9, r0
 8005624:	2800      	cmp	r0, #0
 8005626:	f43f adf9 	beq.w	800521c <xProcessReceivedTCPPacket+0x58c>
 800562a:	2b00      	cmp	r3, #0
 800562c:	f43f adfa 	beq.w	8005224 <xProcessReceivedTCPPacket+0x594>
				if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 8005630:	2200      	movs	r2, #0
 8005632:	4618      	mov	r0, r3
 8005634:	464b      	mov	r3, r9
 8005636:	4611      	mov	r1, r2
 8005638:	9200      	str	r2, [sp, #0]
 800563a:	f7fe fc41 	bl	8003ec0 <uxStreamBufferGet>
 800563e:	2800      	cmp	r0, #0
 8005640:	f43f adea 	beq.w	8005218 <xProcessReceivedTCPPacket+0x588>
					pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8005644:	f8db 2000 	ldr.w	r2, [fp]
							if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 8005648:	f8db 3030 	ldr.w	r3, [fp, #48]	@ 0x30
					pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 800564c:	f042 0102 	orr.w	r1, r2, #2
							if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 8005650:	079b      	lsls	r3, r3, #30
					pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8005652:	f8cb 1000 	str.w	r1, [fp]
							if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 8005656:	d504      	bpl.n	8005662 <xProcessReceivedTCPPacket+0x9d2>
								pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8005658:	f240 2302 	movw	r3, #514	@ 0x202
 800565c:	4313      	orrs	r3, r2
 800565e:	f8cb 3000 	str.w	r3, [fp]
							if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8005662:	f8db 30d0 	ldr.w	r3, [fp, #208]	@ 0xd0
 8005666:	2b00      	cmp	r3, #0
 8005668:	f43f add6 	beq.w	8005218 <xProcessReceivedTCPPacket+0x588>
								pxSocket->u.xTCP.pxHandleSent( ( Socket_t ) pxSocket, ulCount );
 800566c:	4649      	mov	r1, r9
 800566e:	4658      	mov	r0, fp
 8005670:	4798      	blx	r3
 8005672:	e5d1      	b.n	8005218 <xProcessReceivedTCPPacket+0x588>
			uxIndex = 1U;
 8005674:	4613      	mov	r3, r2
 8005676:	e4c7      	b.n	8005008 <xProcessReceivedTCPPacket+0x378>
 8005678:	200003d0 	.word	0x200003d0
 800567c:	08010ac4 	.word	0x08010ac4
 8005680:	08010ba8 	.word	0x08010ba8
 8005684:	08010c78 	.word	0x08010c78
 8005688:	080108c0 	.word	0x080108c0
 800568c:	08010a98 	.word	0x08010a98
 8005690:	20000014 	.word	0x20000014
 8005694:	080114a0 	.word	0x080114a0
 8005698:	080109cc 	.word	0x080109cc
 800569c:	08010b04 	.word	0x08010b04
 80056a0:	0801027c 	.word	0x0801027c
			pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 80056a4:	f8bb e03c 	ldrh.w	lr, [fp, #60]	@ 0x3c
			pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 80056a8:	f8bb 2024 	ldrh.w	r2, [fp, #36]	@ 0x24
					FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
 80056ac:	f89b 1042 	ldrb.w	r1, [fp, #66]	@ 0x42
 80056b0:	f89b 0053 	ldrb.w	r0, [fp, #83]	@ 0x53
			pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 80056b4:	f8db c100 	ldr.w	ip, [fp, #256]	@ 0x100
					FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
 80056b8:	f3c1 1800 	ubfx	r8, r1, #4, #1
 80056bc:	f8db 3038 	ldr.w	r3, [fp, #56]	@ 0x38
			pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 80056c0:	f8ab e19e 	strh.w	lr, [fp, #414]	@ 0x19e
			pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 80056c4:	f8ab 219c 	strh.w	r2, [fp, #412]	@ 0x19c
			else if( ulReceiveLength == 0U )
 80056c8:	2c00      	cmp	r4, #0
 80056ca:	d154      	bne.n	8005776 <xProcessReceivedTCPPacket+0xae6>
				pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 80056cc:	f8cb 60f4 	str.w	r6, [fp, #244]	@ 0xf4
			pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 80056d0:	f10c 0601 	add.w	r6, ip, #1
					FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
 80056d4:	f3c1 1100 	ubfx	r1, r1, #4, #1
			pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 80056d8:	f8cb 6110 	str.w	r6, [fp, #272]	@ 0x110
					FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
 80056dc:	9101      	str	r1, [sp, #4]
 80056de:	4ec4      	ldr	r6, [pc, #784]	@ (80059f0 <xProcessReceivedTCPPacket+0xd60>)
 80056e0:	49c4      	ldr	r1, [pc, #784]	@ (80059f4 <xProcessReceivedTCPPacket+0xd64>)
 80056e2:	f8cd e000 	str.w	lr, [sp]
 80056e6:	2802      	cmp	r0, #2
 80056e8:	bf08      	it	eq
 80056ea:	4631      	moveq	r1, r6
 80056ec:	48c2      	ldr	r0, [pc, #776]	@ (80059f8 <xProcessReceivedTCPPacket+0xd68>)
 80056ee:	f007 fc0d 	bl	800cf0c <lUDPLoggingPrintf>
			if( ( pxSocket->u.xTCP.ucTCPState == ( EventBits_t ) eCONNECT_SYN ) || ( ulReceiveLength != 0UL ) )
 80056f2:	f89b 3053 	ldrb.w	r3, [fp, #83]	@ 0x53
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d04d      	beq.n	8005796 <xProcessReceivedTCPPacket+0xb06>
 80056fa:	f1b4 0800 	subs.w	r8, r4, #0
 80056fe:	bf18      	it	ne
 8005700:	f04f 0801 	movne.w	r8, #1
 8005704:	2c00      	cmp	r4, #0
 8005706:	d146      	bne.n	8005796 <xProcessReceivedTCPPacket+0xb06>
					if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 8005708:	f89b 3042 	ldrb.w	r3, [fp, #66]	@ 0x42
			vTCPStateChange( pxSocket, eESTABLISHED );
 800570c:	2105      	movs	r1, #5
 800570e:	4658      	mov	r0, fp
					if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 8005710:	f013 0310 	ands.w	r3, r3, #16
						pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 8005714:	bf08      	it	eq
 8005716:	f8ab 30c9 	strheq.w	r3, [fp, #201]	@ 0xc9
			vTCPStateChange( pxSocket, eESTABLISHED );
 800571a:	f7fe fe1d 	bl	8004358 <vTCPStateChange>
 800571e:	e48f      	b.n	8005040 <xProcessReceivedTCPPacket+0x3b0>
				bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 8005720:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005724:	4648      	mov	r0, r9
 8005726:	f000 fba9 	bl	8005e7c <xTCPWindowRxEmpty>
 800572a:	4607      	mov	r7, r0
				bTxDone = xTCPWindowTxDone( pxTCPWindow );
 800572c:	4648      	mov	r0, r9
 800572e:	f000 fe83 	bl	8006438 <xTCPWindowTxDone>
				if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 8005732:	2f00      	cmp	r7, #0
 8005734:	f43f ae70 	beq.w	8005418 <xProcessReceivedTCPPacket+0x788>
 8005738:	2800      	cmp	r0, #0
 800573a:	f43f ae6d 	beq.w	8005418 <xProcessReceivedTCPPacket+0x788>
					ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 800573e:	f8db 20f4 	ldr.w	r2, [fp, #244]	@ 0xf4
 8005742:	1aa1      	subs	r1, r4, r2
 8005744:	4441      	add	r1, r8
					if( lDistance > 1 )
 8005746:	2901      	cmp	r1, #1
 8005748:	f300 80fb 	bgt.w	8005942 <xProcessReceivedTCPPacket+0xcb2>
			if( xTCPWindowLoggingLevel > 0 )
 800574c:	4bab      	ldr	r3, [pc, #684]	@ (80059fc <xProcessReceivedTCPPacket+0xd6c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	f77f ad7c 	ble.w	800524e <xProcessReceivedTCPPacket+0x5be>
				FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %ld (Rx %lu Len %ld, Tx %lu)\n",
 8005756:	f8db 1104 	ldr.w	r1, [fp, #260]	@ 0x104
 800575a:	f8db 3100 	ldr.w	r3, [fp, #256]	@ 0x100
 800575e:	f8db 20f0 	ldr.w	r2, [fp, #240]	@ 0xf0
 8005762:	1ac9      	subs	r1, r1, r3
 8005764:	48a6      	ldr	r0, [pc, #664]	@ (8005a00 <xProcessReceivedTCPPacket+0xd70>)
 8005766:	eba8 0202 	sub.w	r2, r8, r2
 800576a:	4623      	mov	r3, r4
 800576c:	9100      	str	r1, [sp, #0]
 800576e:	2101      	movs	r1, #1
 8005770:	f007 fbcc 	bl	800cf0c <lUDPLoggingPrintf>
			if( xMayClose != pdFALSE )
 8005774:	e56b      	b.n	800524e <xProcessReceivedTCPPacket+0x5be>
			pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8005776:	f10c 0601 	add.w	r6, ip, #1
					FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
 800577a:	2802      	cmp	r0, #2
			pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 800577c:	f8cb 6110 	str.w	r6, [fp, #272]	@ 0x110
					FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
 8005780:	f000 812e 	beq.w	80059e0 <xProcessReceivedTCPPacket+0xd50>
 8005784:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8005788:	489b      	ldr	r0, [pc, #620]	@ (80059f8 <xProcessReceivedTCPPacket+0xd68>)
 800578a:	f8cd e000 	str.w	lr, [sp]
 800578e:	9101      	str	r1, [sp, #4]
 8005790:	4998      	ldr	r1, [pc, #608]	@ (80059f4 <xProcessReceivedTCPPacket+0xd64>)
 8005792:	f007 fbbb 	bl	800cf0c <lUDPLoggingPrintf>
				pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8005796:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005798:	f102 0314 	add.w	r3, r2, #20
				uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800579c:	f102 0828 	add.w	r8, r2, #40	@ 0x28
				pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 80057a6:	2310      	movs	r3, #16
 80057a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80057ac:	e7ac      	b.n	8005708 <xProcessReceivedTCPPacket+0xa78>
					FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 80057ae:	4c95      	ldr	r4, [pc, #596]	@ (8005a04 <xProcessReceivedTCPPacket+0xd74>)
 80057b0:	4895      	ldr	r0, [pc, #596]	@ (8005a08 <xProcessReceivedTCPPacket+0xd78>)
 80057b2:	f8bb 1024 	ldrh.w	r1, [fp, #36]	@ 0x24
 80057b6:	2a01      	cmp	r2, #1
 80057b8:	bf18      	it	ne
 80057ba:	4620      	movne	r0, r4
				pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 80057bc:	f241 4450 	movw	r4, #5200	@ 0x1450
					FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 80057c0:	9000      	str	r0, [sp, #0]
 80057c2:	4892      	ldr	r0, [pc, #584]	@ (8005a0c <xProcessReceivedTCPPacket+0xd7c>)
 80057c4:	f007 fba2 	bl	800cf0c <lUDPLoggingPrintf>
				TCPPacket_t * pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 80057c8:	69aa      	ldr	r2, [r5, #24]
				prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 80057ca:	9b08      	ldr	r3, [sp, #32]
 80057cc:	f7ff bb11 	b.w	8004df2 <xProcessReceivedTCPPacket+0x162>
				FreeRTOS_debug_printf( ( "MSS: sending %d\n", pxSocket->u.xTCP.usCurMSS ) );
 80057d0:	f8bb 104a 	ldrh.w	r1, [fp, #74]	@ 0x4a
 80057d4:	488e      	ldr	r0, [pc, #568]	@ (8005a10 <xProcessReceivedTCPPacket+0xd80>)
 80057d6:	f007 fb99 	bl	800cf0c <lUDPLoggingPrintf>
			pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 80057da:	f240 4302 	movw	r3, #1026	@ 0x402
			if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 80057de:	f89b 2053 	ldrb.w	r2, [fp, #83]	@ 0x53
			pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 80057e2:	f8aa 3036 	strh.w	r3, [sl, #54]	@ 0x36
			pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 80057e6:	f8bb 304a 	ldrh.w	r3, [fp, #74]	@ 0x4a
			pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffU );
 80057ea:	f88a 3039 	strb.w	r3, [sl, #57]	@ 0x39
			pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 80057ee:	0a1b      	lsrs	r3, r3, #8
 80057f0:	f88a 3038 	strb.w	r3, [sl, #56]	@ 0x38
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80057f4:	2360      	movs	r3, #96	@ 0x60
 80057f6:	f88a 302e 	strb.w	r3, [sl, #46]	@ 0x2e
			uxOptionsLength = 4U;
 80057fa:	2304      	movs	r3, #4
 80057fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80057fe:	e562      	b.n	80052c6 <xProcessReceivedTCPPacket+0x636>
					pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8005800:	f8db 3108 	ldr.w	r3, [fp, #264]	@ 0x108
 8005804:	f8cb 3104 	str.w	r3, [fp, #260]	@ 0x104
			if( uxOptionsLength == 0U )
 8005808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800580a:	b323      	cbz	r3, 8005856 <xProcessReceivedTCPPacket+0xbc6>
		const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800580c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
				if( ( ulReceiveLength > 0U ) &&                                                   /* Data was sent to this socket. */
 800580e:	ae0f      	add	r6, sp, #60	@ 0x3c
 8005810:	f8db 007c 	ldr.w	r0, [fp, #124]	@ 0x7c
 8005814:	e4b2      	b.n	800517c <xProcessReceivedTCPPacket+0x4ec>
					( xSendLength == uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) && /* No Tx data or options to be sent. */
 8005816:	f89b 1053 	ldrb.w	r1, [fp, #83]	@ 0x53
 800581a:	2905      	cmp	r1, #5
 800581c:	f000 80a8 	beq.w	8005970 <xProcessReceivedTCPPacket+0xce0>
 8005820:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8005824:	e4a8      	b.n	8005178 <xProcessReceivedTCPPacket+0x4e8>
				if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 8005826:	f1b8 0f02 	cmp.w	r8, #2
 800582a:	f43f abf5 	beq.w	8005018 <xProcessReceivedTCPPacket+0x388>
 800582e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8005832:	2b03      	cmp	r3, #3
 8005834:	f47f abf0 	bne.w	8005018 <xProcessReceivedTCPPacket+0x388>
					if( xHasSYNFlag != 0 )
 8005838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800583a:	b14b      	cbz	r3, 8005850 <xProcessReceivedTCPPacket+0xbc0>
						pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 800583c:	f89b 3042 	ldrb.w	r3, [fp, #66]	@ 0x42
						pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 8005840:	f899 2002 	ldrb.w	r2, [r9, #2]
						pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 8005844:	f043 0310 	orr.w	r3, r3, #16
						pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 8005848:	f88b 20ca 	strb.w	r2, [fp, #202]	@ 0xca
						pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 800584c:	f88b 3042 	strb.w	r3, [fp, #66]	@ 0x42
					uxIndex = tcpTCP_OPT_WSOPT_LEN;
 8005850:	2303      	movs	r3, #3
 8005852:	f7ff bbd9 	b.w	8005008 <xProcessReceivedTCPPacket+0x378>
				lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8005856:	a90f      	add	r1, sp, #60	@ 0x3c
 8005858:	4658      	mov	r0, fp
 800585a:	f7fe febf 	bl	80045dc <prvTCPPrepareSend.constprop.0>
				if( lSendResult > 0 )
 800585e:	2800      	cmp	r0, #0
		const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 8005860:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
		ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8005862:	f8db 60f4 	ldr.w	r6, [fp, #244]	@ 0xf4
				if( lSendResult > 0 )
 8005866:	f77f ac73 	ble.w	8005150 <xProcessReceivedTCPPacket+0x4c0>
				lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800586a:	4680      	mov	r8, r0
 800586c:	e470      	b.n	8005150 <xProcessReceivedTCPPacket+0x4c0>
 800586e:	ae0f      	add	r6, sp, #60	@ 0x3c
 8005870:	4658      	mov	r0, fp
 8005872:	4631      	mov	r1, r6
 8005874:	f7fe feb2 	bl	80045dc <prvTCPPrepareSend.constprop.0>
				if( lSendResult > 0 )
 8005878:	f1b0 0800 	subs.w	r8, r0, #0
		const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800587c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
				if( lSendResult > 0 )
 800587e:	f77f abe3 	ble.w	8005048 <xProcessReceivedTCPPacket+0x3b8>
			prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8005882:	4647      	mov	r7, r8
 8005884:	f8db 007c 	ldr.w	r0, [fp, #124]	@ 0x7c
 8005888:	e478      	b.n	800517c <xProcessReceivedTCPPacket+0x4ec>
			pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 800588a:	f8bb 303c 	ldrh.w	r3, [fp, #60]	@ 0x3c
				vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800588e:	4631      	mov	r1, r6
 8005890:	9808      	ldr	r0, [sp, #32]
				pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 8005892:	3601      	adds	r6, #1
			pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 8005894:	f8ab 319e 	strh.w	r3, [fp, #414]	@ 0x19e
			pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 8005898:	f8bb 3024 	ldrh.w	r3, [fp, #36]	@ 0x24
				vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800589c:	f8db 2110 	ldr.w	r2, [fp, #272]	@ 0x110
			pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 80058a0:	f8ab 319c 	strh.w	r3, [fp, #412]	@ 0x19c
				pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 80058a4:	2310      	movs	r3, #16
 80058a6:	f88b 30b1 	strb.w	r3, [fp, #177]	@ 0xb1
				pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 80058aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 80058ae:	f8bb 304a 	ldrh.w	r3, [fp, #74]	@ 0x4a
 80058b2:	f000 fbd1 	bl	8006058 <vTCPWindowInit>
				pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 80058b6:	f8db 3104 	ldr.w	r3, [fp, #260]	@ 0x104
					FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
 80058ba:	f8bb 2024 	ldrh.w	r2, [fp, #36]	@ 0x24
				pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 80058be:	3301      	adds	r3, #1
					FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
 80058c0:	f8bb e03c 	ldrh.w	lr, [fp, #60]	@ 0x3c
 80058c4:	f89b 0053 	ldrb.w	r0, [fp, #83]	@ 0x53
				pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 80058c8:	f8cb 3104 	str.w	r3, [fp, #260]	@ 0x104
				pxTCPWindow->ulNextTxSequenceNumber++;
 80058cc:	f8db 3118 	ldr.w	r3, [fp, #280]	@ 0x118
 80058d0:	f8db c100 	ldr.w	ip, [fp, #256]	@ 0x100
 80058d4:	3301      	adds	r3, #1
 80058d6:	f89b 1042 	ldrb.w	r1, [fp, #66]	@ 0x42
				pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 80058da:	f8cb 60fc 	str.w	r6, [fp, #252]	@ 0xfc
				pxTCPWindow->ulNextTxSequenceNumber++;
 80058de:	f8cb 3118 	str.w	r3, [fp, #280]	@ 0x118
				pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 80058e2:	f8cb 60f4 	str.w	r6, [fp, #244]	@ 0xf4
				pxTCPWindow->ulNextTxSequenceNumber++;
 80058e6:	f8db 3038 	ldr.w	r3, [fp, #56]	@ 0x38
 80058ea:	e6f1      	b.n	80056d0 <xProcessReceivedTCPPacket+0xa40>
					FreeRTOS_closesocket( pxSocket );
 80058ec:	4658      	mov	r0, fp
 80058ee:	f7fd fa8f 	bl	8002e10 <FreeRTOS_closesocket>
 80058f2:	e418      	b.n	8005126 <xProcessReceivedTCPPacket+0x496>
			if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 80058f4:	f1b8 0f03 	cmp.w	r8, #3
 80058f8:	f67f ab8e 	bls.w	8005018 <xProcessReceivedTCPPacket+0x388>
 80058fc:	f899 3001 	ldrb.w	r3, [r9, #1]
 8005900:	2b04      	cmp	r3, #4
 8005902:	f47f ab89 	bne.w	8005018 <xProcessReceivedTCPPacket+0x388>
				uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 8005906:	f8b9 6002 	ldrh.w	r6, [r9, #2]
				if( pxSocket->u.xTCP.usInitMSS != uxNewMSS )
 800590a:	f8bb 104c 	ldrh.w	r1, [fp, #76]	@ 0x4c
 800590e:	ba76      	rev16	r6, r6
 8005910:	b2b6      	uxth	r6, r6
 8005912:	428e      	cmp	r6, r1
 8005914:	d008      	beq.n	8005928 <xProcessReceivedTCPPacket+0xc98>
					if( uxNewMSS == 0U )
 8005916:	2e00      	cmp	r6, #0
 8005918:	f43f ab7e 	beq.w	8005018 <xProcessReceivedTCPPacket+0x388>
						FreeRTOS_debug_printf( ( "MSS change %u -> %lu\n", pxSocket->u.xTCP.usInitMSS, uxNewMSS ) );
 800591c:	4632      	mov	r2, r6
 800591e:	483d      	ldr	r0, [pc, #244]	@ (8005a14 <xProcessReceivedTCPPacket+0xd84>)
 8005920:	f007 faf4 	bl	800cf0c <lUDPLoggingPrintf>
				if( xReturn == pdFALSE )
 8005924:	f8bb 104c 	ldrh.w	r1, [fp, #76]	@ 0x4c
					if( pxSocket->u.xTCP.usInitMSS > uxNewMSS )
 8005928:	42b1      	cmp	r1, r6
 800592a:	f200 80df 	bhi.w	8005aec <xProcessReceivedTCPPacket+0xe5c>
					uxIndex = tcpTCP_OPT_MSS_LEN;
 800592e:	2304      	movs	r3, #4
 8005930:	f7ff bb6a 	b.w	8005008 <xProcessReceivedTCPPacket+0x378>
						FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 8005934:	4838      	ldr	r0, [pc, #224]	@ (8005a18 <xProcessReceivedTCPPacket+0xd88>)
				pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8005936:	f241 4450 	movw	r4, #5200	@ 0x1450
						FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 800593a:	f007 fae7 	bl	800cf0c <lUDPLoggingPrintf>
				TCPPacket_t * pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800593e:	69a8      	ldr	r0, [r5, #24]
				pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8005940:	e4e3      	b.n	800530a <xProcessReceivedTCPPacket+0x67a>
						FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %ld (cur %lu high %lu)\n",
 8005942:	f8db 30f0 	ldr.w	r3, [fp, #240]	@ 0xf0
 8005946:	f8db 00fc 	ldr.w	r0, [fp, #252]	@ 0xfc
 800594a:	1ad2      	subs	r2, r2, r3
 800594c:	1ac3      	subs	r3, r0, r3
 800594e:	4833      	ldr	r0, [pc, #204]	@ (8005a1c <xProcessReceivedTCPPacket+0xd8c>)
 8005950:	f007 fadc 	bl	800cf0c <lUDPLoggingPrintf>
			if( xTCPWindowLoggingLevel > 0 )
 8005954:	4b29      	ldr	r3, [pc, #164]	@ (80059fc <xProcessReceivedTCPPacket+0xd6c>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	f77f ad77 	ble.w	800544c <xProcessReceivedTCPPacket+0x7bc>
 800595e:	e568      	b.n	8005432 <xProcessReceivedTCPPacket+0x7a2>
			FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
 8005960:	482f      	ldr	r0, [pc, #188]	@ (8005a20 <xProcessReceivedTCPPacket+0xd90>)
 8005962:	f007 fad3 	bl	800cf0c <lUDPLoggingPrintf>
			( void ) FreeRTOS_closesocket( pxNewSocket );
 8005966:	4648      	mov	r0, r9
 8005968:	f7fd fa52 	bl	8002e10 <FreeRTOS_closesocket>
						if( pxSocket == NULL )
 800596c:	f7ff b9a1 	b.w	8004cb2 <xProcessReceivedTCPPacket+0x22>
					( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) &&                /* Connection established. */
 8005970:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 8005974:	2a10      	cmp	r2, #16
 8005976:	f47f af53 	bne.w	8005820 <xProcessReceivedTCPPacket+0xb90>
					if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800597a:	4285      	cmp	r5, r0
 800597c:	d006      	beq.n	800598c <xProcessReceivedTCPPacket+0xcfc>
						if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800597e:	b118      	cbz	r0, 8005988 <xProcessReceivedTCPPacket+0xcf8>
							vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8005980:	f001 f842 	bl	8006a08 <vReleaseNetworkBufferAndDescriptor>
 8005984:	f8bb 304a 	ldrh.w	r3, [fp, #74]	@ 0x4a
						pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 8005988:	f8cb 507c 	str.w	r5, [fp, #124]	@ 0x7c
					if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||            /* Received a small message. */
 800598c:	429c      	cmp	r4, r3
 800598e:	f0c0 80a6 	bcc.w	8005ade <xProcessReceivedTCPPacket+0xe4e>
						pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 8005992:	ebb6 0f43 	cmp.w	r6, r3, lsl #1
 8005996:	bfac      	ite	ge
 8005998:	2014      	movge	r0, #20
 800599a:	2002      	movlt	r0, #2
					if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 800599c:	4b17      	ldr	r3, [pc, #92]	@ (80059fc <xProcessReceivedTCPPacket+0xd6c>)
 800599e:	f8ab 0048 	strh.w	r0, [fp, #72]	@ 0x48
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	f77f ab53 	ble.w	8005050 <xProcessReceivedTCPPacket+0x3c0>
 80059aa:	f8bb 1024 	ldrh.w	r1, [fp, #36]	@ 0x24
 80059ae:	2917      	cmp	r1, #23
 80059b0:	f43f ab4e 	beq.w	8005050 <xProcessReceivedTCPPacket+0x3c0>
						FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %lu SEQ %lu (len %lu) tmout %u d %lu\n",
 80059b4:	f8db 20f4 	ldr.w	r2, [fp, #244]	@ 0xf4
 80059b8:	2428      	movs	r4, #40	@ 0x28
 80059ba:	f8db 30f0 	ldr.w	r3, [fp, #240]	@ 0xf0
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	f8bb 203c 	ldrh.w	r2, [fp, #60]	@ 0x3c
 80059c4:	9401      	str	r4, [sp, #4]
 80059c6:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80059ca:	f8db 0110 	ldr.w	r0, [fp, #272]	@ 0x110
 80059ce:	f8db 4100 	ldr.w	r4, [fp, #256]	@ 0x100
 80059d2:	1b00      	subs	r0, r0, r4
 80059d4:	9000      	str	r0, [sp, #0]
 80059d6:	4813      	ldr	r0, [pc, #76]	@ (8005a24 <xProcessReceivedTCPPacket+0xd94>)
 80059d8:	f007 fa98 	bl	800cf0c <lUDPLoggingPrintf>
				if( pxNetworkBuffer != NULL )
 80059dc:	f7ff bb38 	b.w	8005050 <xProcessReceivedTCPPacket+0x3c0>
					FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
 80059e0:	4903      	ldr	r1, [pc, #12]	@ (80059f0 <xProcessReceivedTCPPacket+0xd60>)
 80059e2:	4805      	ldr	r0, [pc, #20]	@ (80059f8 <xProcessReceivedTCPPacket+0xd68>)
 80059e4:	e9cd e800 	strd	lr, r8, [sp]
 80059e8:	f007 fa90 	bl	800cf0c <lUDPLoggingPrintf>
			if( ( pxSocket->u.xTCP.ucTCPState == ( EventBits_t ) eCONNECT_SYN ) || ( ulReceiveLength != 0UL ) )
 80059ec:	e6d3      	b.n	8005796 <xProcessReceivedTCPPacket+0xb06>
 80059ee:	bf00      	nop
 80059f0:	080108e0 	.word	0x080108e0
 80059f4:	080108e8 	.word	0x080108e8
 80059f8:	08010b78 	.word	0x08010b78
 80059fc:	200003d0 	.word	0x200003d0
 8005a00:	08010c78 	.word	0x08010c78
 8005a04:	0801027c 	.word	0x0801027c
 8005a08:	080114a0 	.word	0x080114a0
 8005a0c:	0801097c 	.word	0x0801097c
 8005a10:	08010af0 	.word	0x08010af0
 8005a14:	08010a68 	.word	0x08010a68
 8005a18:	080109ac 	.word	0x080109ac
 8005a1c:	08010bd8 	.word	0x08010bd8
 8005a20:	080109f8 	.word	0x080109f8
 8005a24:	08010c10 	.word	0x08010c10
							ucLen -= 2U;
 8005a28:	1e8b      	subs	r3, r1, #2
 8005a2a:	b2db      	uxtb	r3, r3
							while( ucLen >= ( uint8_t ) 8U )
 8005a2c:	2b07      	cmp	r3, #7
 8005a2e:	d958      	bls.n	8005ae2 <xProcessReceivedTCPPacket+0xe52>
 8005a30:	f1a1 030a 	sub.w	r3, r1, #10
 8005a34:	f109 020a 	add.w	r2, r9, #10
 8005a38:	f109 0602 	add.w	r6, r9, #2
 8005a3c:	f003 0cf8 	and.w	ip, r3, #248	@ 0xf8
 8005a40:	fa5f fe83 	uxtb.w	lr, r3
 8005a44:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8005a48:	4462      	add	r2, ip
							pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8005a4a:	461f      	mov	r7, r3
 8005a4c:	920a      	str	r2, [sp, #40]	@ 0x28
 8005a4e:	e9cd 4a0b 	strd	r4, sl, [sp, #44]	@ 0x2c
 8005a52:	4674      	mov	r4, lr
 8005a54:	46e2      	mov	sl, ip
 8005a56:	e002      	b.n	8005a5e <xProcessReceivedTCPPacket+0xdce>
							while( ucLen >= ( uint8_t ) 8U )
 8005a58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a5a:	429e      	cmp	r6, r3
 8005a5c:	d030      	beq.n	8005ac0 <xProcessReceivedTCPPacket+0xe30>
			uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 8005a5e:	6831      	ldr	r1, [r6, #0]
							while( ucLen >= ( uint8_t ) 8U )
 8005a60:	3608      	adds	r6, #8
 8005a62:	f856 2c04 	ldr.w	r2, [r6, #-4]
			uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 8005a66:	ba09      	rev	r1, r1
 8005a68:	9808      	ldr	r0, [sp, #32]
 8005a6a:	ba12      	rev	r2, r2
 8005a6c:	f000 fe04 	bl	8006678 <ulTCPWindowTxSack>
			if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 8005a70:	f8db 2078 	ldr.w	r2, [fp, #120]	@ 0x78
 8005a74:	4603      	mov	r3, r0
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d0ee      	beq.n	8005a58 <xProcessReceivedTCPPacket+0xdc8>
 8005a7a:	2a00      	cmp	r2, #0
 8005a7c:	d0ec      	beq.n	8005a58 <xProcessReceivedTCPPacket+0xdc8>
				( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 8005a7e:	4610      	mov	r0, r2
 8005a80:	2200      	movs	r2, #0
 8005a82:	930d      	str	r3, [sp, #52]	@ 0x34
 8005a84:	4611      	mov	r1, r2
 8005a86:	9200      	str	r2, [sp, #0]
 8005a88:	f7fe fa1a 	bl	8003ec0 <uxStreamBufferGet>
							pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
 8005a8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a8e:	4658      	mov	r0, fp
 8005a90:	4619      	mov	r1, r3
				pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8005a92:	f8db 3000 	ldr.w	r3, [fp]
 8005a96:	f043 0202 	orr.w	r2, r3, #2
							pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8005a9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
				pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8005a9e:	f8cb 2000 	str.w	r2, [fp]
							pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8005aa2:	f043 0302 	orr.w	r3, r3, #2
						if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 8005aa6:	f8db 2030 	ldr.w	r2, [fp, #48]	@ 0x30
 8005aaa:	f012 0f02 	tst.w	r2, #2
							pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8005aae:	bf18      	it	ne
 8005ab0:	f8cb 3000 	strne.w	r3, [fp]
						if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8005ab4:	f8db 30d0 	ldr.w	r3, [fp, #208]	@ 0xd0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0cd      	beq.n	8005a58 <xProcessReceivedTCPPacket+0xdc8>
							pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
 8005abc:	4798      	blx	r3
 8005abe:	e7cb      	b.n	8005a58 <xProcessReceivedTCPPacket+0xdc8>
								ucLen -= 8U;
 8005ac0:	46a6      	mov	lr, r4
 8005ac2:	ebc7 1347 	rsb	r3, r7, r7, lsl #5
 8005ac6:	46d4      	mov	ip, sl
 8005ac8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005aca:	eb0e 03c3 	add.w	r3, lr, r3, lsl #3
 8005ace:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
								uxIndex += 8U;
 8005ad2:	f10c 0c0a 	add.w	ip, ip, #10
								ucLen -= 8U;
 8005ad6:	b2db      	uxtb	r3, r3
				uxIndex += ( size_t ) ucLen;
 8005ad8:	4463      	add	r3, ip
						if( uxResult == 0UL )
 8005ada:	f7ff ba95 	b.w	8005008 <xProcessReceivedTCPPacket+0x378>
						pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 8005ade:	2002      	movs	r0, #2
 8005ae0:	e75c      	b.n	800599c <xProcessReceivedTCPPacket+0xd0c>
							uxIndex += 2U;
 8005ae2:	f04f 0c02 	mov.w	ip, #2
				uxIndex += ( size_t ) ucLen;
 8005ae6:	4463      	add	r3, ip
						if( uxResult == 0UL )
 8005ae8:	f7ff ba8e 	b.w	8005008 <xProcessReceivedTCPPacket+0x378>
						pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 8005aec:	f89b 3040 	ldrb.w	r3, [fp, #64]	@ 0x40
						if( pxSocket->u.xTCP.usCurMSS > uxNewMSS )
 8005af0:	f8bb 104a 	ldrh.w	r1, [fp, #74]	@ 0x4a
						pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 8005af4:	f043 0301 	orr.w	r3, r3, #1
						if( pxSocket->u.xTCP.usCurMSS > uxNewMSS )
 8005af8:	428e      	cmp	r6, r1
						pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 8005afa:	f88b 3040 	strb.w	r3, [fp, #64]	@ 0x40
						if( pxSocket->u.xTCP.usCurMSS > uxNewMSS )
 8005afe:	d316      	bcc.n	8005b2e <xProcessReceivedTCPPacket+0xe9e>
						pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 8005b00:	f8db 30e8 	ldr.w	r3, [fp, #232]	@ 0xe8
 8005b04:	fbb3 f3f6 	udiv	r3, r3, r6
 8005b08:	fb06 f303 	mul.w	r3, r6, r3
 8005b0c:	f8cb 30e8 	str.w	r3, [fp, #232]	@ 0xe8
 8005b10:	2300      	movs	r3, #0
 8005b12:	f366 030f 	bfi	r3, r6, #0, #16
 8005b16:	f366 431f 	bfi	r3, r6, #16, #16
						pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 8005b1a:	f8cb 31a0 	str.w	r3, [fp, #416]	@ 0x1a0
						pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 8005b1e:	f8cb 304a 	str.w	r3, [fp, #74]	@ 0x4a
						if( uxResult == 0UL )
 8005b22:	e704      	b.n	800592e <xProcessReceivedTCPPacket+0xc9e>
		if( ( pxSocket->u.xTCP.ucTCPState >= ( EventBits_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 8005b24:	f89b 0053 	ldrb.w	r0, [fp, #83]	@ 0x53
 8005b28:	4602      	mov	r2, r0
 8005b2a:	f7ff ba06 	b.w	8004f3a <xProcessReceivedTCPPacket+0x2aa>
							FreeRTOS_debug_printf( ( "Change mss %d => %lu\n", pxSocket->u.xTCP.usCurMSS, uxNewMSS ) );
 8005b2e:	4632      	mov	r2, r6
 8005b30:	4801      	ldr	r0, [pc, #4]	@ (8005b38 <xProcessReceivedTCPPacket+0xea8>)
 8005b32:	f007 f9eb 	bl	800cf0c <lUDPLoggingPrintf>
							pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 8005b36:	e7e3      	b.n	8005b00 <xProcessReceivedTCPPacket+0xe70>
 8005b38:	08010a80 	.word	0x08010a80

08005b3c <FreeRTOS_GetTCPStateName>:
			if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 8005b3c:	280c      	cmp	r0, #12
 8005b3e:	d803      	bhi.n	8005b48 <FreeRTOS_GetTCPStateName+0xc>
			return pcStateNames[ xIndex ];
 8005b40:	4b02      	ldr	r3, [pc, #8]	@ (8005b4c <FreeRTOS_GetTCPStateName+0x10>)
 8005b42:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005b46:	4770      	bx	lr
 8005b48:	4801      	ldr	r0, [pc, #4]	@ (8005b50 <FreeRTOS_GetTCPStateName+0x14>)
		}
 8005b4a:	4770      	bx	lr
 8005b4c:	08010d58 	.word	0x08010d58
 8005b50:	0801065c 	.word	0x0801065c

08005b54 <xTCPCheckNewClient>:
		BaseType_t xResult = pdFALSE;
		const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );

		/* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
		 * who has access. */
		for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8005b54:	4a12      	ldr	r2, [pc, #72]	@ (8005ba0 <xTCPCheckNewClient+0x4c>)
 8005b56:	8c81      	ldrh	r1, [r0, #36]	@ 0x24
			 pxIterator != pxEndTCP;
 8005b58:	f102 0c08 	add.w	ip, r2, #8
	{
 8005b5c:	b538      	push	{r3, r4, r5, lr}
		for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8005b5e:	68d3      	ldr	r3, [r2, #12]
			 pxIterator != pxEndTCP;
 8005b60:	4563      	cmp	r3, ip
 8005b62:	d01a      	beq.n	8005b9a <xTCPCheckNewClient+0x46>
 8005b64:	fa91 fe91 	rev16.w	lr, r1
 8005b68:	4605      	mov	r5, r0
 8005b6a:	fa1f fe8e 	uxth.w	lr, lr
 8005b6e:	e002      	b.n	8005b76 <xTCPCheckNewClient+0x22>
			 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8005b70:	685b      	ldr	r3, [r3, #4]
			 pxIterator != pxEndTCP;
 8005b72:	4563      	cmp	r3, ip
 8005b74:	d011      	beq.n	8005b9a <xTCPCheckNewClient+0x46>
		{
			if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	4572      	cmp	r2, lr
 8005b7a:	d1f9      	bne.n	8005b70 <xTCPCheckNewClient+0x1c>
			{
				pxFound = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8005b7c:	68da      	ldr	r2, [r3, #12]

				if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8005b7e:	f892 4027 	ldrb.w	r4, [r2, #39]	@ 0x27
 8005b82:	2c06      	cmp	r4, #6
 8005b84:	d1f4      	bne.n	8005b70 <xTCPCheckNewClient+0x1c>
 8005b86:	f892 0040 	ldrb.w	r0, [r2, #64]	@ 0x40
 8005b8a:	0780      	lsls	r0, r0, #30
 8005b8c:	d5f0      	bpl.n	8005b70 <xTCPCheckNewClient+0x1c>
				{
					pxSocket->u.xTCP.pxPeerSocket = pxFound;
 8005b8e:	656a      	str	r2, [r5, #84]	@ 0x54
					FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
 8005b90:	4804      	ldr	r0, [pc, #16]	@ (8005ba4 <xTCPCheckNewClient+0x50>)
 8005b92:	f007 f9bb 	bl	800cf0c <lUDPLoggingPrintf>
					xResult = pdTRUE;
 8005b96:	2001      	movs	r0, #1
				}
			}
		}

		return xResult;
	}
 8005b98:	bd38      	pop	{r3, r4, r5, pc}
		BaseType_t xResult = pdFALSE;
 8005b9a:	2000      	movs	r0, #0
	}
 8005b9c:	bd38      	pop	{r3, r4, r5, pc}
 8005b9e:	bf00      	nop
 8005ba0:	2000039c 	.word	0x2000039c
 8005ba4:	08010cb4 	.word	0x08010cb4

08005ba8 <prvTCPWindowTxHasSpace>:
		{
			const ListItem_t * pxItem;
			TCPSegment_t * pxReturn;

			/* Returns the head of a queue but it won't be detached. */
			if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8005ba8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005baa:	b193      	cbz	r3, 8005bd2 <prvTCPWindowTxHasSpace+0x2a>
				pxReturn = NULL;
			}
			else
			{
				pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
				pxReturn = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 8005bac:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005bae:	68db      	ldr	r3, [r3, #12]
			/* This function will look if there is new transmission data.  It will
			 * return true if there is data to be sent. */

			pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );

			if( pxSegment == NULL )
 8005bb0:	b17b      	cbz	r3, 8005bd2 <prvTCPWindowTxHasSpace+0x2a>
			}
			else
			{
				/* How much data is outstanding, i.e. how much data has been sent
				 * but not yet acknowledged ? */
				if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 8005bb2:	6a82      	ldr	r2, [r0, #40]	@ 0x28

				/* Subtract this from the peer's space. */
				ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );

				/* See if the next segment may be sent. */
				if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 8005bb4:	689b      	ldr	r3, [r3, #8]
		{
 8005bb6:	b430      	push	{r4, r5}
				if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 8005bb8:	6a04      	ldr	r4, [r0, #32]
 8005bba:	42a2      	cmp	r2, r4
 8005bbc:	d30f      	bcc.n	8005bde <prvTCPWindowTxHasSpace+0x36>

				/* If 'xHasSpace', it looks like the peer has at least space for 1
				 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
				 * limitation of the transmission window (in case of many resends it
				 * may be decreased). */
				if( ( ulTxOutstanding != 0UL ) && ( pxWindow->xSize.ulTxWindowLength < ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 8005bbe:	1b12      	subs	r2, r2, r4
 8005bc0:	d009      	beq.n	8005bd6 <prvTCPWindowTxHasSpace+0x2e>
 8005bc2:	18d4      	adds	r4, r2, r3
 8005bc4:	6885      	ldr	r5, [r0, #8]
 8005bc6:	42a5      	cmp	r5, r4
 8005bc8:	4620      	mov	r0, r4
 8005bca:	d204      	bcs.n	8005bd6 <prvTCPWindowTxHasSpace+0x2e>
				xHasSpace = pdFALSE;
 8005bcc:	2000      	movs	r0, #0
					xHasSpace = pdFALSE;
				}
			}

			return xHasSpace;
		}
 8005bce:	bc30      	pop	{r4, r5}
 8005bd0:	4770      	bx	lr
				xHasSpace = pdFALSE;
 8005bd2:	4618      	mov	r0, r3
		}
 8005bd4:	4770      	bx	lr
				ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 8005bd6:	428a      	cmp	r2, r1
 8005bd8:	bf94      	ite	ls
 8005bda:	1a89      	subls	r1, r1, r2
 8005bdc:	1a49      	subhi	r1, r1, r1
				if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 8005bde:	4299      	cmp	r1, r3
		}
 8005be0:	bc30      	pop	{r4, r5}
				if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 8005be2:	bf34      	ite	cc
 8005be4:	2000      	movcc	r0, #0
 8005be6:	2001      	movcs	r0, #1
		}
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop

08005bec <vTCPWindowFree>:
		{
 8005bec:	b538      	push	{r3, r4, r5, lr}
			if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 8005bee:	6a83      	ldr	r3, [r0, #40]	@ 0x28
		{
 8005bf0:	4604      	mov	r4, r0
			if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 8005bf2:	b113      	cbz	r3, 8005bfa <vTCPWindowFree+0xe>
				( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 8005bf4:	3018      	adds	r0, #24
 8005bf6:	f002 fcf5 	bl	80085e4 <uxListRemove>
			pxSegment->ulSequenceNumber = 0UL;
 8005bfa:	2300      	movs	r3, #0
			if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 8005bfc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
				( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8005bfe:	f104 052c 	add.w	r5, r4, #44	@ 0x2c
			pxSegment->ulSequenceNumber = 0UL;
 8005c02:	6023      	str	r3, [r4, #0]
			pxSegment->lDataLength = 0L;
 8005c04:	60a3      	str	r3, [r4, #8]
			pxSegment->u.ulFlags = 0UL;
 8005c06:	6163      	str	r3, [r4, #20]
			if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 8005c08:	b112      	cbz	r2, 8005c10 <vTCPWindowFree+0x24>
				( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f002 fcea 	bl	80085e4 <uxListRemove>
		pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 8005c10:	4b07      	ldr	r3, [pc, #28]	@ (8005c30 <vTCPWindowFree+0x44>)
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	f1a3 0108 	sub.w	r1, r3, #8
 8005c18:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
		pxWhere->pxPrevious->pxNext = pxNewListItem;
 8005c1c:	6055      	str	r5, [r2, #4]
		( pxList->uxNumberOfItems )++;
 8005c1e:	f853 2c08 	ldr.w	r2, [r3, #-8]
		pxWhere->pxPrevious = pxNewListItem;
 8005c22:	609d      	str	r5, [r3, #8]
		( pxList->uxNumberOfItems )++;
 8005c24:	3201      	adds	r2, #1
		listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8005c26:	63e1      	str	r1, [r4, #60]	@ 0x3c
		( pxList->uxNumberOfItems )++;
 8005c28:	f843 2c08 	str.w	r2, [r3, #-8]
		}
 8005c2c:	bd38      	pop	{r3, r4, r5, pc}
 8005c2e:	bf00      	nop
 8005c30:	200003dc 	.word	0x200003dc

08005c34 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
		static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
												uint32_t ulFirst,
												uint32_t ulLast )
		{
 8005c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			uint32_t ulBytesConfirmed = 0U;
			uint32_t ulSequenceNumber = ulFirst, ulDataLength;
			const ListItem_t * pxIterator;
			const ListItem_t * pxEnd = listGET_END_MARKER( &pxWindow->xTxSegments );
 8005c38:	f100 0998 	add.w	r9, r0, #152	@ 0x98
			 * RTO is Retransmit timeout
			 *
			 * A Smoothed RTT will increase quickly, but it is conservative when
			 * becoming smaller. */

			pxIterator = listGET_NEXT( pxEnd );
 8005c3c:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
		{
 8005c40:	b089      	sub	sp, #36	@ 0x24

			while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8005c42:	45a1      	cmp	r9, r4
 8005c44:	d02a      	beq.n	8005c9c <prvTCPWindowTxCheckAck+0x68>
 8005c46:	f102 3aff 	add.w	sl, r2, #4294967295
 8005c4a:	4616      	mov	r6, r2
			if( ( ( b - ( a + 1UL ) ) & 0x80000000UL ) == 0UL )
 8005c4c:	ebaa 0301 	sub.w	r3, sl, r1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	db23      	blt.n	8005c9c <prvTCPWindowTxCheckAck+0x68>
 8005c54:	4605      	mov	r5, r0
			uint32_t ulSequenceNumber = ulFirst, ulDataLength;
 8005c56:	460b      	mov	r3, r1
			uint32_t ulBytesConfirmed = 0U;
 8005c58:	f04f 0800 	mov.w	r8, #0
 8005c5c:	9106      	str	r1, [sp, #24]
			{
				xDoUnlink = pdFALSE;
				pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8005c5e:	68e7      	ldr	r7, [r4, #12]

				/* Move to the next item because the current item might get
				 * removed. */
				pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8005c60:	6864      	ldr	r4, [r4, #4]

				/* Continue if this segment does not fall within the ACK'd range. */
				if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 8005c62:	683a      	ldr	r2, [r7, #0]
			if( ( ( a - ( b + 1UL ) ) & 0x80000000UL ) == 0UL )
 8005c64:	43d1      	mvns	r1, r2
 8005c66:	42d9      	cmn	r1, r3
 8005c68:	d409      	bmi.n	8005c7e <prvTCPWindowTxCheckAck+0x4a>
			while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8005c6a:	45a1      	cmp	r9, r4
 8005c6c:	d003      	beq.n	8005c76 <prvTCPWindowTxCheckAck+0x42>
			if( ( ( b - ( a + 1UL ) ) & 0x80000000UL ) == 0UL )
 8005c6e:	ebaa 0203 	sub.w	r2, sl, r3
 8005c72:	2a00      	cmp	r2, #0
 8005c74:	daf3      	bge.n	8005c5e <prvTCPWindowTxCheckAck+0x2a>

				ulSequenceNumber += ulDataLength;
			}

			return ulBytesConfirmed;
		}
 8005c76:	4640      	mov	r0, r8
 8005c78:	b009      	add	sp, #36	@ 0x24
 8005c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d1f9      	bne.n	8005c76 <prvTCPWindowTxCheckAck+0x42>
				ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	4611      	mov	r1, r2
 8005c86:	9205      	str	r2, [sp, #20]
				if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8005c88:	7dba      	ldrb	r2, [r7, #22]
					if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 8005c8a:	eb01 0b03 	add.w	fp, r1, r3
				if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8005c8e:	0791      	lsls	r1, r2, #30
 8005c90:	d50a      	bpl.n	8005ca8 <prvTCPWindowTxCheckAck+0x74>
				if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8005c92:	6a2a      	ldr	r2, [r5, #32]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d034      	beq.n	8005d02 <prvTCPWindowTxCheckAck+0xce>
				ulSequenceNumber += ulDataLength;
 8005c98:	465b      	mov	r3, fp
 8005c9a:	e7e6      	b.n	8005c6a <prvTCPWindowTxCheckAck+0x36>
			uint32_t ulBytesConfirmed = 0U;
 8005c9c:	f04f 0800 	mov.w	r8, #0
		}
 8005ca0:	4640      	mov	r0, r8
 8005ca2:	b009      	add	sp, #36	@ 0x24
 8005ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( ( ( a - ( b + 1UL ) ) & 0x80000000UL ) == 0UL )
 8005ca8:	ebab 0106 	sub.w	r1, fp, r6
 8005cac:	2901      	cmp	r1, #1
 8005cae:	d414      	bmi.n	8005cda <prvTCPWindowTxCheckAck+0xa6>
								uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 8005cb0:	69ea      	ldr	r2, [r5, #28]
								FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %lu - %lu Partial sequence number %lu - %lu\n",
 8005cb2:	4832      	ldr	r0, [pc, #200]	@ (8005d7c <prvTCPWindowTxCheckAck+0x148>)
								uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 8005cb4:	1a99      	subs	r1, r3, r2
								FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %lu - %lu Partial sequence number %lu - %lu\n",
 8005cb6:	1ab6      	subs	r6, r6, r2
 8005cb8:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8005cbc:	9a05      	ldr	r2, [sp, #20]
 8005cbe:	9600      	str	r6, [sp, #0]
 8005cc0:	440a      	add	r2, r1
 8005cc2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8005cc6:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	@ 0xb8
 8005cca:	f8b5 10ba 	ldrh.w	r1, [r5, #186]	@ 0xba
 8005cce:	f007 f91d 	bl	800cf0c <lUDPLoggingPrintf>
		}
 8005cd2:	4640      	mov	r0, r8
 8005cd4:	b009      	add	sp, #36	@ 0x24
 8005cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					pxSegment->u.bits.bAcked = pdTRUE;
 8005cda:	f042 0202 	orr.w	r2, r2, #2
 8005cde:	75ba      	strb	r2, [r7, #22]
					if( ( pxSegment->u.bits.ucTransmitCount == 1U ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 8005ce0:	7d3a      	ldrb	r2, [r7, #20]
 8005ce2:	2a01      	cmp	r2, #1
 8005ce4:	d029      	beq.n	8005d3a <prvTCPWindowTxCheckAck+0x106>
				if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8005ce6:	6a2a      	ldr	r2, [r5, #32]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d00a      	beq.n	8005d02 <prvTCPWindowTxCheckAck+0xce>
				if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 8005cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0d2      	beq.n	8005c98 <prvTCPWindowTxCheckAck+0x64>
					( void ) uxListRemove( &pxSegment->xQueueItem );
 8005cf2:	f107 0018 	add.w	r0, r7, #24
 8005cf6:	f002 fc75 	bl	80085e4 <uxListRemove>
				ulSequenceNumber += ulDataLength;
 8005cfa:	465b      	mov	r3, fp
 8005cfc:	e7b5      	b.n	8005c6a <prvTCPWindowTxCheckAck+0x36>
				if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d1f4      	bne.n	8005cec <prvTCPWindowTxCheckAck+0xb8>
					if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8005d02:	4b1f      	ldr	r3, [pc, #124]	@ (8005d80 <prvTCPWindowTxCheckAck+0x14c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	dd03      	ble.n	8005d12 <prvTCPWindowTxCheckAck+0xde>
 8005d0a:	f8b5 30b8 	ldrh.w	r3, [r5, #184]	@ 0xb8
 8005d0e:	2b17      	cmp	r3, #23
 8005d10:	d108      	bne.n	8005d24 <prvTCPWindowTxCheckAck+0xf0>
					pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8005d12:	9b05      	ldr	r3, [sp, #20]
					vTCPWindowFree( pxSegment );
 8005d14:	4638      	mov	r0, r7
					pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8005d16:	441a      	add	r2, r3
					ulBytesConfirmed += ulDataLength;
 8005d18:	4498      	add	r8, r3
					pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8005d1a:	622a      	str	r2, [r5, #32]
					vTCPWindowFree( pxSegment );
 8005d1c:	f7ff ff66 	bl	8005bec <vTCPWindowFree>
				ulSequenceNumber += ulDataLength;
 8005d20:	465b      	mov	r3, fp
 8005d22:	e7a2      	b.n	8005c6a <prvTCPWindowTxCheckAck+0x36>
						FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck: %lu - %lu Ready sequence number %lu\n",
 8005d24:	69e9      	ldr	r1, [r5, #28]
 8005d26:	9806      	ldr	r0, [sp, #24]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	1a72      	subs	r2, r6, r1
 8005d2c:	1a5b      	subs	r3, r3, r1
 8005d2e:	1a41      	subs	r1, r0, r1
 8005d30:	4814      	ldr	r0, [pc, #80]	@ (8005d84 <prvTCPWindowTxCheckAck+0x150>)
 8005d32:	f007 f8eb 	bl	800cf0c <lUDPLoggingPrintf>
 8005d36:	6a2a      	ldr	r2, [r5, #32]
 8005d38:	e7eb      	b.n	8005d12 <prvTCPWindowTxCheckAck+0xde>
					if( ( pxSegment->u.bits.ucTransmitCount == 1U ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 8005d3a:	455e      	cmp	r6, fp
 8005d3c:	d1d3      	bne.n	8005ce6 <prvTCPWindowTxCheckAck+0xb2>
		return( ( xTaskGetTickCount() - ( ( TickType_t ) pxTimer->ulBorn ) ) * portTICK_PERIOD_MS );
 8005d3e:	9307      	str	r3, [sp, #28]
 8005d40:	f003 f9e4 	bl	800910c <xTaskGetTickCount>
 8005d44:	693a      	ldr	r2, [r7, #16]
						if( pxWindow->lSRTT >= mS )
 8005d46:	9b07      	ldr	r3, [sp, #28]
		return( ( xTaskGetTickCount() - ( ( TickType_t ) pxTimer->ulBorn ) ) * portTICK_PERIOD_MS );
 8005d48:	1a81      	subs	r1, r0, r2
						if( pxWindow->lSRTT >= mS )
 8005d4a:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8005d4c:	428a      	cmp	r2, r1
 8005d4e:	db0e      	blt.n	8005d6e <prvTCPWindowTxCheckAck+0x13a>
							pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8005d50:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8005d54:	1851      	adds	r1, r2, r1
 8005d56:	bf48      	it	mi
 8005d58:	3107      	addmi	r1, #7
 8005d5a:	10c9      	asrs	r1, r1, #3
						if( pxWindow->lSRTT < winSRTT_CAP_mS )
 8005d5c:	2931      	cmp	r1, #49	@ 0x31
				if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8005d5e:	6a2a      	ldr	r2, [r5, #32]
 8005d60:	63a9      	str	r1, [r5, #56]	@ 0x38
						if( pxWindow->lSRTT < winSRTT_CAP_mS )
 8005d62:	dccc      	bgt.n	8005cfe <prvTCPWindowTxCheckAck+0xca>
							pxWindow->lSRTT = winSRTT_CAP_mS;
 8005d64:	2132      	movs	r1, #50	@ 0x32
				if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8005d66:	4293      	cmp	r3, r2
							pxWindow->lSRTT = winSRTT_CAP_mS;
 8005d68:	63a9      	str	r1, [r5, #56]	@ 0x38
				if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8005d6a:	d1bf      	bne.n	8005cec <prvTCPWindowTxCheckAck+0xb8>
 8005d6c:	e7c9      	b.n	8005d02 <prvTCPWindowTxCheckAck+0xce>
							pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 8005d6e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005d72:	1851      	adds	r1, r2, r1
 8005d74:	bf48      	it	mi
 8005d76:	3103      	addmi	r1, #3
 8005d78:	1089      	asrs	r1, r1, #2
 8005d7a:	e7ef      	b.n	8005d5c <prvTCPWindowTxCheckAck+0x128>
 8005d7c:	08010d8c 	.word	0x08010d8c
 8005d80:	200003d0 	.word	0x200003d0
 8005d84:	08010dd8 	.word	0x08010dd8

08005d88 <xTCPWindowNew>:
		{
 8005d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 8005d8c:	f8df a0cc 	ldr.w	sl, [pc, #204]	@ 8005e5c <xTCPWindowNew+0xd4>
		{
 8005d90:	461e      	mov	r6, r3
			if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 8005d92:	f8da 4000 	ldr.w	r4, [sl]
 8005d96:	2c00      	cmp	r4, #0
 8005d98:	d049      	beq.n	8005e2e <xTCPWindowNew+0xa6>
				pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 8005d9a:	f8da 700c 	ldr.w	r7, [sl, #12]
				pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 8005d9e:	4605      	mov	r5, r0
 8005da0:	4689      	mov	r9, r1
 8005da2:	4690      	mov	r8, r2
 8005da4:	68fc      	ldr	r4, [r7, #12]
				configASSERT( pxSegment != NULL );
 8005da6:	2c00      	cmp	r4, #0
 8005da8:	d04b      	beq.n	8005e42 <xTCPWindowNew+0xba>
				( void ) uxListRemove( pxItem );
 8005daa:	4638      	mov	r0, r7
 8005dac:	f002 fc1a 	bl	80085e4 <uxListRemove>
				if( xIsForRx != 0 )
 8005db0:	bb46      	cbnz	r6, 8005e04 <xTCPWindowNew+0x7c>
		( pxList->uxNumberOfItems )++;
 8005db2:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
			vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8005db6:	f105 0190 	add.w	r1, r5, #144	@ 0x90
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8005dba:	f8d5 20a0 	ldr.w	r2, [r5, #160]	@ 0xa0
			vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8005dbe:	f105 0098 	add.w	r0, r5, #152	@ 0x98
		( pxList->uxNumberOfItems )++;
 8005dc2:	3301      	adds	r3, #1
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8005dc4:	60ba      	str	r2, [r7, #8]
		pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 8005dc6:	6078      	str	r0, [r7, #4]
		pxWhere->pxPrevious->pxNext = pxNewListItem;
 8005dc8:	6057      	str	r7, [r2, #4]
		pxWhere->pxPrevious = pxNewListItem;
 8005dca:	f8c5 70a0 	str.w	r7, [r5, #160]	@ 0xa0
		listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8005dce:	6139      	str	r1, [r7, #16]
		( pxList->uxNumberOfItems )++;
 8005dd0:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
		pxTimer->ulBorn = xTaskGetTickCount();
 8005dd4:	f003 f99a 	bl	800910c <xTaskGetTickCount>
				pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8005dd8:	f04f 0300 	mov.w	r3, #0
						if( xLowestLength > xLength )
 8005ddc:	4a1c      	ldr	r2, [pc, #112]	@ (8005e50 <xTCPWindowNew+0xc8>)
				pxSegment->u.ulFlags = 0;
 8005dde:	2100      	movs	r1, #0
		pxTimer->ulBorn = xTaskGetTickCount();
 8005de0:	6120      	str	r0, [r4, #16]
				pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8005de2:	f366 0382 	bfi	r3, r6, #2, #1
		}
 8005de6:	4620      	mov	r0, r4
				pxSegment->u.ulFlags = 0;
 8005de8:	6161      	str	r1, [r4, #20]
				pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8005dea:	75a3      	strb	r3, [r4, #22]
						UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 8005dec:	f8da 3000 	ldr.w	r3, [sl]
						if( xLowestLength > xLength )
 8005df0:	6811      	ldr	r1, [r2, #0]
				pxSegment->ulSequenceNumber = ulSequenceNumber;
 8005df2:	f8c4 9000 	str.w	r9, [r4]
						if( xLowestLength > xLength )
 8005df6:	4299      	cmp	r1, r3
				pxSegment->lMaxLength = lCount;
 8005df8:	e9c4 8801 	strd	r8, r8, [r4, #4]
							xLowestLength = xLength;
 8005dfc:	bf88      	it	hi
 8005dfe:	6013      	strhi	r3, [r2, #0]
		}
 8005e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		( pxList->uxNumberOfItems )++;
 8005e04:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
			vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8005e08:	f105 01a4 	add.w	r1, r5, #164	@ 0xa4
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8005e0c:	f8d5 20b4 	ldr.w	r2, [r5, #180]	@ 0xb4
			vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8005e10:	f105 00ac 	add.w	r0, r5, #172	@ 0xac
		( pxList->uxNumberOfItems )++;
 8005e14:	3301      	adds	r3, #1
				pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8005e16:	2601      	movs	r6, #1
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8005e18:	60ba      	str	r2, [r7, #8]
		pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 8005e1a:	6078      	str	r0, [r7, #4]
		pxWhere->pxPrevious->pxNext = pxNewListItem;
 8005e1c:	6057      	str	r7, [r2, #4]
		pxWhere->pxPrevious = pxNewListItem;
 8005e1e:	f8c5 70b4 	str.w	r7, [r5, #180]	@ 0xb4
		listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8005e22:	6139      	str	r1, [r7, #16]
		( pxList->uxNumberOfItems )++;
 8005e24:	f8c5 30a4 	str.w	r3, [r5, #164]	@ 0xa4
		pxTimer->ulBorn = xTaskGetTickCount();
 8005e28:	f003 f970 	bl	800910c <xTaskGetTickCount>
				pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8005e2c:	e7d4      	b.n	8005dd8 <xTCPWindowNew+0x50>
				FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	4808      	ldr	r0, [pc, #32]	@ (8005e54 <xTCPWindowNew+0xcc>)
 8005e32:	bf0c      	ite	eq
 8005e34:	2154      	moveq	r1, #84	@ 0x54
 8005e36:	2152      	movne	r1, #82	@ 0x52
 8005e38:	f007 f868 	bl	800cf0c <lUDPLoggingPrintf>
		}
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				configASSERT( pxSegment != NULL );
 8005e42:	f240 2136 	movw	r1, #566	@ 0x236
 8005e46:	4804      	ldr	r0, [pc, #16]	@ (8005e58 <xTCPWindowNew+0xd0>)
 8005e48:	f7fa ff56 	bl	8000cf8 <vAssertCalled>
 8005e4c:	e7ad      	b.n	8005daa <xTCPWindowNew+0x22>
 8005e4e:	bf00      	nop
 8005e50:	20000010 	.word	0x20000010
 8005e54:	08010e18 	.word	0x08010e18
 8005e58:	08010e48 	.word	0x08010e48
 8005e5c:	200003d4 	.word	0x200003d4

08005e60 <vListInsertGeneric>:
		( pxList->uxNumberOfItems )++;
 8005e60:	6803      	ldr	r3, [r0, #0]
	{
 8005e62:	b410      	push	{r4}
		( pxList->uxNumberOfItems )++;
 8005e64:	3301      	adds	r3, #1
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8005e66:	6894      	ldr	r4, [r2, #8]
		pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 8005e68:	604a      	str	r2, [r1, #4]
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8005e6a:	608c      	str	r4, [r1, #8]
		pxWhere->pxPrevious->pxNext = pxNewListItem;
 8005e6c:	6061      	str	r1, [r4, #4]
		pxWhere->pxPrevious = pxNewListItem;
 8005e6e:	6091      	str	r1, [r2, #8]
	}
 8005e70:	f85d 4b04 	ldr.w	r4, [sp], #4
		listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8005e74:	6108      	str	r0, [r1, #16]
		( pxList->uxNumberOfItems )++;
 8005e76:	6003      	str	r3, [r0, #0]
	}
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop

08005e7c <xTCPWindowRxEmpty>:
		{
 8005e7c:	b508      	push	{r3, lr}
			if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 8005e7e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8005e82:	b10b      	cbz	r3, 8005e88 <xTCPWindowRxEmpty+0xc>
				xReturn = pdFALSE;
 8005e84:	2000      	movs	r0, #0
		}
 8005e86:	bd08      	pop	{r3, pc}
			else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 8005e88:	6903      	ldr	r3, [r0, #16]
 8005e8a:	6982      	ldr	r2, [r0, #24]
		if( ( ( a - b ) & 0x80000000UL ) == 0UL )
 8005e8c:	1a99      	subs	r1, r3, r2
 8005e8e:	2900      	cmp	r1, #0
 8005e90:	db01      	blt.n	8005e96 <xTCPWindowRxEmpty+0x1a>
				xReturn = pdTRUE;
 8005e92:	2001      	movs	r0, #1
		}
 8005e94:	bd08      	pop	{r3, pc}
				FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %lu highest %lu (empty)\n",
 8005e96:	68c1      	ldr	r1, [r0, #12]
 8005e98:	4802      	ldr	r0, [pc, #8]	@ (8005ea4 <xTCPWindowRxEmpty+0x28>)
 8005e9a:	1a52      	subs	r2, r2, r1
 8005e9c:	1a59      	subs	r1, r3, r1
 8005e9e:	f007 f835 	bl	800cf0c <lUDPLoggingPrintf>
				xReturn = pdFALSE;
 8005ea2:	e7ef      	b.n	8005e84 <xTCPWindowRxEmpty+0x8>
 8005ea4:	08010e80 	.word	0x08010e80

08005ea8 <vTCPWindowDestroy>:
		{
 8005ea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
				if( listLIST_IS_INITIALISED( pxSegments ) )
 8005eac:	f8d0 3098 	ldr.w	r3, [r0, #152]	@ 0x98
		{
 8005eb0:	4682      	mov	sl, r0
				if( listLIST_IS_INITIALISED( pxSegments ) )
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	d037      	beq.n	8005f26 <vTCPWindowDestroy+0x7e>
 8005eb6:	f8da 30ac 	ldr.w	r3, [sl, #172]	@ 0xac
 8005eba:	3301      	adds	r3, #1
 8005ebc:	d001      	beq.n	8005ec2 <vTCPWindowDestroy+0x1a>
		}
 8005ebe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8005ec2:	f8da 30a4 	ldr.w	r3, [sl, #164]	@ 0xa4
					pxSegments = &( pxWindow->xRxSegments );
 8005ec6:	f10a 0ba4 	add.w	fp, sl, #164	@ 0xa4
					while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8005eca:	f04f 0901 	mov.w	r9, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0f5      	beq.n	8005ebe <vTCPWindowDestroy+0x16>
 8005ed2:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 8005f38 <vTCPWindowDestroy+0x90>
			pxSegment->ulSequenceNumber = 0UL;
 8005ed6:	2700      	movs	r7, #0
 8005ed8:	f1a8 0508 	sub.w	r5, r8, #8
						pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 8005edc:	f8db 300c 	ldr.w	r3, [fp, #12]
 8005ee0:	68dc      	ldr	r4, [r3, #12]
			if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 8005ee2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
				( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 8005ee4:	f104 0018 	add.w	r0, r4, #24
				( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8005ee8:	f104 062c 	add.w	r6, r4, #44	@ 0x2c
			if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 8005eec:	b10b      	cbz	r3, 8005ef2 <vTCPWindowDestroy+0x4a>
				( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 8005eee:	f002 fb79 	bl	80085e4 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 8005ef2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
				( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8005ef4:	4630      	mov	r0, r6
			pxSegment->ulSequenceNumber = 0UL;
 8005ef6:	6027      	str	r7, [r4, #0]
			pxSegment->lDataLength = 0L;
 8005ef8:	60a7      	str	r7, [r4, #8]
			pxSegment->u.ulFlags = 0UL;
 8005efa:	6167      	str	r7, [r4, #20]
			if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 8005efc:	b10b      	cbz	r3, 8005f02 <vTCPWindowDestroy+0x5a>
				( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8005efe:	f002 fb71 	bl	80085e4 <uxListRemove>
		( pxList->uxNumberOfItems )++;
 8005f02:	682b      	ldr	r3, [r5, #0]
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8005f04:	692a      	ldr	r2, [r5, #16]
		( pxList->uxNumberOfItems )++;
 8005f06:	3301      	adds	r3, #1
		pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 8005f08:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8005f0c:	6362      	str	r2, [r4, #52]	@ 0x34
		( pxList->uxNumberOfItems )++;
 8005f0e:	602b      	str	r3, [r5, #0]
					while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8005f10:	f8db 3000 	ldr.w	r3, [fp]
		pxWhere->pxPrevious->pxNext = pxNewListItem;
 8005f14:	6056      	str	r6, [r2, #4]
		pxWhere->pxPrevious = pxNewListItem;
 8005f16:	612e      	str	r6, [r5, #16]
		listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8005f18:	63e5      	str	r5, [r4, #60]	@ 0x3c
					while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1de      	bne.n	8005edc <vTCPWindowDestroy+0x34>
			for( xRound = 0; xRound < 2; xRound++ )
 8005f1e:	f1b9 0f00 	cmp.w	r9, #0
 8005f22:	d0c8      	beq.n	8005eb6 <vTCPWindowDestroy+0xe>
 8005f24:	e7cb      	b.n	8005ebe <vTCPWindowDestroy+0x16>
					while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8005f26:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
					pxSegments = &( pxWindow->xTxSegments );
 8005f2a:	f100 0b90 	add.w	fp, r0, #144	@ 0x90
					while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d0c1      	beq.n	8005eb6 <vTCPWindowDestroy+0xe>
			for( xRound = 0; xRound < 2; xRound++ )
 8005f32:	f04f 0900 	mov.w	r9, #0
 8005f36:	e7cc      	b.n	8005ed2 <vTCPWindowDestroy+0x2a>
 8005f38:	200003dc 	.word	0x200003dc

08005f3c <vTCPWindowCreate>:
	{
 8005f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				if( xTCPSegments == NULL )
 8005f40:	4d40      	ldr	r5, [pc, #256]	@ (8006044 <vTCPWindowCreate+0x108>)
	{
 8005f42:	b083      	sub	sp, #12
 8005f44:	4688      	mov	r8, r1
 8005f46:	4607      	mov	r7, r0
				if( xTCPSegments == NULL )
 8005f48:	6829      	ldr	r1, [r5, #0]
	{
 8005f4a:	4692      	mov	sl, r2
 8005f4c:	469b      	mov	fp, r3
 8005f4e:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
				if( xTCPSegments == NULL )
 8005f52:	2900      	cmp	r1, #0
 8005f54:	d045      	beq.n	8005fe2 <vTCPWindowCreate+0xa6>
				vListInitialise( &( pxWindow->xTxSegments ) );
 8005f56:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8005f5a:	f002 fb0d 	bl	8008578 <vListInitialise>
				vListInitialise( &( pxWindow->xRxSegments ) );
 8005f5e:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8005f62:	f002 fb09 	bl	8008578 <vListInitialise>
				vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 8005f66:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8005f6a:	f002 fb05 	bl	8008578 <vListInitialise>
				vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 8005f6e:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8005f72:	f002 fb01 	bl	8008578 <vListInitialise>
				vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 8005f76:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8005f7a:	f002 fafd 	bl	8008578 <vListInitialise>
		if( xTCPWindowLoggingLevel != 0 )
 8005f7e:	4a32      	ldr	r2, [pc, #200]	@ (8006048 <vTCPWindowCreate+0x10c>)
 8005f80:	6812      	ldr	r2, [r2, #0]
 8005f82:	bb42      	cbnz	r2, 8005fd6 <vTCPWindowCreate+0x9a>
		pxWindow->u.ulFlags = 0UL;
 8005f84:	2201      	movs	r2, #1
		if( ulMSS != 0UL )
 8005f86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
		pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 8005f88:	e9c7 8a01 	strd	r8, sl, [r7, #4]
		pxWindow->u.ulFlags = 0UL;
 8005f8c:	603a      	str	r2, [r7, #0]
		if( ulMSS != 0UL )
 8005f8e:	b193      	cbz	r3, 8005fb6 <vTCPWindowCreate+0x7a>
			if( pxWindow->usMSSInit != 0U )
 8005f90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f94:	b10a      	cbz	r2, 8005f9a <vTCPWindowCreate+0x5e>
				pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 8005f96:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
			if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 8005f9a:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	@ 0xbc
 8005f9e:	b112      	cbz	r2, 8005fa6 <vTCPWindowCreate+0x6a>
 8005fa0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d207      	bcs.n	8005fb6 <vTCPWindowCreate+0x7a>
				pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 8005fa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fa8:	fbb8 f8f3 	udiv	r8, r8, r3
 8005fac:	fb03 f208 	mul.w	r2, r3, r8
				pxWindow->usMSS = ( uint16_t ) ulMSS;
 8005fb0:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
				pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 8005fb4:	607a      	str	r2, [r7, #4]
		pxWindow->lSRTT = l500ms;
 8005fb6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
		pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 8005fba:	f8c7 b018 	str.w	fp, [r7, #24]
		pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 8005fbe:	f8c7 9034 	str.w	r9, [r7, #52]	@ 0x34
		pxWindow->lSRTT = l500ms;
 8005fc2:	63ba      	str	r2, [r7, #56]	@ 0x38
		pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 8005fc4:	e9c7 bb03 	strd	fp, fp, [r7, #12]
		pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 8005fc8:	e9c7 9907 	strd	r9, r9, [r7, #28]
		pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 8005fcc:	e9c7 990a 	strd	r9, r9, [r7, #40]	@ 0x28
	}
 8005fd0:	b003      	add	sp, #12
 8005fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			FreeRTOS_debug_printf( ( "vTCPWindowCreate: for WinLen = Rx/Tx: %lu/%lu\n",
 8005fd6:	4652      	mov	r2, sl
 8005fd8:	4641      	mov	r1, r8
 8005fda:	481c      	ldr	r0, [pc, #112]	@ (800604c <vTCPWindowCreate+0x110>)
 8005fdc:	f006 ff96 	bl	800cf0c <lUDPLoggingPrintf>
 8005fe0:	e7d0      	b.n	8005f84 <vTCPWindowCreate+0x48>
			vListInitialise( &xSegmentList );
 8005fe2:	4e1b      	ldr	r6, [pc, #108]	@ (8006050 <vTCPWindowCreate+0x114>)
 8005fe4:	9101      	str	r1, [sp, #4]
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	f002 fac6 	bl	8008578 <vListInitialise>
			xTCPSegments = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 8005fec:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005ff0:	f003 ffda 	bl	8009fa8 <pvPortMalloc>
			if( xTCPSegments == NULL )
 8005ff4:	9901      	ldr	r1, [sp, #4]
			xTCPSegments = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	6028      	str	r0, [r5, #0]
			if( xTCPSegments == NULL )
 8005ffa:	b1e8      	cbz	r0, 8006038 <vTCPWindowCreate+0xfc>
				( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 8005ffc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006000:	f007 fde2 	bl	800dbc8 <memset>
				for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8006004:	f241 012c 	movw	r1, #4140	@ 0x102c
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8006008:	6935      	ldr	r5, [r6, #16]
 800600a:	f106 0008 	add.w	r0, r6, #8
 800600e:	4421      	add	r1, r4
 8006010:	342c      	adds	r4, #44	@ 0x2c
					listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8006012:	f1a4 022c 	sub.w	r2, r4, #44	@ 0x2c
		pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 8006016:	6060      	str	r0, [r4, #4]
					listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8006018:	60e2      	str	r2, [r4, #12]
					listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 800601a:	f844 2c08 	str.w	r2, [r4, #-8]
		( pxList->uxNumberOfItems )++;
 800601e:	6832      	ldr	r2, [r6, #0]
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8006020:	60a5      	str	r5, [r4, #8]
		pxWhere->pxPrevious->pxNext = pxNewListItem;
 8006022:	606c      	str	r4, [r5, #4]
		pxWhere->pxPrevious = pxNewListItem;
 8006024:	4625      	mov	r5, r4
 8006026:	6134      	str	r4, [r6, #16]
				for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8006028:	3440      	adds	r4, #64	@ 0x40
		listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 800602a:	f844 6c30 	str.w	r6, [r4, #-48]
		( pxList->uxNumberOfItems )++;
 800602e:	3201      	adds	r2, #1
				for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8006030:	428c      	cmp	r4, r1
		( pxList->uxNumberOfItems )++;
 8006032:	6032      	str	r2, [r6, #0]
				for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8006034:	d1ed      	bne.n	8006012 <vTCPWindowCreate+0xd6>
 8006036:	e78e      	b.n	8005f56 <vTCPWindowCreate+0x1a>
				FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
 8006038:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800603c:	4805      	ldr	r0, [pc, #20]	@ (8006054 <vTCPWindowCreate+0x118>)
 800603e:	f006 ff65 	bl	800cf0c <lUDPLoggingPrintf>
				xReturn = pdFAIL;
 8006042:	e788      	b.n	8005f56 <vTCPWindowCreate+0x1a>
 8006044:	200003e8 	.word	0x200003e8
 8006048:	200003d0 	.word	0x200003d0
 800604c:	08010ed4 	.word	0x08010ed4
 8006050:	200003d4 	.word	0x200003d4
 8006054:	08010eb0 	.word	0x08010eb0

08006058 <vTCPWindowInit>:
	{
 8006058:	b410      	push	{r4}
		pxWindow->u.ulFlags = 0UL;
 800605a:	2401      	movs	r4, #1
 800605c:	6004      	str	r4, [r0, #0]
		if( ulMSS != 0UL )
 800605e:	b18b      	cbz	r3, 8006084 <vTCPWindowInit+0x2c>
			if( pxWindow->usMSSInit != 0U )
 8006060:	f8b0 40be 	ldrh.w	r4, [r0, #190]	@ 0xbe
 8006064:	b10c      	cbz	r4, 800606a <vTCPWindowInit+0x12>
				pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 8006066:	f8a0 30be 	strh.w	r3, [r0, #190]	@ 0xbe
			if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 800606a:	f8b0 40bc 	ldrh.w	r4, [r0, #188]	@ 0xbc
 800606e:	b10c      	cbz	r4, 8006074 <vTCPWindowInit+0x1c>
 8006070:	429c      	cmp	r4, r3
 8006072:	d907      	bls.n	8006084 <vTCPWindowInit+0x2c>
				pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 8006074:	6844      	ldr	r4, [r0, #4]
				pxWindow->usMSS = ( uint16_t ) ulMSS;
 8006076:	f8a0 30bc 	strh.w	r3, [r0, #188]	@ 0xbc
				pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 800607a:	fbb4 fcf3 	udiv	ip, r4, r3
 800607e:	fb03 f30c 	mul.w	r3, r3, ip
 8006082:	6043      	str	r3, [r0, #4]
		pxWindow->lSRTT = l500ms;
 8006084:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
	}
 8006088:	f85d 4b04 	ldr.w	r4, [sp], #4
		pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 800608c:	6181      	str	r1, [r0, #24]
		pxWindow->lSRTT = l500ms;
 800608e:	6383      	str	r3, [r0, #56]	@ 0x38
		pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 8006090:	6342      	str	r2, [r0, #52]	@ 0x34
		pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 8006092:	e9c0 1103 	strd	r1, r1, [r0, #12]
		pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 8006096:	e9c0 2207 	strd	r2, r2, [r0, #28]
		pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 800609a:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
	}
 800609e:	4770      	bx	lr

080060a0 <lTCPWindowRxCheck>:
		{
 80060a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a4:	460e      	mov	r6, r1
			pxWindow->ucOptionLength = 0U;
 80060a6:	2100      	movs	r1, #0
		{
 80060a8:	4607      	mov	r7, r0
 80060aa:	b085      	sub	sp, #20
			pxWindow->ucOptionLength = 0U;
 80060ac:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
		{
 80060b0:	4690      	mov	r8, r2
			ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 80060b2:	f8d7 9010 	ldr.w	r9, [r7, #16]
			pxWindow->ulUserDataLength = 0UL;
 80060b6:	6301      	str	r1, [r0, #48]	@ 0x30
			if( ulCurrentSequenceNumber == ulSequenceNumber )
 80060b8:	45b1      	cmp	r9, r6
 80060ba:	d064      	beq.n	8006186 <lTCPWindowRxCheck+0xe6>
			else if( ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 80060bc:	1c71      	adds	r1, r6, #1
 80060be:	4549      	cmp	r1, r9
 80060c0:	d037      	beq.n	8006132 <lTCPWindowRxCheck+0x92>
				ulLast = ulSequenceNumber + ulLength;
 80060c2:	18b4      	adds	r4, r6, r2
				ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 80060c4:	eba4 0109 	sub.w	r1, r4, r9
				if( lDistance <= 0 )
 80060c8:	2900      	cmp	r1, #0
 80060ca:	dd32      	ble.n	8006132 <lTCPWindowRxCheck+0x92>
				else if( lDistance > ( int32_t ) ulSpace )
 80060cc:	428b      	cmp	r3, r1
 80060ce:	f2c0 80ed 	blt.w	80062ac <lTCPWindowRxCheck+0x20c>
			for( pxIterator = listGET_NEXT( pxEnd );
 80060d2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
			const ListItem_t * pxEnd = listGET_END_MARKER( &pxWindow->xRxSegments );
 80060d6:	f107 05ac 	add.w	r5, r7, #172	@ 0xac
				 pxIterator != pxEnd;
 80060da:	42a8      	cmp	r0, r5
 80060dc:	d00c      	beq.n	80060f8 <lTCPWindowRxCheck+0x58>
			for( pxIterator = listGET_NEXT( pxEnd );
 80060de:	4603      	mov	r3, r0
 80060e0:	e002      	b.n	80060e8 <lTCPWindowRxCheck+0x48>
				 pxIterator = listGET_NEXT( pxIterator ) )
 80060e2:	685b      	ldr	r3, [r3, #4]
				 pxIterator != pxEnd;
 80060e4:	42ab      	cmp	r3, r5
 80060e6:	d007      	beq.n	80060f8 <lTCPWindowRxCheck+0x58>
				pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 80060e8:	68da      	ldr	r2, [r3, #12]
				if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 80060ea:	6811      	ldr	r1, [r2, #0]
 80060ec:	428c      	cmp	r4, r1
 80060ee:	d1f8      	bne.n	80060e2 <lTCPWindowRxCheck+0x42>
						ulLast += ( uint32_t ) pxFound->lDataLength;
 80060f0:	6893      	ldr	r3, [r2, #8]
				 pxIterator != pxEnd;
 80060f2:	42a8      	cmp	r0, r5
						ulLast += ( uint32_t ) pxFound->lDataLength;
 80060f4:	441c      	add	r4, r3
				 pxIterator != pxEnd;
 80060f6:	d1f2      	bne.n	80060de <lTCPWindowRxCheck+0x3e>
					if( xTCPWindowLoggingLevel >= 1 )
 80060f8:	f8df a1c0 	ldr.w	sl, [pc, #448]	@ 80062bc <lTCPWindowRxCheck+0x21c>
 80060fc:	f8da 3000 	ldr.w	r3, [sl]
 8006100:	2b00      	cmp	r3, #0
 8006102:	dc2c      	bgt.n	800615e <lTCPWindowRxCheck+0xbe>
					pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 8006104:	4b6b      	ldr	r3, [pc, #428]	@ (80062b4 <lTCPWindowRxCheck+0x214>)
 8006106:	ba24      	rev	r4, r4
				 pxIterator != pxEnd;
 8006108:	42a8      	cmp	r0, r5
					pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 800610a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
					pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 800610e:	ba33      	rev	r3, r6
					pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 8006110:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
					pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 8006114:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
					pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 8006118:	f04f 030c 	mov.w	r3, #12
 800611c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
				 pxIterator != pxEnd;
 8006120:	d103      	bne.n	800612a <lTCPWindowRxCheck+0x8a>
 8006122:	e009      	b.n	8006138 <lTCPWindowRxCheck+0x98>
				 pxIterator = listGET_NEXT( pxIterator ) )
 8006124:	6840      	ldr	r0, [r0, #4]
				 pxIterator != pxEnd;
 8006126:	42a8      	cmp	r0, r5
 8006128:	d006      	beq.n	8006138 <lTCPWindowRxCheck+0x98>
				if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 800612a:	68c3      	ldr	r3, [r0, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	429e      	cmp	r6, r3
 8006130:	d1f8      	bne.n	8006124 <lTCPWindowRxCheck+0x84>
				lReturn = -1;
 8006132:	f04f 30ff 	mov.w	r0, #4294967295
 8006136:	e00f      	b.n	8006158 <lTCPWindowRxCheck+0xb8>
						pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 8006138:	4642      	mov	r2, r8
 800613a:	2301      	movs	r3, #1
 800613c:	4631      	mov	r1, r6
 800613e:	4638      	mov	r0, r7
 8006140:	f7ff fe22 	bl	8005d88 <xTCPWindowNew>
						if( pxFound == NULL )
 8006144:	2800      	cmp	r0, #0
 8006146:	f000 80a8 	beq.w	800629a <lTCPWindowRxCheck+0x1fa>
							if( xTCPWindowLoggingLevel != 0 )
 800614a:	f8da 3000 	ldr.w	r3, [sl]
 800614e:	2b00      	cmp	r3, #0
 8006150:	f040 8082 	bne.w	8006258 <lTCPWindowRxCheck+0x1b8>
							ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 8006154:	eba6 0009 	sub.w	r0, r6, r9
		}
 8006158:	b005      	add	sp, #20
 800615a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: seqnr %u exp %u (dist %d) SACK to %u\n",
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	eba6 0209 	sub.w	r2, r6, r9
 8006164:	4854      	ldr	r0, [pc, #336]	@ (80062b8 <lTCPWindowRxCheck+0x218>)
 8006166:	9201      	str	r2, [sp, #4]
 8006168:	1ae2      	subs	r2, r4, r3
 800616a:	9202      	str	r2, [sp, #8]
 800616c:	eba9 0203 	sub.w	r2, r9, r3
 8006170:	1af3      	subs	r3, r6, r3
 8006172:	9200      	str	r2, [sp, #0]
 8006174:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8006178:	f8b7 10ba 	ldrh.w	r1, [r7, #186]	@ 0xba
 800617c:	f006 fec6 	bl	800cf0c <lUDPLoggingPrintf>
			for( pxIterator = listGET_NEXT( pxEnd );
 8006180:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8006184:	e7be      	b.n	8006104 <lTCPWindowRxCheck+0x64>
				if( ulLength > ulSpace )
 8006186:	429a      	cmp	r2, r3
 8006188:	f200 808a 	bhi.w	80062a0 <lTCPWindowRxCheck+0x200>
					if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 800618c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
					ulCurrentSequenceNumber += ulLength;
 8006190:	eb06 0a02 	add.w	sl, r6, r2
					if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 8006194:	2b00      	cmp	r3, #0
 8006196:	d059      	beq.n	800624c <lTCPWindowRxCheck+0x1ac>
			const ListItem_t * pxEnd = listGET_END_MARKER( &pxWindow->xRxSegments );
 8006198:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
			for( pxIterator = listGET_NEXT( pxEnd );
 800619c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80061a0:	f10a 39ff 	add.w	r9, sl, #4294967295
				FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %lu (+%ld=%lu) found %lu (+%ld=%lu)\n",
 80061a4:	f8df b128 	ldr.w	fp, [pc, #296]	@ 80062d0 <lTCPWindowRxCheck+0x230>
				 pxIterator != pxEnd;
 80061a8:	42a2      	cmp	r2, r4
 80061aa:	d033      	beq.n	8006214 <lTCPWindowRxCheck+0x174>
			for( pxIterator = listGET_NEXT( pxEnd );
 80061ac:	4611      	mov	r1, r2
			TCPSegment_t * pxBest = NULL;
 80061ae:	2500      	movs	r5, #0
				pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 80061b0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
				if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 80061b4:	f8dc 3000 	ldr.w	r3, [ip]
			if( ( ( b - ( a + 1UL ) ) & 0x80000000UL ) == 0UL )
 80061b8:	eba9 0e03 	sub.w	lr, r9, r3
		if( ( ( a - b ) & 0x80000000UL ) == 0UL )
 80061bc:	1b98      	subs	r0, r3, r6
			if( ( ( b - ( a + 1UL ) ) & 0x80000000UL ) == 0UL )
 80061be:	43db      	mvns	r3, r3
 80061c0:	ea5e 0000 	orrs.w	r0, lr, r0
 80061c4:	d405      	bmi.n	80061d2 <lTCPWindowRxCheck+0x132>
					if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 80061c6:	2d00      	cmp	r5, #0
 80061c8:	d053      	beq.n	8006272 <lTCPWindowRxCheck+0x1d2>
			if( ( ( b - ( a + 1UL ) ) & 0x80000000UL ) == 0UL )
 80061ca:	6828      	ldr	r0, [r5, #0]
 80061cc:	42c3      	cmn	r3, r0
 80061ce:	bf58      	it	pl
 80061d0:	4665      	movpl	r5, ip
				 pxIterator = listGET_NEXT( pxIterator ) )
 80061d2:	6849      	ldr	r1, [r1, #4]
				 pxIterator != pxEnd;
 80061d4:	42a1      	cmp	r1, r4
 80061d6:	d1eb      	bne.n	80061b0 <lTCPWindowRxCheck+0x110>
			if( ( pxBest != NULL ) &&
 80061d8:	b1e5      	cbz	r5, 8006214 <lTCPWindowRxCheck+0x174>
				( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 80061da:	682b      	ldr	r3, [r5, #0]
 80061dc:	68a9      	ldr	r1, [r5, #8]
			if( ( pxBest != NULL ) &&
 80061de:	429e      	cmp	r6, r3
 80061e0:	d101      	bne.n	80061e6 <lTCPWindowRxCheck+0x146>
				( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 80061e2:	4588      	cmp	r8, r1
 80061e4:	d00f      	beq.n	8006206 <lTCPWindowRxCheck+0x166>
				FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %lu (+%ld=%lu) found %lu (+%ld=%lu)\n",
 80061e6:	9102      	str	r1, [sp, #8]
 80061e8:	4658      	mov	r0, fp
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	1a9b      	subs	r3, r3, r2
 80061ee:	4419      	add	r1, r3
 80061f0:	9301      	str	r3, [sp, #4]
 80061f2:	ebaa 0302 	sub.w	r3, sl, r2
 80061f6:	1ab2      	subs	r2, r6, r2
 80061f8:	9103      	str	r1, [sp, #12]
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	4643      	mov	r3, r8
 80061fe:	f8b7 10ba 	ldrh.w	r1, [r7, #186]	@ 0xba
 8006202:	f006 fe83 	bl	800cf0c <lUDPLoggingPrintf>
								vTCPWindowFree( pxFound );
 8006206:	4628      	mov	r0, r5
 8006208:	f7ff fcf0 	bl	8005bec <vTCPWindowFree>
			for( pxIterator = listGET_NEXT( pxEnd );
 800620c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
				 pxIterator != pxEnd;
 8006210:	42a2      	cmp	r2, r4
 8006212:	d1cb      	bne.n	80061ac <lTCPWindowRxCheck+0x10c>
 8006214:	4655      	mov	r5, sl
				 pxIterator != pxEnd;
 8006216:	4294      	cmp	r4, r2
 8006218:	d103      	bne.n	8006222 <lTCPWindowRxCheck+0x182>
 800621a:	e00d      	b.n	8006238 <lTCPWindowRxCheck+0x198>
				 pxIterator = listGET_NEXT( pxIterator ) )
 800621c:	6852      	ldr	r2, [r2, #4]
				 pxIterator != pxEnd;
 800621e:	42a2      	cmp	r2, r4
 8006220:	d00a      	beq.n	8006238 <lTCPWindowRxCheck+0x198>
				pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8006222:	68d0      	ldr	r0, [r2, #12]
				if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 8006224:	6803      	ldr	r3, [r0, #0]
 8006226:	429d      	cmp	r5, r3
 8006228:	d1f8      	bne.n	800621c <lTCPWindowRxCheck+0x17c>
							ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 800622a:	6883      	ldr	r3, [r0, #8]
 800622c:	441d      	add	r5, r3
							vTCPWindowFree( pxFound );
 800622e:	f7ff fcdd 	bl	8005bec <vTCPWindowFree>
			for( pxIterator = listGET_NEXT( pxEnd );
 8006232:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
							pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 8006236:	e7ee      	b.n	8006216 <lTCPWindowRxCheck+0x176>
						if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 8006238:	4555      	cmp	r5, sl
 800623a:	d007      	beq.n	800624c <lTCPWindowRxCheck+0x1ac>
							if( xTCPWindowLoggingLevel >= 1 )
 800623c:	4a1f      	ldr	r2, [pc, #124]	@ (80062bc <lTCPWindowRxCheck+0x21c>)
							pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 800623e:	eba5 030a 	sub.w	r3, r5, sl
							if( xTCPWindowLoggingLevel >= 1 )
 8006242:	6812      	ldr	r2, [r2, #0]
							pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 8006244:	633b      	str	r3, [r7, #48]	@ 0x30
							if( xTCPWindowLoggingLevel >= 1 )
 8006246:	2a00      	cmp	r2, #0
 8006248:	dc15      	bgt.n	8006276 <lTCPWindowRxCheck+0x1d6>
				 pxIterator != pxEnd;
 800624a:	46aa      	mov	sl, r5
					lReturn = 0;
 800624c:	2000      	movs	r0, #0
					pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 800624e:	f8c7 a010 	str.w	sl, [r7, #16]
		}
 8006252:	b005      	add	sp, #20
 8006254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
								FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: seqnr %lu (cnt %lu)\n",
 8006258:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4818      	ldr	r0, [pc, #96]	@ (80062c0 <lTCPWindowRxCheck+0x220>)
 8006260:	9200      	str	r2, [sp, #0]
 8006262:	1af3      	subs	r3, r6, r3
 8006264:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8006268:	f8b7 10ba 	ldrh.w	r1, [r7, #186]	@ 0xba
 800626c:	f006 fe4e 	bl	800cf0c <lUDPLoggingPrintf>
 8006270:	e770      	b.n	8006154 <lTCPWindowRxCheck+0xb4>
 8006272:	4665      	mov	r5, ip
 8006274:	e7ad      	b.n	80061d2 <lTCPWindowRxCheck+0x132>
								FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: retran %lu (Found %lu bytes at %lu cnt %ld)\n",
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 800627e:	ebaa 0103 	sub.w	r1, sl, r3
 8006282:	1af3      	subs	r3, r6, r3
				 pxIterator != pxEnd;
 8006284:	46aa      	mov	sl, r5
								FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: retran %lu (Found %lu bytes at %lu cnt %ld)\n",
 8006286:	9101      	str	r1, [sp, #4]
 8006288:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800628c:	f8b7 10ba 	ldrh.w	r1, [r7, #186]	@ 0xba
 8006290:	9002      	str	r0, [sp, #8]
 8006292:	480c      	ldr	r0, [pc, #48]	@ (80062c4 <lTCPWindowRxCheck+0x224>)
 8006294:	f006 fe3a 	bl	800cf0c <lUDPLoggingPrintf>
 8006298:	e7d8      	b.n	800624c <lTCPWindowRxCheck+0x1ac>
							pxWindow->ucOptionLength = 0U;
 800629a:	f887 003c 	strb.w	r0, [r7, #60]	@ 0x3c
							lReturn = -1;
 800629e:	e748      	b.n	8006132 <lTCPWindowRxCheck+0x92>
					FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu bytes, due to lack of space (%lu)\n", ulLength, ulSpace ) );
 80062a0:	461a      	mov	r2, r3
 80062a2:	4641      	mov	r1, r8
 80062a4:	4808      	ldr	r0, [pc, #32]	@ (80062c8 <lTCPWindowRxCheck+0x228>)
 80062a6:	f006 fe31 	bl	800cf0c <lUDPLoggingPrintf>
					lReturn = -1;
 80062aa:	e742      	b.n	8006132 <lTCPWindowRxCheck+0x92>
					FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu+%lu bytes, due to lack of space (%lu)\n", lDistance, ulLength, ulSpace ) );
 80062ac:	4807      	ldr	r0, [pc, #28]	@ (80062cc <lTCPWindowRxCheck+0x22c>)
 80062ae:	f006 fe2d 	bl	800cf0c <lUDPLoggingPrintf>
					lReturn = -1;
 80062b2:	e73e      	b.n	8006132 <lTCPWindowRxCheck+0x92>
 80062b4:	0a050101 	.word	0x0a050101
 80062b8:	08011020 	.word	0x08011020
 80062bc:	200003d0 	.word	0x200003d0
 80062c0:	08011060 	.word	0x08011060
 80062c4:	08010f90 	.word	0x08010f90
 80062c8:	08010f04 	.word	0x08010f04
 80062cc:	08010fd8 	.word	0x08010fd8
 80062d0:	08010f48 	.word	0x08010f48

080062d4 <lTCPWindowTxAdd>:
		{
 80062d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d8:	b085      	sub	sp, #20
 80062da:	460e      	mov	r6, r1
			int32_t lBytesLeft = ( int32_t ) ulLength, lToWrite;
 80062dc:	460d      	mov	r5, r1
		{
 80062de:	4604      	mov	r4, r0
 80062e0:	9103      	str	r1, [sp, #12]
 80062e2:	4617      	mov	r7, r2
			TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 80062e4:	6fc1      	ldr	r1, [r0, #124]	@ 0x7c
		{
 80062e6:	469b      	mov	fp, r3
			if( pxSegment != NULL )
 80062e8:	b119      	cbz	r1, 80062f2 <lTCPWindowTxAdd+0x1e>
				if( pxSegment->lDataLength < pxSegment->lMaxLength )
 80062ea:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
 80062ee:	4293      	cmp	r3, r2
 80062f0:	db5d      	blt.n	80063ae <lTCPWindowTxAdd+0xda>
			int32_t lDone = 0;
 80062f2:	f04f 0800 	mov.w	r8, #0
			while( lBytesLeft > 0 )
 80062f6:	2d00      	cmp	r5, #0
 80062f8:	dc04      	bgt.n	8006304 <lTCPWindowTxAdd+0x30>
 80062fa:	e050      	b.n	800639e <lTCPWindowTxAdd+0xca>
						if( ( xTCPWindowLoggingLevel >= 3 ) ||
 80062fc:	d053      	beq.n	80063a6 <lTCPWindowTxAdd+0xd2>
			while( lBytesLeft > 0 )
 80062fe:	2d00      	cmp	r5, #0
 8006300:	4637      	mov	r7, r6
 8006302:	dd4c      	ble.n	800639e <lTCPWindowTxAdd+0xca>
				pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 8006304:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	@ 0xbc
 8006308:	2300      	movs	r3, #0
 800630a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800630c:	4620      	mov	r0, r4
			vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800630e:	f104 0954 	add.w	r9, r4, #84	@ 0x54
 8006312:	f104 0a5c 	add.w	sl, r4, #92	@ 0x5c
				pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 8006316:	f7ff fd37 	bl	8005d88 <xTCPWindowNew>
				if( pxSegment != NULL )
 800631a:	2800      	cmp	r0, #0
 800631c:	d069      	beq.n	80063f2 <lTCPWindowTxAdd+0x11e>
					lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 800631e:	6842      	ldr	r2, [r0, #4]
			if( lReturn >= lMax )
 8006320:	4659      	mov	r1, fp
					pxSegment->lStreamPos = lBufferIndex;
 8006322:	60c7      	str	r7, [r0, #12]
					vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 8006324:	f100 0c18 	add.w	ip, r0, #24
            return ( a <= b ) ? a : b;
 8006328:	42aa      	cmp	r2, r5
 800632a:	4613      	mov	r3, r2
 800632c:	bfa8      	it	ge
 800632e:	462b      	movge	r3, r5
			lReturn = lPosition + lCount;
 8006330:	19de      	adds	r6, r3, r7
					pxSegment->lDataLength = lToWrite;
 8006332:	6083      	str	r3, [r0, #8]
					lBytesLeft -= lToWrite;
 8006334:	1aed      	subs	r5, r5, r3
					lDone += lToWrite;
 8006336:	4498      	add	r8, r3
			if( lReturn >= lMax )
 8006338:	45b3      	cmp	fp, r6
				lReturn -= lMax;
 800633a:	bfd8      	it	le
 800633c:	1a76      	suble	r6, r6, r1
						pxWindow->pxHeadSegment = pxSegment;
 800633e:	429a      	cmp	r2, r3
 8006340:	bfcc      	ite	gt
 8006342:	4686      	movgt	lr, r0
 8006344:	f04f 0e00 	movle.w	lr, #0
					pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8006348:	6b62      	ldr	r2, [r4, #52]	@ 0x34
		( pxList->uxNumberOfItems )++;
 800634a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
					pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800634c:	189a      	adds	r2, r3, r2
		( pxList->uxNumberOfItems )++;
 800634e:	3101      	adds	r1, #1
					pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8006350:	6362      	str	r2, [r4, #52]	@ 0x34
		pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 8006352:	f8c0 a01c 	str.w	sl, [r0, #28]
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8006356:	f8d4 a064 	ldr.w	sl, [r4, #100]	@ 0x64
 800635a:	f8c0 a020 	str.w	sl, [r0, #32]
		pxWhere->pxPrevious->pxNext = pxNewListItem;
 800635e:	f8ca c004 	str.w	ip, [sl, #4]
		pxWhere->pxPrevious = pxNewListItem;
 8006362:	f8c4 c064 	str.w	ip, [r4, #100]	@ 0x64
		listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8006366:	f8c0 9028 	str.w	r9, [r0, #40]	@ 0x28
		( pxList->uxNumberOfItems )++;
 800636a:	6561      	str	r1, [r4, #84]	@ 0x54
					if( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 800636c:	f8b4 10b8 	ldrh.w	r1, [r4, #184]	@ 0xb8
 8006370:	f8c4 e07c 	str.w	lr, [r4, #124]	@ 0x7c
 8006374:	2917      	cmp	r1, #23
 8006376:	d0c2      	beq.n	80062fe <lTCPWindowTxAdd+0x2a>
						if( ( xTCPWindowLoggingLevel >= 3 ) ||
 8006378:	492b      	ldr	r1, [pc, #172]	@ (8006428 <lTCPWindowTxAdd+0x154>)
 800637a:	6809      	ldr	r1, [r1, #0]
 800637c:	2902      	cmp	r1, #2
 800637e:	ddbd      	ble.n	80062fc <lTCPWindowTxAdd+0x28>
							FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: New %4ld bytes for seqNr %lu len %4lu (nxt %lu) pos %lu\n",
 8006380:	69e1      	ldr	r1, [r4, #28]
 8006382:	f8d0 c000 	ldr.w	ip, [r0]
 8006386:	1a50      	subs	r0, r2, r1
 8006388:	9701      	str	r7, [sp, #4]
 800638a:	ebac 0201 	sub.w	r2, ip, r1
 800638e:	9903      	ldr	r1, [sp, #12]
 8006390:	9000      	str	r0, [sp, #0]
 8006392:	4637      	mov	r7, r6
 8006394:	4825      	ldr	r0, [pc, #148]	@ (800642c <lTCPWindowTxAdd+0x158>)
 8006396:	f006 fdb9 	bl	800cf0c <lUDPLoggingPrintf>
			while( lBytesLeft > 0 )
 800639a:	2d00      	cmp	r5, #0
 800639c:	dcb2      	bgt.n	8006304 <lTCPWindowTxAdd+0x30>
		}
 800639e:	4640      	mov	r0, r8
 80063a0:	b005      	add	sp, #20
 80063a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							( ( xTCPWindowLoggingLevel >= 2 ) && ( pxWindow->pxHeadSegment != NULL ) ) )
 80063a6:	f1be 0f00 	cmp.w	lr, #0
 80063aa:	d1e9      	bne.n	8006380 <lTCPWindowTxAdd+0xac>
 80063ac:	e7a7      	b.n	80062fe <lTCPWindowTxAdd+0x2a>
					if( ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength != 0 ) )
 80063ae:	7d88      	ldrb	r0, [r1, #22]
 80063b0:	07c0      	lsls	r0, r0, #31
 80063b2:	d49e      	bmi.n	80062f2 <lTCPWindowTxAdd+0x1e>
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d09c      	beq.n	80062f2 <lTCPWindowTxAdd+0x1e>
						lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 80063b8:	eba2 0803 	sub.w	r8, r2, r3
 80063bc:	45b0      	cmp	r8, r6
 80063be:	bfa8      	it	ge
 80063c0:	46b0      	movge	r8, r6
						pxSegment->lDataLength += lToWrite;
 80063c2:	4443      	add	r3, r8
						if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 80063c4:	429a      	cmp	r2, r3
						pxSegment->lDataLength += lToWrite;
 80063c6:	608b      	str	r3, [r1, #8]
						if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 80063c8:	dd1e      	ble.n	8006408 <lTCPWindowTxAdd+0x134>
						if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 80063ca:	4a17      	ldr	r2, [pc, #92]	@ (8006428 <lTCPWindowTxAdd+0x154>)
						pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 80063cc:	6b60      	ldr	r0, [r4, #52]	@ 0x34
						if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 80063ce:	6812      	ldr	r2, [r2, #0]
						pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 80063d0:	4440      	add	r0, r8
						lBytesLeft -= lToWrite;
 80063d2:	9d03      	ldr	r5, [sp, #12]
						if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 80063d4:	2a01      	cmp	r2, #1
						lBytesLeft -= lToWrite;
 80063d6:	eba5 0508 	sub.w	r5, r5, r8
						pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 80063da:	6360      	str	r0, [r4, #52]	@ 0x34
						if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 80063dc:	dd03      	ble.n	80063e6 <lTCPWindowTxAdd+0x112>
 80063de:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	@ 0xb8
 80063e2:	2a17      	cmp	r2, #23
 80063e4:	d113      	bne.n	800640e <lTCPWindowTxAdd+0x13a>
			lReturn = lPosition + lCount;
 80063e6:	4447      	add	r7, r8
			if( lReturn >= lMax )
 80063e8:	465b      	mov	r3, fp
 80063ea:	45bb      	cmp	fp, r7
 80063ec:	dc83      	bgt.n	80062f6 <lTCPWindowTxAdd+0x22>
				lReturn -= lMax;
 80063ee:	1aff      	subs	r7, r7, r3
 80063f0:	e781      	b.n	80062f6 <lTCPWindowTxAdd+0x22>
					if( lDone != 0 )
 80063f2:	f1b8 0f00 	cmp.w	r8, #0
 80063f6:	d0d2      	beq.n	800639e <lTCPWindowTxAdd+0xca>
						FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %ld bytes)\n", lBytesLeft ) );
 80063f8:	4629      	mov	r1, r5
 80063fa:	480d      	ldr	r0, [pc, #52]	@ (8006430 <lTCPWindowTxAdd+0x15c>)
 80063fc:	f006 fd86 	bl	800cf0c <lUDPLoggingPrintf>
		}
 8006400:	4640      	mov	r0, r8
 8006402:	b005      	add	sp, #20
 8006404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							pxWindow->pxHeadSegment = NULL;
 8006408:	2200      	movs	r2, #0
 800640a:	67e2      	str	r2, [r4, #124]	@ 0x7c
 800640c:	e7dd      	b.n	80063ca <lTCPWindowTxAdd+0xf6>
							FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Add %4lu bytes for seqNr %lu len %4lu (nxt %lu) pos %lu\n",
 800640e:	69e6      	ldr	r6, [r4, #28]
 8006410:	680a      	ldr	r2, [r1, #0]
 8006412:	1b80      	subs	r0, r0, r6
 8006414:	68c9      	ldr	r1, [r1, #12]
 8006416:	1b92      	subs	r2, r2, r6
 8006418:	e9cd 0100 	strd	r0, r1, [sp]
 800641c:	9903      	ldr	r1, [sp, #12]
 800641e:	4805      	ldr	r0, [pc, #20]	@ (8006434 <lTCPWindowTxAdd+0x160>)
 8006420:	f006 fd74 	bl	800cf0c <lUDPLoggingPrintf>
 8006424:	e7df      	b.n	80063e6 <lTCPWindowTxAdd+0x112>
 8006426:	bf00      	nop
 8006428:	200003d0 	.word	0x200003d0
 800642c:	080110dc 	.word	0x080110dc
 8006430:	08011128 	.word	0x08011128
 8006434:	08011090 	.word	0x08011090

08006438 <xTCPWindowTxDone>:
			return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 8006438:	f8d0 0090 	ldr.w	r0, [r0, #144]	@ 0x90
		}
 800643c:	fab0 f080 	clz	r0, r0
 8006440:	0940      	lsrs	r0, r0, #5
 8006442:	4770      	bx	lr

08006444 <xTCPWindowTxHasData>:
			*pulDelay = 0U;
 8006444:	2300      	movs	r3, #0
 8006446:	6013      	str	r3, [r2, #0]
			if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 8006448:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800644a:	b10b      	cbz	r3, 8006450 <xTCPWindowTxHasData+0xc>
				xReturn = pdTRUE;
 800644c:	2001      	movs	r0, #1
		}
 800644e:	4770      	bx	lr
			if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8006450:	6e83      	ldr	r3, [r0, #104]	@ 0x68
		{
 8006452:	b570      	push	{r4, r5, r6, lr}
 8006454:	4604      	mov	r4, r0
			if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8006456:	b18b      	cbz	r3, 800647c <xTCPWindowTxHasData+0x38>
				pxReturn = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 8006458:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800645a:	68de      	ldr	r6, [r3, #12]
				if( pxSegment != NULL )
 800645c:	b176      	cbz	r6, 800647c <xTCPWindowTxHasData+0x38>
 800645e:	4615      	mov	r5, r2
		return( ( xTaskGetTickCount() - ( ( TickType_t ) pxTimer->ulBorn ) ) * portTICK_PERIOD_MS );
 8006460:	f002 fe54 	bl	800910c <xTaskGetTickCount>
					ulMaxAge = ( 1UL << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 8006464:	7d31      	ldrb	r1, [r6, #20]
		return( ( xTaskGetTickCount() - ( ( TickType_t ) pxTimer->ulBorn ) ) * portTICK_PERIOD_MS );
 8006466:	6932      	ldr	r2, [r6, #16]
					ulMaxAge = ( 1UL << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 8006468:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800646a:	408b      	lsls	r3, r1
		return( ( xTaskGetTickCount() - ( ( TickType_t ) pxTimer->ulBorn ) ) * portTICK_PERIOD_MS );
 800646c:	1a81      	subs	r1, r0, r2
					if( ulMaxAge > ulAge )
 800646e:	428b      	cmp	r3, r1
 8006470:	d902      	bls.n	8006478 <xTCPWindowTxHasData+0x34>
						*pulDelay = ulMaxAge - ulAge;
 8006472:	4413      	add	r3, r2
 8006474:	1a1b      	subs	r3, r3, r0
 8006476:	602b      	str	r3, [r5, #0]
				xReturn = pdTRUE;
 8006478:	2001      	movs	r0, #1
		}
 800647a:	bd70      	pop	{r4, r5, r6, pc}
			if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800647c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800647e:	b183      	cbz	r3, 80064a2 <xTCPWindowTxHasData+0x5e>
				pxReturn = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 8006480:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006482:	68dd      	ldr	r5, [r3, #12]
					if( pxSegment == NULL )
 8006484:	b16d      	cbz	r5, 80064a2 <xTCPWindowTxHasData+0x5e>
					else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8006486:	4620      	mov	r0, r4
 8006488:	f7ff fb8e 	bl	8005ba8 <prvTCPWindowTxHasSpace>
 800648c:	b148      	cbz	r0, 80064a2 <xTCPWindowTxHasData+0x5e>
					else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800648e:	7823      	ldrb	r3, [r4, #0]
 8006490:	079b      	lsls	r3, r3, #30
 8006492:	d5f1      	bpl.n	8006478 <xTCPWindowTxHasData+0x34>
 8006494:	e9d5 3001 	ldrd	r3, r0, [r5, #4]
 8006498:	4298      	cmp	r0, r3
 800649a:	bfb4      	ite	lt
 800649c:	2000      	movlt	r0, #0
 800649e:	2001      	movge	r0, #1
		}
 80064a0:	bd70      	pop	{r4, r5, r6, pc}
						xReturn = pdFALSE;
 80064a2:	2000      	movs	r0, #0
		}
 80064a4:	bd70      	pop	{r4, r5, r6, pc}
 80064a6:	bf00      	nop

080064a8 <ulTCPWindowTxGet>:
			if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 80064a8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
		{
 80064aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ae:	4604      	mov	r4, r0
 80064b0:	b082      	sub	sp, #8
 80064b2:	460f      	mov	r7, r1
 80064b4:	4616      	mov	r6, r2
			if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d047      	beq.n	800654a <ulTCPWindowTxGet+0xa2>
				pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 80064ba:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
				pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 80064bc:	68c5      	ldr	r5, [r0, #12]
				( void ) uxListRemove( pxItem );
 80064be:	f002 f891 	bl	80085e4 <uxListRemove>
			pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 80064c2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80064c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
			if( pxSegment == NULL )
 80064c6:	2d00      	cmp	r5, #0
 80064c8:	d041      	beq.n	800654e <ulTCPWindowTxGet+0xa6>
				if( xTCPWindowLoggingLevel != 0 )
 80064ca:	4b60      	ldr	r3, [pc, #384]	@ (800664c <ulTCPWindowTxGet+0x1a4>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	bb5b      	cbnz	r3, 8006528 <ulTCPWindowTxGet+0x80>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 80064d0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80064d2:	b123      	cbz	r3, 80064de <ulTCPWindowTxGet+0x36>
 80064d4:	f240 61da 	movw	r1, #1754	@ 0x6da
 80064d8:	485d      	ldr	r0, [pc, #372]	@ (8006650 <ulTCPWindowTxGet+0x1a8>)
 80064da:	f7fa fc0d 	bl	8000cf8 <vAssertCalled>
		( pxList->uxNumberOfItems )++;
 80064de:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
				vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 80064e0:	f105 0118 	add.w	r1, r5, #24
				( pxSegment->u.bits.ucTransmitCount )++;
 80064e4:	7d2b      	ldrb	r3, [r5, #20]
			vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 80064e6:	f104 0068 	add.w	r0, r4, #104	@ 0x68
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 80064ea:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
		( pxList->uxNumberOfItems )++;
 80064ec:	3201      	adds	r2, #1
				( pxSegment->u.bits.ucTransmitCount )++;
 80064ee:	3301      	adds	r3, #1
			vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 80064f0:	f104 0c70 	add.w	ip, r4, #112	@ 0x70
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 80064f4:	622f      	str	r7, [r5, #32]
		pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 80064f6:	f8c5 c01c 	str.w	ip, [r5, #28]
				( pxSegment->u.bits.ucTransmitCount )++;
 80064fa:	b2db      	uxtb	r3, r3
		pxWhere->pxPrevious->pxNext = pxNewListItem;
 80064fc:	6079      	str	r1, [r7, #4]
		pxWhere->pxPrevious = pxNewListItem;
 80064fe:	67a1      	str	r1, [r4, #120]	@ 0x78
				if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 8006500:	2b04      	cmp	r3, #4
		listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8006502:	62a8      	str	r0, [r5, #40]	@ 0x28
		( pxList->uxNumberOfItems )++;
 8006504:	66a2      	str	r2, [r4, #104]	@ 0x68
				pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 8006506:	7daa      	ldrb	r2, [r5, #22]
				( pxSegment->u.bits.ucTransmitCount )++;
 8006508:	752b      	strb	r3, [r5, #20]
				pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 800650a:	f042 0201 	orr.w	r2, r2, #1
 800650e:	75aa      	strb	r2, [r5, #22]
				if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 8006510:	d05b      	beq.n	80065ca <ulTCPWindowTxGet+0x122>
		pxTimer->ulBorn = xTaskGetTickCount();
 8006512:	f002 fdfb 	bl	800910c <xTaskGetTickCount>
				pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 8006516:	682b      	ldr	r3, [r5, #0]
		pxTimer->ulBorn = xTaskGetTickCount();
 8006518:	6128      	str	r0, [r5, #16]
				pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 800651a:	62e3      	str	r3, [r4, #44]	@ 0x2c
				*plPosition = pxSegment->lStreamPos;
 800651c:	68eb      	ldr	r3, [r5, #12]
 800651e:	6033      	str	r3, [r6, #0]
				ulReturn = ( uint32_t ) pxSegment->lDataLength;
 8006520:	68a8      	ldr	r0, [r5, #8]
		}
 8006522:	b002      	add	sp, #8
 8006524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: PrioQueue %ld bytes for sequence number %lu (ws %lu)\n",
 8006528:	68ab      	ldr	r3, [r5, #8]
 800652a:	9701      	str	r7, [sp, #4]
 800652c:	69e1      	ldr	r1, [r4, #28]
 800652e:	682a      	ldr	r2, [r5, #0]
 8006530:	4848      	ldr	r0, [pc, #288]	@ (8006654 <ulTCPWindowTxGet+0x1ac>)
 8006532:	1a52      	subs	r2, r2, r1
 8006534:	9200      	str	r2, [sp, #0]
 8006536:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	@ 0xb8
 800653a:	f8b4 10ba 	ldrh.w	r1, [r4, #186]	@ 0xba
 800653e:	f006 fce5 	bl	800cf0c <lUDPLoggingPrintf>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 8006542:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1c5      	bne.n	80064d4 <ulTCPWindowTxGet+0x2c>
 8006548:	e7c9      	b.n	80064de <ulTCPWindowTxGet+0x36>
			pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 800654a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800654c:	62c3      	str	r3, [r0, #44]	@ 0x2c
			if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800654e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8006550:	b34b      	cbz	r3, 80065a6 <ulTCPWindowTxGet+0xfe>
				pxReturn = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 8006552:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8006554:	68dd      	ldr	r5, [r3, #12]
				if( pxSegment != NULL )
 8006556:	b335      	cbz	r5, 80065a6 <ulTCPWindowTxGet+0xfe>
					ulMaxTime = ( 1UL << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 8006558:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800655a:	7d2a      	ldrb	r2, [r5, #20]
 800655c:	fa03 f802 	lsl.w	r8, r3, r2
		return( ( xTaskGetTickCount() - ( ( TickType_t ) pxTimer->ulBorn ) ) * portTICK_PERIOD_MS );
 8006560:	f002 fdd4 	bl	800910c <xTaskGetTickCount>
 8006564:	692b      	ldr	r3, [r5, #16]
 8006566:	1ac0      	subs	r0, r0, r3
					if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 8006568:	4580      	cmp	r8, r0
 800656a:	d21c      	bcs.n	80065a6 <ulTCPWindowTxGet+0xfe>
			if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800656c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800656e:	2b00      	cmp	r3, #0
 8006570:	d06a      	beq.n	8006648 <ulTCPWindowTxGet+0x1a0>
				pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8006572:	6f60      	ldr	r0, [r4, #116]	@ 0x74
				pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 8006574:	68c5      	ldr	r5, [r0, #12]
				( void ) uxListRemove( pxItem );
 8006576:	f002 f835 	bl	80085e4 <uxListRemove>
						if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800657a:	4b34      	ldr	r3, [pc, #208]	@ (800664c <ulTCPWindowTxGet+0x1a4>)
						pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 800657c:	2200      	movs	r2, #0
						if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800657e:	681b      	ldr	r3, [r3, #0]
						pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 8006580:	756a      	strb	r2, [r5, #21]
						if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0a4      	beq.n	80064d0 <ulTCPWindowTxGet+0x28>
 8006586:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	@ 0xb8
 800658a:	2a17      	cmp	r2, #23
 800658c:	d0a0      	beq.n	80064d0 <ulTCPWindowTxGet+0x28>
							FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: WaitQueue %ld bytes for sequence number %lu (%lX)\n",
 800658e:	6828      	ldr	r0, [r5, #0]
 8006590:	69e3      	ldr	r3, [r4, #28]
 8006592:	1ac1      	subs	r1, r0, r3
 8006594:	68ab      	ldr	r3, [r5, #8]
 8006596:	e9cd 1000 	strd	r1, r0, [sp]
 800659a:	482f      	ldr	r0, [pc, #188]	@ (8006658 <ulTCPWindowTxGet+0x1b0>)
 800659c:	f8b4 10ba 	ldrh.w	r1, [r4, #186]	@ 0xba
 80065a0:	f006 fcb4 	bl	800cf0c <lUDPLoggingPrintf>
				if( pxSegment == NULL )
 80065a4:	e794      	b.n	80064d0 <ulTCPWindowTxGet+0x28>
			if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 80065a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80065a8:	b15b      	cbz	r3, 80065c2 <ulTCPWindowTxGet+0x11a>
				pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 80065aa:	f8d4 8060 	ldr.w	r8, [r4, #96]	@ 0x60
				pxReturn = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 80065ae:	f8d8 500c 	ldr.w	r5, [r8, #12]
					if( pxSegment == NULL )
 80065b2:	b135      	cbz	r5, 80065c2 <ulTCPWindowTxGet+0x11a>
					else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 80065b4:	7823      	ldrb	r3, [r4, #0]
 80065b6:	079b      	lsls	r3, r3, #30
 80065b8:	d51b      	bpl.n	80065f2 <ulTCPWindowTxGet+0x14a>
 80065ba:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 80065be:	429a      	cmp	r2, r3
 80065c0:	da17      	bge.n	80065f2 <ulTCPWindowTxGet+0x14a>
				pxSegment = NULL;
 80065c2:	2000      	movs	r0, #0
		}
 80065c4:	b002      	add	sp, #8
 80065c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) )
 80065ca:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	@ 0xbc
 80065ce:	68a3      	ldr	r3, [r4, #8]
 80065d0:	0051      	lsls	r1, r2, #1
 80065d2:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80065d6:	d99c      	bls.n	8006512 <ulTCPWindowTxGet+0x6a>
						FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %d]: Change Tx window: %lu -> %u\n",
 80065d8:	9100      	str	r1, [sp, #0]
 80065da:	4820      	ldr	r0, [pc, #128]	@ (800665c <ulTCPWindowTxGet+0x1b4>)
 80065dc:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	@ 0xb8
 80065e0:	f8b4 10ba 	ldrh.w	r1, [r4, #186]	@ 0xba
 80065e4:	f006 fc92 	bl	800cf0c <lUDPLoggingPrintf>
						pxWindow->xSize.ulTxWindowLength = ( 2UL * pxWindow->usMSS );
 80065e8:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	@ 0xbc
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	60a3      	str	r3, [r4, #8]
 80065f0:	e78f      	b.n	8006512 <ulTCPWindowTxGet+0x6a>
					else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 80065f2:	4639      	mov	r1, r7
 80065f4:	4620      	mov	r0, r4
 80065f6:	f7ff fad7 	bl	8005ba8 <prvTCPWindowTxHasSpace>
 80065fa:	2800      	cmp	r0, #0
 80065fc:	d0e1      	beq.n	80065c2 <ulTCPWindowTxGet+0x11a>
			if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 80065fe:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006600:	b1eb      	cbz	r3, 800663e <ulTCPWindowTxGet+0x196>
				( void ) uxListRemove( pxItem );
 8006602:	4640      	mov	r0, r8
 8006604:	f001 ffee 	bl	80085e4 <uxListRemove>
						if( pxWindow->pxHeadSegment == pxSegment )
 8006608:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800660a:	42ab      	cmp	r3, r5
 800660c:	d019      	beq.n	8006642 <ulTCPWindowTxGet+0x19a>
						if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800660e:	4a0f      	ldr	r2, [pc, #60]	@ (800664c <ulTCPWindowTxGet+0x1a4>)
						pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 8006610:	6829      	ldr	r1, [r5, #0]
 8006612:	68ab      	ldr	r3, [r5, #8]
						if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8006614:	6812      	ldr	r2, [r2, #0]
						pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 8006616:	1858      	adds	r0, r3, r1
						if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8006618:	2a01      	cmp	r2, #1
						pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 800661a:	62a0      	str	r0, [r4, #40]	@ 0x28
						if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800661c:	f77f af58 	ble.w	80064d0 <ulTCPWindowTxGet+0x28>
 8006620:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	@ 0xb8
 8006624:	2a17      	cmp	r2, #23
 8006626:	f43f af53 	beq.w	80064d0 <ulTCPWindowTxGet+0x28>
							FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: XmitQueue %ld bytes for sequence number %lu (ws %lu)\n",
 800662a:	9701      	str	r7, [sp, #4]
 800662c:	69e0      	ldr	r0, [r4, #28]
 800662e:	1a09      	subs	r1, r1, r0
 8006630:	480b      	ldr	r0, [pc, #44]	@ (8006660 <ulTCPWindowTxGet+0x1b8>)
 8006632:	9100      	str	r1, [sp, #0]
 8006634:	f8b4 10ba 	ldrh.w	r1, [r4, #186]	@ 0xba
 8006638:	f006 fc68 	bl	800cf0c <lUDPLoggingPrintf>
			if( ulReturn != 0UL )
 800663c:	e748      	b.n	80064d0 <ulTCPWindowTxGet+0x28>
				pxSegment = NULL;
 800663e:	461d      	mov	r5, r3
 8006640:	e7e2      	b.n	8006608 <ulTCPWindowTxGet+0x160>
							pxWindow->pxHeadSegment = NULL;
 8006642:	2300      	movs	r3, #0
 8006644:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8006646:	e7e2      	b.n	800660e <ulTCPWindowTxGet+0x166>
						pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 8006648:	755b      	strb	r3, [r3, #21]
 800664a:	deff      	udf	#255	@ 0xff
 800664c:	200003d0 	.word	0x200003d0
 8006650:	08010e48 	.word	0x08010e48
 8006654:	08011200 	.word	0x08011200
 8006658:	08011164 	.word	0x08011164
 800665c:	08011250 	.word	0x08011250
 8006660:	080111b0 	.word	0x080111b0

08006664 <ulTCPWindowTxAck>:
		{
			uint32_t ulFirstSequence, ulReturn;

			/* Receive a normal ACK. */

			ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 8006664:	6a03      	ldr	r3, [r0, #32]
		{
 8006666:	460a      	mov	r2, r1
			if( ( ( b - a ) & 0x80000000UL ) == 0UL )
 8006668:	1a59      	subs	r1, r3, r1
 800666a:	2900      	cmp	r1, #0
 800666c:	db01      	blt.n	8006672 <ulTCPWindowTxAck+0xe>
			{
				ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
			}

			return ulReturn;
		}
 800666e:	2000      	movs	r0, #0
 8006670:	4770      	bx	lr
				ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 8006672:	4619      	mov	r1, r3
 8006674:	f7ff bade 	b.w	8005c34 <prvTCPWindowTxCheckAck>

08006678 <ulTCPWindowTxSack>:
 *         the head position.
 */
		uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
									uint32_t ulFirst,
									uint32_t ulLast )
		{
 8006678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			uint32_t ulAckCount;
			uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 800667c:	6a03      	ldr	r3, [r0, #32]
		{
 800667e:	b087      	sub	sp, #28
 8006680:	4606      	mov	r6, r0
 8006682:	4689      	mov	r9, r1
 8006684:	9205      	str	r2, [sp, #20]
			pxEnd = listGET_END_MARKER( &( pxWindow->xWaitQueue ) );
 8006686:	f106 0770 	add.w	r7, r6, #112	@ 0x70
			uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 800668a:	9304      	str	r3, [sp, #16]

			/* Receive a SACK option. */
			ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 800668c:	f7ff fad2 	bl	8005c34 <prvTCPWindowTxCheckAck>
			pxIterator = listGET_NEXT( pxEnd );
 8006690:	6f74      	ldr	r4, [r6, #116]	@ 0x74
			ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8006692:	4682      	mov	sl, r0
			while( pxIterator != pxEnd )
 8006694:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8006758 <ulTCPWindowTxSack+0xe0>
 8006698:	42a7      	cmp	r7, r4
 800669a:	d016      	beq.n	80066ca <ulTCPWindowTxSack+0x52>
			if( ( ( b - ( a + 1UL ) ) & 0x80000000UL ) == 0UL )
 800669c:	f109 3bff 	add.w	fp, r9, #4294967295
				pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 80066a0:	68e5      	ldr	r5, [r4, #12]
							if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 80066a2:	f8d8 0000 	ldr.w	r0, [r8]
				if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 80066a6:	7dab      	ldrb	r3, [r5, #22]
				pxIterator = listGET_NEXT( pxIterator );
 80066a8:	6864      	ldr	r4, [r4, #4]
				if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 80066aa:	f013 0302 	ands.w	r3, r3, #2
 80066ae:	d10a      	bne.n	80066c6 <ulTCPWindowTxSack+0x4e>
					if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 80066b0:	6829      	ldr	r1, [r5, #0]
			if( ( ( b - ( a + 1UL ) ) & 0x80000000UL ) == 0UL )
 80066b2:	ebab 0201 	sub.w	r2, fp, r1
 80066b6:	2a00      	cmp	r2, #0
 80066b8:	db05      	blt.n	80066c6 <ulTCPWindowTxSack+0x4e>
						pxSegment->u.bits.ucDupAckCount++;
 80066ba:	7d6a      	ldrb	r2, [r5, #21]
 80066bc:	3201      	adds	r2, #1
 80066be:	b2d2      	uxtb	r2, r2
						if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 80066c0:	2a03      	cmp	r2, #3
						pxSegment->u.bits.ucDupAckCount++;
 80066c2:	756a      	strb	r2, [r5, #21]
						if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 80066c4:	d01f      	beq.n	8006706 <ulTCPWindowTxSack+0x8e>
			while( pxIterator != pxEnd )
 80066c6:	42a7      	cmp	r7, r4
 80066c8:	d1ea      	bne.n	80066a0 <ulTCPWindowTxSack+0x28>
			( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );

			if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 80066ca:	f8d8 3000 	ldr.w	r3, [r8]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	dd15      	ble.n	80066fe <ulTCPWindowTxSack+0x86>
			if( ( ( a - ( b + 1UL ) ) & 0x80000000UL ) == 0UL )
 80066d2:	9b04      	ldr	r3, [sp, #16]
 80066d4:	ea6f 0b03 	mvn.w	fp, r3
 80066d8:	eb1b 0f09 	cmn.w	fp, r9
 80066dc:	d40f      	bmi.n	80066fe <ulTCPWindowTxSack+0x86>
			{
				FreeRTOS_debug_printf( ( "ulTCPWindowTxSack[%u,%u]: from %lu to %lu (ack = %lu)\n",
 80066de:	69f0      	ldr	r0, [r6, #28]
 80066e0:	9b05      	ldr	r3, [sp, #20]
 80066e2:	1a1b      	subs	r3, r3, r0
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	eba9 0300 	sub.w	r3, r9, r0
 80066ea:	6a31      	ldr	r1, [r6, #32]
 80066ec:	f8b6 20b8 	ldrh.w	r2, [r6, #184]	@ 0xb8
 80066f0:	1a08      	subs	r0, r1, r0
 80066f2:	f8b6 10ba 	ldrh.w	r1, [r6, #186]	@ 0xba
 80066f6:	9001      	str	r0, [sp, #4]
 80066f8:	4815      	ldr	r0, [pc, #84]	@ (8006750 <ulTCPWindowTxSack+0xd8>)
 80066fa:	f006 fc07 	bl	800cf0c <lUDPLoggingPrintf>
										 pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
				FreeRTOS_flush_logging();
			}

			return ulAckCount;
		}
 80066fe:	4650      	mov	r0, sl
 8006700:	b007      	add	sp, #28
 8006702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8006706:	2800      	cmp	r0, #0
							pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 8006708:	752b      	strb	r3, [r5, #20]
							if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800670a:	db0a      	blt.n	8006722 <ulTCPWindowTxSack+0xaa>
 800670c:	f8b6 30b8 	ldrh.w	r3, [r6, #184]	@ 0xb8
 8006710:	2b17      	cmp	r3, #23
 8006712:	d006      	beq.n	8006722 <ulTCPWindowTxSack+0xaa>
								FreeRTOS_debug_printf( ( "prvTCPWindowFastRetransmit: Requeue sequence number %lu < %lu\n",
 8006714:	69f2      	ldr	r2, [r6, #28]
 8006716:	480f      	ldr	r0, [pc, #60]	@ (8006754 <ulTCPWindowTxSack+0xdc>)
 8006718:	1a89      	subs	r1, r1, r2
 800671a:	eba9 0202 	sub.w	r2, r9, r2
 800671e:	f006 fbf5 	bl	800cf0c <lUDPLoggingPrintf>
							( void ) uxListRemove( &pxSegment->xQueueItem );
 8006722:	f105 0118 	add.w	r1, r5, #24
 8006726:	4608      	mov	r0, r1
 8006728:	9103      	str	r1, [sp, #12]
 800672a:	f001 ff5b 	bl	80085e4 <uxListRemove>
		( pxList->uxNumberOfItems )++;
 800672e:	6c33      	ldr	r3, [r6, #64]	@ 0x40
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8006730:	6d30      	ldr	r0, [r6, #80]	@ 0x50
			vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8006732:	f106 0240 	add.w	r2, r6, #64	@ 0x40
		pxWhere->pxPrevious->pxNext = pxNewListItem;
 8006736:	9903      	ldr	r1, [sp, #12]
		( pxList->uxNumberOfItems )++;
 8006738:	3301      	adds	r3, #1
			vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800673a:	f106 0c48 	add.w	ip, r6, #72	@ 0x48
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 800673e:	6228      	str	r0, [r5, #32]
		pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 8006740:	f8c5 c01c 	str.w	ip, [r5, #28]
		pxWhere->pxPrevious->pxNext = pxNewListItem;
 8006744:	6041      	str	r1, [r0, #4]
		pxWhere->pxPrevious = pxNewListItem;
 8006746:	6531      	str	r1, [r6, #80]	@ 0x50
		listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8006748:	62aa      	str	r2, [r5, #40]	@ 0x28
		( pxList->uxNumberOfItems )++;
 800674a:	6433      	str	r3, [r6, #64]	@ 0x40
							ulCount++;
 800674c:	e7bb      	b.n	80066c6 <ulTCPWindowTxSack+0x4e>
 800674e:	bf00      	nop
 8006750:	080112c8 	.word	0x080112c8
 8006754:	08011288 	.word	0x08011288
 8006758:	200003d0 	.word	0x200003d0

0800675c <vProcessGeneratedUDPPacket>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer: The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800675c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800675e:	4604      	mov	r4, r0
 8006760:	b083      	sub	sp, #12
	UDPPacket_t * pxUDPPacket;
	IPHeader_t * pxIPHeader;
	eARPLookupResult_t eReturned;
	uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 8006762:	e9d4 3605 	ldrd	r3, r6, [r4, #20]
	{
		uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
	}

	/* Determine the ARP cache status for the requested IP address. */
	eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 8006766:	a801      	add	r0, sp, #4
			uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
 8006768:	69e5      	ldr	r5, [r4, #28]
	eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 800676a:	4631      	mov	r1, r6
	uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 800676c:	9301      	str	r3, [sp, #4]
	eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 800676e:	f7fa fea1 	bl	80014b4 <eARPGetCacheEntry>

	if( eReturned != eCantSendPacket )
 8006772:	2802      	cmp	r0, #2
 8006774:	d003      	beq.n	800677e <vProcessGeneratedUDPPacket+0x22>
	{
		if( eReturned == eARPCacheHit )
 8006776:	2801      	cmp	r0, #1
 8006778:	d006      	beq.n	8006788 <vProcessGeneratedUDPPacket+0x2c>
						pxUDPPacket->xUDPHeader.usChecksum = 0U;
					}
				}
			#endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
		}
		else if( eReturned == eARPCacheMiss )
 800677a:	2800      	cmp	r0, #0
 800677c:	d043      	beq.n	8006806 <vProcessGeneratedUDPPacket+0xaa>
	}
	else
	{
		/* The packet can't be sent (DHCP not completed?).  Just drop the
		 * packet. */
		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800677e:	4620      	mov	r0, r4
 8006780:	f000 f942 	bl	8006a08 <vReleaseNetworkBufferAndDescriptor>
	}
}
 8006784:	b003      	add	sp, #12
 8006786:	bdf0      	pop	{r4, r5, r6, r7, pc}
			uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
 8006788:	3d2a      	subs	r5, #42	@ 0x2a
				if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 800678a:	8c22      	ldrh	r2, [r4, #32]
				pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 800678c:	b2ad      	uxth	r5, r5
				if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 800678e:	b15a      	cbz	r2, 80067a8 <vProcessGeneratedUDPPacket+0x4c>
				pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 8006790:	f105 0308 	add.w	r3, r5, #8
				pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8006794:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
				pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 8006796:	84b2      	strh	r2, [r6, #36]	@ 0x24
				pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 8006798:	ba5b      	rev16	r3, r3
				pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 800679a:	8471      	strh	r1, [r6, #34]	@ 0x22
				pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 800679c:	84f3      	strh	r3, [r6, #38]	@ 0x26
				pxUDPHeader->usChecksum = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	f886 3028 	strb.w	r3, [r6, #40]	@ 0x28
 80067a4:	f886 3029 	strb.w	r3, [r6, #41]	@ 0x29
			( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartUDPPacketHeader ) );
 80067a8:	4f1d      	ldr	r7, [pc, #116]	@ (8006820 <vProcessGeneratedUDPPacket+0xc4>)
					pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
 80067aa:	351c      	adds	r5, #28
			pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 80067ac:	f8d4 c018 	ldr.w	ip, [r4, #24]
					pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
 80067b0:	b2ad      	uxth	r5, r5
			( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartUDPPacketHeader ) );
 80067b2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80067b4:	f8cc 0006 	str.w	r0, [ip, #6]
 80067b8:	f8cc 100a 	str.w	r1, [ip, #10]
 80067bc:	f8cc 200e 	str.w	r2, [ip, #14]
 80067c0:	f8cc 3012 	str.w	r3, [ip, #18]
 80067c4:	cf03      	ldmia	r7!, {r0, r1}
 80067c6:	f8cc 0016 	str.w	r0, [ip, #22]
 80067ca:	f8cc 101a 	str.w	r1, [ip, #26]
				if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80067ce:	8c23      	ldrh	r3, [r4, #32]
 80067d0:	b90b      	cbnz	r3, 80067d6 <vProcessGeneratedUDPPacket+0x7a>
					pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 80067d2:	2301      	movs	r3, #1
 80067d4:	75f3      	strb	r3, [r6, #23]
			pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
 80067d6:	6963      	ldr	r3, [r4, #20]
			pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 80067d8:	ba6d      	rev16	r5, r5
					if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
 80067da:	4a12      	ldr	r2, [pc, #72]	@ (8006824 <vProcessGeneratedUDPPacket+0xc8>)
			pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 80067dc:	8235      	strh	r5, [r6, #16]
					if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
 80067de:	4293      	cmp	r3, r2
			pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
 80067e0:	f8c6 301e 	str.w	r3, [r6, #30]
					if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
 80067e4:	d018      	beq.n	8006818 <vProcessGeneratedUDPPacket+0xbc>
				if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80067e6:	69e3      	ldr	r3, [r4, #28]
 80067e8:	2b3b      	cmp	r3, #59	@ 0x3b
 80067ea:	d806      	bhi.n	80067fa <vProcessGeneratedUDPPacket+0x9e>
						pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 80067ec:	2100      	movs	r1, #0
 80067ee:	69a2      	ldr	r2, [r4, #24]
 80067f0:	54d1      	strb	r1, [r2, r3]
					for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80067f2:	3301      	adds	r3, #1
 80067f4:	2b3c      	cmp	r3, #60	@ 0x3c
 80067f6:	d1fa      	bne.n	80067ee <vProcessGeneratedUDPPacket+0x92>
					pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80067f8:	61e3      	str	r3, [r4, #28]
		( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 80067fa:	2101      	movs	r1, #1
 80067fc:	4620      	mov	r0, r4
 80067fe:	f000 fe47 	bl	8007490 <xNetworkInterfaceOutput>
}
 8006802:	b003      	add	sp, #12
 8006804:	bdf0      	pop	{r4, r5, r6, r7, pc}
			vARPRefreshCacheEntry( NULL, ulIPAddress );
 8006806:	9901      	ldr	r1, [sp, #4]
 8006808:	f7fa fd58 	bl	80012bc <vARPRefreshCacheEntry>
			pxNetworkBuffer->ulIPAddress = ulIPAddress;
 800680c:	9b01      	ldr	r3, [sp, #4]
			vARPGenerateRequestPacket( pxNetworkBuffer );
 800680e:	4620      	mov	r0, r4
			pxNetworkBuffer->ulIPAddress = ulIPAddress;
 8006810:	6163      	str	r3, [r4, #20]
			vARPGenerateRequestPacket( pxNetworkBuffer );
 8006812:	f7fa fec5 	bl	80015a0 <vARPGenerateRequestPacket>
 8006816:	e7e6      	b.n	80067e6 <vProcessGeneratedUDPPacket+0x8a>
						pxIPHeader->ucTimeToLive = 0x01;
 8006818:	2301      	movs	r3, #1
 800681a:	75b3      	strb	r3, [r6, #22]
 800681c:	e7e3      	b.n	80067e6 <vProcessGeneratedUDPPacket+0x8a>
 800681e:	bf00      	nop
 8006820:	20000014 	.word	0x20000014
 8006824:	fc0000e0 	.word	0xfc0000e0

08006828 <xProcessReceivedUDPPacket>:
 *
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
									  uint16_t usPort )
{
 8006828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BaseType_t xReturn = pdPASS;
	FreeRTOS_Socket_t * pxSocket;

	configASSERT( pxNetworkBuffer != NULL );
 800682c:	4604      	mov	r4, r0
{
 800682e:	b086      	sub	sp, #24
 8006830:	460e      	mov	r6, r1
	configASSERT( pxNetworkBuffer != NULL );
 8006832:	2800      	cmp	r0, #0
 8006834:	d06a      	beq.n	800690c <xProcessReceivedUDPPacket+0xe4>
	configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8006836:	69a7      	ldr	r7, [r4, #24]
 8006838:	2f00      	cmp	r7, #0
 800683a:	d060      	beq.n	80068fe <xProcessReceivedUDPPacket+0xd6>

	/* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */
	const UDPPacket_t * pxUDPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );

	/* Caller must check for minimum packet size. */
	pxSocket = pxUDPSocketLookup( usPort );
 800683c:	4630      	mov	r0, r6
 800683e:	f7fc fd05 	bl	800324c <pxUDPSocketLookup>

	if( pxSocket != NULL )
 8006842:	4605      	mov	r5, r0
 8006844:	2800      	cmp	r0, #0
 8006846:	d043      	beq.n	80068d0 <xProcessReceivedUDPPacket+0xa8>
	{
		/* When refreshing the ARP cache with received UDP packets we must be
		 * careful;  hundreds of broadcast messages may pass and if we're not
		 * handling them, no use to fill the ARP cache with those IP addresses. */
		vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 8006848:	f8d7 101a 	ldr.w	r1, [r7, #26]
 800684c:	1db8      	adds	r0, r7, #6
 800684e:	f7fa fd35 	bl	80012bc <vARPRefreshCacheEntry>

		#if ( ipconfigUSE_CALLBACKS == 1 )
			{
				/* Did the owner of this socket register a reception handler ? */
				if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 8006852:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8006856:	f1b8 0f00 	cmp.w	r8, #0
 800685a:	d017      	beq.n	800688c <xProcessReceivedUDPPacket+0x64>
				{
					struct freertos_sockaddr xSourceAddress, destinationAddress;
					void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
					FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
					xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 800685c:	8c23      	ldrh	r3, [r4, #32]
					xSourceAddress.sin_addr = pxNetworkBuffer->ulIPAddress;
					destinationAddress.sin_port = usPort;
					destinationAddress.sin_addr = pxUDPPacket->xIPHeader.ulDestinationIPAddress;

					/* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
					if( xHandler( ( Socket_t ) pxSocket,
 800685e:	4628      	mov	r0, r5
					destinationAddress.sin_port = usPort;
 8006860:	f8ad 6012 	strh.w	r6, [sp, #18]
					xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 8006864:	f8ad 300a 	strh.w	r3, [sp, #10]
					xSourceAddress.sin_addr = pxNetworkBuffer->ulIPAddress;
 8006868:	6963      	ldr	r3, [r4, #20]
								  ( void * ) pcData,
								  ( size_t ) ( pxNetworkBuffer->xDataLength - ipUDP_PAYLOAD_OFFSET_IPv4 ),
 800686a:	69e2      	ldr	r2, [r4, #28]
					xSourceAddress.sin_addr = pxNetworkBuffer->ulIPAddress;
 800686c:	9303      	str	r3, [sp, #12]
					destinationAddress.sin_addr = pxUDPPacket->xIPHeader.ulDestinationIPAddress;
 800686e:	f8d7 301e 	ldr.w	r3, [r7, #30]
					if( xHandler( ( Socket_t ) pxSocket,
 8006872:	3a2a      	subs	r2, #42	@ 0x2a
					void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 8006874:	69a1      	ldr	r1, [r4, #24]
					destinationAddress.sin_addr = pxUDPPacket->xIPHeader.ulDestinationIPAddress;
 8006876:	9305      	str	r3, [sp, #20]
					if( xHandler( ( Socket_t ) pxSocket,
 8006878:	ab04      	add	r3, sp, #16
 800687a:	312a      	adds	r1, #42	@ 0x2a
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	ab02      	add	r3, sp, #8
 8006880:	47c0      	blx	r8
 8006882:	b118      	cbz	r0, 800688c <xProcessReceivedUDPPacket+0x64>
				xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
			}
			else
		#endif /* ipconfigUSE_NBNS */
		{
			xReturn = pdFAIL;
 8006884:	2000      	movs	r0, #0
		}
	}

	return xReturn;
}
 8006886:	b006      	add	sp, #24
 8006888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			vTaskSuspendAll();
 800688c:	f002 fc36 	bl	80090fc <vTaskSuspendAll>
				taskENTER_CRITICAL();
 8006890:	f003 fa38 	bl	8009d04 <vPortEnterCritical>
					vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 8006894:	4621      	mov	r1, r4
 8006896:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 800689a:	f001 fe7d 	bl	8008598 <vListInsertEnd>
				taskEXIT_CRITICAL();
 800689e:	f003 fa53 	bl	8009d48 <vPortExitCritical>
			( void ) xTaskResumeAll();
 80068a2:	f002 fd09 	bl	80092b8 <xTaskResumeAll>
			if( pxSocket->xEventGroup != NULL )
 80068a6:	6868      	ldr	r0, [r5, #4]
 80068a8:	b110      	cbz	r0, 80068b0 <xProcessReceivedUDPPacket+0x88>
				( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 80068aa:	2101      	movs	r1, #1
 80068ac:	f001 fdf4 	bl	8008498 <xEventGroupSetBits>
					if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 80068b0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80068b2:	b113      	cbz	r3, 80068ba <xProcessReceivedUDPPacket+0x92>
 80068b4:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80068b6:	07d2      	lsls	r2, r2, #31
 80068b8:	d41c      	bmi.n	80068f4 <xProcessReceivedUDPPacket+0xcc>
					if( pxSocket->pxUserSemaphore != NULL )
 80068ba:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80068bc:	b120      	cbz	r0, 80068c8 <xProcessReceivedUDPPacket+0xa0>
						( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 80068be:	2300      	movs	r3, #0
 80068c0:	461a      	mov	r2, r3
 80068c2:	4619      	mov	r1, r3
 80068c4:	f001 ffaa 	bl	800881c <xQueueGenericSend>
{
 80068c8:	2001      	movs	r0, #1
}
 80068ca:	b006      	add	sp, #24
 80068cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 80068d0:	f64e 3314 	movw	r3, #60180	@ 0xeb14
 80068d4:	429e      	cmp	r6, r3
 80068d6:	d002      	beq.n	80068de <xProcessReceivedUDPPacket+0xb6>
 80068d8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80068da:	429a      	cmp	r2, r3
 80068dc:	d1d2      	bne.n	8006884 <xProcessReceivedUDPPacket+0x5c>
				vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 80068de:	1db8      	adds	r0, r7, #6
 80068e0:	f8d7 101a 	ldr.w	r1, [r7, #26]
 80068e4:	f7fa fcea 	bl	80012bc <vARPRefreshCacheEntry>
				xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 80068e8:	4620      	mov	r0, r4
}
 80068ea:	b006      	add	sp, #24
 80068ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 80068f0:	f7fb b9da 	b.w	8001ca8 <ulDNSHandlePacket>
						( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 80068f4:	2101      	movs	r1, #1
 80068f6:	6818      	ldr	r0, [r3, #0]
 80068f8:	f001 fdce 	bl	8008498 <xEventGroupSetBits>
 80068fc:	e7dd      	b.n	80068ba <xProcessReceivedUDPPacket+0x92>
	configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 80068fe:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8006902:	4805      	ldr	r0, [pc, #20]	@ (8006918 <xProcessReceivedUDPPacket+0xf0>)
 8006904:	f7fa f9f8 	bl	8000cf8 <vAssertCalled>
	const UDPPacket_t * pxUDPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8006908:	69a7      	ldr	r7, [r4, #24]
 800690a:	e797      	b.n	800683c <xProcessReceivedUDPPacket+0x14>
	configASSERT( pxNetworkBuffer != NULL );
 800690c:	f240 1125 	movw	r1, #293	@ 0x125
 8006910:	4801      	ldr	r0, [pc, #4]	@ (8006918 <xProcessReceivedUDPPacket+0xf0>)
 8006912:	f7fa f9f1 	bl	8000cf8 <vAssertCalled>
 8006916:	e78e      	b.n	8006836 <xProcessReceivedUDPPacket+0xe>
 8006918:	08011300 	.word	0x08011300

0800691c <xNetworkBuffersInitialise>:
	/*-----------------------------------------------------------*/

#endif /* ipconfigTCP_IP_SANITY */

BaseType_t xNetworkBuffersInitialise( void )
{
 800691c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn, x;

	/* Only initialise the buffers and their associated kernel objects if they
	have not been initialised before. */
	if( xNetworkBufferSemaphore == NULL )
 800691e:	4f17      	ldr	r7, [pc, #92]	@ (800697c <xNetworkBuffersInitialise+0x60>)
 8006920:	6838      	ldr	r0, [r7, #0]
 8006922:	b118      	cbz	r0, 800692c <xNetworkBuffersInitialise+0x10>
	{
		xReturn = pdPASS;
	}

	return xReturn;
}
 8006924:	3800      	subs	r0, #0
 8006926:	bf18      	it	ne
 8006928:	2001      	movne	r0, #1
 800692a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xNetworkBufferSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 800692c:	2140      	movs	r1, #64	@ 0x40
 800692e:	4608      	mov	r0, r1
 8006930:	f001 ff56 	bl	80087e0 <xQueueCreateCountingSemaphore>
 8006934:	6038      	str	r0, [r7, #0]
		configASSERT( xNetworkBufferSemaphore != NULL );
 8006936:	b1c8      	cbz	r0, 800696c <xNetworkBuffersInitialise+0x50>
			vListInitialise( &xFreeBuffersList );
 8006938:	4c11      	ldr	r4, [pc, #68]	@ (8006980 <xNetworkBuffersInitialise+0x64>)
 800693a:	4812      	ldr	r0, [pc, #72]	@ (8006984 <xNetworkBuffersInitialise+0x68>)
 800693c:	f001 fe1c 	bl	8008578 <vListInitialise>
			vNetworkInterfaceAllocateRAMToBuffers( xNetworkBuffers );
 8006940:	4620      	mov	r0, r4
 8006942:	f504 6610 	add.w	r6, r4, #2304	@ 0x900
				vListInsert( &xFreeBuffersList, &( xNetworkBuffers[ x ].xBufferListItem ) );
 8006946:	4d0f      	ldr	r5, [pc, #60]	@ (8006984 <xNetworkBuffersInitialise+0x68>)
			vNetworkInterfaceAllocateRAMToBuffers( xNetworkBuffers );
 8006948:	f000 fe64 	bl	8007614 <vNetworkInterfaceAllocateRAMToBuffers>
				vListInitialiseItem( &( xNetworkBuffers[ x ].xBufferListItem ) );
 800694c:	4620      	mov	r0, r4
 800694e:	f001 fe1f 	bl	8008590 <vListInitialiseItem>
				vListInsert( &xFreeBuffersList, &( xNetworkBuffers[ x ].xBufferListItem ) );
 8006952:	4621      	mov	r1, r4
				listSET_LIST_ITEM_OWNER( &( xNetworkBuffers[ x ].xBufferListItem ), &xNetworkBuffers[ x ] );
 8006954:	60e4      	str	r4, [r4, #12]
			for( x = 0; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8006956:	3424      	adds	r4, #36	@ 0x24
				vListInsert( &xFreeBuffersList, &( xNetworkBuffers[ x ].xBufferListItem ) );
 8006958:	4628      	mov	r0, r5
 800695a:	f001 fe2b 	bl	80085b4 <vListInsert>
			for( x = 0; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 800695e:	42a6      	cmp	r6, r4
 8006960:	d1f4      	bne.n	800694c <xNetworkBuffersInitialise+0x30>
			uxMinimumFreeNetworkBuffers = ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 8006962:	4b09      	ldr	r3, [pc, #36]	@ (8006988 <xNetworkBuffersInitialise+0x6c>)
 8006964:	2240      	movs	r2, #64	@ 0x40
	if( xNetworkBufferSemaphore == NULL )
 8006966:	6838      	ldr	r0, [r7, #0]
			uxMinimumFreeNetworkBuffers = ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	e7db      	b.n	8006924 <xNetworkBuffersInitialise+0x8>
		configASSERT( xNetworkBufferSemaphore != NULL );
 800696c:	4807      	ldr	r0, [pc, #28]	@ (800698c <xNetworkBuffersInitialise+0x70>)
 800696e:	21af      	movs	r1, #175	@ 0xaf
 8006970:	f7fa f9c2 	bl	8000cf8 <vAssertCalled>
		if( xNetworkBufferSemaphore != NULL )
 8006974:	6838      	ldr	r0, [r7, #0]
 8006976:	2800      	cmp	r0, #0
 8006978:	d0d4      	beq.n	8006924 <xNetworkBuffersInitialise+0x8>
 800697a:	e7dd      	b.n	8006938 <xNetworkBuffersInitialise+0x1c>
 800697c:	200003ec 	.word	0x200003ec
 8006980:	200003f0 	.word	0x200003f0
 8006984:	20000cf4 	.word	0x20000cf4
 8006988:	20000cf0 	.word	0x20000cf0
 800698c:	08011338 	.word	0x08011338

08006990 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes, TickType_t xBlockTimeTicks )
{
 8006990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* The current implementation only has a single size memory block, so
	the requested size parameter is not used (yet). */
	( void ) xRequestedSizeBytes;

	if( xNetworkBufferSemaphore != NULL )
 8006992:	4b18      	ldr	r3, [pc, #96]	@ (80069f4 <pxGetNetworkBufferWithDescriptor+0x64>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	b30b      	cbz	r3, 80069dc <pxGetNetworkBufferWithDescriptor+0x4c>
 8006998:	4606      	mov	r6, r0
	{
		/* If there is a semaphore available, there is a network buffer
		available. */
		if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 800699a:	4618      	mov	r0, r3
 800699c:	f002 f8ca 	bl	8008b34 <xQueueSemaphoreTake>
 80069a0:	2801      	cmp	r0, #1
 80069a2:	4604      	mov	r4, r0
 80069a4:	d115      	bne.n	80069d2 <pxGetNetworkBufferWithDescriptor+0x42>
		{
			/* Protect the structure as it is accessed from tasks and
			interrupts. */
			ipconfigBUFFER_ALLOC_LOCK();
 80069a6:	f003 f9ad 	bl	8009d04 <vPortEnterCritical>
			{
				pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 80069aa:	4b13      	ldr	r3, [pc, #76]	@ (80069f8 <pxGetNetworkBufferWithDescriptor+0x68>)
 80069ac:	68da      	ldr	r2, [r3, #12]
 80069ae:	68d5      	ldr	r5, [r2, #12]

				if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 80069b0:	692f      	ldr	r7, [r5, #16]
 80069b2:	429f      	cmp	r7, r3
 80069b4:	d115      	bne.n	80069e2 <pxGetNetworkBufferWithDescriptor+0x52>
					listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxReturn->xBufferListItem ) ) )
				{
					( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 80069b6:	4628      	mov	r0, r5
 80069b8:	f001 fe14 	bl	80085e4 <uxListRemove>
				else
				{
					xInvalid = pdTRUE;
				}
			}
			ipconfigBUFFER_ALLOC_UNLOCK();
 80069bc:	f003 f9c4 	bl	8009d48 <vPortExitCritical>
				/* Reading UBaseType_t, no critical section needed. */
				uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );

				/* For stats, latch the lowest number of network buffers since
				booting. */
				if( uxMinimumFreeNetworkBuffers > uxCount )
 80069c0:	4b0e      	ldr	r3, [pc, #56]	@ (80069fc <pxGetNetworkBufferWithDescriptor+0x6c>)
				uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 80069c2:	683a      	ldr	r2, [r7, #0]
				if( uxMinimumFreeNetworkBuffers > uxCount )
 80069c4:	6819      	ldr	r1, [r3, #0]
 80069c6:	4291      	cmp	r1, r2
 80069c8:	d900      	bls.n	80069cc <pxGetNetworkBufferWithDescriptor+0x3c>
				{
					uxMinimumFreeNetworkBuffers = uxCount;
 80069ca:	601a      	str	r2, [r3, #0]
			iptraceFAILED_TO_OBTAIN_NETWORK_BUFFER();
		}
	}

	return pxReturn;
}
 80069cc:	4628      	mov	r0, r5
				pxReturn->xDataLength = xRequestedSizeBytes;
 80069ce:	61ee      	str	r6, [r5, #28]
}
 80069d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			iptraceFAILED_TO_OBTAIN_NETWORK_BUFFER();
 80069d2:	f240 1121 	movw	r1, #289	@ 0x121
 80069d6:	480a      	ldr	r0, [pc, #40]	@ (8006a00 <pxGetNetworkBufferWithDescriptor+0x70>)
 80069d8:	f7fa f98e 	bl	8000cf8 <vAssertCalled>
NetworkBufferDescriptor_t *pxReturn = NULL;
 80069dc:	2500      	movs	r5, #0
}
 80069de:	4628      	mov	r0, r5
 80069e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ipconfigBUFFER_ALLOC_UNLOCK();
 80069e2:	f003 f9b1 	bl	8009d48 <vPortExitCritical>
				FreeRTOS_debug_printf( ( "pxGetNetworkBufferWithDescriptor: INVALID BUFFER: %p (valid %lu)\n",
 80069e6:	4622      	mov	r2, r4
 80069e8:	4629      	mov	r1, r5
 80069ea:	4806      	ldr	r0, [pc, #24]	@ (8006a04 <pxGetNetworkBufferWithDescriptor+0x74>)
 80069ec:	f006 fa8e 	bl	800cf0c <lUDPLoggingPrintf>
				pxReturn = NULL;
 80069f0:	e7f4      	b.n	80069dc <pxGetNetworkBufferWithDescriptor+0x4c>
 80069f2:	bf00      	nop
 80069f4:	200003ec 	.word	0x200003ec
 80069f8:	20000cf4 	.word	0x20000cf4
 80069fc:	20000cf0 	.word	0x20000cf0
 8006a00:	08011338 	.word	0x08011338
 8006a04:	0801138c 	.word	0x0801138c

08006a08 <vReleaseNetworkBufferAndDescriptor>:
	return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	4604      	mov	r4, r0
	}
	else
	{
		/* Ensure the buffer is returned to the list of free buffers before the
		counting semaphore is 'given' to say a buffer is available. */
		ipconfigBUFFER_ALLOC_LOCK();
 8006a0c:	f003 f97a 	bl	8009d04 <vPortEnterCritical>
		{
			{
				xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8006a10:	480d      	ldr	r0, [pc, #52]	@ (8006a48 <vReleaseNetworkBufferAndDescriptor+0x40>)
 8006a12:	6925      	ldr	r5, [r4, #16]
 8006a14:	4285      	cmp	r5, r0
 8006a16:	d00d      	beq.n	8006a34 <vReleaseNetworkBufferAndDescriptor+0x2c>

				if( xListItemAlreadyInFreeList == pdFALSE )
				{
					vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8006a18:	4621      	mov	r1, r4
 8006a1a:	f001 fdbd 	bl	8008598 <vListInsertEnd>
				}
			}
		}
		ipconfigBUFFER_ALLOC_UNLOCK();
 8006a1e:	f003 f993 	bl	8009d48 <vPortExitCritical>
			FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: %p ALREADY RELEASED (now %lu)\n",
				pxNetworkBuffer, uxGetNumberOfFreeNetworkBuffers( ) ) );
		}
		else
		{
			( void ) xSemaphoreGive( xNetworkBufferSemaphore );
 8006a22:	2300      	movs	r3, #0
 8006a24:	4809      	ldr	r0, [pc, #36]	@ (8006a4c <vReleaseNetworkBufferAndDescriptor+0x44>)
 8006a26:	461a      	mov	r2, r3
 8006a28:	4619      	mov	r1, r3
 8006a2a:	6800      	ldr	r0, [r0, #0]
			prvShowWarnings();
		}
		iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
	}
}
 8006a2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			( void ) xSemaphoreGive( xNetworkBufferSemaphore );
 8006a30:	f001 bef4 	b.w	800881c <xQueueGenericSend>
		ipconfigBUFFER_ALLOC_UNLOCK();
 8006a34:	f003 f988 	bl	8009d48 <vPortExitCritical>
}
/*-----------------------------------------------------------*/

UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
	return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8006a38:	682a      	ldr	r2, [r5, #0]
			FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: %p ALREADY RELEASED (now %lu)\n",
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	4804      	ldr	r0, [pc, #16]	@ (8006a50 <vReleaseNetworkBufferAndDescriptor+0x48>)
}
 8006a3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: %p ALREADY RELEASED (now %lu)\n",
 8006a42:	f006 ba63 	b.w	800cf0c <lUDPLoggingPrintf>
 8006a46:	bf00      	nop
 8006a48:	20000cf4 	.word	0x20000cf4
 8006a4c:	200003ec 	.word	0x200003ec
 8006a50:	080113d0 	.word	0x080113d0

08006a54 <uxGetMinimumFreeNetworkBuffers>:
	return uxMinimumFreeNetworkBuffers;
 8006a54:	4b01      	ldr	r3, [pc, #4]	@ (8006a5c <uxGetMinimumFreeNetworkBuffers+0x8>)
}
 8006a56:	6818      	ldr	r0, [r3, #0]
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	20000cf0 	.word	0x20000cf0

08006a60 <uxGetNumberOfFreeNetworkBuffers>:
	return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8006a60:	4b01      	ldr	r3, [pc, #4]	@ (8006a68 <uxGetNumberOfFreeNetworkBuffers+0x8>)
 8006a62:	6818      	ldr	r0, [r3, #0]
}
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	20000cf4 	.word	0x20000cf4

08006a6c <vPhyInitialise>:
}
/*-----------------------------------------------------------*/

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t *pxPhyObject, xApplicationPhyReadHook_t fnPhyRead, xApplicationPhyWriteHook_t fnPhyWrite )
{
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	460e      	mov	r6, r1
 8006a70:	4604      	mov	r4, r0
 8006a72:	4615      	mov	r5, r2
	memset( ( void * )pxPhyObject, 0, sizeof( *pxPhyObject ) );
 8006a74:	2100      	movs	r1, #0
 8006a76:	2238      	movs	r2, #56	@ 0x38
 8006a78:	3008      	adds	r0, #8
 8006a7a:	f007 f8a5 	bl	800dbc8 <memset>

	pxPhyObject->fnPhyRead = fnPhyRead;
	pxPhyObject->fnPhyWrite = fnPhyWrite;
 8006a7e:	e9c4 6500 	strd	r6, r5, [r4]
}
 8006a82:	bd70      	pop	{r4, r5, r6, pc}

08006a84 <xPhyDiscover>:
/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t *pxPhyObject )
{
BaseType_t xPhyAddress;

	pxPhyObject->xPortCount = 0;
 8006a84:	2300      	movs	r3, #0
{
 8006a86:	b570      	push	{r4, r5, r6, lr}
	{
	uint32_t ulLowerID;

		pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
		/* A valid PHY id can not be all zeros or all ones. */
		if( ( ulLowerID != ( uint16_t ) ~0U )  && ( ulLowerID != ( uint16_t ) 0U ) )
 8006a88:	f64f 76ff 	movw	r6, #65535	@ 0xffff
{
 8006a8c:	b082      	sub	sp, #8
 8006a8e:	4605      	mov	r5, r0
	for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8006a90:	461c      	mov	r4, r3
	pxPhyObject->xPortCount = 0;
 8006a92:	6283      	str	r3, [r0, #40]	@ 0x28
		pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 8006a94:	466a      	mov	r2, sp
 8006a96:	2103      	movs	r1, #3
 8006a98:	682b      	ldr	r3, [r5, #0]
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	4798      	blx	r3
		if( ( ulLowerID != ( uint16_t ) ~0U )  && ( ulLowerID != ( uint16_t ) 0U ) )
 8006a9e:	9b00      	ldr	r3, [sp, #0]
		{
		uint32_t ulUpperID;
		uint32_t ulPhyID;

			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	aa01      	add	r2, sp, #4
		if( ( ulLowerID != ( uint16_t ) ~0U )  && ( ulLowerID != ( uint16_t ) 0U ) )
 8006aa4:	42b3      	cmp	r3, r6
			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 8006aa6:	f04f 0102 	mov.w	r1, #2
		if( ( ulLowerID != ( uint16_t ) ~0U )  && ( ulLowerID != ( uint16_t ) 0U ) )
 8006aaa:	d015      	beq.n	8006ad8 <xPhyDiscover+0x54>
 8006aac:	b1a3      	cbz	r3, 8006ad8 <xPhyDiscover+0x54>
			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 8006aae:	682b      	ldr	r3, [r5, #0]
 8006ab0:	4798      	blx	r3
			ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0 );

			pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = xPhyAddress;
 8006ab2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
			ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0 );
 8006ab4:	9800      	ldr	r0, [sp, #0]
 8006ab6:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
			pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = xPhyAddress;
 8006aba:	eb05 0c03 	add.w	ip, r5, r3
			ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0 );
 8006abe:	9901      	ldr	r1, [sp, #4]
 8006ac0:	4002      	ands	r2, r0
			pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 8006ac2:	1c98      	adds	r0, r3, #2

			pxPhyObject->xPortCount++;
 8006ac4:	3301      	adds	r3, #1
			pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = xPhyAddress;
 8006ac6:	f88c 4018 	strb.w	r4, [ip, #24]
			ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0 );
 8006aca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

			/* See if there is more storage space. */
			if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 8006ace:	2b04      	cmp	r3, #4
			pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 8006ad0:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
			pxPhyObject->xPortCount++;
 8006ad4:	62ab      	str	r3, [r5, #40]	@ 0x28
			if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 8006ad6:	d007      	beq.n	8006ae8 <xPhyDiscover+0x64>
	for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8006ad8:	3401      	adds	r4, #1
 8006ada:	2c20      	cmp	r4, #32
 8006adc:	d1da      	bne.n	8006a94 <xPhyDiscover+0x10>
			{
				break;
			}
		}
	}
	if( pxPhyObject->xPortCount > 0 )
 8006ade:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	dc01      	bgt.n	8006ae8 <xPhyDiscover+0x64>
	{
		FreeRTOS_printf( ( "PHY ID %lX\n", pxPhyObject->ulPhyIDs[ 0 ] ) );
	}

	return pxPhyObject->xPortCount;
}
 8006ae4:	b002      	add	sp, #8
 8006ae6:	bd70      	pop	{r4, r5, r6, pc}
		FreeRTOS_printf( ( "PHY ID %lX\n", pxPhyObject->ulPhyIDs[ 0 ] ) );
 8006ae8:	68a9      	ldr	r1, [r5, #8]
 8006aea:	4803      	ldr	r0, [pc, #12]	@ (8006af8 <xPhyDiscover+0x74>)
 8006aec:	f006 fa0e 	bl	800cf0c <lUDPLoggingPrintf>
	return pxPhyObject->xPortCount;
 8006af0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
}
 8006af2:	b002      	add	sp, #8
 8006af4:	bd70      	pop	{r4, r5, r6, pc}
 8006af6:	bf00      	nop
 8006af8:	08011418 	.word	0x08011418

08006afc <xPhyConfigure>:
BaseType_t xPhyConfigure( EthernetPhy_t *pxPhyObject, const PhyProperties_t *pxPhyProperties )
{
uint32_t ulConfig, ulAdvertise;
BaseType_t xPhyIndex;

	if( pxPhyObject->xPortCount < 1 )
 8006afc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006afe:	2b00      	cmp	r3, #0
{
 8006b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b04:	b087      	sub	sp, #28
	if( pxPhyObject->xPortCount < 1 )
 8006b06:	f340 810e 	ble.w	8006d26 <xPhyConfigure+0x22a>
	/* The expected ID for the 'LAN8742A'  is 0x0007c130. */
	/* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
	/* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
	if( ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_AUTO ) )
 8006b0a:	780a      	ldrb	r2, [r1, #0]
 8006b0c:	4688      	mov	r8, r1
 8006b0e:	4604      	mov	r4, r0
 8006b10:	7889      	ldrb	r1, [r1, #2]
 8006b12:	2a03      	cmp	r2, #3
 8006b14:	f000 80eb 	beq.w	8006cee <xPhyConfigure+0x1f2>
			else
			{
				ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
			}
		}
		else if( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_AUTO )
 8006b18:	2903      	cmp	r1, #3
 8006b1a:	f000 80f1 	beq.w	8006d00 <xPhyConfigure+0x204>
			else
			{
				ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
			}
		}
		else if( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_100 )
 8006b1e:	2a02      	cmp	r2, #2
 8006b20:	f000 80f6 	beq.w	8006d10 <xPhyConfigure+0x214>
		}
		else
		{
			if( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_FULL )
			{
				ulAdvertise |= phyADVERTISE_10FULL;
 8006b24:	2902      	cmp	r1, #2
 8006b26:	bf14      	ite	ne
 8006b28:	2221      	movne	r2, #33	@ 0x21
 8006b2a:	2241      	moveq	r2, #65	@ 0x41
 8006b2c:	9201      	str	r2, [sp, #4]
			}
		}
	}

	/* Send a reset command to a set of PHY-ports. */
	xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 8006b2e:	2601      	movs	r6, #1
 8006b30:	f104 0917 	add.w	r9, r4, #23
 8006b34:	409e      	lsls	r6, r3
 8006b36:	464f      	mov	r7, r9
 8006b38:	3e01      	subs	r6, #1
	BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8006b3a:	463d      	mov	r5, r7
 8006b3c:	f817 af01 	ldrb.w	sl, [r7, #1]!
		pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8006b40:	aa02      	add	r2, sp, #8
 8006b42:	2100      	movs	r1, #0
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	4650      	mov	r0, sl
 8006b48:	4798      	blx	r3
		pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8006b4a:	9a02      	ldr	r2, [sp, #8]
	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006b4c:	3d16      	subs	r5, #22
		pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8006b4e:	6863      	ldr	r3, [r4, #4]
 8006b50:	4650      	mov	r0, sl
 8006b52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b56:	2100      	movs	r1, #0
	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006b58:	1b2d      	subs	r5, r5, r4
		pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8006b5a:	4798      	blx	r3
	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006b5c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006b5e:	42ab      	cmp	r3, r5
 8006b60:	dceb      	bgt.n	8006b3a <xPhyConfigure+0x3e>
	xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8006b62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
	ulDoneMask = 0UL;
 8006b66:	2500      	movs	r5, #0
				FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", (int)xPhyIndex ) );
 8006b68:	f8df a1d8 	ldr.w	sl, [pc, #472]	@ 8006d44 <xPhyConfigure+0x248>
				ulDoneMask |= ( 1UL << xPhyIndex );
 8006b6c:	2701      	movs	r7, #1
	vTaskSetTimeOutState( &xTimer );
 8006b6e:	a804      	add	r0, sp, #16
	xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8006b70:	9303      	str	r3, [sp, #12]
	vTaskSetTimeOutState( &xTimer );
 8006b72:	f002 fd81 	bl	8009678 <vTaskSetTimeOutState>
 8006b76:	9600      	str	r6, [sp, #0]
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006b78:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	dd10      	ble.n	8006ba0 <xPhyConfigure+0xa4>
 8006b7e:	46a3      	mov	fp, r4
			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	aa02      	add	r2, sp, #8
 8006b84:	2100      	movs	r1, #0
 8006b86:	f89b 0018 	ldrb.w	r0, [fp, #24]
 8006b8a:	4798      	blx	r3
			if( ( ulConfig & phyBMCR_RESET ) == 0 )
 8006b8c:	9b02      	ldr	r3, [sp, #8]
 8006b8e:	041b      	lsls	r3, r3, #16
 8006b90:	d512      	bpl.n	8006bb8 <xPhyConfigure+0xbc>
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006b92:	f10b 0b01 	add.w	fp, fp, #1
 8006b96:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006b98:	ebab 0204 	sub.w	r2, fp, r4
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	dcef      	bgt.n	8006b80 <xPhyConfigure+0x84>
		if( ulDoneMask == ulPhyMask )
 8006ba0:	9a00      	ldr	r2, [sp, #0]
 8006ba2:	42aa      	cmp	r2, r5
 8006ba4:	d017      	beq.n	8006bd6 <xPhyConfigure+0xda>
		if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8006ba6:	a903      	add	r1, sp, #12
 8006ba8:	a804      	add	r0, sp, #16
 8006baa:	f002 fd8d 	bl	80096c8 <xTaskCheckForTimeOut>
 8006bae:	b968      	cbnz	r0, 8006bcc <xPhyConfigure+0xd0>
		vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8006bb0:	2032      	movs	r0, #50	@ 0x32
 8006bb2:	f002 fc17 	bl	80093e4 <vTaskDelay>
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006bb6:	e7df      	b.n	8006b78 <xPhyConfigure+0x7c>
 8006bb8:	ebab 0604 	sub.w	r6, fp, r4
				FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", (int)xPhyIndex ) );
 8006bbc:	4650      	mov	r0, sl
 8006bbe:	4631      	mov	r1, r6
 8006bc0:	f006 f9a4 	bl	800cf0c <lUDPLoggingPrintf>
				ulDoneMask |= ( 1UL << xPhyIndex );
 8006bc4:	fa07 f106 	lsl.w	r1, r7, r6
 8006bc8:	430d      	orrs	r5, r1
 8006bca:	e7e2      	b.n	8006b92 <xPhyConfigure+0x96>
			FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02lX )\n", ulDoneMask ) );
 8006bcc:	4629      	mov	r1, r5
 8006bce:	4859      	ldr	r0, [pc, #356]	@ (8006d34 <xPhyConfigure+0x238>)
 8006bd0:	f006 f99c 	bl	800cf0c <lUDPLoggingPrintf>
			break;
 8006bd4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	dd1b      	ble.n	8006c12 <xPhyConfigure+0x116>
 8006bda:	2700      	movs	r7, #0
		BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8006bdc:	f104 0b18 	add.w	fp, r4, #24
 8006be0:	46ca      	mov	sl, r9
		if( ( ulDoneMask & ( 1UL << xPhyIndex ) ) == 0UL )
 8006be2:	fa25 f607 	lsr.w	r6, r5, r7
			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8006be6:	aa02      	add	r2, sp, #8
		if( ( ulDoneMask & ( 1UL << xPhyIndex ) ) == 0UL )
 8006be8:	f016 0601 	ands.w	r6, r6, #1
			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8006bec:	4631      	mov	r1, r6
		if( ( ulDoneMask & ( 1UL << xPhyIndex ) ) == 0UL )
 8006bee:	d10c      	bne.n	8006c0a <xPhyConfigure+0x10e>
		BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8006bf0:	f81b 9007 	ldrb.w	r9, [fp, r7]
			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	4648      	mov	r0, r9
 8006bf8:	4798      	blx	r3
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 8006bfa:	9a02      	ldr	r2, [sp, #8]
 8006bfc:	6863      	ldr	r3, [r4, #4]
 8006bfe:	4631      	mov	r1, r6
 8006c00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c04:	4648      	mov	r0, r9
 8006c06:	4798      	blx	r3
 8006c08:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006c0a:	3701      	adds	r7, #1
 8006c0c:	429f      	cmp	r7, r3
 8006c0e:	dbe8      	blt.n	8006be2 <xPhyConfigure+0xe6>
 8006c10:	46d1      	mov	r9, sl
	vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8006c12:	2032      	movs	r0, #50	@ 0x32
 8006c14:	f002 fbe6 	bl	80093e4 <vTaskDelay>

	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006c18:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	dd59      	ble.n	8006cd2 <xPhyConfigure+0x1d6>
 8006c1e:	1d27      	adds	r7, r4, #4
	switch( ulPhyID )
 8006c20:	f8df b124 	ldr.w	fp, [pc, #292]	@ 8006d48 <xPhyConfigure+0x24c>
 8006c24:	e016      	b.n	8006c54 <xPhyConfigure+0x158>

		if( ( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_AUTO ) )
		{
			ulConfig |= phyBMCR_FULL_DUPLEX;
		}
		else if( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_HALF )
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d103      	bne.n	8006c32 <xPhyConfigure+0x136>
		{
			ulConfig &= ~phyBMCR_FULL_DUPLEX;
 8006c2a:	9b03      	ldr	r3, [sp, #12]
 8006c2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c30:	9303      	str	r3, [sp, #12]
	switch( ulPhyID )
 8006c32:	455e      	cmp	r6, fp
 8006c34:	d036      	beq.n	8006ca4 <xPhyConfigure+0x1a8>
 8006c36:	4b40      	ldr	r3, [pc, #256]	@ (8006d38 <xPhyConfigure+0x23c>)
 8006c38:	429e      	cmp	r6, r3
 8006c3a:	d033      	beq.n	8006ca4 <xPhyConfigure+0x1a8>
	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006c3c:	f1aa 0a16 	sub.w	sl, sl, #22
			}
			/* update PHY Control Register. */
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
		}

		FreeRTOS_printf( ( "+TCP: advertise: %04lX config %04lX\n", ulAdvertise, ulConfig ) );
 8006c40:	9a03      	ldr	r2, [sp, #12]
 8006c42:	9901      	ldr	r1, [sp, #4]
 8006c44:	483d      	ldr	r0, [pc, #244]	@ (8006d3c <xPhyConfigure+0x240>)
	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006c46:	ebaa 0a04 	sub.w	sl, sl, r4
		FreeRTOS_printf( ( "+TCP: advertise: %04lX config %04lX\n", ulAdvertise, ulConfig ) );
 8006c4a:	f006 f95f 	bl	800cf0c <lUDPLoggingPrintf>
	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006c4e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006c50:	459a      	cmp	sl, r3
 8006c52:	da3e      	bge.n	8006cd2 <xPhyConfigure+0x1d6>
	BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8006c54:	46ca      	mov	sl, r9
 8006c56:	f819 5f01 	ldrb.w	r5, [r9, #1]!
		pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 8006c5a:	9a01      	ldr	r2, [sp, #4]
 8006c5c:	2104      	movs	r1, #4
 8006c5e:	6863      	ldr	r3, [r4, #4]
 8006c60:	4628      	mov	r0, r5
	uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8006c62:	f857 6f04 	ldr.w	r6, [r7, #4]!
		pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 8006c66:	4798      	blx	r3
		pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8006c68:	6823      	ldr	r3, [r4, #0]
 8006c6a:	aa03      	add	r2, sp, #12
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	4628      	mov	r0, r5
 8006c70:	4798      	blx	r3
		ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 8006c72:	9b03      	ldr	r3, [sp, #12]
		if( ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_AUTO ) )
 8006c74:	f898 2000 	ldrb.w	r2, [r8]
		ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 8006c78:	f423 5304 	bic.w	r3, r3, #8448	@ 0x2100
		if( ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_AUTO ) )
 8006c7c:	3a02      	subs	r2, #2
		ulConfig |= phyBMCR_AN_ENABLE;
 8006c7e:	f443 5180 	orr.w	r1, r3, #4096	@ 0x1000
		if( ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_AUTO ) )
 8006c82:	2a01      	cmp	r2, #1
		ulConfig |= phyBMCR_AN_ENABLE;
 8006c84:	9103      	str	r1, [sp, #12]
		if( ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_AUTO ) )
 8006c86:	d802      	bhi.n	8006c8e <xPhyConfigure+0x192>
			ulConfig |= phyBMCR_SPEED_100;
 8006c88:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8006c8c:	9303      	str	r3, [sp, #12]
		if( ( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_AUTO ) )
 8006c8e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006c92:	1e9a      	subs	r2, r3, #2
 8006c94:	2a01      	cmp	r2, #1
 8006c96:	d8c6      	bhi.n	8006c26 <xPhyConfigure+0x12a>
			ulConfig |= phyBMCR_FULL_DUPLEX;
 8006c98:	9b03      	ldr	r3, [sp, #12]
	switch( ulPhyID )
 8006c9a:	455e      	cmp	r6, fp
			ulConfig |= phyBMCR_FULL_DUPLEX;
 8006c9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ca0:	9303      	str	r3, [sp, #12]
	switch( ulPhyID )
 8006ca2:	d1c8      	bne.n	8006c36 <xPhyConfigure+0x13a>
			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	aa04      	add	r2, sp, #16
 8006ca8:	2119      	movs	r1, #25
 8006caa:	4628      	mov	r0, r5
 8006cac:	4798      	blx	r3
			ulPhyControl &= ~( PHYCR_MDIX_EN|PHYCR_MDIX_FORCE );
 8006cae:	9a04      	ldr	r2, [sp, #16]
			if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 8006cb0:	f898 3001 	ldrb.w	r3, [r8, #1]
			ulPhyControl &= ~( PHYCR_MDIX_EN|PHYCR_MDIX_FORCE );
 8006cb4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
			if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 8006cb8:	2b03      	cmp	r3, #3
			ulPhyControl &= ~( PHYCR_MDIX_EN|PHYCR_MDIX_FORCE );
 8006cba:	9204      	str	r2, [sp, #16]
			if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 8006cbc:	d013      	beq.n	8006ce6 <xPhyConfigure+0x1ea>
			else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d002      	beq.n	8006cc8 <xPhyConfigure+0x1cc>
				ulPhyControl |= PHYCR_MDIX_FORCE;
 8006cc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006cc6:	9204      	str	r2, [sp, #16]
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 8006cc8:	4628      	mov	r0, r5
 8006cca:	6863      	ldr	r3, [r4, #4]
 8006ccc:	2119      	movs	r1, #25
 8006cce:	4798      	blx	r3
 8006cd0:	e7b4      	b.n	8006c3c <xPhyConfigure+0x140>
	}

	/* Keep these values for later use. */
	pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 8006cd2:	9b03      	ldr	r3, [sp, #12]
	pxPhyObject->ulACRValue = ulAdvertise;

	return 0;
 8006cd4:	2000      	movs	r0, #0
	pxPhyObject->ulACRValue = ulAdvertise;
 8006cd6:	9a01      	ldr	r2, [sp, #4]
	pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 8006cd8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
	pxPhyObject->ulACRValue = ulAdvertise;
 8006cdc:	6322      	str	r2, [r4, #48]	@ 0x30
	pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 8006cde:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 8006ce0:	b007      	add	sp, #28
 8006ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ulPhyControl |= PHYCR_MDIX_EN;
 8006ce6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cea:	9204      	str	r2, [sp, #16]
 8006cec:	e7ec      	b.n	8006cc8 <xPhyConfigure+0x1cc>
	if( ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_AUTO ) )
 8006cee:	2903      	cmp	r1, #3
 8006cf0:	d015      	beq.n	8006d1e <xPhyConfigure+0x222>
				ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 8006cf2:	2902      	cmp	r1, #2
 8006cf4:	f240 1241 	movw	r2, #321	@ 0x141
 8006cf8:	bf18      	it	ne
 8006cfa:	22a1      	movne	r2, #161	@ 0xa1
 8006cfc:	9201      	str	r2, [sp, #4]
 8006cfe:	e716      	b.n	8006b2e <xPhyConfigure+0x32>
				ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 8006d00:	2a01      	cmp	r2, #1
 8006d02:	f240 1181 	movw	r1, #385	@ 0x181
 8006d06:	bf0c      	ite	eq
 8006d08:	2261      	moveq	r2, #97	@ 0x61
 8006d0a:	460a      	movne	r2, r1
 8006d0c:	9201      	str	r2, [sp, #4]
 8006d0e:	e70e      	b.n	8006b2e <xPhyConfigure+0x32>
				ulAdvertise |= phyADVERTISE_100FULL;
 8006d10:	2902      	cmp	r1, #2
 8006d12:	f240 1201 	movw	r2, #257	@ 0x101
 8006d16:	bf18      	it	ne
 8006d18:	2281      	movne	r2, #129	@ 0x81
 8006d1a:	9201      	str	r2, [sp, #4]
 8006d1c:	e707      	b.n	8006b2e <xPhyConfigure+0x32>
		ulAdvertise = phyADVERTISE_ALL;
 8006d1e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8006d22:	9201      	str	r2, [sp, #4]
 8006d24:	e703      	b.n	8006b2e <xPhyConfigure+0x32>
		FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
 8006d26:	4806      	ldr	r0, [pc, #24]	@ (8006d40 <xPhyConfigure+0x244>)
 8006d28:	f006 f8f0 	bl	800cf0c <lUDPLoggingPrintf>
		return -1;
 8006d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d30:	e7d6      	b.n	8006ce0 <xPhyConfigure+0x1e4>
 8006d32:	bf00      	nop
 8006d34:	0801146c 	.word	0x0801146c
 8006d38:	20005c90 	.word	0x20005c90
 8006d3c:	080114a4 	.word	0x080114a4
 8006d40:	08011424 	.word	0x08011424
 8006d44:	08011448 	.word	0x08011448
 8006d48:	0007c130 	.word	0x0007c130

08006d4c <xPhyStartAutoNegotiation>:
uint32_t xPhyIndex, ulDoneMask, ulBitMask;
uint32_t ulPHYLinkStatus, ulRegValue;
TickType_t xRemainingTime;
TimeOut_t xTimer;

	if( ulPhyMask == ( uint32_t ) 0U )
 8006d4c:	2900      	cmp	r1, #0
 8006d4e:	d04f      	beq.n	8006df0 <xPhyStartAutoNegotiation+0xa4>
	{
		return 0;
	}
	for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8006d50:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8006d52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d56:	4604      	mov	r4, r0
 8006d58:	b089      	sub	sp, #36	@ 0x24
 8006d5a:	4688      	mov	r8, r1
	for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8006d5c:	b1bb      	cbz	r3, 8006d8e <xPhyStartAutoNegotiation+0x42>
 8006d5e:	2500      	movs	r5, #0
	{
		if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
		{
		BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8006d60:	f100 0618 	add.w	r6, r0, #24
		if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 8006d64:	fa28 f205 	lsr.w	r2, r8, r5

			/* Enable Auto-Negotiation. */
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue);
 8006d68:	2104      	movs	r1, #4
		if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 8006d6a:	07d0      	lsls	r0, r2, #31
 8006d6c:	d50c      	bpl.n	8006d88 <xPhyStartAutoNegotiation+0x3c>
		BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8006d6e:	5d77      	ldrb	r7, [r6, r5]
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue);
 8006d70:	6863      	ldr	r3, [r4, #4]
 8006d72:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8006d74:	4638      	mov	r0, r7
 8006d76:	4798      	blx	r3
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 8006d78:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006d7a:	6863      	ldr	r3, [r4, #4]
 8006d7c:	4638      	mov	r0, r7
 8006d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d82:	2100      	movs	r1, #0
 8006d84:	4798      	blx	r3
 8006d86:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
	for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8006d88:	3501      	adds	r5, #1
 8006d8a:	42ab      	cmp	r3, r5
 8006d8c:	d8ea      	bhi.n	8006d64 <xPhyStartAutoNegotiation+0x18>
		}
	}
	xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 8006d8e:	f06f 0917 	mvn.w	r9, #23
 8006d92:	f640 33b8 	movw	r3, #3000	@ 0xbb8
	vTaskSetTimeOutState( &xTimer );
	ulDoneMask = 0;
 8006d96:	2500      	movs	r5, #0
	vTaskSetTimeOutState( &xTimer );
 8006d98:	a806      	add	r0, sp, #24
 8006d9a:	eba9 0904 	sub.w	r9, r9, r4
	xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 8006d9e:	9304      	str	r3, [sp, #16]
	vTaskSetTimeOutState( &xTimer );
 8006da0:	f002 fc6a 	bl	8009678 <vTaskSetTimeOutState>
	/* Wait until the auto-negotiation will be completed */
	for( ;; )
	{
		ulBitMask = ( uint32_t ) 1U;
		for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006da4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006da6:	b1c3      	cbz	r3, 8006dda <xPhyStartAutoNegotiation+0x8e>
 8006da8:	f104 0718 	add.w	r7, r4, #24
		ulBitMask = ( uint32_t ) 1U;
 8006dac:	2601      	movs	r6, #1
		{
			if( ( ulPhyMask & ulBitMask ) != 0lu )
 8006dae:	ea18 0f06 	tst.w	r8, r6
 8006db2:	d00c      	beq.n	8006dce <xPhyStartAutoNegotiation+0x82>
			{
				if( ( ulDoneMask & ulBitMask ) == 0lu )
 8006db4:	422e      	tst	r6, r5
				{
				BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];

					pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8006db6:	aa03      	add	r2, sp, #12
 8006db8:	f04f 0101 	mov.w	r1, #1
				if( ( ulDoneMask & ulBitMask ) == 0lu )
 8006dbc:	d107      	bne.n	8006dce <xPhyStartAutoNegotiation+0x82>
					pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	7838      	ldrb	r0, [r7, #0]
 8006dc2:	4798      	blx	r3
					if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 8006dc4:	9b03      	ldr	r3, [sp, #12]
 8006dc6:	0699      	lsls	r1, r3, #26
 8006dc8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
					{
						ulDoneMask |= ulBitMask;
 8006dca:	bf48      	it	mi
 8006dcc:	4335      	orrmi	r5, r6
		for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006dce:	3701      	adds	r7, #1
 8006dd0:	0076      	lsls	r6, r6, #1
 8006dd2:	eb09 0207 	add.w	r2, r9, r7
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d8e9      	bhi.n	8006dae <xPhyStartAutoNegotiation+0x62>
					}
				}
			}
		}
		if( ulPhyMask == ulDoneMask )
 8006dda:	4545      	cmp	r5, r8
 8006ddc:	d011      	beq.n	8006e02 <xPhyStartAutoNegotiation+0xb6>
		{
			break;
		}
		if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8006dde:	a904      	add	r1, sp, #16
 8006de0:	a806      	add	r0, sp, #24
 8006de2:	f002 fc71 	bl	80096c8 <xTaskCheckForTimeOut>
 8006de6:	b928      	cbnz	r0, 8006df4 <xPhyStartAutoNegotiation+0xa8>
		{
			FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMCR_RESET timed out ( done 0x%02lX )\n", ulDoneMask ) );
			break;
		}
		vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8006de8:	2032      	movs	r0, #50	@ 0x32
 8006dea:	f002 fafb 	bl	80093e4 <vTaskDelay>
		ulBitMask = ( uint32_t ) 1U;
 8006dee:	e7d9      	b.n	8006da4 <xPhyStartAutoNegotiation+0x58>
			}
		}
	}	/* if( ulDoneMask != ( uint32_t) 0U ) */

	return 0;
}
 8006df0:	2000      	movs	r0, #0
 8006df2:	4770      	bx	lr
			FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMCR_RESET timed out ( done 0x%02lX )\n", ulDoneMask ) );
 8006df4:	4629      	mov	r1, r5
 8006df6:	4850      	ldr	r0, [pc, #320]	@ (8006f38 <xPhyStartAutoNegotiation+0x1ec>)
 8006df8:	f006 f888 	bl	800cf0c <lUDPLoggingPrintf>
	if( ulDoneMask != ( uint32_t ) 0U )
 8006dfc:	2d00      	cmp	r5, #0
 8006dfe:	d06b      	beq.n	8006ed8 <xPhyStartAutoNegotiation+0x18c>
 8006e00:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
		pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 8006e02:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8006e04:	ea22 0205 	bic.w	r2, r2, r5
 8006e08:	6362      	str	r2, [r4, #52]	@ 0x34
		for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d064      	beq.n	8006ed8 <xPhyStartAutoNegotiation+0x18c>
		ulBitMask = ( uint32_t ) 1U;
 8006e0e:	2701      	movs	r7, #1
		for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006e10:	2600      	movs	r6, #0
			if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 8006e12:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 8006f50 <xPhyStartAutoNegotiation+0x204>
	switch( ulPhyID )
 8006e16:	46aa      	mov	sl, r5
 8006e18:	f8df b138 	ldr.w	fp, [pc, #312]	@ 8006f54 <xPhyStartAutoNegotiation+0x208>
			if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 8006e1c:	ea1a 0f07 	tst.w	sl, r7
 8006e20:	d056      	beq.n	8006ed0 <xPhyStartAutoNegotiation+0x184>
		BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8006e22:	f104 0318 	add.w	r3, r4, #24
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 8006e26:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006e28:	2100      	movs	r1, #0
		BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8006e2a:	5d9d      	ldrb	r5, [r3, r6]
		uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8006e2c:	f104 0308 	add.w	r3, r4, #8
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 8006e30:	4628      	mov	r0, r5
		uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8006e32:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 8006e36:	6863      	ldr	r3, [r4, #4]
 8006e38:	4798      	blx	r3
			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue);
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	aa03      	add	r2, sp, #12
 8006e3e:	2101      	movs	r1, #1
 8006e40:	4628      	mov	r0, r5
 8006e42:	4798      	blx	r3
			if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0 )
 8006e44:	9b03      	ldr	r3, [sp, #12]
 8006e46:	075a      	lsls	r2, r3, #29
 8006e48:	d502      	bpl.n	8006e50 <xPhyStartAutoNegotiation+0x104>
				pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8006e4a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e4c:	433b      	orrs	r3, r7
 8006e4e:	6363      	str	r3, [r4, #52]	@ 0x34
			if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 8006e50:	45c8      	cmp	r8, r9
				pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus);
 8006e52:	6823      	ldr	r3, [r4, #0]
			if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 8006e54:	d044      	beq.n	8006ee0 <xPhyStartAutoNegotiation+0x194>
	switch( ulPhyID )
 8006e56:	45d8      	cmp	r8, fp
 8006e58:	d015      	beq.n	8006e86 <xPhyStartAutoNegotiation+0x13a>
 8006e5a:	4a38      	ldr	r2, [pc, #224]	@ (8006f3c <xPhyStartAutoNegotiation+0x1f0>)
 8006e5c:	4590      	cmp	r8, r2
 8006e5e:	d012      	beq.n	8006e86 <xPhyStartAutoNegotiation+0x13a>
				pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus);
 8006e60:	211f      	movs	r1, #31
 8006e62:	4628      	mov	r0, r5
 8006e64:	aa05      	add	r2, sp, #20
 8006e66:	4798      	blx	r3
				ulRegValue = 0;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	9303      	str	r3, [sp, #12]
				if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 8006e6c:	9b05      	ldr	r3, [sp, #20]
 8006e6e:	f013 0110 	ands.w	r1, r3, #16
 8006e72:	d050      	beq.n	8006f16 <xPhyStartAutoNegotiation+0x1ca>
				if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 8006e74:	f003 030c 	and.w	r3, r3, #12
 8006e78:	2b04      	cmp	r3, #4
 8006e7a:	d057      	beq.n	8006f2c <xPhyStartAutoNegotiation+0x1e0>
					ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8006e7c:	2104      	movs	r1, #4
			FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 8006e7e:	4a30      	ldr	r2, [pc, #192]	@ (8006f40 <xPhyStartAutoNegotiation+0x1f4>)
					ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8006e80:	9103      	str	r1, [sp, #12]
			FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 8006e82:	2364      	movs	r3, #100	@ 0x64
 8006e84:	e010      	b.n	8006ea8 <xPhyStartAutoNegotiation+0x15c>
				pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue);
 8006e86:	2110      	movs	r1, #16
 8006e88:	aa03      	add	r2, sp, #12
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	4798      	blx	r3
			FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 8006e8e:	9903      	ldr	r1, [sp, #12]
 8006e90:	f001 0504 	and.w	r5, r1, #4
 8006e94:	4a2a      	ldr	r2, [pc, #168]	@ (8006f40 <xPhyStartAutoNegotiation+0x1f4>)
 8006e96:	482b      	ldr	r0, [pc, #172]	@ (8006f44 <xPhyStartAutoNegotiation+0x1f8>)
 8006e98:	f001 0302 	and.w	r3, r1, #2
 8006e9c:	2d00      	cmp	r5, #0
 8006e9e:	bf08      	it	eq
 8006ea0:	4602      	moveq	r2, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d0ed      	beq.n	8006e82 <xPhyStartAutoNegotiation+0x136>
 8006ea6:	230a      	movs	r3, #10
 8006ea8:	4827      	ldr	r0, [pc, #156]	@ (8006f48 <xPhyStartAutoNegotiation+0x1fc>)
 8006eaa:	9000      	str	r0, [sp, #0]
 8006eac:	4827      	ldr	r0, [pc, #156]	@ (8006f4c <xPhyStartAutoNegotiation+0x200>)
 8006eae:	f006 f82d 	bl	800cf0c <lUDPLoggingPrintf>
			if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 8006eb2:	9b03      	ldr	r3, [sp, #12]
				pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 8006eb4:	f013 0f04 	tst.w	r3, #4
 8006eb8:	bf0c      	ite	eq
 8006eba:	2201      	moveq	r2, #1
 8006ebc:	2202      	movne	r2, #2
			if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 8006ebe:	079b      	lsls	r3, r3, #30
 8006ec0:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
				pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 8006ec4:	bf4c      	ite	mi
 8006ec6:	2301      	movmi	r3, #1
				pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 8006ec8:	2302      	movpl	r3, #2
 8006eca:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8006ece:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
		for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006ed0:	3601      	adds	r6, #1
 8006ed2:	007f      	lsls	r7, r7, #1
 8006ed4:	42b3      	cmp	r3, r6
 8006ed6:	d8a1      	bhi.n	8006e1c <xPhyStartAutoNegotiation+0xd0>
}
 8006ed8:	2000      	movs	r0, #0
 8006eda:	b009      	add	sp, #36	@ 0x24
 8006edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus);
 8006ee0:	aa05      	add	r2, sp, #20
 8006ee2:	211e      	movs	r1, #30
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	4798      	blx	r3
				switch( ulControlStatus & 0x07 )
 8006ee8:	9b05      	ldr	r3, [sp, #20]
					ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8006eea:	9903      	ldr	r1, [sp, #12]
				switch( ulControlStatus & 0x07 )
 8006eec:	f003 0203 	and.w	r2, r3, #3
 8006ef0:	f003 0307 	and.w	r3, r3, #7
 8006ef4:	2a01      	cmp	r2, #1
				switch( ulControlStatus & 0x07 )
 8006ef6:	f1a3 0305 	sub.w	r3, r3, #5
					ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8006efa:	bf04      	itt	eq
 8006efc:	f041 0102 	orreq.w	r1, r1, #2
 8006f00:	9103      	streq	r1, [sp, #12]
				switch( ulControlStatus & 0x07 )
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d8c4      	bhi.n	8006e90 <xPhyStartAutoNegotiation+0x144>
					ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8006f06:	f041 0204 	orr.w	r2, r1, #4
 8006f0a:	f001 0302 	and.w	r3, r1, #2
 8006f0e:	9203      	str	r2, [sp, #12]
			FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 8006f10:	4611      	mov	r1, r2
 8006f12:	4a0b      	ldr	r2, [pc, #44]	@ (8006f40 <xPhyStartAutoNegotiation+0x1f4>)
 8006f14:	e7c5      	b.n	8006ea2 <xPhyStartAutoNegotiation+0x156>
				if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 8006f16:	f003 030c 	and.w	r3, r3, #12
 8006f1a:	2b04      	cmp	r3, #4
 8006f1c:	d001      	beq.n	8006f22 <xPhyStartAutoNegotiation+0x1d6>
			FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 8006f1e:	4a09      	ldr	r2, [pc, #36]	@ (8006f44 <xPhyStartAutoNegotiation+0x1f8>)
 8006f20:	e7af      	b.n	8006e82 <xPhyStartAutoNegotiation+0x136>
					ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8006f22:	2102      	movs	r1, #2
			FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 8006f24:	4a07      	ldr	r2, [pc, #28]	@ (8006f44 <xPhyStartAutoNegotiation+0x1f8>)
 8006f26:	230a      	movs	r3, #10
					ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8006f28:	9103      	str	r1, [sp, #12]
			FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 8006f2a:	e7bd      	b.n	8006ea8 <xPhyStartAutoNegotiation+0x15c>
					ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8006f2c:	2106      	movs	r1, #6
			FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 8006f2e:	4a04      	ldr	r2, [pc, #16]	@ (8006f40 <xPhyStartAutoNegotiation+0x1f4>)
 8006f30:	230a      	movs	r3, #10
					ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8006f32:	9103      	str	r1, [sp, #12]
			FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 8006f34:	e7b8      	b.n	8006ea8 <xPhyStartAutoNegotiation+0x15c>
 8006f36:	bf00      	nop
 8006f38:	080114dc 	.word	0x080114dc
 8006f3c:	2000a250 	.word	0x2000a250
 8006f40:	080114cc 	.word	0x080114cc
 8006f44:	080114d4 	.word	0x080114d4
 8006f48:	08011554 	.word	0x08011554
 8006f4c:	08011520 	.word	0x08011520
 8006f50:	00221560 	.word	0x00221560
 8006f54:	20005c90 	.word	0x20005c90

08006f58 <xPhyCheckLinkStatus>:
{
uint32_t ulStatus, ulBitMask = 1U;
BaseType_t xPhyIndex;
BaseType_t xNeedCheck = pdFALSE;

	if( xHadReception > 0 )
 8006f58:	2900      	cmp	r1, #0
{
 8006f5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f5e:	4604      	mov	r4, r0
 8006f60:	b082      	sub	sp, #8
	{
		/* A packet was received. No need to check for the PHY status now,
		but set a timer to check it later on. */
		vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8006f62:	f100 081c 	add.w	r8, r0, #28
	if( xHadReception > 0 )
 8006f66:	dd24      	ble.n	8006fb2 <xPhyCheckLinkStatus+0x5a>
		vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8006f68:	4640      	mov	r0, r8
 8006f6a:	f002 fb85 	bl	8009678 <vTaskSetTimeOutState>
		pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006f6e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
		pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8006f70:	f643 2298 	movw	r2, #15000	@ 0x3a98
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006f74:	2b00      	cmp	r3, #0
		pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8006f76:	6262      	str	r2, [r4, #36]	@ 0x24
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006f78:	dd4d      	ble.n	8007016 <xPhyCheckLinkStatus+0xbe>
BaseType_t xNeedCheck = pdFALSE;
 8006f7a:	2700      	movs	r7, #0
uint32_t ulStatus, ulBitMask = 1U;
 8006f7c:	2501      	movs	r5, #1
		{
			if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
			{
				pxPhyObject->ulLinkStatusMask |= ulBitMask;
				FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
 8006f7e:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 800705c <xPhyCheckLinkStatus+0x104>
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006f82:	463e      	mov	r6, r7
 8006f84:	e003      	b.n	8006f8e <xPhyCheckLinkStatus+0x36>
 8006f86:	42b3      	cmp	r3, r6
 8006f88:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8006f8c:	dd0d      	ble.n	8006faa <xPhyCheckLinkStatus+0x52>
			if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 8006f8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006f90:	3601      	adds	r6, #1
			if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 8006f92:	4229      	tst	r1, r5
 8006f94:	d1f7      	bne.n	8006f86 <xPhyCheckLinkStatus+0x2e>
				pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8006f96:	4329      	orrs	r1, r5
				FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
 8006f98:	4640      	mov	r0, r8
				xNeedCheck = pdTRUE;
 8006f9a:	2701      	movs	r7, #1
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006f9c:	006d      	lsls	r5, r5, #1
				pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8006f9e:	6361      	str	r1, [r4, #52]	@ 0x34
				FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
 8006fa0:	f005 ffb4 	bl	800cf0c <lUDPLoggingPrintf>
				xNeedCheck = pdTRUE;
 8006fa4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006fa6:	42b3      	cmp	r3, r6
 8006fa8:	dcf1      	bgt.n	8006f8e <xPhyCheckLinkStatus+0x36>
			/* The link status is low, polling may be done more frequently. */
			pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
		}
	}
	return xNeedCheck;
}
 8006faa:	4638      	mov	r0, r7
 8006fac:	b002      	add	sp, #8
 8006fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 8006fb2:	f100 0124 	add.w	r1, r0, #36	@ 0x24
 8006fb6:	4640      	mov	r0, r8
 8006fb8:	f002 fb86 	bl	80096c8 <xTaskCheckForTimeOut>
 8006fbc:	b358      	cbz	r0, 8007016 <xPhyCheckLinkStatus+0xbe>
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006fbe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	dd3f      	ble.n	8007044 <xPhyCheckLinkStatus+0xec>
 8006fc4:	f104 0a17 	add.w	sl, r4, #23
BaseType_t xNeedCheck = pdFALSE;
 8006fc8:	2700      	movs	r7, #0
uint32_t ulStatus, ulBitMask = 1U;
 8006fca:	2601      	movs	r6, #1
					FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
 8006fcc:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800705c <xPhyCheckLinkStatus+0x104>
		BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8006fd0:	4655      	mov	r5, sl
			if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 8006fd2:	aa01      	add	r2, sp, #4
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
 8006fdc:	4798      	blx	r3
 8006fde:	b990      	cbnz	r0, 8007006 <xPhyCheckLinkStatus+0xae>
				if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 8006fe0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fe2:	9b01      	ldr	r3, [sp, #4]
 8006fe4:	4231      	tst	r1, r6
 8006fe6:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8006fea:	f003 0304 	and.w	r3, r3, #4
 8006fee:	bf14      	ite	ne
 8006ff0:	2001      	movne	r0, #1
 8006ff2:	2000      	moveq	r0, #0
 8006ff4:	4290      	cmp	r0, r2
 8006ff6:	d006      	beq.n	8007006 <xPhyCheckLinkStatus+0xae>
					if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 8006ff8:	b30b      	cbz	r3, 800703e <xPhyCheckLinkStatus+0xe6>
						pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8006ffa:	4331      	orrs	r1, r6
					FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
 8006ffc:	4648      	mov	r0, r9
 8006ffe:	6361      	str	r1, [r4, #52]	@ 0x34
					xNeedCheck = pdTRUE;
 8007000:	2701      	movs	r7, #1
					FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
 8007002:	f005 ff83 	bl	800cf0c <lUDPLoggingPrintf>
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8007006:	3d16      	subs	r5, #22
 8007008:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800700a:	0072      	lsls	r2, r6, #1
 800700c:	1b2d      	subs	r5, r5, r4
 800700e:	42ab      	cmp	r3, r5
 8007010:	dd06      	ble.n	8007020 <xPhyCheckLinkStatus+0xc8>
 8007012:	4616      	mov	r6, r2
 8007014:	e7dc      	b.n	8006fd0 <xPhyCheckLinkStatus+0x78>
BaseType_t xNeedCheck = pdFALSE;
 8007016:	2700      	movs	r7, #0
}
 8007018:	4638      	mov	r0, r7
 800701a:	b002      	add	sp, #8
 800701c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8007020:	4640      	mov	r0, r8
 8007022:	f002 fb29 	bl	8009678 <vTaskSetTimeOutState>
		if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 8007026:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007028:	401e      	ands	r6, r3
 800702a:	f036 4300 	bics.w	r3, r6, #2147483648	@ 0x80000000
 800702e:	d00d      	beq.n	800704c <xPhyCheckLinkStatus+0xf4>
			pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8007030:	f643 2398 	movw	r3, #15000	@ 0x3a98
}
 8007034:	4638      	mov	r0, r7
			pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8007036:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8007038:	b002      	add	sp, #8
 800703a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 800703e:	ea21 0106 	bic.w	r1, r1, r6
 8007042:	e7db      	b.n	8006ffc <xPhyCheckLinkStatus+0xa4>
		vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8007044:	4640      	mov	r0, r8
BaseType_t xNeedCheck = pdFALSE;
 8007046:	2700      	movs	r7, #0
		vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8007048:	f002 fb16 	bl	8009678 <vTaskSetTimeOutState>
			pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 800704c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 8007050:	4638      	mov	r0, r7
			pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 8007052:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8007054:	b002      	add	sp, #8
 8007056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800705a:	bf00      	nop
 800705c:	0801155c 	.word	0x0801155c

08007060 <prvNetworkInterfaceInput>:
    }
}
/*-----------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInput( void )
{
 8007060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    BaseType_t xReturn = 0;
 8007064:	2700      	movs	r7, #0
{
 8007066:	b086      	sub	sp, #24
        NetworkBufferDescriptor_t * pxReceivedBuffer = NULL;
        ETH_BufferTypeDef data_buffer;
        size_t uxDataLength;
        size_t uxLength;

        uxDataLength = HAL_ETH_GetRxData( &( xEthHandle ), &( data_buffer ) );
 8007068:	4e25      	ldr	r6, [pc, #148]	@ (8007100 <prvNetworkInterfaceInput+0xa0>)
                    #endif
                }

                if( pxReceivedBuffer == NULL )
                {
                    FreeRTOS_printf( ( "Strange: no descriptor received\n" ) );
 800706a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8007104 <prvNetworkInterfaceInput+0xa4>
        uxDataLength = HAL_ETH_GetRxData( &( xEthHandle ), &( data_buffer ) );
 800706e:	a903      	add	r1, sp, #12
 8007070:	4630      	mov	r0, r6
 8007072:	f000 fd49 	bl	8007b08 <HAL_ETH_GetRxData>
        if( uxDataLength == 0U )
 8007076:	4604      	mov	r4, r0
 8007078:	b308      	cbz	r0, 80070be <prvNetworkInterfaceInput+0x5e>
                if( data_buffer.buffer != NULL )
 800707a:	9803      	ldr	r0, [sp, #12]
        xReturn++;
 800707c:	3701      	adds	r7, #1
                if( data_buffer.buffer != NULL )
 800707e:	b310      	cbz	r0, 80070c6 <prvNetworkInterfaceInput+0x66>
                    pxReceivedBuffer = pxPacketBuffer_to_NetworkBuffer( data_buffer.buffer );
 8007080:	f7fa fe92 	bl	8001da8 <pxPacketBuffer_to_NetworkBuffer>
                if( pxReceivedBuffer == NULL )
 8007084:	4605      	mov	r5, r0
 8007086:	b1f0      	cbz	r0, 80070c6 <prvNetworkInterfaceInput+0x66>
                /* Reserve the length of the packet that was just received. */
                uxLength = uxDataLength;
            }
        #endif /* if ( ipconfigZERO_COPY_RX_DRIVER != 0 ) */

        pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxLength, 0u );
 8007088:	2100      	movs	r1, #0
 800708a:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 800708e:	f7ff fc7f 	bl	8006990 <pxGetNetworkBufferWithDescriptor>
            iptraceETHERNET_RX_EVENT_LOST();
        }

        #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
            {
                if( pxBufferDescriptor == NULL )
 8007092:	b330      	cbz	r0, 80070e2 <prvNetworkInterfaceInput+0x82>
                pucBuffer = pxBufferDescriptor->pucEthernetBuffer;
            }

            /* Assign an RX buffer to the descriptor, so that
             * a next packet can be received. */
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 8007094:	6981      	ldr	r1, [r0, #24]
 8007096:	4630      	mov	r0, r6
                    pxReceivedBuffer->xDataLength = uxDataLength;
 8007098:	61ec      	str	r4, [r5, #28]
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 800709a:	f000 fd65 	bl	8007b68 <HAL_ETH_BuildRxDescriptors>

        if( pxReceivedBuffer != NULL )
        {
            BaseType_t xDoRelease = pdFALSE;

            if( eConsiderFrameForProcessing( pxReceivedBuffer->pucEthernetBuffer ) != eProcessBuffer )
 800709e:	69a8      	ldr	r0, [r5, #24]
 80070a0:	f7fb f80a 	bl	80020b8 <eConsiderFrameForProcessing>
 80070a4:	2801      	cmp	r0, #1
 80070a6:	4603      	mov	r3, r0
 80070a8:	d020      	beq.n	80070ec <prvNetworkInterfaceInput+0x8c>
                }
            }

            if( xDoRelease != pdFALSE )
            {
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
 80070aa:	4628      	mov	r0, r5
 80070ac:	f7ff fcac 	bl	8006a08 <vReleaseNetworkBufferAndDescriptor>
        uxDataLength = HAL_ETH_GetRxData( &( xEthHandle ), &( data_buffer ) );
 80070b0:	a903      	add	r1, sp, #12
 80070b2:	4630      	mov	r0, r6
 80070b4:	f000 fd28 	bl	8007b08 <HAL_ETH_GetRxData>
        if( uxDataLength == 0U )
 80070b8:	4604      	mov	r4, r0
 80070ba:	2800      	cmp	r0, #0
 80070bc:	d1dd      	bne.n	800707a <prvNetworkInterfaceInput+0x1a>
            }
        }
    }

    return xReturn;
}
 80070be:	4638      	mov	r0, r7
 80070c0:	b006      	add	sp, #24
 80070c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    FreeRTOS_printf( ( "Strange: no descriptor received\n" ) );
 80070c6:	4640      	mov	r0, r8
 80070c8:	f005 ff20 	bl	800cf0c <lUDPLoggingPrintf>
        pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxLength, 0u );
 80070cc:	2100      	movs	r1, #0
 80070ce:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 80070d2:	f7ff fc5d 	bl	8006990 <pxGetNetworkBufferWithDescriptor>
                if( pxBufferDescriptor == NULL )
 80070d6:	b120      	cbz	r0, 80070e2 <prvNetworkInterfaceInput+0x82>
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 80070d8:	6981      	ldr	r1, [r0, #24]
 80070da:	4630      	mov	r0, r6
 80070dc:	f000 fd44 	bl	8007b68 <HAL_ETH_BuildRxDescriptors>
        if( pxReceivedBuffer != NULL )
 80070e0:	e7c5      	b.n	800706e <prvNetworkInterfaceInput+0xe>
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 80070e2:	2100      	movs	r1, #0
 80070e4:	4630      	mov	r0, r6
 80070e6:	f000 fd3f 	bl	8007b68 <HAL_ETH_BuildRxDescriptors>
        if( pxReceivedBuffer != NULL )
 80070ea:	e7c0      	b.n	800706e <prvNetworkInterfaceInput+0xe>
                if( xSendEventStructToIPTask( &( xRxEvent ), 0 ) != pdFALSE )
 80070ec:	2100      	movs	r1, #0
 80070ee:	a801      	add	r0, sp, #4
                IPStackEvent_t xRxEvent =
 80070f0:	f88d 3004 	strb.w	r3, [sp, #4]
 80070f4:	9502      	str	r5, [sp, #8]
                if( xSendEventStructToIPTask( &( xRxEvent ), 0 ) != pdFALSE )
 80070f6:	f7fa ff5f 	bl	8001fb8 <xSendEventStructToIPTask>
 80070fa:	2800      	cmp	r0, #0
 80070fc:	d1b7      	bne.n	800706e <prvNetworkInterfaceInput+0xe>
 80070fe:	e7d4      	b.n	80070aa <prvNetworkInterfaceInput+0x4a>
 8007100:	20000d80 	.word	0x20000d80
 8007104:	08011584 	.word	0x08011584

08007108 <ETH_PHY_IO_WriteReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_WriteReg( uint32_t ulDevAddr,
                                    uint32_t ulRegAddr,
                                    uint32_t pulRegVal )
{
 8007108:	4684      	mov	ip, r0
    int32_t iResult = -1;

    if( HAL_ETH_WritePHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 800710a:	4806      	ldr	r0, [pc, #24]	@ (8007124 <ETH_PHY_IO_WriteReg+0x1c>)
{
 800710c:	b508      	push	{r3, lr}
 800710e:	4613      	mov	r3, r2
    if( HAL_ETH_WritePHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 8007110:	460a      	mov	r2, r1
 8007112:	4661      	mov	r1, ip
 8007114:	f000 fe56 	bl	8007dc4 <HAL_ETH_WritePHYRegister>
 8007118:	3800      	subs	r0, #0
 800711a:	bf18      	it	ne
 800711c:	2001      	movne	r0, #1
    {
        iResult = 0;
    }

    return iResult;
}
 800711e:	4240      	negs	r0, r0
 8007120:	bd08      	pop	{r3, pc}
 8007122:	bf00      	nop
 8007124:	20000d80 	.word	0x20000d80

08007128 <ETH_PHY_IO_ReadReg>:
{
 8007128:	4684      	mov	ip, r0
    if( HAL_ETH_ReadPHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 800712a:	4806      	ldr	r0, [pc, #24]	@ (8007144 <ETH_PHY_IO_ReadReg+0x1c>)
{
 800712c:	b508      	push	{r3, lr}
 800712e:	4613      	mov	r3, r2
    if( HAL_ETH_ReadPHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 8007130:	460a      	mov	r2, r1
 8007132:	4661      	mov	r1, ip
 8007134:	f000 fe18 	bl	8007d68 <HAL_ETH_ReadPHYRegister>
 8007138:	3800      	subs	r0, #0
 800713a:	bf18      	it	ne
 800713c:	2001      	movne	r0, #1
}
 800713e:	4240      	negs	r0, r0
 8007140:	bd08      	pop	{r3, pc}
 8007142:	bf00      	nop
 8007144:	20000d80 	.word	0x20000d80

08007148 <prvEthernetUpdateConfig>:
{
 8007148:	b570      	push	{r4, r5, r6, lr}
 800714a:	4605      	mov	r5, r0
    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
 800714c:	4c1b      	ldr	r4, [pc, #108]	@ (80071bc <prvEthernetUpdateConfig+0x74>)
{
 800714e:	b09a      	sub	sp, #104	@ 0x68
    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
 8007150:	481b      	ldr	r0, [pc, #108]	@ (80071c0 <prvEthernetUpdateConfig+0x78>)
 8007152:	462a      	mov	r2, r5
 8007154:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007156:	f005 fed9 	bl	800cf0c <lUDPLoggingPrintf>
    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 800715a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800715c:	431d      	orrs	r5, r3
 800715e:	d026      	beq.n	80071ae <prvEthernetUpdateConfig+0x66>
        xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &( xPhyObject ) ) );
 8007160:	2601      	movs	r6, #1
 8007162:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8007164:	4620      	mov	r0, r4
 8007166:	fa06 f101 	lsl.w	r1, r6, r1
 800716a:	3901      	subs	r1, #1
 800716c:	f7ff fdee 	bl	8006d4c <xPhyStartAutoNegotiation>
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 8007170:	f894 503e 	ldrb.w	r5, [r4, #62]	@ 0x3e
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 8007174:	f894 403c 	ldrb.w	r4, [r4, #60]	@ 0x3c
        HAL_ETH_GetMACConfig( &( xEthHandle ), &( MACConf ) );
 8007178:	a901      	add	r1, sp, #4
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 800717a:	f1a5 0502 	sub.w	r5, r5, #2
        HAL_ETH_GetMACConfig( &( xEthHandle ), &( MACConf ) );
 800717e:	4811      	ldr	r0, [pc, #68]	@ (80071c4 <prvEthernetUpdateConfig+0x7c>)
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 8007180:	1ba4      	subs	r4, r4, r6
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 8007182:	fab5 f585 	clz	r5, r5
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 8007186:	bf18      	it	ne
 8007188:	2401      	movne	r4, #1
        HAL_ETH_GetMACConfig( &( xEthHandle ), &( MACConf ) );
 800718a:	f000 fe4d 	bl	8007e28 <HAL_ETH_GetMACConfig>
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 800718e:	096d      	lsrs	r5, r5, #5
        HAL_ETH_SetMACConfig( &( xEthHandle ), &( MACConf ) );
 8007190:	a901      	add	r1, sp, #4
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 8007192:	03a4      	lsls	r4, r4, #14
        HAL_ETH_SetMACConfig( &( xEthHandle ), &( MACConf ) );
 8007194:	480b      	ldr	r0, [pc, #44]	@ (80071c4 <prvEthernetUpdateConfig+0x7c>)
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 8007196:	036d      	lsls	r5, r5, #13
        MACConf.Speed = speed;
 8007198:	e9cd 4506 	strd	r4, r5, [sp, #24]
        HAL_ETH_SetMACConfig( &( xEthHandle ), &( MACConf ) );
 800719c:	f000 ff0e 	bl	8007fbc <HAL_ETH_SetMACConfig>
        HAL_ETH_Start_IT( &( xEthHandle ) );
 80071a0:	4808      	ldr	r0, [pc, #32]	@ (80071c4 <prvEthernetUpdateConfig+0x7c>)
                MACConf.ChecksumOffload = ENABLE;
 80071a2:	f88d 6008 	strb.w	r6, [sp, #8]
        HAL_ETH_Start_IT( &( xEthHandle ) );
 80071a6:	f000 fb67 	bl	8007878 <HAL_ETH_Start_IT>
}
 80071aa:	b01a      	add	sp, #104	@ 0x68
 80071ac:	bd70      	pop	{r4, r5, r6, pc}
        HAL_ETH_Stop_IT( &( xEthHandle ) );
 80071ae:	4805      	ldr	r0, [pc, #20]	@ (80071c4 <prvEthernetUpdateConfig+0x7c>)
}
 80071b0:	b01a      	add	sp, #104	@ 0x68
 80071b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HAL_ETH_Stop_IT( &( xEthHandle ) );
 80071b6:	f000 bbab 	b.w	8007910 <HAL_ETH_Stop_IT>
 80071ba:	bf00      	nop
 80071bc:	20000d08 	.word	0x20000d08
 80071c0:	080115a8 	.word	0x080115a8
 80071c4:	20000d80 	.word	0x20000d80

080071c8 <prvEMACHandlerTask>:
    return xCount;
}
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void * pvParameters )
{
 80071c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071cc:	4c47      	ldr	r4, [pc, #284]	@ (80072ec <prvEMACHandlerTask+0x124>)
/* When sending a packet, all descriptors in the transmission channel may
 * be occupied.  In stat case, the program will wait (block) for the counting
 * semaphore. */
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100UL );
    size_t uxTXDescriptorsUsed = 0U;
    size_t uxRXDescriptorsUsed = ETH_RX_DESC_CNT;
 80071ce:	f04f 0808 	mov.w	r8, #8
    size_t uxTXDescriptorsUsed = 0U;
 80071d2:	2700      	movs	r7, #0
 80071d4:	f8df a134 	ldr.w	sl, [pc, #308]	@ 800730c <prvEMACHandlerTask+0x144>
 80071d8:	4e45      	ldr	r6, [pc, #276]	@ (80072f0 <prvEMACHandlerTask+0x128>)
 80071da:	f1a4 0974 	sub.w	r9, r4, #116	@ 0x74
 80071de:	f8df b118 	ldr.w	fp, [pc, #280]	@ 80072f8 <prvEMACHandlerTask+0x130>
                size_t uxOwnCount;

                /* Call a function that monitors resources: the amount of free network
                 * buffers and the amount of free space on the heap.  See FreeRTOS_IP.c
                 * for more detailed comments. */
                vPrintResourceStats();
 80071e2:	f7fb fa31 	bl	8002648 <vPrintResourceStats>

                /* Some more statistics: number of free descriptors. */
                uxUsed = ETH_TX_DESC_CNT - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 80071e6:	f8da 0000 	ldr.w	r0, [sl]
 80071ea:	f001 fd73 	bl	8008cd4 <uxQueueMessagesWaiting>
 80071ee:	f1c0 010e 	rsb	r1, r0, #14

                if( uxTXDescriptorsUsed < uxUsed )
 80071f2:	428f      	cmp	r7, r1
 80071f4:	d328      	bcc.n	8007248 <prvEMACHandlerTask+0x80>
    for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 80071f6:	4b3f      	ldr	r3, [pc, #252]	@ (80072f4 <prvEMACHandlerTask+0x12c>)
    BaseType_t xCount = 0;
 80071f8:	2100      	movs	r1, #0
        __IO const ETH_DMADescTypeDef * dmarxdesc =
 80071fa:	f853 2f04 	ldr.w	r2, [r3, #4]!
        if( ( dmarxdesc->DESC3 & ETH_DMARXNDESCWBF_OWN ) != 0U )
 80071fe:	68d2      	ldr	r2, [r2, #12]
 8007200:	2a00      	cmp	r2, #0
            xCount++;
 8007202:	bfb8      	it	lt
 8007204:	3101      	addlt	r1, #1
    for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8007206:	429c      	cmp	r4, r3
 8007208:	d1f7      	bne.n	80071fa <prvEMACHandlerTask+0x32>
                                       ETH_TX_DESC_CNT ) );
                }

                uxOwnCount = uxGetOwnCount( &( xEthHandle ) );

                if( uxRXDescriptorsUsed > uxOwnCount )
 800720a:	4588      	cmp	r8, r1
 800720c:	d85b      	bhi.n	80072c6 <prvEMACHandlerTask+0xfe>
                                       ETH_RX_DESC_CNT ) );
                }
            }
        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

        ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 800720e:	2100      	movs	r1, #0
 8007210:	2264      	movs	r2, #100	@ 0x64
 8007212:	4608      	mov	r0, r1
 8007214:	f002 fbba 	bl	800998c <ulTaskGenericNotifyTake>

        /* Wait for the Ethernet MAC interrupt to indicate that another packet
         * has been received. */
        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0U )
 8007218:	6835      	ldr	r5, [r6, #0]
 800721a:	f015 0501 	ands.w	r5, r5, #1
 800721e:	d146      	bne.n	80072ae <prvEMACHandlerTask+0xe6>
        /* When a packet has been transmitted, the descriptor must be
         * prepared for a next transmission.
         * When using zero-copy, the network buffer must be released
         * ( i.e. returned to the pool of network buffers ). */

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0U )
 8007220:	6833      	ldr	r3, [r6, #0]
 8007222:	079a      	lsls	r2, r3, #30
 8007224:	d428      	bmi.n	8007278 <prvEMACHandlerTask+0xb0>
                xSemaphoreGive( xTransmissionMutex );
            }
        }

        /* Some error has occurred, possibly an overflow or an underflow. */
        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0U )
 8007226:	6833      	ldr	r3, [r6, #0]
 8007228:	075b      	lsls	r3, r3, #29
 800722a:	d413      	bmi.n	8007254 <prvEMACHandlerTask+0x8c>
            /* Enable all interrupts */
            HAL_ETH_Start_IT( &( xEthHandle ) );
            xResult += prvNetworkInterfaceInput();
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != pdFALSE )
 800722c:	4629      	mov	r1, r5
 800722e:	4832      	ldr	r0, [pc, #200]	@ (80072f8 <prvEMACHandlerTask+0x130>)
 8007230:	f7ff fe92 	bl	8006f58 <xPhyCheckLinkStatus>
 8007234:	2800      	cmp	r0, #0
 8007236:	d0d4      	beq.n	80071e2 <prvEMACHandlerTask+0x1a>
    if( xPhyObject.ulLinkStatusMask != 0U )
 8007238:	f8db 5034 	ldr.w	r5, [fp, #52]	@ 0x34
 800723c:	2d00      	cmp	r5, #0
 800723e:	d048      	beq.n	80072d2 <prvEMACHandlerTask+0x10a>
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
            }
            else
            {
                /* Something has changed to a Link Status, need re-check. */
                prvEthernetUpdateConfig( pdFALSE );
 8007240:	2000      	movs	r0, #0
 8007242:	f7ff ff81 	bl	8007148 <prvEthernetUpdateConfig>
 8007246:	e7cc      	b.n	80071e2 <prvEMACHandlerTask+0x1a>
                    FreeRTOS_printf( ( "TX descriptors %u/%u\n",
 8007248:	220e      	movs	r2, #14
 800724a:	482c      	ldr	r0, [pc, #176]	@ (80072fc <prvEMACHandlerTask+0x134>)
 800724c:	460f      	mov	r7, r1
 800724e:	f005 fe5d 	bl	800cf0c <lUDPLoggingPrintf>
 8007252:	e7d0      	b.n	80071f6 <prvEMACHandlerTask+0x2e>
    portENTER_CRITICAL();
 8007254:	f002 fd56 	bl	8009d04 <vPortEnterCritical>
    *( pulValue ) &= ~( ulValue );
 8007258:	6833      	ldr	r3, [r6, #0]
 800725a:	f023 0304 	bic.w	r3, r3, #4
 800725e:	6033      	str	r3, [r6, #0]
    portEXIT_CRITICAL();
 8007260:	f002 fd72 	bl	8009d48 <vPortExitCritical>
            xEthHandle.gState = HAL_ETH_STATE_READY;
 8007264:	2310      	movs	r3, #16
            HAL_ETH_Start_IT( &( xEthHandle ) );
 8007266:	4648      	mov	r0, r9
            xEthHandle.gState = HAL_ETH_STATE_READY;
 8007268:	f8c9 3090 	str.w	r3, [r9, #144]	@ 0x90
            HAL_ETH_Start_IT( &( xEthHandle ) );
 800726c:	f000 fb04 	bl	8007878 <HAL_ETH_Start_IT>
            xResult += prvNetworkInterfaceInput();
 8007270:	f7ff fef6 	bl	8007060 <prvNetworkInterfaceInput>
 8007274:	4405      	add	r5, r0
 8007276:	e7d9      	b.n	800722c <prvEMACHandlerTask+0x64>
    portENTER_CRITICAL();
 8007278:	f002 fd44 	bl	8009d04 <vPortEnterCritical>
    *( pulValue ) &= ~( ulValue );
 800727c:	6833      	ldr	r3, [r6, #0]
 800727e:	f023 0302 	bic.w	r3, r3, #2
 8007282:	6033      	str	r3, [r6, #0]
    portEXIT_CRITICAL();
 8007284:	f002 fd60 	bl	8009d48 <vPortExitCritical>
            if( xSemaphoreTake( xTransmissionMutex, 10000U ) != pdFAIL )
 8007288:	4b1d      	ldr	r3, [pc, #116]	@ (8007300 <prvEMACHandlerTask+0x138>)
 800728a:	f242 7110 	movw	r1, #10000	@ 0x2710
 800728e:	6818      	ldr	r0, [r3, #0]
 8007290:	f001 fc50 	bl	8008b34 <xQueueSemaphoreTake>
 8007294:	2800      	cmp	r0, #0
 8007296:	d0c6      	beq.n	8007226 <prvEMACHandlerTask+0x5e>
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8007298:	4648      	mov	r0, r9
 800729a:	f001 f805 	bl	80082a8 <ETH_Clear_Tx_Descriptors>
                xSemaphoreGive( xTransmissionMutex );
 800729e:	2300      	movs	r3, #0
 80072a0:	4817      	ldr	r0, [pc, #92]	@ (8007300 <prvEMACHandlerTask+0x138>)
 80072a2:	461a      	mov	r2, r3
 80072a4:	4619      	mov	r1, r3
 80072a6:	6800      	ldr	r0, [r0, #0]
 80072a8:	f001 fab8 	bl	800881c <xQueueGenericSend>
 80072ac:	e7bb      	b.n	8007226 <prvEMACHandlerTask+0x5e>
    portENTER_CRITICAL();
 80072ae:	f002 fd29 	bl	8009d04 <vPortEnterCritical>
    *( pulValue ) &= ~( ulValue );
 80072b2:	6833      	ldr	r3, [r6, #0]
 80072b4:	f023 0301 	bic.w	r3, r3, #1
 80072b8:	6033      	str	r3, [r6, #0]
    portEXIT_CRITICAL();
 80072ba:	f002 fd45 	bl	8009d48 <vPortExitCritical>
            xResult = prvNetworkInterfaceInput();
 80072be:	f7ff fecf 	bl	8007060 <prvNetworkInterfaceInput>
 80072c2:	4605      	mov	r5, r0
 80072c4:	e7ac      	b.n	8007220 <prvEMACHandlerTask+0x58>
                    FreeRTOS_printf( ( "RX descriptors %u/%u\n",
 80072c6:	2208      	movs	r2, #8
 80072c8:	480e      	ldr	r0, [pc, #56]	@ (8007304 <prvEMACHandlerTask+0x13c>)
 80072ca:	4688      	mov	r8, r1
 80072cc:	f005 fe1e 	bl	800cf0c <lUDPLoggingPrintf>
 80072d0:	e79d      	b.n	800720e <prvEMACHandlerTask+0x46>
                HAL_ETH_Stop_IT( &( xEthHandle ) );
 80072d2:	4648      	mov	r0, r9
 80072d4:	f000 fb1c 	bl	8007910 <HAL_ETH_Stop_IT>
                memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 80072d8:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 80072dc:	4629      	mov	r1, r5
 80072de:	480a      	ldr	r0, [pc, #40]	@ (8007308 <prvEMACHandlerTask+0x140>)
 80072e0:	f006 fc72 	bl	800dbc8 <memset>
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 80072e4:	4648      	mov	r0, r9
 80072e6:	f000 ffdf 	bl	80082a8 <ETH_Clear_Tx_Descriptors>
 80072ea:	e77a      	b.n	80071e2 <prvEMACHandlerTask+0x1a>
 80072ec:	20000df4 	.word	0x20000df4
 80072f0:	20000e38 	.word	0x20000e38
 80072f4:	20000dd4 	.word	0x20000dd4
 80072f8:	20000d08 	.word	0x20000d08
 80072fc:	080115dc 	.word	0x080115dc
 8007300:	20000e2c 	.word	0x20000e2c
 8007304:	080115f4 	.word	0x080115f4
 8007308:	24078000 	.word	0x24078000
 800730c:	20000e30 	.word	0x20000e30

08007310 <xNetworkInterfaceInitialise>:
{
 8007310:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( xMacInitStatus == eMACInit )
 8007312:	4e4a      	ldr	r6, [pc, #296]	@ (800743c <xNetworkInterfaceInitialise+0x12c>)
{
 8007314:	b083      	sub	sp, #12
    if( xMacInitStatus == eMACInit )
 8007316:	7834      	ldrb	r4, [r6, #0]
 8007318:	b374      	cbz	r4, 8007378 <xNetworkInterfaceInitialise+0x68>
    if( xMacInitStatus == eMACPass )
 800731a:	2c01      	cmp	r4, #1
 800731c:	d022      	beq.n	8007364 <xNetworkInterfaceInitialise+0x54>
    BaseType_t xResult = pdFAIL;
 800731e:	2000      	movs	r0, #0
}
 8007320:	b003      	add	sp, #12
 8007322:	bdf0      	pop	{r4, r5, r6, r7, pc}
            HAL_ETH_SetMDIOClockRange( &( xEthHandle ) );
 8007324:	4846      	ldr	r0, [pc, #280]	@ (8007440 <xNetworkInterfaceInitialise+0x130>)
 8007326:	f000 fe57 	bl	8007fd8 <HAL_ETH_SetMDIOClockRange>
    vPhyInitialise( &( xPhyObject ),
 800732a:	4a46      	ldr	r2, [pc, #280]	@ (8007444 <xNetworkInterfaceInitialise+0x134>)
 800732c:	4946      	ldr	r1, [pc, #280]	@ (8007448 <xNetworkInterfaceInitialise+0x138>)
 800732e:	4847      	ldr	r0, [pc, #284]	@ (800744c <xNetworkInterfaceInitialise+0x13c>)
 8007330:	f7ff fb9c 	bl	8006a6c <vPhyInitialise>
    xPhyDiscover( &( xPhyObject ) );
 8007334:	4845      	ldr	r0, [pc, #276]	@ (800744c <xNetworkInterfaceInitialise+0x13c>)
 8007336:	f7ff fba5 	bl	8006a84 <xPhyDiscover>
    xPhyConfigure( &( xPhyObject ), &( xPHYProperties ) );
 800733a:	4945      	ldr	r1, [pc, #276]	@ (8007450 <xNetworkInterfaceInitialise+0x140>)
 800733c:	4843      	ldr	r0, [pc, #268]	@ (800744c <xNetworkInterfaceInitialise+0x13c>)
 800733e:	f7ff fbdd 	bl	8006afc <xPhyConfigure>
            prvEthernetUpdateConfig( pdTRUE );
 8007342:	2001      	movs	r0, #1
 8007344:	f7ff ff00 	bl	8007148 <prvEthernetUpdateConfig>
            if( xTaskCreate( prvEMACHandlerTask, niEMAC_HANDLER_TASK_NAME, niEMAC_HANDLER_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &( xEMACTaskHandle ) ) == pdPASS )
 8007348:	4842      	ldr	r0, [pc, #264]	@ (8007454 <xNetworkInterfaceInitialise+0x144>)
 800734a:	2105      	movs	r1, #5
 800734c:	2300      	movs	r3, #0
 800734e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007352:	e9cd 1000 	strd	r1, r0, [sp]
 8007356:	4940      	ldr	r1, [pc, #256]	@ (8007458 <xNetworkInterfaceInitialise+0x148>)
 8007358:	4840      	ldr	r0, [pc, #256]	@ (800745c <xNetworkInterfaceInitialise+0x14c>)
 800735a:	f001 fda5 	bl	8008ea8 <xTaskCreate>
 800735e:	2801      	cmp	r0, #1
 8007360:	d127      	bne.n	80073b2 <xNetworkInterfaceInitialise+0xa2>
                xMacInitStatus = eMACPass;
 8007362:	7030      	strb	r0, [r6, #0]
        if( xPhyObject.ulLinkStatusMask != 0uL )
 8007364:	4b39      	ldr	r3, [pc, #228]	@ (800744c <xNetworkInterfaceInitialise+0x13c>)
 8007366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0d8      	beq.n	800731e <xNetworkInterfaceInitialise+0xe>
            FreeRTOS_printf( ( "Link Status is high\n" ) );
 800736c:	483c      	ldr	r0, [pc, #240]	@ (8007460 <xNetworkInterfaceInitialise+0x150>)
 800736e:	f005 fdcd 	bl	800cf0c <lUDPLoggingPrintf>
            xResult = pdPASS;
 8007372:	2001      	movs	r0, #1
}
 8007374:	b003      	add	sp, #12
 8007376:	bdf0      	pop	{r4, r5, r6, r7, pc}
        xEthHandle.Instance = ETH;
 8007378:	4d31      	ldr	r5, [pc, #196]	@ (8007440 <xNetworkInterfaceInitialise+0x130>)
 800737a:	4b3a      	ldr	r3, [pc, #232]	@ (8007464 <xNetworkInterfaceInitialise+0x154>)
        xEthHandle.Init.RxDesc = DMARxDscrTab;
 800737c:	4f3a      	ldr	r7, [pc, #232]	@ (8007468 <xNetworkInterfaceInitialise+0x158>)
        xEthHandle.Instance = ETH;
 800737e:	602b      	str	r3, [r5, #0]
        xEthHandle.Init.MACAddr = ( uint8_t * ) FreeRTOS_GetMACAddress();
 8007380:	f7fb f9b6 	bl	80026f0 <FreeRTOS_GetMACAddress>
        xEthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007384:	2301      	movs	r3, #1
        xEthHandle.Init.MACAddr = ( uint8_t * ) FreeRTOS_GetMACAddress();
 8007386:	6068      	str	r0, [r5, #4]
        xEthHandle.Init.TxDesc = DMATxDscrTab;
 8007388:	4838      	ldr	r0, [pc, #224]	@ (800746c <xNetworkInterfaceInitialise+0x15c>)
        memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 800738a:	f44f 72a8 	mov.w	r2, #336	@ 0x150
        xEthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800738e:	722b      	strb	r3, [r5, #8]
        xEthHandle.Init.RxBuffLen = ( ETH_RX_BUF_SIZE - ipBUFFER_PADDING ) & ~( ( uint32_t ) 3U );
 8007390:	f240 53f4 	movw	r3, #1524	@ 0x5f4
        memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8007394:	4621      	mov	r1, r4
        xEthHandle.Init.RxDesc = DMARxDscrTab;
 8007396:	612f      	str	r7, [r5, #16]
        xEthHandle.Init.RxBuffLen = ( ETH_RX_BUF_SIZE - ipBUFFER_PADDING ) & ~( ( uint32_t ) 3U );
 8007398:	616b      	str	r3, [r5, #20]
        xEthHandle.Init.TxDesc = DMATxDscrTab;
 800739a:	60e8      	str	r0, [r5, #12]
        memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 800739c:	f006 fc14 	bl	800dbc8 <memset>
        memset( &( DMARxDscrTab ), '\0', sizeof( DMARxDscrTab ) );
 80073a0:	22c0      	movs	r2, #192	@ 0xc0
 80073a2:	4621      	mov	r1, r4
 80073a4:	4638      	mov	r0, r7
 80073a6:	f006 fc0f 	bl	800dbc8 <memset>
        xHalEthInitStatus = HAL_ETH_Init( &( xEthHandle ) );
 80073aa:	4628      	mov	r0, r5
 80073ac:	f000 fe56 	bl	800805c <HAL_ETH_Init>
        if( xHalEthInitStatus == HAL_OK )
 80073b0:	b110      	cbz	r0, 80073b8 <xNetworkInterfaceInitialise+0xa8>
                xMacInitStatus = eMACFailed;
 80073b2:	2302      	movs	r3, #2
 80073b4:	7033      	strb	r3, [r6, #0]
 80073b6:	e7b2      	b.n	800731e <xNetworkInterfaceInitialise+0xe>
            memset( &( xTxConfig ), 0, sizeof( ETH_TxPacketConfig ) );
 80073b8:	4b2d      	ldr	r3, [pc, #180]	@ (8007470 <xNetworkInterfaceInitialise+0x160>)
 80073ba:	4601      	mov	r1, r0
 80073bc:	2230      	movs	r2, #48	@ 0x30
 80073be:	4618      	mov	r0, r3
 80073c0:	f006 fc02 	bl	800dbc8 <memset>
            xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TX_DESC_CNT, ( UBaseType_t ) ETH_TX_DESC_CNT );
 80073c4:	210e      	movs	r1, #14
            memset( &( xTxConfig ), 0, sizeof( ETH_TxPacketConfig ) );
 80073c6:	4603      	mov	r3, r0
                    xTxConfig.Attributes |= ETH_TX_PACKETS_FEATURES_CSUM;
 80073c8:	2021      	movs	r0, #33	@ 0x21
                    xTxConfig.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80073ca:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
                    xTxConfig.Attributes |= ETH_TX_PACKETS_FEATURES_CSUM;
 80073ce:	f843 0c04 	str.w	r0, [r3, #-4]
            xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TX_DESC_CNT, ( UBaseType_t ) ETH_TX_DESC_CNT );
 80073d2:	4608      	mov	r0, r1
                    xTxConfig.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80073d4:	611a      	str	r2, [r3, #16]
            xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TX_DESC_CNT, ( UBaseType_t ) ETH_TX_DESC_CNT );
 80073d6:	f001 fa03 	bl	80087e0 <xQueueCreateCountingSemaphore>
 80073da:	4b26      	ldr	r3, [pc, #152]	@ (8007474 <xNetworkInterfaceInitialise+0x164>)
 80073dc:	6018      	str	r0, [r3, #0]
            configASSERT( xTXDescriptorSemaphore );
 80073de:	b338      	cbz	r0, 8007430 <xNetworkInterfaceInitialise+0x120>
            xTransmissionMutex = xSemaphoreCreateMutex();
 80073e0:	2001      	movs	r0, #1
 80073e2:	f001 fadb 	bl	800899c <xQueueCreateMutex>
 80073e6:	4b24      	ldr	r3, [pc, #144]	@ (8007478 <xNetworkInterfaceInitialise+0x168>)
 80073e8:	6018      	str	r0, [r3, #0]
            configASSERT( xTransmissionMutex );
 80073ea:	b1d8      	cbz	r0, 8007424 <xNetworkInterfaceInitialise+0x114>
{
 80073ec:	2400      	movs	r4, #0
                        configASSERT( pucBuffer != NULL );
 80073ee:	4f23      	ldr	r7, [pc, #140]	@ (800747c <xNetworkInterfaceInitialise+0x16c>)
                HAL_ETH_DescAssignMemory( &( xEthHandle ), uxIndex, pucBuffer, NULL );
 80073f0:	4d13      	ldr	r5, [pc, #76]	@ (8007440 <xNetworkInterfaceInitialise+0x130>)
 80073f2:	e009      	b.n	8007408 <xNetworkInterfaceInitialise+0xf8>
        pucReturn = pxBufferDescriptor->pucEthernetBuffer;
 80073f4:	6982      	ldr	r2, [r0, #24]
                        configASSERT( pucBuffer != NULL );
 80073f6:	b172      	cbz	r2, 8007416 <xNetworkInterfaceInitialise+0x106>
                HAL_ETH_DescAssignMemory( &( xEthHandle ), uxIndex, pucBuffer, NULL );
 80073f8:	4621      	mov	r1, r4
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 80073fa:	3401      	adds	r4, #1
                HAL_ETH_DescAssignMemory( &( xEthHandle ), uxIndex, pucBuffer, NULL );
 80073fc:	2300      	movs	r3, #0
 80073fe:	4628      	mov	r0, r5
 8007400:	f000 fa1a 	bl	8007838 <HAL_ETH_DescAssignMemory>
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 8007404:	2c08      	cmp	r4, #8
 8007406:	d08d      	beq.n	8007324 <xNetworkInterfaceInitialise+0x14>
    pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxSize, uxBlockTimeTicks );
 8007408:	210a      	movs	r1, #10
 800740a:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 800740e:	f7ff fabf 	bl	8006990 <pxGetNetworkBufferWithDescriptor>
    if( pxBufferDescriptor != NULL )
 8007412:	2800      	cmp	r0, #0
 8007414:	d1ee      	bne.n	80073f4 <xNetworkInterfaceInitialise+0xe4>
                        configASSERT( pucBuffer != NULL );
 8007416:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800741a:	4638      	mov	r0, r7
 800741c:	f7f9 fc6c 	bl	8000cf8 <vAssertCalled>
 8007420:	2200      	movs	r2, #0
 8007422:	e7e9      	b.n	80073f8 <xNetworkInterfaceInitialise+0xe8>
            configASSERT( xTransmissionMutex );
 8007424:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8007428:	4814      	ldr	r0, [pc, #80]	@ (800747c <xNetworkInterfaceInitialise+0x16c>)
 800742a:	f7f9 fc65 	bl	8000cf8 <vAssertCalled>
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 800742e:	e7dd      	b.n	80073ec <xNetworkInterfaceInitialise+0xdc>
            configASSERT( xTXDescriptorSemaphore );
 8007430:	f240 1101 	movw	r1, #257	@ 0x101
 8007434:	4811      	ldr	r0, [pc, #68]	@ (800747c <xNetworkInterfaceInitialise+0x16c>)
 8007436:	f7f9 fc5f 	bl	8000cf8 <vAssertCalled>
 800743a:	e7d1      	b.n	80073e0 <xNetworkInterfaceInitialise+0xd0>
 800743c:	20000e34 	.word	0x20000e34
 8007440:	20000d80 	.word	0x20000d80
 8007444:	08007109 	.word	0x08007109
 8007448:	08007129 	.word	0x08007129
 800744c:	20000d08 	.word	0x20000d08
 8007450:	080116c4 	.word	0x080116c4
 8007454:	20000d48 	.word	0x20000d48
 8007458:	08011668 	.word	0x08011668
 800745c:	080071c9 	.word	0x080071c9
 8007460:	08011674 	.word	0x08011674
 8007464:	40028000 	.word	0x40028000
 8007468:	24078160 	.word	0x24078160
 800746c:	24078000 	.word	0x24078000
 8007470:	20000d50 	.word	0x20000d50
 8007474:	20000e30 	.word	0x20000e30
 8007478:	20000e2c 	.word	0x20000e2c
 800747c:	0801160c 	.word	0x0801160c

08007480 <xGetPhyLinkStatus>:
    if( xPhyObject.ulLinkStatusMask != 0U )
 8007480:	4b02      	ldr	r3, [pc, #8]	@ (800748c <xGetPhyLinkStatus+0xc>)
 8007482:	6b58      	ldr	r0, [r3, #52]	@ 0x34
}
 8007484:	3800      	subs	r0, #0
 8007486:	bf18      	it	ne
 8007488:	2001      	movne	r0, #1
 800748a:	4770      	bx	lr
 800748c:	20000d08 	.word	0x20000d08

08007490 <xNetworkInterfaceOutput>:
    if( xPhyObject.ulLinkStatusMask != 0U )
 8007490:	4b23      	ldr	r3, [pc, #140]	@ (8007520 <xNetworkInterfaceOutput+0x90>)
 8007492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
{
 8007494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007498:	4605      	mov	r5, r0
 800749a:	b084      	sub	sp, #16
 800749c:	460c      	mov	r4, r1
    if( xPhyObject.ulLinkStatusMask != 0U )
 800749e:	b1a3      	cbz	r3, 80074ca <xNetworkInterfaceOutput+0x3a>
            pucTXBuffer = pxDescriptor->pucEthernetBuffer;
 80074a0:	6986      	ldr	r6, [r0, #24]
            configASSERT( xReleaseAfterSend != pdFALSE );
 80074a2:	b1e1      	cbz	r1, 80074de <xNetworkInterfaceOutput+0x4e>
            .len    = pxDescriptor->xDataLength,
 80074a4:	69eb      	ldr	r3, [r5, #28]
        ETH_BufferTypeDef xTransmitBuffer =
 80074a6:	2700      	movs	r7, #0
        if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 80074a8:	4a1e      	ldr	r2, [pc, #120]	@ (8007524 <xNetworkInterfaceOutput+0x94>)
 80074aa:	2164      	movs	r1, #100	@ 0x64
        ETH_BufferTypeDef xTransmitBuffer =
 80074ac:	9703      	str	r7, [sp, #12]
        if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 80074ae:	6810      	ldr	r0, [r2, #0]
        ETH_BufferTypeDef xTransmitBuffer =
 80074b0:	e9cd 6301 	strd	r6, r3, [sp, #4]
        xTxConfig.Length = pxDescriptor->xDataLength;
 80074b4:	4e1c      	ldr	r6, [pc, #112]	@ (8007528 <xNetworkInterfaceOutput+0x98>)
 80074b6:	6073      	str	r3, [r6, #4]
        xTxConfig.TxBuffer = &( xTransmitBuffer );
 80074b8:	ab01      	add	r3, sp, #4
 80074ba:	60b3      	str	r3, [r6, #8]
        if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 80074bc:	f001 fb3a 	bl	8008b34 <xQueueSemaphoreTake>
 80074c0:	2801      	cmp	r0, #1
 80074c2:	d012      	beq.n	80074ea <xNetworkInterfaceOutput+0x5a>
            FreeRTOS_printf( ( "emacps_send_message: Time-out waiting for TX buffer\n" ) );
 80074c4:	4819      	ldr	r0, [pc, #100]	@ (800752c <xNetworkInterfaceOutput+0x9c>)
 80074c6:	f005 fd21 	bl	800cf0c <lUDPLoggingPrintf>
    if( xReleaseAfterSend != pdFALSE )
 80074ca:	b924      	cbnz	r4, 80074d6 <xNetworkInterfaceOutput+0x46>
{
 80074cc:	2400      	movs	r4, #0
}
 80074ce:	4620      	mov	r0, r4
 80074d0:	b004      	add	sp, #16
 80074d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 80074d6:	4628      	mov	r0, r5
 80074d8:	f7ff fa96 	bl	8006a08 <vReleaseNetworkBufferAndDescriptor>
 80074dc:	e7f6      	b.n	80074cc <xNetworkInterfaceOutput+0x3c>
            configASSERT( xReleaseAfterSend != pdFALSE );
 80074de:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80074e2:	4813      	ldr	r0, [pc, #76]	@ (8007530 <xNetworkInterfaceOutput+0xa0>)
 80074e4:	f7f9 fc08 	bl	8000cf8 <vAssertCalled>
 80074e8:	e7dc      	b.n	80074a4 <xNetworkInterfaceOutput+0x14>
  __ASM volatile ("dsb 0xF":::"memory");
 80074ea:	f3bf 8f4f 	dsb	sy
            if( xSemaphoreTake( xTransmissionMutex, xBlockTimeTicks ) != pdFAIL )
 80074ee:	f8df 8048 	ldr.w	r8, [pc, #72]	@ 8007538 <xNetworkInterfaceOutput+0xa8>
 80074f2:	2164      	movs	r1, #100	@ 0x64
 80074f4:	f8d8 0000 	ldr.w	r0, [r8]
 80074f8:	f001 fb1c 	bl	8008b34 <xQueueSemaphoreTake>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d0e4      	beq.n	80074ca <xNetworkInterfaceOutput+0x3a>
                if( HAL_ETH_Transmit_IT( &( xEthHandle ), &( xTxConfig ) ) == HAL_OK )
 8007500:	4631      	mov	r1, r6
 8007502:	480c      	ldr	r0, [pc, #48]	@ (8007534 <xNetworkInterfaceOutput+0xa4>)
 8007504:	f000 fa4c 	bl	80079a0 <HAL_ETH_Transmit_IT>
 8007508:	fab0 f480 	clz	r4, r0
                xSemaphoreGive( xTransmissionMutex );
 800750c:	463b      	mov	r3, r7
 800750e:	463a      	mov	r2, r7
 8007510:	4639      	mov	r1, r7
 8007512:	f8d8 0000 	ldr.w	r0, [r8]
                if( HAL_ETH_Transmit_IT( &( xEthHandle ), &( xTxConfig ) ) == HAL_OK )
 8007516:	0964      	lsrs	r4, r4, #5
                xSemaphoreGive( xTransmissionMutex );
 8007518:	f001 f980 	bl	800881c <xQueueGenericSend>
    if( xReleaseAfterSend != pdFALSE )
 800751c:	e7d7      	b.n	80074ce <xNetworkInterfaceOutput+0x3e>
 800751e:	bf00      	nop
 8007520:	20000d08 	.word	0x20000d08
 8007524:	20000e30 	.word	0x20000e30
 8007528:	20000d4c 	.word	0x20000d4c
 800752c:	0801168c 	.word	0x0801168c
 8007530:	0801160c 	.word	0x0801160c
 8007534:	20000d80 	.word	0x20000d80
 8007538:	20000e2c 	.word	0x20000e2c

0800753c <ETH_IRQHandler>:
    HAL_ETH_IRQHandler( &( xEthHandle ) );
 800753c:	4801      	ldr	r0, [pc, #4]	@ (8007544 <ETH_IRQHandler+0x8>)
 800753e:	f000 bb63 	b.w	8007c08 <HAL_ETH_IRQHandler>
 8007542:	bf00      	nop
 8007544:	20000d80 	.word	0x20000d80

08007548 <HAL_ETH_TxCpltCallback>:
    ulISREvents |= ulFlags;
 8007548:	4a0e      	ldr	r2, [pc, #56]	@ (8007584 <HAL_ETH_TxCpltCallback+0x3c>)
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800754a:	2100      	movs	r1, #0
    if( xEMACTaskHandle != NULL )
 800754c:	480e      	ldr	r0, [pc, #56]	@ (8007588 <HAL_ETH_TxCpltCallback+0x40>)
    ulISREvents |= ulFlags;
 800754e:	6813      	ldr	r3, [r2, #0]
    if( xEMACTaskHandle != NULL )
 8007550:	6800      	ldr	r0, [r0, #0]
    ulISREvents |= ulFlags;
 8007552:	f043 0302 	orr.w	r3, r3, #2
{
 8007556:	b500      	push	{lr}
 8007558:	b083      	sub	sp, #12
    ulISREvents |= ulFlags;
 800755a:	6013      	str	r3, [r2, #0]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800755c:	9101      	str	r1, [sp, #4]
    if( xEMACTaskHandle != NULL )
 800755e:	b170      	cbz	r0, 800757e <HAL_ETH_TxCpltCallback+0x36>
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &( xHigherPriorityTaskWoken ) );
 8007560:	aa01      	add	r2, sp, #4
 8007562:	f002 faef 	bl	8009b44 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8007566:	9b01      	ldr	r3, [sp, #4]
 8007568:	b14b      	cbz	r3, 800757e <HAL_ETH_TxCpltCallback+0x36>
 800756a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800756e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007572:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	f3bf 8f6f 	isb	sy
}
 800757e:	b003      	add	sp, #12
 8007580:	f85d fb04 	ldr.w	pc, [sp], #4
 8007584:	20000e38 	.word	0x20000e38
 8007588:	20000d48 	.word	0x20000d48

0800758c <HAL_ETH_RxCpltCallback>:
    ulISREvents |= ulFlags;
 800758c:	4a0e      	ldr	r2, [pc, #56]	@ (80075c8 <HAL_ETH_RxCpltCallback+0x3c>)
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800758e:	2100      	movs	r1, #0
    if( xEMACTaskHandle != NULL )
 8007590:	480e      	ldr	r0, [pc, #56]	@ (80075cc <HAL_ETH_RxCpltCallback+0x40>)
    ulISREvents |= ulFlags;
 8007592:	6813      	ldr	r3, [r2, #0]
    if( xEMACTaskHandle != NULL )
 8007594:	6800      	ldr	r0, [r0, #0]
    ulISREvents |= ulFlags;
 8007596:	f043 0301 	orr.w	r3, r3, #1
{
 800759a:	b500      	push	{lr}
 800759c:	b083      	sub	sp, #12
    ulISREvents |= ulFlags;
 800759e:	6013      	str	r3, [r2, #0]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80075a0:	9101      	str	r1, [sp, #4]
    if( xEMACTaskHandle != NULL )
 80075a2:	b170      	cbz	r0, 80075c2 <HAL_ETH_RxCpltCallback+0x36>
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &( xHigherPriorityTaskWoken ) );
 80075a4:	aa01      	add	r2, sp, #4
 80075a6:	f002 facd 	bl	8009b44 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80075aa:	9b01      	ldr	r3, [sp, #4]
 80075ac:	b14b      	cbz	r3, 80075c2 <HAL_ETH_RxCpltCallback+0x36>
 80075ae:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80075b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	f3bf 8f6f 	isb	sy
}
 80075c2:	b003      	add	sp, #12
 80075c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80075c8:	20000e38 	.word	0x20000e38
 80075cc:	20000d48 	.word	0x20000d48

080075d0 <HAL_ETH_DMAErrorCallback>:
    ulISREvents |= ulFlags;
 80075d0:	4a0e      	ldr	r2, [pc, #56]	@ (800760c <HAL_ETH_DMAErrorCallback+0x3c>)
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80075d2:	2100      	movs	r1, #0
    if( xEMACTaskHandle != NULL )
 80075d4:	480e      	ldr	r0, [pc, #56]	@ (8007610 <HAL_ETH_DMAErrorCallback+0x40>)
    ulISREvents |= ulFlags;
 80075d6:	6813      	ldr	r3, [r2, #0]
    if( xEMACTaskHandle != NULL )
 80075d8:	6800      	ldr	r0, [r0, #0]
    ulISREvents |= ulFlags;
 80075da:	f043 0304 	orr.w	r3, r3, #4
{
 80075de:	b500      	push	{lr}
 80075e0:	b083      	sub	sp, #12
    ulISREvents |= ulFlags;
 80075e2:	6013      	str	r3, [r2, #0]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80075e4:	9101      	str	r1, [sp, #4]
    if( xEMACTaskHandle != NULL )
 80075e6:	b170      	cbz	r0, 8007606 <HAL_ETH_DMAErrorCallback+0x36>
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &( xHigherPriorityTaskWoken ) );
 80075e8:	aa01      	add	r2, sp, #4
 80075ea:	f002 faab 	bl	8009b44 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80075ee:	9b01      	ldr	r3, [sp, #4]
 80075f0:	b14b      	cbz	r3, 8007606 <HAL_ETH_DMAErrorCallback+0x36>
 80075f2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80075f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	f3bf 8f6f 	isb	sy
}
 8007606:	b003      	add	sp, #12
 8007608:	f85d fb04 	ldr.w	pc, [sp], #4
 800760c:	20000e38 	.word	0x20000e38
 8007610:	20000d48 	.word	0x20000d48

08007614 <vNetworkInterfaceAllocateRAMToBuffers>:
    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8007614:	4b05      	ldr	r3, [pc, #20]	@ (800762c <vNetworkInterfaceAllocateRAMToBuffers+0x18>)
 8007616:	f503 32c0 	add.w	r2, r3, #98304	@ 0x18000
        pxNetworkBuffers[ ul ].pucEthernetBuffer = ucRAMBuffer + ipBUFFER_PADDING;
 800761a:	6183      	str	r3, [r0, #24]
        *( ( unsigned * ) ucRAMBuffer ) = ( unsigned ) ( &( pxNetworkBuffers[ ul ] ) );
 800761c:	f843 0c0a 	str.w	r0, [r3, #-10]
    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8007620:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8007624:	3024      	adds	r0, #36	@ 0x24
 8007626:	4293      	cmp	r3, r2
 8007628:	d1f7      	bne.n	800761a <vNetworkInterfaceAllocateRAMToBuffers+0x6>
}
 800762a:	4770      	bx	lr
 800762c:	2406000a 	.word	0x2406000a

08007630 <ETH_SetMACConfig>:
 * @{
 */

        static void ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                      ETH_MACConfigTypeDef * macconf )
        {
 8007630:	b430      	push	{r4, r5}
                          macconf->BackOffLimit |
                          ( ( uint32_t ) macconf->DeferralCheck << 4 ) |
                          macconf->PreambleLength );

            /* Write to MACCR */
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8007632:	688b      	ldr	r3, [r1, #8]
 8007634:	680d      	ldr	r5, [r1, #0]
 8007636:	694c      	ldr	r4, [r1, #20]
 8007638:	432b      	orrs	r3, r5
 800763a:	6802      	ldr	r2, [r0, #0]
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 800763c:	f891 c011 	ldrb.w	ip, [r1, #17]
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8007640:	4323      	orrs	r3, r4
 8007642:	698c      	ldr	r4, [r1, #24]
 8007644:	6810      	ldr	r0, [r2, #0]
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 8007646:	fabc fc8c 	clz	ip, ip
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 800764a:	4323      	orrs	r3, r4
 800764c:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 800764e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
                          ( ( uint32_t ) ( ( macconf->CRCCheckingRxPackets == DISABLE ) ? 1U : 0U ) << 16 ) |
                          macconf->GiantPacketSizeLimit );

            /* Write to MACECR */
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 8007652:	4d52      	ldr	r5, [pc, #328]	@ (800779c <ETH_SetMACConfig+0x16c>)
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8007654:	4323      	orrs	r3, r4
 8007656:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8007658:	4323      	orrs	r3, r4
 800765a:	4c51      	ldr	r4, [pc, #324]	@ (80077a0 <ETH_SetMACConfig+0x170>)
 800765c:	4020      	ands	r0, r4
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 800765e:	790c      	ldrb	r4, [r1, #4]
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8007660:	4303      	orrs	r3, r0
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 8007662:	7b48      	ldrb	r0, [r1, #13]
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8007664:	ea43 63c4 	orr.w	r3, r3, r4, lsl #27
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 8007668:	7b0c      	ldrb	r4, [r1, #12]
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 800766a:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 800766e:	7b8c      	ldrb	r4, [r1, #14]
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8007670:	ea43 5380 	orr.w	r3, r3, r0, lsl #22
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 8007674:	7bc8      	ldrb	r0, [r1, #15]
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8007676:	ea43 5344 	orr.w	r3, r3, r4, lsl #21
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 800767a:	7c8c      	ldrb	r4, [r1, #18]
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 800767c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 8007680:	7f08      	ldrb	r0, [r1, #28]
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8007682:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8007686:	7f4c      	ldrb	r4, [r1, #29]
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8007688:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 800768c:	7fc8      	ldrb	r0, [r1, #31]
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 800768e:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
                          ( ( uint32_t ) macconf->DeferralCheck << 4 ) |
 8007692:	f891 4028 	ldrb.w	r4, [r1, #40]	@ 0x28
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8007696:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 800769a:	7c08      	ldrb	r0, [r1, #16]
 800769c:	fab0 f080 	clz	r0, r0
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 80076a0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 80076a4:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 80076a6:	0940      	lsrs	r0, r0, #5
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 80076a8:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 80076ac:	7f88      	ldrb	r0, [r1, #30]
 80076ae:	fab0 f080 	clz	r0, r0
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 80076b2:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 80076b6:	0940      	lsrs	r0, r0, #5
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 80076b8:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 80076bc:	f891 0020 	ldrb.w	r0, [r1, #32]
 80076c0:	fab0 f080 	clz	r0, r0
 80076c4:	0940      	lsrs	r0, r0, #5
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 80076c6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 80076ca:	6b48      	ldr	r0, [r1, #52]	@ 0x34
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 80076cc:	6013      	str	r3, [r2, #0]
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 80076ce:	6853      	ldr	r3, [r2, #4]
 80076d0:	402b      	ands	r3, r5
                          macconf->PauseLowThreshold |
                          ( ( uint32_t ) ( ( macconf->ZeroQuantaPause == DISABLE ) ? 1U : 0U ) << 7 ) |
                          ( macconf->PauseTime << 16 ) );

            /* Write to MACTFCR */
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 80076d2:	f64f 750d 	movw	r5, #65293	@ 0xff0d
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 80076d6:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 80076da:	f891 4038 	ldrb.w	r4, [r1, #56]	@ 0x38
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 80076de:	4303      	orrs	r3, r0
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 80076e0:	f891 0030 	ldrb.w	r0, [r1, #48]	@ 0x30
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 80076e4:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 80076e8:	f891 4031 	ldrb.w	r4, [r1, #49]	@ 0x31
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 80076ec:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
                          ( ( uint32_t ) ( ( macconf->CRCCheckingRxPackets == DISABLE ) ? 1U : 0U ) << 16 ) |
 80076f0:	f891 0032 	ldrb.w	r0, [r1, #50]	@ 0x32
 80076f4:	fab0 f080 	clz	r0, r0
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 80076f8:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
                          ( ( uint32_t ) ( ( macconf->CRCCheckingRxPackets == DISABLE ) ? 1U : 0U ) << 16 ) |
 80076fc:	0940      	lsrs	r0, r0, #5
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 80076fe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 8007702:	4828      	ldr	r0, [pc, #160]	@ (80077a4 <ETH_SetMACConfig+0x174>)
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 8007704:	6053      	str	r3, [r2, #4]
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 8007706:	68d3      	ldr	r3, [r2, #12]
                          ( macconf->PauseTime << 16 ) );
 8007708:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 800770a:	4018      	ands	r0, r3
 800770c:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
 800770e:	4318      	orrs	r0, r3
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 8007710:	f891 3040 	ldrb.w	r3, [r1, #64]	@ 0x40
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 8007714:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8007718:	60d0      	str	r0, [r2, #12]
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 800771a:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800771c:	6d08      	ldr	r0, [r1, #80]	@ 0x50
 800771e:	402b      	ands	r3, r5
 8007720:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8007724:	f891 4054 	ldrb.w	r4, [r1, #84]	@ 0x54
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 8007728:	4303      	orrs	r3, r0
                          ( ( uint32_t ) ( ( macconf->ZeroQuantaPause == DISABLE ) ? 1U : 0U ) << 7 ) |
 800772a:	f891 004c 	ldrb.w	r0, [r1, #76]	@ 0x4c
 800772e:	fab0 f080 	clz	r0, r0
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 8007732:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
                          ( ( uint32_t ) ( ( macconf->ZeroQuantaPause == DISABLE ) ? 1U : 0U ) << 7 ) |
 8007736:	0940      	lsrs	r0, r0, #5
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 8007738:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
                          ( ( uint32_t ) macconf->ForwardRxErrorPacket << 4 ) |
                          ( ( uint32_t ) macconf->ForwardRxUndersizedGoodPacket << 3 ) );

            /* Write to MTLRQOMR */
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 800773c:	e9d1 5416 	ldrd	r5, r4, [r1, #88]	@ 0x58
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 8007740:	6713      	str	r3, [r2, #112]	@ 0x70
            MODIFY_REG( heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval );
 8007742:	f8d2 0090 	ldr.w	r0, [r2, #144]	@ 0x90
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8007746:	f891 3056 	ldrb.w	r3, [r1, #86]	@ 0x56
            MODIFY_REG( heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval );
 800774a:	f020 0003 	bic.w	r0, r0, #3
 800774e:	4303      	orrs	r3, r0
                          ( ( uint32_t ) macconf->UnicastPausePacketDetect << 1 ) );
 8007750:	f891 0055 	ldrb.w	r0, [r1, #85]	@ 0x55
            MODIFY_REG( heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval );
 8007754:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8007758:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            MODIFY_REG( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode );
 800775c:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	@ 0xd00
 8007760:	f023 0372 	bic.w	r3, r3, #114	@ 0x72
 8007764:	432b      	orrs	r3, r5
 8007766:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 800776a:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	@ 0xd30
                          ( ( uint32_t ) macconf->ForwardRxErrorPacket << 4 ) |
 800776e:	f891 0061 	ldrb.w	r0, [r1, #97]	@ 0x61
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 8007772:	f023 037b 	bic.w	r3, r3, #123	@ 0x7b
                          ( ( uint32_t ) macconf->ForwardRxUndersizedGoodPacket << 3 ) );
 8007776:	f891 c062 	ldrb.w	ip, [r1, #98]	@ 0x62
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 800777a:	4323      	orrs	r3, r4
 800777c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 8007780:	f891 0060 	ldrb.w	r0, [r1, #96]	@ 0x60
 8007784:	fab0 f180 	clz	r1, r0
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 8007788:	ea43 03cc 	orr.w	r3, r3, ip, lsl #3
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 800778c:	0949      	lsrs	r1, r1, #5
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 800778e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
        }
 8007792:	bc30      	pop	{r4, r5}
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 8007794:	f8c2 3d30 	str.w	r3, [r2, #3376]	@ 0xd30
        }
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	c0f88000 	.word	0xc0f88000
 80077a0:	00048083 	.word	0x00048083
 80077a4:	fffffef0 	.word	0xfffffef0

080077a8 <ETH_SetDMAConfig>:
                                      ETH_DMAConfigTypeDef * dmaconf )
        {
            uint32_t dmaregval;

            /*------------------------ DMAMR Configuration --------------------*/
            MODIFY_REG( heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration );
 80077a8:	6803      	ldr	r3, [r0, #0]
 80077aa:	4a1e      	ldr	r2, [pc, #120]	@ (8007824 <ETH_SetDMAConfig+0x7c>)
 80077ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077b0:	6808      	ldr	r0, [r1, #0]
        {
 80077b2:	b410      	push	{r4}
            MODIFY_REG( heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration );
 80077b4:	681c      	ldr	r4, [r3, #0]
 80077b6:	4022      	ands	r2, r4
 80077b8:	4302      	orrs	r2, r0
 80077ba:	601a      	str	r2, [r3, #0]

            /*------------------------ DMASBMR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
                          dmaconf->BurstMode |
                          ( ( uint32_t ) dmaconf->RebuildINCRxBurst << 15 ) );
 80077bc:	7b0a      	ldrb	r2, [r1, #12]
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 80077be:	790c      	ldrb	r4, [r1, #4]
                          ( ( uint32_t ) dmaconf->RebuildINCRxBurst << 15 ) );
 80077c0:	03d2      	lsls	r2, r2, #15

            MODIFY_REG( heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval );
 80077c2:	6858      	ldr	r0, [r3, #4]
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 80077c4:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 80077c8:	688c      	ldr	r4, [r1, #8]
 80077ca:	4322      	orrs	r2, r4
            MODIFY_REG( heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval );
 80077cc:	4c16      	ldr	r4, [pc, #88]	@ (8007828 <ETH_SetDMAConfig+0x80>)
 80077ce:	4004      	ands	r4, r0

            /*------------------------ DMACCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 80077d0:	6a08      	ldr	r0, [r1, #32]
            MODIFY_REG( heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval );
 80077d2:	4322      	orrs	r2, r4
 80077d4:	605a      	str	r2, [r3, #4]
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 80077d6:	7b4a      	ldrb	r2, [r1, #13]
                          dmaconf->MaximumSegmentSize );

            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval );
 80077d8:	f8d3 4100 	ldr.w	r4, [r3, #256]	@ 0x100
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 80077dc:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval );
 80077e0:	4812      	ldr	r0, [pc, #72]	@ (800782c <ETH_SetDMAConfig+0x84>)
 80077e2:	4020      	ands	r0, r4
 80077e4:	4302      	orrs	r2, r0
 80077e6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

            /*------------------------ DMACTCR Configuration --------------------*/
            dmaregval = ( dmaconf->TxDMABurstLength |
                          ( ( uint32_t ) dmaconf->SecondPacketOperate << 4 ) |
                          ( ( uint32_t ) dmaconf->TCPSegmentation << 12 ) );
 80077ea:	7f4a      	ldrb	r2, [r1, #29]
                          ( ( uint32_t ) dmaconf->SecondPacketOperate << 4 ) |
 80077ec:	7d0c      	ldrb	r4, [r1, #20]
                          ( ( uint32_t ) dmaconf->TCPSegmentation << 12 ) );
 80077ee:	0312      	lsls	r2, r2, #12

            MODIFY_REG( heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval );
 80077f0:	f8d3 0104 	ldr.w	r0, [r3, #260]	@ 0x104
            dmaregval = ( dmaconf->TxDMABurstLength |
 80077f4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 80077f8:	690c      	ldr	r4, [r1, #16]
 80077fa:	4322      	orrs	r2, r4
            MODIFY_REG( heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval );
 80077fc:	4c0c      	ldr	r4, [pc, #48]	@ (8007830 <ETH_SetDMAConfig+0x88>)
 80077fe:	4004      	ands	r4, r0

            /*------------------------ DMACRCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 8007800:	6988      	ldr	r0, [r1, #24]
            MODIFY_REG( heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval );
 8007802:	4322      	orrs	r2, r4
 8007804:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
                          dmaconf->RxDMABurstLength );

            /* Write to DMACRCR */
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 8007808:	f8d3 4108 	ldr.w	r4, [r3, #264]	@ 0x108
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 800780c:	7f0a      	ldrb	r2, [r1, #28]
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 800780e:	4909      	ldr	r1, [pc, #36]	@ (8007834 <ETH_SetDMAConfig+0x8c>)
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 8007810:	ea40 72c2 	orr.w	r2, r0, r2, lsl #31
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 8007814:	4021      	ands	r1, r4
        }
 8007816:	f85d 4b04 	ldr.w	r4, [sp], #4
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 800781a:	430a      	orrs	r2, r1
 800781c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
        }
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	ffff87fd 	.word	0xffff87fd
 8007828:	ffff2ffe 	.word	0xffff2ffe
 800782c:	fffec000 	.word	0xfffec000
 8007830:	ffc0efef 	.word	0xffc0efef
 8007834:	7fc0ffff 	.word	0x7fc0ffff

08007838 <HAL_ETH_DescAssignMemory>:
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ Index ];
 8007838:	f101 0316 	add.w	r3, r1, #22
        {
 800783c:	4684      	mov	ip, r0
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ Index ];
 800783e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
            if( ( pBuffer1 == NULL ) || ( Index >= ( uint32_t ) ETH_RX_DESC_CNT ) )
 8007842:	b19a      	cbz	r2, 800786c <HAL_ETH_DescAssignMemory+0x34>
 8007844:	2907      	cmp	r1, #7
 8007846:	bf94      	ite	ls
 8007848:	2000      	movls	r0, #0
 800784a:	2001      	movhi	r0, #1
 800784c:	b970      	cbnz	r0, 800786c <HAL_ETH_DescAssignMemory+0x34>
        {
 800784e:	b410      	push	{r4}
            WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pBuffer1 );
 8007850:	601a      	str	r2, [r3, #0]
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V );
 8007852:	68dc      	ldr	r4, [r3, #12]
            WRITE_REG( dmarxdesc->BackupAddr0, ( uint32_t ) pBuffer1 );
 8007854:	611a      	str	r2, [r3, #16]
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V );
 8007856:	f044 7480 	orr.w	r4, r4, #16777216	@ 0x1000000
 800785a:	60dc      	str	r4, [r3, #12]
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN );
 800785c:	68da      	ldr	r2, [r3, #12]
        }
 800785e:	f85d 4b04 	ldr.w	r4, [sp], #4
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN );
 8007862:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007866:	60da      	str	r2, [r3, #12]
            ( void ) dmarxdesc->DESC3;
 8007868:	68db      	ldr	r3, [r3, #12]
        }
 800786a:	4770      	bx	lr
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800786c:	2301      	movs	r3, #1
                return HAL_ERROR;
 800786e:	4618      	mov	r0, r3
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8007870:	f8cc 3098 	str.w	r3, [ip, #152]	@ 0x98
        }
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop

08007878 <HAL_ETH_Start_IT>:
            if( heth->gState == HAL_ETH_STATE_READY )
 8007878:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 800787c:	2b10      	cmp	r3, #16
 800787e:	d001      	beq.n	8007884 <HAL_ETH_Start_IT+0xc>
                return HAL_ERROR;
 8007880:	2001      	movs	r0, #1
        }
 8007882:	4770      	bx	lr
 8007884:	4684      	mov	ip, r0
                heth->gState = HAL_ETH_STATE_BUSY;
 8007886:	2323      	movs	r3, #35	@ 0x23
 8007888:	f100 0254 	add.w	r2, r0, #84	@ 0x54
 800788c:	3074      	adds	r0, #116	@ 0x74
        {
 800788e:	b430      	push	{r4, r5}
                heth->gState = HAL_ETH_STATE_BUSY;
 8007890:	f8cc 3090 	str.w	r3, [ip, #144]	@ 0x90
                    dma_rx_desc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ desc_index ];
 8007894:	f852 1f04 	ldr.w	r1, [r2, #4]!
                    SET_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCRF_IOC );
 8007898:	68cb      	ldr	r3, [r1, #12]
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 800789a:	4282      	cmp	r2, r0
                    SET_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCRF_IOC );
 800789c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80078a0:	60cb      	str	r3, [r1, #12]
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 80078a2:	d1f7      	bne.n	8007894 <HAL_ETH_Start_IT+0x1c>
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 80078a4:	f8dc 3000 	ldr.w	r3, [ip]
                heth->RxDescList.ItMode = 1U;
 80078a8:	2001      	movs	r0, #1
                __HAL_ETH_DMA_ENABLE_IT( heth,
 80078aa:	f24d 0241 	movw	r2, #53313	@ 0xd041
                heth->gState = HAL_ETH_STATE_READY;
 80078ae:	2410      	movs	r4, #16
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 80078b0:	6819      	ldr	r1, [r3, #0]
                heth->RxState = HAL_ETH_STATE_BUSY_RX;
 80078b2:	2522      	movs	r5, #34	@ 0x22
                heth->RxDescList.ItMode = 1U;
 80078b4:	f8cc 0088 	str.w	r0, [ip, #136]	@ 0x88
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 80078b8:	f041 0102 	orr.w	r1, r1, #2
 80078bc:	6019      	str	r1, [r3, #0]
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 80078be:	6819      	ldr	r1, [r3, #0]
 80078c0:	4301      	orrs	r1, r0
 80078c2:	6019      	str	r1, [r3, #0]
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 80078c4:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 80078c8:	4301      	orrs	r1, r0
                return HAL_OK;
 80078ca:	2000      	movs	r0, #0
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 80078cc:	f8c3 1d00 	str.w	r1, [r3, #3328]	@ 0xd00
                SET_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 80078d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078d4:	f8d3 1104 	ldr.w	r1, [r3, #260]	@ 0x104
 80078d8:	f041 0101 	orr.w	r1, r1, #1
 80078dc:	f8c3 1104 	str.w	r1, [r3, #260]	@ 0x104
                SET_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 80078e0:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
 80078e4:	f041 0101 	orr.w	r1, r1, #1
 80078e8:	f8c3 1108 	str.w	r1, [r3, #264]	@ 0x108
                heth->Instance->DMACSR |= ( ETH_DMACSR_TPS | ETH_DMACSR_RPS );
 80078ec:	f8d3 1160 	ldr.w	r1, [r3, #352]	@ 0x160
 80078f0:	f441 7181 	orr.w	r1, r1, #258	@ 0x102
 80078f4:	f8c3 1160 	str.w	r1, [r3, #352]	@ 0x160
                __HAL_ETH_DMA_ENABLE_IT( heth,
 80078f8:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80078fc:	430a      	orrs	r2, r1
 80078fe:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
                heth->gState = HAL_ETH_STATE_READY;
 8007902:	f8cc 4090 	str.w	r4, [ip, #144]	@ 0x90
                heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8007906:	f8cc 5094 	str.w	r5, [ip, #148]	@ 0x94
        }
 800790a:	bc30      	pop	{r4, r5}
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop

08007910 <HAL_ETH_Stop_IT>:
            if( heth->gState != HAL_ETH_STATE_RESET )
 8007910:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 8007914:	2b00      	cmp	r3, #0
 8007916:	d03f      	beq.n	8007998 <HAL_ETH_Stop_IT+0x88>
                __HAL_ETH_DMA_DISABLE_IT( heth, ( ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE |
 8007918:	4602      	mov	r2, r0
                heth->gState = HAL_ETH_STATE_BUSY;
 800791a:	2123      	movs	r1, #35	@ 0x23
 800791c:	4684      	mov	ip, r0
                __HAL_ETH_DMA_DISABLE_IT( heth, ( ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE |
 800791e:	f852 3b54 	ldr.w	r3, [r2], #84
        {
 8007922:	b410      	push	{r4}
                heth->gState = HAL_ETH_STATE_BUSY;
 8007924:	f8c0 1090 	str.w	r1, [r0, #144]	@ 0x90
                __HAL_ETH_DMA_DISABLE_IT( heth, ( ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE |
 8007928:	f503 5180 	add.w	r1, r3, #4096	@ 0x1000
 800792c:	481b      	ldr	r0, [pc, #108]	@ (800799c <HAL_ETH_Stop_IT+0x8c>)
 800792e:	f8d1 4134 	ldr.w	r4, [r1, #308]	@ 0x134
 8007932:	4020      	ands	r0, r4
 8007934:	f8c1 0134 	str.w	r0, [r1, #308]	@ 0x134
                CLEAR_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 8007938:	f8d1 0104 	ldr.w	r0, [r1, #260]	@ 0x104
 800793c:	f020 0001 	bic.w	r0, r0, #1
 8007940:	f8c1 0104 	str.w	r0, [r1, #260]	@ 0x104
                CLEAR_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8007944:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 8007948:	f020 0001 	bic.w	r0, r0, #1
 800794c:	f8c1 0108 	str.w	r0, [r1, #264]	@ 0x108
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 8007950:	f10c 0074 	add.w	r0, ip, #116	@ 0x74
 8007954:	6819      	ldr	r1, [r3, #0]
 8007956:	f021 0101 	bic.w	r1, r1, #1
 800795a:	6019      	str	r1, [r3, #0]
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 800795c:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8007960:	f041 0101 	orr.w	r1, r1, #1
 8007964:	f8c3 1d00 	str.w	r1, [r3, #3328]	@ 0xd00
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8007968:	6819      	ldr	r1, [r3, #0]
 800796a:	f021 0102 	bic.w	r1, r1, #2
 800796e:	6019      	str	r1, [r3, #0]
                    dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ descindex ];
 8007970:	f852 1f04 	ldr.w	r1, [r2, #4]!
                    CLEAR_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC );
 8007974:	68cb      	ldr	r3, [r1, #12]
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8007976:	4282      	cmp	r2, r0
                    CLEAR_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC );
 8007978:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800797c:	60cb      	str	r3, [r1, #12]
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 800797e:	d1f7      	bne.n	8007970 <HAL_ETH_Stop_IT+0x60>
                heth->RxDescList.ItMode = 0U;
 8007980:	2200      	movs	r2, #0
                heth->gState = HAL_ETH_STATE_READY;
 8007982:	2310      	movs	r3, #16
        }
 8007984:	f85d 4b04 	ldr.w	r4, [sp], #4
                return HAL_OK;
 8007988:	4610      	mov	r0, r2
                heth->gState = HAL_ETH_STATE_READY;
 800798a:	f8cc 3090 	str.w	r3, [ip, #144]	@ 0x90
                heth->RxDescList.ItMode = 0U;
 800798e:	f8cc 2088 	str.w	r2, [ip, #136]	@ 0x88
                heth->RxState = HAL_ETH_STATE_READY;
 8007992:	f8cc 3094 	str.w	r3, [ip, #148]	@ 0x94
        }
 8007996:	4770      	bx	lr
                return HAL_ERROR;
 8007998:	2001      	movs	r0, #1
        }
 800799a:	4770      	bx	lr
 800799c:	ffff2fbe 	.word	0xffff2fbe

080079a0 <HAL_ETH_Transmit_IT>:
            if( pTxConfig == NULL )
 80079a0:	2900      	cmp	r1, #0
 80079a2:	d054      	beq.n	8007a4e <HAL_ETH_Transmit_IT+0xae>
            if( heth->gState == HAL_ETH_STATE_READY )
 80079a4:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 80079a8:	2b10      	cmp	r3, #16
 80079aa:	d001      	beq.n	80079b0 <HAL_ETH_Transmit_IT+0x10>
                return HAL_ERROR;
 80079ac:	2001      	movs	r0, #1
        }
 80079ae:	4770      	bx	lr
                                                    uint32_t ItMode )
        {
            ETH_TxDescListTypeDef * dmatxdesclist = &heth->TxDescList;
            uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
            uint32_t DESC3;
            ETH_DMADescTypeDef * dmatxdesc = ( ETH_DMADescTypeDef * ) dmatxdesclist->TxDesc[ firstdescidx ];
 80079b0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80079b2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80079b6:	699a      	ldr	r2, [r3, #24]
        {
 80079b8:	b4f0      	push	{r4, r5, r6, r7}
            ETH_BufferTypeDef * txbuffer = pTxConfig->TxBuffer;

            /* FreeRTOS+TCP doesn't support linked buffers. */
            txbuffer->next = NULL;
 80079ba:	2600      	movs	r6, #0
            DESC3 = READ_REG( dmatxdesc->DESC3 );
 80079bc:	68d5      	ldr	r5, [r2, #12]
            ETH_BufferTypeDef * txbuffer = pTxConfig->TxBuffer;
 80079be:	688c      	ldr	r4, [r1, #8]

            /* Current TX Descriptor Owned by DMA: cannot be used by the application  */
            if( READ_BIT( DESC3, ETH_DMATXNDESCWBF_OWN ) != 0U )
 80079c0:	42b5      	cmp	r5, r6
            txbuffer->next = NULL;
 80079c2:	60a6      	str	r6, [r4, #8]
            if( READ_BIT( DESC3, ETH_DMATXNDESCWBF_OWN ) != 0U )
 80079c4:	db4b      	blt.n	8007a5e <HAL_ETH_Transmit_IT+0xbe>
            /***************************************************************************/
            /*****************    Normal descriptors configuration     *****************/
            /***************************************************************************/

            /* Set header or buffer 1 address */
            WRITE_REG( dmatxdesc->DESC0, ( uint32_t ) txbuffer->buffer );
 80079c6:	6823      	ldr	r3, [r4, #0]
            /* Set header or buffer 1 Length */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len );
 80079c8:	6864      	ldr	r4, [r4, #4]
            WRITE_REG( dmatxdesc->DESC0, ( uint32_t ) txbuffer->buffer );
 80079ca:	6013      	str	r3, [r2, #0]
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len );
 80079cc:	4b28      	ldr	r3, [pc, #160]	@ (8007a70 <HAL_ETH_Transmit_IT+0xd0>)
 80079ce:	6897      	ldr	r7, [r2, #8]
 80079d0:	403b      	ands	r3, r7
 80079d2:	4323      	orrs	r3, r4
 80079d4:	6093      	str	r3, [r2, #8]

            WRITE_REG( dmatxdesc->DESC1, 0x0 );
 80079d6:	6056      	str	r6, [r2, #4]
            /* Set buffer 2 Length to zero */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U );
 80079d8:	4b26      	ldr	r3, [pc, #152]	@ (8007a74 <HAL_ETH_Transmit_IT+0xd4>)
 80079da:	6894      	ldr	r4, [r2, #8]
 80079dc:	4023      	ands	r3, r4

            MODIFY_REG( DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length );
 80079de:	684c      	ldr	r4, [r1, #4]
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U );
 80079e0:	6093      	str	r3, [r2, #8]
            MODIFY_REG( DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length );
 80079e2:	4b25      	ldr	r3, [pc, #148]	@ (8007a78 <HAL_ETH_Transmit_IT+0xd8>)
 80079e4:	402b      	ands	r3, r5
 80079e6:	4323      	orrs	r3, r4

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM ) != 0U )
 80079e8:	680c      	ldr	r4, [r1, #0]
 80079ea:	07e5      	lsls	r5, r4, #31
 80079ec:	d503      	bpl.n	80079f6 <HAL_ETH_Transmit_IT+0x56>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl );
 80079ee:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80079f2:	694d      	ldr	r5, [r1, #20]
 80079f4:	432b      	orrs	r3, r5
            }

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD ) != 0U )
 80079f6:	06a4      	lsls	r4, r4, #26
 80079f8:	d424      	bmi.n	8007a44 <HAL_ETH_Transmit_IT+0xa4>
            SET_BIT( DESC3, ETH_DMATXNDESCRF_OWN );

            if( ItMode != ( ( uint32_t ) RESET ) )
            {
                /* Set Interrupt on competition bit */
                SET_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 80079fa:	6891      	ldr	r1, [r2, #8]
 80079fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007a00:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
            SET_BIT( DESC3, ETH_DMATXNDESCRF_OWN );
 8007a04:	f043 4330 	orr.w	r3, r3, #2952790016	@ 0xb0000000
                SET_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 8007a08:	6091      	str	r1, [r2, #8]
            {
                /* Clear Interrupt on competition bit */
                CLEAR_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
            }

            WRITE_REG( dmatxdesc->DESC3, DESC3 );
 8007a0a:	60d3      	str	r3, [r2, #12]

            /* Read back the value. */
            if( READ_REG( dmatxdesc->DESC3 ) )
 8007a0c:	68d3      	ldr	r3, [r2, #12]
 8007a0e:	f3bf 8f4f 	dsb	sy
                INCR_TX_DESC_INDEX( heth->TxDescList.CurTxDesc, 1U );
 8007a12:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8007a14:	1c53      	adds	r3, r2, #1
 8007a16:	2b0d      	cmp	r3, #13
 8007a18:	bf88      	it	hi
 8007a1a:	f1a2 030d 	subhi.w	r3, r2, #13
                WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) ( heth->TxDescList.TxDesc[ heth->TxDescList.CurTxDesc ] ) );
 8007a1e:	6802      	ldr	r2, [r0, #0]
 8007a20:	1d99      	adds	r1, r3, #6
                INCR_TX_DESC_INDEX( heth->TxDescList.CurTxDesc, 1U );
 8007a22:	6503      	str	r3, [r0, #80]	@ 0x50
                WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) ( heth->TxDescList.TxDesc[ heth->TxDescList.CurTxDesc ] ) );
 8007a24:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007a28:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8007a2c:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
 8007a30:	f3bf 8f4f 	dsb	sy
                ( void ) heth->Instance->DMACTDTPR;
 8007a34:	6803      	ldr	r3, [r0, #0]
                return HAL_OK;
 8007a36:	2000      	movs	r0, #0
                ( void ) heth->Instance->DMACTDTPR;
 8007a38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
        }
 8007a3c:	bcf0      	pop	{r4, r5, r6, r7}
                ( void ) heth->Instance->DMACTDTPR;
 8007a3e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
        }
 8007a42:	4770      	bx	lr
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl );
 8007a44:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8007a48:	6909      	ldr	r1, [r1, #16]
 8007a4a:	430b      	orrs	r3, r1
 8007a4c:	e7d5      	b.n	80079fa <HAL_ETH_Transmit_IT+0x5a>
                heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8007a4e:	f8d0 3098 	ldr.w	r3, [r0, #152]	@ 0x98
 8007a52:	f043 0301 	orr.w	r3, r3, #1
 8007a56:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
                return HAL_ERROR;
 8007a5a:	2001      	movs	r0, #1
        }
 8007a5c:	4770      	bx	lr
                    heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8007a5e:	f8d0 3098 	ldr.w	r3, [r0, #152]	@ 0x98
 8007a62:	f043 0302 	orr.w	r3, r3, #2
        }
 8007a66:	bcf0      	pop	{r4, r5, r6, r7}
                    heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8007a68:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
                return HAL_ERROR;
 8007a6c:	2001      	movs	r0, #1
        }
 8007a6e:	4770      	bx	lr
 8007a70:	ffffc000 	.word	0xffffc000
 8007a74:	c000ffff 	.word	0xc000ffff
 8007a78:	ffff8000 	.word	0xffff8000

08007a7c <HAL_ETH_IsRxDataAvailable>:
        {
 8007a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            uint32_t desc_index = dmarxdesclist->CurRxDesc;
 8007a80:	f8d0 9078 	ldr.w	r9, [r0, #120]	@ 0x78
            uint32_t desc_scan_count = 0;
 8007a84:	2400      	movs	r4, #0
                configASSERT( ( ( ulDesc3 & ETH_DMATXNDESCWBF_FD ) != 0U ) && ( ( ulDesc3 & ETH_DMATXNDESCWBF_LD ) != 0U ) );
 8007a86:	4f1f      	ldr	r7, [pc, #124]	@ (8007b04 <HAL_ETH_IsRxDataAvailable+0x88>)
        {
 8007a88:	4680      	mov	r8, r0
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8007a8a:	eb00 0389 	add.w	r3, r0, r9, lsl #2
 8007a8e:	6d9e      	ldr	r6, [r3, #88]	@ 0x58
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 8007a90:	e00b      	b.n	8007aaa <HAL_ETH_IsRxDataAvailable+0x2e>
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	db11      	blt.n	8007aba <HAL_ETH_IsRxDataAvailable+0x3e>
                uint32_t ulDesc3 = dmarxdesc->DESC3;
 8007a96:	68f5      	ldr	r5, [r6, #12]
                configASSERT( ( ( ulDesc3 & ETH_DMATXNDESCWBF_FD ) != 0U ) && ( ( ulDesc3 & ETH_DMATXNDESCWBF_LD ) != 0U ) );
 8007a98:	f005 5340 	and.w	r3, r5, #805306368	@ 0x30000000
 8007a9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007aa0:	d001      	beq.n	8007aa6 <HAL_ETH_IsRxDataAvailable+0x2a>
 8007aa2:	f7f9 f929 	bl	8000cf8 <vAssertCalled>
                if( READ_BIT( ulDesc3, ETH_DMARXNDESCWBF_LD ) != ( uint32_t ) RESET )
 8007aa6:	00ea      	lsls	r2, r5, #3
 8007aa8:	d40d      	bmi.n	8007ac6 <HAL_ETH_IsRxDataAvailable+0x4a>
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 8007aaa:	2c08      	cmp	r4, #8
 8007aac:	68f3      	ldr	r3, [r6, #12]
                desc_scan_count++;
 8007aae:	f104 0401 	add.w	r4, r4, #1
                configASSERT( ( ( ulDesc3 & ETH_DMATXNDESCWBF_FD ) != 0U ) && ( ( ulDesc3 & ETH_DMATXNDESCWBF_LD ) != 0U ) );
 8007ab2:	f240 414b 	movw	r1, #1099	@ 0x44b
 8007ab6:	4638      	mov	r0, r7
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 8007ab8:	d1eb      	bne.n	8007a92 <HAL_ETH_IsRxDataAvailable+0x16>
 8007aba:	2300      	movs	r3, #0
            return 0;
 8007abc:	4618      	mov	r0, r3
                    dmarxdesclist->AppDescNbr = app_desc_count;
 8007abe:	f8c8 3080 	str.w	r3, [r8, #128]	@ 0x80
        }
 8007ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    INCR_RX_DESC_INDEX( desc_index, 1U );
 8007ac6:	f109 0201 	add.w	r2, r9, #1
 8007aca:	2a07      	cmp	r2, #7
 8007acc:	bf88      	it	hi
 8007ace:	f1a9 0207 	subhi.w	r2, r9, #7
                    dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8007ad2:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8007ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                    if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET )
 8007ad8:	68d9      	ldr	r1, [r3, #12]
 8007ada:	2900      	cmp	r1, #0
 8007adc:	db0a      	blt.n	8007af4 <HAL_ETH_IsRxDataAvailable+0x78>
                        if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_CTXT ) != ( uint32_t ) RESET )
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	005b      	lsls	r3, r3, #1
 8007ae2:	d507      	bpl.n	8007af4 <HAL_ETH_IsRxDataAvailable+0x78>
                            dmarxdesclist->AppContextDesc = 1;
 8007ae4:	2101      	movs	r1, #1
                            INCR_RX_DESC_INDEX( desc_index, 1U );
 8007ae6:	1853      	adds	r3, r2, r1
                            dmarxdesclist->AppContextDesc = 1;
 8007ae8:	f8c8 1084 	str.w	r1, [r8, #132]	@ 0x84
                            INCR_RX_DESC_INDEX( desc_index, 1U );
 8007aec:	2b07      	cmp	r3, #7
 8007aee:	bf8c      	ite	hi
 8007af0:	3a07      	subhi	r2, #7
 8007af2:	461a      	movls	r2, r3
                    return 1;
 8007af4:	2301      	movs	r3, #1
                    dmarxdesclist->FirstAppDesc = first_app_desc_index;
 8007af6:	e9c8 291e 	strd	r2, r9, [r8, #120]	@ 0x78
                    return 1;
 8007afa:	4618      	mov	r0, r3
                    dmarxdesclist->AppDescNbr = app_desc_count;
 8007afc:	f8c8 3080 	str.w	r3, [r8, #128]	@ 0x80
        }
 8007b00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b04:	080116c8 	.word	0x080116c8

08007b08 <HAL_ETH_GetRxData>:
        {
 8007b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0a:	4605      	mov	r5, r0
            configASSERT( RxBuffer != NULL );
 8007b0c:	460e      	mov	r6, r1
 8007b0e:	b319      	cbz	r1, 8007b58 <HAL_ETH_GetRxData+0x50>
            if( HAL_ETH_IsRxDataAvailable( heth ) == 0U )
 8007b10:	4628      	mov	r0, r5
 8007b12:	f7ff ffb3 	bl	8007a7c <HAL_ETH_IsRxDataAvailable>
 8007b16:	4604      	mov	r4, r0
 8007b18:	b178      	cbz	r0, 8007b3a <HAL_ETH_GetRxData+0x32>
            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 8007b1a:	e9d5 321f 	ldrd	r3, r2, [r5, #124]	@ 0x7c
            dma_rx_desc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8007b1e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 8007b22:	2a01      	cmp	r2, #1
            dma_rx_desc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8007b24:	6d9f      	ldr	r7, [r3, #88]	@ 0x58
            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 8007b26:	d10a      	bne.n	8007b3e <HAL_ETH_GetRxData+0x36>
            packet_length = READ_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCWBF_PL );
 8007b28:	68fc      	ldr	r4, [r7, #12]
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 8007b2a:	696b      	ldr	r3, [r5, #20]
            packet_length = READ_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCWBF_PL );
 8007b2c:	f3c4 040e 	ubfx	r4, r4, #0, #15
            RxBuffer->buffer = ( uint8_t * ) dma_rx_desc->BackupAddr0;
 8007b30:	693a      	ldr	r2, [r7, #16]
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 8007b32:	42a3      	cmp	r3, r4
            RxBuffer->len = packet_length;
 8007b34:	e9c6 2400 	strd	r2, r4, [r6]
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 8007b38:	d307      	bcc.n	8007b4a <HAL_ETH_GetRxData+0x42>
        }
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 8007b3e:	f44f 619c 	mov.w	r1, #1248	@ 0x4e0
 8007b42:	4808      	ldr	r0, [pc, #32]	@ (8007b64 <HAL_ETH_GetRxData+0x5c>)
 8007b44:	f7f9 f8d8 	bl	8000cf8 <vAssertCalled>
 8007b48:	e7ee      	b.n	8007b28 <HAL_ETH_GetRxData+0x20>
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 8007b4a:	f240 41e9 	movw	r1, #1257	@ 0x4e9
 8007b4e:	4805      	ldr	r0, [pc, #20]	@ (8007b64 <HAL_ETH_GetRxData+0x5c>)
 8007b50:	f7f9 f8d2 	bl	8000cf8 <vAssertCalled>
        }
 8007b54:	4620      	mov	r0, r4
 8007b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            configASSERT( RxBuffer != NULL );
 8007b58:	f240 41d5 	movw	r1, #1237	@ 0x4d5
 8007b5c:	4801      	ldr	r0, [pc, #4]	@ (8007b64 <HAL_ETH_GetRxData+0x5c>)
 8007b5e:	f7f9 f8cb 	bl	8000cf8 <vAssertCalled>
 8007b62:	e7d5      	b.n	8007b10 <HAL_ETH_GetRxData+0x8>
 8007b64:	080116c8 	.word	0x080116c8

08007b68 <HAL_ETH_BuildRxDescriptors>:
        {
 8007b68:	b570      	push	{r4, r5, r6, lr}
            uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8007b6a:	f8d0 6080 	ldr.w	r6, [r0, #128]	@ 0x80
            if( dmarxdesclist->AppDescNbr == 0U )
 8007b6e:	2e00      	cmp	r6, #0
 8007b70:	d040      	beq.n	8007bf4 <HAL_ETH_BuildRxDescriptors+0x8c>
            if( dmarxdesclist->AppContextDesc != 0U )
 8007b72:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8007b76:	4684      	mov	ip, r0
 8007b78:	b3a3      	cbz	r3, 8007be4 <HAL_ETH_BuildRxDescriptors+0x7c>
            uint32_t desc_index = dmarxdesclist->FirstAppDesc;
 8007b7a:	f8dc 207c 	ldr.w	r2, [ip, #124]	@ 0x7c
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8007b7e:	2000      	movs	r0, #0
            __IO ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8007b80:	eb0c 0382 	add.w	r3, ip, r2, lsl #2
 8007b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                if( pucNewBuffer != NULL )
 8007b86:	b301      	cbz	r1, 8007bca <HAL_ETH_BuildRxDescriptors+0x62>
                    dmarxdesc->BackupAddr0 = ( uint32_t ) pucNewBuffer;
 8007b88:	460d      	mov	r5, r1
 8007b8a:	6119      	str	r1, [r3, #16]
                if( dmarxdesclist->ItMode != 0U )
 8007b8c:	f8dc 4088 	ldr.w	r4, [ip, #136]	@ 0x88
                WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pucBuffer );
 8007b90:	601d      	str	r5, [r3, #0]
                if( dmarxdesclist->ItMode != 0U )
 8007b92:	2c00      	cmp	r4, #0
                DESC3 = READ_REG( dmarxdesc->DESC3 );
 8007b94:	68dd      	ldr	r5, [r3, #12]
                if( dmarxdesclist->ItMode != 0U )
 8007b96:	bf14      	ite	ne
 8007b98:	f04f 4441 	movne.w	r4, #3238002688	@ 0xc1000000
 8007b9c:	f04f 4401 	moveq.w	r4, #2164260864	@ 0x81000000
                WRITE_REG( dmarxdesc->DESC3, DESC3 );
 8007ba0:	60dc      	str	r4, [r3, #12]
 8007ba2:	f3bf 8f4f 	dsb	sy
                if( descscan >= ( totalappdescnbr - 1U ) )
 8007ba6:	42b0      	cmp	r0, r6
                INCR_RX_DESC_INDEX( desc_index, 1U );
 8007ba8:	f102 0e01 	add.w	lr, r2, #1
                ( void ) dmarxdesc->DESC3;
 8007bac:	68dc      	ldr	r4, [r3, #12]
                INCR_RX_DESC_INDEX( desc_index, 1U );
 8007bae:	f1a2 0207 	sub.w	r2, r2, #7
                if( descscan >= ( totalappdescnbr - 1U ) )
 8007bb2:	d00c      	beq.n	8007bce <HAL_ETH_BuildRxDescriptors+0x66>
                INCR_RX_DESC_INDEX( desc_index, 1U );
 8007bb4:	f1be 0f07 	cmp.w	lr, #7
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8007bb8:	f100 0001 	add.w	r0, r0, #1
 8007bbc:	bf98      	it	ls
 8007bbe:	4672      	movls	r2, lr
                dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8007bc0:	eb0c 0382 	add.w	r3, ip, r2, lsl #2
 8007bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                if( pucNewBuffer != NULL )
 8007bc6:	2900      	cmp	r1, #0
 8007bc8:	d1de      	bne.n	8007b88 <HAL_ETH_BuildRxDescriptors+0x20>
                    pucBuffer = ( uint8_t * ) dmarxdesc->BackupAddr0;
 8007bca:	691d      	ldr	r5, [r3, #16]
 8007bcc:	e7de      	b.n	8007b8c <HAL_ETH_BuildRxDescriptors+0x24>
            WRITE_REG( heth->Instance->DMACRDTPR, ( uint32_t ) dmarxdesc );
 8007bce:	f8dc 1000 	ldr.w	r1, [ip]
            dmarxdesclist->AppDescNbr = 0;
 8007bd2:	2200      	movs	r2, #0
            WRITE_REG( heth->Instance->DMACRDTPR, ( uint32_t ) dmarxdesc );
 8007bd4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
            return HAL_OK;
 8007bd8:	4610      	mov	r0, r2
            WRITE_REG( heth->Instance->DMACRDTPR, ( uint32_t ) dmarxdesc );
 8007bda:	f8c1 3128 	str.w	r3, [r1, #296]	@ 0x128
            dmarxdesclist->AppDescNbr = 0;
 8007bde:	e9cc 2220 	strd	r2, r2, [ip, #128]	@ 0x80
        }
 8007be2:	bd70      	pop	{r4, r5, r6, pc}
            uint32_t desc_index = dmarxdesclist->FirstAppDesc;
 8007be4:	f8dc 207c 	ldr.w	r2, [ip, #124]	@ 0x7c
                if( descscan >= ( totalappdescnbr - 1U ) )
 8007be8:	3e01      	subs	r6, #1
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8007bea:	2000      	movs	r0, #0
            __IO ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8007bec:	eb0c 0382 	add.w	r3, ip, r2, lsl #2
 8007bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8007bf2:	e7c8      	b.n	8007b86 <HAL_ETH_BuildRxDescriptors+0x1e>
                return HAL_ERROR;
 8007bf4:	2001      	movs	r0, #1
        }
 8007bf6:	bd70      	pop	{r4, r5, r6, pc}

08007bf8 <HAL_ETH_MACErrorCallback>:
        __weak void HAL_ETH_MACErrorCallback( ETH_HandleTypeDef * heth )
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop

08007bfc <HAL_ETH_PMTCallback>:
        __weak void HAL_ETH_PMTCallback( ETH_HandleTypeDef * heth )
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop

08007c00 <HAL_ETH_EEECallback>:
        __weak void HAL_ETH_EEECallback( ETH_HandleTypeDef * heth )
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop

08007c04 <HAL_ETH_WakeUpCallback>:
        __weak void HAL_ETH_WakeUpCallback( ETH_HandleTypeDef * heth )
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop

08007c08 <HAL_ETH_IRQHandler>:
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_RI ) )
 8007c08:	6803      	ldr	r3, [r0, #0]
 8007c0a:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8007c0e:	f8d2 1160 	ldr.w	r1, [r2, #352]	@ 0x160
 8007c12:	0649      	lsls	r1, r1, #25
        {
 8007c14:	b510      	push	{r4, lr}
 8007c16:	4604      	mov	r4, r0
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_RI ) )
 8007c18:	d504      	bpl.n	8007c24 <HAL_ETH_IRQHandler+0x1c>
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_RIE ) )
 8007c1a:	f8d2 1134 	ldr.w	r1, [r2, #308]	@ 0x134
 8007c1e:	0649      	lsls	r1, r1, #25
 8007c20:	f100 8088 	bmi.w	8007d34 <HAL_ETH_IRQHandler+0x12c>
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_TI ) )
 8007c24:	f8d2 1160 	ldr.w	r1, [r2, #352]	@ 0x160
 8007c28:	07c8      	lsls	r0, r1, #31
 8007c2a:	d503      	bpl.n	8007c34 <HAL_ETH_IRQHandler+0x2c>
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_TIE ) )
 8007c2c:	f8d2 1134 	ldr.w	r1, [r2, #308]	@ 0x134
 8007c30:	07c9      	lsls	r1, r1, #31
 8007c32:	d474      	bmi.n	8007d1e <HAL_ETH_IRQHandler+0x116>
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_AIS ) )
 8007c34:	f8d2 1160 	ldr.w	r1, [r2, #352]	@ 0x160
 8007c38:	0448      	lsls	r0, r1, #17
 8007c3a:	d503      	bpl.n	8007c44 <HAL_ETH_IRQHandler+0x3c>
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_AIE ) )
 8007c3c:	f8d2 1134 	ldr.w	r1, [r2, #308]	@ 0x134
 8007c40:	0449      	lsls	r1, r1, #17
 8007c42:	d41d      	bmi.n	8007c80 <HAL_ETH_IRQHandler+0x78>
            if( __HAL_ETH_MAC_GET_IT( heth, ( ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE ) ) )
 8007c44:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007c48:	f402 42c0 	and.w	r2, r2, #24576	@ 0x6000
 8007c4c:	f5b2 4fc0 	cmp.w	r2, #24576	@ 0x6000
 8007c50:	d035      	beq.n	8007cbe <HAL_ETH_IRQHandler+0xb6>
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_PMT_IT ) )
 8007c52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007c56:	06d0      	lsls	r0, r2, #27
 8007c58:	d443      	bmi.n	8007ce2 <HAL_ETH_IRQHandler+0xda>
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_LPI_IT ) )
 8007c5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007c5e:	0691      	lsls	r1, r2, #26
 8007c60:	d450      	bmi.n	8007d04 <HAL_ETH_IRQHandler+0xfc>
                if( __HAL_ETH_WAKEUP_EXTI_GET_FLAG( ETH_WAKEUP_EXTI_LINE ) != ( uint32_t ) RESET )
 8007c62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c66:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8007c6a:	0252      	lsls	r2, r2, #9
 8007c6c:	d400      	bmi.n	8007c70 <HAL_ETH_IRQHandler+0x68>
        }
 8007c6e:	bd10      	pop	{r4, pc}
                    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG( ETH_WAKEUP_EXTI_LINE );
 8007c70:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
                            HAL_ETH_WakeUpCallback( heth );
 8007c74:	4620      	mov	r0, r4
                    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG( ETH_WAKEUP_EXTI_LINE );
 8007c76:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                            HAL_ETH_WakeUpCallback( heth );
 8007c7a:	f7ff ffc3 	bl	8007c04 <HAL_ETH_WakeUpCallback>
        }
 8007c7e:	bd10      	pop	{r4, pc}
                    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8007c80:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8007c84:	f043 0308 	orr.w	r3, r3, #8
 8007c88:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
                    if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_FBE ) )
 8007c8c:	f8d2 3160 	ldr.w	r3, [r2, #352]	@ 0x160
 8007c90:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS ) );
 8007c94:	f8d2 3160 	ldr.w	r3, [r2, #352]	@ 0x160
                    if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_FBE ) )
 8007c98:	d156      	bne.n	8007d48 <HAL_ETH_IRQHandler+0x140>
                        __HAL_ETH_DMA_CLEAR_IT( heth, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8007c9a:	f44f 41cd 	mov.w	r1, #26240	@ 0x6680
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8007c9e:	400b      	ands	r3, r1
 8007ca0:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
                        __HAL_ETH_DMA_CLEAR_IT( heth, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8007ca4:	f8c2 1160 	str.w	r1, [r2, #352]	@ 0x160
                            HAL_ETH_DMAErrorCallback( heth );
 8007ca8:	4620      	mov	r0, r4
 8007caa:	f7ff fc91 	bl	80075d0 <HAL_ETH_DMAErrorCallback>
            if( __HAL_ETH_MAC_GET_IT( heth, ( ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE ) ) )
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007cb4:	f402 42c0 	and.w	r2, r2, #24576	@ 0x6000
 8007cb8:	f5b2 4fc0 	cmp.w	r2, #24576	@ 0x6000
 8007cbc:	d1c9      	bne.n	8007c52 <HAL_ETH_IRQHandler+0x4a>
                heth->MACErrorCode = READ_REG( heth->Instance->MACRXTXSR );
 8007cbe:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
        heth->gState = ulState;
 8007cc2:	23e0      	movs	r3, #224	@ 0xe0
                        HAL_ETH_MACErrorCallback( heth );
 8007cc4:	4620      	mov	r0, r4
                heth->MACErrorCode = READ_REG( heth->Instance->MACRXTXSR );
 8007cc6:	f8c4 20a0 	str.w	r2, [r4, #160]	@ 0xa0
        heth->gState = ulState;
 8007cca:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
                        HAL_ETH_MACErrorCallback( heth );
 8007cce:	f7ff ff93 	bl	8007bf8 <HAL_ETH_MACErrorCallback>
                heth->MACErrorCode = ( uint32_t ) ( 0x0U );
 8007cd2:	2200      	movs	r2, #0
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_PMT_IT ) )
 8007cd4:	6823      	ldr	r3, [r4, #0]
                heth->MACErrorCode = ( uint32_t ) ( 0x0U );
 8007cd6:	f8c4 20a0 	str.w	r2, [r4, #160]	@ 0xa0
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_PMT_IT ) )
 8007cda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007cde:	06d0      	lsls	r0, r2, #27
 8007ce0:	d5bb      	bpl.n	8007c5a <HAL_ETH_IRQHandler+0x52>
                heth->MACWakeUpEvent = READ_BIT( heth->Instance->MACPCSR, ( ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD ) );
 8007ce2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
                        HAL_ETH_PMTCallback( heth );
 8007ce6:	4620      	mov	r0, r4
                heth->MACWakeUpEvent = READ_BIT( heth->Instance->MACPCSR, ( ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD ) );
 8007ce8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007cec:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
                        HAL_ETH_PMTCallback( heth );
 8007cf0:	f7ff ff84 	bl	8007bfc <HAL_ETH_PMTCallback>
                heth->MACWakeUpEvent = ( uint32_t ) ( 0x0U );
 8007cf4:	2200      	movs	r2, #0
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_LPI_IT ) )
 8007cf6:	6823      	ldr	r3, [r4, #0]
                heth->MACWakeUpEvent = ( uint32_t ) ( 0x0U );
 8007cf8:	f8c4 20a4 	str.w	r2, [r4, #164]	@ 0xa4
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_LPI_IT ) )
 8007cfc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007d00:	0691      	lsls	r1, r2, #26
 8007d02:	d5ae      	bpl.n	8007c62 <HAL_ETH_IRQHandler+0x5a>
                heth->MACLPIEvent = READ_BIT( heth->Instance->MACPCSR, 0x0000000FU );
 8007d04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
                        HAL_ETH_EEECallback( heth );
 8007d08:	4620      	mov	r0, r4
                heth->MACLPIEvent = READ_BIT( heth->Instance->MACPCSR, 0x0000000FU );
 8007d0a:	f003 030f 	and.w	r3, r3, #15
 8007d0e:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
                        HAL_ETH_EEECallback( heth );
 8007d12:	f7ff ff75 	bl	8007c00 <HAL_ETH_EEECallback>
                heth->MACLPIEvent = ( uint32_t ) ( 0x0U );
 8007d16:	2300      	movs	r3, #0
 8007d18:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 8007d1c:	e7a1      	b.n	8007c62 <HAL_ETH_IRQHandler+0x5a>
                            HAL_ETH_TxCpltCallback( heth );
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f7ff fc12 	bl	8007548 <HAL_ETH_TxCpltCallback>
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_TI | ETH_DMACSR_NIS );
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007d2a:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8007d2e:	f8c2 1160 	str.w	r1, [r2, #352]	@ 0x160
 8007d32:	e77f      	b.n	8007c34 <HAL_ETH_IRQHandler+0x2c>
                            HAL_ETH_RxCpltCallback( heth );
 8007d34:	f7ff fc2a 	bl	800758c <HAL_ETH_RxCpltCallback>
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_RI | ETH_DMACSR_NIS );
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	f248 0140 	movw	r1, #32832	@ 0x8040
 8007d3e:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8007d42:	f8c2 1160 	str.w	r1, [r2, #352]	@ 0x160
 8007d46:	e76d      	b.n	8007c24 <HAL_ETH_IRQHandler+0x1c>
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS ) );
 8007d48:	f241 1002 	movw	r0, #4354	@ 0x1102
        heth->gState = ulState;
 8007d4c:	21e0      	movs	r1, #224	@ 0xe0
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS ) );
 8007d4e:	4003      	ands	r3, r0
 8007d50:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
                        __HAL_ETH_DMA_DISABLE_IT( heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE );
 8007d54:	f8d2 3134 	ldr.w	r3, [r2, #308]	@ 0x134
 8007d58:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8007d5c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
        heth->gState = ulState;
 8007d60:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
    }
 8007d64:	e7a0      	b.n	8007ca8 <HAL_ETH_IRQHandler+0xa0>
 8007d66:	bf00      	nop

08007d68 <HAL_ETH_ReadPHYRegister>:
        {
 8007d68:	b570      	push	{r4, r5, r6, lr}
 8007d6a:	4604      	mov	r4, r0
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8007d6c:	6800      	ldr	r0, [r0, #0]
        {
 8007d6e:	461d      	mov	r5, r3
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8007d70:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 8007d74:	07db      	lsls	r3, r3, #31
 8007d76:	d501      	bpl.n	8007d7c <HAL_ETH_ReadPHYRegister+0x14>
                return HAL_ERROR;
 8007d78:	2001      	movs	r0, #1
        }
 8007d7a:	bd70      	pop	{r4, r5, r6, pc}
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 8007d7c:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8007d80:	f023 7378 	bic.w	r3, r3, #65011712	@ 0x3e00000
 8007d84:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8007d88:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007d8c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 8007d90:	f042 020d 	orr.w	r2, r2, #13
            WRITE_REG( heth->Instance->MACMDIOAR, tmpreg );
 8007d94:	f8c0 2200 	str.w	r2, [r0, #512]	@ 0x200
            tickstart = HAL_GetTick();
 8007d98:	f002 faa8 	bl	800a2ec <HAL_GetTick>
 8007d9c:	4606      	mov	r6, r0
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8007d9e:	e005      	b.n	8007dac <HAL_ETH_ReadPHYRegister+0x44>
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 8007da0:	f002 faa4 	bl	800a2ec <HAL_GetTick>
 8007da4:	1b82      	subs	r2, r0, r6
 8007da6:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8007daa:	d8e5      	bhi.n	8007d78 <HAL_ETH_ReadPHYRegister+0x10>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8007dac:	6821      	ldr	r1, [r4, #0]
 8007dae:	f8d1 2200 	ldr.w	r2, [r1, #512]	@ 0x200
 8007db2:	f012 0201 	ands.w	r2, r2, #1
 8007db6:	d1f3      	bne.n	8007da0 <HAL_ETH_ReadPHYRegister+0x38>
            WRITE_REG( *pRegValue, ( uint16_t ) heth->Instance->MACMDIODR );
 8007db8:	f8d1 3204 	ldr.w	r3, [r1, #516]	@ 0x204
            return HAL_OK;
 8007dbc:	4610      	mov	r0, r2
            WRITE_REG( *pRegValue, ( uint16_t ) heth->Instance->MACMDIODR );
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	602b      	str	r3, [r5, #0]
        }
 8007dc2:	bd70      	pop	{r4, r5, r6, pc}

08007dc4 <HAL_ETH_WritePHYRegister>:
        {
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	4604      	mov	r4, r0
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8007dc8:	6800      	ldr	r0, [r0, #0]
 8007dca:	f8d0 5200 	ldr.w	r5, [r0, #512]	@ 0x200
 8007dce:	07ed      	lsls	r5, r5, #31
 8007dd0:	d501      	bpl.n	8007dd6 <HAL_ETH_WritePHYRegister+0x12>
                return HAL_ERROR;
 8007dd2:	2001      	movs	r0, #1
        }
 8007dd4:	bd38      	pop	{r3, r4, r5, pc}
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 8007dd6:	f8d0 0200 	ldr.w	r0, [r0, #512]	@ 0x200
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8007dda:	b29d      	uxth	r5, r3
 8007ddc:	f020 7378 	bic.w	r3, r0, #65011712	@ 0x3e00000
 8007de0:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
            WRITE_REG( ETH->MACMDIODR, ( uint16_t ) RegValue );
 8007de4:	490f      	ldr	r1, [pc, #60]	@ (8007e24 <HAL_ETH_WritePHYRegister+0x60>)
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8007de6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
            WRITE_REG( ETH->MACMDIODR, ( uint16_t ) RegValue );
 8007dea:	f8c1 5204 	str.w	r5, [r1, #516]	@ 0x204
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8007dee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR );
 8007df2:	f023 030c 	bic.w	r3, r3, #12
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 8007df6:	f043 0305 	orr.w	r3, r3, #5
            WRITE_REG( ETH->MACMDIOAR, tmpreg );
 8007dfa:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
            tickstart = HAL_GetTick();
 8007dfe:	f002 fa75 	bl	800a2ec <HAL_GetTick>
 8007e02:	4605      	mov	r5, r0
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8007e04:	e005      	b.n	8007e12 <HAL_ETH_WritePHYRegister+0x4e>
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 8007e06:	f002 fa71 	bl	800a2ec <HAL_GetTick>
 8007e0a:	1b43      	subs	r3, r0, r5
 8007e0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e10:	d8df      	bhi.n	8007dd2 <HAL_ETH_WritePHYRegister+0xe>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007e18:	f013 0301 	ands.w	r3, r3, #1
 8007e1c:	d1f3      	bne.n	8007e06 <HAL_ETH_WritePHYRegister+0x42>
            return HAL_OK;
 8007e1e:	4618      	mov	r0, r3
        }
 8007e20:	bd38      	pop	{r3, r4, r5, pc}
 8007e22:	bf00      	nop
 8007e24:	40028000 	.word	0x40028000

08007e28 <HAL_ETH_GetMACConfig>:
            if( macconf == NULL )
 8007e28:	2900      	cmp	r1, #0
 8007e2a:	f000 80c4 	beq.w	8007fb6 <HAL_ETH_GetMACConfig+0x18e>
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 8007e2e:	6803      	ldr	r3, [r0, #0]
            return HAL_OK;
 8007e30:	2000      	movs	r0, #0
        {
 8007e32:	b410      	push	{r4}
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 8007e34:	681c      	ldr	r4, [r3, #0]
            macconf->DeferralCheck = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DC ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8007e36:	681a      	ldr	r2, [r3, #0]
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 8007e38:	f004 040c 	and.w	r4, r4, #12
            macconf->DeferralCheck = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DC ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8007e3c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8007e40:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
            macconf->BackOffLimit = READ_BIT( heth->Instance->MACCR, ETH_MACCR_BL );
 8007e44:	681a      	ldr	r2, [r3, #0]
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 8007e46:	62cc      	str	r4, [r1, #44]	@ 0x2c
            macconf->BackOffLimit = READ_BIT( heth->Instance->MACCR, ETH_MACCR_BL );
 8007e48:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8007e4c:	624a      	str	r2, [r1, #36]	@ 0x24
            macconf->RetryTransmission = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DR ) >> 8 ) == 0U ) ? ENABLE : DISABLE;
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	f482 7280 	eor.w	r2, r2, #256	@ 0x100
 8007e54:	f3c2 2200 	ubfx	r2, r2, #8, #1
 8007e58:	f881 2020 	strb.w	r2, [r1, #32]
            macconf->CarrierSenseDuringTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DCRS ) >> 9 ) > 0U ) ? ENABLE : DISABLE;
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	f3c2 2240 	ubfx	r2, r2, #9, #1
 8007e62:	77ca      	strb	r2, [r1, #31]
            macconf->ReceiveOwn = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DO ) >> 10 ) == 0U ) ? ENABLE : DISABLE;
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	f482 6280 	eor.w	r2, r2, #1024	@ 0x400
 8007e6a:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8007e6e:	778a      	strb	r2, [r1, #30]
            macconf->CarrierSenseBeforeTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ECRSFD ) >> 11 ) > 0U ) ? ENABLE : DISABLE;
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	f3c2 22c0 	ubfx	r2, r2, #11, #1
 8007e76:	774a      	strb	r2, [r1, #29]
            macconf->LoopbackMode = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_LM ) >> 12 ) > 0U ) ? ENABLE : DISABLE;
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8007e7e:	770a      	strb	r2, [r1, #28]
            macconf->DuplexMode = READ_BIT( heth->Instance->MACCR, ETH_MACCR_DM );
 8007e80:	681c      	ldr	r4, [r3, #0]
            macconf->Speed = READ_BIT( heth->Instance->MACCR, ETH_MACCR_FES );
 8007e82:	681a      	ldr	r2, [r3, #0]
            macconf->DuplexMode = READ_BIT( heth->Instance->MACCR, ETH_MACCR_DM );
 8007e84:	f404 5400 	and.w	r4, r4, #8192	@ 0x2000
            macconf->Speed = READ_BIT( heth->Instance->MACCR, ETH_MACCR_FES );
 8007e88:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8007e8c:	e9c1 2405 	strd	r2, r4, [r1, #20]
            macconf->JumboPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JE ) >> 16 ) > 0U ) ? ENABLE : DISABLE;
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8007e96:	748a      	strb	r2, [r1, #18]
            macconf->Jabber = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JD ) >> 17 ) == 0U ) ? ENABLE : DISABLE;
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	f482 3200 	eor.w	r2, r2, #131072	@ 0x20000
 8007e9e:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8007ea2:	744a      	strb	r2, [r1, #17]
            macconf->Watchdog = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_WD ) >> 19 ) == 0U ) ? ENABLE : DISABLE;
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007eaa:	f3c2 42c0 	ubfx	r2, r2, #19, #1
 8007eae:	740a      	strb	r2, [r1, #16]
            macconf->AutomaticPadCRCStrip = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ACS ) >> 20 ) > 0U ) ? ENABLE : DISABLE;
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	f3c2 5200 	ubfx	r2, r2, #20, #1
 8007eb6:	73ca      	strb	r2, [r1, #15]
            macconf->CRCStripTypePacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_CST ) >> 21 ) > 0U ) ? ENABLE : DISABLE;
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8007ebe:	738a      	strb	r2, [r1, #14]
            macconf->Support2KPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_S2KP ) >> 22 ) > 0U ) ? ENABLE : DISABLE;
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8007ec6:	734a      	strb	r2, [r1, #13]
            macconf->GiantPacketSizeLimitControl = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_GPSLCE ) >> 23 ) > 0U ) ? ENABLE : DISABLE;
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8007ece:	730a      	strb	r2, [r1, #12]
            macconf->InterPacketGapVal = READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPG );
 8007ed0:	681c      	ldr	r4, [r3, #0]
            macconf->ChecksumOffload = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPC ) >> 27 ) > 0U ) ? ENABLE : DISABLE;
 8007ed2:	681a      	ldr	r2, [r3, #0]
            macconf->InterPacketGapVal = READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPG );
 8007ed4:	f004 64e0 	and.w	r4, r4, #117440512	@ 0x7000000
            macconf->ChecksumOffload = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPC ) >> 27 ) > 0U ) ? ENABLE : DISABLE;
 8007ed8:	f3c2 62c0 	ubfx	r2, r2, #27, #1
            macconf->InterPacketGapVal = READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPG );
 8007edc:	608c      	str	r4, [r1, #8]
            macconf->ChecksumOffload = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPC ) >> 27 ) > 0U ) ? ENABLE : DISABLE;
 8007ede:	710a      	strb	r2, [r1, #4]
            macconf->SourceAddrControl = READ_BIT( heth->Instance->MACCR, ETH_MACCR_SARC );
 8007ee0:	681c      	ldr	r4, [r3, #0]
            macconf->GiantPacketSizeLimit = READ_BIT( heth->Instance->MACECR, ETH_MACECR_GPSL );
 8007ee2:	685a      	ldr	r2, [r3, #4]
            macconf->SourceAddrControl = READ_BIT( heth->Instance->MACCR, ETH_MACCR_SARC );
 8007ee4:	f004 44e0 	and.w	r4, r4, #1879048192	@ 0x70000000
            macconf->GiantPacketSizeLimit = READ_BIT( heth->Instance->MACECR, ETH_MACECR_GPSL );
 8007ee8:	f3c2 020d 	ubfx	r2, r2, #0, #14
            macconf->SourceAddrControl = READ_BIT( heth->Instance->MACCR, ETH_MACCR_SARC );
 8007eec:	600c      	str	r4, [r1, #0]
            macconf->GiantPacketSizeLimit = READ_BIT( heth->Instance->MACECR, ETH_MACECR_GPSL );
 8007eee:	634a      	str	r2, [r1, #52]	@ 0x34
            macconf->CRCCheckingRxPackets = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_DCRCC ) >> 16 ) == 0U ) ? ENABLE : DISABLE;
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	f482 3280 	eor.w	r2, r2, #65536	@ 0x10000
 8007ef6:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8007efa:	f881 2032 	strb.w	r2, [r1, #50]	@ 0x32
            macconf->SlowProtocolDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_SPEN ) >> 17 ) > 0U ) ? ENABLE : DISABLE;
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8007f04:	f881 2031 	strb.w	r2, [r1, #49]	@ 0x31
            macconf->UnicastSlowProtocolPacketDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_USP ) >> 18 ) > 0U ) ? ENABLE : DISABLE;
 8007f08:	685a      	ldr	r2, [r3, #4]
 8007f0a:	f3c2 4280 	ubfx	r2, r2, #18, #1
 8007f0e:	f881 2030 	strb.w	r2, [r1, #48]	@ 0x30
            macconf->ExtendedInterPacketGap = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPGEN ) >> 24 ) > 0U ) ? ENABLE : DISABLE;
 8007f12:	685a      	ldr	r2, [r3, #4]
 8007f14:	f3c2 6200 	ubfx	r2, r2, #24, #1
 8007f18:	f881 2038 	strb.w	r2, [r1, #56]	@ 0x38
            macconf->ExtendedInterPacketGapVal = READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPG ) >> 25;
 8007f1c:	685c      	ldr	r4, [r3, #4]
            macconf->ProgrammableWatchdog = ( ( READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_PWE ) >> 8 ) > 0U ) ? ENABLE : DISABLE;
 8007f1e:	68da      	ldr	r2, [r3, #12]
            macconf->ExtendedInterPacketGapVal = READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPG ) >> 25;
 8007f20:	f3c4 6444 	ubfx	r4, r4, #25, #5
            macconf->ProgrammableWatchdog = ( ( READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_PWE ) >> 8 ) > 0U ) ? ENABLE : DISABLE;
 8007f24:	f3c2 2200 	ubfx	r2, r2, #8, #1
            macconf->ExtendedInterPacketGapVal = READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPG ) >> 25;
 8007f28:	63cc      	str	r4, [r1, #60]	@ 0x3c
            macconf->ProgrammableWatchdog = ( ( READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_PWE ) >> 8 ) > 0U ) ? ENABLE : DISABLE;
 8007f2a:	f881 2040 	strb.w	r2, [r1, #64]	@ 0x40
            macconf->WatchdogTimeout = READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_WTO );
 8007f2e:	68dc      	ldr	r4, [r3, #12]
            macconf->TransmitFlowControl = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_TFE ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8007f30:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
            macconf->WatchdogTimeout = READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_WTO );
 8007f32:	f004 040f 	and.w	r4, r4, #15
            macconf->TransmitFlowControl = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_TFE ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8007f36:	f3c2 0240 	ubfx	r2, r2, #1, #1
            macconf->WatchdogTimeout = READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_WTO );
 8007f3a:	644c      	str	r4, [r1, #68]	@ 0x44
            macconf->TransmitFlowControl = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_TFE ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8007f3c:	f881 2054 	strb.w	r2, [r1, #84]	@ 0x54
            macconf->ZeroQuantaPause = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ ) >> 7 ) == 0U ) ? ENABLE : DISABLE;
 8007f40:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007f42:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 8007f46:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8007f4a:	f881 204c 	strb.w	r2, [r1, #76]	@ 0x4c
            macconf->PauseLowThreshold = READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PLT );
 8007f4e:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
            macconf->PauseTime = ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PT ) >> 16 );
 8007f50:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
            macconf->PauseLowThreshold = READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PLT );
 8007f52:	f004 0470 	and.w	r4, r4, #112	@ 0x70
            macconf->PauseTime = ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PT ) >> 16 );
 8007f56:	0c12      	lsrs	r2, r2, #16
            macconf->PauseLowThreshold = READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PLT );
 8007f58:	650c      	str	r4, [r1, #80]	@ 0x50
            macconf->PauseTime = ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PT ) >> 16 );
 8007f5a:	648a      	str	r2, [r1, #72]	@ 0x48
            macconf->ReceiveFlowControl = ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_RFE ) > 0U ) ? ENABLE : DISABLE;
 8007f5c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007f60:	f002 0201 	and.w	r2, r2, #1
 8007f64:	f881 2056 	strb.w	r2, [r1, #86]	@ 0x56
            macconf->UnicastPausePacketDetect = ( ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_UP ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8007f68:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007f6c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8007f70:	f881 2055 	strb.w	r2, [r1, #85]	@ 0x55
            macconf->TransmitQueueMode = READ_BIT( heth->Instance->MTLTQOMR, ( ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF ) );
 8007f74:	f8d3 4d00 	ldr.w	r4, [r3, #3328]	@ 0xd00
            macconf->ReceiveQueueMode = READ_BIT( heth->Instance->MTLRQOMR, ( ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF ) );
 8007f78:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
            macconf->TransmitQueueMode = READ_BIT( heth->Instance->MTLTQOMR, ( ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF ) );
 8007f7c:	f004 0472 	and.w	r4, r4, #114	@ 0x72
            macconf->ReceiveQueueMode = READ_BIT( heth->Instance->MTLRQOMR, ( ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF ) );
 8007f80:	f002 0223 	and.w	r2, r2, #35	@ 0x23
 8007f84:	e9c1 4216 	strd	r4, r2, [r1, #88]	@ 0x58
            macconf->ForwardRxUndersizedGoodPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP ) >> 3 ) > 0U ) ? ENABLE : DISABLE;
 8007f88:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
        }
 8007f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
            macconf->ForwardRxUndersizedGoodPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP ) >> 3 ) > 0U ) ? ENABLE : DISABLE;
 8007f90:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8007f94:	f881 2062 	strb.w	r2, [r1, #98]	@ 0x62
            macconf->ForwardRxErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8007f98:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
 8007f9c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8007fa0:	f881 2061 	strb.w	r2, [r1, #97]	@ 0x61
            macconf->DropTCPIPChecksumErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF ) >> 6 ) == 0U ) ? ENABLE : DISABLE;
 8007fa4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8007fa8:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 8007fac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007fb0:	f881 3060 	strb.w	r3, [r1, #96]	@ 0x60
        }
 8007fb4:	4770      	bx	lr
                return HAL_ERROR;
 8007fb6:	2001      	movs	r0, #1
        }
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop

08007fbc <HAL_ETH_SetMACConfig>:
            if( macconf == NULL )
 8007fbc:	b131      	cbz	r1, 8007fcc <HAL_ETH_SetMACConfig+0x10>
        {
 8007fbe:	b508      	push	{r3, lr}
            if( heth->RxState == HAL_ETH_STATE_READY )
 8007fc0:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
 8007fc4:	2b10      	cmp	r3, #16
 8007fc6:	d003      	beq.n	8007fd0 <HAL_ETH_SetMACConfig+0x14>
                return HAL_ERROR;
 8007fc8:	2001      	movs	r0, #1
        }
 8007fca:	bd08      	pop	{r3, pc}
                return HAL_ERROR;
 8007fcc:	2001      	movs	r0, #1
        }
 8007fce:	4770      	bx	lr
                ETH_SetMACConfig( heth, macconf );
 8007fd0:	f7ff fb2e 	bl	8007630 <ETH_SetMACConfig>
                return HAL_OK;
 8007fd4:	2000      	movs	r0, #0
        }
 8007fd6:	bd08      	pop	{r3, pc}

08007fd8 <HAL_ETH_SetMDIOClockRange>:
        {
 8007fd8:	b538      	push	{r3, r4, r5, lr}
            tmpreg = ( heth->Instance )->MACMDIOAR;
 8007fda:	6803      	ldr	r3, [r0, #0]
        {
 8007fdc:	4605      	mov	r5, r0
            tmpreg = ( heth->Instance )->MACMDIOAR;
 8007fde:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
            hclk = HAL_RCC_GetHCLKFreq();
 8007fe2:	f003 f873 	bl	800b0cc <HAL_RCC_GetHCLKFreq>
            if( ( hclk >= 20000000U ) && ( hclk < 35000000U ) )
 8007fe6:	4b15      	ldr	r3, [pc, #84]	@ (800803c <HAL_ETH_SetMDIOClockRange+0x64>)
 8007fe8:	4a15      	ldr	r2, [pc, #84]	@ (8008040 <HAL_ETH_SetMDIOClockRange+0x68>)
            tmpreg &= ~ETH_MACMDIOAR_CR;
 8007fea:	f424 6470 	bic.w	r4, r4, #3840	@ 0xf00
            if( ( hclk >= 20000000U ) && ( hclk < 35000000U ) )
 8007fee:	4403      	add	r3, r0
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d205      	bcs.n	8008000 <HAL_ETH_SetMDIOClockRange+0x28>
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV16;
 8007ff4:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 8007ff8:	682b      	ldr	r3, [r5, #0]
 8007ffa:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
        }
 8007ffe:	bd38      	pop	{r3, r4, r5, pc}
            else if( ( hclk >= 35000000U ) && ( hclk < 60000000U ) )
 8008000:	4b10      	ldr	r3, [pc, #64]	@ (8008044 <HAL_ETH_SetMDIOClockRange+0x6c>)
 8008002:	4a11      	ldr	r2, [pc, #68]	@ (8008048 <HAL_ETH_SetMDIOClockRange+0x70>)
 8008004:	4403      	add	r3, r0
 8008006:	4293      	cmp	r3, r2
 8008008:	d805      	bhi.n	8008016 <HAL_ETH_SetMDIOClockRange+0x3e>
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV26;
 800800a:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 800800e:	682b      	ldr	r3, [r5, #0]
 8008010:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
        }
 8008014:	bd38      	pop	{r3, r4, r5, pc}
            else if( ( hclk >= 60000000U ) && ( hclk < 100000000U ) )
 8008016:	4b0d      	ldr	r3, [pc, #52]	@ (800804c <HAL_ETH_SetMDIOClockRange+0x74>)
 8008018:	4a0d      	ldr	r2, [pc, #52]	@ (8008050 <HAL_ETH_SetMDIOClockRange+0x78>)
 800801a:	4403      	add	r3, r0
 800801c:	4293      	cmp	r3, r2
 800801e:	d3eb      	bcc.n	8007ff8 <HAL_ETH_SetMDIOClockRange+0x20>
            else if( ( hclk >= 100000000U ) && ( hclk < 150000000U ) )
 8008020:	4b0c      	ldr	r3, [pc, #48]	@ (8008054 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8008022:	4a0d      	ldr	r2, [pc, #52]	@ (8008058 <HAL_ETH_SetMDIOClockRange+0x80>)
 8008024:	4403      	add	r3, r0
 8008026:	4293      	cmp	r3, r2
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 8008028:	682b      	ldr	r3, [r5, #0]
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV62;
 800802a:	bf94      	ite	ls
 800802c:	f444 7480 	orrls.w	r4, r4, #256	@ 0x100
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV102;
 8008030:	f444 6480 	orrhi.w	r4, r4, #1024	@ 0x400
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 8008034:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
        }
 8008038:	bd38      	pop	{r3, r4, r5, pc}
 800803a:	bf00      	nop
 800803c:	feced300 	.word	0xfeced300
 8008040:	00e4e1c0 	.word	0x00e4e1c0
 8008044:	fde9f140 	.word	0xfde9f140
 8008048:	017d783f 	.word	0x017d783f
 800804c:	fc6c7900 	.word	0xfc6c7900
 8008050:	02625a00 	.word	0x02625a00
 8008054:	fa0a1f00 	.word	0xfa0a1f00
 8008058:	02faf07f 	.word	0x02faf07f

0800805c <HAL_ETH_Init>:
            if( heth == NULL )
 800805c:	2800      	cmp	r0, #0
 800805e:	f000 8114 	beq.w	800828a <HAL_ETH_Init+0x22e>
                if( heth->gState == HAL_ETH_STATE_RESET )
 8008062:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
        {
 8008066:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008068:	4605      	mov	r5, r0
 800806a:	b0a5      	sub	sp, #148	@ 0x94
                if( heth->gState == HAL_ETH_STATE_RESET )
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 80b0 	beq.w	80081d2 <HAL_ETH_Init+0x176>
            __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008072:	4b87      	ldr	r3, [pc, #540]	@ (8008290 <HAL_ETH_Init+0x234>)
            heth->gState = HAL_ETH_STATE_BUSY;
 8008074:	2223      	movs	r2, #35	@ 0x23
 8008076:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
            __HAL_RCC_SYSCFG_CLK_ENABLE();
 800807a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800807e:	f042 0202 	orr.w	r2, r2, #2
 8008082:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8008086:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
            if( heth->Init.MediaInterface == HAL_ETH_MII_MODE )
 800808a:	7a28      	ldrb	r0, [r5, #8]
            __HAL_RCC_SYSCFG_CLK_ENABLE();
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	9301      	str	r3, [sp, #4]
 8008092:	9b01      	ldr	r3, [sp, #4]
            if( heth->Init.MediaInterface == HAL_ETH_MII_MODE )
 8008094:	2800      	cmp	r0, #0
 8008096:	f040 8092 	bne.w	80081be <HAL_ETH_Init+0x162>
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_RMII );
 800809a:	f002 f933 	bl	800a304 <HAL_SYSCFG_ETHInterfaceSelect>
            SET_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR );
 800809e:	682b      	ldr	r3, [r5, #0]
 80080a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	f042 0201 	orr.w	r2, r2, #1
 80080aa:	601a      	str	r2, [r3, #0]
            tickstart = HAL_GetTick();
 80080ac:	f002 f91e 	bl	800a2ec <HAL_GetTick>
 80080b0:	4606      	mov	r6, r0
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 80080b2:	e006      	b.n	80080c2 <HAL_ETH_Init+0x66>
                if( ( ( HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT ) )
 80080b4:	f002 f91a 	bl	800a2ec <HAL_GetTick>
 80080b8:	1b80      	subs	r0, r0, r6
 80080ba:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 80080be:	f200 8081 	bhi.w	80081c4 <HAL_ETH_Init+0x168>
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 80080c2:	682b      	ldr	r3, [r5, #0]
 80080c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080c8:	681c      	ldr	r4, [r3, #0]
 80080ca:	f014 0401 	ands.w	r4, r4, #1
 80080ce:	d1f1      	bne.n	80080b4 <HAL_ETH_Init+0x58>
            ETH_MAC_MDIO_ClkConfig( heth );
 80080d0:	4628      	mov	r0, r5
            macDefaultConf.ChecksumOffload = ENABLE;
 80080d2:	2701      	movs	r7, #1
            ETH_MAC_MDIO_ClkConfig( heth );
 80080d4:	f7ff ff80 	bl	8007fd8 <HAL_ETH_SetMDIOClockRange>
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 80080d8:	f002 fff8 	bl	800b0cc <HAL_RCC_GetHCLKFreq>
 80080dc:	4b6d      	ldr	r3, [pc, #436]	@ (8008294 <HAL_ETH_Init+0x238>)
 80080de:	682e      	ldr	r6, [r5, #0]
            ETH_SetMACConfig( heth, &macDefaultConf );
 80080e0:	a90b      	add	r1, sp, #44	@ 0x2c
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 80080e2:	fba3 2300 	umull	r2, r3, r3, r0
            ETH_SetMACConfig( heth, &macDefaultConf );
 80080e6:	4628      	mov	r0, r5
            macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80080e8:	9414      	str	r4, [sp, #80]	@ 0x50
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 80080ea:	0c9b      	lsrs	r3, r3, #18
            macDefaultConf.DeferralCheck = DISABLE;
 80080ec:	f88d 4054 	strb.w	r4, [sp, #84]	@ 0x54
            macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80080f0:	f88d 4064 	strb.w	r4, [sp, #100]	@ 0x64
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 80080f4:	3b01      	subs	r3, #1
            macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80080f6:	941a      	str	r4, [sp, #104]	@ 0x68
            macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80080f8:	f88d 408e 	strb.w	r4, [sp, #142]	@ 0x8e
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 80080fc:	f8c6 30dc 	str.w	r3, [r6, #220]	@ 0xdc
            macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8008100:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
            macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8008104:	940d      	str	r4, [sp, #52]	@ 0x34
            macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8008106:	9311      	str	r3, [sp, #68]	@ 0x44
            macDefaultConf.GiantPacketSizeLimit = 0x618;
 8008108:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
            macDefaultConf.JumboPacket = DISABLE;
 800810c:	f88d 403e 	strb.w	r4, [sp, #62]	@ 0x3e
            macDefaultConf.GiantPacketSizeLimit = 0x618;
 8008110:	9318      	str	r3, [sp, #96]	@ 0x60
            macDefaultConf.LoopbackMode = DISABLE;
 8008112:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
            macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8008116:	941f      	str	r4, [sp, #124]	@ 0x7c
            macDefaultConf.LoopbackMode = DISABLE;
 8008118:	9312      	str	r3, [sp, #72]	@ 0x48
            macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800811a:	2320      	movs	r3, #32
            macDefaultConf.PauseTime = 0x0;
 800811c:	941d      	str	r4, [sp, #116]	@ 0x74
            macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800811e:	9322      	str	r3, [sp, #136]	@ 0x88
            macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8008120:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
            macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8008124:	9416      	str	r4, [sp, #88]	@ 0x58
            macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8008126:	930b      	str	r3, [sp, #44]	@ 0x2c
            macDefaultConf.Speed = ETH_SPEED_100M;
 8008128:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
            macDefaultConf.ProgrammableWatchdog = DISABLE;
 800812c:	f88d 406c 	strb.w	r4, [sp, #108]	@ 0x6c
            macDefaultConf.Speed = ETH_SPEED_100M;
 8008130:	9310      	str	r3, [sp, #64]	@ 0x40
            macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8008132:	4b59      	ldr	r3, [pc, #356]	@ (8008298 <HAL_ETH_Init+0x23c>)
            macDefaultConf.ReceiveFlowControl = DISABLE;
 8008134:	f88d 4082 	strb.w	r4, [sp, #130]	@ 0x82
            macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8008138:	930e      	str	r3, [sp, #56]	@ 0x38
            macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800813a:	2302      	movs	r3, #2
            macDefaultConf.TransmitFlowControl = DISABLE;
 800813c:	f8ad 4080 	strh.w	r4, [sp, #128]	@ 0x80
            macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8008140:	9321      	str	r3, [sp, #132]	@ 0x84
            macDefaultConf.Watchdog = ENABLE;
 8008142:	f240 1301 	movw	r3, #257	@ 0x101
            macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8008146:	f8ad 405c 	strh.w	r4, [sp, #92]	@ 0x5c
            macDefaultConf.WatchdogTimeout = ETH_MACWTR_WTO_2KB;
 800814a:	941c      	str	r4, [sp, #112]	@ 0x70
            macDefaultConf.Watchdog = ENABLE;
 800814c:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
            macDefaultConf.ChecksumOffload = ENABLE;
 8008150:	f88d 7030 	strb.w	r7, [sp, #48]	@ 0x30
            macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8008154:	f88d 705e 	strb.w	r7, [sp, #94]	@ 0x5e
            macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8008158:	f8ad 708c 	strh.w	r7, [sp, #140]	@ 0x8c
            macDefaultConf.RetryTransmission = ENABLE;
 800815c:	f88d 704c 	strb.w	r7, [sp, #76]	@ 0x4c
            macDefaultConf.ZeroQuantaPause = ENABLE;
 8008160:	f88d 7078 	strb.w	r7, [sp, #120]	@ 0x78
            ETH_SetMACConfig( heth, &macDefaultConf );
 8008164:	f7ff fa64 	bl	8007630 <ETH_SetMACConfig>
            dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008168:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
            dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800816c:	9402      	str	r4, [sp, #8]
            dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800816e:	f8ad 4014 	strh.w	r4, [sp, #20]
            ETH_SetDMAConfig( heth, &dmaDefaultConf );
 8008172:	a902      	add	r1, sp, #8
            dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008174:	9308      	str	r3, [sp, #32]
            ETH_SetDMAConfig( heth, &dmaDefaultConf );
 8008176:	4628      	mov	r0, r5
            dmaDefaultConf.SecondPacketOperate = DISABLE;
 8008178:	f88d 401c 	strb.w	r4, [sp, #28]
            dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800817c:	9306      	str	r3, [sp, #24]
            dmaDefaultConf.MaximumSegmentSize = 536;
 800817e:	f44f 7306 	mov.w	r3, #536	@ 0x218
            dmaDefaultConf.FlushRxPacket = DISABLE;
 8008182:	f8ad 4024 	strh.w	r4, [sp, #36]	@ 0x24
            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT );
 8008186:	f506 5480 	add.w	r4, r6, #4096	@ 0x1000
            dmaDefaultConf.MaximumSegmentSize = 536;
 800818a:	930a      	str	r3, [sp, #40]	@ 0x28
            dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800818c:	f88d 700c 	strb.w	r7, [sp, #12]
            dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8008190:	9704      	str	r7, [sp, #16]
            ETH_SetDMAConfig( heth, &dmaDefaultConf );
 8008192:	f7ff fb09 	bl	80077a8 <ETH_SetDMAConfig>
            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT );
 8008196:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 800819a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800819e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80081a2:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
            if( ( heth->Init.RxBuffLen % 0x4U ) != 0x0U )
 80081a6:	696b      	ldr	r3, [r5, #20]
 80081a8:	f013 0203 	ands.w	r2, r3, #3
 80081ac:	d014      	beq.n	80081d8 <HAL_ETH_Init+0x17c>
        heth->gState = ulState;
 80081ae:	23e0      	movs	r3, #224	@ 0xe0
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80081b0:	f8c5 7098 	str.w	r7, [r5, #152]	@ 0x98
        heth->gState = ulState;
 80081b4:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
                return HAL_ERROR;
 80081b8:	2001      	movs	r0, #1
        }
 80081ba:	b025      	add	sp, #148	@ 0x94
 80081bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_RMII );
 80081be:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80081c2:	e76a      	b.n	800809a <HAL_ETH_Init+0x3e>
                    heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80081c4:	2204      	movs	r2, #4
        heth->gState = ulState;
 80081c6:	23e0      	movs	r3, #224	@ 0xe0
                    heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80081c8:	f8c5 2098 	str.w	r2, [r5, #152]	@ 0x98
        heth->gState = ulState;
 80081cc:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
                    return HAL_ERROR;
 80081d0:	e7f2      	b.n	80081b8 <HAL_ETH_Init+0x15c>
                    HAL_ETH_MspInit( heth );
 80081d2:	f7f8 fe47 	bl	8000e64 <HAL_ETH_MspInit>
 80081d6:	e74c      	b.n	8008072 <HAL_ETH_Init+0x16>
                MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ( ( heth->Init.RxBuffLen ) << 1 ) );
 80081d8:	f8d4 0108 	ldr.w	r0, [r4, #264]	@ 0x108
 80081dc:	492f      	ldr	r1, [pc, #188]	@ (800829c <HAL_ETH_Init+0x240>)
 80081de:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80081e2:	4001      	ands	r1, r0
 80081e4:	f50c 70a8 	add.w	r0, ip, #336	@ 0x150
 80081e8:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
                dmatxdesc = heth->Init.TxDesc + i;
 80081ec:	4663      	mov	r3, ip
                MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ( ( heth->Init.RxBuffLen ) << 1 ) );
 80081ee:	f8c4 1108 	str.w	r1, [r4, #264]	@ 0x108
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 80081f2:	f105 0114 	add.w	r1, r5, #20
                WRITE_REG( dmatxdesc->DESC0, 0x0 );
 80081f6:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmatxdesc->DESC1, 0x0 );
 80081f8:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmatxdesc->DESC2, 0x0 );
 80081fa:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmatxdesc->DESC3, 0x0 );
 80081fc:	60da      	str	r2, [r3, #12]
                WRITE_REG( heth->TxDescList.TxDesc[ i ], ( uint32_t ) dmatxdesc );
 80081fe:	f841 3f04 	str.w	r3, [r1, #4]!
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 8008202:	3318      	adds	r3, #24
 8008204:	4298      	cmp	r0, r3
 8008206:	d1f6      	bne.n	80081f6 <HAL_ETH_Init+0x19a>
                dmarxdesc = heth->Init.RxDesc + i;
 8008208:	692f      	ldr	r7, [r5, #16]
            WRITE_REG( heth->Instance->DMACTDRLR, ( ETH_TX_DESC_CNT - 1 ) );
 800820a:	230d      	movs	r3, #13
 800820c:	f105 0154 	add.w	r1, r5, #84	@ 0x54
 8008210:	f105 0074 	add.w	r0, r5, #116	@ 0x74
            heth->TxDescList.TailTxDesc = 0;
 8008214:	e9c5 2214 	strd	r2, r2, [r5, #80]	@ 0x50
            WRITE_REG( heth->Instance->DMACTDRLR, ( ETH_TX_DESC_CNT - 1 ) );
 8008218:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
                WRITE_REG( dmarxdesc->DESC0, 0x0 );
 800821c:	2200      	movs	r2, #0
                dmarxdesc = heth->Init.RxDesc + i;
 800821e:	463b      	mov	r3, r7
            WRITE_REG( heth->Instance->DMACTDLAR, ( uint32_t ) heth->Init.TxDesc );
 8008220:	f8c4 c114 	str.w	ip, [r4, #276]	@ 0x114
            WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) heth->Init.TxDesc );
 8008224:	f8c4 c120 	str.w	ip, [r4, #288]	@ 0x120
                WRITE_REG( dmarxdesc->DESC0, 0x0 );
 8008228:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmarxdesc->BackupAddr0, 0x0 );
 800822a:	611a      	str	r2, [r3, #16]
                WRITE_REG( dmarxdesc->DESC1, 0x0 );
 800822c:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmarxdesc->BackupAddr1, 0x0 );
 800822e:	615a      	str	r2, [r3, #20]
                WRITE_REG( dmarxdesc->DESC2, 0x0 );
 8008230:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmarxdesc->DESC3, 0x0 );
 8008232:	60da      	str	r2, [r3, #12]
                WRITE_REG( heth->RxDescList.RxDesc[ i ], ( uint32_t ) dmarxdesc );
 8008234:	f841 3f04 	str.w	r3, [r1, #4]!
            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 8008238:	4288      	cmp	r0, r1
 800823a:	f103 0318 	add.w	r3, r3, #24
 800823e:	d1f3      	bne.n	8008228 <HAL_ETH_Init+0x1cc>
            WRITE_REG( heth->Instance->DMACRDRLR, ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) );
 8008240:	2307      	movs	r3, #7
            WRITE_REG( heth->RxDescList.AppDescNbr, 0 );
 8008242:	f8c5 2080 	str.w	r2, [r5, #128]	@ 0x80
            heth->Instance->MACA0HR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 5 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 4 ] );
 8008246:	6869      	ldr	r1, [r5, #4]
            return HAL_OK;
 8008248:	2000      	movs	r0, #0
            WRITE_REG( heth->RxDescList.FirstAppDesc, 0 );
 800824a:	e9c5 221e 	strd	r2, r2, [r5, #120]	@ 0x78
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 800824e:	e9c5 2221 	strd	r2, r2, [r5, #132]	@ 0x84
            WRITE_REG( heth->Instance->DMACRDRLR, ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) );
 8008252:	f8c4 3130 	str.w	r3, [r4, #304]	@ 0x130
            WRITE_REG( heth->Instance->DMACRDLAR, ( uint32_t ) heth->Init.RxDesc );
 8008256:	f8c4 711c 	str.w	r7, [r4, #284]	@ 0x11c
            WRITE_REG( heth->Instance->DMACRDTPR, ( ( uint32_t ) ( heth->Init.RxDesc + ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) ) ) );
 800825a:	37a8      	adds	r7, #168	@ 0xa8
 800825c:	f8c4 7128 	str.w	r7, [r4, #296]	@ 0x128
            heth->Instance->MACA0HR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 5 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 4 ] );
 8008260:	888b      	ldrh	r3, [r1, #4]
 8008262:	f8c6 3300 	str.w	r3, [r6, #768]	@ 0x300
            heth->gState = HAL_ETH_STATE_READY;
 8008266:	2310      	movs	r3, #16
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8008268:	6809      	ldr	r1, [r1, #0]
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 800826a:	f8c6 1304 	str.w	r1, [r6, #772]	@ 0x304
            heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800826e:	f8c5 2098 	str.w	r2, [r5, #152]	@ 0x98
            heth->Instance->MMCRIMR =
 8008272:	490b      	ldr	r1, [pc, #44]	@ (80082a0 <HAL_ETH_Init+0x244>)
            heth->Instance->MMCTIMR =
 8008274:	4a0b      	ldr	r2, [pc, #44]	@ (80082a4 <HAL_ETH_Init+0x248>)
            heth->gState = HAL_ETH_STATE_READY;
 8008276:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
            heth->RxState = HAL_ETH_STATE_READY;
 800827a:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
            heth->Instance->MMCRIMR =
 800827e:	f8c6 170c 	str.w	r1, [r6, #1804]	@ 0x70c
            heth->Instance->MMCTIMR =
 8008282:	f8c6 2710 	str.w	r2, [r6, #1808]	@ 0x710
        }
 8008286:	b025      	add	sp, #148	@ 0x94
 8008288:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return HAL_ERROR;
 800828a:	2001      	movs	r0, #1
        }
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	58024400 	.word	0x58024400
 8008294:	431bde83 	.word	0x431bde83
 8008298:	01010000 	.word	0x01010000
 800829c:	ffff8001 	.word	0xffff8001
 80082a0:	0c020060 	.word	0x0c020060
 80082a4:	0c20c000 	.word	0x0c20c000

080082a8 <ETH_Clear_Tx_Descriptors>:
        {
 80082a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082ac:	4f1a      	ldr	r7, [pc, #104]	@ (8008318 <ETH_Clear_Tx_Descriptors+0x70>)
                xDMATxDescriptor->DESC0 = ( uint32_t ) 0u;
 80082ae:	f04f 0800 	mov.w	r8, #0
                        configASSERT( pxNetworkBuffer != NULL );
 80082b2:	f8df 9068 	ldr.w	r9, [pc, #104]	@ 800831c <ETH_Clear_Tx_Descriptors+0x74>
        {
 80082b6:	4606      	mov	r6, r0
            uint32_t ulTailTxDesc = heth->TxDescList.TailTxDesc;
 80082b8:	6d45      	ldr	r5, [r0, #84]	@ 0x54
            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 80082ba:	e012      	b.n	80082e2 <ETH_Clear_Tx_Descriptors+0x3a>
                            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80082bc:	f7fe fba4 	bl	8006a08 <vReleaseNetworkBufferAndDescriptor>
                INCR_TX_DESC_INDEX( ulTailTxDesc, 1U );
 80082c0:	1c6a      	adds	r2, r5, #1
                xDMATxDescriptor->DESC0 = ( uint32_t ) 0u;
 80082c2:	f8c4 8000 	str.w	r8, [r4]
                INCR_TX_DESC_INDEX( ulTailTxDesc, 1U );
 80082c6:	2a0d      	cmp	r2, #13
 80082c8:	bf88      	it	hi
 80082ca:	f1a5 020d 	subhi.w	r2, r5, #13
                heth->TxDescList.TailTxDesc = ulTailTxDesc;
 80082ce:	6572      	str	r2, [r6, #84]	@ 0x54
 80082d0:	f3bf 8f4f 	dsb	sy
                xSemaphoreGive( xTXDescriptorSemaphore );
 80082d4:	2300      	movs	r3, #0
 80082d6:	4615      	mov	r5, r2
 80082d8:	6838      	ldr	r0, [r7, #0]
 80082da:	461a      	mov	r2, r3
 80082dc:	4619      	mov	r1, r3
 80082de:	f000 fa9d 	bl	800881c <xQueueGenericSend>
            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 80082e2:	6838      	ldr	r0, [r7, #0]
 80082e4:	f000 fcf6 	bl	8008cd4 <uxQueueMessagesWaiting>
 80082e8:	280e      	cmp	r0, #14
                ETH_DMADescTypeDef * xDMATxDescriptor = ( ETH_DMADescTypeDef * ) heth->TxDescList.TxDesc[ ulTailTxDesc ];
 80082ea:	f105 0306 	add.w	r3, r5, #6
            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 80082ee:	d010      	beq.n	8008312 <ETH_Clear_Tx_Descriptors+0x6a>
                ETH_DMADescTypeDef * xDMATxDescriptor = ( ETH_DMADescTypeDef * ) heth->TxDescList.TxDesc[ ulTailTxDesc ];
 80082f0:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
                if( ( xDMATxDescriptor->DESC3 & ETH_DMATXNDESCRF_OWN ) != 0 )
 80082f4:	68e3      	ldr	r3, [r4, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	db0b      	blt.n	8008312 <ETH_Clear_Tx_Descriptors+0x6a>
                        ucPayLoad = ( uint8_t * ) xDMATxDescriptor->DESC0;
 80082fa:	6820      	ldr	r0, [r4, #0]
                        if( ucPayLoad == NULL )
 80082fc:	b148      	cbz	r0, 8008312 <ETH_Clear_Tx_Descriptors+0x6a>
                        pxNetworkBuffer = pxPacketBuffer_to_NetworkBuffer( ucPayLoad );
 80082fe:	f7f9 fd53 	bl	8001da8 <pxPacketBuffer_to_NetworkBuffer>
                        configASSERT( pxNetworkBuffer != NULL );
 8008302:	2800      	cmp	r0, #0
 8008304:	d1da      	bne.n	80082bc <ETH_Clear_Tx_Descriptors+0x14>
 8008306:	f640 3104 	movw	r1, #2820	@ 0xb04
 800830a:	4648      	mov	r0, r9
 800830c:	f7f8 fcf4 	bl	8000cf8 <vAssertCalled>
                        if( pxNetworkBuffer != NULL )
 8008310:	e7d6      	b.n	80082c0 <ETH_Clear_Tx_Descriptors+0x18>
        }
 8008312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008316:	bf00      	nop
 8008318:	20000e30 	.word	0x20000e30
 800831c:	080116c8 	.word	0x080116c8

08008320 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008320:	b510      	push	{r4, lr}
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8008322:	201c      	movs	r0, #28
 8008324:	f001 fe40 	bl	8009fa8 <pvPortMalloc>

		if( pxEventBits != NULL )
 8008328:	4604      	mov	r4, r0
 800832a:	b120      	cbz	r0, 8008336 <xEventGroupCreate+0x16>
		{
			pxEventBits->uxEventBits = 0;
 800832c:	2300      	movs	r3, #0
 800832e:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008332:	f000 f921 	bl	8008578 <vListInitialise>
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
	}
 8008336:	4620      	mov	r0, r4
 8008338:	bd10      	pop	{r4, pc}
 800833a:	bf00      	nop

0800833c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800833c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008340:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008344:	460c      	mov	r4, r1
 8008346:	4690      	mov	r8, r2
 8008348:	461f      	mov	r7, r3
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800834a:	4606      	mov	r6, r0
 800834c:	2800      	cmp	r0, #0
 800834e:	d063      	beq.n	8008418 <xEventGroupWaitBits+0xdc>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008350:	f1b4 7f80 	cmp.w	r4, #16777216	@ 0x1000000
 8008354:	d254      	bcs.n	8008400 <xEventGroupWaitBits+0xc4>
	configASSERT( uxBitsToWaitFor != 0 );
 8008356:	b924      	cbnz	r4, 8008362 <xEventGroupWaitBits+0x26>
 8008358:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 800835c:	483d      	ldr	r0, [pc, #244]	@ (8008454 <xEventGroupWaitBits+0x118>)
 800835e:	f7f8 fccb 	bl	8000cf8 <vAssertCalled>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008362:	f001 f9ff 	bl	8009764 <xTaskGetSchedulerState>
 8008366:	b910      	cbnz	r0, 800836e <xEventGroupWaitBits+0x32>
 8008368:	f1b9 0f00 	cmp.w	r9, #0
 800836c:	d136      	bne.n	80083dc <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800836e:	f000 fec5 	bl	80090fc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8008372:	6835      	ldr	r5, [r6, #0]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 8008374:	b94f      	cbnz	r7, 800838a <xEventGroupWaitBits+0x4e>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8008376:	422c      	tst	r4, r5
 8008378:	d13b      	bne.n	80083f2 <xEventGroupWaitBits+0xb6>
		else if( xTicksToWait == ( TickType_t ) 0 )
 800837a:	f1b9 0f00 	cmp.w	r9, #0
 800837e:	d145      	bne.n	800840c <xEventGroupWaitBits+0xd0>
	xAlreadyYielded = xTaskResumeAll();
 8008380:	f000 ff9a 	bl	80092b8 <xTaskResumeAll>
}
 8008384:	4628      	mov	r0, r5
 8008386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800838a:	ea34 0305 	bics.w	r3, r4, r5
 800838e:	d030      	beq.n	80083f2 <xEventGroupWaitBits+0xb6>
		else if( xTicksToWait == ( TickType_t ) 0 )
 8008390:	f1b9 0f00 	cmp.w	r9, #0
 8008394:	d0f4      	beq.n	8008380 <xEventGroupWaitBits+0x44>
			if( xClearOnExit != pdFALSE )
 8008396:	f1b8 0100 	subs.w	r1, r8, #0
 800839a:	bf18      	it	ne
 800839c:	2101      	movne	r1, #1
 800839e:	0609      	lsls	r1, r1, #24
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80083a0:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80083a4:	464a      	mov	r2, r9
 80083a6:	4321      	orrs	r1, r4
 80083a8:	1d30      	adds	r0, r6, #4
 80083aa:	f001 f8ad 	bl	8009508 <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 80083ae:	f000 ff83 	bl	80092b8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80083b2:	b948      	cbnz	r0, 80083c8 <xEventGroupWaitBits+0x8c>
			portYIELD_WITHIN_API();
 80083b4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80083b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083bc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 80083c8:	f001 fac8 	bl	800995c <uxTaskResetEventItemValue>
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80083cc:	0183      	lsls	r3, r0, #6
		uxReturn = uxTaskResetEventItemValue();
 80083ce:	4605      	mov	r5, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80083d0:	d528      	bpl.n	8008424 <xEventGroupWaitBits+0xe8>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80083d2:	f025 457f 	bic.w	r5, r5, #4278190080	@ 0xff000000
}
 80083d6:	4628      	mov	r0, r5
 80083d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083dc:	f240 1145 	movw	r1, #325	@ 0x145
 80083e0:	481c      	ldr	r0, [pc, #112]	@ (8008454 <xEventGroupWaitBits+0x118>)
 80083e2:	f7f8 fc89 	bl	8000cf8 <vAssertCalled>
	vTaskSuspendAll();
 80083e6:	f000 fe89 	bl	80090fc <vTaskSuspendAll>
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80083ea:	6835      	ldr	r5, [r6, #0]
	if( xWaitForAllBits == pdFALSE )
 80083ec:	bb6f      	cbnz	r7, 800844a <xEventGroupWaitBits+0x10e>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80083ee:	4225      	tst	r5, r4
 80083f0:	d00c      	beq.n	800840c <xEventGroupWaitBits+0xd0>
			if( xClearOnExit != pdFALSE )
 80083f2:	f1b8 0f00 	cmp.w	r8, #0
 80083f6:	d0c3      	beq.n	8008380 <xEventGroupWaitBits+0x44>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80083f8:	ea25 0404 	bic.w	r4, r5, r4
 80083fc:	6034      	str	r4, [r6, #0]
 80083fe:	e7bf      	b.n	8008380 <xEventGroupWaitBits+0x44>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008400:	f240 1141 	movw	r1, #321	@ 0x141
 8008404:	4813      	ldr	r0, [pc, #76]	@ (8008454 <xEventGroupWaitBits+0x118>)
 8008406:	f7f8 fc77 	bl	8000cf8 <vAssertCalled>
	configASSERT( uxBitsToWaitFor != 0 );
 800840a:	e7aa      	b.n	8008362 <xEventGroupWaitBits+0x26>
			if( xClearOnExit != pdFALSE )
 800840c:	f1b8 0100 	subs.w	r1, r8, #0
 8008410:	bf18      	it	ne
 8008412:	2101      	movne	r1, #1
 8008414:	0609      	lsls	r1, r1, #24
 8008416:	e7c5      	b.n	80083a4 <xEventGroupWaitBits+0x68>
	configASSERT( xEventGroup );
 8008418:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 800841c:	480d      	ldr	r0, [pc, #52]	@ (8008454 <xEventGroupWaitBits+0x118>)
 800841e:	f7f8 fc6b 	bl	8000cf8 <vAssertCalled>
 8008422:	e795      	b.n	8008350 <xEventGroupWaitBits+0x14>
			taskENTER_CRITICAL();
 8008424:	f001 fc6e 	bl	8009d04 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 8008428:	6835      	ldr	r5, [r6, #0]
	if( xWaitForAllBits == pdFALSE )
 800842a:	b957      	cbnz	r7, 8008442 <xEventGroupWaitBits+0x106>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800842c:	422c      	tst	r4, r5
 800842e:	d005      	beq.n	800843c <xEventGroupWaitBits+0x100>
					if( xClearOnExit != pdFALSE )
 8008430:	f1b8 0f00 	cmp.w	r8, #0
 8008434:	d002      	beq.n	800843c <xEventGroupWaitBits+0x100>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008436:	ea25 0404 	bic.w	r4, r5, r4
 800843a:	6034      	str	r4, [r6, #0]
			taskEXIT_CRITICAL();
 800843c:	f001 fc84 	bl	8009d48 <vPortExitCritical>
 8008440:	e7c7      	b.n	80083d2 <xEventGroupWaitBits+0x96>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8008442:	ea34 0305 	bics.w	r3, r4, r5
 8008446:	d1f9      	bne.n	800843c <xEventGroupWaitBits+0x100>
 8008448:	e7f2      	b.n	8008430 <xEventGroupWaitBits+0xf4>
 800844a:	ea34 0305 	bics.w	r3, r4, r5
 800844e:	d1a2      	bne.n	8008396 <xEventGroupWaitBits+0x5a>
 8008450:	e7cf      	b.n	80083f2 <xEventGroupWaitBits+0xb6>
 8008452:	bf00      	nop
 8008454:	08011724 	.word	0x08011724

08008458 <xEventGroupClearBits>:
{
 8008458:	b570      	push	{r4, r5, r6, lr}
	configASSERT( xEventGroup );
 800845a:	4605      	mov	r5, r0
{
 800845c:	460c      	mov	r4, r1
	configASSERT( xEventGroup );
 800845e:	b190      	cbz	r0, 8008486 <xEventGroupClearBits+0x2e>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008460:	f1b4 7f80 	cmp.w	r4, #16777216	@ 0x1000000
 8008464:	d209      	bcs.n	800847a <xEventGroupClearBits+0x22>
	taskENTER_CRITICAL();
 8008466:	f001 fc4d 	bl	8009d04 <vPortEnterCritical>
		uxReturn = pxEventBits->uxEventBits;
 800846a:	682e      	ldr	r6, [r5, #0]
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800846c:	ea26 0404 	bic.w	r4, r6, r4
 8008470:	602c      	str	r4, [r5, #0]
	taskEXIT_CRITICAL();
 8008472:	f001 fc69 	bl	8009d48 <vPortExitCritical>
}
 8008476:	4630      	mov	r0, r6
 8008478:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800847a:	f240 11d5 	movw	r1, #469	@ 0x1d5
 800847e:	4805      	ldr	r0, [pc, #20]	@ (8008494 <xEventGroupClearBits+0x3c>)
 8008480:	f7f8 fc3a 	bl	8000cf8 <vAssertCalled>
 8008484:	e7ef      	b.n	8008466 <xEventGroupClearBits+0xe>
	configASSERT( xEventGroup );
 8008486:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 800848a:	4802      	ldr	r0, [pc, #8]	@ (8008494 <xEventGroupClearBits+0x3c>)
 800848c:	f7f8 fc34 	bl	8000cf8 <vAssertCalled>
 8008490:	e7e6      	b.n	8008460 <xEventGroupClearBits+0x8>
 8008492:	bf00      	nop
 8008494:	08011724 	.word	0x08011724

08008498 <xEventGroupSetBits>:
{
 8008498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( xEventGroup );
 800849c:	4607      	mov	r7, r0
{
 800849e:	460d      	mov	r5, r1
	configASSERT( xEventGroup );
 80084a0:	2800      	cmp	r0, #0
 80084a2:	d037      	beq.n	8008514 <xEventGroupSetBits+0x7c>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80084a4:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
 80084a8:	d22e      	bcs.n	8008508 <xEventGroupSetBits+0x70>
	vTaskSuspendAll();
 80084aa:	f000 fe27 	bl	80090fc <vTaskSuspendAll>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084ae:	f107 090c 	add.w	r9, r7, #12
		pxEventBits->uxEventBits |= uxBitsToSet;
 80084b2:	683b      	ldr	r3, [r7, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
 80084b4:	693c      	ldr	r4, [r7, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 80084b6:	432b      	orrs	r3, r5
		while( pxListItem != pxListEnd )
 80084b8:	45a1      	cmp	r9, r4
		pxEventBits->uxEventBits |= uxBitsToSet;
 80084ba:	603b      	str	r3, [r7, #0]
		while( pxListItem != pxListEnd )
 80084bc:	d01e      	beq.n	80084fc <xEventGroupSetBits+0x64>
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80084be:	f04f 0800 	mov.w	r8, #0
 80084c2:	e009      	b.n	80084d8 <xEventGroupSetBits+0x40>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80084c4:	b136      	cbz	r6, 80084d4 <xEventGroupSetBits+0x3c>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80084c6:	01d3      	lsls	r3, r2, #7
					uxBitsToClear |= uxBitsWaitedFor;
 80084c8:	bf48      	it	mi
 80084ca:	ea48 0805 	orrmi.w	r8, r8, r5
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80084ce:	f001 f88b 	bl	80095e8 <vTaskRemoveFromUnorderedEventList>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80084d2:	683b      	ldr	r3, [r7, #0]
		while( pxListItem != pxListEnd )
 80084d4:	45a1      	cmp	r9, r4
 80084d6:	d00f      	beq.n	80084f8 <xEventGroupSetBits+0x60>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80084d8:	4620      	mov	r0, r4
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80084da:	f043 7100 	orr.w	r1, r3, #33554432	@ 0x2000000
			pxNext = listGET_NEXT( pxListItem );
 80084de:	6864      	ldr	r4, [r4, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80084e0:	6802      	ldr	r2, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80084e2:	f022 457f 	bic.w	r5, r2, #4278190080	@ 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80084e6:	f012 6f80 	tst.w	r2, #67108864	@ 0x4000000
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80084ea:	ea05 0603 	and.w	r6, r5, r3
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80084ee:	d0e9      	beq.n	80084c4 <xEventGroupSetBits+0x2c>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80084f0:	42b5      	cmp	r5, r6
 80084f2:	d0e8      	beq.n	80084c6 <xEventGroupSetBits+0x2e>
		while( pxListItem != pxListEnd )
 80084f4:	45a1      	cmp	r9, r4
 80084f6:	d1ef      	bne.n	80084d8 <xEventGroupSetBits+0x40>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80084f8:	ea23 0308 	bic.w	r3, r3, r8
 80084fc:	603b      	str	r3, [r7, #0]
	( void ) xTaskResumeAll();
 80084fe:	f000 fedb 	bl	80092b8 <xTaskResumeAll>
}
 8008502:	6838      	ldr	r0, [r7, #0]
 8008504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008508:	f240 2113 	movw	r1, #531	@ 0x213
 800850c:	4804      	ldr	r0, [pc, #16]	@ (8008520 <xEventGroupSetBits+0x88>)
 800850e:	f7f8 fbf3 	bl	8000cf8 <vAssertCalled>
 8008512:	e7ca      	b.n	80084aa <xEventGroupSetBits+0x12>
	configASSERT( xEventGroup );
 8008514:	f240 2112 	movw	r1, #530	@ 0x212
 8008518:	4801      	ldr	r0, [pc, #4]	@ (8008520 <xEventGroupSetBits+0x88>)
 800851a:	f7f8 fbed 	bl	8000cf8 <vAssertCalled>
 800851e:	e7c1      	b.n	80084a4 <xEventGroupSetBits+0xc>
 8008520:	08011724 	.word	0x08011724

08008524 <vEventGroupDelete>:
{
 8008524:	b570      	push	{r4, r5, r6, lr}
 8008526:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8008528:	f000 fde8 	bl	80090fc <vTaskSuspendAll>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800852c:	6863      	ldr	r3, [r4, #4]
 800852e:	b1cb      	cbz	r3, 8008564 <vEventGroupDelete+0x40>
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8008530:	f104 050c 	add.w	r5, r4, #12
 8008534:	4e0f      	ldr	r6, [pc, #60]	@ (8008574 <vEventGroupDelete+0x50>)
 8008536:	e005      	b.n	8008544 <vEventGroupDelete+0x20>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8008538:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800853c:	f001 f854 	bl	80095e8 <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8008540:	6863      	ldr	r3, [r4, #4]
 8008542:	b17b      	cbz	r3, 8008564 <vEventGroupDelete+0x40>
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8008544:	6920      	ldr	r0, [r4, #16]
 8008546:	42a8      	cmp	r0, r5
 8008548:	d1f6      	bne.n	8008538 <vEventGroupDelete+0x14>
 800854a:	f240 2172 	movw	r1, #626	@ 0x272
 800854e:	4630      	mov	r0, r6
 8008550:	f7f8 fbd2 	bl	8000cf8 <vAssertCalled>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8008554:	6920      	ldr	r0, [r4, #16]
 8008556:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800855a:	f001 f845 	bl	80095e8 <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800855e:	6863      	ldr	r3, [r4, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1ef      	bne.n	8008544 <vEventGroupDelete+0x20>
			vPortFree( pxEventBits );
 8008564:	4620      	mov	r0, r4
 8008566:	f001 fd8b 	bl	800a080 <vPortFree>
}
 800856a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	( void ) xTaskResumeAll();
 800856e:	f000 bea3 	b.w	80092b8 <xTaskResumeAll>
 8008572:	bf00      	nop
 8008574:	08011724 	.word	0x08011724

08008578 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008578:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800857c:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008580:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008582:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008584:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008586:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008588:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop

08008590 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008590:	2300      	movs	r3, #0
 8008592:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop

08008598 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8008598:	6803      	ldr	r3, [r0, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800859a:	6842      	ldr	r2, [r0, #4]
	( pxList->uxNumberOfItems )++;
 800859c:	3301      	adds	r3, #1
{
 800859e:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085a0:	6894      	ldr	r4, [r2, #8]
 80085a2:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80085a6:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80085a8:	6091      	str	r1, [r2, #8]
}
 80085aa:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80085ae:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80085b0:	6003      	str	r3, [r0, #0]
}
 80085b2:	4770      	bx	lr

080085b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085b4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80085b6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085b8:	1c6b      	adds	r3, r5, #1
 80085ba:	d010      	beq.n	80085de <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085bc:	f100 0308 	add.w	r3, r0, #8
 80085c0:	461c      	mov	r4, r3
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	42aa      	cmp	r2, r5
 80085c8:	d9fa      	bls.n	80085c0 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80085ca:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80085cc:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80085ce:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085d0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085d2:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80085d4:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 80085d6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80085d8:	6002      	str	r2, [r0, #0]
}
 80085da:	bc30      	pop	{r4, r5}
 80085dc:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80085de:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80085e0:	6863      	ldr	r3, [r4, #4]
 80085e2:	e7f2      	b.n	80085ca <vListInsert+0x16>

080085e4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80085e4:	6903      	ldr	r3, [r0, #16]
{
 80085e6:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80085e8:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80085ea:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 80085ee:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 80085f0:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80085f4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80085f6:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 80085f8:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80085fc:	bf08      	it	eq
 80085fe:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8008600:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 8008602:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008604:	3a01      	subs	r2, #1
 8008606:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8008608:	6818      	ldr	r0, [r3, #0]
}
 800860a:	4770      	bx	lr

0800860c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800860c:	b570      	push	{r4, r5, r6, lr}
 800860e:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008610:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8008612:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008614:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008616:	b92a      	cbnz	r2, 8008624 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008618:	6806      	ldr	r6, [r0, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800861a:	3501      	adds	r5, #1
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800861c:	b34e      	cbz	r6, 8008672 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800861e:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008620:	63a5      	str	r5, [r4, #56]	@ 0x38

	return xReturn;
}
 8008622:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8008624:	b97e      	cbnz	r6, 8008646 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008626:	6840      	ldr	r0, [r0, #4]
 8008628:	f005 f9fa 	bl	800da20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800862c:	6863      	ldr	r3, [r4, #4]
 800862e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008630:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008632:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008634:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008636:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008638:	bf24      	itt	cs
 800863a:	6823      	ldrcs	r3, [r4, #0]
 800863c:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800863e:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 8008640:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008642:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8008644:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008646:	68c0      	ldr	r0, [r0, #12]
 8008648:	f005 f9ea 	bl	800da20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800864c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800864e:	68e3      	ldr	r3, [r4, #12]
 8008650:	4251      	negs	r1, r2
 8008652:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008654:	6822      	ldr	r2, [r4, #0]
 8008656:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008658:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800865a:	d202      	bcs.n	8008662 <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800865c:	68a3      	ldr	r3, [r4, #8]
 800865e:	440b      	add	r3, r1
 8008660:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008662:	2e02      	cmp	r6, #2
 8008664:	d1eb      	bne.n	800863e <prvCopyDataToQueue+0x32>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008666:	2d01      	cmp	r5, #1
BaseType_t xReturn = pdFALSE;
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bf38      	it	cc
 800866e:	2501      	movcc	r5, #1
 8008670:	e7d6      	b.n	8008620 <prvCopyDataToQueue+0x14>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008672:	6880      	ldr	r0, [r0, #8]
 8008674:	f001 f8d0 	bl	8009818 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008678:	60a6      	str	r6, [r4, #8]
 800867a:	e7d1      	b.n	8008620 <prvCopyDataToQueue+0x14>

0800867c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800867c:	b570      	push	{r4, r5, r6, lr}
 800867e:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008680:	f001 fb40 	bl	8009d04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008684:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8008688:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800868a:	2c00      	cmp	r4, #0
 800868c:	dd14      	ble.n	80086b8 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800868e:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 8008692:	e003      	b.n	800869c <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008694:	1e63      	subs	r3, r4, #1
 8008696:	b2da      	uxtb	r2, r3
 8008698:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800869a:	b16a      	cbz	r2, 80086b8 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800869c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800869e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086a0:	b153      	cbz	r3, 80086b8 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086a2:	f000 ff5b 	bl	800955c <xTaskRemoveFromEventList>
 80086a6:	2800      	cmp	r0, #0
 80086a8:	d0f4      	beq.n	8008694 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 80086aa:	f001 f84f 	bl	800974c <vTaskMissedYield>
			--cTxLock;
 80086ae:	1e63      	subs	r3, r4, #1
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086b4:	2a00      	cmp	r2, #0
 80086b6:	d1f1      	bne.n	800869c <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80086b8:	23ff      	movs	r3, #255	@ 0xff
 80086ba:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80086be:	f001 fb43 	bl	8009d48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80086c2:	f001 fb1f 	bl	8009d04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80086c6:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 80086ca:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086cc:	2c00      	cmp	r4, #0
 80086ce:	dd14      	ble.n	80086fa <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086d0:	f105 0610 	add.w	r6, r5, #16
 80086d4:	e003      	b.n	80086de <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80086d6:	1e63      	subs	r3, r4, #1
 80086d8:	b2da      	uxtb	r2, r3
 80086da:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086dc:	b16a      	cbz	r2, 80086fa <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086de:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086e0:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086e2:	b153      	cbz	r3, 80086fa <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086e4:	f000 ff3a 	bl	800955c <xTaskRemoveFromEventList>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d0f4      	beq.n	80086d6 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 80086ec:	f001 f82e 	bl	800974c <vTaskMissedYield>
				--cRxLock;
 80086f0:	1e63      	subs	r3, r4, #1
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086f6:	2a00      	cmp	r2, #0
 80086f8:	d1f1      	bne.n	80086de <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80086fa:	23ff      	movs	r3, #255	@ 0xff
 80086fc:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
}
 8008700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8008704:	f001 bb20 	b.w	8009d48 <vPortExitCritical>

08008708 <xQueueGenericReset>:
{
 8008708:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800870a:	4604      	mov	r4, r0
{
 800870c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800870e:	2800      	cmp	r0, #0
 8008710:	d03a      	beq.n	8008788 <xQueueGenericReset+0x80>
	taskENTER_CRITICAL();
 8008712:	f001 faf7 	bl	8009d04 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008716:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008718:	2100      	movs	r1, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800871a:	6062      	str	r2, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800871c:	63a1      	str	r1, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800871e:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	@ 0x3c
 8008722:	fb00 f303 	mul.w	r3, r0, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008726:	1a18      	subs	r0, r3, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008728:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800872a:	4402      	add	r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800872c:	60a3      	str	r3, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 800872e:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008730:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008732:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008736:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800873a:	b9cd      	cbnz	r5, 8008770 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800873c:	6923      	ldr	r3, [r4, #16]
 800873e:	b91b      	cbnz	r3, 8008748 <xQueueGenericReset+0x40>
	taskEXIT_CRITICAL();
 8008740:	f001 fb02 	bl	8009d48 <vPortExitCritical>
}
 8008744:	2001      	movs	r0, #1
 8008746:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008748:	f104 0010 	add.w	r0, r4, #16
 800874c:	f000 ff06 	bl	800955c <xTaskRemoveFromEventList>
 8008750:	2800      	cmp	r0, #0
 8008752:	d0f5      	beq.n	8008740 <xQueueGenericReset+0x38>
					queueYIELD_IF_USING_PREEMPTION();
 8008754:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800875c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8008768:	f001 faee 	bl	8009d48 <vPortExitCritical>
}
 800876c:	2001      	movs	r0, #1
 800876e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008770:	f104 0010 	add.w	r0, r4, #16
 8008774:	f7ff ff00 	bl	8008578 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008778:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800877c:	f7ff fefc 	bl	8008578 <vListInitialise>
	taskEXIT_CRITICAL();
 8008780:	f001 fae2 	bl	8009d48 <vPortExitCritical>
}
 8008784:	2001      	movs	r0, #1
 8008786:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxQueue );
 8008788:	f240 1103 	movw	r1, #259	@ 0x103
 800878c:	4801      	ldr	r0, [pc, #4]	@ (8008794 <xQueueGenericReset+0x8c>)
 800878e:	f7f8 fab3 	bl	8000cf8 <vAssertCalled>
 8008792:	e7be      	b.n	8008712 <xQueueGenericReset+0xa>
 8008794:	08011750 	.word	0x08011750

08008798 <xQueueGenericCreate>:
	{
 8008798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879a:	460e      	mov	r6, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800879c:	4605      	mov	r5, r0
	{
 800879e:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087a0:	b1b0      	cbz	r0, 80087d0 <xQueueGenericCreate+0x38>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087a2:	fb06 f005 	mul.w	r0, r6, r5
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80087a6:	3050      	adds	r0, #80	@ 0x50
 80087a8:	f001 fbfe 	bl	8009fa8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80087ac:	4604      	mov	r4, r0
 80087ae:	b158      	cbz	r0, 80087c8 <xQueueGenericCreate+0x30>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80087b0:	b166      	cbz	r6, 80087cc <xQueueGenericCreate+0x34>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087b2:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80087b6:	2101      	movs	r1, #1
 80087b8:	4620      	mov	r0, r4
 80087ba:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80087bc:	e9c4 560f 	strd	r5, r6, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80087c0:	f7ff ffa2 	bl	8008708 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80087c4:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 80087c8:	4620      	mov	r0, r4
 80087ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087cc:	4603      	mov	r3, r0
 80087ce:	e7f2      	b.n	80087b6 <xQueueGenericCreate+0x1e>
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087d0:	f44f 71bb 	mov.w	r1, #374	@ 0x176
 80087d4:	4801      	ldr	r0, [pc, #4]	@ (80087dc <xQueueGenericCreate+0x44>)
 80087d6:	f7f8 fa8f 	bl	8000cf8 <vAssertCalled>
 80087da:	e7e2      	b.n	80087a2 <xQueueGenericCreate+0xa>
 80087dc:	08011750 	.word	0x08011750

080087e0 <xQueueCreateCountingSemaphore>:
	{
 80087e0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( uxMaxCount != 0 );
 80087e2:	4604      	mov	r4, r0
	{
 80087e4:	460d      	mov	r5, r1
		configASSERT( uxMaxCount != 0 );
 80087e6:	b148      	cbz	r0, 80087fc <xQueueCreateCountingSemaphore+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 80087e8:	42ac      	cmp	r4, r5
 80087ea:	d30e      	bcc.n	800880a <xQueueCreateCountingSemaphore+0x2a>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80087ec:	2202      	movs	r2, #2
 80087ee:	2100      	movs	r1, #0
 80087f0:	4620      	mov	r0, r4
 80087f2:	f7ff ffd1 	bl	8008798 <xQueueGenericCreate>
		if( xHandle != NULL )
 80087f6:	b100      	cbz	r0, 80087fa <xQueueCreateCountingSemaphore+0x1a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80087f8:	6385      	str	r5, [r0, #56]	@ 0x38
	}
 80087fa:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( uxMaxCount != 0 );
 80087fc:	f240 21ce 	movw	r1, #718	@ 0x2ce
 8008800:	4805      	ldr	r0, [pc, #20]	@ (8008818 <xQueueCreateCountingSemaphore+0x38>)
 8008802:	f7f8 fa79 	bl	8000cf8 <vAssertCalled>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008806:	42ac      	cmp	r4, r5
 8008808:	d2f0      	bcs.n	80087ec <xQueueCreateCountingSemaphore+0xc>
 800880a:	f240 21cf 	movw	r1, #719	@ 0x2cf
 800880e:	4802      	ldr	r0, [pc, #8]	@ (8008818 <xQueueCreateCountingSemaphore+0x38>)
 8008810:	f7f8 fa72 	bl	8000cf8 <vAssertCalled>
 8008814:	e7ea      	b.n	80087ec <xQueueCreateCountingSemaphore+0xc>
 8008816:	bf00      	nop
 8008818:	08011750 	.word	0x08011750

0800881c <xQueueGenericSend>:
{
 800881c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008820:	b085      	sub	sp, #20
 8008822:	4689      	mov	r9, r1
	configASSERT( pxQueue );
 8008824:	4604      	mov	r4, r0
{
 8008826:	4698      	mov	r8, r3
 8008828:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800882a:	2800      	cmp	r0, #0
 800882c:	f000 80a7 	beq.w	800897e <xQueueGenericSend+0x162>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008830:	f1b9 0f00 	cmp.w	r9, #0
 8008834:	f000 808d 	beq.w	8008952 <xQueueGenericSend+0x136>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008838:	f1b8 0f02 	cmp.w	r8, #2
 800883c:	d07f      	beq.n	800893e <xQueueGenericSend+0x122>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800883e:	f000 ff91 	bl	8009764 <xTaskGetSchedulerState>
 8008842:	b918      	cbnz	r0, 800884c <xQueueGenericSend+0x30>
 8008844:	9b01      	ldr	r3, [sp, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	f040 809f 	bne.w	800898a <xQueueGenericSend+0x16e>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800884c:	f1a8 0602 	sub.w	r6, r8, #2
 8008850:	2500      	movs	r5, #0
 8008852:	fab6 f686 	clz	r6, r6
		prvLockQueue( pxQueue );
 8008856:	462f      	mov	r7, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008858:	0976      	lsrs	r6, r6, #5
 800885a:	e007      	b.n	800886c <xQueueGenericSend+0x50>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800885c:	f001 fa74 	bl	8009d48 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8008860:	4620      	mov	r0, r4
 8008862:	f7ff ff0b 	bl	800867c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008866:	f000 fd27 	bl	80092b8 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800886a:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800886c:	f001 fa4a 	bl	8009d04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008870:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008872:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8008874:	4282      	cmp	r2, r0
 8008876:	d343      	bcc.n	8008900 <xQueueGenericSend+0xe4>
 8008878:	2e00      	cmp	r6, #0
 800887a:	d141      	bne.n	8008900 <xQueueGenericSend+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 800887c:	9b01      	ldr	r3, [sp, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d071      	beq.n	8008966 <xQueueGenericSend+0x14a>
				else if( xEntryTimeSet == pdFALSE )
 8008882:	2d00      	cmp	r5, #0
 8008884:	d038      	beq.n	80088f8 <xQueueGenericSend+0xdc>
		taskEXIT_CRITICAL();
 8008886:	f001 fa5f 	bl	8009d48 <vPortExitCritical>
		vTaskSuspendAll();
 800888a:	f000 fc37 	bl	80090fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800888e:	f001 fa39 	bl	8009d04 <vPortEnterCritical>
 8008892:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008896:	2bff      	cmp	r3, #255	@ 0xff
 8008898:	d101      	bne.n	800889e <xQueueGenericSend+0x82>
 800889a:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800889e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80088a2:	2bff      	cmp	r3, #255	@ 0xff
 80088a4:	d101      	bne.n	80088aa <xQueueGenericSend+0x8e>
 80088a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80088aa:	f001 fa4d 	bl	8009d48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088ae:	a901      	add	r1, sp, #4
 80088b0:	a802      	add	r0, sp, #8
 80088b2:	f000 ff09 	bl	80096c8 <xTaskCheckForTimeOut>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d15b      	bne.n	8008972 <xQueueGenericSend+0x156>
	taskENTER_CRITICAL();
 80088ba:	f001 fa23 	bl	8009d04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80088be:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80088c0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d1ca      	bne.n	800885c <xQueueGenericSend+0x40>
	taskEXIT_CRITICAL();
 80088c6:	f001 fa3f 	bl	8009d48 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088ca:	9901      	ldr	r1, [sp, #4]
 80088cc:	f104 0010 	add.w	r0, r4, #16
 80088d0:	f000 fe00 	bl	80094d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80088d4:	4620      	mov	r0, r4
 80088d6:	f7ff fed1 	bl	800867c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80088da:	f000 fced 	bl	80092b8 <xTaskResumeAll>
 80088de:	2800      	cmp	r0, #0
 80088e0:	d1c3      	bne.n	800886a <xQueueGenericSend+0x4e>
					portYIELD_WITHIN_API();
 80088e2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80088e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	e7b8      	b.n	800886a <xQueueGenericSend+0x4e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088f8:	a802      	add	r0, sp, #8
 80088fa:	f000 fed9 	bl	80096b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088fe:	e7c2      	b.n	8008886 <xQueueGenericSend+0x6a>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008900:	4642      	mov	r2, r8
 8008902:	4649      	mov	r1, r9
 8008904:	4620      	mov	r0, r4
 8008906:	f7ff fe81 	bl	800860c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800890a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800890c:	b933      	cbnz	r3, 800891c <xQueueGenericSend+0x100>
					else if( xYieldRequired != pdFALSE )
 800890e:	b958      	cbnz	r0, 8008928 <xQueueGenericSend+0x10c>
				taskEXIT_CRITICAL();
 8008910:	f001 fa1a 	bl	8009d48 <vPortExitCritical>
				return pdPASS;
 8008914:	2001      	movs	r0, #1
}
 8008916:	b005      	add	sp, #20
 8008918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800891c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008920:	f000 fe1c 	bl	800955c <xTaskRemoveFromEventList>
 8008924:	2800      	cmp	r0, #0
 8008926:	d0f3      	beq.n	8008910 <xQueueGenericSend+0xf4>
						queueYIELD_IF_USING_PREEMPTION();
 8008928:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800892c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008930:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008934:	f3bf 8f4f 	dsb	sy
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	e7e8      	b.n	8008910 <xQueueGenericSend+0xf4>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800893e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008940:	2b01      	cmp	r3, #1
 8008942:	f43f af7c 	beq.w	800883e <xQueueGenericSend+0x22>
 8008946:	f44f 713b 	mov.w	r1, #748	@ 0x2ec
 800894a:	4813      	ldr	r0, [pc, #76]	@ (8008998 <xQueueGenericSend+0x17c>)
 800894c:	f7f8 f9d4 	bl	8000cf8 <vAssertCalled>
 8008950:	e775      	b.n	800883e <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008952:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008954:	2b00      	cmp	r3, #0
 8008956:	f43f af6f 	beq.w	8008838 <xQueueGenericSend+0x1c>
 800895a:	f240 21eb 	movw	r1, #747	@ 0x2eb
 800895e:	480e      	ldr	r0, [pc, #56]	@ (8008998 <xQueueGenericSend+0x17c>)
 8008960:	f7f8 f9ca 	bl	8000cf8 <vAssertCalled>
 8008964:	e768      	b.n	8008838 <xQueueGenericSend+0x1c>
					taskEXIT_CRITICAL();
 8008966:	f001 f9ef 	bl	8009d48 <vPortExitCritical>
					return errQUEUE_FULL;
 800896a:	2000      	movs	r0, #0
}
 800896c:	b005      	add	sp, #20
 800896e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			prvUnlockQueue( pxQueue );
 8008972:	4620      	mov	r0, r4
 8008974:	f7ff fe82 	bl	800867c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008978:	f000 fc9e 	bl	80092b8 <xTaskResumeAll>
			return errQUEUE_FULL;
 800897c:	e7f5      	b.n	800896a <xQueueGenericSend+0x14e>
	configASSERT( pxQueue );
 800897e:	f240 21ea 	movw	r1, #746	@ 0x2ea
 8008982:	4805      	ldr	r0, [pc, #20]	@ (8008998 <xQueueGenericSend+0x17c>)
 8008984:	f7f8 f9b8 	bl	8000cf8 <vAssertCalled>
 8008988:	e752      	b.n	8008830 <xQueueGenericSend+0x14>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800898a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800898e:	4802      	ldr	r0, [pc, #8]	@ (8008998 <xQueueGenericSend+0x17c>)
 8008990:	f7f8 f9b2 	bl	8000cf8 <vAssertCalled>
 8008994:	e75a      	b.n	800884c <xQueueGenericSend+0x30>
 8008996:	bf00      	nop
 8008998:	08011750 	.word	0x08011750

0800899c <xQueueCreateMutex>:
	{
 800899c:	b570      	push	{r4, r5, r6, lr}
 800899e:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80089a0:	2050      	movs	r0, #80	@ 0x50
 80089a2:	f001 fb01 	bl	8009fa8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80089a6:	4604      	mov	r4, r0
 80089a8:	b188      	cbz	r0, 80089ce <xQueueCreateMutex+0x32>
	pxNewQueue->uxLength = uxQueueLength;
 80089aa:	2600      	movs	r6, #0
 80089ac:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80089ae:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80089b0:	e9c0 160f 	strd	r1, r6, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80089b4:	f7ff fea8 	bl	8008708 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80089b8:	4633      	mov	r3, r6
 80089ba:	4632      	mov	r2, r6
 80089bc:	4631      	mov	r1, r6
 80089be:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80089c0:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80089c4:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80089c6:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80089c8:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80089ca:	f7ff ff27 	bl	800881c <xQueueGenericSend>
	}
 80089ce:	4620      	mov	r0, r4
 80089d0:	bd70      	pop	{r4, r5, r6, pc}
 80089d2:	bf00      	nop

080089d4 <xQueueReceive>:
{
 80089d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089d6:	b085      	sub	sp, #20
 80089d8:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 80089da:	4604      	mov	r4, r0
{
 80089dc:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80089de:	2800      	cmp	r0, #0
 80089e0:	d072      	beq.n	8008ac8 <xQueueReceive+0xf4>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089e2:	2e00      	cmp	r6, #0
 80089e4:	d067      	beq.n	8008ab6 <xQueueReceive+0xe2>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089e6:	f000 febd 	bl	8009764 <xTaskGetSchedulerState>
 80089ea:	b910      	cbnz	r0, 80089f2 <xQueueReceive+0x1e>
 80089ec:	9b01      	ldr	r3, [sp, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d170      	bne.n	8008ad4 <xQueueReceive+0x100>
		taskENTER_CRITICAL();
 80089f2:	f001 f987 	bl	8009d04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089f6:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089f8:	2d00      	cmp	r5, #0
 80089fa:	d171      	bne.n	8008ae0 <xQueueReceive+0x10c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80089fc:	9b01      	ldr	r3, [sp, #4]
 80089fe:	b37b      	cbz	r3, 8008a60 <xQueueReceive+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a00:	a802      	add	r0, sp, #8
		prvLockQueue( pxQueue );
 8008a02:	462f      	mov	r7, r5
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a04:	f000 fe54 	bl	80096b0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008a08:	f001 f99e 	bl	8009d48 <vPortExitCritical>
		vTaskSuspendAll();
 8008a0c:	f000 fb76 	bl	80090fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a10:	f001 f978 	bl	8009d04 <vPortEnterCritical>
 8008a14:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008a18:	2bff      	cmp	r3, #255	@ 0xff
 8008a1a:	d101      	bne.n	8008a20 <xQueueReceive+0x4c>
 8008a1c:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 8008a20:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008a24:	2bff      	cmp	r3, #255	@ 0xff
 8008a26:	d101      	bne.n	8008a2c <xQueueReceive+0x58>
 8008a28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008a2c:	f001 f98c 	bl	8009d48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a30:	a901      	add	r1, sp, #4
 8008a32:	a802      	add	r0, sp, #8
 8008a34:	f000 fe48 	bl	80096c8 <xTaskCheckForTimeOut>
 8008a38:	b9b8      	cbnz	r0, 8008a6a <xQueueReceive+0x96>
	taskENTER_CRITICAL();
 8008a3a:	f001 f963 	bl	8009d04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a3e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008a40:	b303      	cbz	r3, 8008a84 <xQueueReceive+0xb0>
	taskEXIT_CRITICAL();
 8008a42:	f001 f981 	bl	8009d48 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8008a46:	4620      	mov	r0, r4
 8008a48:	f7ff fe18 	bl	800867c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a4c:	f000 fc34 	bl	80092b8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8008a50:	f001 f958 	bl	8009d04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a54:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a56:	2d00      	cmp	r5, #0
 8008a58:	d142      	bne.n	8008ae0 <xQueueReceive+0x10c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a5a:	9b01      	ldr	r3, [sp, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1d3      	bne.n	8008a08 <xQueueReceive+0x34>
					taskEXIT_CRITICAL();
 8008a60:	f001 f972 	bl	8009d48 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008a64:	2000      	movs	r0, #0
}
 8008a66:	b005      	add	sp, #20
 8008a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvUnlockQueue( pxQueue );
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f7ff fe06 	bl	800867c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a70:	f000 fc22 	bl	80092b8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8008a74:	f001 f946 	bl	8009d04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a78:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d0f0      	beq.n	8008a60 <xQueueReceive+0x8c>
	taskEXIT_CRITICAL();
 8008a7e:	f001 f963 	bl	8009d48 <vPortExitCritical>
 8008a82:	e7e5      	b.n	8008a50 <xQueueReceive+0x7c>
 8008a84:	f001 f960 	bl	8009d48 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a88:	9901      	ldr	r1, [sp, #4]
 8008a8a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008a8e:	f000 fd21 	bl	80094d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a92:	4620      	mov	r0, r4
 8008a94:	f7ff fdf2 	bl	800867c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a98:	f000 fc0e 	bl	80092b8 <xTaskResumeAll>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	d1d7      	bne.n	8008a50 <xQueueReceive+0x7c>
					portYIELD_WITHIN_API();
 8008aa0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008aa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008aa8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8008ab4:	e7cc      	b.n	8008a50 <xQueueReceive+0x7c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ab6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d094      	beq.n	80089e6 <xQueueReceive+0x12>
 8008abc:	f44f 61a1 	mov.w	r1, #1288	@ 0x508
 8008ac0:	481b      	ldr	r0, [pc, #108]	@ (8008b30 <xQueueReceive+0x15c>)
 8008ac2:	f7f8 f919 	bl	8000cf8 <vAssertCalled>
 8008ac6:	e78e      	b.n	80089e6 <xQueueReceive+0x12>
	configASSERT( ( pxQueue ) );
 8008ac8:	f240 5104 	movw	r1, #1284	@ 0x504
 8008acc:	4818      	ldr	r0, [pc, #96]	@ (8008b30 <xQueueReceive+0x15c>)
 8008ace:	f7f8 f913 	bl	8000cf8 <vAssertCalled>
 8008ad2:	e786      	b.n	80089e2 <xQueueReceive+0xe>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ad4:	f240 510d 	movw	r1, #1293	@ 0x50d
 8008ad8:	4815      	ldr	r0, [pc, #84]	@ (8008b30 <xQueueReceive+0x15c>)
 8008ada:	f7f8 f90d 	bl	8000cf8 <vAssertCalled>
 8008ade:	e788      	b.n	80089f2 <xQueueReceive+0x1e>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ae0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008ae2:	b142      	cbz	r2, 8008af6 <xQueueReceive+0x122>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ae4:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ae6:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ae8:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008aea:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008aec:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008aee:	d20b      	bcs.n	8008b08 <xQueueReceive+0x134>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008af0:	4630      	mov	r0, r6
 8008af2:	f004 ff95 	bl	800da20 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008af6:	3d01      	subs	r5, #1
 8008af8:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008afa:	6923      	ldr	r3, [r4, #16]
 8008afc:	b93b      	cbnz	r3, 8008b0e <xQueueReceive+0x13a>
				taskEXIT_CRITICAL();
 8008afe:	f001 f923 	bl	8009d48 <vPortExitCritical>
				return pdPASS;
 8008b02:	2001      	movs	r0, #1
}
 8008b04:	b005      	add	sp, #20
 8008b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008b08:	6821      	ldr	r1, [r4, #0]
 8008b0a:	60e1      	str	r1, [r4, #12]
 8008b0c:	e7f0      	b.n	8008af0 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b0e:	f104 0010 	add.w	r0, r4, #16
 8008b12:	f000 fd23 	bl	800955c <xTaskRemoveFromEventList>
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d0f1      	beq.n	8008afe <xQueueReceive+0x12a>
						queueYIELD_IF_USING_PREEMPTION();
 8008b1a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b22:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	e7e6      	b.n	8008afe <xQueueReceive+0x12a>
 8008b30:	08011750 	.word	0x08011750

08008b34 <xQueueSemaphoreTake>:
{
 8008b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b36:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8008b38:	4604      	mov	r4, r0
{
 8008b3a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	f000 809b 	beq.w	8008c78 <xQueueSemaphoreTake+0x144>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d17c      	bne.n	8008c42 <xQueueSemaphoreTake+0x10e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b48:	f000 fe0c 	bl	8009764 <xTaskGetSchedulerState>
 8008b4c:	b918      	cbnz	r0, 8008b56 <xQueueSemaphoreTake+0x22>
 8008b4e:	9b01      	ldr	r3, [sp, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f040 8086 	bne.w	8008c62 <xQueueSemaphoreTake+0x12e>
{
 8008b56:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
 8008b58:	f001 f8d4 	bl	8009d04 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008b5c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
{
 8008b5e:	4635      	mov	r5, r6
		prvLockQueue( pxQueue );
 8008b60:	4637      	mov	r7, r6
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008b62:	bb7b      	cbnz	r3, 8008bc4 <xQueueSemaphoreTake+0x90>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b64:	9b01      	ldr	r3, [sp, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f000 8095 	beq.w	8008c96 <xQueueSemaphoreTake+0x162>
				else if( xEntryTimeSet == pdFALSE )
 8008b6c:	2d00      	cmp	r5, #0
 8008b6e:	d045      	beq.n	8008bfc <xQueueSemaphoreTake+0xc8>
		taskEXIT_CRITICAL();
 8008b70:	f001 f8ea 	bl	8009d48 <vPortExitCritical>
		vTaskSuspendAll();
 8008b74:	f000 fac2 	bl	80090fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b78:	f001 f8c4 	bl	8009d04 <vPortEnterCritical>
 8008b7c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008b80:	2bff      	cmp	r3, #255	@ 0xff
 8008b82:	d101      	bne.n	8008b88 <xQueueSemaphoreTake+0x54>
 8008b84:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 8008b88:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008b8c:	2bff      	cmp	r3, #255	@ 0xff
 8008b8e:	d101      	bne.n	8008b94 <xQueueSemaphoreTake+0x60>
 8008b90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b94:	f001 f8d8 	bl	8009d48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b98:	a901      	add	r1, sp, #4
 8008b9a:	a802      	add	r0, sp, #8
 8008b9c:	f000 fd94 	bl	80096c8 <xTaskCheckForTimeOut>
 8008ba0:	b9e8      	cbnz	r0, 8008bde <xQueueSemaphoreTake+0xaa>
	taskENTER_CRITICAL();
 8008ba2:	f001 f8af 	bl	8009d04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ba6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008ba8:	b37b      	cbz	r3, 8008c0a <xQueueSemaphoreTake+0xd6>
	taskEXIT_CRITICAL();
 8008baa:	f001 f8cd 	bl	8009d48 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8008bae:	4620      	mov	r0, r4
 8008bb0:	f7ff fd64 	bl	800867c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008bb4:	f000 fb80 	bl	80092b8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8008bb8:	f001 f8a4 	bl	8009d04 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008bbc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
{
 8008bbe:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d0cf      	beq.n	8008b64 <xQueueSemaphoreTake+0x30>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008bc4:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bc6:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008bc8:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bca:	2a00      	cmp	r2, #0
 8008bcc:	d07c      	beq.n	8008cc8 <xQueueSemaphoreTake+0x194>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bce:	6923      	ldr	r3, [r4, #16]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d168      	bne.n	8008ca6 <xQueueSemaphoreTake+0x172>
				taskEXIT_CRITICAL();
 8008bd4:	f001 f8b8 	bl	8009d48 <vPortExitCritical>
				return pdPASS;
 8008bd8:	2001      	movs	r0, #1
}
 8008bda:	b005      	add	sp, #20
 8008bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvUnlockQueue( pxQueue );
 8008bde:	4620      	mov	r0, r4
 8008be0:	f7ff fd4c 	bl	800867c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008be4:	f000 fb68 	bl	80092b8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8008be8:	f001 f88c 	bl	8009d04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008bec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008bee:	b94b      	cbnz	r3, 8008c04 <xQueueSemaphoreTake+0xd0>
	taskEXIT_CRITICAL();
 8008bf0:	f001 f8aa 	bl	8009d48 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8008bf4:	bb5e      	cbnz	r6, 8008c4e <xQueueSemaphoreTake+0x11a>
					return errQUEUE_EMPTY;
 8008bf6:	2000      	movs	r0, #0
}
 8008bf8:	b005      	add	sp, #20
 8008bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bfc:	a802      	add	r0, sp, #8
 8008bfe:	f000 fd57 	bl	80096b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c02:	e7b5      	b.n	8008b70 <xQueueSemaphoreTake+0x3c>
	taskEXIT_CRITICAL();
 8008c04:	f001 f8a0 	bl	8009d48 <vPortExitCritical>
	return xReturn;
 8008c08:	e7d6      	b.n	8008bb8 <xQueueSemaphoreTake+0x84>
	taskEXIT_CRITICAL();
 8008c0a:	f001 f89d 	bl	8009d48 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d037      	beq.n	8008c84 <xQueueSemaphoreTake+0x150>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c14:	9901      	ldr	r1, [sp, #4]
 8008c16:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008c1a:	f000 fc5b 	bl	80094d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f7ff fd2c 	bl	800867c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c24:	f000 fb48 	bl	80092b8 <xTaskResumeAll>
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	d1c5      	bne.n	8008bb8 <xQueueSemaphoreTake+0x84>
					portYIELD_WITHIN_API();
 8008c2c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008c30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c34:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	e7ba      	b.n	8008bb8 <xQueueSemaphoreTake+0x84>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008c42:	f240 5199 	movw	r1, #1433	@ 0x599
 8008c46:	4822      	ldr	r0, [pc, #136]	@ (8008cd0 <xQueueSemaphoreTake+0x19c>)
 8008c48:	f7f8 f856 	bl	8000cf8 <vAssertCalled>
 8008c4c:	e77c      	b.n	8008b48 <xQueueSemaphoreTake+0x14>
						taskENTER_CRITICAL();
 8008c4e:	f001 f859 	bl	8009d04 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008c52:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008c54:	b959      	cbnz	r1, 8008c6e <xQueueSemaphoreTake+0x13a>
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008c56:	68a0      	ldr	r0, [r4, #8]
 8008c58:	f000 fe28 	bl	80098ac <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8008c5c:	f001 f874 	bl	8009d48 <vPortExitCritical>
 8008c60:	e7c9      	b.n	8008bf6 <xQueueSemaphoreTake+0xc2>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c62:	f240 519e 	movw	r1, #1438	@ 0x59e
 8008c66:	481a      	ldr	r0, [pc, #104]	@ (8008cd0 <xQueueSemaphoreTake+0x19c>)
 8008c68:	f7f8 f846 	bl	8000cf8 <vAssertCalled>
 8008c6c:	e773      	b.n	8008b56 <xQueueSemaphoreTake+0x22>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008c6e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008c70:	6819      	ldr	r1, [r3, #0]
 8008c72:	f1c1 0107 	rsb	r1, r1, #7
 8008c76:	e7ee      	b.n	8008c56 <xQueueSemaphoreTake+0x122>
	configASSERT( ( pxQueue ) );
 8008c78:	f240 5195 	movw	r1, #1429	@ 0x595
 8008c7c:	4814      	ldr	r0, [pc, #80]	@ (8008cd0 <xQueueSemaphoreTake+0x19c>)
 8008c7e:	f7f8 f83b 	bl	8000cf8 <vAssertCalled>
 8008c82:	e75e      	b.n	8008b42 <xQueueSemaphoreTake+0xe>
						taskENTER_CRITICAL();
 8008c84:	f001 f83e 	bl	8009d04 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c88:	68a0      	ldr	r0, [r4, #8]
 8008c8a:	f000 fd7b 	bl	8009784 <xTaskPriorityInherit>
 8008c8e:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8008c90:	f001 f85a 	bl	8009d48 <vPortExitCritical>
 8008c94:	e7be      	b.n	8008c14 <xQueueSemaphoreTake+0xe0>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008c96:	2e00      	cmp	r6, #0
 8008c98:	d0e0      	beq.n	8008c5c <xQueueSemaphoreTake+0x128>
 8008c9a:	f240 51e5 	movw	r1, #1509	@ 0x5e5
 8008c9e:	480c      	ldr	r0, [pc, #48]	@ (8008cd0 <xQueueSemaphoreTake+0x19c>)
 8008ca0:	f7f8 f82a 	bl	8000cf8 <vAssertCalled>
					taskEXIT_CRITICAL();
 8008ca4:	e7da      	b.n	8008c5c <xQueueSemaphoreTake+0x128>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ca6:	f104 0010 	add.w	r0, r4, #16
 8008caa:	f000 fc57 	bl	800955c <xTaskRemoveFromEventList>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	d090      	beq.n	8008bd4 <xQueueSemaphoreTake+0xa0>
						queueYIELD_IF_USING_PREEMPTION();
 8008cb2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008cb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	e785      	b.n	8008bd4 <xQueueSemaphoreTake+0xa0>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008cc8:	f000 fe54 	bl	8009974 <pvTaskIncrementMutexHeldCount>
 8008ccc:	60a0      	str	r0, [r4, #8]
 8008cce:	e77e      	b.n	8008bce <xQueueSemaphoreTake+0x9a>
 8008cd0:	08011750 	.word	0x08011750

08008cd4 <uxQueueMessagesWaiting>:
{
 8008cd4:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8008cd6:	4604      	mov	r4, r0
 8008cd8:	b130      	cbz	r0, 8008ce8 <uxQueueMessagesWaiting+0x14>
	taskENTER_CRITICAL();
 8008cda:	f001 f813 	bl	8009d04 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008cde:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 8008ce0:	f001 f832 	bl	8009d48 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	bd10      	pop	{r4, pc}
	configASSERT( xQueue );
 8008ce8:	f240 718e 	movw	r1, #1934	@ 0x78e
 8008cec:	4804      	ldr	r0, [pc, #16]	@ (8008d00 <uxQueueMessagesWaiting+0x2c>)
 8008cee:	f7f8 f803 	bl	8000cf8 <vAssertCalled>
	taskENTER_CRITICAL();
 8008cf2:	f001 f807 	bl	8009d04 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008cf6:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 8008cf8:	f001 f826 	bl	8009d48 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	bd10      	pop	{r4, pc}
 8008d00:	08011750 	.word	0x08011750

08008d04 <uxQueueSpacesAvailable>:
{
 8008d04:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8008d06:	4604      	mov	r4, r0
 8008d08:	b140      	cbz	r0, 8008d1c <uxQueueSpacesAvailable+0x18>
	taskENTER_CRITICAL();
 8008d0a:	f000 fffb 	bl	8009d04 <vPortEnterCritical>
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8008d0e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008d10:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8008d12:	1ae4      	subs	r4, r4, r3
	taskEXIT_CRITICAL();
 8008d14:	f001 f818 	bl	8009d48 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008d18:	4620      	mov	r0, r4
 8008d1a:	bd10      	pop	{r4, pc}
	configASSERT( pxQueue );
 8008d1c:	f240 719f 	movw	r1, #1951	@ 0x79f
 8008d20:	4801      	ldr	r0, [pc, #4]	@ (8008d28 <uxQueueSpacesAvailable+0x24>)
 8008d22:	f7f7 ffe9 	bl	8000cf8 <vAssertCalled>
 8008d26:	e7f0      	b.n	8008d0a <uxQueueSpacesAvailable+0x6>
 8008d28:	08011750 	.word	0x08011750

08008d2c <vQueueDelete>:
{
 8008d2c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8008d2e:	4604      	mov	r4, r0
 8008d30:	b1c8      	cbz	r0, 8008d66 <vQueueDelete+0x3a>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d32:	2300      	movs	r3, #0
 8008d34:	490f      	ldr	r1, [pc, #60]	@ (8008d74 <vQueueDelete+0x48>)
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008d36:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8008d3a:	00d8      	lsls	r0, r3, #3
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d3c:	3301      	adds	r3, #1
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008d3e:	4294      	cmp	r4, r2
 8008d40:	d006      	beq.n	8008d50 <vQueueDelete+0x24>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d42:	2b08      	cmp	r3, #8
 8008d44:	d1f7      	bne.n	8008d36 <vQueueDelete+0xa>
		vPortFree( pxQueue );
 8008d46:	4620      	mov	r0, r4
}
 8008d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 8008d4c:	f001 b998 	b.w	800a080 <vPortFree>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008d50:	4909      	ldr	r1, [pc, #36]	@ (8008d78 <vQueueDelete+0x4c>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	2300      	movs	r3, #0
 8008d56:	4408      	add	r0, r1
 8008d58:	e9c0 2300 	strd	r2, r3, [r0]
		vPortFree( pxQueue );
 8008d5c:	4620      	mov	r0, r4
}
 8008d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 8008d62:	f001 b98d 	b.w	800a080 <vPortFree>
	configASSERT( pxQueue );
 8008d66:	f240 71bb 	movw	r1, #1979	@ 0x7bb
 8008d6a:	4804      	ldr	r0, [pc, #16]	@ (8008d7c <vQueueDelete+0x50>)
 8008d6c:	f7f7 ffc4 	bl	8000cf8 <vAssertCalled>
 8008d70:	e7df      	b.n	8008d32 <vQueueDelete+0x6>
 8008d72:	bf00      	nop
 8008d74:	20000e44 	.word	0x20000e44
 8008d78:	20000e40 	.word	0x20000e40
 8008d7c:	08011750 	.word	0x08011750

08008d80 <vQueueAddToRegistry>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d80:	2300      	movs	r3, #0
 8008d82:	4a0a      	ldr	r2, [pc, #40]	@ (8008dac <vQueueAddToRegistry+0x2c>)
	{
 8008d84:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008d86:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8008d8a:	eb02 0cc3 	add.w	ip, r2, r3, lsl #3
 8008d8e:	b12c      	cbz	r4, 8008d9c <vQueueAddToRegistry+0x1c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d90:	3301      	adds	r3, #1
 8008d92:	2b08      	cmp	r3, #8
 8008d94:	d1f7      	bne.n	8008d86 <vQueueAddToRegistry+0x6>
	}
 8008d96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008da0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008da4:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	20000e40 	.word	0x20000e40

08008db0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008db2:	4b1b      	ldr	r3, [pc, #108]	@ (8008e20 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8008db4:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008db6:	4e1b      	ldr	r6, [pc, #108]	@ (8008e24 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8008db8:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8008dba:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dbc:	6833      	ldr	r3, [r6, #0]
 8008dbe:	1d18      	adds	r0, r3, #4
 8008dc0:	f7ff fc10 	bl	80085e4 <uxListRemove>
 8008dc4:	b940      	cbnz	r0, 8008dd8 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008dc6:	6833      	ldr	r3, [r6, #0]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	4917      	ldr	r1, [pc, #92]	@ (8008e28 <prvAddCurrentTaskToDelayedList+0x78>)
 8008dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dce:	409a      	lsls	r2, r3
 8008dd0:	680b      	ldr	r3, [r1, #0]
 8008dd2:	ea23 0302 	bic.w	r3, r3, r2
 8008dd6:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008dd8:	1c62      	adds	r2, r4, #1
 8008dda:	d101      	bne.n	8008de0 <prvAddCurrentTaskToDelayedList+0x30>
 8008ddc:	07fb      	lsls	r3, r7, #31
 8008dde:	d417      	bmi.n	8008e10 <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008de0:	192d      	adds	r5, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008de2:	6833      	ldr	r3, [r6, #0]
 8008de4:	605d      	str	r5, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8008de6:	d307      	bcc.n	8008df8 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008de8:	4b10      	ldr	r3, [pc, #64]	@ (8008e2c <prvAddCurrentTaskToDelayedList+0x7c>)
 8008dea:	6818      	ldr	r0, [r3, #0]
 8008dec:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008dee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008df2:	3104      	adds	r1, #4
 8008df4:	f7ff bbde 	b.w	80085b4 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008df8:	4b0d      	ldr	r3, [pc, #52]	@ (8008e30 <prvAddCurrentTaskToDelayedList+0x80>)
 8008dfa:	6818      	ldr	r0, [r3, #0]
 8008dfc:	6831      	ldr	r1, [r6, #0]
 8008dfe:	3104      	adds	r1, #4
 8008e00:	f7ff fbd8 	bl	80085b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e04:	4b0b      	ldr	r3, [pc, #44]	@ (8008e34 <prvAddCurrentTaskToDelayedList+0x84>)
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	42aa      	cmp	r2, r5
 8008e0a:	d900      	bls.n	8008e0e <prvAddCurrentTaskToDelayedList+0x5e>
					xNextTaskUnblockTime = xTimeToWake;
 8008e0c:	601d      	str	r5, [r3, #0]
}
 8008e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e10:	6831      	ldr	r1, [r6, #0]
 8008e12:	4809      	ldr	r0, [pc, #36]	@ (8008e38 <prvAddCurrentTaskToDelayedList+0x88>)
 8008e14:	3104      	adds	r1, #4
}
 8008e16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e1a:	f7ff bbbd 	b.w	8008598 <vListInsertEnd>
 8008e1e:	bf00      	nop
 8008e20:	20000eac 	.word	0x20000eac
 8008e24:	20000fb0 	.word	0x20000fb0
 8008e28:	20000ea8 	.word	0x20000ea8
 8008e2c:	20000ef4 	.word	0x20000ef4
 8008e30:	20000ef8 	.word	0x20000ef8
 8008e34:	20000e90 	.word	0x20000e90
 8008e38:	20000eb4 	.word	0x20000eb4

08008e3c <prvIdleTask>:
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	4d16      	ldr	r5, [pc, #88]	@ (8008e98 <prvIdleTask+0x5c>)
				taskYIELD();
 8008e40:	f04f 2ae0 	mov.w	sl, #3758153728	@ 0xe000e000
 8008e44:	4f15      	ldr	r7, [pc, #84]	@ (8008e9c <prvIdleTask+0x60>)
 8008e46:	f04f 5980 	mov.w	r9, #268435456	@ 0x10000000
 8008e4a:	4e15      	ldr	r6, [pc, #84]	@ (8008ea0 <prvIdleTask+0x64>)
 8008e4c:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 8008ea4 <prvIdleTask+0x68>
 8008e50:	e014      	b.n	8008e7c <prvIdleTask+0x40>
			taskENTER_CRITICAL();
 8008e52:	f000 ff57 	bl	8009d04 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e5a:	1d20      	adds	r0, r4, #4
 8008e5c:	f7ff fbc2 	bl	80085e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e60:	6833      	ldr	r3, [r6, #0]
 8008e62:	3b01      	subs	r3, #1
 8008e64:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e66:	682b      	ldr	r3, [r5, #0]
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 8008e6c:	f000 ff6c 	bl	8009d48 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8008e70:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008e72:	f001 f905 	bl	800a080 <vPortFree>
			vPortFree( pxTCB );
 8008e76:	4620      	mov	r0, r4
 8008e78:	f001 f902 	bl	800a080 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e7c:	682b      	ldr	r3, [r5, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1e7      	bne.n	8008e52 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e82:	f8d8 3000 	ldr.w	r3, [r8]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d9f8      	bls.n	8008e7c <prvIdleTask+0x40>
				taskYIELD();
 8008e8a:	f8ca 9d04 	str.w	r9, [sl, #3332]	@ 0xd04
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	f3bf 8f6f 	isb	sy
 8008e96:	e7f1      	b.n	8008e7c <prvIdleTask+0x40>
 8008e98:	20000ec8 	.word	0x20000ec8
 8008e9c:	20000ecc 	.word	0x20000ecc
 8008ea0:	20000eb0 	.word	0x20000eb0
 8008ea4:	20000f24 	.word	0x20000f24

08008ea8 <xTaskCreate>:
	{
 8008ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008eac:	0096      	lsls	r6, r2, #2
	{
 8008eae:	4680      	mov	r8, r0
 8008eb0:	460d      	mov	r5, r1
 8008eb2:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f001 f877 	bl	8009fa8 <pvPortMalloc>
			if( pxStack != NULL )
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	f000 808e 	beq.w	8008fdc <xTaskCreate+0x134>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ec0:	4607      	mov	r7, r0
 8008ec2:	206c      	movs	r0, #108	@ 0x6c
 8008ec4:	f001 f870 	bl	8009fa8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008ec8:	4604      	mov	r4, r0
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	f000 8083 	beq.w	8008fd6 <xTaskCreate+0x12e>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ed0:	4632      	mov	r2, r6
					pxNewTCB->pxStack = pxStack;
 8008ed2:	6307      	str	r7, [r0, #48]	@ 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ed4:	21a5      	movs	r1, #165	@ 0xa5
 8008ed6:	4638      	mov	r0, r7
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ed8:	3e04      	subs	r6, #4
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008eda:	f004 fe75 	bl	800dbc8 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ede:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008ee0:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ee2:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8008ee6:	2d00      	cmp	r5, #0
 8008ee8:	f000 8085 	beq.w	8008ff6 <xTaskCreate+0x14e>
 8008eec:	f105 3cff 	add.w	ip, r5, #4294967295
 8008ef0:	f105 020f 	add.w	r2, r5, #15
 8008ef4:	f104 0333 	add.w	r3, r4, #51	@ 0x33
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ef8:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 8008efc:	f803 5f01 	strb.w	r5, [r3, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8008f00:	b10d      	cbz	r5, 8008f06 <xTaskCreate+0x5e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f02:	4594      	cmp	ip, r2
 8008f04:	d1f8      	bne.n	8008ef8 <xTaskCreate+0x50>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f06:	2300      	movs	r3, #0
 8008f08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f0c:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8008f0e:	2700      	movs	r7, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f10:	f104 0a04 	add.w	sl, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f14:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8008f16:	6527      	str	r7, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f18:	4650      	mov	r0, sl
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f1a:	bf28      	it	cs
 8008f1c:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8008f1e:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008f20:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f22:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f26:	f7ff fb33 	bl	8008590 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f2a:	f104 0018 	add.w	r0, r4, #24
 8008f2e:	f7ff fb2f 	bl	8008590 <vListInitialiseItem>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f32:	464a      	mov	r2, r9
 8008f34:	4641      	mov	r1, r8
 8008f36:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f38:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f3a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f3c:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8008f3e:	6627      	str	r7, [r4, #96]	@ 0x60
		memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
 8008f40:	6567      	str	r7, [r4, #84]	@ 0x54
 8008f42:	65a7      	str	r7, [r4, #88]	@ 0x58
 8008f44:	65e7      	str	r7, [r4, #92]	@ 0x5c
		memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8008f46:	6667      	str	r7, [r4, #100]	@ 0x64
		memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8008f48:	f884 7068 	strb.w	r7, [r4, #104]	@ 0x68
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f4c:	f000 feac 	bl	8009ca8 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 8008f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f52:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008f54:	b103      	cbz	r3, 8008f58 <xTaskCreate+0xb0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f56:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 8008f58:	f000 fed4 	bl	8009d04 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8008f5c:	4a3a      	ldr	r2, [pc, #232]	@ (8009048 <xTaskCreate+0x1a0>)
		if( pxCurrentTCB == NULL )
 8008f5e:	4d3b      	ldr	r5, [pc, #236]	@ (800904c <xTaskCreate+0x1a4>)
		uxCurrentNumberOfTasks++;
 8008f60:	6813      	ldr	r3, [r2, #0]
 8008f62:	3301      	adds	r3, #1
 8008f64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f66:	682b      	ldr	r3, [r5, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d03b      	beq.n	8008fe4 <xTaskCreate+0x13c>
			if( xSchedulerRunning == pdFALSE )
 8008f6c:	4e38      	ldr	r6, [pc, #224]	@ (8009050 <xTaskCreate+0x1a8>)
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f6e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8008f70:	6833      	ldr	r3, [r6, #0]
 8008f72:	b923      	cbnz	r3, 8008f7e <xTaskCreate+0xd6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f74:	682b      	ldr	r3, [r5, #0]
 8008f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f78:	4283      	cmp	r3, r0
 8008f7a:	d800      	bhi.n	8008f7e <xTaskCreate+0xd6>
					pxCurrentTCB = pxNewTCB;
 8008f7c:	602c      	str	r4, [r5, #0]
 8008f7e:	f8df 80f0 	ldr.w	r8, [pc, #240]	@ 8009070 <xTaskCreate+0x1c8>
		uxTaskNumber++;
 8008f82:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 8009074 <xTaskCreate+0x1cc>
		prvAddTaskToReadyList( pxNewTCB );
 8008f86:	2301      	movs	r3, #1
 8008f88:	4f32      	ldr	r7, [pc, #200]	@ (8009054 <xTaskCreate+0x1ac>)
 8008f8a:	4651      	mov	r1, sl
		uxTaskNumber++;
 8008f8c:	f8dc 2000 	ldr.w	r2, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 8008f90:	4083      	lsls	r3, r0
 8008f92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
		uxTaskNumber++;
 8008f96:	3201      	adds	r2, #1
		prvAddTaskToReadyList( pxNewTCB );
 8008f98:	eb08 0080 	add.w	r0, r8, r0, lsl #2
		uxTaskNumber++;
 8008f9c:	f8cc 2000 	str.w	r2, [ip]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008fa0:	6462      	str	r2, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8008fa2:	683a      	ldr	r2, [r7, #0]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	603b      	str	r3, [r7, #0]
 8008fa8:	f7ff faf6 	bl	8008598 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008fac:	f000 fecc 	bl	8009d48 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008fb0:	6833      	ldr	r3, [r6, #0]
 8008fb2:	b173      	cbz	r3, 8008fd2 <xTaskCreate+0x12a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008fb4:	682a      	ldr	r2, [r5, #0]
 8008fb6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008fb8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d209      	bcs.n	8008fd2 <xTaskCreate+0x12a>
			taskYIELD_IF_USING_PREEMPTION();
 8008fbe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008fc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fc6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 8008fd2:	2001      	movs	r0, #1
		return xReturn;
 8008fd4:	e004      	b.n	8008fe0 <xTaskCreate+0x138>
					vPortFree( pxStack );
 8008fd6:	4638      	mov	r0, r7
 8008fd8:	f001 f852 	bl	800a080 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008fdc:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8008fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			pxCurrentTCB = pxNewTCB;
 8008fe4:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008fe6:	6813      	ldr	r3, [r2, #0]
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d007      	beq.n	8008ffc <xTaskCreate+0x154>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008fec:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8008fee:	f8df 8080 	ldr.w	r8, [pc, #128]	@ 8009070 <xTaskCreate+0x1c8>
 8008ff2:	4e17      	ldr	r6, [pc, #92]	@ (8009050 <xTaskCreate+0x1a8>)
 8008ff4:	e7c5      	b.n	8008f82 <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ff6:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8008ffa:	e787      	b.n	8008f0c <xTaskCreate+0x64>
 8008ffc:	f8df 8070 	ldr.w	r8, [pc, #112]	@ 8009070 <xTaskCreate+0x1c8>
 8009000:	4646      	mov	r6, r8
 8009002:	f108 078c 	add.w	r7, r8, #140	@ 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009006:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009008:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800900a:	f7ff fab5 	bl	8008578 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800900e:	42be      	cmp	r6, r7
 8009010:	d1f9      	bne.n	8009006 <xTaskCreate+0x15e>
	vListInitialise( &xDelayedTaskList1 );
 8009012:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8009078 <xTaskCreate+0x1d0>
	vListInitialise( &xDelayedTaskList2 );
 8009016:	4f10      	ldr	r7, [pc, #64]	@ (8009058 <xTaskCreate+0x1b0>)
	vListInitialise( &xDelayedTaskList1 );
 8009018:	4648      	mov	r0, r9
 800901a:	4e0d      	ldr	r6, [pc, #52]	@ (8009050 <xTaskCreate+0x1a8>)
 800901c:	f7ff faac 	bl	8008578 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009020:	4638      	mov	r0, r7
 8009022:	f7ff faa9 	bl	8008578 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009026:	480d      	ldr	r0, [pc, #52]	@ (800905c <xTaskCreate+0x1b4>)
 8009028:	f7ff faa6 	bl	8008578 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800902c:	480c      	ldr	r0, [pc, #48]	@ (8009060 <xTaskCreate+0x1b8>)
 800902e:	f7ff faa3 	bl	8008578 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8009032:	480c      	ldr	r0, [pc, #48]	@ (8009064 <xTaskCreate+0x1bc>)
 8009034:	f7ff faa0 	bl	8008578 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8009038:	4b0b      	ldr	r3, [pc, #44]	@ (8009068 <xTaskCreate+0x1c0>)
		prvAddTaskToReadyList( pxNewTCB );
 800903a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 800903c:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009040:	4b0a      	ldr	r3, [pc, #40]	@ (800906c <xTaskCreate+0x1c4>)
 8009042:	601f      	str	r7, [r3, #0]
}
 8009044:	e79d      	b.n	8008f82 <xTaskCreate+0xda>
 8009046:	bf00      	nop
 8009048:	20000eb0 	.word	0x20000eb0
 800904c:	20000fb0 	.word	0x20000fb0
 8009050:	20000ea4 	.word	0x20000ea4
 8009054:	20000ea8 	.word	0x20000ea8
 8009058:	20000efc 	.word	0x20000efc
 800905c:	20000ee0 	.word	0x20000ee0
 8009060:	20000ecc 	.word	0x20000ecc
 8009064:	20000eb4 	.word	0x20000eb4
 8009068:	20000ef8 	.word	0x20000ef8
 800906c:	20000ef4 	.word	0x20000ef4
 8009070:	20000f24 	.word	0x20000f24
 8009074:	20000e94 	.word	0x20000e94
 8009078:	20000f10 	.word	0x20000f10

0800907c <vTaskStartScheduler>:
{
 800907c:	b510      	push	{r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800907e:	4818      	ldr	r0, [pc, #96]	@ (80090e0 <vTaskStartScheduler+0x64>)
{
 8009080:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
 8009082:	2400      	movs	r4, #0
 8009084:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009088:	9001      	str	r0, [sp, #4]
 800908a:	4916      	ldr	r1, [pc, #88]	@ (80090e4 <vTaskStartScheduler+0x68>)
 800908c:	4623      	mov	r3, r4
 800908e:	4816      	ldr	r0, [pc, #88]	@ (80090e8 <vTaskStartScheduler+0x6c>)
 8009090:	9400      	str	r4, [sp, #0]
 8009092:	f7ff ff09 	bl	8008ea8 <xTaskCreate>
	if( xReturn == pdPASS )
 8009096:	2801      	cmp	r0, #1
 8009098:	d003      	beq.n	80090a2 <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800909a:	3001      	adds	r0, #1
 800909c:	d018      	beq.n	80090d0 <vTaskStartScheduler+0x54>
}
 800909e:	b002      	add	sp, #8
 80090a0:	bd10      	pop	{r4, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80090a2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80090a6:	b672      	cpsid	i
 80090a8:	f383 8811 	msr	BASEPRI, r3
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 80090b6:	4b0d      	ldr	r3, [pc, #52]	@ (80090ec <vTaskStartScheduler+0x70>)
 80090b8:	f04f 31ff 	mov.w	r1, #4294967295
		xSchedulerRunning = pdTRUE;
 80090bc:	4a0c      	ldr	r2, [pc, #48]	@ (80090f0 <vTaskStartScheduler+0x74>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80090be:	6019      	str	r1, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80090c0:	4b0c      	ldr	r3, [pc, #48]	@ (80090f4 <vTaskStartScheduler+0x78>)
		xSchedulerRunning = pdTRUE;
 80090c2:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80090c4:	601c      	str	r4, [r3, #0]
}
 80090c6:	b002      	add	sp, #8
 80090c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80090cc:	f000 beae 	b.w	8009e2c <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090d0:	f44f 6103 	mov.w	r1, #2096	@ 0x830
 80090d4:	4808      	ldr	r0, [pc, #32]	@ (80090f8 <vTaskStartScheduler+0x7c>)
}
 80090d6:	b002      	add	sp, #8
 80090d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090dc:	f7f7 be0c 	b.w	8000cf8 <vAssertCalled>
 80090e0:	20000e8c 	.word	0x20000e8c
 80090e4:	08011798 	.word	0x08011798
 80090e8:	08008e3d 	.word	0x08008e3d
 80090ec:	20000e90 	.word	0x20000e90
 80090f0:	20000ea4 	.word	0x20000ea4
 80090f4:	20000eac 	.word	0x20000eac
 80090f8:	08011774 	.word	0x08011774

080090fc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80090fc:	4a02      	ldr	r2, [pc, #8]	@ (8009108 <vTaskSuspendAll+0xc>)
 80090fe:	6813      	ldr	r3, [r2, #0]
 8009100:	3301      	adds	r3, #1
 8009102:	6013      	str	r3, [r2, #0]
}
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	20000e88 	.word	0x20000e88

0800910c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800910c:	4b01      	ldr	r3, [pc, #4]	@ (8009114 <xTaskGetTickCount+0x8>)
 800910e:	6818      	ldr	r0, [r3, #0]
}
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	20000eac 	.word	0x20000eac

08009118 <pcTaskGetName>:
{
 8009118:	b510      	push	{r4, lr}
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800911a:	4604      	mov	r4, r0
 800911c:	b110      	cbz	r0, 8009124 <pcTaskGetName+0xc>
}
 800911e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8009122:	bd10      	pop	{r4, pc}
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8009124:	4b04      	ldr	r3, [pc, #16]	@ (8009138 <pcTaskGetName+0x20>)
 8009126:	681c      	ldr	r4, [r3, #0]
	configASSERT( pxTCB );
 8009128:	2c00      	cmp	r4, #0
 800912a:	d1f8      	bne.n	800911e <pcTaskGetName+0x6>
 800912c:	f640 1143 	movw	r1, #2371	@ 0x943
 8009130:	4802      	ldr	r0, [pc, #8]	@ (800913c <pcTaskGetName+0x24>)
 8009132:	f7f7 fde1 	bl	8000cf8 <vAssertCalled>
 8009136:	e7f2      	b.n	800911e <pcTaskGetName+0x6>
 8009138:	20000fb0 	.word	0x20000fb0
 800913c:	08011774 	.word	0x08011774

08009140 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009140:	4b51      	ldr	r3, [pc, #324]	@ (8009288 <xTaskIncrementTick+0x148>)
 8009142:	681b      	ldr	r3, [r3, #0]
{
 8009144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009148:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800914a:	2b00      	cmp	r3, #0
 800914c:	d149      	bne.n	80091e2 <xTaskIncrementTick+0xa2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800914e:	4b4f      	ldr	r3, [pc, #316]	@ (800928c <xTaskIncrementTick+0x14c>)
 8009150:	681e      	ldr	r6, [r3, #0]
 8009152:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8009154:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009156:	2e00      	cmp	r6, #0
 8009158:	d04c      	beq.n	80091f4 <xTaskIncrementTick+0xb4>
 800915a:	4b4d      	ldr	r3, [pc, #308]	@ (8009290 <xTaskIncrementTick+0x150>)
 800915c:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 800915e:	9b01      	ldr	r3, [sp, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	429e      	cmp	r6, r3
 8009164:	d361      	bcc.n	800922a <xTaskIncrementTick+0xea>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009166:	4d4b      	ldr	r5, [pc, #300]	@ (8009294 <xTaskIncrementTick+0x154>)
 8009168:	682b      	ldr	r3, [r5, #0]
 800916a:	681c      	ldr	r4, [r3, #0]
 800916c:	2c00      	cmp	r4, #0
 800916e:	f000 8082 	beq.w	8009276 <xTaskIncrementTick+0x136>
BaseType_t xSwitchRequired = pdFALSE;
 8009172:	2400      	movs	r4, #0
 8009174:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 80092b0 <xTaskIncrementTick+0x170>
 8009178:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 80092b4 <xTaskIncrementTick+0x174>
					prvAddTaskToReadyList( pxTCB );
 800917c:	4f46      	ldr	r7, [pc, #280]	@ (8009298 <xTaskIncrementTick+0x158>)
 800917e:	e022      	b.n	80091c6 <xTaskIncrementTick+0x86>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009180:	f7ff fa30 	bl	80085e4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009184:	f8db 2028 	ldr.w	r2, [fp, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009188:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800918c:	b10a      	cbz	r2, 8009192 <xTaskIncrementTick+0x52>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800918e:	f7ff fa29 	bl	80085e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009192:	f8db 002c 	ldr.w	r0, [fp, #44]	@ 0x2c
 8009196:	2201      	movs	r2, #1
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	4651      	mov	r1, sl
 800919c:	4082      	lsls	r2, r0
 800919e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80091a2:	431a      	orrs	r2, r3
 80091a4:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80091a8:	603a      	str	r2, [r7, #0]
 80091aa:	f7ff f9f5 	bl	8008598 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091ae:	f8d9 2000 	ldr.w	r2, [r9]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091b2:	6828      	ldr	r0, [r5, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091b4:	f8db 102c 	ldr.w	r1, [fp, #44]	@ 0x2c
 80091b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091ba:	6803      	ldr	r3, [r0, #0]
							xSwitchRequired = pdTRUE;
 80091bc:	4291      	cmp	r1, r2
 80091be:	bf28      	it	cs
 80091c0:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d05b      	beq.n	800927e <xTaskIncrementTick+0x13e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c6:	682b      	ldr	r3, [r5, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80091ce:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091d2:	f10b 0a04 	add.w	sl, fp, #4
					if( xConstTickCount < xItemValue )
 80091d6:	4296      	cmp	r6, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091d8:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 80091da:	d2d1      	bcs.n	8009180 <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
 80091dc:	9b01      	ldr	r3, [sp, #4]
 80091de:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80091e0:	e028      	b.n	8009234 <xTaskIncrementTick+0xf4>
		++xPendedTicks;
 80091e2:	4a2e      	ldr	r2, [pc, #184]	@ (800929c <xTaskIncrementTick+0x15c>)
BaseType_t xSwitchRequired = pdFALSE;
 80091e4:	2400      	movs	r4, #0
		++xPendedTicks;
 80091e6:	6813      	ldr	r3, [r2, #0]
}
 80091e8:	4620      	mov	r0, r4
		++xPendedTicks;
 80091ea:	3301      	adds	r3, #1
 80091ec:	6013      	str	r3, [r2, #0]
}
 80091ee:	b003      	add	sp, #12
 80091f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80091f4:	4d27      	ldr	r5, [pc, #156]	@ (8009294 <xTaskIncrementTick+0x154>)
 80091f6:	682b      	ldr	r3, [r5, #0]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d135      	bne.n	800926a <xTaskIncrementTick+0x12a>
 80091fe:	4b28      	ldr	r3, [pc, #160]	@ (80092a0 <xTaskIncrementTick+0x160>)
 8009200:	6829      	ldr	r1, [r5, #0]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	602a      	str	r2, [r5, #0]
 8009206:	4a27      	ldr	r2, [pc, #156]	@ (80092a4 <xTaskIncrementTick+0x164>)
 8009208:	6019      	str	r1, [r3, #0]
 800920a:	6813      	ldr	r3, [r2, #0]
 800920c:	3301      	adds	r3, #1
 800920e:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	bb13      	cbnz	r3, 800925c <xTaskIncrementTick+0x11c>
		xNextTaskUnblockTime = portMAX_DELAY;
 8009216:	4b1e      	ldr	r3, [pc, #120]	@ (8009290 <xTaskIncrementTick+0x150>)
 8009218:	461a      	mov	r2, r3
 800921a:	9301      	str	r3, [sp, #4]
 800921c:	f04f 33ff 	mov.w	r3, #4294967295
 8009220:	6013      	str	r3, [r2, #0]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009222:	9b01      	ldr	r3, [sp, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	429e      	cmp	r6, r3
 8009228:	d29d      	bcs.n	8009166 <xTaskIncrementTick+0x26>
BaseType_t xSwitchRequired = pdFALSE;
 800922a:	2400      	movs	r4, #0
 800922c:	f8df 8080 	ldr.w	r8, [pc, #128]	@ 80092b0 <xTaskIncrementTick+0x170>
 8009230:	f8df 9080 	ldr.w	r9, [pc, #128]	@ 80092b4 <xTaskIncrementTick+0x174>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009234:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 8009238:	491b      	ldr	r1, [pc, #108]	@ (80092a8 <xTaskIncrementTick+0x168>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800923a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800923c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 8009246:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8009248:	2a02      	cmp	r2, #2
 800924a:	bf28      	it	cs
 800924c:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800924e:	2b00      	cmp	r3, #0
 8009250:	bf18      	it	ne
 8009252:	2401      	movne	r4, #1
}
 8009254:	4620      	mov	r0, r4
 8009256:	b003      	add	sp, #12
 8009258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800925c:	682b      	ldr	r3, [r5, #0]
 800925e:	4a0c      	ldr	r2, [pc, #48]	@ (8009290 <xTaskIncrementTick+0x150>)
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	9201      	str	r2, [sp, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	6013      	str	r3, [r2, #0]
}
 8009268:	e779      	b.n	800915e <xTaskIncrementTick+0x1e>
			taskSWITCH_DELAYED_LISTS();
 800926a:	f640 21af 	movw	r1, #2735	@ 0xaaf
 800926e:	480f      	ldr	r0, [pc, #60]	@ (80092ac <xTaskIncrementTick+0x16c>)
 8009270:	f7f7 fd42 	bl	8000cf8 <vAssertCalled>
 8009274:	e7c3      	b.n	80091fe <xTaskIncrementTick+0xbe>
 8009276:	f8df 8038 	ldr.w	r8, [pc, #56]	@ 80092b0 <xTaskIncrementTick+0x170>
 800927a:	f8df 9038 	ldr.w	r9, [pc, #56]	@ 80092b4 <xTaskIncrementTick+0x174>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800927e:	f04f 33ff 	mov.w	r3, #4294967295
 8009282:	9a01      	ldr	r2, [sp, #4]
 8009284:	6013      	str	r3, [r2, #0]
					break;
 8009286:	e7d5      	b.n	8009234 <xTaskIncrementTick+0xf4>
 8009288:	20000e88 	.word	0x20000e88
 800928c:	20000eac 	.word	0x20000eac
 8009290:	20000e90 	.word	0x20000e90
 8009294:	20000ef8 	.word	0x20000ef8
 8009298:	20000ea8 	.word	0x20000ea8
 800929c:	20000ea0 	.word	0x20000ea0
 80092a0:	20000ef4 	.word	0x20000ef4
 80092a4:	20000e98 	.word	0x20000e98
 80092a8:	20000e9c 	.word	0x20000e9c
 80092ac:	08011774 	.word	0x08011774
 80092b0:	20000f24 	.word	0x20000f24
 80092b4:	20000fb0 	.word	0x20000fb0

080092b8 <xTaskResumeAll>:
{
 80092b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 80092bc:	4c3e      	ldr	r4, [pc, #248]	@ (80093b8 <xTaskResumeAll+0x100>)
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d06a      	beq.n	800939a <xTaskResumeAll+0xe2>
	taskENTER_CRITICAL();
 80092c4:	f000 fd1e 	bl	8009d04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80092c8:	6823      	ldr	r3, [r4, #0]
 80092ca:	3b01      	subs	r3, #1
 80092cc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092ce:	6823      	ldr	r3, [r4, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d15c      	bne.n	800938e <xTaskResumeAll+0xd6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80092d4:	4b39      	ldr	r3, [pc, #228]	@ (80093bc <xTaskResumeAll+0x104>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d058      	beq.n	800938e <xTaskResumeAll+0xd6>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092dc:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80093d8 <xTaskResumeAll+0x120>
 80092e0:	f8db 3000 	ldr.w	r3, [fp]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d063      	beq.n	80093b0 <xTaskResumeAll+0xf8>
 80092e8:	4d35      	ldr	r5, [pc, #212]	@ (80093c0 <xTaskResumeAll+0x108>)
					prvAddTaskToReadyList( pxTCB );
 80092ea:	2601      	movs	r6, #1
 80092ec:	f8df 80ec 	ldr.w	r8, [pc, #236]	@ 80093dc <xTaskResumeAll+0x124>
 80092f0:	4f34      	ldr	r7, [pc, #208]	@ (80093c4 <xTaskResumeAll+0x10c>)
 80092f2:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 80093e0 <xTaskResumeAll+0x128>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092f6:	f8db 300c 	ldr.w	r3, [fp, #12]
 80092fa:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092fc:	f104 0a04 	add.w	sl, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009300:	f104 0018 	add.w	r0, r4, #24
 8009304:	f7ff f96e 	bl	80085e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009308:	4650      	mov	r0, sl
 800930a:	f7ff f96b 	bl	80085e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800930e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8009310:	682a      	ldr	r2, [r5, #0]
 8009312:	4651      	mov	r1, sl
 8009314:	fa06 f300 	lsl.w	r3, r6, r0
 8009318:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800931c:	4313      	orrs	r3, r2
 800931e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8009322:	602b      	str	r3, [r5, #0]
 8009324:	f7ff f938 	bl	8008598 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800932c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800932e:	429a      	cmp	r2, r3
 8009330:	d301      	bcc.n	8009336 <xTaskResumeAll+0x7e>
						xYieldPending = pdTRUE;
 8009332:	f8c9 6000 	str.w	r6, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009336:	f8db 3000 	ldr.w	r3, [fp]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1db      	bne.n	80092f6 <xTaskResumeAll+0x3e>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800933e:	4b22      	ldr	r3, [pc, #136]	@ (80093c8 <xTaskResumeAll+0x110>)
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	6812      	ldr	r2, [r2, #0]
 8009344:	b37a      	cbz	r2, 80093a6 <xTaskResumeAll+0xee>
		xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	4b20      	ldr	r3, [pc, #128]	@ (80093cc <xTaskResumeAll+0x114>)
 800934a:	68d2      	ldr	r2, [r2, #12]
 800934c:	6812      	ldr	r2, [r2, #0]
 800934e:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009350:	4e1f      	ldr	r6, [pc, #124]	@ (80093d0 <xTaskResumeAll+0x118>)
 8009352:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8009354:	b144      	cbz	r4, 8009368 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8009356:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8009358:	f7ff fef2 	bl	8009140 <xTaskIncrementTick>
 800935c:	b108      	cbz	r0, 8009362 <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 800935e:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009362:	3c01      	subs	r4, #1
 8009364:	d1f8      	bne.n	8009358 <xTaskResumeAll+0xa0>
						xPendedTicks = 0;
 8009366:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8009368:	f8d9 3000 	ldr.w	r3, [r9]
 800936c:	b17b      	cbz	r3, 800938e <xTaskResumeAll+0xd6>
					taskYIELD_IF_USING_PREEMPTION();
 800936e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009376:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009382:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8009384:	f000 fce0 	bl	8009d48 <vPortExitCritical>
}
 8009388:	4620      	mov	r0, r4
 800938a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 800938e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009390:	f000 fcda 	bl	8009d48 <vPortExitCritical>
}
 8009394:	4620      	mov	r0, r4
 8009396:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	configASSERT( uxSchedulerSuspended );
 800939a:	f640 019f 	movw	r1, #2207	@ 0x89f
 800939e:	480d      	ldr	r0, [pc, #52]	@ (80093d4 <xTaskResumeAll+0x11c>)
 80093a0:	f7f7 fcaa 	bl	8000cf8 <vAssertCalled>
 80093a4:	e78e      	b.n	80092c4 <xTaskResumeAll+0xc>
		xNextTaskUnblockTime = portMAX_DELAY;
 80093a6:	4b09      	ldr	r3, [pc, #36]	@ (80093cc <xTaskResumeAll+0x114>)
 80093a8:	f04f 32ff 	mov.w	r2, #4294967295
 80093ac:	601a      	str	r2, [r3, #0]
 80093ae:	e7cf      	b.n	8009350 <xTaskResumeAll+0x98>
 80093b0:	f8df 902c 	ldr.w	r9, [pc, #44]	@ 80093e0 <xTaskResumeAll+0x128>
 80093b4:	e7cc      	b.n	8009350 <xTaskResumeAll+0x98>
 80093b6:	bf00      	nop
 80093b8:	20000e88 	.word	0x20000e88
 80093bc:	20000eb0 	.word	0x20000eb0
 80093c0:	20000ea8 	.word	0x20000ea8
 80093c4:	20000fb0 	.word	0x20000fb0
 80093c8:	20000ef8 	.word	0x20000ef8
 80093cc:	20000e90 	.word	0x20000e90
 80093d0:	20000ea0 	.word	0x20000ea0
 80093d4:	08011774 	.word	0x08011774
 80093d8:	20000ee0 	.word	0x20000ee0
 80093dc:	20000f24 	.word	0x20000f24
 80093e0:	20000e9c 	.word	0x20000e9c

080093e4 <vTaskDelay>:
	{
 80093e4:	b538      	push	{r3, r4, r5, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80093e6:	b168      	cbz	r0, 8009404 <vTaskDelay+0x20>
			configASSERT( uxSchedulerSuspended == 0 );
 80093e8:	4d0f      	ldr	r5, [pc, #60]	@ (8009428 <vTaskDelay+0x44>)
 80093ea:	4604      	mov	r4, r0
 80093ec:	682b      	ldr	r3, [r5, #0]
 80093ee:	b9a3      	cbnz	r3, 800941a <vTaskDelay+0x36>
	++uxSchedulerSuspended;
 80093f0:	682b      	ldr	r3, [r5, #0]
 80093f2:	3301      	adds	r3, #1
 80093f4:	602b      	str	r3, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80093f6:	2100      	movs	r1, #0
 80093f8:	4620      	mov	r0, r4
 80093fa:	f7ff fcd9 	bl	8008db0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80093fe:	f7ff ff5b 	bl	80092b8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009402:	b948      	cbnz	r0, 8009418 <vTaskDelay+0x34>
			portYIELD_WITHIN_API();
 8009404:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009408:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800940c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009410:	f3bf 8f4f 	dsb	sy
 8009414:	f3bf 8f6f 	isb	sy
	}
 8009418:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800941a:	f240 5141 	movw	r1, #1345	@ 0x541
 800941e:	4803      	ldr	r0, [pc, #12]	@ (800942c <vTaskDelay+0x48>)
 8009420:	f7f7 fc6a 	bl	8000cf8 <vAssertCalled>
 8009424:	e7e4      	b.n	80093f0 <vTaskDelay+0xc>
 8009426:	bf00      	nop
 8009428:	20000e88 	.word	0x20000e88
 800942c:	08011774 	.word	0x08011774

08009430 <vTaskSwitchContext>:
{
 8009430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009432:	4b20      	ldr	r3, [pc, #128]	@ (80094b4 <vTaskSwitchContext+0x84>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	b11b      	cbz	r3, 8009440 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8009438:	4b1f      	ldr	r3, [pc, #124]	@ (80094b8 <vTaskSwitchContext+0x88>)
 800943a:	2201      	movs	r2, #1
 800943c:	601a      	str	r2, [r3, #0]
}
 800943e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xYieldPending = pdFALSE;
 8009440:	4a1d      	ldr	r2, [pc, #116]	@ (80094b8 <vTaskSwitchContext+0x88>)
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009442:	4f1e      	ldr	r7, [pc, #120]	@ (80094bc <vTaskSwitchContext+0x8c>)
		xYieldPending = pdFALSE;
 8009444:	6013      	str	r3, [r2, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009446:	f7f7 fc55 	bl	8000cf4 <ulGetRunTimeCounterValue>
 800944a:	4b1d      	ldr	r3, [pc, #116]	@ (80094c0 <vTaskSwitchContext+0x90>)
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800944c:	4a1d      	ldr	r2, [pc, #116]	@ (80094c4 <vTaskSwitchContext+0x94>)
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800944e:	6018      	str	r0, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009450:	6814      	ldr	r4, [r2, #0]
 8009452:	6819      	ldr	r1, [r3, #0]
 8009454:	42a1      	cmp	r1, r4
 8009456:	d81c      	bhi.n	8009492 <vTaskSwitchContext+0x62>
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009458:	6819      	ldr	r1, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800945a:	4b1b      	ldr	r3, [pc, #108]	@ (80094c8 <vTaskSwitchContext+0x98>)
			ulTaskSwitchedInTime = ulTotalRunTime;
 800945c:	6011      	str	r1, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800945e:	681c      	ldr	r4, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009460:	fab4 f484 	clz	r4, r4
 8009464:	b2e4      	uxtb	r4, r4
 8009466:	4d19      	ldr	r5, [pc, #100]	@ (80094cc <vTaskSwitchContext+0x9c>)
 8009468:	f1c4 041f 	rsb	r4, r4, #31
 800946c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8009470:	00a6      	lsls	r6, r4, #2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	58eb      	ldr	r3, [r5, r3]
 8009476:	b19b      	cbz	r3, 80094a0 <vTaskSwitchContext+0x70>
 8009478:	1933      	adds	r3, r6, r4
 800947a:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800947e:	6853      	ldr	r3, [r2, #4]
 8009480:	4615      	mov	r5, r2
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	3508      	adds	r5, #8
 8009486:	42ab      	cmp	r3, r5
 8009488:	6053      	str	r3, [r2, #4]
 800948a:	d00f      	beq.n	80094ac <vTaskSwitchContext+0x7c>
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	603b      	str	r3, [r7, #0]
}
 8009490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009492:	681d      	ldr	r5, [r3, #0]
 8009494:	6838      	ldr	r0, [r7, #0]
 8009496:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 8009498:	1b09      	subs	r1, r1, r4
 800949a:	4429      	add	r1, r5
 800949c:	6601      	str	r1, [r0, #96]	@ 0x60
 800949e:	e7db      	b.n	8009458 <vTaskSwitchContext+0x28>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094a0:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 80094a4:	480a      	ldr	r0, [pc, #40]	@ (80094d0 <vTaskSwitchContext+0xa0>)
 80094a6:	f7f7 fc27 	bl	8000cf8 <vAssertCalled>
 80094aa:	e7e5      	b.n	8009478 <vTaskSwitchContext+0x48>
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	6053      	str	r3, [r2, #4]
 80094b0:	e7ec      	b.n	800948c <vTaskSwitchContext+0x5c>
 80094b2:	bf00      	nop
 80094b4:	20000e88 	.word	0x20000e88
 80094b8:	20000e9c 	.word	0x20000e9c
 80094bc:	20000fb0 	.word	0x20000fb0
 80094c0:	20000e80 	.word	0x20000e80
 80094c4:	20000e84 	.word	0x20000e84
 80094c8:	20000ea8 	.word	0x20000ea8
 80094cc:	20000f24 	.word	0x20000f24
 80094d0:	08011774 	.word	0x08011774

080094d4 <vTaskPlaceOnEventList>:
{
 80094d4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
 80094d6:	4604      	mov	r4, r0
{
 80094d8:	460d      	mov	r5, r1
	configASSERT( pxEventList );
 80094da:	b158      	cbz	r0, 80094f4 <vTaskPlaceOnEventList+0x20>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094dc:	4b08      	ldr	r3, [pc, #32]	@ (8009500 <vTaskPlaceOnEventList+0x2c>)
 80094de:	4620      	mov	r0, r4
 80094e0:	6819      	ldr	r1, [r3, #0]
 80094e2:	3118      	adds	r1, #24
 80094e4:	f7ff f866 	bl	80085b4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80094e8:	4628      	mov	r0, r5
 80094ea:	2101      	movs	r1, #1
}
 80094ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80094f0:	f7ff bc5e 	b.w	8008db0 <prvAddCurrentTaskToDelayedList>
	configASSERT( pxEventList );
 80094f4:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80094f8:	4802      	ldr	r0, [pc, #8]	@ (8009504 <vTaskPlaceOnEventList+0x30>)
 80094fa:	f7f7 fbfd 	bl	8000cf8 <vAssertCalled>
 80094fe:	e7ed      	b.n	80094dc <vTaskPlaceOnEventList+0x8>
 8009500:	20000fb0 	.word	0x20000fb0
 8009504:	08011774 	.word	0x08011774

08009508 <vTaskPlaceOnUnorderedEventList>:
{
 8009508:	b570      	push	{r4, r5, r6, lr}
 800950a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800950c:	4605      	mov	r5, r0
{
 800950e:	4616      	mov	r6, r2
	configASSERT( pxEventList );
 8009510:	b1c0      	cbz	r0, 8009544 <vTaskPlaceOnUnorderedEventList+0x3c>
	configASSERT( uxSchedulerSuspended != 0 );
 8009512:	4b0f      	ldr	r3, [pc, #60]	@ (8009550 <vTaskPlaceOnUnorderedEventList+0x48>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	b17b      	cbz	r3, 8009538 <vTaskPlaceOnUnorderedEventList+0x30>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009518:	4b0e      	ldr	r3, [pc, #56]	@ (8009554 <vTaskPlaceOnUnorderedEventList+0x4c>)
 800951a:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800951e:	4628      	mov	r0, r5
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009520:	681a      	ldr	r2, [r3, #0]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009522:	6819      	ldr	r1, [r3, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009524:	6194      	str	r4, [r2, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009526:	3118      	adds	r1, #24
 8009528:	f7ff f836 	bl	8008598 <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800952c:	4630      	mov	r0, r6
 800952e:	2101      	movs	r1, #1
}
 8009530:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009534:	f7ff bc3c 	b.w	8008db0 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended != 0 );
 8009538:	f640 4115 	movw	r1, #3093	@ 0xc15
 800953c:	4806      	ldr	r0, [pc, #24]	@ (8009558 <vTaskPlaceOnUnorderedEventList+0x50>)
 800953e:	f7f7 fbdb 	bl	8000cf8 <vAssertCalled>
 8009542:	e7e9      	b.n	8009518 <vTaskPlaceOnUnorderedEventList+0x10>
	configASSERT( pxEventList );
 8009544:	f640 4111 	movw	r1, #3089	@ 0xc11
 8009548:	4803      	ldr	r0, [pc, #12]	@ (8009558 <vTaskPlaceOnUnorderedEventList+0x50>)
 800954a:	f7f7 fbd5 	bl	8000cf8 <vAssertCalled>
 800954e:	e7e0      	b.n	8009512 <vTaskPlaceOnUnorderedEventList+0xa>
 8009550:	20000e88 	.word	0x20000e88
 8009554:	20000fb0 	.word	0x20000fb0
 8009558:	08011774 	.word	0x08011774

0800955c <xTaskRemoveFromEventList>:
{
 800955c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800955e:	68c3      	ldr	r3, [r0, #12]
 8009560:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009562:	b364      	cbz	r4, 80095be <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009564:	f104 0518 	add.w	r5, r4, #24
 8009568:	4628      	mov	r0, r5
 800956a:	f7ff f83b 	bl	80085e4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800956e:	4b17      	ldr	r3, [pc, #92]	@ (80095cc <xTaskRemoveFromEventList+0x70>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	b9fb      	cbnz	r3, 80095b4 <xTaskRemoveFromEventList+0x58>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009574:	1d25      	adds	r5, r4, #4
 8009576:	4628      	mov	r0, r5
 8009578:	f7ff f834 	bl	80085e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800957c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800957e:	4a14      	ldr	r2, [pc, #80]	@ (80095d0 <xTaskRemoveFromEventList+0x74>)
 8009580:	2301      	movs	r3, #1
 8009582:	4629      	mov	r1, r5
 8009584:	4083      	lsls	r3, r0
 8009586:	6815      	ldr	r5, [r2, #0]
 8009588:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800958c:	432b      	orrs	r3, r5
 800958e:	6013      	str	r3, [r2, #0]
 8009590:	4b10      	ldr	r3, [pc, #64]	@ (80095d4 <xTaskRemoveFromEventList+0x78>)
 8009592:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009596:	f7fe ffff 	bl	8008598 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800959a:	4b0f      	ldr	r3, [pc, #60]	@ (80095d8 <xTaskRemoveFromEventList+0x7c>)
 800959c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d904      	bls.n	80095b0 <xTaskRemoveFromEventList+0x54>
		xYieldPending = pdTRUE;
 80095a6:	2301      	movs	r3, #1
 80095a8:	4a0c      	ldr	r2, [pc, #48]	@ (80095dc <xTaskRemoveFromEventList+0x80>)
		xReturn = pdTRUE;
 80095aa:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 80095ac:	6013      	str	r3, [r2, #0]
}
 80095ae:	bd38      	pop	{r3, r4, r5, pc}
		xReturn = pdFALSE;
 80095b0:	2000      	movs	r0, #0
}
 80095b2:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80095b4:	4629      	mov	r1, r5
 80095b6:	480a      	ldr	r0, [pc, #40]	@ (80095e0 <xTaskRemoveFromEventList+0x84>)
 80095b8:	f7fe ffee 	bl	8008598 <vListInsertEnd>
 80095bc:	e7ed      	b.n	800959a <xTaskRemoveFromEventList+0x3e>
	configASSERT( pxUnblockedTCB );
 80095be:	f640 415b 	movw	r1, #3163	@ 0xc5b
 80095c2:	4808      	ldr	r0, [pc, #32]	@ (80095e4 <xTaskRemoveFromEventList+0x88>)
 80095c4:	f7f7 fb98 	bl	8000cf8 <vAssertCalled>
 80095c8:	e7cc      	b.n	8009564 <xTaskRemoveFromEventList+0x8>
 80095ca:	bf00      	nop
 80095cc:	20000e88 	.word	0x20000e88
 80095d0:	20000ea8 	.word	0x20000ea8
 80095d4:	20000f24 	.word	0x20000f24
 80095d8:	20000fb0 	.word	0x20000fb0
 80095dc:	20000e9c 	.word	0x20000e9c
 80095e0:	20000ee0 	.word	0x20000ee0
 80095e4:	08011774 	.word	0x08011774

080095e8 <vTaskRemoveFromUnorderedEventList>:
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80095e8:	4b1d      	ldr	r3, [pc, #116]	@ (8009660 <vTaskRemoveFromUnorderedEventList+0x78>)
 80095ea:	681b      	ldr	r3, [r3, #0]
{
 80095ec:	b570      	push	{r4, r5, r6, lr}
 80095ee:	4604      	mov	r4, r0
 80095f0:	460d      	mov	r5, r1
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80095f2:	b323      	cbz	r3, 800963e <vTaskRemoveFromUnorderedEventList+0x56>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80095f4:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095f8:	68e6      	ldr	r6, [r4, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80095fa:	6025      	str	r5, [r4, #0]
	configASSERT( pxUnblockedTCB );
 80095fc:	b356      	cbz	r6, 8009654 <vTaskRemoveFromUnorderedEventList+0x6c>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80095fe:	1d35      	adds	r5, r6, #4
	( void ) uxListRemove( pxEventListItem );
 8009600:	4620      	mov	r0, r4
 8009602:	f7fe ffef 	bl	80085e4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009606:	2401      	movs	r4, #1
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009608:	4628      	mov	r0, r5
 800960a:	f7fe ffeb 	bl	80085e4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800960e:	4a15      	ldr	r2, [pc, #84]	@ (8009664 <vTaskRemoveFromUnorderedEventList+0x7c>)
 8009610:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8009612:	4629      	mov	r1, r5
 8009614:	6815      	ldr	r5, [r2, #0]
 8009616:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800961a:	fa04 f303 	lsl.w	r3, r4, r3
 800961e:	432b      	orrs	r3, r5
 8009620:	6013      	str	r3, [r2, #0]
 8009622:	4b11      	ldr	r3, [pc, #68]	@ (8009668 <vTaskRemoveFromUnorderedEventList+0x80>)
 8009624:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009628:	f7fe ffb6 	bl	8008598 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800962c:	4b0f      	ldr	r3, [pc, #60]	@ (800966c <vTaskRemoveFromUnorderedEventList+0x84>)
 800962e:	6af2      	ldr	r2, [r6, #44]	@ 0x2c
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009634:	429a      	cmp	r2, r3
 8009636:	d901      	bls.n	800963c <vTaskRemoveFromUnorderedEventList+0x54>
		xYieldPending = pdTRUE;
 8009638:	4b0d      	ldr	r3, [pc, #52]	@ (8009670 <vTaskRemoveFromUnorderedEventList+0x88>)
 800963a:	601c      	str	r4, [r3, #0]
}
 800963c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800963e:	f640 4192 	movw	r1, #3218	@ 0xc92
 8009642:	480c      	ldr	r0, [pc, #48]	@ (8009674 <vTaskRemoveFromUnorderedEventList+0x8c>)
 8009644:	f7f7 fb58 	bl	8000cf8 <vAssertCalled>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009648:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800964c:	68e6      	ldr	r6, [r4, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800964e:	6025      	str	r5, [r4, #0]
	configASSERT( pxUnblockedTCB );
 8009650:	2e00      	cmp	r6, #0
 8009652:	d1d4      	bne.n	80095fe <vTaskRemoveFromUnorderedEventList+0x16>
 8009654:	f640 419a 	movw	r1, #3226	@ 0xc9a
 8009658:	4806      	ldr	r0, [pc, #24]	@ (8009674 <vTaskRemoveFromUnorderedEventList+0x8c>)
 800965a:	f7f7 fb4d 	bl	8000cf8 <vAssertCalled>
 800965e:	e7ce      	b.n	80095fe <vTaskRemoveFromUnorderedEventList+0x16>
 8009660:	20000e88 	.word	0x20000e88
 8009664:	20000ea8 	.word	0x20000ea8
 8009668:	20000f24 	.word	0x20000f24
 800966c:	20000fb0 	.word	0x20000fb0
 8009670:	20000e9c 	.word	0x20000e9c
 8009674:	08011774 	.word	0x08011774

08009678 <vTaskSetTimeOutState>:
{
 8009678:	b510      	push	{r4, lr}
	configASSERT( pxTimeOut );
 800967a:	4604      	mov	r4, r0
 800967c:	b158      	cbz	r0, 8009696 <vTaskSetTimeOutState+0x1e>
	taskENTER_CRITICAL();
 800967e:	f000 fb41 	bl	8009d04 <vPortEnterCritical>
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009682:	4a08      	ldr	r2, [pc, #32]	@ (80096a4 <vTaskSetTimeOutState+0x2c>)
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009684:	4b08      	ldr	r3, [pc, #32]	@ (80096a8 <vTaskSetTimeOutState+0x30>)
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009686:	6812      	ldr	r2, [r2, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	e9c4 2300 	strd	r2, r3, [r4]
}
 800968e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	taskEXIT_CRITICAL();
 8009692:	f000 bb59 	b.w	8009d48 <vPortExitCritical>
	configASSERT( pxTimeOut );
 8009696:	f640 41be 	movw	r1, #3262	@ 0xcbe
 800969a:	4804      	ldr	r0, [pc, #16]	@ (80096ac <vTaskSetTimeOutState+0x34>)
 800969c:	f7f7 fb2c 	bl	8000cf8 <vAssertCalled>
 80096a0:	e7ed      	b.n	800967e <vTaskSetTimeOutState+0x6>
 80096a2:	bf00      	nop
 80096a4:	20000e98 	.word	0x20000e98
 80096a8:	20000eac 	.word	0x20000eac
 80096ac:	08011774 	.word	0x08011774

080096b0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80096b0:	4a03      	ldr	r2, [pc, #12]	@ (80096c0 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 80096b2:	4b04      	ldr	r3, [pc, #16]	@ (80096c4 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80096b4:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	e9c0 2300 	strd	r2, r3, [r0]
}
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	20000e98 	.word	0x20000e98
 80096c4:	20000eac 	.word	0x20000eac

080096c8 <xTaskCheckForTimeOut>:
{
 80096c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80096ca:	4604      	mov	r4, r0
{
 80096cc:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 80096ce:	b348      	cbz	r0, 8009724 <xTaskCheckForTimeOut+0x5c>
	configASSERT( pxTicksToWait );
 80096d0:	b37d      	cbz	r5, 8009732 <xTaskCheckForTimeOut+0x6a>
	taskENTER_CRITICAL();
 80096d2:	f000 fb17 	bl	8009d04 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 80096d6:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 80096d8:	4a19      	ldr	r2, [pc, #100]	@ (8009740 <xTaskCheckForTimeOut+0x78>)
			if( *pxTicksToWait == portMAX_DELAY )
 80096da:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 80096dc:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80096de:	d019      	beq.n	8009714 <xTaskCheckForTimeOut+0x4c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80096e0:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8009748 <xTaskCheckForTimeOut+0x80>
 80096e4:	6826      	ldr	r6, [r4, #0]
 80096e6:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80096ea:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80096ec:	42be      	cmp	r6, r7
 80096ee:	d006      	beq.n	80096fe <xTaskCheckForTimeOut+0x36>
 80096f0:	4288      	cmp	r0, r1
 80096f2:	d804      	bhi.n	80096fe <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 80096f4:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80096f6:	f000 fb27 	bl	8009d48 <vPortExitCritical>
}
 80096fa:	4620      	mov	r0, r4
 80096fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80096fe:	1a0f      	subs	r7, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009700:	42bb      	cmp	r3, r7
 8009702:	d90c      	bls.n	800971e <xTaskCheckForTimeOut+0x56>
			*pxTicksToWait -= xElapsedTime;
 8009704:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009706:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800970a:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 800970c:	4403      	add	r3, r0
 800970e:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009710:	e9c4 1200 	strd	r1, r2, [r4]
				xReturn = pdFALSE;
 8009714:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009716:	f000 fb17 	bl	8009d48 <vPortExitCritical>
}
 800971a:	4620      	mov	r0, r4
 800971c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 800971e:	2300      	movs	r3, #0
 8009720:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8009722:	e7e7      	b.n	80096f4 <xTaskCheckForTimeOut+0x2c>
	configASSERT( pxTimeOut );
 8009724:	f640 41d4 	movw	r1, #3284	@ 0xcd4
 8009728:	4806      	ldr	r0, [pc, #24]	@ (8009744 <xTaskCheckForTimeOut+0x7c>)
 800972a:	f7f7 fae5 	bl	8000cf8 <vAssertCalled>
	configASSERT( pxTicksToWait );
 800972e:	2d00      	cmp	r5, #0
 8009730:	d1cf      	bne.n	80096d2 <xTaskCheckForTimeOut+0xa>
 8009732:	f640 41d5 	movw	r1, #3285	@ 0xcd5
 8009736:	4803      	ldr	r0, [pc, #12]	@ (8009744 <xTaskCheckForTimeOut+0x7c>)
 8009738:	f7f7 fade 	bl	8000cf8 <vAssertCalled>
 800973c:	e7c9      	b.n	80096d2 <xTaskCheckForTimeOut+0xa>
 800973e:	bf00      	nop
 8009740:	20000eac 	.word	0x20000eac
 8009744:	08011774 	.word	0x08011774
 8009748:	20000e98 	.word	0x20000e98

0800974c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800974c:	4b01      	ldr	r3, [pc, #4]	@ (8009754 <vTaskMissedYield+0x8>)
 800974e:	2201      	movs	r2, #1
 8009750:	601a      	str	r2, [r3, #0]
}
 8009752:	4770      	bx	lr
 8009754:	20000e9c 	.word	0x20000e9c

08009758 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8009758:	4b01      	ldr	r3, [pc, #4]	@ (8009760 <xTaskGetCurrentTaskHandle+0x8>)
 800975a:	6818      	ldr	r0, [r3, #0]
	}
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	20000fb0 	.word	0x20000fb0

08009764 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009764:	4b05      	ldr	r3, [pc, #20]	@ (800977c <xTaskGetSchedulerState+0x18>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	b133      	cbz	r3, 8009778 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800976a:	4b05      	ldr	r3, [pc, #20]	@ (8009780 <xTaskGetSchedulerState+0x1c>)
 800976c:	6818      	ldr	r0, [r3, #0]
 800976e:	fab0 f080 	clz	r0, r0
 8009772:	0940      	lsrs	r0, r0, #5
 8009774:	0040      	lsls	r0, r0, #1
 8009776:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009778:	2001      	movs	r0, #1
	}
 800977a:	4770      	bx	lr
 800977c:	20000ea4 	.word	0x20000ea4
 8009780:	20000e88 	.word	0x20000e88

08009784 <xTaskPriorityInherit>:
	{
 8009784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8009786:	4604      	mov	r4, r0
 8009788:	b1c8      	cbz	r0, 80097be <xTaskPriorityInherit+0x3a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800978a:	4d20      	ldr	r5, [pc, #128]	@ (800980c <xTaskPriorityInherit+0x88>)
 800978c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800978e:	682a      	ldr	r2, [r5, #0]
 8009790:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009792:	4293      	cmp	r3, r2
 8009794:	d214      	bcs.n	80097c0 <xTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009796:	6982      	ldr	r2, [r0, #24]
 8009798:	2a00      	cmp	r2, #0
 800979a:	db04      	blt.n	80097a6 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800979c:	682a      	ldr	r2, [r5, #0]
 800979e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80097a0:	f1c2 0207 	rsb	r2, r2, #7
 80097a4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80097a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80097aa:	4e19      	ldr	r6, [pc, #100]	@ (8009810 <xTaskPriorityInherit+0x8c>)
 80097ac:	6962      	ldr	r2, [r4, #20]
 80097ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d00c      	beq.n	80097d0 <xTaskPriorityInherit+0x4c>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80097b6:	682b      	ldr	r3, [r5, #0]
 80097b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 80097bc:	2001      	movs	r0, #1
	}
 80097be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80097c0:	682b      	ldr	r3, [r5, #0]
 80097c2:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 80097c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097c6:	4298      	cmp	r0, r3
 80097c8:	bf2c      	ite	cs
 80097ca:	2000      	movcs	r0, #0
 80097cc:	2001      	movcc	r0, #1
	}
 80097ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097d0:	1d27      	adds	r7, r4, #4
 80097d2:	4638      	mov	r0, r7
 80097d4:	f7fe ff06 	bl	80085e4 <uxListRemove>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80097d8:	4a0e      	ldr	r2, [pc, #56]	@ (8009814 <xTaskPriorityInherit+0x90>)
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097da:	b930      	cbnz	r0, 80097ea <xTaskPriorityInherit+0x66>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80097dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80097de:	2101      	movs	r1, #1
 80097e0:	4099      	lsls	r1, r3
 80097e2:	6813      	ldr	r3, [r2, #0]
 80097e4:	ea23 0301 	bic.w	r3, r3, r1
 80097e8:	6013      	str	r3, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80097ea:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80097ec:	4639      	mov	r1, r7
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80097ee:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80097f0:	2301      	movs	r3, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80097f2:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80097f4:	4083      	lsls	r3, r0
 80097f6:	6814      	ldr	r4, [r2, #0]
 80097f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80097fc:	4323      	orrs	r3, r4
 80097fe:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8009802:	6013      	str	r3, [r2, #0]
 8009804:	f7fe fec8 	bl	8008598 <vListInsertEnd>
 8009808:	e7d8      	b.n	80097bc <xTaskPriorityInherit+0x38>
 800980a:	bf00      	nop
 800980c:	20000fb0 	.word	0x20000fb0
 8009810:	20000f24 	.word	0x20000f24
 8009814:	20000ea8 	.word	0x20000ea8

08009818 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8009818:	b1e0      	cbz	r0, 8009854 <xTaskPriorityDisinherit+0x3c>
	{
 800981a:	b538      	push	{r3, r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 800981c:	4b1f      	ldr	r3, [pc, #124]	@ (800989c <xTaskPriorityDisinherit+0x84>)
 800981e:	4604      	mov	r4, r0
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4283      	cmp	r3, r0
 8009824:	d004      	beq.n	8009830 <xTaskPriorityDisinherit+0x18>
 8009826:	f241 011c 	movw	r1, #4124	@ 0x101c
 800982a:	481d      	ldr	r0, [pc, #116]	@ (80098a0 <xTaskPriorityDisinherit+0x88>)
 800982c:	f7f7 fa64 	bl	8000cf8 <vAssertCalled>
			configASSERT( pxTCB->uxMutexesHeld );
 8009830:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009832:	b143      	cbz	r3, 8009846 <xTaskPriorityDisinherit+0x2e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009834:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 8009836:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009838:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800983a:	6523      	str	r3, [r4, #80]	@ 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800983c:	4291      	cmp	r1, r2
 800983e:	d000      	beq.n	8009842 <xTaskPriorityDisinherit+0x2a>
 8009840:	b153      	cbz	r3, 8009858 <xTaskPriorityDisinherit+0x40>
	BaseType_t xReturn = pdFALSE;
 8009842:	2000      	movs	r0, #0
	}
 8009844:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB->uxMutexesHeld );
 8009846:	f241 011d 	movw	r1, #4125	@ 0x101d
 800984a:	4815      	ldr	r0, [pc, #84]	@ (80098a0 <xTaskPriorityDisinherit+0x88>)
 800984c:	f7f7 fa54 	bl	8000cf8 <vAssertCalled>
			( pxTCB->uxMutexesHeld )--;
 8009850:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009852:	e7ef      	b.n	8009834 <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 8009854:	2000      	movs	r0, #0
	}
 8009856:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009858:	1d25      	adds	r5, r4, #4
 800985a:	4628      	mov	r0, r5
 800985c:	f7fe fec2 	bl	80085e4 <uxListRemove>
						portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009860:	4a10      	ldr	r2, [pc, #64]	@ (80098a4 <xTaskPriorityDisinherit+0x8c>)
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009862:	b930      	cbnz	r0, 8009872 <xTaskPriorityDisinherit+0x5a>
						portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009864:	2101      	movs	r1, #1
 8009866:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8009868:	6813      	ldr	r3, [r2, #0]
 800986a:	4081      	lsls	r1, r0
 800986c:	ea23 0301 	bic.w	r3, r3, r1
 8009870:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009872:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					prvAddTaskToReadyList( pxTCB );
 8009874:	4629      	mov	r1, r5
 8009876:	6815      	ldr	r5, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009878:	f1c3 0007 	rsb	r0, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800987c:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800987e:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009880:	2401      	movs	r4, #1
 8009882:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8009886:	fa04 f303 	lsl.w	r3, r4, r3
 800988a:	432b      	orrs	r3, r5
 800988c:	6013      	str	r3, [r2, #0]
 800988e:	4b06      	ldr	r3, [pc, #24]	@ (80098a8 <xTaskPriorityDisinherit+0x90>)
 8009890:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009894:	f7fe fe80 	bl	8008598 <vListInsertEnd>
					xReturn = pdTRUE;
 8009898:	4620      	mov	r0, r4
	}
 800989a:	bd38      	pop	{r3, r4, r5, pc}
 800989c:	20000fb0 	.word	0x20000fb0
 80098a0:	08011774 	.word	0x08011774
 80098a4:	20000ea8 	.word	0x20000ea8
 80098a8:	20000f24 	.word	0x20000f24

080098ac <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80098ac:	b1a8      	cbz	r0, 80098da <vTaskPriorityDisinheritAfterTimeout+0x2e>
	{
 80098ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 80098b0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80098b2:	4604      	mov	r4, r0
 80098b4:	460d      	mov	r5, r1
 80098b6:	b153      	cbz	r3, 80098ce <vTaskPriorityDisinheritAfterTimeout+0x22>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80098b8:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 80098ba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80098bc:	4295      	cmp	r5, r2
 80098be:	bf38      	it	cc
 80098c0:	4615      	movcc	r5, r2
 80098c2:	42ab      	cmp	r3, r5
 80098c4:	d002      	beq.n	80098cc <vTaskPriorityDisinheritAfterTimeout+0x20>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80098c6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80098c8:	2a01      	cmp	r2, #1
 80098ca:	d007      	beq.n	80098dc <vTaskPriorityDisinheritAfterTimeout+0x30>
	}
 80098cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB->uxMutexesHeld );
 80098ce:	f241 016b 	movw	r1, #4203	@ 0x106b
 80098d2:	481e      	ldr	r0, [pc, #120]	@ (800994c <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 80098d4:	f7f7 fa10 	bl	8000cf8 <vAssertCalled>
 80098d8:	e7ee      	b.n	80098b8 <vTaskPriorityDisinheritAfterTimeout+0xc>
 80098da:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
 80098dc:	4a1c      	ldr	r2, [pc, #112]	@ (8009950 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 80098de:	6812      	ldr	r2, [r2, #0]
 80098e0:	42a2      	cmp	r2, r4
 80098e2:	d023      	beq.n	800992c <vTaskPriorityDisinheritAfterTimeout+0x80>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80098e4:	69a2      	ldr	r2, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 80098e6:	62e5      	str	r5, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80098e8:	2a00      	cmp	r2, #0
 80098ea:	db02      	blt.n	80098f2 <vTaskPriorityDisinheritAfterTimeout+0x46>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098ec:	f1c5 0507 	rsb	r5, r5, #7
 80098f0:	61a5      	str	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80098f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80098f6:	4d17      	ldr	r5, [pc, #92]	@ (8009954 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 80098f8:	6962      	ldr	r2, [r4, #20]
 80098fa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80098fe:	429a      	cmp	r2, r3
 8009900:	d1e4      	bne.n	80098cc <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009902:	1d27      	adds	r7, r4, #4
 8009904:	4638      	mov	r0, r7
 8009906:	f7fe fe6d 	bl	80085e4 <uxListRemove>
 800990a:	b1b0      	cbz	r0, 800993a <vTaskPriorityDisinheritAfterTimeout+0x8e>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800990c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
						prvAddTaskToReadyList( pxTCB );
 800990e:	2301      	movs	r3, #1
 8009910:	4e11      	ldr	r6, [pc, #68]	@ (8009958 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 8009912:	4083      	lsls	r3, r0
 8009914:	6832      	ldr	r2, [r6, #0]
 8009916:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800991a:	4639      	mov	r1, r7
 800991c:	4313      	orrs	r3, r2
 800991e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8009922:	6033      	str	r3, [r6, #0]
	}
 8009924:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8009928:	f7fe be36 	b.w	8008598 <vListInsertEnd>
					configASSERT( pxTCB != pxCurrentTCB );
 800992c:	f241 0186 	movw	r1, #4230	@ 0x1086
 8009930:	4806      	ldr	r0, [pc, #24]	@ (800994c <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8009932:	f7f7 f9e1 	bl	8000cf8 <vAssertCalled>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009936:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009938:	e7d4      	b.n	80098e4 <vTaskPriorityDisinheritAfterTimeout+0x38>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800993a:	4e07      	ldr	r6, [pc, #28]	@ (8009958 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 800993c:	2301      	movs	r3, #1
 800993e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8009940:	6832      	ldr	r2, [r6, #0]
 8009942:	4083      	lsls	r3, r0
 8009944:	ea22 0203 	bic.w	r2, r2, r3
 8009948:	6032      	str	r2, [r6, #0]
 800994a:	e7e3      	b.n	8009914 <vTaskPriorityDisinheritAfterTimeout+0x68>
 800994c:	08011774 	.word	0x08011774
 8009950:	20000fb0 	.word	0x20000fb0
 8009954:	20000f24 	.word	0x20000f24
 8009958:	20000ea8 	.word	0x20000ea8

0800995c <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800995c:	4b04      	ldr	r3, [pc, #16]	@ (8009970 <uxTaskResetEventItemValue+0x14>)
 800995e:	6819      	ldr	r1, [r3, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009960:	6818      	ldr	r0, [r3, #0]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8009966:	6988      	ldr	r0, [r1, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009968:	f1c3 0307 	rsb	r3, r3, #7
 800996c:	6193      	str	r3, [r2, #24]
}
 800996e:	4770      	bx	lr
 8009970:	20000fb0 	.word	0x20000fb0

08009974 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8009974:	4b04      	ldr	r3, [pc, #16]	@ (8009988 <pvTaskIncrementMutexHeldCount+0x14>)
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	b11a      	cbz	r2, 8009982 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800997a:	6819      	ldr	r1, [r3, #0]
 800997c:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800997e:	3201      	adds	r2, #1
 8009980:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 8009982:	6818      	ldr	r0, [r3, #0]
	}
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	20000fb0 	.word	0x20000fb0

0800998c <ulTaskGenericNotifyTake>:
	{
 800998c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009990:	460f      	mov	r7, r1
		configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8009992:	4604      	mov	r4, r0
	{
 8009994:	4690      	mov	r8, r2
		configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8009996:	bb88      	cbnz	r0, 80099fc <ulTaskGenericNotifyTake+0x70>
			if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 8009998:	4e22      	ldr	r6, [pc, #136]	@ (8009a24 <ulTaskGenericNotifyTake+0x98>)
		taskENTER_CRITICAL();
 800999a:	f000 f9b3 	bl	8009d04 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 800999e:	f104 0518 	add.w	r5, r4, #24
 80099a2:	6833      	ldr	r3, [r6, #0]
 80099a4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	b93b      	cbnz	r3, 80099bc <ulTaskGenericNotifyTake+0x30>
				pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80099ac:	6833      	ldr	r3, [r6, #0]
 80099ae:	2101      	movs	r1, #1
 80099b0:	4423      	add	r3, r4
 80099b2:	f883 1068 	strb.w	r1, [r3, #104]	@ 0x68
				if( xTicksToWait > ( TickType_t ) 0 )
 80099b6:	f1b8 0f00 	cmp.w	r8, #0
 80099ba:	d125      	bne.n	8009a08 <ulTaskGenericNotifyTake+0x7c>
		taskEXIT_CRITICAL();
 80099bc:	f000 f9c4 	bl	8009d48 <vPortExitCritical>
		taskENTER_CRITICAL();
 80099c0:	f000 f9a0 	bl	8009d04 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80099c4:	6833      	ldr	r3, [r6, #0]
 80099c6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80099ca:	00ad      	lsls	r5, r5, #2
 80099cc:	f8d3 8004 	ldr.w	r8, [r3, #4]
			if( ulReturn != 0UL )
 80099d0:	f1b8 0f00 	cmp.w	r8, #0
 80099d4:	d004      	beq.n	80099e0 <ulTaskGenericNotifyTake+0x54>
					pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 80099d6:	6833      	ldr	r3, [r6, #0]
 80099d8:	442b      	add	r3, r5
				if( xClearCountOnExit != pdFALSE )
 80099da:	b15f      	cbz	r7, 80099f4 <ulTaskGenericNotifyTake+0x68>
					pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 80099dc:	2200      	movs	r2, #0
 80099de:	605a      	str	r2, [r3, #4]
			pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80099e0:	6833      	ldr	r3, [r6, #0]
 80099e2:	2200      	movs	r2, #0
 80099e4:	4423      	add	r3, r4
 80099e6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
		taskEXIT_CRITICAL();
 80099ea:	f000 f9ad 	bl	8009d48 <vPortExitCritical>
	}
 80099ee:	4640      	mov	r0, r8
 80099f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 80099f4:	f108 32ff 	add.w	r2, r8, #4294967295
 80099f8:	605a      	str	r2, [r3, #4]
 80099fa:	e7f1      	b.n	80099e0 <ulTaskGenericNotifyTake+0x54>
		configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80099fc:	f241 2128 	movw	r1, #4648	@ 0x1228
 8009a00:	4809      	ldr	r0, [pc, #36]	@ (8009a28 <ulTaskGenericNotifyTake+0x9c>)
 8009a02:	f7f7 f979 	bl	8000cf8 <vAssertCalled>
 8009a06:	e7c7      	b.n	8009998 <ulTaskGenericNotifyTake+0xc>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a08:	4640      	mov	r0, r8
 8009a0a:	f7ff f9d1 	bl	8008db0 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8009a0e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009a12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a16:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	e7cb      	b.n	80099bc <ulTaskGenericNotifyTake+0x30>
 8009a24:	20000fb0 	.word	0x20000fb0
 8009a28:	08011774 	.word	0x08011774

08009a2c <xTaskGenericNotify>:
	{
 8009a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a30:	9d06      	ldr	r5, [sp, #24]
 8009a32:	4606      	mov	r6, r0
 8009a34:	4690      	mov	r8, r2
 8009a36:	461f      	mov	r7, r3
		configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8009a38:	460c      	mov	r4, r1
 8009a3a:	bb21      	cbnz	r1, 8009a86 <xTaskGenericNotify+0x5a>
		configASSERT( xTaskToNotify );
 8009a3c:	b356      	cbz	r6, 8009a94 <xTaskGenericNotify+0x68>
		taskENTER_CRITICAL();
 8009a3e:	f000 f961 	bl	8009d04 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8009a42:	b12d      	cbz	r5, 8009a50 <xTaskGenericNotify+0x24>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8009a44:	f104 0318 	add.w	r3, r4, #24
 8009a48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8009a50:	1931      	adds	r1, r6, r4
			pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8009a52:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8009a54:	f891 5068 	ldrb.w	r5, [r1, #104]	@ 0x68
			pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8009a58:	f881 3068 	strb.w	r3, [r1, #104]	@ 0x68
			ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8009a5c:	b2ed      	uxtb	r5, r5
			switch( eAction )
 8009a5e:	2f04      	cmp	r7, #4
 8009a60:	d85a      	bhi.n	8009b18 <xTaskGenericNotify+0xec>
 8009a62:	e8df f007 	tbb	[pc, r7]
 8009a66:	2108      	.short	0x2108
 8009a68:	0353      	.short	0x0353
 8009a6a:	1d          	.byte	0x1d
 8009a6b:	00          	.byte	0x00
						pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8009a6c:	3418      	adds	r4, #24
 8009a6e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8009a72:	f8c4 8004 	str.w	r8, [r4, #4]
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009a76:	2d01      	cmp	r5, #1
 8009a78:	d01e      	beq.n	8009ab8 <xTaskGenericNotify+0x8c>
	{
 8009a7a:	2401      	movs	r4, #1
		taskEXIT_CRITICAL();
 8009a7c:	f000 f964 	bl	8009d48 <vPortExitCritical>
	}
 8009a80:	4620      	mov	r0, r4
 8009a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8009a86:	f241 21ca 	movw	r1, #4810	@ 0x12ca
 8009a8a:	482a      	ldr	r0, [pc, #168]	@ (8009b34 <xTaskGenericNotify+0x108>)
 8009a8c:	f7f7 f934 	bl	8000cf8 <vAssertCalled>
		configASSERT( xTaskToNotify );
 8009a90:	2e00      	cmp	r6, #0
 8009a92:	d1d4      	bne.n	8009a3e <xTaskGenericNotify+0x12>
 8009a94:	f241 21cb 	movw	r1, #4811	@ 0x12cb
 8009a98:	4826      	ldr	r0, [pc, #152]	@ (8009b34 <xTaskGenericNotify+0x108>)
 8009a9a:	f7f7 f92d 	bl	8000cf8 <vAssertCalled>
 8009a9e:	e7ce      	b.n	8009a3e <xTaskGenericNotify+0x12>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009aa0:	2d02      	cmp	r5, #2
 8009aa2:	d1e3      	bne.n	8009a6c <xTaskGenericNotify+0x40>
						xReturn = pdFAIL;
 8009aa4:	2400      	movs	r4, #0
 8009aa6:	e7e9      	b.n	8009a7c <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8009aa8:	eb06 0484 	add.w	r4, r6, r4, lsl #2
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009aac:	2d01      	cmp	r5, #1
					pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8009aae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ab0:	ea43 0308 	orr.w	r3, r3, r8
 8009ab4:	6663      	str	r3, [r4, #100]	@ 0x64
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009ab6:	d1e0      	bne.n	8009a7a <xTaskGenericNotify+0x4e>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ab8:	1d34      	adds	r4, r6, #4
 8009aba:	4620      	mov	r0, r4
 8009abc:	f7fe fd92 	bl	80085e4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009ac0:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 8009ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8009b38 <xTaskGenericNotify+0x10c>)
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	4085      	lsls	r5, r0
 8009ac8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	4315      	orrs	r5, r2
 8009ad0:	601d      	str	r5, [r3, #0]
 8009ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8009b3c <xTaskGenericNotify+0x110>)
 8009ad4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ad8:	f7fe fd5e 	bl	8008598 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009adc:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8009ade:	b123      	cbz	r3, 8009aea <xTaskGenericNotify+0xbe>
 8009ae0:	f241 310b 	movw	r1, #4875	@ 0x130b
 8009ae4:	4813      	ldr	r0, [pc, #76]	@ (8009b34 <xTaskGenericNotify+0x108>)
 8009ae6:	f7f7 f907 	bl	8000cf8 <vAssertCalled>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009aea:	4b15      	ldr	r3, [pc, #84]	@ (8009b40 <xTaskGenericNotify+0x114>)
 8009aec:	6af2      	ldr	r2, [r6, #44]	@ 0x2c
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d9c1      	bls.n	8009a7a <xTaskGenericNotify+0x4e>
					taskYIELD_IF_USING_PREEMPTION();
 8009af6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009afa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009afe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	e7b6      	b.n	8009a7a <xTaskGenericNotify+0x4e>
					( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8009b0c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8009b10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b12:	3301      	adds	r3, #1
 8009b14:	6663      	str	r3, [r4, #100]	@ 0x64
					break;
 8009b16:	e7ae      	b.n	8009a76 <xTaskGenericNotify+0x4a>
					configASSERT( pxTCB->ulNotifiedValue[ uxIndexToNotify ] == ~0UL );
 8009b18:	f104 0318 	add.w	r3, r4, #24
 8009b1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	3301      	adds	r3, #1
 8009b24:	d0a7      	beq.n	8009a76 <xTaskGenericNotify+0x4a>
 8009b26:	f241 21fc 	movw	r1, #4860	@ 0x12fc
 8009b2a:	4802      	ldr	r0, [pc, #8]	@ (8009b34 <xTaskGenericNotify+0x108>)
 8009b2c:	f7f7 f8e4 	bl	8000cf8 <vAssertCalled>
 8009b30:	e7a1      	b.n	8009a76 <xTaskGenericNotify+0x4a>
 8009b32:	bf00      	nop
 8009b34:	08011774 	.word	0x08011774
 8009b38:	20000ea8 	.word	0x20000ea8
 8009b3c:	20000f24 	.word	0x20000f24
 8009b40:	20000fb0 	.word	0x20000fb0

08009b44 <vTaskGenericNotifyGiveFromISR>:
	{
 8009b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b46:	460c      	mov	r4, r1
		configASSERT( xTaskToNotify );
 8009b48:	4605      	mov	r5, r0
	{
 8009b4a:	4616      	mov	r6, r2
		configASSERT( xTaskToNotify );
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d044      	beq.n	8009bda <vTaskGenericNotifyGiveFromISR+0x96>
		configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8009b50:	2c00      	cmp	r4, #0
 8009b52:	d13c      	bne.n	8009bce <vTaskGenericNotifyGiveFromISR+0x8a>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b54:	f000 f9d2 	bl	8009efc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009b58:	f3ef 8711 	mrs	r7, BASEPRI
 8009b5c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8009b60:	b672      	cpsid	i
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	b662      	cpsie	i
			pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8009b70:	2102      	movs	r1, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8009b72:	192b      	adds	r3, r5, r4
 8009b74:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8009b78:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
			pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8009b7c:	f883 1068 	strb.w	r1, [r3, #104]	@ 0x68
			( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8009b80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009b82:	2a01      	cmp	r2, #1
			( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8009b84:	f103 0301 	add.w	r3, r3, #1
 8009b88:	6663      	str	r3, [r4, #100]	@ 0x64
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009b8a:	d002      	beq.n	8009b92 <vTaskGenericNotifyGiveFromISR+0x4e>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b8c:	f387 8811 	msr	BASEPRI, r7
	}
 8009b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009b92:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8009b94:	b123      	cbz	r3, 8009ba0 <vTaskGenericNotifyGiveFromISR+0x5c>
 8009b96:	f241 31eb 	movw	r1, #5099	@ 0x13eb
 8009b9a:	481d      	ldr	r0, [pc, #116]	@ (8009c10 <vTaskGenericNotifyGiveFromISR+0xcc>)
 8009b9c:	f7f7 f8ac 	bl	8000cf8 <vAssertCalled>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8009c14 <vTaskGenericNotifyGiveFromISR+0xd0>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	b1fb      	cbz	r3, 8009be6 <vTaskGenericNotifyGiveFromISR+0xa2>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009ba6:	f105 0118 	add.w	r1, r5, #24
 8009baa:	481b      	ldr	r0, [pc, #108]	@ (8009c18 <vTaskGenericNotifyGiveFromISR+0xd4>)
 8009bac:	f7fe fcf4 	bl	8008598 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8009c1c <vTaskGenericNotifyGiveFromISR+0xd8>)
 8009bb2:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d9e7      	bls.n	8009b8c <vTaskGenericNotifyGiveFromISR+0x48>
					if( pxHigherPriorityTaskWoken != NULL )
 8009bbc:	b10e      	cbz	r6, 8009bc2 <vTaskGenericNotifyGiveFromISR+0x7e>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	6033      	str	r3, [r6, #0]
					xYieldPending = pdTRUE;
 8009bc2:	4b17      	ldr	r3, [pc, #92]	@ (8009c20 <vTaskGenericNotifyGiveFromISR+0xdc>)
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	601a      	str	r2, [r3, #0]
 8009bc8:	f387 8811 	msr	BASEPRI, r7
	}
 8009bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8009bce:	f241 31c5 	movw	r1, #5061	@ 0x13c5
 8009bd2:	480f      	ldr	r0, [pc, #60]	@ (8009c10 <vTaskGenericNotifyGiveFromISR+0xcc>)
 8009bd4:	f7f7 f890 	bl	8000cf8 <vAssertCalled>
 8009bd8:	e7bc      	b.n	8009b54 <vTaskGenericNotifyGiveFromISR+0x10>
		configASSERT( xTaskToNotify );
 8009bda:	f241 31c4 	movw	r1, #5060	@ 0x13c4
 8009bde:	480c      	ldr	r0, [pc, #48]	@ (8009c10 <vTaskGenericNotifyGiveFromISR+0xcc>)
 8009be0:	f7f7 f88a 	bl	8000cf8 <vAssertCalled>
 8009be4:	e7b4      	b.n	8009b50 <vTaskGenericNotifyGiveFromISR+0xc>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009be6:	1d2c      	adds	r4, r5, #4
 8009be8:	4620      	mov	r0, r4
 8009bea:	f7fe fcfb 	bl	80085e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009bee:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8009bf0:	4a0c      	ldr	r2, [pc, #48]	@ (8009c24 <vTaskGenericNotifyGiveFromISR+0xe0>)
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	4083      	lsls	r3, r0
 8009bf8:	6814      	ldr	r4, [r2, #0]
 8009bfa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009bfe:	4323      	orrs	r3, r4
 8009c00:	6013      	str	r3, [r2, #0]
 8009c02:	4b09      	ldr	r3, [pc, #36]	@ (8009c28 <vTaskGenericNotifyGiveFromISR+0xe4>)
 8009c04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009c08:	f7fe fcc6 	bl	8008598 <vListInsertEnd>
 8009c0c:	e7d0      	b.n	8009bb0 <vTaskGenericNotifyGiveFromISR+0x6c>
 8009c0e:	bf00      	nop
 8009c10:	08011774 	.word	0x08011774
 8009c14:	20000e88 	.word	0x20000e88
 8009c18:	20000ee0 	.word	0x20000ee0
 8009c1c:	20000fb0 	.word	0x20000fb0
 8009c20:	20000e9c 	.word	0x20000e9c
 8009c24:	20000ea8 	.word	0x20000ea8
 8009c28:	20000f24 	.word	0x20000f24

08009c2c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c2c:	4808      	ldr	r0, [pc, #32]	@ (8009c50 <prvPortStartFirstTask+0x24>)
 8009c2e:	6800      	ldr	r0, [r0, #0]
 8009c30:	6800      	ldr	r0, [r0, #0]
 8009c32:	f380 8808 	msr	MSP, r0
 8009c36:	f04f 0000 	mov.w	r0, #0
 8009c3a:	f380 8814 	msr	CONTROL, r0
 8009c3e:	b662      	cpsie	i
 8009c40:	b661      	cpsie	f
 8009c42:	f3bf 8f4f 	dsb	sy
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	df00      	svc	0
 8009c4c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c4e:	0000      	.short	0x0000
 8009c50:	e000ed08 	.word	0xe000ed08

08009c54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009c64 <vPortEnableVFP+0x10>
 8009c58:	6801      	ldr	r1, [r0, #0]
 8009c5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009c5e:	6001      	str	r1, [r0, #0]
 8009c60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c62:	0000      	.short	0x0000
 8009c64:	e000ed88 	.word	0xe000ed88

08009c68 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8009c68:	4b0d      	ldr	r3, [pc, #52]	@ (8009ca0 <prvTaskExitError+0x38>)
volatile uint32_t ulDummy = 0;
 8009c6a:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8009c6c:	681b      	ldr	r3, [r3, #0]
{
 8009c6e:	b500      	push	{lr}
	configASSERT( uxCriticalNesting == ~0UL );
 8009c70:	3301      	adds	r3, #1
{
 8009c72:	b083      	sub	sp, #12
volatile uint32_t ulDummy = 0;
 8009c74:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8009c76:	d003      	beq.n	8009c80 <prvTaskExitError+0x18>
 8009c78:	21dd      	movs	r1, #221	@ 0xdd
 8009c7a:	480a      	ldr	r0, [pc, #40]	@ (8009ca4 <prvTaskExitError+0x3c>)
 8009c7c:	f7f7 f83c 	bl	8000cf8 <vAssertCalled>
	__asm volatile
 8009c80:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8009c84:	b672      	cpsid	i
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	b662      	cpsie	i
	while( ulDummy == 0 )
 8009c94:	9b01      	ldr	r3, [sp, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d0fc      	beq.n	8009c94 <prvTaskExitError+0x2c>
}
 8009c9a:	b003      	add	sp, #12
 8009c9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ca0:	2000002c 	.word	0x2000002c
 8009ca4:	080117a0 	.word	0x080117a0

08009ca8 <pxPortInitialiseStack>:
{
 8009ca8:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009caa:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009cae:	4809      	ldr	r0, [pc, #36]	@ (8009cd4 <pxPortInitialiseStack+0x2c>)
{
 8009cb0:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009cb2:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009cb6:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cba:	f843 2c20 	str.w	r2, [r3, #-32]
}
 8009cbe:	f1a3 0044 	sub.w	r0, r3, #68	@ 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009cc2:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009cc6:	f06f 0102 	mvn.w	r1, #2
}
 8009cca:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009cce:	f843 1c24 	str.w	r1, [r3, #-36]
}
 8009cd2:	4770      	bx	lr
 8009cd4:	08009c69 	.word	0x08009c69
	...

08009ce0 <SVC_Handler>:
	__asm volatile (
 8009ce0:	4b07      	ldr	r3, [pc, #28]	@ (8009d00 <pxCurrentTCBConst2>)
 8009ce2:	6819      	ldr	r1, [r3, #0]
 8009ce4:	6808      	ldr	r0, [r1, #0]
 8009ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cea:	f380 8809 	msr	PSP, r0
 8009cee:	f3bf 8f6f 	isb	sy
 8009cf2:	f04f 0000 	mov.w	r0, #0
 8009cf6:	f380 8811 	msr	BASEPRI, r0
 8009cfa:	4770      	bx	lr
 8009cfc:	f3af 8000 	nop.w

08009d00 <pxCurrentTCBConst2>:
 8009d00:	20000fb0 	.word	0x20000fb0

08009d04 <vPortEnterCritical>:
 8009d04:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8009d08:	b672      	cpsid	i
 8009d0a:	f383 8811 	msr	BASEPRI, r3
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f3bf 8f4f 	dsb	sy
 8009d16:	b662      	cpsie	i
	uxCriticalNesting++;
 8009d18:	4a09      	ldr	r2, [pc, #36]	@ (8009d40 <vPortEnterCritical+0x3c>)
 8009d1a:	6813      	ldr	r3, [r2, #0]
 8009d1c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8009d1e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8009d20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8009d22:	d000      	beq.n	8009d26 <vPortEnterCritical+0x22>
}
 8009d24:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d26:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009d2a:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d0f7      	beq.n	8009d24 <vPortEnterCritical+0x20>
 8009d34:	f240 1193 	movw	r1, #403	@ 0x193
 8009d38:	4802      	ldr	r0, [pc, #8]	@ (8009d44 <vPortEnterCritical+0x40>)
 8009d3a:	f7f6 bfdd 	b.w	8000cf8 <vAssertCalled>
 8009d3e:	bf00      	nop
 8009d40:	2000002c 	.word	0x2000002c
 8009d44:	080117a0 	.word	0x080117a0

08009d48 <vPortExitCritical>:
{
 8009d48:	b510      	push	{r4, lr}
	configASSERT( uxCriticalNesting );
 8009d4a:	4c08      	ldr	r4, [pc, #32]	@ (8009d6c <vPortExitCritical+0x24>)
 8009d4c:	6823      	ldr	r3, [r4, #0]
 8009d4e:	b12b      	cbz	r3, 8009d5c <vPortExitCritical+0x14>
	uxCriticalNesting--;
 8009d50:	3b01      	subs	r3, #1
 8009d52:	6023      	str	r3, [r4, #0]
	if( uxCriticalNesting == 0 )
 8009d54:	b90b      	cbnz	r3, 8009d5a <vPortExitCritical+0x12>
	__asm volatile
 8009d56:	f383 8811 	msr	BASEPRI, r3
}
 8009d5a:	bd10      	pop	{r4, pc}
	configASSERT( uxCriticalNesting );
 8009d5c:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 8009d60:	4803      	ldr	r0, [pc, #12]	@ (8009d70 <vPortExitCritical+0x28>)
 8009d62:	f7f6 ffc9 	bl	8000cf8 <vAssertCalled>
	uxCriticalNesting--;
 8009d66:	6823      	ldr	r3, [r4, #0]
 8009d68:	e7f2      	b.n	8009d50 <vPortExitCritical+0x8>
 8009d6a:	bf00      	nop
 8009d6c:	2000002c 	.word	0x2000002c
 8009d70:	080117a0 	.word	0x080117a0
	...

08009d80 <PendSV_Handler>:
	__asm volatile
 8009d80:	f3ef 8009 	mrs	r0, PSP
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	4b15      	ldr	r3, [pc, #84]	@ (8009de0 <pxCurrentTCBConst>)
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	f01e 0f10 	tst.w	lr, #16
 8009d90:	bf08      	it	eq
 8009d92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9a:	6010      	str	r0, [r2, #0]
 8009d9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009da0:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8009da4:	b672      	cpsid	i
 8009da6:	f380 8811 	msr	BASEPRI, r0
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	f3bf 8f6f 	isb	sy
 8009db2:	b662      	cpsie	i
 8009db4:	f7ff fb3c 	bl	8009430 <vTaskSwitchContext>
 8009db8:	f04f 0000 	mov.w	r0, #0
 8009dbc:	f380 8811 	msr	BASEPRI, r0
 8009dc0:	bc09      	pop	{r0, r3}
 8009dc2:	6819      	ldr	r1, [r3, #0]
 8009dc4:	6808      	ldr	r0, [r1, #0]
 8009dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dca:	f01e 0f10 	tst.w	lr, #16
 8009dce:	bf08      	it	eq
 8009dd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009dd4:	f380 8809 	msr	PSP, r0
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop

08009de0 <pxCurrentTCBConst>:
 8009de0:	20000fb0 	.word	0x20000fb0

08009de4 <xPortSysTickHandler>:
{
 8009de4:	b508      	push	{r3, lr}
	__asm volatile
 8009de6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8009dea:	b672      	cpsid	i
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8009dfa:	f7ff f9a1 	bl	8009140 <xTaskIncrementTick>
 8009dfe:	b128      	cbz	r0, 8009e0c <xPortSysTickHandler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e00:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009e04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e08:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	f383 8811 	msr	BASEPRI, r3
}
 8009e12:	bd08      	pop	{r3, pc}

08009e14 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e14:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009e18:	2200      	movs	r2, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e1a:	f24c 304f 	movw	r0, #49999	@ 0xc34f
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e1e:	2103      	movs	r1, #3
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e20:	611a      	str	r2, [r3, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e22:	619a      	str	r2, [r3, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e24:	6158      	str	r0, [r3, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e26:	6119      	str	r1, [r3, #16]
}
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop

08009e2c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8009ee8 <xPortStartScheduler+0xbc>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e2e:	20ff      	movs	r0, #255	@ 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e30:	492e      	ldr	r1, [pc, #184]	@ (8009eec <xPortStartScheduler+0xc0>)
{
 8009e32:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e34:	781a      	ldrb	r2, [r3, #0]
{
 8009e36:	b083      	sub	sp, #12
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e38:	4d2d      	ldr	r5, [pc, #180]	@ (8009ef0 <xPortStartScheduler+0xc4>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e3a:	b2d2      	uxtb	r2, r2
 8009e3c:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e3e:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e40:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e42:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e44:	602a      	str	r2, [r5, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e50:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e58:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e5a:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e5c:	d53c      	bpl.n	8009ed8 <xPortStartScheduler+0xac>
 8009e5e:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e60:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009e64:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e66:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e68:	005b      	lsls	r3, r3, #1
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e70:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009e74:	061b      	lsls	r3, r3, #24
 8009e76:	d4f3      	bmi.n	8009e60 <xPortStartScheduler+0x34>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e78:	2903      	cmp	r1, #3
 8009e7a:	6029      	str	r1, [r5, #0]
 8009e7c:	d12c      	bne.n	8009ed8 <xPortStartScheduler+0xac>
			ulMaxPRIGROUPValue--;
 8009e7e:	2303      	movs	r3, #3
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e80:	9a01      	ldr	r2, [sp, #4]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e82:	021b      	lsls	r3, r3, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e84:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e88:	4917      	ldr	r1, [pc, #92]	@ (8009ee8 <xPortStartScheduler+0xbc>)
 8009e8a:	b2d2      	uxtb	r2, r2
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009e90:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
 8009e92:	2500      	movs	r5, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e94:	700a      	strb	r2, [r1, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e96:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8009e9a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009e9e:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ea2:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8009ea6:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009eaa:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8009eae:	f7ff ffb1 	bl	8009e14 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8009eb2:	4b10      	ldr	r3, [pc, #64]	@ (8009ef4 <xPortStartScheduler+0xc8>)
 8009eb4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8009eb6:	f7ff fecd 	bl	8009c54 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009eba:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8009ebe:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009ec2:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8009ec6:	f7ff feb1 	bl	8009c2c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009eca:	f7ff fab1 	bl	8009430 <vTaskSwitchContext>
	prvTaskExitError();
 8009ece:	f7ff fecb 	bl	8009c68 <prvTaskExitError>
}
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	b003      	add	sp, #12
 8009ed6:	bd30      	pop	{r4, r5, pc}
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ed8:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8009edc:	4806      	ldr	r0, [pc, #24]	@ (8009ef8 <xPortStartScheduler+0xcc>)
 8009ede:	f7f6 ff0b 	bl	8000cf8 <vAssertCalled>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ee2:	682b      	ldr	r3, [r5, #0]
 8009ee4:	e7cc      	b.n	8009e80 <xPortStartScheduler+0x54>
 8009ee6:	bf00      	nop
 8009ee8:	e000e400 	.word	0xe000e400
 8009eec:	20000fb8 	.word	0x20000fb8
 8009ef0:	20000fb4 	.word	0x20000fb4
 8009ef4:	2000002c 	.word	0x2000002c
 8009ef8:	080117a0 	.word	0x080117a0

08009efc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009efc:	b508      	push	{r3, lr}
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009efe:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f02:	2b0f      	cmp	r3, #15
 8009f04:	d905      	bls.n	8009f12 <vPortValidateInterruptPriority+0x16>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f06:	490f      	ldr	r1, [pc, #60]	@ (8009f44 <vPortValidateInterruptPriority+0x48>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f08:	4a0f      	ldr	r2, [pc, #60]	@ (8009f48 <vPortValidateInterruptPriority+0x4c>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f0a:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f0c:	7812      	ldrb	r2, [r2, #0]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d811      	bhi.n	8009f36 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f12:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009f16:	4a0d      	ldr	r2, [pc, #52]	@ (8009f4c <vPortValidateInterruptPriority+0x50>)
 8009f18:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8009f1c:	6812      	ldr	r2, [r2, #0]
 8009f1e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d800      	bhi.n	8009f28 <vPortValidateInterruptPriority+0x2c>
	}
 8009f26:	bd08      	pop	{r3, pc}
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f28:	f44f 713e 	mov.w	r1, #760	@ 0x2f8
 8009f2c:	4808      	ldr	r0, [pc, #32]	@ (8009f50 <vPortValidateInterruptPriority+0x54>)
	}
 8009f2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f32:	f7f6 bee1 	b.w	8000cf8 <vAssertCalled>
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f36:	f44f 713a 	mov.w	r1, #744	@ 0x2e8
 8009f3a:	4805      	ldr	r0, [pc, #20]	@ (8009f50 <vPortValidateInterruptPriority+0x54>)
 8009f3c:	f7f6 fedc 	bl	8000cf8 <vAssertCalled>
 8009f40:	e7e7      	b.n	8009f12 <vPortValidateInterruptPriority+0x16>
 8009f42:	bf00      	nop
 8009f44:	e000e3f0 	.word	0xe000e3f0
 8009f48:	20000fb8 	.word	0x20000fb8
 8009f4c:	20000fb4 	.word	0x20000fb4
 8009f50:	080117a0 	.word	0x080117a0

08009f54 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f54:	4b12      	ldr	r3, [pc, #72]	@ (8009fa0 <prvInsertBlockIntoFreeList+0x4c>)
{
 8009f56:	b430      	push	{r4, r5}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f58:	461a      	mov	r2, r3
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4283      	cmp	r3, r0
 8009f5e:	d3fb      	bcc.n	8009f58 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f60:	6854      	ldr	r4, [r2, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f62:	6841      	ldr	r1, [r0, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f64:	eb02 0c04 	add.w	ip, r2, r4
 8009f68:	4560      	cmp	r0, ip
 8009f6a:	d008      	beq.n	8009f7e <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f6c:	1844      	adds	r4, r0, r1
 8009f6e:	42a3      	cmp	r3, r4
 8009f70:	d00b      	beq.n	8009f8a <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f72:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f74:	4282      	cmp	r2, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f76:	bf18      	it	ne
 8009f78:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f7a:	bc30      	pop	{r4, r5}
 8009f7c:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f7e:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f80:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f82:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f84:	4283      	cmp	r3, r0
 8009f86:	d1f8      	bne.n	8009f7a <prvInsertBlockIntoFreeList+0x26>
 8009f88:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f8a:	4c06      	ldr	r4, [pc, #24]	@ (8009fa4 <prvInsertBlockIntoFreeList+0x50>)
 8009f8c:	6824      	ldr	r4, [r4, #0]
 8009f8e:	42a3      	cmp	r3, r4
 8009f90:	d003      	beq.n	8009f9a <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f92:	e9d3 4500 	ldrd	r4, r5, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f96:	4429      	add	r1, r5
 8009f98:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f9a:	6004      	str	r4, [r0, #0]
 8009f9c:	e7ea      	b.n	8009f74 <prvInsertBlockIntoFreeList+0x20>
 8009f9e:	bf00      	nop
 8009fa0:	20000fd4 	.word	0x20000fd4
 8009fa4:	20000fd0 	.word	0x20000fd0

08009fa8 <pvPortMalloc>:
{
 8009fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( pxEnd );
 8009fac:	4e2d      	ldr	r6, [pc, #180]	@ (800a064 <pvPortMalloc+0xbc>)
{
 8009fae:	4604      	mov	r4, r0
	configASSERT( pxEnd );
 8009fb0:	6833      	ldr	r3, [r6, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d049      	beq.n	800a04a <pvPortMalloc+0xa2>
	vTaskSuspendAll();
 8009fb6:	f7ff f8a1 	bl	80090fc <vTaskSuspendAll>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009fba:	4b2b      	ldr	r3, [pc, #172]	@ (800a068 <pvPortMalloc+0xc0>)
 8009fbc:	681d      	ldr	r5, [r3, #0]
 8009fbe:	4225      	tst	r5, r4
 8009fc0:	d13b      	bne.n	800a03a <pvPortMalloc+0x92>
			if( xWantedSize > 0 )
 8009fc2:	2c00      	cmp	r4, #0
 8009fc4:	d039      	beq.n	800a03a <pvPortMalloc+0x92>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009fc6:	0763      	lsls	r3, r4, #29
				xWantedSize += xHeapStructSize;
 8009fc8:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009fcc:	d002      	beq.n	8009fd4 <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009fce:	f021 0107 	bic.w	r1, r1, #7
 8009fd2:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009fd4:	b389      	cbz	r1, 800a03a <pvPortMalloc+0x92>
 8009fd6:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 800a07c <pvPortMalloc+0xd4>
 8009fda:	f8d8 7000 	ldr.w	r7, [r8]
 8009fde:	428f      	cmp	r7, r1
 8009fe0:	d32b      	bcc.n	800a03a <pvPortMalloc+0x92>
				pxBlock = xStart.pxNextFreeBlock;
 8009fe2:	4b22      	ldr	r3, [pc, #136]	@ (800a06c <pvPortMalloc+0xc4>)
 8009fe4:	681c      	ldr	r4, [r3, #0]
				pxPreviousBlock = &xStart;
 8009fe6:	469c      	mov	ip, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009fe8:	e003      	b.n	8009ff2 <pvPortMalloc+0x4a>
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	b123      	cbz	r3, 8009ff8 <pvPortMalloc+0x50>
 8009fee:	46a4      	mov	ip, r4
 8009ff0:	461c      	mov	r4, r3
 8009ff2:	6862      	ldr	r2, [r4, #4]
 8009ff4:	428a      	cmp	r2, r1
 8009ff6:	d3f8      	bcc.n	8009fea <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8009ff8:	6833      	ldr	r3, [r6, #0]
 8009ffa:	42a3      	cmp	r3, r4
 8009ffc:	d01d      	beq.n	800a03a <pvPortMalloc+0x92>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ffe:	6823      	ldr	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a000:	f8dc 6000 	ldr.w	r6, [ip]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a004:	f8cc 3000 	str.w	r3, [ip]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a008:	1a53      	subs	r3, r2, r1
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a00a:	3608      	adds	r6, #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a00c:	2b10      	cmp	r3, #16
 800a00e:	d821      	bhi.n	800a054 <pvPortMalloc+0xac>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a010:	4b17      	ldr	r3, [pc, #92]	@ (800a070 <pvPortMalloc+0xc8>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a012:	1abf      	subs	r7, r7, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a014:	4315      	orrs	r5, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a016:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a018:	f8c8 7000 	str.w	r7, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a01c:	428f      	cmp	r7, r1
					xNumberOfSuccessfulAllocations++;
 800a01e:	4915      	ldr	r1, [pc, #84]	@ (800a074 <pvPortMalloc+0xcc>)
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a020:	bf38      	it	cc
 800a022:	601f      	strcc	r7, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800a024:	2300      	movs	r3, #0
 800a026:	e9c4 3500 	strd	r3, r5, [r4]
					xNumberOfSuccessfulAllocations++;
 800a02a:	680b      	ldr	r3, [r1, #0]
 800a02c:	3301      	adds	r3, #1
 800a02e:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 800a030:	f7ff f942 	bl	80092b8 <xTaskResumeAll>
}
 800a034:	4630      	mov	r0, r6
 800a036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	( void ) xTaskResumeAll();
 800a03a:	2600      	movs	r6, #0
 800a03c:	f7ff f93c 	bl	80092b8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800a040:	f7f6 fe6c 	bl	8000d1c <vApplicationMallocFailedHook>
}
 800a044:	4630      	mov	r0, r6
 800a046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( pxEnd );
 800a04a:	218d      	movs	r1, #141	@ 0x8d
 800a04c:	480a      	ldr	r0, [pc, #40]	@ (800a078 <pvPortMalloc+0xd0>)
 800a04e:	f7f6 fe53 	bl	8000cf8 <vAssertCalled>
 800a052:	e7b0      	b.n	8009fb6 <pvPortMalloc+0xe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a054:	1860      	adds	r0, r4, r1
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a056:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a058:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800a05a:	f7ff ff7b 	bl	8009f54 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a05e:	6862      	ldr	r2, [r4, #4]
 800a060:	e7d6      	b.n	800a010 <pvPortMalloc+0x68>
 800a062:	bf00      	nop
 800a064:	20000fd0 	.word	0x20000fd0
 800a068:	20000fbc 	.word	0x20000fbc
 800a06c:	20000fd4 	.word	0x20000fd4
 800a070:	20000fc8 	.word	0x20000fc8
 800a074:	20000fc4 	.word	0x20000fc4
 800a078:	080117e0 	.word	0x080117e0
 800a07c:	20000fcc 	.word	0x20000fcc

0800a080 <vPortFree>:
	if( pv != NULL )
 800a080:	2800      	cmp	r0, #0
 800a082:	d03e      	beq.n	800a102 <vPortFree+0x82>
{
 800a084:	b538      	push	{r3, r4, r5, lr}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a086:	4d1f      	ldr	r5, [pc, #124]	@ (800a104 <vPortFree+0x84>)
 800a088:	4604      	mov	r4, r0
 800a08a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a08e:	682a      	ldr	r2, [r5, #0]
 800a090:	4213      	tst	r3, r2
 800a092:	d010      	beq.n	800a0b6 <vPortFree+0x36>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a094:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a098:	b1d9      	cbz	r1, 800a0d2 <vPortFree+0x52>
 800a09a:	f240 1123 	movw	r1, #291	@ 0x123
 800a09e:	481a      	ldr	r0, [pc, #104]	@ (800a108 <vPortFree+0x88>)
 800a0a0:	f7f6 fe2a 	bl	8000cf8 <vAssertCalled>
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a0a4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a0a8:	682a      	ldr	r2, [r5, #0]
 800a0aa:	4213      	tst	r3, r2
 800a0ac:	d002      	beq.n	800a0b4 <vPortFree+0x34>
			if( pxLink->pxNextFreeBlock == NULL )
 800a0ae:	f854 1c08 	ldr.w	r1, [r4, #-8]
 800a0b2:	b171      	cbz	r1, 800a0d2 <vPortFree+0x52>
}
 800a0b4:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a0b6:	f44f 7191 	mov.w	r1, #290	@ 0x122
 800a0ba:	4813      	ldr	r0, [pc, #76]	@ (800a108 <vPortFree+0x88>)
 800a0bc:	f7f6 fe1c 	bl	8000cf8 <vAssertCalled>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a0c0:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d1e8      	bne.n	800a09a <vPortFree+0x1a>
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a0c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a0cc:	682a      	ldr	r2, [r5, #0]
 800a0ce:	4213      	tst	r3, r2
 800a0d0:	d0f0      	beq.n	800a0b4 <vPortFree+0x34>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a0d2:	ea23 0302 	bic.w	r3, r3, r2
 800a0d6:	f844 3c04 	str.w	r3, [r4, #-4]
				vTaskSuspendAll();
 800a0da:	f7ff f80f 	bl	80090fc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a0de:	4a0b      	ldr	r2, [pc, #44]	@ (800a10c <vPortFree+0x8c>)
 800a0e0:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a0e4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a0e8:	6811      	ldr	r1, [r2, #0]
 800a0ea:	440b      	add	r3, r1
 800a0ec:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a0ee:	f7ff ff31 	bl	8009f54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a0f2:	4a07      	ldr	r2, [pc, #28]	@ (800a110 <vPortFree+0x90>)
 800a0f4:	6813      	ldr	r3, [r2, #0]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	6013      	str	r3, [r2, #0]
}
 800a0fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 800a0fe:	f7ff b8db 	b.w	80092b8 <xTaskResumeAll>
 800a102:	4770      	bx	lr
 800a104:	20000fbc 	.word	0x20000fbc
 800a108:	080117e0 	.word	0x080117e0
 800a10c:	20000fcc 	.word	0x20000fcc
 800a110:	20000fc0 	.word	0x20000fc0

0800a114 <xPortGetFreeHeapSize>:
	return xFreeBytesRemaining;
 800a114:	4b01      	ldr	r3, [pc, #4]	@ (800a11c <xPortGetFreeHeapSize+0x8>)
}
 800a116:	6818      	ldr	r0, [r3, #0]
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	20000fcc 	.word	0x20000fcc

0800a120 <xPortGetMinimumEverFreeHeapSize>:
	return xMinimumEverFreeBytesRemaining;
 800a120:	4b01      	ldr	r3, [pc, #4]	@ (800a128 <xPortGetMinimumEverFreeHeapSize+0x8>)
}
 800a122:	6818      	ldr	r0, [r3, #0]
 800a124:	4770      	bx	lr
 800a126:	bf00      	nop
 800a128:	20000fc8 	.word	0x20000fc8

0800a12c <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800a12c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
BaseType_t xDefinedRegions = 0;
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800a130:	4b37      	ldr	r3, [pc, #220]	@ (800a210 <vPortDefineHeapRegions+0xe4>)
{
 800a132:	4606      	mov	r6, r0
	configASSERT( pxEnd == NULL );
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	b12a      	cbz	r2, 800a144 <vPortDefineHeapRegions+0x18>
 800a138:	f240 1197 	movw	r1, #407	@ 0x197
 800a13c:	4835      	ldr	r0, [pc, #212]	@ (800a214 <vPortDefineHeapRegions+0xe8>)
 800a13e:	f7f6 fddb 	bl	8000cf8 <vAssertCalled>
 800a142:	4b33      	ldr	r3, [pc, #204]	@ (800a210 <vPortDefineHeapRegions+0xe4>)

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );

	while( pxHeapRegion->xSizeInBytes > 0 )
 800a144:	6875      	ldr	r5, [r6, #4]
 800a146:	2d00      	cmp	r5, #0
 800a148:	d053      	beq.n	800a1f2 <vPortDefineHeapRegions+0xc6>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800a14a:	2700      	movs	r7, #0
 800a14c:	6819      	ldr	r1, [r3, #0]
 800a14e:	3608      	adds	r6, #8
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800a150:	f8df b0d0 	ldr.w	fp, [pc, #208]	@ 800a224 <vPortDefineHeapRegions+0xf8>
			configASSERT( pxEnd != NULL );
 800a154:	46b8      	mov	r8, r7
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
		xAddress -= xHeapStructSize;
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
		pxEnd = ( BlockLink_t * ) xAddress;
		pxEnd->xBlockSize = 0;
 800a156:	46b9      	mov	r9, r7
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800a158:	f856 4c08 	ldr.w	r4, [r6, #-8]
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a15c:	0762      	lsls	r2, r4, #29
 800a15e:	f1a4 0a08 	sub.w	sl, r4, #8
 800a162:	d002      	beq.n	800a16a <vPortDefineHeapRegions+0x3e>
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800a164:	3407      	adds	r4, #7
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800a166:	f024 0407 	bic.w	r4, r4, #7
		if( xDefinedRegions == 0 )
 800a16a:	bb1f      	cbnz	r7, 800a1b4 <vPortDefineHeapRegions+0x88>
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800a16c:	460a      	mov	r2, r1
			xStart.xBlockSize = ( size_t ) 0;
 800a16e:	e9cb 4700 	strd	r4, r7, [fp]
		xAddress -= xHeapStructSize;
 800a172:	eb0a 0105 	add.w	r1, sl, r5
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800a176:	f021 0107 	bic.w	r1, r1, #7

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800a17a:	1b08      	subs	r0, r1, r4
		pxEnd = ( BlockLink_t * ) xAddress;
 800a17c:	6019      	str	r1, [r3, #0]
		pxEnd->pxNextFreeBlock = NULL;
 800a17e:	e9c1 9900 	strd	r9, r9, [r1]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800a182:	e9c4 1000 	strd	r1, r0, [r4]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800a186:	b102      	cbz	r2, 800a18a <vPortDefineHeapRegions+0x5e>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800a188:	6014      	str	r4, [r2, #0]
	while( pxHeapRegion->xSizeInBytes > 0 )
 800a18a:	6875      	ldr	r5, [r6, #4]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800a18c:	4480      	add	r8, r0
	while( pxHeapRegion->xSizeInBytes > 0 )
 800a18e:	3608      	adds	r6, #8

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800a190:	3701      	adds	r7, #1
	while( pxHeapRegion->xSizeInBytes > 0 )
 800a192:	2d00      	cmp	r5, #0
 800a194:	d1e0      	bne.n	800a158 <vPortDefineHeapRegions+0x2c>
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800a196:	4a20      	ldr	r2, [pc, #128]	@ (800a218 <vPortDefineHeapRegions+0xec>)
	xFreeBytesRemaining = xTotalHeapSize;
 800a198:	4b20      	ldr	r3, [pc, #128]	@ (800a21c <vPortDefineHeapRegions+0xf0>)
	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800a19a:	f8c2 8000 	str.w	r8, [r2]
	xFreeBytesRemaining = xTotalHeapSize;
 800a19e:	f8c3 8000 	str.w	r8, [r3]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800a1a2:	f1b8 0f00 	cmp.w	r8, #0
 800a1a6:	d028      	beq.n	800a1fa <vPortDefineHeapRegions+0xce>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a1a8:	4b1d      	ldr	r3, [pc, #116]	@ (800a220 <vPortDefineHeapRegions+0xf4>)
 800a1aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a1ae:	601a      	str	r2, [r3, #0]
}
 800a1b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			configASSERT( pxEnd != NULL );
 800a1b4:	b161      	cbz	r1, 800a1d0 <vPortDefineHeapRegions+0xa4>
			configASSERT( xAddress > ( size_t ) pxEnd );
 800a1b6:	42a1      	cmp	r1, r4
 800a1b8:	d213      	bcs.n	800a1e2 <vPortDefineHeapRegions+0xb6>
		xAddress -= xHeapStructSize;
 800a1ba:	4455      	add	r5, sl
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800a1bc:	460a      	mov	r2, r1
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800a1be:	f025 0107 	bic.w	r1, r5, #7
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800a1c2:	1b08      	subs	r0, r1, r4
		pxEnd = ( BlockLink_t * ) xAddress;
 800a1c4:	6019      	str	r1, [r3, #0]
		pxEnd->pxNextFreeBlock = NULL;
 800a1c6:	e9c1 9900 	strd	r9, r9, [r1]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800a1ca:	6021      	str	r1, [r4, #0]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800a1cc:	6060      	str	r0, [r4, #4]
		if( pxPreviousFreeBlock != NULL )
 800a1ce:	e7db      	b.n	800a188 <vPortDefineHeapRegions+0x5c>
			configASSERT( pxEnd != NULL );
 800a1d0:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 800a1d4:	480f      	ldr	r0, [pc, #60]	@ (800a214 <vPortDefineHeapRegions+0xe8>)
 800a1d6:	f7f6 fd8f 	bl	8000cf8 <vAssertCalled>
			configASSERT( xAddress > ( size_t ) pxEnd );
 800a1da:	4b0d      	ldr	r3, [pc, #52]	@ (800a210 <vPortDefineHeapRegions+0xe4>)
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	42a2      	cmp	r2, r4
 800a1e0:	d3c7      	bcc.n	800a172 <vPortDefineHeapRegions+0x46>
 800a1e2:	f240 11bb 	movw	r1, #443	@ 0x1bb
 800a1e6:	480b      	ldr	r0, [pc, #44]	@ (800a214 <vPortDefineHeapRegions+0xe8>)
 800a1e8:	f7f6 fd86 	bl	8000cf8 <vAssertCalled>
		pxPreviousFreeBlock = pxEnd;
 800a1ec:	4b08      	ldr	r3, [pc, #32]	@ (800a210 <vPortDefineHeapRegions+0xe4>)
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	e7bf      	b.n	800a172 <vPortDefineHeapRegions+0x46>
	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800a1f2:	4a09      	ldr	r2, [pc, #36]	@ (800a218 <vPortDefineHeapRegions+0xec>)
	xFreeBytesRemaining = xTotalHeapSize;
 800a1f4:	4b09      	ldr	r3, [pc, #36]	@ (800a21c <vPortDefineHeapRegions+0xf0>)
	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800a1f6:	6015      	str	r5, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800a1f8:	601d      	str	r5, [r3, #0]
	configASSERT( xTotalHeapSize );
 800a1fa:	f44f 71f2 	mov.w	r1, #484	@ 0x1e4
 800a1fe:	4805      	ldr	r0, [pc, #20]	@ (800a214 <vPortDefineHeapRegions+0xe8>)
 800a200:	f7f6 fd7a 	bl	8000cf8 <vAssertCalled>
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a204:	4b06      	ldr	r3, [pc, #24]	@ (800a220 <vPortDefineHeapRegions+0xf4>)
 800a206:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a20a:	601a      	str	r2, [r3, #0]
}
 800a20c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a210:	20000fd0 	.word	0x20000fd0
 800a214:	080117e0 	.word	0x080117e0
 800a218:	20000fc8 	.word	0x20000fc8
 800a21c:	20000fcc 	.word	0x20000fcc
 800a220:	20000fbc 	.word	0x20000fbc
 800a224:	20000fd4 	.word	0x20000fd4

0800a228 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800a228:	4b0f      	ldr	r3, [pc, #60]	@ (800a268 <HAL_InitTick+0x40>)
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	b90b      	cbnz	r3, 800a232 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800a22e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800a230:	4770      	bx	lr
{
 800a232:	b510      	push	{r4, lr}
 800a234:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800a236:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a23a:	4a0c      	ldr	r2, [pc, #48]	@ (800a26c <HAL_InitTick+0x44>)
 800a23c:	fbb0 f3f3 	udiv	r3, r0, r3
 800a240:	6810      	ldr	r0, [r2, #0]
 800a242:	fbb0 f0f3 	udiv	r0, r0, r3
 800a246:	f000 f8c3 	bl	800a3d0 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a24a:	b908      	cbnz	r0, 800a250 <HAL_InitTick+0x28>
 800a24c:	2c0f      	cmp	r4, #15
 800a24e:	d901      	bls.n	800a254 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 800a250:	2001      	movs	r0, #1
}
 800a252:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a254:	2200      	movs	r2, #0
 800a256:	4621      	mov	r1, r4
 800a258:	f04f 30ff 	mov.w	r0, #4294967295
 800a25c:	f000 f86e 	bl	800a33c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a260:	4b03      	ldr	r3, [pc, #12]	@ (800a270 <HAL_InitTick+0x48>)
 800a262:	2000      	movs	r0, #0
 800a264:	601c      	str	r4, [r3, #0]
}
 800a266:	bd10      	pop	{r4, pc}
 800a268:	20000030 	.word	0x20000030
 800a26c:	20000004 	.word	0x20000004
 800a270:	20000034 	.word	0x20000034

0800a274 <HAL_Init>:
{
 800a274:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a276:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a278:	4c12      	ldr	r4, [pc, #72]	@ (800a2c4 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a27a:	f000 f84d 	bl	800a318 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a27e:	f000 fdd9 	bl	800ae34 <HAL_RCC_GetSysClockFreq>
 800a282:	4b11      	ldr	r3, [pc, #68]	@ (800a2c8 <HAL_Init+0x54>)
 800a284:	4911      	ldr	r1, [pc, #68]	@ (800a2cc <HAL_Init+0x58>)
 800a286:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a288:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a28a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a28e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a292:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a294:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a296:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 800a29a:	490d      	ldr	r1, [pc, #52]	@ (800a2d0 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a29c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a2a0:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a2a2:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800a2a6:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a2a8:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a2aa:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a2ac:	f7ff ffbc 	bl	800a228 <HAL_InitTick>
 800a2b0:	b110      	cbz	r0, 800a2b8 <HAL_Init+0x44>
    return HAL_ERROR;
 800a2b2:	2401      	movs	r4, #1
}
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	bd10      	pop	{r4, pc}
 800a2b8:	4604      	mov	r4, r0
  HAL_MspInit();
 800a2ba:	f7f6 fdc1 	bl	8000e40 <HAL_MspInit>
}
 800a2be:	4620      	mov	r0, r4
 800a2c0:	bd10      	pop	{r4, pc}
 800a2c2:	bf00      	nop
 800a2c4:	20000000 	.word	0x20000000
 800a2c8:	58024400 	.word	0x58024400
 800a2cc:	0800fe48 	.word	0x0800fe48
 800a2d0:	20000004 	.word	0x20000004

0800a2d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800a2d4:	4a03      	ldr	r2, [pc, #12]	@ (800a2e4 <HAL_IncTick+0x10>)
 800a2d6:	4b04      	ldr	r3, [pc, #16]	@ (800a2e8 <HAL_IncTick+0x14>)
 800a2d8:	6811      	ldr	r1, [r2, #0]
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	440b      	add	r3, r1
 800a2de:	6013      	str	r3, [r2, #0]
}
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	20000fdc 	.word	0x20000fdc
 800a2e8:	20000030 	.word	0x20000030

0800a2ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800a2ec:	4b01      	ldr	r3, [pc, #4]	@ (800a2f4 <HAL_GetTick+0x8>)
 800a2ee:	6818      	ldr	r0, [r3, #0]
}
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	20000fdc 	.word	0x20000fdc

0800a2f8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800a2f8:	4b01      	ldr	r3, [pc, #4]	@ (800a300 <HAL_GetREVID+0x8>)
 800a2fa:	6818      	ldr	r0, [r3, #0]
}
 800a2fc:	0c00      	lsrs	r0, r0, #16
 800a2fe:	4770      	bx	lr
 800a300:	5c001000 	.word	0x5c001000

0800a304 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800a304:	4a03      	ldr	r2, [pc, #12]	@ (800a314 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 800a306:	6853      	ldr	r3, [r2, #4]
 800a308:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800a30c:	4303      	orrs	r3, r0
 800a30e:	6053      	str	r3, [r2, #4]
}
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	58000400 	.word	0x58000400

0800a318 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a318:	4906      	ldr	r1, [pc, #24]	@ (800a334 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a31a:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a31e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800a320:	4b05      	ldr	r3, [pc, #20]	@ (800a338 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a322:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a324:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a328:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a32c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800a32e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800a330:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800a332:	4770      	bx	lr
 800a334:	e000ed00 	.word	0xe000ed00
 800a338:	05fa0000 	.word	0x05fa0000

0800a33c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a33c:	4b1a      	ldr	r3, [pc, #104]	@ (800a3a8 <HAL_NVIC_SetPriority+0x6c>)
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a344:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a346:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a34a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a34e:	f1be 0f04 	cmp.w	lr, #4
 800a352:	bf28      	it	cs
 800a354:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a358:	f1bc 0f06 	cmp.w	ip, #6
 800a35c:	d91a      	bls.n	800a394 <HAL_NVIC_SetPriority+0x58>
 800a35e:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a362:	f04f 33ff 	mov.w	r3, #4294967295
 800a366:	fa03 f30c 	lsl.w	r3, r3, ip
 800a36a:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a36e:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800a372:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a374:	fa03 f30e 	lsl.w	r3, r3, lr
 800a378:	ea21 0303 	bic.w	r3, r1, r3
 800a37c:	fa03 f30c 	lsl.w	r3, r3, ip
 800a380:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a384:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800a388:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800a38a:	db06      	blt.n	800a39a <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a38c:	4a07      	ldr	r2, [pc, #28]	@ (800a3ac <HAL_NVIC_SetPriority+0x70>)
 800a38e:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800a390:	f85d fb04 	ldr.w	pc, [sp], #4
 800a394:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a396:	4694      	mov	ip, r2
 800a398:	e7e9      	b.n	800a36e <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a39a:	f000 000f 	and.w	r0, r0, #15
 800a39e:	4a04      	ldr	r2, [pc, #16]	@ (800a3b0 <HAL_NVIC_SetPriority+0x74>)
 800a3a0:	5413      	strb	r3, [r2, r0]
 800a3a2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a3a6:	bf00      	nop
 800a3a8:	e000ed00 	.word	0xe000ed00
 800a3ac:	e000e400 	.word	0xe000e400
 800a3b0:	e000ed14 	.word	0xe000ed14

0800a3b4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	db07      	blt.n	800a3c8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	f000 011f 	and.w	r1, r0, #31
 800a3be:	4a03      	ldr	r2, [pc, #12]	@ (800a3cc <HAL_NVIC_EnableIRQ+0x18>)
 800a3c0:	0940      	lsrs	r0, r0, #5
 800a3c2:	408b      	lsls	r3, r1
 800a3c4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	e000e100 	.word	0xe000e100

0800a3d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a3d0:	1e43      	subs	r3, r0, #1
 800a3d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a3d6:	d301      	bcc.n	800a3dc <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a3d8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800a3da:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a3dc:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a3e0:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3e2:	4905      	ldr	r1, [pc, #20]	@ (800a3f8 <HAL_SYSTICK_Config+0x28>)
 800a3e4:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a3e8:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a3ea:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3ec:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a3f0:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a3f2:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	e000ed00 	.word	0xe000ed00

0800a3fc <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800a3fc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800a400:	4b04      	ldr	r3, [pc, #16]	@ (800a414 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800a402:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800a404:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a406:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a40a:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 800a40c:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	e000ed00 	.word	0xe000ed00

0800a418 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800a418:	4b06      	ldr	r3, [pc, #24]	@ (800a434 <HAL_MPU_Enable+0x1c>)
 800a41a:	f040 0001 	orr.w	r0, r0, #1
 800a41e:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800a422:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a424:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a428:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800a42a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a42e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800a432:	4770      	bx	lr
 800a434:	e000ed00 	.word	0xe000ed00

0800a438 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800a438:	4a16      	ldr	r2, [pc, #88]	@ (800a494 <HAL_MPU_ConfigRegion+0x5c>)
 800a43a:	7843      	ldrb	r3, [r0, #1]
 800a43c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800a440:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 800a444:	f023 0301 	bic.w	r3, r3, #1
 800a448:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800a44c:	6843      	ldr	r3, [r0, #4]
 800a44e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a452:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a454:	f890 c00c 	ldrb.w	ip, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a458:	061b      	lsls	r3, r3, #24
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800a45a:	7801      	ldrb	r1, [r0, #0]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a45c:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a460:	f890 c00a 	ldrb.w	ip, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a464:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a466:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a468:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a46c:	f890 c00e 	ldrb.w	ip, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a470:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800a474:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a476:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800a47a:	f890 c009 	ldrb.w	ip, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a47e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a482:	7a01      	ldrb	r1, [r0, #8]
 800a484:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800a488:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a48c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	e000ed00 	.word	0xe000ed00

0800a498 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a49c:	680c      	ldr	r4, [r1, #0]
{
 800a49e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a4a0:	2c00      	cmp	r4, #0
 800a4a2:	f000 80a5 	beq.w	800a5f0 <HAL_GPIO_Init+0x158>
  uint32_t position = 0x00U;
 800a4a6:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a4a8:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a4ac:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a4b0:	9100      	str	r1, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a4b2:	fa0b fc03 	lsl.w	ip, fp, r3
    if (iocurrent != 0x00U)
 800a4b6:	ea1c 0a04 	ands.w	sl, ip, r4
 800a4ba:	f000 8094 	beq.w	800a5e6 <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a4be:	9900      	ldr	r1, [sp, #0]
 800a4c0:	005f      	lsls	r7, r3, #1
 800a4c2:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a4c4:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a4c6:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a4ca:	fa01 f607 	lsl.w	r6, r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a4ce:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a4d2:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a4d4:	f1b8 0f01 	cmp.w	r8, #1
 800a4d8:	f240 808d 	bls.w	800a5f6 <HAL_GPIO_Init+0x15e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a4dc:	2a03      	cmp	r2, #3
 800a4de:	f040 80cb 	bne.w	800a678 <HAL_GPIO_Init+0x1e0>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a4e2:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 800a4e4:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a4e6:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a4ea:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a4ee:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 800a4f2:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a4f4:	d077      	beq.n	800a5e6 <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a4f6:	4e7f      	ldr	r6, [pc, #508]	@ (800a6f4 <HAL_GPIO_Init+0x25c>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a4f8:	f003 0703 	and.w	r7, r3, #3
 800a4fc:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a4fe:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a502:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a504:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a508:	fa01 fc07 	lsl.w	ip, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a50c:	497a      	ldr	r1, [pc, #488]	@ (800a6f8 <HAL_GPIO_Init+0x260>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a50e:	f8c6 20f4 	str.w	r2, [r6, #244]	@ 0xf4
 800a512:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
 800a516:	f023 0603 	bic.w	r6, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a51a:	4288      	cmp	r0, r1
 800a51c:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a520:	f002 0202 	and.w	r2, r2, #2
 800a524:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800a528:	9203      	str	r2, [sp, #12]
 800a52a:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800a52c:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a52e:	ea22 020c 	bic.w	r2, r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a532:	d031      	beq.n	800a598 <HAL_GPIO_Init+0x100>
 800a534:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800a538:	4288      	cmp	r0, r1
 800a53a:	f000 80b0 	beq.w	800a69e <HAL_GPIO_Init+0x206>
 800a53e:	496f      	ldr	r1, [pc, #444]	@ (800a6fc <HAL_GPIO_Init+0x264>)
 800a540:	4288      	cmp	r0, r1
 800a542:	f000 80b2 	beq.w	800a6aa <HAL_GPIO_Init+0x212>
 800a546:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 800a700 <HAL_GPIO_Init+0x268>
 800a54a:	4560      	cmp	r0, ip
 800a54c:	f000 80a1 	beq.w	800a692 <HAL_GPIO_Init+0x1fa>
 800a550:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 800a704 <HAL_GPIO_Init+0x26c>
 800a554:	4560      	cmp	r0, ip
 800a556:	f000 80b4 	beq.w	800a6c2 <HAL_GPIO_Init+0x22a>
 800a55a:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 800a708 <HAL_GPIO_Init+0x270>
 800a55e:	4560      	cmp	r0, ip
 800a560:	f000 80b5 	beq.w	800a6ce <HAL_GPIO_Init+0x236>
 800a564:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 800a70c <HAL_GPIO_Init+0x274>
 800a568:	4560      	cmp	r0, ip
 800a56a:	f000 80a4 	beq.w	800a6b6 <HAL_GPIO_Init+0x21e>
 800a56e:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 800a710 <HAL_GPIO_Init+0x278>
 800a572:	4560      	cmp	r0, ip
 800a574:	f000 80b1 	beq.w	800a6da <HAL_GPIO_Init+0x242>
 800a578:	f8df c198 	ldr.w	ip, [pc, #408]	@ 800a714 <HAL_GPIO_Init+0x27c>
 800a57c:	4560      	cmp	r0, ip
 800a57e:	f000 80b2 	beq.w	800a6e6 <HAL_GPIO_Init+0x24e>
 800a582:	f8df c194 	ldr.w	ip, [pc, #404]	@ 800a718 <HAL_GPIO_Init+0x280>
 800a586:	4560      	cmp	r0, ip
 800a588:	bf0c      	ite	eq
 800a58a:	f04f 0c09 	moveq.w	ip, #9
 800a58e:	f04f 0c0a 	movne.w	ip, #10
 800a592:	fa0c f707 	lsl.w	r7, ip, r7
 800a596:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a598:	60b2      	str	r2, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a59a:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 800a59c:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~(iocurrent);
 800a5a0:	ea6f 060a 	mvn.w	r6, sl
        {
          temp |= iocurrent;
 800a5a4:	bf4c      	ite	mi
 800a5a6:	ea4a 0202 	orrmi.w	r2, sl, r2
        temp &= ~(iocurrent);
 800a5aa:	4032      	andpl	r2, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a5ac:	02a9      	lsls	r1, r5, #10
        EXTI->RTSR1 = temp;
 800a5ae:	f8ce 2000 	str.w	r2, [lr]
        temp = EXTI->FTSR1;
 800a5b2:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(iocurrent);
 800a5b6:	bf54      	ite	pl
 800a5b8:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 800a5ba:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a5be:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 800a5c0:	f8ce 2004 	str.w	r2, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800a5c4:	f8de 2084 	ldr.w	r2, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 800a5c8:	bf54      	ite	pl
 800a5ca:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 800a5cc:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a5d0:	03e9      	lsls	r1, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800a5d2:	f8ce 2084 	str.w	r2, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800a5d6:	f8de 2080 	ldr.w	r2, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 800a5da:	bf54      	ite	pl
 800a5dc:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 800a5de:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a5e2:	f8ce 2080 	str.w	r2, [lr, #128]	@ 0x80
      }
    }

    position++;
 800a5e6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a5e8:	fa34 f203 	lsrs.w	r2, r4, r3
 800a5ec:	f47f af61 	bne.w	800a4b2 <HAL_GPIO_Init+0x1a>
  }
}
 800a5f0:	b005      	add	sp, #20
 800a5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a5f6:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a5f8:	2a02      	cmp	r2, #2
        temp = GPIOx->OSPEEDR;
 800a5fa:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a5fe:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a600:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a604:	fa01 f807 	lsl.w	r8, r1, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a608:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a60a:	ea48 0809 	orr.w	r8, r8, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a60e:	6889      	ldr	r1, [r1, #8]
        GPIOx->OSPEEDR = temp;
 800a610:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a614:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 800a618:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a61c:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a620:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a624:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 800a628:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a62c:	fa01 fc07 	lsl.w	ip, r1, r7
      temp = GPIOx->PUPDR;
 800a630:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a634:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a638:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 800a63c:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a640:	f47f af4f 	bne.w	800a4e2 <HAL_GPIO_Init+0x4a>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a644:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a648:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
 800a64a:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a64e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a652:	6909      	ldr	r1, [r1, #16]
 800a654:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800a658:	fa01 f10c 	lsl.w	r1, r1, ip
        temp = GPIOx->AFR[position >> 3U];
 800a65c:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a660:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a662:	210f      	movs	r1, #15
 800a664:	fa01 fc0c 	lsl.w	ip, r1, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a668:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a66a:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a66e:	ea41 0c09 	orr.w	ip, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
 800a672:	f8c8 c020 	str.w	ip, [r8, #32]
 800a676:	e734      	b.n	800a4e2 <HAL_GPIO_Init+0x4a>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a678:	9900      	ldr	r1, [sp, #0]
      temp = GPIOx->PUPDR;
 800a67a:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a67e:	6889      	ldr	r1, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a680:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a684:	fa01 fc07 	lsl.w	ip, r1, r7
 800a688:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 800a68c:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a690:	e727      	b.n	800a4e2 <HAL_GPIO_Init+0x4a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a692:	f04f 0c03 	mov.w	ip, #3
 800a696:	fa0c f707 	lsl.w	r7, ip, r7
 800a69a:	433a      	orrs	r2, r7
 800a69c:	e77c      	b.n	800a598 <HAL_GPIO_Init+0x100>
 800a69e:	f04f 0c01 	mov.w	ip, #1
 800a6a2:	fa0c f707 	lsl.w	r7, ip, r7
 800a6a6:	433a      	orrs	r2, r7
 800a6a8:	e776      	b.n	800a598 <HAL_GPIO_Init+0x100>
 800a6aa:	f04f 0c02 	mov.w	ip, #2
 800a6ae:	fa0c f707 	lsl.w	r7, ip, r7
 800a6b2:	433a      	orrs	r2, r7
 800a6b4:	e770      	b.n	800a598 <HAL_GPIO_Init+0x100>
 800a6b6:	f04f 0c06 	mov.w	ip, #6
 800a6ba:	fa0c f707 	lsl.w	r7, ip, r7
 800a6be:	433a      	orrs	r2, r7
 800a6c0:	e76a      	b.n	800a598 <HAL_GPIO_Init+0x100>
 800a6c2:	f04f 0c04 	mov.w	ip, #4
 800a6c6:	fa0c f707 	lsl.w	r7, ip, r7
 800a6ca:	433a      	orrs	r2, r7
 800a6cc:	e764      	b.n	800a598 <HAL_GPIO_Init+0x100>
 800a6ce:	f04f 0c05 	mov.w	ip, #5
 800a6d2:	fa0c f707 	lsl.w	r7, ip, r7
 800a6d6:	433a      	orrs	r2, r7
 800a6d8:	e75e      	b.n	800a598 <HAL_GPIO_Init+0x100>
 800a6da:	f04f 0c07 	mov.w	ip, #7
 800a6de:	fa0c f707 	lsl.w	r7, ip, r7
 800a6e2:	433a      	orrs	r2, r7
 800a6e4:	e758      	b.n	800a598 <HAL_GPIO_Init+0x100>
 800a6e6:	f04f 0c08 	mov.w	ip, #8
 800a6ea:	fa0c f707 	lsl.w	r7, ip, r7
 800a6ee:	433a      	orrs	r2, r7
 800a6f0:	e752      	b.n	800a598 <HAL_GPIO_Init+0x100>
 800a6f2:	bf00      	nop
 800a6f4:	58024400 	.word	0x58024400
 800a6f8:	58020000 	.word	0x58020000
 800a6fc:	58020800 	.word	0x58020800
 800a700:	58020c00 	.word	0x58020c00
 800a704:	58021000 	.word	0x58021000
 800a708:	58021400 	.word	0x58021400
 800a70c:	58021800 	.word	0x58021800
 800a710:	58021c00 	.word	0x58021c00
 800a714:	58022000 	.word	0x58022000
 800a718:	58022400 	.word	0x58022400

0800a71c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a71c:	b902      	cbnz	r2, 800a720 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a71e:	0409      	lsls	r1, r1, #16
 800a720:	6181      	str	r1, [r0, #24]
  }
}
 800a722:	4770      	bx	lr

0800a724 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a724:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a726:	4c10      	ldr	r4, [pc, #64]	@ (800a768 <HAL_PWREx_ConfigSupply+0x44>)
 800a728:	68e3      	ldr	r3, [r4, #12]
 800a72a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a72e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a730:	d105      	bne.n	800a73e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a732:	f003 0307 	and.w	r3, r3, #7
 800a736:	1a18      	subs	r0, r3, r0
 800a738:	bf18      	it	ne
 800a73a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800a73c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a73e:	f023 0307 	bic.w	r3, r3, #7
 800a742:	4303      	orrs	r3, r0
 800a744:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 800a746:	f7ff fdd1 	bl	800a2ec <HAL_GetTick>
 800a74a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a74c:	e005      	b.n	800a75a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a74e:	f7ff fdcd 	bl	800a2ec <HAL_GetTick>
 800a752:	1b40      	subs	r0, r0, r5
 800a754:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800a758:	d804      	bhi.n	800a764 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a75a:	6863      	ldr	r3, [r4, #4]
 800a75c:	049b      	lsls	r3, r3, #18
 800a75e:	d5f6      	bpl.n	800a74e <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 800a760:	2000      	movs	r0, #0
}
 800a762:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800a764:	2001      	movs	r0, #1
}
 800a766:	bd38      	pop	{r3, r4, r5, pc}
 800a768:	58024800 	.word	0x58024800

0800a76c <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a76c:	4b33      	ldr	r3, [pc, #204]	@ (800a83c <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800a76e:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a770:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a772:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a774:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800a776:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a77a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a77c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800a780:	d036      	beq.n	800a7f0 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a782:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a786:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a78a:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a78e:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a792:	fb05 f202 	mul.w	r2, r5, r2
 800a796:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a798:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a79c:	ee06 2a90 	vmov	s13, r2
 800a7a0:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800a7a4:	d002      	beq.n	800a7ac <HAL_RCC_GetSysClockFreq.part.0+0x40>
 800a7a6:	2902      	cmp	r1, #2
 800a7a8:	d042      	beq.n	800a830 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 800a7aa:	b319      	cbz	r1, 800a7f4 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7ac:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800a840 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800a7b0:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800a7b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ba:	ee07 3a90 	vmov	s15, r3
 800a7be:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800a7c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ca:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a7ce:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a7d2:	4b1a      	ldr	r3, [pc, #104]	@ (800a83c <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 800a7d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7d6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a7da:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a7dc:	ee07 3a10 	vmov	s14, r3
 800a7e0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800a7e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a7e8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800a7ec:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800a7f0:	bc30      	pop	{r4, r5}
 800a7f2:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	0692      	lsls	r2, r2, #26
 800a7f8:	d51d      	bpl.n	800a836 <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7fa:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7fc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a800:	4a10      	ldr	r2, [pc, #64]	@ (800a844 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a804:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a808:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a80c:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a80e:	ee07 3a90 	vmov	s15, r3
 800a812:	ee06 2a10 	vmov	s12, r2
 800a816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a81a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800a81e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a822:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800a826:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800a82a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a82e:	e7d0      	b.n	800a7d2 <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a830:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a848 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 800a834:	e7bc      	b.n	800a7b0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a836:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a84c <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 800a83a:	e7b9      	b.n	800a7b0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800a83c:	58024400 	.word	0x58024400
 800a840:	4a742400 	.word	0x4a742400
 800a844:	03d09000 	.word	0x03d09000
 800a848:	4af42400 	.word	0x4af42400
 800a84c:	4c742400 	.word	0x4c742400

0800a850 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800a850:	2800      	cmp	r0, #0
 800a852:	f000 82e9 	beq.w	800ae28 <HAL_RCC_OscConfig+0x5d8>
{
 800a856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a858:	6803      	ldr	r3, [r0, #0]
 800a85a:	4604      	mov	r4, r0
 800a85c:	07d9      	lsls	r1, r3, #31
 800a85e:	d52e      	bpl.n	800a8be <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a860:	4997      	ldr	r1, [pc, #604]	@ (800aac0 <HAL_RCC_OscConfig+0x270>)
 800a862:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a864:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a866:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a86a:	2a10      	cmp	r2, #16
 800a86c:	f000 80ee 	beq.w	800aa4c <HAL_RCC_OscConfig+0x1fc>
 800a870:	2a18      	cmp	r2, #24
 800a872:	f000 80e6 	beq.w	800aa42 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a876:	6863      	ldr	r3, [r4, #4]
 800a878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a87c:	f000 8111 	beq.w	800aaa2 <HAL_RCC_OscConfig+0x252>
 800a880:	2b00      	cmp	r3, #0
 800a882:	f000 8167 	beq.w	800ab54 <HAL_RCC_OscConfig+0x304>
 800a886:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a88a:	4b8d      	ldr	r3, [pc, #564]	@ (800aac0 <HAL_RCC_OscConfig+0x270>)
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	f000 828a 	beq.w	800ada6 <HAL_RCC_OscConfig+0x556>
 800a892:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a896:	601a      	str	r2, [r3, #0]
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a89e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a8a0:	f7ff fd24 	bl	800a2ec <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a8a4:	4e86      	ldr	r6, [pc, #536]	@ (800aac0 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800a8a6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a8a8:	e005      	b.n	800a8b6 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a8aa:	f7ff fd1f 	bl	800a2ec <HAL_GetTick>
 800a8ae:	1b40      	subs	r0, r0, r5
 800a8b0:	2864      	cmp	r0, #100	@ 0x64
 800a8b2:	f200 814d 	bhi.w	800ab50 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a8b6:	6833      	ldr	r3, [r6, #0]
 800a8b8:	039b      	lsls	r3, r3, #14
 800a8ba:	d5f6      	bpl.n	800a8aa <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a8bc:	6823      	ldr	r3, [r4, #0]
 800a8be:	079d      	lsls	r5, r3, #30
 800a8c0:	d470      	bmi.n	800a9a4 <HAL_RCC_OscConfig+0x154>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a8c2:	06d9      	lsls	r1, r3, #27
 800a8c4:	d533      	bpl.n	800a92e <HAL_RCC_OscConfig+0xde>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8c6:	4a7e      	ldr	r2, [pc, #504]	@ (800aac0 <HAL_RCC_OscConfig+0x270>)
 800a8c8:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a8ca:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a8d0:	2b08      	cmp	r3, #8
 800a8d2:	f000 80cb 	beq.w	800aa6c <HAL_RCC_OscConfig+0x21c>
 800a8d6:	2b18      	cmp	r3, #24
 800a8d8:	f000 80c3 	beq.w	800aa62 <HAL_RCC_OscConfig+0x212>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a8dc:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800a8de:	4d78      	ldr	r5, [pc, #480]	@ (800aac0 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f000 816f 	beq.w	800abc4 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_CSI_ENABLE();
 800a8e6:	682b      	ldr	r3, [r5, #0]
 800a8e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8ec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a8ee:	f7ff fcfd 	bl	800a2ec <HAL_GetTick>
 800a8f2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a8f4:	e005      	b.n	800a902 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a8f6:	f7ff fcf9 	bl	800a2ec <HAL_GetTick>
 800a8fa:	1b80      	subs	r0, r0, r6
 800a8fc:	2802      	cmp	r0, #2
 800a8fe:	f200 8127 	bhi.w	800ab50 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a902:	682b      	ldr	r3, [r5, #0]
 800a904:	05db      	lsls	r3, r3, #23
 800a906:	d5f6      	bpl.n	800a8f6 <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a908:	f7ff fcf6 	bl	800a2f8 <HAL_GetREVID>
 800a90c:	f241 0303 	movw	r3, #4099	@ 0x1003
 800a910:	4298      	cmp	r0, r3
 800a912:	f200 8269 	bhi.w	800ade8 <HAL_RCC_OscConfig+0x598>
 800a916:	6a22      	ldr	r2, [r4, #32]
 800a918:	686b      	ldr	r3, [r5, #4]
 800a91a:	2a20      	cmp	r2, #32
 800a91c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800a920:	bf0c      	ite	eq
 800a922:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800a926:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800a92a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a92c:	6823      	ldr	r3, [r4, #0]
 800a92e:	071d      	lsls	r5, r3, #28
 800a930:	d516      	bpl.n	800a960 <HAL_RCC_OscConfig+0x110>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a932:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800a934:	4d62      	ldr	r5, [pc, #392]	@ (800aac0 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a936:	2b00      	cmp	r3, #0
 800a938:	f000 8122 	beq.w	800ab80 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_LSI_ENABLE();
 800a93c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a93e:	f043 0301 	orr.w	r3, r3, #1
 800a942:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800a944:	f7ff fcd2 	bl	800a2ec <HAL_GetTick>
 800a948:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a94a:	e005      	b.n	800a958 <HAL_RCC_OscConfig+0x108>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a94c:	f7ff fcce 	bl	800a2ec <HAL_GetTick>
 800a950:	1b80      	subs	r0, r0, r6
 800a952:	2802      	cmp	r0, #2
 800a954:	f200 80fc 	bhi.w	800ab50 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a958:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a95a:	0798      	lsls	r0, r3, #30
 800a95c:	d5f6      	bpl.n	800a94c <HAL_RCC_OscConfig+0xfc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a95e:	6823      	ldr	r3, [r4, #0]
 800a960:	069a      	lsls	r2, r3, #26
 800a962:	d516      	bpl.n	800a992 <HAL_RCC_OscConfig+0x142>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a964:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800a966:	4d56      	ldr	r5, [pc, #344]	@ (800aac0 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f000 811a 	beq.w	800aba2 <HAL_RCC_OscConfig+0x352>
      __HAL_RCC_HSI48_ENABLE();
 800a96e:	682b      	ldr	r3, [r5, #0]
 800a970:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a974:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a976:	f7ff fcb9 	bl	800a2ec <HAL_GetTick>
 800a97a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a97c:	e005      	b.n	800a98a <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a97e:	f7ff fcb5 	bl	800a2ec <HAL_GetTick>
 800a982:	1b80      	subs	r0, r0, r6
 800a984:	2802      	cmp	r0, #2
 800a986:	f200 80e3 	bhi.w	800ab50 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a98a:	682b      	ldr	r3, [r5, #0]
 800a98c:	049f      	lsls	r7, r3, #18
 800a98e:	d5f6      	bpl.n	800a97e <HAL_RCC_OscConfig+0x12e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a990:	6823      	ldr	r3, [r4, #0]
 800a992:	0759      	lsls	r1, r3, #29
 800a994:	f100 808b 	bmi.w	800aaae <HAL_RCC_OscConfig+0x25e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a998:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f040 80bf 	bne.w	800ab1e <HAL_RCC_OscConfig+0x2ce>
  return HAL_OK;
 800a9a0:	2000      	movs	r0, #0
}
 800a9a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a9a4:	4a46      	ldr	r2, [pc, #280]	@ (800aac0 <HAL_RCC_OscConfig+0x270>)
 800a9a6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a9a8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a9aa:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800a9ae:	d12d      	bne.n	800aa0c <HAL_RCC_OscConfig+0x1bc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a9b0:	4b43      	ldr	r3, [pc, #268]	@ (800aac0 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a9b2:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	0759      	lsls	r1, r3, #29
 800a9b8:	d501      	bpl.n	800a9be <HAL_RCC_OscConfig+0x16e>
 800a9ba:	2a00      	cmp	r2, #0
 800a9bc:	d04f      	beq.n	800aa5e <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a9be:	4d40      	ldr	r5, [pc, #256]	@ (800aac0 <HAL_RCC_OscConfig+0x270>)
 800a9c0:	682b      	ldr	r3, [r5, #0]
 800a9c2:	f023 0319 	bic.w	r3, r3, #25
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a9ca:	f7ff fc8f 	bl	800a2ec <HAL_GetTick>
 800a9ce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9d0:	e005      	b.n	800a9de <HAL_RCC_OscConfig+0x18e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9d2:	f7ff fc8b 	bl	800a2ec <HAL_GetTick>
 800a9d6:	1b80      	subs	r0, r0, r6
 800a9d8:	2802      	cmp	r0, #2
 800a9da:	f200 80b9 	bhi.w	800ab50 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9de:	682b      	ldr	r3, [r5, #0]
 800a9e0:	075b      	lsls	r3, r3, #29
 800a9e2:	d5f6      	bpl.n	800a9d2 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9e4:	f7ff fc88 	bl	800a2f8 <HAL_GetREVID>
 800a9e8:	f241 0303 	movw	r3, #4099	@ 0x1003
 800a9ec:	4298      	cmp	r0, r3
 800a9ee:	f200 8110 	bhi.w	800ac12 <HAL_RCC_OscConfig+0x3c2>
 800a9f2:	6922      	ldr	r2, [r4, #16]
 800a9f4:	686b      	ldr	r3, [r5, #4]
 800a9f6:	2a40      	cmp	r2, #64	@ 0x40
 800a9f8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800a9fc:	bf0c      	ite	eq
 800a9fe:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800aa02:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800aa06:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800aa08:	6823      	ldr	r3, [r4, #0]
 800aa0a:	e75a      	b.n	800a8c2 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800aa0c:	2b18      	cmp	r3, #24
 800aa0e:	f000 80fc 	beq.w	800ac0a <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aa12:	4d2b      	ldr	r5, [pc, #172]	@ (800aac0 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800aa14:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aa16:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800aa18:	2a00      	cmp	r2, #0
 800aa1a:	f000 80e5 	beq.w	800abe8 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aa1e:	f023 0319 	bic.w	r3, r3, #25
 800aa22:	4313      	orrs	r3, r2
 800aa24:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800aa26:	f7ff fc61 	bl	800a2ec <HAL_GetTick>
 800aa2a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa2c:	e005      	b.n	800aa3a <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa2e:	f7ff fc5d 	bl	800a2ec <HAL_GetTick>
 800aa32:	1b80      	subs	r0, r0, r6
 800aa34:	2802      	cmp	r0, #2
 800aa36:	f200 808b 	bhi.w	800ab50 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa3a:	682b      	ldr	r3, [r5, #0]
 800aa3c:	075f      	lsls	r7, r3, #29
 800aa3e:	d5f6      	bpl.n	800aa2e <HAL_RCC_OscConfig+0x1de>
 800aa40:	e7d0      	b.n	800a9e4 <HAL_RCC_OscConfig+0x194>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800aa42:	f001 0103 	and.w	r1, r1, #3
 800aa46:	2902      	cmp	r1, #2
 800aa48:	f47f af15 	bne.w	800a876 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa4c:	4a1c      	ldr	r2, [pc, #112]	@ (800aac0 <HAL_RCC_OscConfig+0x270>)
 800aa4e:	6812      	ldr	r2, [r2, #0]
 800aa50:	0392      	lsls	r2, r2, #14
 800aa52:	f57f af34 	bpl.w	800a8be <HAL_RCC_OscConfig+0x6e>
 800aa56:	6862      	ldr	r2, [r4, #4]
 800aa58:	2a00      	cmp	r2, #0
 800aa5a:	f47f af30 	bne.w	800a8be <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 800aa5e:	2001      	movs	r0, #1
}
 800aa60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800aa62:	f002 0203 	and.w	r2, r2, #3
 800aa66:	2a01      	cmp	r2, #1
 800aa68:	f47f af38 	bne.w	800a8dc <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aa6c:	4b14      	ldr	r3, [pc, #80]	@ (800aac0 <HAL_RCC_OscConfig+0x270>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	05da      	lsls	r2, r3, #23
 800aa72:	d502      	bpl.n	800aa7a <HAL_RCC_OscConfig+0x22a>
 800aa74:	69e3      	ldr	r3, [r4, #28]
 800aa76:	2b80      	cmp	r3, #128	@ 0x80
 800aa78:	d1f1      	bne.n	800aa5e <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aa7a:	f7ff fc3d 	bl	800a2f8 <HAL_GetREVID>
 800aa7e:	f241 0303 	movw	r3, #4099	@ 0x1003
 800aa82:	4298      	cmp	r0, r3
 800aa84:	f200 80ce 	bhi.w	800ac24 <HAL_RCC_OscConfig+0x3d4>
 800aa88:	6a22      	ldr	r2, [r4, #32]
 800aa8a:	2a20      	cmp	r2, #32
 800aa8c:	f000 81bb 	beq.w	800ae06 <HAL_RCC_OscConfig+0x5b6>
 800aa90:	490b      	ldr	r1, [pc, #44]	@ (800aac0 <HAL_RCC_OscConfig+0x270>)
 800aa92:	684b      	ldr	r3, [r1, #4]
 800aa94:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800aa98:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800aa9c:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa9e:	6823      	ldr	r3, [r4, #0]
 800aaa0:	e745      	b.n	800a92e <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aaa2:	4a07      	ldr	r2, [pc, #28]	@ (800aac0 <HAL_RCC_OscConfig+0x270>)
 800aaa4:	6813      	ldr	r3, [r2, #0]
 800aaa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aaaa:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aaac:	e6f8      	b.n	800a8a0 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 800aaae:	4d05      	ldr	r5, [pc, #20]	@ (800aac4 <HAL_RCC_OscConfig+0x274>)
 800aab0:	682b      	ldr	r3, [r5, #0]
 800aab2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aab6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800aab8:	f7ff fc18 	bl	800a2ec <HAL_GetTick>
 800aabc:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aabe:	e008      	b.n	800aad2 <HAL_RCC_OscConfig+0x282>
 800aac0:	58024400 	.word	0x58024400
 800aac4:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aac8:	f7ff fc10 	bl	800a2ec <HAL_GetTick>
 800aacc:	1b80      	subs	r0, r0, r6
 800aace:	2864      	cmp	r0, #100	@ 0x64
 800aad0:	d83e      	bhi.n	800ab50 <HAL_RCC_OscConfig+0x300>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aad2:	682b      	ldr	r3, [r5, #0]
 800aad4:	05da      	lsls	r2, r3, #23
 800aad6:	d5f7      	bpl.n	800aac8 <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aad8:	68a3      	ldr	r3, [r4, #8]
 800aada:	2b01      	cmp	r3, #1
 800aadc:	f000 818d 	beq.w	800adfa <HAL_RCC_OscConfig+0x5aa>
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f000 8168 	beq.w	800adb6 <HAL_RCC_OscConfig+0x566>
 800aae6:	2b05      	cmp	r3, #5
 800aae8:	4b85      	ldr	r3, [pc, #532]	@ (800ad00 <HAL_RCC_OscConfig+0x4b0>)
 800aaea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800aaec:	f000 8194 	beq.w	800ae18 <HAL_RCC_OscConfig+0x5c8>
 800aaf0:	f022 0201 	bic.w	r2, r2, #1
 800aaf4:	671a      	str	r2, [r3, #112]	@ 0x70
 800aaf6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800aaf8:	f022 0204 	bic.w	r2, r2, #4
 800aafc:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800aafe:	f7ff fbf5 	bl	800a2ec <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ab02:	4e7f      	ldr	r6, [pc, #508]	@ (800ad00 <HAL_RCC_OscConfig+0x4b0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab04:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800ab08:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ab0a:	e004      	b.n	800ab16 <HAL_RCC_OscConfig+0x2c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab0c:	f7ff fbee 	bl	800a2ec <HAL_GetTick>
 800ab10:	1b40      	subs	r0, r0, r5
 800ab12:	42b8      	cmp	r0, r7
 800ab14:	d81c      	bhi.n	800ab50 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ab16:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800ab18:	079b      	lsls	r3, r3, #30
 800ab1a:	d5f7      	bpl.n	800ab0c <HAL_RCC_OscConfig+0x2bc>
 800ab1c:	e73c      	b.n	800a998 <HAL_RCC_OscConfig+0x148>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ab1e:	4d78      	ldr	r5, [pc, #480]	@ (800ad00 <HAL_RCC_OscConfig+0x4b0>)
 800ab20:	692a      	ldr	r2, [r5, #16]
 800ab22:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800ab26:	2a18      	cmp	r2, #24
 800ab28:	f000 80f0 	beq.w	800ad0c <HAL_RCC_OscConfig+0x4bc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab2c:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 800ab2e:	682b      	ldr	r3, [r5, #0]
 800ab30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ab34:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab36:	d07f      	beq.n	800ac38 <HAL_RCC_OscConfig+0x3e8>
        tickstart = HAL_GetTick();
 800ab38:	f7ff fbd8 	bl	800a2ec <HAL_GetTick>
 800ab3c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab3e:	682b      	ldr	r3, [r5, #0]
 800ab40:	019b      	lsls	r3, r3, #6
 800ab42:	f57f af2d 	bpl.w	800a9a0 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab46:	f7ff fbd1 	bl	800a2ec <HAL_GetTick>
 800ab4a:	1b00      	subs	r0, r0, r4
 800ab4c:	2802      	cmp	r0, #2
 800ab4e:	d9f6      	bls.n	800ab3e <HAL_RCC_OscConfig+0x2ee>
            return HAL_TIMEOUT;
 800ab50:	2003      	movs	r0, #3
}
 800ab52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab54:	4d6a      	ldr	r5, [pc, #424]	@ (800ad00 <HAL_RCC_OscConfig+0x4b0>)
 800ab56:	682b      	ldr	r3, [r5, #0]
 800ab58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab5c:	602b      	str	r3, [r5, #0]
 800ab5e:	682b      	ldr	r3, [r5, #0]
 800ab60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ab64:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ab66:	f7ff fbc1 	bl	800a2ec <HAL_GetTick>
 800ab6a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ab6c:	e004      	b.n	800ab78 <HAL_RCC_OscConfig+0x328>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab6e:	f7ff fbbd 	bl	800a2ec <HAL_GetTick>
 800ab72:	1b80      	subs	r0, r0, r6
 800ab74:	2864      	cmp	r0, #100	@ 0x64
 800ab76:	d8eb      	bhi.n	800ab50 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ab78:	682b      	ldr	r3, [r5, #0]
 800ab7a:	039f      	lsls	r7, r3, #14
 800ab7c:	d4f7      	bmi.n	800ab6e <HAL_RCC_OscConfig+0x31e>
 800ab7e:	e69d      	b.n	800a8bc <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800ab80:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800ab82:	f023 0301 	bic.w	r3, r3, #1
 800ab86:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800ab88:	f7ff fbb0 	bl	800a2ec <HAL_GetTick>
 800ab8c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ab8e:	e004      	b.n	800ab9a <HAL_RCC_OscConfig+0x34a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab90:	f7ff fbac 	bl	800a2ec <HAL_GetTick>
 800ab94:	1b80      	subs	r0, r0, r6
 800ab96:	2802      	cmp	r0, #2
 800ab98:	d8da      	bhi.n	800ab50 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ab9a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800ab9c:	0799      	lsls	r1, r3, #30
 800ab9e:	d4f7      	bmi.n	800ab90 <HAL_RCC_OscConfig+0x340>
 800aba0:	e6dd      	b.n	800a95e <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_HSI48_DISABLE();
 800aba2:	682b      	ldr	r3, [r5, #0]
 800aba4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aba8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800abaa:	f7ff fb9f 	bl	800a2ec <HAL_GetTick>
 800abae:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800abb0:	e004      	b.n	800abbc <HAL_RCC_OscConfig+0x36c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800abb2:	f7ff fb9b 	bl	800a2ec <HAL_GetTick>
 800abb6:	1b80      	subs	r0, r0, r6
 800abb8:	2802      	cmp	r0, #2
 800abba:	d8c9      	bhi.n	800ab50 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800abbc:	682b      	ldr	r3, [r5, #0]
 800abbe:	0498      	lsls	r0, r3, #18
 800abc0:	d4f7      	bmi.n	800abb2 <HAL_RCC_OscConfig+0x362>
 800abc2:	e6e5      	b.n	800a990 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_CSI_DISABLE();
 800abc4:	682b      	ldr	r3, [r5, #0]
 800abc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800abca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800abcc:	f7ff fb8e 	bl	800a2ec <HAL_GetTick>
 800abd0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800abd2:	e004      	b.n	800abde <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800abd4:	f7ff fb8a 	bl	800a2ec <HAL_GetTick>
 800abd8:	1b80      	subs	r0, r0, r6
 800abda:	2802      	cmp	r0, #2
 800abdc:	d8b8      	bhi.n	800ab50 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800abde:	682b      	ldr	r3, [r5, #0]
 800abe0:	05df      	lsls	r7, r3, #23
 800abe2:	d4f7      	bmi.n	800abd4 <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800abe4:	6823      	ldr	r3, [r4, #0]
 800abe6:	e6a2      	b.n	800a92e <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 800abe8:	f023 0301 	bic.w	r3, r3, #1
 800abec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800abee:	f7ff fb7d 	bl	800a2ec <HAL_GetTick>
 800abf2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800abf4:	e004      	b.n	800ac00 <HAL_RCC_OscConfig+0x3b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800abf6:	f7ff fb79 	bl	800a2ec <HAL_GetTick>
 800abfa:	1b80      	subs	r0, r0, r6
 800abfc:	2802      	cmp	r0, #2
 800abfe:	d8a7      	bhi.n	800ab50 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ac00:	682b      	ldr	r3, [r5, #0]
 800ac02:	0758      	lsls	r0, r3, #29
 800ac04:	d4f7      	bmi.n	800abf6 <HAL_RCC_OscConfig+0x3a6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	e65b      	b.n	800a8c2 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ac0a:	0790      	lsls	r0, r2, #30
 800ac0c:	f47f af01 	bne.w	800aa12 <HAL_RCC_OscConfig+0x1c2>
 800ac10:	e6ce      	b.n	800a9b0 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac12:	686b      	ldr	r3, [r5, #4]
 800ac14:	6922      	ldr	r2, [r4, #16]
 800ac16:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800ac1a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ac1e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ac20:	6823      	ldr	r3, [r4, #0]
 800ac22:	e64e      	b.n	800a8c2 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac24:	4a36      	ldr	r2, [pc, #216]	@ (800ad00 <HAL_RCC_OscConfig+0x4b0>)
 800ac26:	6a21      	ldr	r1, [r4, #32]
 800ac28:	68d3      	ldr	r3, [r2, #12]
 800ac2a:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800ac2e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800ac32:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ac34:	6823      	ldr	r3, [r4, #0]
 800ac36:	e67a      	b.n	800a92e <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 800ac38:	f7ff fb58 	bl	800a2ec <HAL_GetTick>
 800ac3c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac3e:	e004      	b.n	800ac4a <HAL_RCC_OscConfig+0x3fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac40:	f7ff fb54 	bl	800a2ec <HAL_GetTick>
 800ac44:	1b80      	subs	r0, r0, r6
 800ac46:	2802      	cmp	r0, #2
 800ac48:	d882      	bhi.n	800ab50 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac4a:	682b      	ldr	r3, [r5, #0]
 800ac4c:	0199      	lsls	r1, r3, #6
 800ac4e:	d4f7      	bmi.n	800ac40 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac50:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800ac52:	4b2c      	ldr	r3, [pc, #176]	@ (800ad04 <HAL_RCC_OscConfig+0x4b4>)
 800ac54:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ac56:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ac58:	492b      	ldr	r1, [pc, #172]	@ (800ad08 <HAL_RCC_OscConfig+0x4b8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ac5a:	4e29      	ldr	r6, [pc, #164]	@ (800ad00 <HAL_RCC_OscConfig+0x4b0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ac60:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800ac64:	62ab      	str	r3, [r5, #40]	@ 0x28
 800ac66:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 800ac6a:	3b01      	subs	r3, #1
 800ac6c:	3a01      	subs	r2, #1
 800ac6e:	025b      	lsls	r3, r3, #9
 800ac70:	0412      	lsls	r2, r2, #16
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800ac7c:	3a01      	subs	r2, #1
 800ac7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac82:	4313      	orrs	r3, r2
 800ac84:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800ac86:	3a01      	subs	r2, #1
 800ac88:	0612      	lsls	r2, r2, #24
 800ac8a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800ac92:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800ac94:	f023 0301 	bic.w	r3, r3, #1
 800ac98:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ac9a:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 800ac9c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800ac9e:	4011      	ands	r1, r2
 800aca0:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800aca4:	6369      	str	r1, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800aca6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800aca8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800acaa:	f023 030c 	bic.w	r3, r3, #12
 800acae:	4313      	orrs	r3, r2
 800acb0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800acb2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800acb4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800acb6:	f023 0302 	bic.w	r3, r3, #2
 800acba:	4313      	orrs	r3, r2
 800acbc:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800acbe:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800acc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800acc4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acc6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800acc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800accc:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800acce:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800acd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800acd4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800acd6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800acd8:	f043 0301 	orr.w	r3, r3, #1
 800acdc:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800acde:	682b      	ldr	r3, [r5, #0]
 800ace0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ace4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ace6:	f7ff fb01 	bl	800a2ec <HAL_GetTick>
 800acea:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800acec:	6833      	ldr	r3, [r6, #0]
 800acee:	019a      	lsls	r2, r3, #6
 800acf0:	f53f ae56 	bmi.w	800a9a0 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acf4:	f7ff fafa 	bl	800a2ec <HAL_GetTick>
 800acf8:	1b00      	subs	r0, r0, r4
 800acfa:	2802      	cmp	r0, #2
 800acfc:	d9f6      	bls.n	800acec <HAL_RCC_OscConfig+0x49c>
 800acfe:	e727      	b.n	800ab50 <HAL_RCC_OscConfig+0x300>
 800ad00:	58024400 	.word	0x58024400
 800ad04:	fffffc0c 	.word	0xfffffc0c
 800ad08:	ffff0007 	.word	0xffff0007
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad0c:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ad0e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ad10:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad12:	f43f aea4 	beq.w	800aa5e <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad16:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad1a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800ad1c:	428b      	cmp	r3, r1
 800ad1e:	f47f ae9e 	bne.w	800aa5e <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad22:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad26:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	f47f ae98 	bne.w	800aa5e <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ad2e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ad30:	f3c0 0208 	ubfx	r2, r0, #0, #9
 800ad34:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad36:	429a      	cmp	r2, r3
 800ad38:	f47f ae91 	bne.w	800aa5e <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ad3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad3e:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800ad42:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ad44:	429a      	cmp	r2, r3
 800ad46:	f47f ae8a 	bne.w	800aa5e <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ad4a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ad4c:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800ad50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ad52:	429a      	cmp	r2, r3
 800ad54:	f47f ae83 	bne.w	800aa5e <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ad58:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ad5a:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800ad5e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ad60:	4298      	cmp	r0, r3
 800ad62:	f47f ae7c 	bne.w	800aa5e <HAL_RCC_OscConfig+0x20e>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ad66:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ad68:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ad6a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	f43f ae16 	beq.w	800a9a0 <HAL_RCC_OscConfig+0x150>
          __HAL_RCC_PLLFRACN_DISABLE();
 800ad74:	4a2d      	ldr	r2, [pc, #180]	@ (800ae2c <HAL_RCC_OscConfig+0x5dc>)
 800ad76:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ad78:	f023 0301 	bic.w	r3, r3, #1
 800ad7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800ad7e:	f7ff fab5 	bl	800a2ec <HAL_GetTick>
 800ad82:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ad84:	f7ff fab2 	bl	800a2ec <HAL_GetTick>
 800ad88:	42a8      	cmp	r0, r5
 800ad8a:	d0fb      	beq.n	800ad84 <HAL_RCC_OscConfig+0x534>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ad8c:	4a27      	ldr	r2, [pc, #156]	@ (800ae2c <HAL_RCC_OscConfig+0x5dc>)
 800ad8e:	4b28      	ldr	r3, [pc, #160]	@ (800ae30 <HAL_RCC_OscConfig+0x5e0>)
 800ad90:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800ad92:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ad94:	4003      	ands	r3, r0
 800ad96:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800ad9a:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800ad9c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ad9e:	f043 0301 	orr.w	r3, r3, #1
 800ada2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ada4:	e5fc      	b.n	800a9a0 <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ada6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800adaa:	601a      	str	r2, [r3, #0]
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800adb2:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800adb4:	e574      	b.n	800a8a0 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800adb6:	4d1d      	ldr	r5, [pc, #116]	@ (800ae2c <HAL_RCC_OscConfig+0x5dc>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800adb8:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800adbc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800adbe:	f023 0301 	bic.w	r3, r3, #1
 800adc2:	672b      	str	r3, [r5, #112]	@ 0x70
 800adc4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800adc6:	f023 0304 	bic.w	r3, r3, #4
 800adca:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800adcc:	f7ff fa8e 	bl	800a2ec <HAL_GetTick>
 800add0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800add2:	e005      	b.n	800ade0 <HAL_RCC_OscConfig+0x590>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800add4:	f7ff fa8a 	bl	800a2ec <HAL_GetTick>
 800add8:	1b80      	subs	r0, r0, r6
 800adda:	42b8      	cmp	r0, r7
 800addc:	f63f aeb8 	bhi.w	800ab50 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ade0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800ade2:	0798      	lsls	r0, r3, #30
 800ade4:	d4f6      	bmi.n	800add4 <HAL_RCC_OscConfig+0x584>
 800ade6:	e5d7      	b.n	800a998 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ade8:	68eb      	ldr	r3, [r5, #12]
 800adea:	6a22      	ldr	r2, [r4, #32]
 800adec:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800adf0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800adf4:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800adf6:	6823      	ldr	r3, [r4, #0]
 800adf8:	e599      	b.n	800a92e <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800adfa:	4a0c      	ldr	r2, [pc, #48]	@ (800ae2c <HAL_RCC_OscConfig+0x5dc>)
 800adfc:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800adfe:	f043 0301 	orr.w	r3, r3, #1
 800ae02:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ae04:	e67b      	b.n	800aafe <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ae06:	4a09      	ldr	r2, [pc, #36]	@ (800ae2c <HAL_RCC_OscConfig+0x5dc>)
 800ae08:	6853      	ldr	r3, [r2, #4]
 800ae0a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800ae0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ae12:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae14:	6823      	ldr	r3, [r4, #0]
 800ae16:	e58a      	b.n	800a92e <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ae18:	f042 0204 	orr.w	r2, r2, #4
 800ae1c:	671a      	str	r2, [r3, #112]	@ 0x70
 800ae1e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ae20:	f042 0201 	orr.w	r2, r2, #1
 800ae24:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ae26:	e66a      	b.n	800aafe <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 800ae28:	2001      	movs	r0, #1
}
 800ae2a:	4770      	bx	lr
 800ae2c:	58024400 	.word	0x58024400
 800ae30:	ffff0007 	.word	0xffff0007

0800ae34 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ae34:	4a0c      	ldr	r2, [pc, #48]	@ (800ae68 <HAL_RCC_GetSysClockFreq+0x34>)
 800ae36:	6913      	ldr	r3, [r2, #16]
 800ae38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ae3c:	2b10      	cmp	r3, #16
 800ae3e:	d004      	beq.n	800ae4a <HAL_RCC_GetSysClockFreq+0x16>
 800ae40:	2b18      	cmp	r3, #24
 800ae42:	d00d      	beq.n	800ae60 <HAL_RCC_GetSysClockFreq+0x2c>
 800ae44:	b11b      	cbz	r3, 800ae4e <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 800ae46:	4809      	ldr	r0, [pc, #36]	@ (800ae6c <HAL_RCC_GetSysClockFreq+0x38>)
 800ae48:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ae4a:	4809      	ldr	r0, [pc, #36]	@ (800ae70 <HAL_RCC_GetSysClockFreq+0x3c>)
 800ae4c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae4e:	6813      	ldr	r3, [r2, #0]
 800ae50:	069b      	lsls	r3, r3, #26
 800ae52:	d507      	bpl.n	800ae64 <HAL_RCC_GetSysClockFreq+0x30>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae54:	6813      	ldr	r3, [r2, #0]
 800ae56:	4807      	ldr	r0, [pc, #28]	@ (800ae74 <HAL_RCC_GetSysClockFreq+0x40>)
 800ae58:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ae5c:	40d8      	lsrs	r0, r3
 800ae5e:	4770      	bx	lr
 800ae60:	f7ff bc84 	b.w	800a76c <HAL_RCC_GetSysClockFreq.part.0>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ae64:	4803      	ldr	r0, [pc, #12]	@ (800ae74 <HAL_RCC_GetSysClockFreq+0x40>)
}
 800ae66:	4770      	bx	lr
 800ae68:	58024400 	.word	0x58024400
 800ae6c:	003d0900 	.word	0x003d0900
 800ae70:	007a1200 	.word	0x007a1200
 800ae74:	03d09000 	.word	0x03d09000

0800ae78 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	f000 810e 	beq.w	800b09a <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ae7e:	4a8d      	ldr	r2, [pc, #564]	@ (800b0b4 <HAL_RCC_ClockConfig+0x23c>)
 800ae80:	6813      	ldr	r3, [r2, #0]
 800ae82:	f003 030f 	and.w	r3, r3, #15
 800ae86:	428b      	cmp	r3, r1
{
 800ae88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ae90:	d20c      	bcs.n	800aeac <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae92:	6813      	ldr	r3, [r2, #0]
 800ae94:	f023 030f 	bic.w	r3, r3, #15
 800ae98:	430b      	orrs	r3, r1
 800ae9a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae9c:	6813      	ldr	r3, [r2, #0]
 800ae9e:	f003 030f 	and.w	r3, r3, #15
 800aea2:	428b      	cmp	r3, r1
 800aea4:	d002      	beq.n	800aeac <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800aea6:	2001      	movs	r0, #1
}
 800aea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aeac:	6823      	ldr	r3, [r4, #0]
 800aeae:	0758      	lsls	r0, r3, #29
 800aeb0:	d50b      	bpl.n	800aeca <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aeb2:	4981      	ldr	r1, [pc, #516]	@ (800b0b8 <HAL_RCC_ClockConfig+0x240>)
 800aeb4:	6920      	ldr	r0, [r4, #16]
 800aeb6:	698a      	ldr	r2, [r1, #24]
 800aeb8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800aebc:	4290      	cmp	r0, r2
 800aebe:	d904      	bls.n	800aeca <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aec0:	698a      	ldr	r2, [r1, #24]
 800aec2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800aec6:	4302      	orrs	r2, r0
 800aec8:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aeca:	0719      	lsls	r1, r3, #28
 800aecc:	d50b      	bpl.n	800aee6 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aece:	497a      	ldr	r1, [pc, #488]	@ (800b0b8 <HAL_RCC_ClockConfig+0x240>)
 800aed0:	6960      	ldr	r0, [r4, #20]
 800aed2:	69ca      	ldr	r2, [r1, #28]
 800aed4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800aed8:	4290      	cmp	r0, r2
 800aeda:	d904      	bls.n	800aee6 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aedc:	69ca      	ldr	r2, [r1, #28]
 800aede:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800aee2:	4302      	orrs	r2, r0
 800aee4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aee6:	06da      	lsls	r2, r3, #27
 800aee8:	d50b      	bpl.n	800af02 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aeea:	4973      	ldr	r1, [pc, #460]	@ (800b0b8 <HAL_RCC_ClockConfig+0x240>)
 800aeec:	69a0      	ldr	r0, [r4, #24]
 800aeee:	69ca      	ldr	r2, [r1, #28]
 800aef0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800aef4:	4290      	cmp	r0, r2
 800aef6:	d904      	bls.n	800af02 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aef8:	69ca      	ldr	r2, [r1, #28]
 800aefa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800aefe:	4302      	orrs	r2, r0
 800af00:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800af02:	069f      	lsls	r7, r3, #26
 800af04:	d50b      	bpl.n	800af1e <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800af06:	496c      	ldr	r1, [pc, #432]	@ (800b0b8 <HAL_RCC_ClockConfig+0x240>)
 800af08:	69e0      	ldr	r0, [r4, #28]
 800af0a:	6a0a      	ldr	r2, [r1, #32]
 800af0c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800af10:	4290      	cmp	r0, r2
 800af12:	d904      	bls.n	800af1e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800af14:	6a0a      	ldr	r2, [r1, #32]
 800af16:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800af1a:	4302      	orrs	r2, r0
 800af1c:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af1e:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af20:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af24:	f140 80ab 	bpl.w	800b07e <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800af28:	4e63      	ldr	r6, [pc, #396]	@ (800b0b8 <HAL_RCC_ClockConfig+0x240>)
 800af2a:	68e0      	ldr	r0, [r4, #12]
 800af2c:	69b1      	ldr	r1, [r6, #24]
 800af2e:	f001 010f 	and.w	r1, r1, #15
 800af32:	4288      	cmp	r0, r1
 800af34:	d904      	bls.n	800af40 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af36:	69b1      	ldr	r1, [r6, #24]
 800af38:	f021 010f 	bic.w	r1, r1, #15
 800af3c:	4301      	orrs	r1, r0
 800af3e:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af40:	2a00      	cmp	r2, #0
 800af42:	d030      	beq.n	800afa6 <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800af44:	4a5c      	ldr	r2, [pc, #368]	@ (800b0b8 <HAL_RCC_ClockConfig+0x240>)
 800af46:	68a1      	ldr	r1, [r4, #8]
 800af48:	6993      	ldr	r3, [r2, #24]
 800af4a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800af4e:	430b      	orrs	r3, r1
 800af50:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af52:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800af54:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af56:	2902      	cmp	r1, #2
 800af58:	f000 80a1 	beq.w	800b09e <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800af5c:	2903      	cmp	r1, #3
 800af5e:	f000 8098 	beq.w	800b092 <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800af62:	2901      	cmp	r1, #1
 800af64:	f000 80a1 	beq.w	800b0aa <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800af68:	075f      	lsls	r7, r3, #29
 800af6a:	d59c      	bpl.n	800aea6 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800af6c:	4e52      	ldr	r6, [pc, #328]	@ (800b0b8 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af6e:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800af72:	6933      	ldr	r3, [r6, #16]
 800af74:	f023 0307 	bic.w	r3, r3, #7
 800af78:	430b      	orrs	r3, r1
 800af7a:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800af7c:	f7ff f9b6 	bl	800a2ec <HAL_GetTick>
 800af80:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af82:	e005      	b.n	800af90 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af84:	f7ff f9b2 	bl	800a2ec <HAL_GetTick>
 800af88:	1bc0      	subs	r0, r0, r7
 800af8a:	4540      	cmp	r0, r8
 800af8c:	f200 808b 	bhi.w	800b0a6 <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af90:	6933      	ldr	r3, [r6, #16]
 800af92:	6862      	ldr	r2, [r4, #4]
 800af94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800af98:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800af9c:	d1f2      	bne.n	800af84 <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af9e:	6823      	ldr	r3, [r4, #0]
 800afa0:	079e      	lsls	r6, r3, #30
 800afa2:	d506      	bpl.n	800afb2 <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800afa4:	68e0      	ldr	r0, [r4, #12]
 800afa6:	4944      	ldr	r1, [pc, #272]	@ (800b0b8 <HAL_RCC_ClockConfig+0x240>)
 800afa8:	698a      	ldr	r2, [r1, #24]
 800afaa:	f002 020f 	and.w	r2, r2, #15
 800afae:	4282      	cmp	r2, r0
 800afb0:	d869      	bhi.n	800b086 <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800afb2:	4940      	ldr	r1, [pc, #256]	@ (800b0b4 <HAL_RCC_ClockConfig+0x23c>)
 800afb4:	680a      	ldr	r2, [r1, #0]
 800afb6:	f002 020f 	and.w	r2, r2, #15
 800afba:	42aa      	cmp	r2, r5
 800afbc:	d90a      	bls.n	800afd4 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800afbe:	680a      	ldr	r2, [r1, #0]
 800afc0:	f022 020f 	bic.w	r2, r2, #15
 800afc4:	432a      	orrs	r2, r5
 800afc6:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800afc8:	680a      	ldr	r2, [r1, #0]
 800afca:	f002 020f 	and.w	r2, r2, #15
 800afce:	42aa      	cmp	r2, r5
 800afd0:	f47f af69 	bne.w	800aea6 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800afd4:	0758      	lsls	r0, r3, #29
 800afd6:	d50b      	bpl.n	800aff0 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800afd8:	4937      	ldr	r1, [pc, #220]	@ (800b0b8 <HAL_RCC_ClockConfig+0x240>)
 800afda:	6920      	ldr	r0, [r4, #16]
 800afdc:	698a      	ldr	r2, [r1, #24]
 800afde:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800afe2:	4290      	cmp	r0, r2
 800afe4:	d204      	bcs.n	800aff0 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800afe6:	698a      	ldr	r2, [r1, #24]
 800afe8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800afec:	4302      	orrs	r2, r0
 800afee:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aff0:	0719      	lsls	r1, r3, #28
 800aff2:	d50b      	bpl.n	800b00c <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aff4:	4930      	ldr	r1, [pc, #192]	@ (800b0b8 <HAL_RCC_ClockConfig+0x240>)
 800aff6:	6960      	ldr	r0, [r4, #20]
 800aff8:	69ca      	ldr	r2, [r1, #28]
 800affa:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800affe:	4290      	cmp	r0, r2
 800b000:	d204      	bcs.n	800b00c <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b002:	69ca      	ldr	r2, [r1, #28]
 800b004:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b008:	4302      	orrs	r2, r0
 800b00a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b00c:	06da      	lsls	r2, r3, #27
 800b00e:	d50b      	bpl.n	800b028 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b010:	4929      	ldr	r1, [pc, #164]	@ (800b0b8 <HAL_RCC_ClockConfig+0x240>)
 800b012:	69a0      	ldr	r0, [r4, #24]
 800b014:	69ca      	ldr	r2, [r1, #28]
 800b016:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800b01a:	4290      	cmp	r0, r2
 800b01c:	d204      	bcs.n	800b028 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b01e:	69ca      	ldr	r2, [r1, #28]
 800b020:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b024:	4302      	orrs	r2, r0
 800b026:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b028:	069b      	lsls	r3, r3, #26
 800b02a:	d50b      	bpl.n	800b044 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b02c:	4a22      	ldr	r2, [pc, #136]	@ (800b0b8 <HAL_RCC_ClockConfig+0x240>)
 800b02e:	69e1      	ldr	r1, [r4, #28]
 800b030:	6a13      	ldr	r3, [r2, #32]
 800b032:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b036:	4299      	cmp	r1, r3
 800b038:	d204      	bcs.n	800b044 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b03a:	6a13      	ldr	r3, [r2, #32]
 800b03c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b040:	430b      	orrs	r3, r1
 800b042:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b044:	f7ff fef6 	bl	800ae34 <HAL_RCC_GetSysClockFreq>
 800b048:	4a1b      	ldr	r2, [pc, #108]	@ (800b0b8 <HAL_RCC_ClockConfig+0x240>)
 800b04a:	4603      	mov	r3, r0
 800b04c:	481b      	ldr	r0, [pc, #108]	@ (800b0bc <HAL_RCC_ClockConfig+0x244>)
 800b04e:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b050:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b052:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800b056:	4d1a      	ldr	r5, [pc, #104]	@ (800b0c0 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b058:	f002 020f 	and.w	r2, r2, #15
 800b05c:	4c19      	ldr	r4, [pc, #100]	@ (800b0c4 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b05e:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b060:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b062:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800b066:	4818      	ldr	r0, [pc, #96]	@ (800b0c8 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b068:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b06c:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800b06e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 800b070:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b072:	40d3      	lsrs	r3, r2
 800b074:	6023      	str	r3, [r4, #0]
}
 800b076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800b07a:	f7ff b8d5 	b.w	800a228 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b07e:	2a00      	cmp	r2, #0
 800b080:	f47f af60 	bne.w	800af44 <HAL_RCC_ClockConfig+0xcc>
 800b084:	e795      	b.n	800afb2 <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b086:	698a      	ldr	r2, [r1, #24]
 800b088:	f022 020f 	bic.w	r2, r2, #15
 800b08c:	4302      	orrs	r2, r0
 800b08e:	618a      	str	r2, [r1, #24]
 800b090:	e78f      	b.n	800afb2 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b092:	019a      	lsls	r2, r3, #6
 800b094:	f53f af6a 	bmi.w	800af6c <HAL_RCC_ClockConfig+0xf4>
 800b098:	e705      	b.n	800aea6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800b09a:	2001      	movs	r0, #1
}
 800b09c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b09e:	0398      	lsls	r0, r3, #14
 800b0a0:	f53f af64 	bmi.w	800af6c <HAL_RCC_ClockConfig+0xf4>
 800b0a4:	e6ff      	b.n	800aea6 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800b0a6:	2003      	movs	r0, #3
 800b0a8:	e6fe      	b.n	800aea8 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b0aa:	05db      	lsls	r3, r3, #23
 800b0ac:	f53f af5e 	bmi.w	800af6c <HAL_RCC_ClockConfig+0xf4>
 800b0b0:	e6f9      	b.n	800aea6 <HAL_RCC_ClockConfig+0x2e>
 800b0b2:	bf00      	nop
 800b0b4:	52002000 	.word	0x52002000
 800b0b8:	58024400 	.word	0x58024400
 800b0bc:	0800fe48 	.word	0x0800fe48
 800b0c0:	20000004 	.word	0x20000004
 800b0c4:	20000000 	.word	0x20000000
 800b0c8:	20000034 	.word	0x20000034

0800b0cc <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b0cc:	4a18      	ldr	r2, [pc, #96]	@ (800b130 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b0ce:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b0d0:	6913      	ldr	r3, [r2, #16]
 800b0d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b0d6:	2b10      	cmp	r3, #16
 800b0d8:	d019      	beq.n	800b10e <HAL_RCC_GetHCLKFreq+0x42>
 800b0da:	2b18      	cmp	r3, #24
 800b0dc:	d022      	beq.n	800b124 <HAL_RCC_GetHCLKFreq+0x58>
 800b0de:	b1c3      	cbz	r3, 800b112 <HAL_RCC_GetHCLKFreq+0x46>
      sysclockfreq = CSI_VALUE;
 800b0e0:	4b14      	ldr	r3, [pc, #80]	@ (800b134 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b0e2:	4913      	ldr	r1, [pc, #76]	@ (800b130 <HAL_RCC_GetHCLKFreq+0x64>)
 800b0e4:	4814      	ldr	r0, [pc, #80]	@ (800b138 <HAL_RCC_GetHCLKFreq+0x6c>)
 800b0e6:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b0e8:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b0ea:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b0ee:	4c13      	ldr	r4, [pc, #76]	@ (800b13c <HAL_RCC_GetHCLKFreq+0x70>)
 800b0f0:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b0f4:	4d12      	ldr	r5, [pc, #72]	@ (800b140 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b0f6:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b0f8:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b0fa:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b0fe:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b102:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b104:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 800b108:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b10a:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800b10c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b10e:	4b0d      	ldr	r3, [pc, #52]	@ (800b144 <HAL_RCC_GetHCLKFreq+0x78>)
 800b110:	e7e7      	b.n	800b0e2 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b112:	6813      	ldr	r3, [r2, #0]
 800b114:	069b      	lsls	r3, r3, #26
 800b116:	d509      	bpl.n	800b12c <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b118:	6812      	ldr	r2, [r2, #0]
 800b11a:	4b0b      	ldr	r3, [pc, #44]	@ (800b148 <HAL_RCC_GetHCLKFreq+0x7c>)
 800b11c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800b120:	40d3      	lsrs	r3, r2
 800b122:	e7de      	b.n	800b0e2 <HAL_RCC_GetHCLKFreq+0x16>
 800b124:	f7ff fb22 	bl	800a76c <HAL_RCC_GetSysClockFreq.part.0>
 800b128:	4603      	mov	r3, r0
 800b12a:	e7da      	b.n	800b0e2 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b12c:	4b06      	ldr	r3, [pc, #24]	@ (800b148 <HAL_RCC_GetHCLKFreq+0x7c>)
 800b12e:	e7d8      	b.n	800b0e2 <HAL_RCC_GetHCLKFreq+0x16>
 800b130:	58024400 	.word	0x58024400
 800b134:	003d0900 	.word	0x003d0900
 800b138:	0800fe48 	.word	0x0800fe48
 800b13c:	20000000 	.word	0x20000000
 800b140:	20000004 	.word	0x20000004
 800b144:	007a1200 	.word	0x007a1200
 800b148:	03d09000 	.word	0x03d09000

0800b14c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b14c:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b14e:	f7ff ffbd 	bl	800b0cc <HAL_RCC_GetHCLKFreq>
 800b152:	4b05      	ldr	r3, [pc, #20]	@ (800b168 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800b154:	4a05      	ldr	r2, [pc, #20]	@ (800b16c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b156:	69db      	ldr	r3, [r3, #28]
 800b158:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b15c:	5cd3      	ldrb	r3, [r2, r3]
 800b15e:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b162:	40d8      	lsrs	r0, r3
 800b164:	bd08      	pop	{r3, pc}
 800b166:	bf00      	nop
 800b168:	58024400 	.word	0x58024400
 800b16c:	0800fe48 	.word	0x0800fe48

0800b170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b170:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b172:	f7ff ffab 	bl	800b0cc <HAL_RCC_GetHCLKFreq>
 800b176:	4b05      	ldr	r3, [pc, #20]	@ (800b18c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800b178:	4a05      	ldr	r2, [pc, #20]	@ (800b190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b17a:	69db      	ldr	r3, [r3, #28]
 800b17c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800b180:	5cd3      	ldrb	r3, [r2, r3]
 800b182:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b186:	40d8      	lsrs	r0, r3
 800b188:	bd08      	pop	{r3, pc}
 800b18a:	bf00      	nop
 800b18c:	58024400 	.word	0x58024400
 800b190:	0800fe48 	.word	0x0800fe48

0800b194 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 800b194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b196:	4c36      	ldr	r4, [pc, #216]	@ (800b270 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 800b198:	4606      	mov	r6, r0
 800b19a:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 800b19c:	6823      	ldr	r3, [r4, #0]
 800b19e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b1a2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1a4:	f7ff f8a2 	bl	800a2ec <HAL_GetTick>
 800b1a8:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b1aa:	e004      	b.n	800b1b6 <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b1ac:	f7ff f89e 	bl	800a2ec <HAL_GetTick>
 800b1b0:	1b40      	subs	r0, r0, r5
 800b1b2:	2802      	cmp	r0, #2
 800b1b4:	d856      	bhi.n	800b264 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b1b6:	6823      	ldr	r3, [r4, #0]
 800b1b8:	011a      	lsls	r2, r3, #4
 800b1ba:	d4f7      	bmi.n	800b1ac <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b1bc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b1be:	6832      	ldr	r2, [r6, #0]
 800b1c0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800b1c4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800b1c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b1ca:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	3a01      	subs	r2, #1
 800b1d2:	025b      	lsls	r3, r3, #9
 800b1d4:	0412      	lsls	r2, r2, #16
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	6872      	ldr	r2, [r6, #4]
 800b1e0:	3a01      	subs	r2, #1
 800b1e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	6932      	ldr	r2, [r6, #16]
 800b1ea:	3a01      	subs	r2, #1
 800b1ec:	0612      	lsls	r2, r2, #24
 800b1ee:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b1f6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b1f8:	6972      	ldr	r2, [r6, #20]
 800b1fa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b1fe:	4313      	orrs	r3, r2
 800b200:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b202:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b204:	69b3      	ldr	r3, [r6, #24]
 800b206:	f022 0220 	bic.w	r2, r2, #32
 800b20a:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b20c:	4b19      	ldr	r3, [pc, #100]	@ (800b274 <RCCEx_PLL2_Config.part.0+0xe0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b20e:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b210:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b212:	f022 0210 	bic.w	r2, r2, #16
 800b216:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b218:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800b21a:	69f2      	ldr	r2, [r6, #28]
 800b21c:	400b      	ands	r3, r1
 800b21e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b222:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b224:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b226:	f043 0310 	orr.w	r3, r3, #16
 800b22a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b22c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800b22e:	b1df      	cbz	r7, 800b268 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b230:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b232:	bf0c      	ite	eq
 800b234:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b238:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800b23c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b23e:	4c0c      	ldr	r4, [pc, #48]	@ (800b270 <RCCEx_PLL2_Config.part.0+0xdc>)
 800b240:	6823      	ldr	r3, [r4, #0]
 800b242:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b246:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b248:	f7ff f850 	bl	800a2ec <HAL_GetTick>
 800b24c:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b24e:	e004      	b.n	800b25a <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b250:	f7ff f84c 	bl	800a2ec <HAL_GetTick>
 800b254:	1b40      	subs	r0, r0, r5
 800b256:	2802      	cmp	r0, #2
 800b258:	d804      	bhi.n	800b264 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b25a:	6823      	ldr	r3, [r4, #0]
 800b25c:	011b      	lsls	r3, r3, #4
 800b25e:	d5f7      	bpl.n	800b250 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 800b260:	2000      	movs	r0, #0
}
 800b262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800b264:	2003      	movs	r0, #3
}
 800b266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b268:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b26c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b26e:	e7e6      	b.n	800b23e <RCCEx_PLL2_Config.part.0+0xaa>
 800b270:	58024400 	.word	0x58024400
 800b274:	ffff0007 	.word	0xffff0007

0800b278 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 800b278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b27a:	4c36      	ldr	r4, [pc, #216]	@ (800b354 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 800b27c:	4606      	mov	r6, r0
 800b27e:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 800b280:	6823      	ldr	r3, [r4, #0]
 800b282:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b286:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b288:	f7ff f830 	bl	800a2ec <HAL_GetTick>
 800b28c:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b28e:	e004      	b.n	800b29a <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b290:	f7ff f82c 	bl	800a2ec <HAL_GetTick>
 800b294:	1b40      	subs	r0, r0, r5
 800b296:	2802      	cmp	r0, #2
 800b298:	d856      	bhi.n	800b348 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b29a:	6823      	ldr	r3, [r4, #0]
 800b29c:	009a      	lsls	r2, r3, #2
 800b29e:	d4f7      	bmi.n	800b290 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b2a0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b2a2:	6832      	ldr	r2, [r6, #0]
 800b2a4:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800b2a8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800b2ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b2ae:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	3a01      	subs	r2, #1
 800b2b6:	025b      	lsls	r3, r3, #9
 800b2b8:	0412      	lsls	r2, r2, #16
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	6872      	ldr	r2, [r6, #4]
 800b2c4:	3a01      	subs	r2, #1
 800b2c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	6932      	ldr	r2, [r6, #16]
 800b2ce:	3a01      	subs	r2, #1
 800b2d0:	0612      	lsls	r2, r2, #24
 800b2d2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b2da:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b2dc:	6972      	ldr	r2, [r6, #20]
 800b2de:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b2e6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b2e8:	69b3      	ldr	r3, [r6, #24]
 800b2ea:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b2ee:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b2f0:	4b19      	ldr	r3, [pc, #100]	@ (800b358 <RCCEx_PLL3_Config.part.0+0xe0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b2f2:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b2f4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b2f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b2fa:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b2fc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b2fe:	69f2      	ldr	r2, [r6, #28]
 800b300:	400b      	ands	r3, r1
 800b302:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b306:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b308:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b30a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b30e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b310:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800b312:	b1df      	cbz	r7, 800b34c <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b314:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b316:	bf0c      	ite	eq
 800b318:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b31c:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800b320:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b322:	4c0c      	ldr	r4, [pc, #48]	@ (800b354 <RCCEx_PLL3_Config.part.0+0xdc>)
 800b324:	6823      	ldr	r3, [r4, #0]
 800b326:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b32a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b32c:	f7fe ffde 	bl	800a2ec <HAL_GetTick>
 800b330:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b332:	e004      	b.n	800b33e <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b334:	f7fe ffda 	bl	800a2ec <HAL_GetTick>
 800b338:	1b40      	subs	r0, r0, r5
 800b33a:	2802      	cmp	r0, #2
 800b33c:	d804      	bhi.n	800b348 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	d5f7      	bpl.n	800b334 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 800b344:	2000      	movs	r0, #0
}
 800b346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800b348:	2003      	movs	r0, #3
}
 800b34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b34c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b350:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b352:	e7e6      	b.n	800b322 <RCCEx_PLL3_Config.part.0+0xaa>
 800b354:	58024400 	.word	0x58024400
 800b358:	ffff0007 	.word	0xffff0007

0800b35c <HAL_RCCEx_PeriphCLKConfig>:
{
 800b35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b360:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800b364:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b366:	011d      	lsls	r5, r3, #4
 800b368:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 800b36c:	d525      	bpl.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800b36e:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 800b370:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800b374:	f000 8683 	beq.w	800c07e <HAL_RCCEx_PeriphCLKConfig+0xd22>
 800b378:	d814      	bhi.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
 800b37a:	2900      	cmp	r1, #0
 800b37c:	f000 86f9 	beq.w	800c172 <HAL_RCCEx_PeriphCLKConfig+0xe16>
 800b380:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800b384:	f040 841b 	bne.w	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x862>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b388:	49ad      	ldr	r1, [pc, #692]	@ (800b640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b38a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b38c:	f001 0103 	and.w	r1, r1, #3
 800b390:	2903      	cmp	r1, #3
 800b392:	f000 8414 	beq.w	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x862>
 800b396:	2102      	movs	r1, #2
 800b398:	3008      	adds	r0, #8
 800b39a:	f7ff fefb 	bl	800b194 <RCCEx_PLL2_Config.part.0>
 800b39e:	4606      	mov	r6, r0
 800b3a0:	f000 be79 	b.w	800c096 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800b3a4:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 800b3a8:	f040 8409 	bne.w	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x862>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b3ac:	4da4      	ldr	r5, [pc, #656]	@ (800b640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b3ae:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b3b0:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 800b3b2:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 800b3b6:	4301      	orrs	r1, r0
 800b3b8:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b3ba:	05d8      	lsls	r0, r3, #23
 800b3bc:	d50a      	bpl.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch (PeriphClkInit->Sai1ClockSelection)
 800b3be:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800b3c0:	2904      	cmp	r1, #4
 800b3c2:	d806      	bhi.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b3c4:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b3c8:	062504ce 	.word	0x062504ce
 800b3cc:	04d3063a 	.word	0x04d3063a
 800b3d0:	04d3      	.short	0x04d3
        ret = HAL_ERROR;
 800b3d2:	2601      	movs	r6, #1
 800b3d4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b3d6:	0599      	lsls	r1, r3, #22
 800b3d8:	d524      	bpl.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800b3da:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800b3dc:	2980      	cmp	r1, #128	@ 0x80
 800b3de:	f000 863d 	beq.w	800c05c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b3e2:	f200 8122 	bhi.w	800b62a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b3e6:	2900      	cmp	r1, #0
 800b3e8:	f000 84a6 	beq.w	800bd38 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 800b3ec:	2940      	cmp	r1, #64	@ 0x40
 800b3ee:	f040 8123 	bne.w	800b638 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b3f2:	4993      	ldr	r1, [pc, #588]	@ (800b640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b3f4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b3f6:	f001 0103 	and.w	r1, r1, #3
 800b3fa:	2903      	cmp	r1, #3
 800b3fc:	f000 811c 	beq.w	800b638 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800b400:	2100      	movs	r1, #0
 800b402:	f104 0008 	add.w	r0, r4, #8
 800b406:	f7ff fec5 	bl	800b194 <RCCEx_PLL2_Config.part.0>
 800b40a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b40c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b410:	2d00      	cmp	r5, #0
 800b412:	f040 8499 	bne.w	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b416:	4f8a      	ldr	r7, [pc, #552]	@ (800b640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b418:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800b41a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b41c:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 800b420:	4301      	orrs	r1, r0
 800b422:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b424:	055f      	lsls	r7, r3, #21
 800b426:	d528      	bpl.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4AClockSelection)
 800b428:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 800b42c:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 800b430:	f000 85de 	beq.w	800bff0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
 800b434:	f200 8106 	bhi.w	800b644 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800b438:	2900      	cmp	r1, #0
 800b43a:	f000 8472 	beq.w	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x9c6>
 800b43e:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800b442:	f040 8107 	bne.w	800b654 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b446:	497e      	ldr	r1, [pc, #504]	@ (800b640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b448:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b44a:	f001 0103 	and.w	r1, r1, #3
 800b44e:	2903      	cmp	r1, #3
 800b450:	f000 8100 	beq.w	800b654 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800b454:	2100      	movs	r1, #0
 800b456:	f104 0008 	add.w	r0, r4, #8
 800b45a:	f7ff fe9b 	bl	800b194 <RCCEx_PLL2_Config.part.0>
 800b45e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b460:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b464:	2d00      	cmp	r5, #0
 800b466:	f040 8464 	bne.w	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b46a:	4f75      	ldr	r7, [pc, #468]	@ (800b640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b46c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 800b470:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b472:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 800b476:	4301      	orrs	r1, r0
 800b478:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b47a:	0518      	lsls	r0, r3, #20
 800b47c:	d528      	bpl.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch (PeriphClkInit->Sai4BClockSelection)
 800b47e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 800b482:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 800b486:	f000 85a2 	beq.w	800bfce <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800b48a:	f200 80e6 	bhi.w	800b65a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800b48e:	2900      	cmp	r1, #0
 800b490:	f000 847a 	beq.w	800bd88 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800b494:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 800b498:	f040 80e7 	bne.w	800b66a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b49c:	4968      	ldr	r1, [pc, #416]	@ (800b640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b49e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b4a0:	f001 0103 	and.w	r1, r1, #3
 800b4a4:	2903      	cmp	r1, #3
 800b4a6:	f000 80e0 	beq.w	800b66a <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	f104 0008 	add.w	r0, r4, #8
 800b4b0:	f7ff fe70 	bl	800b194 <RCCEx_PLL2_Config.part.0>
 800b4b4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b4b6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b4ba:	2d00      	cmp	r5, #0
 800b4bc:	f040 846c 	bne.w	800bd98 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b4c0:	4f5f      	ldr	r7, [pc, #380]	@ (800b640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b4c2:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 800b4c6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b4c8:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 800b4cc:	4301      	orrs	r1, r0
 800b4ce:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b4d0:	0199      	lsls	r1, r3, #6
 800b4d2:	d518      	bpl.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch (PeriphClkInit->QspiClockSelection)
 800b4d4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800b4d6:	2920      	cmp	r1, #32
 800b4d8:	f000 84bb 	beq.w	800be52 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 800b4dc:	f200 80c8 	bhi.w	800b670 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800b4e0:	b139      	cbz	r1, 800b4f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b4e2:	2910      	cmp	r1, #16
 800b4e4:	f040 80c7 	bne.w	800b676 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4e8:	4855      	ldr	r0, [pc, #340]	@ (800b640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b4ea:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800b4ec:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800b4f0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b4f2:	2d00      	cmp	r5, #0
 800b4f4:	f040 8492 	bne.w	800be1c <HAL_RCCEx_PeriphCLKConfig+0xac0>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b4f8:	4f51      	ldr	r7, [pc, #324]	@ (800b640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b4fa:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800b4fc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b4fe:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 800b502:	4301      	orrs	r1, r0
 800b504:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b506:	04df      	lsls	r7, r3, #19
 800b508:	d526      	bpl.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    switch (PeriphClkInit->Spi123ClockSelection)
 800b50a:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800b50c:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800b510:	f000 854c 	beq.w	800bfac <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800b514:	f200 80b2 	bhi.w	800b67c <HAL_RCCEx_PeriphCLKConfig+0x320>
 800b518:	2900      	cmp	r1, #0
 800b51a:	f000 8418 	beq.w	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800b51e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800b522:	f040 80b3 	bne.w	800b68c <HAL_RCCEx_PeriphCLKConfig+0x330>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b526:	4946      	ldr	r1, [pc, #280]	@ (800b640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b528:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b52a:	f001 0103 	and.w	r1, r1, #3
 800b52e:	2903      	cmp	r1, #3
 800b530:	f000 80ac 	beq.w	800b68c <HAL_RCCEx_PeriphCLKConfig+0x330>
 800b534:	2100      	movs	r1, #0
 800b536:	f104 0008 	add.w	r0, r4, #8
 800b53a:	f7ff fe2b 	bl	800b194 <RCCEx_PLL2_Config.part.0>
 800b53e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b540:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b544:	2d00      	cmp	r5, #0
 800b546:	f040 840a 	bne.w	800bd5e <HAL_RCCEx_PeriphCLKConfig+0xa02>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b54a:	4f3d      	ldr	r7, [pc, #244]	@ (800b640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b54c:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800b54e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b550:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800b554:	4301      	orrs	r1, r0
 800b556:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b558:	0498      	lsls	r0, r3, #18
 800b55a:	d524      	bpl.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800b55c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800b55e:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800b562:	f000 84e8 	beq.w	800bf36 <HAL_RCCEx_PeriphCLKConfig+0xbda>
 800b566:	f200 8094 	bhi.w	800b692 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800b56a:	b191      	cbz	r1, 800b592 <HAL_RCCEx_PeriphCLKConfig+0x236>
 800b56c:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800b570:	f040 8099 	bne.w	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b574:	4932      	ldr	r1, [pc, #200]	@ (800b640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b576:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b578:	f001 0103 	and.w	r1, r1, #3
 800b57c:	2903      	cmp	r1, #3
 800b57e:	f000 8092 	beq.w	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b582:	2101      	movs	r1, #1
 800b584:	f104 0008 	add.w	r0, r4, #8
 800b588:	f7ff fe04 	bl	800b194 <RCCEx_PLL2_Config.part.0>
 800b58c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b58e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b592:	2d00      	cmp	r5, #0
 800b594:	f040 8590 	bne.w	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b598:	4f29      	ldr	r7, [pc, #164]	@ (800b640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b59a:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800b59c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b59e:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 800b5a2:	4301      	orrs	r1, r0
 800b5a4:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b5a6:	0459      	lsls	r1, r3, #17
 800b5a8:	d523      	bpl.n	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch (PeriphClkInit->Spi6ClockSelection)
 800b5aa:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 800b5ae:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 800b5b2:	f000 8474 	beq.w	800be9e <HAL_RCCEx_PeriphCLKConfig+0xb42>
 800b5b6:	d879      	bhi.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0x350>
 800b5b8:	b181      	cbz	r1, 800b5dc <HAL_RCCEx_PeriphCLKConfig+0x280>
 800b5ba:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800b5be:	d17d      	bne.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x360>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b5c0:	491f      	ldr	r1, [pc, #124]	@ (800b640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b5c2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b5c4:	f001 0103 	and.w	r1, r1, #3
 800b5c8:	2903      	cmp	r1, #3
 800b5ca:	d077      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b5cc:	2101      	movs	r1, #1
 800b5ce:	f104 0008 	add.w	r0, r4, #8
 800b5d2:	f7ff fddf 	bl	800b194 <RCCEx_PLL2_Config.part.0>
 800b5d6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b5d8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b5dc:	2d00      	cmp	r5, #0
 800b5de:	f040 8565 	bne.w	800c0ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b5e2:	4f17      	ldr	r7, [pc, #92]	@ (800b640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b5e4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800b5e8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b5ea:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 800b5ee:	4301      	orrs	r1, r0
 800b5f0:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b5f2:	041f      	lsls	r7, r3, #16
 800b5f4:	d50d      	bpl.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch (PeriphClkInit->FdcanClockSelection)
 800b5f6:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800b5f8:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800b5fc:	f000 829a 	beq.w	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 800b600:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 800b604:	f000 83f5 	beq.w	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800b608:	2900      	cmp	r1, #0
 800b60a:	f000 8298 	beq.w	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        ret = HAL_ERROR;
 800b60e:	2601      	movs	r6, #1
 800b610:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b612:	01d8      	lsls	r0, r3, #7
 800b614:	d564      	bpl.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
    switch (PeriphClkInit->FmcClockSelection)
 800b616:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b618:	2903      	cmp	r1, #3
 800b61a:	f200 85b9 	bhi.w	800c190 <HAL_RCCEx_PeriphCLKConfig+0xe34>
 800b61e:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b622:	0055      	.short	0x0055
 800b624:	04050050 	.word	0x04050050
 800b628:	0055      	.short	0x0055
    switch (PeriphClkInit->Sai23ClockSelection)
 800b62a:	29c0      	cmp	r1, #192	@ 0xc0
 800b62c:	f43f aef0 	beq.w	800b410 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 800b630:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800b634:	f43f aeec 	beq.w	800b410 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        ret = HAL_ERROR;
 800b638:	2601      	movs	r6, #1
 800b63a:	4635      	mov	r5, r6
 800b63c:	e6f2      	b.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 800b63e:	bf00      	nop
 800b640:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Sai4AClockSelection)
 800b644:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 800b648:	f43f af0c 	beq.w	800b464 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b64c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800b650:	f43f af08 	beq.w	800b464 <HAL_RCCEx_PeriphCLKConfig+0x108>
        ret = HAL_ERROR;
 800b654:	2601      	movs	r6, #1
 800b656:	4635      	mov	r5, r6
 800b658:	e70f      	b.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4BClockSelection)
 800b65a:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 800b65e:	f43f af2c 	beq.w	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800b662:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 800b666:	f43f af28 	beq.w	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
        ret = HAL_ERROR;
 800b66a:	2601      	movs	r6, #1
 800b66c:	4635      	mov	r5, r6
 800b66e:	e72f      	b.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch (PeriphClkInit->QspiClockSelection)
 800b670:	2930      	cmp	r1, #48	@ 0x30
 800b672:	f43f af3e 	beq.w	800b4f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
        ret = HAL_ERROR;
 800b676:	2601      	movs	r6, #1
 800b678:	4635      	mov	r5, r6
 800b67a:	e744      	b.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch (PeriphClkInit->Spi123ClockSelection)
 800b67c:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 800b680:	f43f af60 	beq.w	800b544 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b684:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800b688:	f43f af5c 	beq.w	800b544 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        ret = HAL_ERROR;
 800b68c:	2601      	movs	r6, #1
 800b68e:	4635      	mov	r5, r6
 800b690:	e762      	b.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    switch (PeriphClkInit->Spi45ClockSelection)
 800b692:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 800b696:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 800b69a:	f43f af7a 	beq.w	800b592 <HAL_RCCEx_PeriphCLKConfig+0x236>
 800b69e:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 800b6a2:	f43f af76 	beq.w	800b592 <HAL_RCCEx_PeriphCLKConfig+0x236>
        ret = HAL_ERROR;
 800b6a6:	2601      	movs	r6, #1
 800b6a8:	4635      	mov	r5, r6
 800b6aa:	e77c      	b.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800b6ac:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 800b6b0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800b6b4:	d092      	beq.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x280>
 800b6b6:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 800b6ba:	d08f      	beq.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x280>
        ret = HAL_ERROR;
 800b6bc:	2601      	movs	r6, #1
 800b6be:	4635      	mov	r5, r6
 800b6c0:	e797      	b.n	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6c2:	483d      	ldr	r0, [pc, #244]	@ (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800b6c4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800b6c6:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800b6ca:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b6cc:	2d00      	cmp	r5, #0
 800b6ce:	f040 83a3 	bne.w	800be18 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b6d2:	4f39      	ldr	r7, [pc, #228]	@ (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800b6d4:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800b6d6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b6d8:	f021 0103 	bic.w	r1, r1, #3
 800b6dc:	4301      	orrs	r1, r0
 800b6de:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b6e0:	0259      	lsls	r1, r3, #9
 800b6e2:	f100 826f 	bmi.w	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x868>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b6e6:	07d8      	lsls	r0, r3, #31
 800b6e8:	d52f      	bpl.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    switch (PeriphClkInit->Usart16ClockSelection)
 800b6ea:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800b6ec:	2928      	cmp	r1, #40	@ 0x28
 800b6ee:	d82a      	bhi.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800b6f0:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b6f4:	0029025a 	.word	0x0029025a
 800b6f8:	00290029 	.word	0x00290029
 800b6fc:	00290029 	.word	0x00290029
 800b700:	00290029 	.word	0x00290029
 800b704:	0029024b 	.word	0x0029024b
 800b708:	00290029 	.word	0x00290029
 800b70c:	00290029 	.word	0x00290029
 800b710:	00290029 	.word	0x00290029
 800b714:	00290518 	.word	0x00290518
 800b718:	00290029 	.word	0x00290029
 800b71c:	00290029 	.word	0x00290029
 800b720:	00290029 	.word	0x00290029
 800b724:	0029025a 	.word	0x0029025a
 800b728:	00290029 	.word	0x00290029
 800b72c:	00290029 	.word	0x00290029
 800b730:	00290029 	.word	0x00290029
 800b734:	0029025a 	.word	0x0029025a
 800b738:	00290029 	.word	0x00290029
 800b73c:	00290029 	.word	0x00290029
 800b740:	00290029 	.word	0x00290029
 800b744:	025a      	.short	0x025a
        ret = HAL_ERROR;
 800b746:	2601      	movs	r6, #1
 800b748:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b74a:	0799      	lsls	r1, r3, #30
 800b74c:	d524      	bpl.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b74e:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 800b750:	2905      	cmp	r1, #5
 800b752:	f200 8515 	bhi.w	800c180 <HAL_RCCEx_PeriphCLKConfig+0xe24>
 800b756:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b75a:	0015      	.short	0x0015
 800b75c:	04c10006 	.word	0x04c10006
 800b760:	00150015 	.word	0x00150015
 800b764:	0015      	.short	0x0015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b766:	4914      	ldr	r1, [pc, #80]	@ (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800b768:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b76a:	f001 0103 	and.w	r1, r1, #3
 800b76e:	2903      	cmp	r1, #3
 800b770:	f000 8506 	beq.w	800c180 <HAL_RCCEx_PeriphCLKConfig+0xe24>
 800b774:	2101      	movs	r1, #1
 800b776:	f104 0008 	add.w	r0, r4, #8
 800b77a:	f7ff fd0b 	bl	800b194 <RCCEx_PLL2_Config.part.0>
 800b77e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b780:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b784:	2d00      	cmp	r5, #0
 800b786:	f040 8494 	bne.w	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0xd56>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b78a:	4f0b      	ldr	r7, [pc, #44]	@ (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800b78c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800b78e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b790:	f021 0107 	bic.w	r1, r1, #7
 800b794:	4301      	orrs	r1, r0
 800b796:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b798:	075f      	lsls	r7, r3, #29
 800b79a:	d529      	bpl.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b79c:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800b7a0:	2905      	cmp	r1, #5
 800b7a2:	f200 84f1 	bhi.w	800c188 <HAL_RCCEx_PeriphCLKConfig+0xe2c>
 800b7a6:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b7aa:	0018      	.short	0x0018
 800b7ac:	04ab0009 	.word	0x04ab0009
 800b7b0:	00180018 	.word	0x00180018
 800b7b4:	0018      	.short	0x0018
 800b7b6:	bf00      	nop
 800b7b8:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b7bc:	49ae      	ldr	r1, [pc, #696]	@ (800ba78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b7be:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b7c0:	f001 0103 	and.w	r1, r1, #3
 800b7c4:	2903      	cmp	r1, #3
 800b7c6:	f000 84df 	beq.w	800c188 <HAL_RCCEx_PeriphCLKConfig+0xe2c>
 800b7ca:	2101      	movs	r1, #1
 800b7cc:	f104 0008 	add.w	r0, r4, #8
 800b7d0:	f7ff fce0 	bl	800b194 <RCCEx_PLL2_Config.part.0>
 800b7d4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b7d6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b7da:	2d00      	cmp	r5, #0
 800b7dc:	f040 8463 	bne.w	800c0a6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b7e0:	4fa5      	ldr	r7, [pc, #660]	@ (800ba78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b7e2:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 800b7e6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b7e8:	f021 0107 	bic.w	r1, r1, #7
 800b7ec:	4301      	orrs	r1, r0
 800b7ee:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b7f0:	0698      	lsls	r0, r3, #26
 800b7f2:	d526      	bpl.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b7f4:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800b7f8:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 800b7fc:	f000 833c 	beq.w	800be78 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b800:	f200 813c 	bhi.w	800ba7c <HAL_RCCEx_PeriphCLKConfig+0x720>
 800b804:	b191      	cbz	r1, 800b82c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b806:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800b80a:	f040 8141 	bne.w	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x734>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b80e:	499a      	ldr	r1, [pc, #616]	@ (800ba78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b810:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b812:	f001 0103 	and.w	r1, r1, #3
 800b816:	2903      	cmp	r1, #3
 800b818:	f000 813a 	beq.w	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x734>
 800b81c:	2100      	movs	r1, #0
 800b81e:	f104 0008 	add.w	r0, r4, #8
 800b822:	f7ff fcb7 	bl	800b194 <RCCEx_PLL2_Config.part.0>
 800b826:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b828:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b82c:	2d00      	cmp	r5, #0
 800b82e:	f040 8448 	bne.w	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0xd66>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b832:	4f91      	ldr	r7, [pc, #580]	@ (800ba78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b834:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800b838:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b83a:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 800b83e:	4301      	orrs	r1, r0
 800b840:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b842:	0659      	lsls	r1, r3, #25
 800b844:	d526      	bpl.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x538>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b846:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 800b84a:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800b84e:	f000 834c 	beq.w	800beea <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800b852:	f200 8120 	bhi.w	800ba96 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800b856:	b191      	cbz	r1, 800b87e <HAL_RCCEx_PeriphCLKConfig+0x522>
 800b858:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b85c:	f040 8125 	bne.w	800baaa <HAL_RCCEx_PeriphCLKConfig+0x74e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b860:	4985      	ldr	r1, [pc, #532]	@ (800ba78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b862:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b864:	f001 0103 	and.w	r1, r1, #3
 800b868:	2903      	cmp	r1, #3
 800b86a:	f000 811e 	beq.w	800baaa <HAL_RCCEx_PeriphCLKConfig+0x74e>
 800b86e:	2100      	movs	r1, #0
 800b870:	f104 0008 	add.w	r0, r4, #8
 800b874:	f7ff fc8e 	bl	800b194 <RCCEx_PLL2_Config.part.0>
 800b878:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b87a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b87e:	2d00      	cmp	r5, #0
 800b880:	f040 8422 	bne.w	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b884:	4f7c      	ldr	r7, [pc, #496]	@ (800ba78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b886:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800b88a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b88c:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 800b890:	4301      	orrs	r1, r0
 800b892:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b894:	061f      	lsls	r7, r3, #24
 800b896:	d526      	bpl.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b898:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800b89c:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800b8a0:	f000 8336 	beq.w	800bf10 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 800b8a4:	f200 8104 	bhi.w	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800b8a8:	b191      	cbz	r1, 800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x574>
 800b8aa:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800b8ae:	f040 8109 	bne.w	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b8b2:	4971      	ldr	r1, [pc, #452]	@ (800ba78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b8b4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b8b6:	f001 0103 	and.w	r1, r1, #3
 800b8ba:	2903      	cmp	r1, #3
 800b8bc:	f000 8102 	beq.w	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x768>
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	f104 0008 	add.w	r0, r4, #8
 800b8c6:	f7ff fc65 	bl	800b194 <RCCEx_PLL2_Config.part.0>
 800b8ca:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b8cc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b8d0:	2d00      	cmp	r5, #0
 800b8d2:	f040 83f4 	bne.w	800c0be <HAL_RCCEx_PeriphCLKConfig+0xd62>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b8d6:	4f68      	ldr	r7, [pc, #416]	@ (800ba78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b8d8:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 800b8dc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b8de:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 800b8e2:	4301      	orrs	r1, r0
 800b8e4:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b8e6:	0718      	lsls	r0, r3, #28
 800b8e8:	d50b      	bpl.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b8ea:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800b8ee:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800b8f2:	f000 8347 	beq.w	800bf84 <HAL_RCCEx_PeriphCLKConfig+0xc28>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b8f6:	4f60      	ldr	r7, [pc, #384]	@ (800ba78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b8f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b8fa:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 800b8fe:	4301      	orrs	r1, r0
 800b900:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b902:	06d9      	lsls	r1, r3, #27
 800b904:	d50b      	bpl.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b906:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 800b90a:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800b90e:	f000 8325 	beq.w	800bf5c <HAL_RCCEx_PeriphCLKConfig+0xc00>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b912:	4f59      	ldr	r7, [pc, #356]	@ (800ba78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b914:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b916:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 800b91a:	4301      	orrs	r1, r0
 800b91c:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b91e:	031f      	lsls	r7, r3, #12
 800b920:	d50e      	bpl.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    switch (PeriphClkInit->AdcClockSelection)
 800b922:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 800b926:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800b92a:	f000 8113 	beq.w	800bb54 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
 800b92e:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800b932:	f000 811e 	beq.w	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800b936:	2900      	cmp	r1, #0
 800b938:	f000 8249 	beq.w	800bdce <HAL_RCCEx_PeriphCLKConfig+0xa72>
        ret = HAL_ERROR;
 800b93c:	2601      	movs	r6, #1
 800b93e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b940:	0358      	lsls	r0, r3, #13
 800b942:	d50f      	bpl.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch (PeriphClkInit->UsbClockSelection)
 800b944:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 800b948:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800b94c:	f000 82ba 	beq.w	800bec4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800b950:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 800b954:	f000 80e2 	beq.w	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800b958:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800b95c:	f000 80d9 	beq.w	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
        ret = HAL_ERROR;
 800b960:	2601      	movs	r6, #1
 800b962:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b964:	03d9      	lsls	r1, r3, #15
 800b966:	d520      	bpl.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0x64e>
    switch (PeriphClkInit->SdmmcClockSelection)
 800b968:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800b96a:	2900      	cmp	r1, #0
 800b96c:	f000 8217 	beq.w	800bd9e <HAL_RCCEx_PeriphCLKConfig+0xa42>
 800b970:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800b974:	f040 80b6 	bne.w	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x788>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b978:	493f      	ldr	r1, [pc, #252]	@ (800ba78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b97a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b97c:	f001 0103 	and.w	r1, r1, #3
 800b980:	2903      	cmp	r1, #3
 800b982:	f000 80af 	beq.w	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x788>
 800b986:	2102      	movs	r1, #2
 800b988:	f104 0008 	add.w	r0, r4, #8
 800b98c:	f7ff fc02 	bl	800b194 <RCCEx_PLL2_Config.part.0>
 800b990:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b992:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b996:	2d00      	cmp	r5, #0
 800b998:	f040 8209 	bne.w	800bdae <HAL_RCCEx_PeriphCLKConfig+0xa52>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b99c:	4f36      	ldr	r7, [pc, #216]	@ (800ba78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b99e:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800b9a0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b9a2:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800b9a6:	4301      	orrs	r1, r0
 800b9a8:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b9aa:	009f      	lsls	r7, r3, #2
 800b9ac:	f100 809f 	bmi.w	800baee <HAL_RCCEx_PeriphCLKConfig+0x792>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b9b0:	0398      	lsls	r0, r3, #14
 800b9b2:	f140 8095 	bpl.w	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    switch (PeriphClkInit->RngClockSelection)
 800b9b6:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 800b9ba:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800b9be:	f000 81fd 	beq.w	800bdbc <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800b9c2:	f240 8082 	bls.w	800baca <HAL_RCCEx_PeriphCLKConfig+0x76e>
 800b9c6:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 800b9ca:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800b9ce:	d07e      	beq.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x772>
 800b9d0:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b9d2:	02d9      	lsls	r1, r3, #11
 800b9d4:	d506      	bpl.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b9d6:	4828      	ldr	r0, [pc, #160]	@ (800ba78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b9d8:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 800b9da:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800b9dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800b9e0:	4331      	orrs	r1, r6
 800b9e2:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b9e4:	00df      	lsls	r7, r3, #3
 800b9e6:	d507      	bpl.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b9e8:	4823      	ldr	r0, [pc, #140]	@ (800ba78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b9ea:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 800b9ee:	6901      	ldr	r1, [r0, #16]
 800b9f0:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800b9f4:	4331      	orrs	r1, r6
 800b9f6:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b9f8:	029e      	lsls	r6, r3, #10
 800b9fa:	d506      	bpl.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b9fc:	481e      	ldr	r0, [pc, #120]	@ (800ba78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b9fe:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 800ba00:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800ba02:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800ba06:	4331      	orrs	r1, r6
 800ba08:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ba0a:	0058      	lsls	r0, r3, #1
 800ba0c:	d509      	bpl.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ba0e:	491a      	ldr	r1, [pc, #104]	@ (800ba78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ba10:	6908      	ldr	r0, [r1, #16]
 800ba12:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800ba16:	6108      	str	r0, [r1, #16]
 800ba18:	6908      	ldr	r0, [r1, #16]
 800ba1a:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
 800ba1e:	4330      	orrs	r0, r6
 800ba20:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	da06      	bge.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ba26:	4814      	ldr	r0, [pc, #80]	@ (800ba78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ba28:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 800ba2a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800ba2c:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 800ba30:	4331      	orrs	r1, r6
 800ba32:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ba34:	0219      	lsls	r1, r3, #8
 800ba36:	d507      	bpl.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ba38:	490f      	ldr	r1, [pc, #60]	@ (800ba78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ba3a:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 800ba3e:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 800ba40:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800ba44:	4303      	orrs	r3, r0
 800ba46:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ba48:	07d3      	lsls	r3, r2, #31
 800ba4a:	f100 810f 	bmi.w	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x910>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ba4e:	0797      	lsls	r7, r2, #30
 800ba50:	f100 80fa 	bmi.w	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ba54:	0756      	lsls	r6, r2, #29
 800ba56:	f100 8140 	bmi.w	800bcda <HAL_RCCEx_PeriphCLKConfig+0x97e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ba5a:	0710      	lsls	r0, r2, #28
 800ba5c:	f100 812b 	bmi.w	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x95a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ba60:	06d1      	lsls	r1, r2, #27
 800ba62:	f100 8115 	bmi.w	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x934>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ba66:	0693      	lsls	r3, r2, #26
 800ba68:	f100 8149 	bmi.w	800bcfe <HAL_RCCEx_PeriphCLKConfig+0x9a2>
  if (status == HAL_OK)
 800ba6c:	1e28      	subs	r0, r5, #0
 800ba6e:	bf18      	it	ne
 800ba70:	2001      	movne	r0, #1
}
 800ba72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba76:	bf00      	nop
 800ba78:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ba7c:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 800ba80:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ba84:	f43f aed2 	beq.w	800b82c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800ba88:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 800ba8c:	f43f aece 	beq.w	800b82c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        ret = HAL_ERROR;
 800ba90:	2601      	movs	r6, #1
 800ba92:	4635      	mov	r5, r6
 800ba94:	e6d5      	b.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ba96:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 800ba9a:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800ba9e:	f43f aeee 	beq.w	800b87e <HAL_RCCEx_PeriphCLKConfig+0x522>
 800baa2:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 800baa6:	f43f aeea 	beq.w	800b87e <HAL_RCCEx_PeriphCLKConfig+0x522>
        ret = HAL_ERROR;
 800baaa:	2601      	movs	r6, #1
 800baac:	4635      	mov	r5, r6
 800baae:	e6f1      	b.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x538>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bab0:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 800bab4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800bab8:	f43f af0a 	beq.w	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x574>
 800babc:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 800bac0:	f43f af06 	beq.w	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x574>
        ret = HAL_ERROR;
 800bac4:	2601      	movs	r6, #1
 800bac6:	4635      	mov	r5, r6
 800bac8:	e70d      	b.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
    switch (PeriphClkInit->RngClockSelection)
 800baca:	2900      	cmp	r1, #0
 800bacc:	d180      	bne.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x674>
    if (ret == HAL_OK)
 800bace:	2d00      	cmp	r5, #0
 800bad0:	f47f af7f 	bne.w	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bad4:	4db7      	ldr	r5, [pc, #732]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bad6:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 800bad8:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 800badc:	4301      	orrs	r1, r0
 800bade:	6569      	str	r1, [r5, #84]	@ 0x54
      status = HAL_ERROR;
 800bae0:	4635      	mov	r5, r6
 800bae2:	e776      	b.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
        ret = HAL_ERROR;
 800bae4:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bae6:	009f      	lsls	r7, r3, #2
        ret = HAL_ERROR;
 800bae8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800baea:	f57f af61 	bpl.w	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x654>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800baee:	49b1      	ldr	r1, [pc, #708]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800baf0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800baf2:	f001 0103 	and.w	r1, r1, #3
 800baf6:	2903      	cmp	r1, #3
 800baf8:	d009      	beq.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x7b2>
 800bafa:	2102      	movs	r1, #2
 800bafc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bb00:	f7ff fbba 	bl	800b278 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bb04:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	f43f af51 	beq.w	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x654>
      status = HAL_ERROR;
 800bb0e:	2601      	movs	r6, #1
 800bb10:	e74e      	b.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x654>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb12:	48a8      	ldr	r0, [pc, #672]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bb14:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800bb16:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800bb1a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800bb1c:	2d00      	cmp	r5, #0
 800bb1e:	f040 8183 	bne.w	800be28 <HAL_RCCEx_PeriphCLKConfig+0xacc>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bb22:	4fa4      	ldr	r7, [pc, #656]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bb24:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800bb28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bb2a:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800bb2e:	4301      	orrs	r1, r0
 800bb30:	6579      	str	r1, [r7, #84]	@ 0x54
 800bb32:	e717      	b.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x608>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb34:	489f      	ldr	r0, [pc, #636]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bb36:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800bb38:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800bb3c:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800bb3e:	2d00      	cmp	r5, #0
 800bb40:	f040 816f 	bne.w	800be22 <HAL_RCCEx_PeriphCLKConfig+0xac6>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bb44:	4f9b      	ldr	r7, [pc, #620]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bb46:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800bb48:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bb4a:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 800bb4e:	4301      	orrs	r1, r0
 800bb50:	6539      	str	r1, [r7, #80]	@ 0x50
 800bb52:	e55e      	b.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb54:	4997      	ldr	r1, [pc, #604]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bb56:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bb58:	f001 0103 	and.w	r1, r1, #3
 800bb5c:	2903      	cmp	r1, #3
 800bb5e:	f43f aeed 	beq.w	800b93c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 800bb62:	2102      	movs	r1, #2
 800bb64:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bb68:	f7ff fb86 	bl	800b278 <RCCEx_PLL3_Config.part.0>
 800bb6c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bb6e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bb72:	2d00      	cmp	r5, #0
 800bb74:	f040 82ab 	bne.w	800c0ce <HAL_RCCEx_PeriphCLKConfig+0xd72>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bb78:	4f8e      	ldr	r7, [pc, #568]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bb7a:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 800bb7e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bb80:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 800bb84:	4301      	orrs	r1, r0
 800bb86:	65b9      	str	r1, [r7, #88]	@ 0x58
 800bb88:	e6da      	b.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb8a:	498a      	ldr	r1, [pc, #552]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bb8c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bb8e:	f001 0103 	and.w	r1, r1, #3
 800bb92:	2903      	cmp	r1, #3
 800bb94:	f43f add7 	beq.w	800b746 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800bb98:	2101      	movs	r1, #1
 800bb9a:	f104 0008 	add.w	r0, r4, #8
 800bb9e:	f7ff faf9 	bl	800b194 <RCCEx_PLL2_Config.part.0>
 800bba2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bba4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bba8:	2d00      	cmp	r5, #0
 800bbaa:	f040 8292 	bne.w	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0xd76>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bbae:	4f81      	ldr	r7, [pc, #516]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bbb0:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800bbb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bbb4:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 800bbb8:	4301      	orrs	r1, r0
 800bbba:	6579      	str	r1, [r7, #84]	@ 0x54
 800bbbc:	e5c5      	b.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        ret = HAL_ERROR;
 800bbbe:	2601      	movs	r6, #1
 800bbc0:	f7ff bbfb 	b.w	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bbc4:	4f7c      	ldr	r7, [pc, #496]	@ (800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xa5c>)
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bbcc:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800bbce:	f7fe fb8d 	bl	800a2ec <HAL_GetTick>
 800bbd2:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bbd4:	e006      	b.n	800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x888>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bbd6:	f7fe fb89 	bl	800a2ec <HAL_GetTick>
 800bbda:	eba0 0008 	sub.w	r0, r0, r8
 800bbde:	2864      	cmp	r0, #100	@ 0x64
 800bbe0:	f200 82b3 	bhi.w	800c14a <HAL_RCCEx_PeriphCLKConfig+0xdee>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	05da      	lsls	r2, r3, #23
 800bbe8:	d5f5      	bpl.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    if (ret == HAL_OK)
 800bbea:	2d00      	cmp	r5, #0
 800bbec:	f040 82ae 	bne.w	800c14c <HAL_RCCEx_PeriphCLKConfig+0xdf0>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bbf0:	4a70      	ldr	r2, [pc, #448]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bbf2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 800bbf6:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800bbf8:	4059      	eors	r1, r3
 800bbfa:	f411 7f40 	tst.w	r1, #768	@ 0x300
 800bbfe:	d00b      	beq.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bc00:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800bc02:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bc04:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800bc08:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 800bc0c:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bc0e:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 800bc10:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 800bc14:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800bc16:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bc18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc1c:	f000 82c2 	beq.w	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bc20:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800bc24:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800bc28:	f000 82d0 	beq.w	800c1cc <HAL_RCCEx_PeriphCLKConfig+0xe70>
 800bc2c:	4961      	ldr	r1, [pc, #388]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bc2e:	690a      	ldr	r2, [r1, #16]
 800bc30:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800bc34:	610a      	str	r2, [r1, #16]
 800bc36:	485f      	ldr	r0, [pc, #380]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bc38:	f3c3 010b 	ubfx	r1, r3, #0, #12
 800bc3c:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 800bc3e:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bc40:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bc44:	6701      	str	r1, [r0, #112]	@ 0x70
 800bc46:	e54e      	b.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bc48:	4b5a      	ldr	r3, [pc, #360]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bc4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc4c:	f003 0303 	and.w	r3, r3, #3
 800bc50:	2b03      	cmp	r3, #3
 800bc52:	f000 8280 	beq.w	800c156 <HAL_RCCEx_PeriphCLKConfig+0xdfa>
 800bc56:	2101      	movs	r1, #1
 800bc58:	f104 0008 	add.w	r0, r4, #8
 800bc5c:	f7ff fa9a 	bl	800b194 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bc60:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800bc62:	2800      	cmp	r0, #0
 800bc64:	f43f aef6 	beq.w	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bc68:	4605      	mov	r5, r0
 800bc6a:	e6f3      	b.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bc6c:	4b51      	ldr	r3, [pc, #324]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bc6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc70:	f003 0303 	and.w	r3, r3, #3
 800bc74:	2b03      	cmp	r3, #3
 800bc76:	f000 827a 	beq.w	800c16e <HAL_RCCEx_PeriphCLKConfig+0xe12>
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	f104 0008 	add.w	r0, r4, #8
 800bc80:	f7ff fa88 	bl	800b194 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bc84:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800bc86:	2800      	cmp	r0, #0
 800bc88:	f43f aee1 	beq.w	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bc8c:	4605      	mov	r5, r0
 800bc8e:	e6de      	b.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bc90:	4b48      	ldr	r3, [pc, #288]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc92:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bc96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc98:	f003 0303 	and.w	r3, r3, #3
 800bc9c:	2b03      	cmp	r3, #3
 800bc9e:	f000 8260 	beq.w	800c162 <HAL_RCCEx_PeriphCLKConfig+0xe06>
 800bca2:	2101      	movs	r1, #1
 800bca4:	4630      	mov	r0, r6
 800bca6:	f7ff fae7 	bl	800b278 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bcaa:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800bcac:	2800      	cmp	r0, #0
 800bcae:	f43f aeda 	beq.w	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x70a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bcb2:	4605      	mov	r5, r0
 800bcb4:	e256      	b.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bcb6:	4b3f      	ldr	r3, [pc, #252]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bcb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcba:	f003 0303 	and.w	r3, r3, #3
 800bcbe:	2b03      	cmp	r3, #3
 800bcc0:	f000 824d 	beq.w	800c15e <HAL_RCCEx_PeriphCLKConfig+0xe02>
 800bcc4:	2100      	movs	r1, #0
 800bcc6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bcca:	f7ff fad5 	bl	800b278 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bcce:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	f43f aec5 	beq.w	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x704>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bcd6:	4605      	mov	r5, r0
 800bcd8:	e6c2      	b.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x704>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bcda:	4b36      	ldr	r3, [pc, #216]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bcdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcde:	f003 0303 	and.w	r3, r3, #3
 800bce2:	2b03      	cmp	r3, #3
 800bce4:	f000 8239 	beq.w	800c15a <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 800bce8:	2102      	movs	r1, #2
 800bcea:	f104 0008 	add.w	r0, r4, #8
 800bcee:	f7ff fa51 	bl	800b194 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bcf2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	f43f aeb0 	beq.w	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bcfa:	4605      	mov	r5, r0
 800bcfc:	e6ad      	b.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bcfe:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bd02:	4b2c      	ldr	r3, [pc, #176]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bd04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd06:	f003 0303 	and.w	r3, r3, #3
 800bd0a:	2b03      	cmp	r3, #3
 800bd0c:	d006      	beq.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 800bd0e:	2102      	movs	r1, #2
 800bd10:	4630      	mov	r0, r6
 800bd12:	f7ff fab1 	bl	800b278 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 800bd16:	2800      	cmp	r0, #0
 800bd18:	f43f aea8 	beq.w	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x710>
  return HAL_ERROR;
 800bd1c:	2001      	movs	r0, #1
}
 800bd1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd22:	4824      	ldr	r0, [pc, #144]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bd24:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800bd26:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800bd2a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800bd2c:	2d00      	cmp	r5, #0
 800bd2e:	f43f ab9c 	beq.w	800b46a <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800bd32:	462e      	mov	r6, r5
 800bd34:	f7ff bba1 	b.w	800b47a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd38:	481e      	ldr	r0, [pc, #120]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bd3a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800bd3c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800bd40:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800bd42:	2d00      	cmp	r5, #0
 800bd44:	f43f ab67 	beq.w	800b416 <HAL_RCCEx_PeriphCLKConfig+0xba>
 800bd48:	462e      	mov	r6, r5
 800bd4a:	f7ff bb6b 	b.w	800b424 <HAL_RCCEx_PeriphCLKConfig+0xc8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd4e:	4819      	ldr	r0, [pc, #100]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bd50:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800bd52:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800bd56:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800bd58:	2d00      	cmp	r5, #0
 800bd5a:	f43f abf6 	beq.w	800b54a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800bd5e:	462e      	mov	r6, r5
 800bd60:	f7ff bbfa 	b.w	800b558 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd64:	4813      	ldr	r0, [pc, #76]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bd66:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800bd68:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800bd6c:	62c1      	str	r1, [r0, #44]	@ 0x2c
        ret = HAL_ERROR;
 800bd6e:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800bd70:	2d00      	cmp	r5, #0
 800bd72:	f040 8160 	bne.w	800c036 <HAL_RCCEx_PeriphCLKConfig+0xcda>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bd76:	4f0f      	ldr	r7, [pc, #60]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bd78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd7a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bd7c:	f021 0107 	bic.w	r1, r1, #7
 800bd80:	4301      	orrs	r1, r0
 800bd82:	6539      	str	r1, [r7, #80]	@ 0x50
 800bd84:	f7ff bb27 	b.w	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd88:	480a      	ldr	r0, [pc, #40]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bd8a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800bd8c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800bd90:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800bd92:	2d00      	cmp	r5, #0
 800bd94:	f43f ab94 	beq.w	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x164>
 800bd98:	462e      	mov	r6, r5
 800bd9a:	f7ff bb99 	b.w	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd9e:	4805      	ldr	r0, [pc, #20]	@ (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bda0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800bda2:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800bda6:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800bda8:	2d00      	cmp	r5, #0
 800bdaa:	f43f adf7 	beq.w	800b99c <HAL_RCCEx_PeriphCLKConfig+0x640>
 800bdae:	462e      	mov	r6, r5
 800bdb0:	e5fb      	b.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bdb2:	bf00      	nop
 800bdb4:	58024400 	.word	0x58024400
 800bdb8:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdbc:	4fc6      	ldr	r7, [pc, #792]	@ (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bdbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bdc0:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 800bdc4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 800bdc6:	2d00      	cmp	r5, #0
 800bdc8:	f47f ae03 	bne.w	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800bdcc:	e682      	b.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0x778>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bdce:	48c2      	ldr	r0, [pc, #776]	@ (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bdd0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800bdd2:	f000 0003 	and.w	r0, r0, #3
 800bdd6:	2803      	cmp	r0, #3
 800bdd8:	f43f adb0 	beq.w	800b93c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 800bddc:	f104 0008 	add.w	r0, r4, #8
 800bde0:	f7ff f9d8 	bl	800b194 <RCCEx_PLL2_Config.part.0>
 800bde4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bde6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bdea:	2d00      	cmp	r5, #0
 800bdec:	f43f aec4 	beq.w	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 800bdf0:	e16d      	b.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0xd72>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bdf2:	49b9      	ldr	r1, [pc, #740]	@ (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bdf4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bdf6:	f001 0103 	and.w	r1, r1, #3
 800bdfa:	2903      	cmp	r1, #3
 800bdfc:	f43f ac07 	beq.w	800b60e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 800be00:	2101      	movs	r1, #1
 800be02:	f104 0008 	add.w	r0, r4, #8
 800be06:	f7ff f9c5 	bl	800b194 <RCCEx_PLL2_Config.part.0>
 800be0a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800be0c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800be10:	2d00      	cmp	r5, #0
 800be12:	f43f ae97 	beq.w	800bb44 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
 800be16:	e004      	b.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0xac6>
 800be18:	462e      	mov	r6, r5
 800be1a:	e461      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800be1c:	462e      	mov	r6, r5
 800be1e:	f7ff bb72 	b.w	800b506 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800be22:	462e      	mov	r6, r5
 800be24:	f7ff bbf5 	b.w	800b612 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800be28:	462e      	mov	r6, r5
 800be2a:	e59b      	b.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x608>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be2c:	49aa      	ldr	r1, [pc, #680]	@ (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800be2e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800be30:	f001 0103 	and.w	r1, r1, #3
 800be34:	2903      	cmp	r1, #3
 800be36:	f000 81ab 	beq.w	800c190 <HAL_RCCEx_PeriphCLKConfig+0xe34>
 800be3a:	2102      	movs	r1, #2
 800be3c:	f104 0008 	add.w	r0, r4, #8
 800be40:	f7ff f9a8 	bl	800b194 <RCCEx_PLL2_Config.part.0>
 800be44:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800be46:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800be4a:	2d00      	cmp	r5, #0
 800be4c:	f43f ac41 	beq.w	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800be50:	e7e2      	b.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0xabc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be52:	49a1      	ldr	r1, [pc, #644]	@ (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800be54:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800be56:	f001 0103 	and.w	r1, r1, #3
 800be5a:	2903      	cmp	r1, #3
 800be5c:	f43f ac0b 	beq.w	800b676 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800be60:	2102      	movs	r1, #2
 800be62:	f104 0008 	add.w	r0, r4, #8
 800be66:	f7ff f995 	bl	800b194 <RCCEx_PLL2_Config.part.0>
 800be6a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800be6c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800be70:	2d00      	cmp	r5, #0
 800be72:	f43f ab41 	beq.w	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800be76:	e7d1      	b.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0xac0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be78:	4997      	ldr	r1, [pc, #604]	@ (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800be7a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800be7c:	f001 0103 	and.w	r1, r1, #3
 800be80:	2903      	cmp	r1, #3
 800be82:	f43f ae05 	beq.w	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x734>
 800be86:	2102      	movs	r1, #2
 800be88:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800be8c:	f7ff f9f4 	bl	800b278 <RCCEx_PLL3_Config.part.0>
 800be90:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800be92:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800be96:	2d00      	cmp	r5, #0
 800be98:	f43f accb 	beq.w	800b832 <HAL_RCCEx_PeriphCLKConfig+0x4d6>
 800be9c:	e111      	b.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0xd66>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be9e:	498e      	ldr	r1, [pc, #568]	@ (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bea0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bea2:	f001 0103 	and.w	r1, r1, #3
 800bea6:	2903      	cmp	r1, #3
 800bea8:	f43f ac08 	beq.w	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800beac:	2101      	movs	r1, #1
 800beae:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800beb2:	f7ff f9e1 	bl	800b278 <RCCEx_PLL3_Config.part.0>
 800beb6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800beb8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bebc:	2d00      	cmp	r5, #0
 800bebe:	f43f ab90 	beq.w	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800bec2:	e0f3      	b.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bec4:	4984      	ldr	r1, [pc, #528]	@ (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bec6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bec8:	f001 0103 	and.w	r1, r1, #3
 800becc:	2903      	cmp	r1, #3
 800bece:	f43f ad47 	beq.w	800b960 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bed2:	2101      	movs	r1, #1
 800bed4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bed8:	f7ff f9ce 	bl	800b278 <RCCEx_PLL3_Config.part.0>
 800bedc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bede:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bee2:	2d00      	cmp	r5, #0
 800bee4:	f43f ae1d 	beq.w	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800bee8:	e79e      	b.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0xacc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800beea:	497b      	ldr	r1, [pc, #492]	@ (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800beec:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800beee:	f001 0103 	and.w	r1, r1, #3
 800bef2:	2903      	cmp	r1, #3
 800bef4:	f43f add9 	beq.w	800baaa <HAL_RCCEx_PeriphCLKConfig+0x74e>
 800bef8:	2102      	movs	r1, #2
 800befa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800befe:	f7ff f9bb 	bl	800b278 <RCCEx_PLL3_Config.part.0>
 800bf02:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bf04:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bf08:	2d00      	cmp	r5, #0
 800bf0a:	f43f acbb 	beq.w	800b884 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800bf0e:	e0db      	b.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf10:	4971      	ldr	r1, [pc, #452]	@ (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bf12:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bf14:	f001 0103 	and.w	r1, r1, #3
 800bf18:	2903      	cmp	r1, #3
 800bf1a:	f43f add3 	beq.w	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x768>
 800bf1e:	2102      	movs	r1, #2
 800bf20:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bf24:	f7ff f9a8 	bl	800b278 <RCCEx_PLL3_Config.part.0>
 800bf28:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bf2a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bf2e:	2d00      	cmp	r5, #0
 800bf30:	f43f acd1 	beq.w	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800bf34:	e0c3      	b.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0xd62>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf36:	4968      	ldr	r1, [pc, #416]	@ (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bf38:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bf3a:	f001 0103 	and.w	r1, r1, #3
 800bf3e:	2903      	cmp	r1, #3
 800bf40:	f43f abb1 	beq.w	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800bf44:	2101      	movs	r1, #1
 800bf46:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bf4a:	f7ff f995 	bl	800b278 <RCCEx_PLL3_Config.part.0>
 800bf4e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bf50:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bf54:	2d00      	cmp	r5, #0
 800bf56:	f43f ab1f 	beq.w	800b598 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800bf5a:	e0ad      	b.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf5c:	495e      	ldr	r1, [pc, #376]	@ (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bf5e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bf60:	f001 0103 	and.w	r1, r1, #3
 800bf64:	2903      	cmp	r1, #3
 800bf66:	f000 811a 	beq.w	800c19e <HAL_RCCEx_PeriphCLKConfig+0xe42>
 800bf6a:	2102      	movs	r1, #2
 800bf6c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bf70:	f7ff f982 	bl	800b278 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bf74:	2800      	cmp	r0, #0
 800bf76:	f040 8139 	bne.w	800c1ec <HAL_RCCEx_PeriphCLKConfig+0xe90>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bf7a:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bf7e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bf82:	e4c6      	b.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf84:	4954      	ldr	r1, [pc, #336]	@ (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bf86:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bf88:	f001 0103 	and.w	r1, r1, #3
 800bf8c:	2903      	cmp	r1, #3
 800bf8e:	f000 8103 	beq.w	800c198 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 800bf92:	2102      	movs	r1, #2
 800bf94:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bf98:	f7ff f96e 	bl	800b278 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	f040 812c 	bne.w	800c1fa <HAL_RCCEx_PeriphCLKConfig+0xe9e>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bfa2:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bfa6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bfaa:	e4a4      	b.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bfac:	494a      	ldr	r1, [pc, #296]	@ (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bfae:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bfb0:	f001 0103 	and.w	r1, r1, #3
 800bfb4:	2903      	cmp	r1, #3
 800bfb6:	f43f ab69 	beq.w	800b68c <HAL_RCCEx_PeriphCLKConfig+0x330>
 800bfba:	2100      	movs	r1, #0
 800bfbc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bfc0:	f7ff f95a 	bl	800b278 <RCCEx_PLL3_Config.part.0>
 800bfc4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bfc6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bfca:	f7ff babb 	b.w	800b544 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bfce:	4942      	ldr	r1, [pc, #264]	@ (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bfd0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bfd2:	f001 0103 	and.w	r1, r1, #3
 800bfd6:	2903      	cmp	r1, #3
 800bfd8:	f43f ab47 	beq.w	800b66a <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800bfdc:	2100      	movs	r1, #0
 800bfde:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bfe2:	f7ff f949 	bl	800b278 <RCCEx_PLL3_Config.part.0>
 800bfe6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bfe8:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bfec:	f7ff ba65 	b.w	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bff0:	4939      	ldr	r1, [pc, #228]	@ (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bff2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bff4:	f001 0103 	and.w	r1, r1, #3
 800bff8:	2903      	cmp	r1, #3
 800bffa:	f43f ab2b 	beq.w	800b654 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800bffe:	2100      	movs	r1, #0
 800c000:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800c004:	f7ff f938 	bl	800b278 <RCCEx_PLL3_Config.part.0>
 800c008:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c00a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c00e:	f7ff ba29 	b.w	800b464 <HAL_RCCEx_PeriphCLKConfig+0x108>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c012:	4931      	ldr	r1, [pc, #196]	@ (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800c014:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800c016:	f001 0103 	and.w	r1, r1, #3
 800c01a:	2903      	cmp	r1, #3
 800c01c:	f43f a9d9 	beq.w	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c020:	2100      	movs	r1, #0
 800c022:	f104 0008 	add.w	r0, r4, #8
 800c026:	f7ff f8b5 	bl	800b194 <RCCEx_PLL2_Config.part.0>
 800c02a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c02c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c030:	2d00      	cmp	r5, #0
 800c032:	f43f aea0 	beq.w	800bd76 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800c036:	462e      	mov	r6, r5
 800c038:	f7ff b9cd 	b.w	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c03c:	4926      	ldr	r1, [pc, #152]	@ (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800c03e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800c040:	f001 0103 	and.w	r1, r1, #3
 800c044:	2903      	cmp	r1, #3
 800c046:	f43f a9c4 	beq.w	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c04a:	2100      	movs	r1, #0
 800c04c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800c050:	f7ff f912 	bl	800b278 <RCCEx_PLL3_Config.part.0>
 800c054:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c056:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c05a:	e689      	b.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0xa14>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c05c:	491e      	ldr	r1, [pc, #120]	@ (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800c05e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800c060:	f001 0103 	and.w	r1, r1, #3
 800c064:	2903      	cmp	r1, #3
 800c066:	f43f aae7 	beq.w	800b638 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800c06a:	2100      	movs	r1, #0
 800c06c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800c070:	f7ff f902 	bl	800b278 <RCCEx_PLL3_Config.part.0>
 800c074:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c076:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c07a:	f7ff b9c9 	b.w	800b410 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c07e:	4916      	ldr	r1, [pc, #88]	@ (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800c080:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800c082:	f001 0103 	and.w	r1, r1, #3
 800c086:	2903      	cmp	r1, #3
 800c088:	f43f ad99 	beq.w	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x862>
 800c08c:	2102      	movs	r1, #2
 800c08e:	3028      	adds	r0, #40	@ 0x28
 800c090:	f7ff f8f2 	bl	800b278 <RCCEx_PLL3_Config.part.0>
 800c094:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c096:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c09a:	2e00      	cmp	r6, #0
 800c09c:	f47f a98d 	bne.w	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c0a0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800c0a2:	f7ff b983 	b.w	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x50>
 800c0a6:	462e      	mov	r6, r5
 800c0a8:	f7ff bba2 	b.w	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800c0ac:	462e      	mov	r6, r5
 800c0ae:	f7ff baa0 	b.w	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800c0b2:	462e      	mov	r6, r5
 800c0b4:	f7ff bb70 	b.w	800b798 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800c0b8:	462e      	mov	r6, r5
 800c0ba:	f7ff ba74 	b.w	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800c0be:	462e      	mov	r6, r5
 800c0c0:	e411      	b.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800c0c2:	462e      	mov	r6, r5
 800c0c4:	f7ff bbbd 	b.w	800b842 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800c0c8:	462e      	mov	r6, r5
 800c0ca:	f7ff bbe3 	b.w	800b894 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800c0ce:	462e      	mov	r6, r5
 800c0d0:	e436      	b.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 800c0d2:	462e      	mov	r6, r5
 800c0d4:	f7ff bb39 	b.w	800b74a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 800c0d8:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c0dc:	494a      	ldr	r1, [pc, #296]	@ (800c208 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 800c0de:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800c0e0:	f001 0103 	and.w	r1, r1, #3
 800c0e4:	2903      	cmp	r1, #3
 800c0e6:	d04b      	beq.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0xe24>
 800c0e8:	2101      	movs	r1, #1
 800c0ea:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800c0ee:	f7ff f8c3 	bl	800b278 <RCCEx_PLL3_Config.part.0>
 800c0f2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c0f4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c0f8:	2d00      	cmp	r5, #0
 800c0fa:	f43f ab46 	beq.w	800b78a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800c0fe:	e7d8      	b.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0xd56>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c100:	4941      	ldr	r1, [pc, #260]	@ (800c208 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 800c102:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800c104:	f001 0103 	and.w	r1, r1, #3
 800c108:	2903      	cmp	r1, #3
 800c10a:	d03d      	beq.n	800c188 <HAL_RCCEx_PeriphCLKConfig+0xe2c>
 800c10c:	2101      	movs	r1, #1
 800c10e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800c112:	f7ff f8b1 	bl	800b278 <RCCEx_PLL3_Config.part.0>
 800c116:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c118:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c11c:	2d00      	cmp	r5, #0
 800c11e:	f43f ab5f 	beq.w	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800c122:	e7c0      	b.n	800c0a6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c124:	4938      	ldr	r1, [pc, #224]	@ (800c208 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 800c126:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800c128:	f001 0103 	and.w	r1, r1, #3
 800c12c:	2903      	cmp	r1, #3
 800c12e:	f43f ab0a 	beq.w	800b746 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800c132:	2101      	movs	r1, #1
 800c134:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800c138:	f7ff f89e 	bl	800b278 <RCCEx_PLL3_Config.part.0>
 800c13c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c13e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c142:	2d00      	cmp	r5, #0
 800c144:	f43f ad33 	beq.w	800bbae <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c148:	e7c3      	b.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        ret = HAL_TIMEOUT;
 800c14a:	2503      	movs	r5, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c14c:	462e      	mov	r6, r5
 800c14e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c152:	f7ff bac8 	b.w	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    return HAL_ERROR;
 800c156:	2501      	movs	r5, #1
 800c158:	e47c      	b.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c15a:	2501      	movs	r5, #1
 800c15c:	e47d      	b.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    return HAL_ERROR;
 800c15e:	2501      	movs	r5, #1
 800c160:	e47e      	b.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x704>
 800c162:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c164:	0692      	lsls	r2, r2, #26
 800c166:	f53f adcc 	bmi.w	800bd02 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
  return HAL_ERROR;
 800c16a:	2001      	movs	r0, #1
 800c16c:	e5d7      	b.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
    return HAL_ERROR;
 800c16e:	2501      	movs	r5, #1
 800c170:	e46d      	b.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c172:	4d25      	ldr	r5, [pc, #148]	@ (800c208 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 800c174:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800c176:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 800c17a:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 800c17c:	f7ff b916 	b.w	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x50>
        ret = HAL_ERROR;
 800c180:	2601      	movs	r6, #1
 800c182:	4635      	mov	r5, r6
 800c184:	f7ff bb08 	b.w	800b798 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        ret = HAL_ERROR;
 800c188:	2601      	movs	r6, #1
 800c18a:	4635      	mov	r5, r6
 800c18c:	f7ff bb30 	b.w	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = HAL_ERROR;
 800c190:	2601      	movs	r6, #1
 800c192:	4635      	mov	r5, r6
 800c194:	f7ff baa4 	b.w	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        status = HAL_ERROR;
 800c198:	2601      	movs	r6, #1
 800c19a:	f7ff bbac 	b.w	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
        status = HAL_ERROR;
 800c19e:	2601      	movs	r6, #1
 800c1a0:	f7ff bbb7 	b.w	800b912 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
        tickstart = HAL_GetTick();
 800c1a4:	f7fe f8a2 	bl	800a2ec <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c1a8:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 800c208 <HAL_RCCEx_PeriphCLKConfig+0xeac>
        tickstart = HAL_GetTick();
 800c1ac:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c1ae:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c1b2:	e004      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0xe62>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c1b4:	f7fe f89a 	bl	800a2ec <HAL_GetTick>
 800c1b8:	1bc0      	subs	r0, r0, r7
 800c1ba:	4548      	cmp	r0, r9
 800c1bc:	d810      	bhi.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0xe84>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c1be:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800c1c2:	079b      	lsls	r3, r3, #30
 800c1c4:	d5f6      	bpl.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c1c6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 800c1ca:	e529      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800c1cc:	480e      	ldr	r0, [pc, #56]	@ (800c208 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 800c1ce:	4a0f      	ldr	r2, [pc, #60]	@ (800c20c <HAL_RCCEx_PeriphCLKConfig+0xeb0>)
 800c1d0:	6901      	ldr	r1, [r0, #16]
 800c1d2:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800c1d6:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 800c1da:	430a      	orrs	r2, r1
 800c1dc:	6102      	str	r2, [r0, #16]
 800c1de:	e52a      	b.n	800bc36 <HAL_RCCEx_PeriphCLKConfig+0x8da>
        status = ret;
 800c1e0:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c1e2:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c1e6:	4635      	mov	r5, r6
 800c1e8:	f7ff ba7d 	b.w	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c1ec:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
        status = HAL_ERROR;
 800c1f0:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c1f2:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c1f6:	f7ff bb8c 	b.w	800b912 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c1fa:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
        status = HAL_ERROR;
 800c1fe:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c200:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c204:	f7ff bb77 	b.w	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800c208:	58024400 	.word	0x58024400
 800c20c:	00ffffcf 	.word	0x00ffffcf

0800c210 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800c210:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c212:	f7fe ff5b 	bl	800b0cc <HAL_RCC_GetHCLKFreq>
 800c216:	4b05      	ldr	r3, [pc, #20]	@ (800c22c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800c218:	4a05      	ldr	r2, [pc, #20]	@ (800c230 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800c21a:	6a1b      	ldr	r3, [r3, #32]
 800c21c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c220:	5cd3      	ldrb	r3, [r2, r3]
 800c222:	f003 031f 	and.w	r3, r3, #31
}
 800c226:	40d8      	lsrs	r0, r3
 800c228:	bd08      	pop	{r3, pc}
 800c22a:	bf00      	nop
 800c22c:	58024400 	.word	0x58024400
 800c230:	0800fe48 	.word	0x0800fe48

0800c234 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c234:	4a47      	ldr	r2, [pc, #284]	@ (800c354 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 800c236:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c238:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c23a:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c23c:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 800c23e:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c242:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c246:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 800c248:	d05b      	beq.n	800c302 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c24a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c24e:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c252:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c256:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c25a:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800c25e:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c260:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c264:	ee06 1a90 	vmov	s13, r1
 800c268:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800c26c:	d003      	beq.n	800c276 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 800c26e:	2c02      	cmp	r4, #2
 800c270:	d06a      	beq.n	800c348 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 800c272:	2c00      	cmp	r4, #0
 800c274:	d04a      	beq.n	800c30c <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c276:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800c358 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800c27a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800c27e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800c280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c284:	ee07 3a90 	vmov	s15, r3
 800c288:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800c28c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c290:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c294:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c298:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c29c:	4a2d      	ldr	r2, [pc, #180]	@ (800c354 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 800c29e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800c2a2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800c2a4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c2a8:	ee07 3a10 	vmov	s14, r3
 800c2ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800c2b0:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c2b2:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c2b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c2ba:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800c2be:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c2c2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800c2c4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800c2c8:	ee07 3a10 	vmov	s14, r3
 800c2cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c2d0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c2d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c2d8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800c2dc:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c2e0:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800c2e2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c2e6:	ee06 3a90 	vmov	s13, r3
 800c2ea:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c2ee:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c2f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c2f6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800c2fa:	ee17 3a90 	vmov	r3, s15
 800c2fe:	6083      	str	r3, [r0, #8]
}
 800c300:	4770      	bx	lr
 800c302:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c304:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c308:	6083      	str	r3, [r0, #8]
}
 800c30a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c30c:	6813      	ldr	r3, [r2, #0]
 800c30e:	069b      	lsls	r3, r3, #26
 800c310:	d51d      	bpl.n	800c34e <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c312:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c314:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800c318:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c31a:	4910      	ldr	r1, [pc, #64]	@ (800c35c <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 800c31c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c320:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c324:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c326:	ee07 3a90 	vmov	s15, r3
 800c32a:	ee06 1a10 	vmov	s12, r1
 800c32e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c332:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800c336:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800c33a:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800c33e:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800c342:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c346:	e7a9      	b.n	800c29c <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c348:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800c360 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 800c34c:	e795      	b.n	800c27a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c34e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800c364 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 800c352:	e792      	b.n	800c27a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800c354:	58024400 	.word	0x58024400
 800c358:	4a742400 	.word	0x4a742400
 800c35c:	03d09000 	.word	0x03d09000
 800c360:	4af42400 	.word	0x4af42400
 800c364:	4c742400 	.word	0x4c742400

0800c368 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c368:	4a47      	ldr	r2, [pc, #284]	@ (800c488 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 800c36a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c36c:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c36e:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c370:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 800c372:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c376:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c37a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 800c37c:	d05b      	beq.n	800c436 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c37e:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c382:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c386:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c38a:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c38e:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800c392:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c398:	ee06 1a90 	vmov	s13, r1
 800c39c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800c3a0:	d003      	beq.n	800c3aa <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 800c3a2:	2c02      	cmp	r4, #2
 800c3a4:	d06a      	beq.n	800c47c <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 800c3a6:	2c00      	cmp	r4, #0
 800c3a8:	d04a      	beq.n	800c440 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c3aa:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800c48c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800c3ae:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800c3b2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800c3b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3b8:	ee07 3a90 	vmov	s15, r3
 800c3bc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800c3c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3c8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c3cc:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c3d0:	4a2d      	ldr	r2, [pc, #180]	@ (800c488 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 800c3d2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800c3d6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800c3d8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c3dc:	ee07 3a10 	vmov	s14, r3
 800c3e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800c3e4:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c3e6:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c3ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c3ee:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800c3f2:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c3f6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800c3f8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800c3fc:	ee07 3a10 	vmov	s14, r3
 800c400:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c404:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c408:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c40c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800c410:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c414:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800c416:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c41a:	ee06 3a90 	vmov	s13, r3
 800c41e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c422:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c426:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c42a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800c42e:	ee17 3a90 	vmov	r3, s15
 800c432:	6083      	str	r3, [r0, #8]
}
 800c434:	4770      	bx	lr
 800c436:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c438:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c43c:	6083      	str	r3, [r0, #8]
}
 800c43e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c440:	6813      	ldr	r3, [r2, #0]
 800c442:	069b      	lsls	r3, r3, #26
 800c444:	d51d      	bpl.n	800c482 <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c446:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c448:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800c44c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c44e:	4910      	ldr	r1, [pc, #64]	@ (800c490 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 800c450:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c454:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c458:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c45a:	ee07 3a90 	vmov	s15, r3
 800c45e:	ee06 1a10 	vmov	s12, r1
 800c462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c466:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800c46a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800c46e:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800c472:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800c476:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c47a:	e7a9      	b.n	800c3d0 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c47c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800c494 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 800c480:	e795      	b.n	800c3ae <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c482:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800c498 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 800c486:	e792      	b.n	800c3ae <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800c488:	58024400 	.word	0x58024400
 800c48c:	4a742400 	.word	0x4a742400
 800c490:	03d09000 	.word	0x03d09000
 800c494:	4af42400 	.word	0x4af42400
 800c498:	4c742400 	.word	0x4c742400

0800c49c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c49c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d13d      	bne.n	800c520 <HAL_TIM_Base_Start_IT+0x84>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c4a4:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c4a6:	2102      	movs	r1, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4a8:	4b1e      	ldr	r3, [pc, #120]	@ (800c524 <HAL_TIM_Base_Start_IT+0x88>)
 800c4aa:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800c4ae:	bf18      	it	ne
 800c4b0:	429a      	cmpne	r2, r3
{
 800c4b2:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4b4:	bf0c      	ite	eq
 800c4b6:	2301      	moveq	r3, #1
 800c4b8:	2300      	movne	r3, #0
 800c4ba:	4d1b      	ldr	r5, [pc, #108]	@ (800c528 <HAL_TIM_Base_Start_IT+0x8c>)
 800c4bc:	4c1b      	ldr	r4, [pc, #108]	@ (800c52c <HAL_TIM_Base_Start_IT+0x90>)
 800c4be:	42aa      	cmp	r2, r5
 800c4c0:	bf08      	it	eq
 800c4c2:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800c4c6:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c4ca:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4cc:	42a2      	cmp	r2, r4
 800c4ce:	bf08      	it	eq
 800c4d0:	f043 0301 	orreq.w	r3, r3, #1
 800c4d4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c4d8:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4dc:	4814      	ldr	r0, [pc, #80]	@ (800c530 <HAL_TIM_Base_Start_IT+0x94>)
 800c4de:	42a2      	cmp	r2, r4
 800c4e0:	bf08      	it	eq
 800c4e2:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c4e6:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4e8:	4282      	cmp	r2, r0
 800c4ea:	bf08      	it	eq
 800c4ec:	f043 0301 	orreq.w	r3, r3, #1
 800c4f0:	4910      	ldr	r1, [pc, #64]	@ (800c534 <HAL_TIM_Base_Start_IT+0x98>)
 800c4f2:	428a      	cmp	r2, r1
 800c4f4:	bf08      	it	eq
 800c4f6:	f043 0301 	orreq.w	r3, r3, #1
 800c4fa:	b913      	cbnz	r3, 800c502 <HAL_TIM_Base_Start_IT+0x66>
 800c4fc:	4b0e      	ldr	r3, [pc, #56]	@ (800c538 <HAL_TIM_Base_Start_IT+0x9c>)
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d107      	bne.n	800c512 <HAL_TIM_Base_Start_IT+0x76>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c502:	6891      	ldr	r1, [r2, #8]
 800c504:	4b0d      	ldr	r3, [pc, #52]	@ (800c53c <HAL_TIM_Base_Start_IT+0xa0>)
 800c506:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c508:	2b06      	cmp	r3, #6
 800c50a:	d006      	beq.n	800c51a <HAL_TIM_Base_Start_IT+0x7e>
 800c50c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c510:	d003      	beq.n	800c51a <HAL_TIM_Base_Start_IT+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800c512:	6813      	ldr	r3, [r2, #0]
 800c514:	f043 0301 	orr.w	r3, r3, #1
 800c518:	6013      	str	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800c51a:	2000      	movs	r0, #0
}
 800c51c:	bc30      	pop	{r4, r5}
 800c51e:	4770      	bx	lr
    return HAL_ERROR;
 800c520:	2001      	movs	r0, #1
}
 800c522:	4770      	bx	lr
 800c524:	40010000 	.word	0x40010000
 800c528:	40000400 	.word	0x40000400
 800c52c:	40000800 	.word	0x40000800
 800c530:	40010400 	.word	0x40010400
 800c534:	40001800 	.word	0x40001800
 800c538:	40014000 	.word	0x40014000
 800c53c:	00010007 	.word	0x00010007

0800c540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c540:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c542:	4a34      	ldr	r2, [pc, #208]	@ (800c614 <TIM_Base_SetConfig+0xd4>)
 800c544:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800c548:	4c33      	ldr	r4, [pc, #204]	@ (800c618 <TIM_Base_SetConfig+0xd8>)
 800c54a:	eba0 0202 	sub.w	r2, r0, r2
  tmpcr1 = TIMx->CR1;
 800c54e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c550:	eba0 0e04 	sub.w	lr, r0, r4
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c554:	694f      	ldr	r7, [r1, #20]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c556:	fab2 f282 	clz	r2, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c55a:	680d      	ldr	r5, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c55c:	fabe fe8e 	clz	lr, lr
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c560:	688e      	ldr	r6, [r1, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c562:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800c566:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800c56a:	d020      	beq.n	800c5ae <TIM_Base_SetConfig+0x6e>
 800c56c:	b9fa      	cbnz	r2, 800c5ae <TIM_Base_SetConfig+0x6e>
 800c56e:	f8df c0b4 	ldr.w	ip, [pc, #180]	@ 800c624 <TIM_Base_SetConfig+0xe4>
 800c572:	4560      	cmp	r0, ip
 800c574:	d01b      	beq.n	800c5ae <TIM_Base_SetConfig+0x6e>
 800c576:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800c57a:	4560      	cmp	r0, ip
 800c57c:	d017      	beq.n	800c5ae <TIM_Base_SetConfig+0x6e>
 800c57e:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800c582:	4560      	cmp	r0, ip
 800c584:	d013      	beq.n	800c5ae <TIM_Base_SetConfig+0x6e>
 800c586:	f1be 0f00 	cmp.w	lr, #0
 800c58a:	d110      	bne.n	800c5ae <TIM_Base_SetConfig+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c58c:	4c23      	ldr	r4, [pc, #140]	@ (800c61c <TIM_Base_SetConfig+0xdc>)
 800c58e:	4a24      	ldr	r2, [pc, #144]	@ (800c620 <TIM_Base_SetConfig+0xe0>)
 800c590:	4290      	cmp	r0, r2
 800c592:	bf18      	it	ne
 800c594:	42a0      	cmpne	r0, r4
 800c596:	d032      	beq.n	800c5fe <TIM_Base_SetConfig+0xbe>
 800c598:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c59c:	4290      	cmp	r0, r2
 800c59e:	d02e      	beq.n	800c5fe <TIM_Base_SetConfig+0xbe>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c5a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c5a4:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 800c5a6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c5a8:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c5aa:	6285      	str	r5, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5ac:	e01d      	b.n	800c5ea <TIM_Base_SetConfig+0xaa>
    tmpcr1 |= Structure->CounterMode;
 800c5ae:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c5b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800c5b4:	4323      	orrs	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c5b6:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800c5b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c5bc:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c5be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c5c2:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 800c5c4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c5c6:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c5c8:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5ca:	b962      	cbnz	r2, 800c5e6 <TIM_Base_SetConfig+0xa6>
 800c5cc:	f1be 0f00 	cmp.w	lr, #0
 800c5d0:	d109      	bne.n	800c5e6 <TIM_Base_SetConfig+0xa6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c5d2:	4a13      	ldr	r2, [pc, #76]	@ (800c620 <TIM_Base_SetConfig+0xe0>)
 800c5d4:	4b11      	ldr	r3, [pc, #68]	@ (800c61c <TIM_Base_SetConfig+0xdc>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5d6:	4298      	cmp	r0, r3
 800c5d8:	bf18      	it	ne
 800c5da:	4290      	cmpne	r0, r2
 800c5dc:	d003      	beq.n	800c5e6 <TIM_Base_SetConfig+0xa6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c5de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5e2:	4298      	cmp	r0, r3
 800c5e4:	d101      	bne.n	800c5ea <TIM_Base_SetConfig+0xaa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c5e6:	690b      	ldr	r3, [r1, #16]
 800c5e8:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c5ee:	6903      	ldr	r3, [r0, #16]
 800c5f0:	07db      	lsls	r3, r3, #31
 800c5f2:	d503      	bpl.n	800c5fc <TIM_Base_SetConfig+0xbc>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c5f4:	6903      	ldr	r3, [r0, #16]
 800c5f6:	f023 0301 	bic.w	r3, r3, #1
 800c5fa:	6103      	str	r3, [r0, #16]
  }
}
 800c5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c5fe:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800c600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c604:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c606:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c60a:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 800c60c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c60e:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c610:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c612:	e7de      	b.n	800c5d2 <TIM_Base_SetConfig+0x92>
 800c614:	40010000 	.word	0x40010000
 800c618:	40010400 	.word	0x40010400
 800c61c:	40014000 	.word	0x40014000
 800c620:	40014400 	.word	0x40014400
 800c624:	40000400 	.word	0x40000400

0800c628 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800c628:	b370      	cbz	r0, 800c688 <HAL_TIM_Base_Init+0x60>
{
 800c62a:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800c62c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c630:	4604      	mov	r4, r0
 800c632:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c636:	b313      	cbz	r3, 800c67e <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c638:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800c63a:	2302      	movs	r3, #2
 800c63c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c640:	f851 0b04 	ldr.w	r0, [r1], #4
 800c644:	f7ff ff7c 	bl	800c540 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c648:	2301      	movs	r3, #1
  return HAL_OK;
 800c64a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c64c:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c650:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800c654:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800c658:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800c65c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800c660:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c664:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c668:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800c66c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c670:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800c674:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c678:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800c67c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800c67e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c682:	f7f4 fc9f 	bl	8000fc4 <HAL_TIM_Base_MspInit>
 800c686:	e7d7      	b.n	800c638 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800c688:	2001      	movs	r0, #1
}
 800c68a:	4770      	bx	lr

0800c68c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c68c:	6802      	ldr	r2, [r0, #0]
 800c68e:	b410      	push	{r4}
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c690:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c694:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c698:	e842 3100 	strex	r1, r3, [r2]
 800c69c:	2900      	cmp	r1, #0
 800c69e:	d1f7      	bne.n	800c690 <UART_EndRxTransfer+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c6a0:	4c14      	ldr	r4, [pc, #80]	@ (800c6f4 <UART_EndRxTransfer+0x68>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6a2:	f102 0308 	add.w	r3, r2, #8
 800c6a6:	e853 3f00 	ldrex	r3, [r3]
 800c6aa:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ac:	f102 0c08 	add.w	ip, r2, #8
 800c6b0:	e84c 3100 	strex	r1, r3, [ip]
 800c6b4:	2900      	cmp	r1, #0
 800c6b6:	d1f4      	bne.n	800c6a2 <UART_EndRxTransfer+0x16>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6b8:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d008      	beq.n	800c6d0 <UART_EndRxTransfer+0x44>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6be:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800c6c0:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
}
 800c6c2:	f85d 4b04 	ldr.w	r4, [sp], #4
  huart->RxState = HAL_UART_STATE_READY;
 800c6c6:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
  huart->RxISR = NULL;
 800c6ca:	6743      	str	r3, [r0, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6cc:	66c3      	str	r3, [r0, #108]	@ 0x6c
}
 800c6ce:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d0:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6d4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d8:	e842 3100 	strex	r1, r3, [r2]
 800c6dc:	2900      	cmp	r1, #0
 800c6de:	d0ee      	beq.n	800c6be <UART_EndRxTransfer+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e0:	e852 3f00 	ldrex	r3, [r2]
 800c6e4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e8:	e842 3100 	strex	r1, r3, [r2]
 800c6ec:	2900      	cmp	r1, #0
 800c6ee:	d1ef      	bne.n	800c6d0 <UART_EndRxTransfer+0x44>
 800c6f0:	e7e5      	b.n	800c6be <UART_EndRxTransfer+0x32>
 800c6f2:	bf00      	nop
 800c6f4:	effffffe 	.word	0xeffffffe

0800c6f8 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c6f8:	6901      	ldr	r1, [r0, #16]
 800c6fa:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800c6fc:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c6fe:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c700:	49a2      	ldr	r1, [pc, #648]	@ (800c98c <UART_SetConfig+0x294>)
{
 800c702:	b570      	push	{r4, r5, r6, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c704:	6945      	ldr	r5, [r0, #20]
{
 800c706:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c708:	69c0      	ldr	r0, [r0, #28]
{
 800c70a:	b086      	sub	sp, #24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c70c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c70e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c710:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c712:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c714:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c716:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c718:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c71a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c71c:	685a      	ldr	r2, [r3, #4]
 800c71e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800c722:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c724:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c726:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c728:	4a99      	ldr	r2, [pc, #612]	@ (800c990 <UART_SetConfig+0x298>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	f000 8118 	beq.w	800c960 <UART_SetConfig+0x268>
    tmpreg |= huart->Init.OneBitSampling;
 800c730:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c732:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800c734:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c736:	4a97      	ldr	r2, [pc, #604]	@ (800c994 <UART_SetConfig+0x29c>)
 800c738:	4032      	ands	r2, r6
 800c73a:	4311      	orrs	r1, r2
 800c73c:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c73e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c740:	f022 020f 	bic.w	r2, r2, #15
 800c744:	432a      	orrs	r2, r5
 800c746:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c748:	4a93      	ldr	r2, [pc, #588]	@ (800c998 <UART_SetConfig+0x2a0>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d028      	beq.n	800c7a0 <UART_SetConfig+0xa8>
 800c74e:	4a93      	ldr	r2, [pc, #588]	@ (800c99c <UART_SetConfig+0x2a4>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d01a      	beq.n	800c78a <UART_SetConfig+0x92>
 800c754:	4a92      	ldr	r2, [pc, #584]	@ (800c9a0 <UART_SetConfig+0x2a8>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d017      	beq.n	800c78a <UART_SetConfig+0x92>
 800c75a:	4a92      	ldr	r2, [pc, #584]	@ (800c9a4 <UART_SetConfig+0x2ac>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d014      	beq.n	800c78a <UART_SetConfig+0x92>
 800c760:	4a91      	ldr	r2, [pc, #580]	@ (800c9a8 <UART_SetConfig+0x2b0>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d011      	beq.n	800c78a <UART_SetConfig+0x92>
 800c766:	4a91      	ldr	r2, [pc, #580]	@ (800c9ac <UART_SetConfig+0x2b4>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d019      	beq.n	800c7a0 <UART_SetConfig+0xa8>
 800c76c:	4a90      	ldr	r2, [pc, #576]	@ (800c9b0 <UART_SetConfig+0x2b8>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d00b      	beq.n	800c78a <UART_SetConfig+0x92>
 800c772:	4a90      	ldr	r2, [pc, #576]	@ (800c9b4 <UART_SetConfig+0x2bc>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d008      	beq.n	800c78a <UART_SetConfig+0x92>
        ret = HAL_ERROR;
 800c778:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800c77a:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800c77c:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->RxISR = NULL;
 800c780:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800c782:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800c784:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 800c786:	b006      	add	sp, #24
 800c788:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c78a:	4b8b      	ldr	r3, [pc, #556]	@ (800c9b8 <UART_SetConfig+0x2c0>)
 800c78c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c78e:	f003 0307 	and.w	r3, r3, #7
 800c792:	2b05      	cmp	r3, #5
 800c794:	d8f0      	bhi.n	800c778 <UART_SetConfig+0x80>
 800c796:	e8df f003 	tbb	[pc, r3]
 800c79a:	5f9d      	.short	0x5f9d
 800c79c:	977e7169 	.word	0x977e7169
 800c7a0:	4b85      	ldr	r3, [pc, #532]	@ (800c9b8 <UART_SetConfig+0x2c0>)
 800c7a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c7a8:	2b28      	cmp	r3, #40	@ 0x28
 800c7aa:	d8e5      	bhi.n	800c778 <UART_SetConfig+0x80>
 800c7ac:	a201      	add	r2, pc, #4	@ (adr r2, 800c7b4 <UART_SetConfig+0xbc>)
 800c7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b2:	bf00      	nop
 800c7b4:	0800c92f 	.word	0x0800c92f
 800c7b8:	0800c779 	.word	0x0800c779
 800c7bc:	0800c779 	.word	0x0800c779
 800c7c0:	0800c779 	.word	0x0800c779
 800c7c4:	0800c779 	.word	0x0800c779
 800c7c8:	0800c779 	.word	0x0800c779
 800c7cc:	0800c779 	.word	0x0800c779
 800c7d0:	0800c779 	.word	0x0800c779
 800c7d4:	0800c859 	.word	0x0800c859
 800c7d8:	0800c779 	.word	0x0800c779
 800c7dc:	0800c779 	.word	0x0800c779
 800c7e0:	0800c779 	.word	0x0800c779
 800c7e4:	0800c779 	.word	0x0800c779
 800c7e8:	0800c779 	.word	0x0800c779
 800c7ec:	0800c779 	.word	0x0800c779
 800c7f0:	0800c779 	.word	0x0800c779
 800c7f4:	0800c86d 	.word	0x0800c86d
 800c7f8:	0800c779 	.word	0x0800c779
 800c7fc:	0800c779 	.word	0x0800c779
 800c800:	0800c779 	.word	0x0800c779
 800c804:	0800c779 	.word	0x0800c779
 800c808:	0800c779 	.word	0x0800c779
 800c80c:	0800c779 	.word	0x0800c779
 800c810:	0800c779 	.word	0x0800c779
 800c814:	0800c87d 	.word	0x0800c87d
 800c818:	0800c779 	.word	0x0800c779
 800c81c:	0800c779 	.word	0x0800c779
 800c820:	0800c779 	.word	0x0800c779
 800c824:	0800c779 	.word	0x0800c779
 800c828:	0800c779 	.word	0x0800c779
 800c82c:	0800c779 	.word	0x0800c779
 800c830:	0800c779 	.word	0x0800c779
 800c834:	0800c897 	.word	0x0800c897
 800c838:	0800c779 	.word	0x0800c779
 800c83c:	0800c779 	.word	0x0800c779
 800c840:	0800c779 	.word	0x0800c779
 800c844:	0800c779 	.word	0x0800c779
 800c848:	0800c779 	.word	0x0800c779
 800c84c:	0800c779 	.word	0x0800c779
 800c850:	0800c779 	.word	0x0800c779
 800c854:	0800c8c9 	.word	0x0800c8c9
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c858:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c85c:	d040      	beq.n	800c8e0 <UART_SetConfig+0x1e8>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c85e:	4668      	mov	r0, sp
 800c860:	f7ff fce8 	bl	800c234 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c864:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800c866:	b368      	cbz	r0, 800c8c4 <UART_SetConfig+0x1cc>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c868:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c86a:	e018      	b.n	800c89e <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c86c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c870:	d06e      	beq.n	800c950 <UART_SetConfig+0x258>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c872:	a803      	add	r0, sp, #12
 800c874:	f7ff fd78 	bl	800c368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c878:	9804      	ldr	r0, [sp, #16]
        break;
 800c87a:	e7f4      	b.n	800c866 <UART_SetConfig+0x16e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c87c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c880:	d05b      	beq.n	800c93a <UART_SetConfig+0x242>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c882:	4b4d      	ldr	r3, [pc, #308]	@ (800c9b8 <UART_SetConfig+0x2c0>)
 800c884:	681a      	ldr	r2, [r3, #0]
 800c886:	0692      	lsls	r2, r2, #26
 800c888:	d54c      	bpl.n	800c924 <UART_SetConfig+0x22c>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	484b      	ldr	r0, [pc, #300]	@ (800c9bc <UART_SetConfig+0x2c4>)
 800c88e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c892:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800c894:	e003      	b.n	800c89e <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c896:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) CSI_VALUE;
 800c89a:	4849      	ldr	r0, [pc, #292]	@ (800c9c0 <UART_SetConfig+0x2c8>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c89c:	d027      	beq.n	800c8ee <UART_SetConfig+0x1f6>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c89e:	4a49      	ldr	r2, [pc, #292]	@ (800c9c4 <UART_SetConfig+0x2cc>)
 800c8a0:	6863      	ldr	r3, [r4, #4]
 800c8a2:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c8a6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8aa:	fbb0 f0f1 	udiv	r0, r0, r1
 800c8ae:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800c8b2:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c8b6:	f1a0 0310 	sub.w	r3, r0, #16
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	f63f af5c 	bhi.w	800c778 <UART_SetConfig+0x80>
          huart->Instance->BRR = usartdiv;
 800c8c0:	6823      	ldr	r3, [r4, #0]
 800c8c2:	60d8      	str	r0, [r3, #12]
          pclk = (uint32_t) HSI_VALUE;
 800c8c4:	2000      	movs	r0, #0
 800c8c6:	e758      	b.n	800c77a <UART_SetConfig+0x82>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c8c8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c8cc:	d00f      	beq.n	800c8ee <UART_SetConfig+0x1f6>
        pclk = (uint32_t) LSE_VALUE;
 800c8ce:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800c8d2:	e7e4      	b.n	800c89e <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c8d4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c8d8:	d026      	beq.n	800c928 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8da:	f7fe fc37 	bl	800b14c <HAL_RCC_GetPCLK1Freq>
        break;
 800c8de:	e7c2      	b.n	800c866 <UART_SetConfig+0x16e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8e0:	4668      	mov	r0, sp
 800c8e2:	f7ff fca7 	bl	800c234 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c8e6:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	d0eb      	beq.n	800c8c4 <UART_SetConfig+0x1cc>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8ec:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c8ee:	4b35      	ldr	r3, [pc, #212]	@ (800c9c4 <UART_SetConfig+0x2cc>)
 800c8f0:	6862      	ldr	r2, [r4, #4]
 800c8f2:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 800c8f6:	0853      	lsrs	r3, r2, #1
 800c8f8:	fbb0 f0f1 	udiv	r0, r0, r1
 800c8fc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c900:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c904:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c908:	f1a3 0210 	sub.w	r2, r3, #16
 800c90c:	428a      	cmp	r2, r1
 800c90e:	f63f af33 	bhi.w	800c778 <UART_SetConfig+0x80>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c912:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c916:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800c91a:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c91c:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800c91e:	4313      	orrs	r3, r2
 800c920:	60cb      	str	r3, [r1, #12]
 800c922:	e7cf      	b.n	800c8c4 <UART_SetConfig+0x1cc>
          pclk = (uint32_t) HSI_VALUE;
 800c924:	4825      	ldr	r0, [pc, #148]	@ (800c9bc <UART_SetConfig+0x2c4>)
 800c926:	e7ba      	b.n	800c89e <UART_SetConfig+0x1a6>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c928:	f7fe fc10 	bl	800b14c <HAL_RCC_GetPCLK1Freq>
        break;
 800c92c:	e7dc      	b.n	800c8e8 <UART_SetConfig+0x1f0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c92e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c932:	d012      	beq.n	800c95a <UART_SetConfig+0x262>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c934:	f7fe fc1c 	bl	800b170 <HAL_RCC_GetPCLK2Freq>
        break;
 800c938:	e795      	b.n	800c866 <UART_SetConfig+0x16e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c93a:	4b1f      	ldr	r3, [pc, #124]	@ (800c9b8 <UART_SetConfig+0x2c0>)
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	0691      	lsls	r1, r2, #26
 800c940:	f140 808a 	bpl.w	800ca58 <UART_SetConfig+0x360>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	481d      	ldr	r0, [pc, #116]	@ (800c9bc <UART_SetConfig+0x2c4>)
 800c948:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c94c:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800c94e:	e7ce      	b.n	800c8ee <UART_SetConfig+0x1f6>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c950:	a803      	add	r0, sp, #12
 800c952:	f7ff fd09 	bl	800c368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c956:	9804      	ldr	r0, [sp, #16]
        break;
 800c958:	e7c6      	b.n	800c8e8 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c95a:	f7fe fc09 	bl	800b170 <HAL_RCC_GetPCLK2Freq>
        break;
 800c95e:	e7c3      	b.n	800c8e8 <UART_SetConfig+0x1f0>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c960:	6898      	ldr	r0, [r3, #8]
 800c962:	4a0c      	ldr	r2, [pc, #48]	@ (800c994 <UART_SetConfig+0x29c>)
 800c964:	4002      	ands	r2, r0
 800c966:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c968:	4913      	ldr	r1, [pc, #76]	@ (800c9b8 <UART_SetConfig+0x2c0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c96a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c96c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c96e:	f022 020f 	bic.w	r2, r2, #15
 800c972:	432a      	orrs	r2, r5
 800c974:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c976:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 800c978:	f003 0307 	and.w	r3, r3, #7
 800c97c:	2b05      	cmp	r3, #5
 800c97e:	f63f aefb 	bhi.w	800c778 <UART_SetConfig+0x80>
 800c982:	e8df f003 	tbb	[pc, r3]
 800c986:	565b      	.short	0x565b
 800c988:	5e61214d 	.word	0x5e61214d
 800c98c:	cfff69f3 	.word	0xcfff69f3
 800c990:	58000c00 	.word	0x58000c00
 800c994:	11fff4ff 	.word	0x11fff4ff
 800c998:	40011000 	.word	0x40011000
 800c99c:	40004400 	.word	0x40004400
 800c9a0:	40004800 	.word	0x40004800
 800c9a4:	40004c00 	.word	0x40004c00
 800c9a8:	40005000 	.word	0x40005000
 800c9ac:	40011400 	.word	0x40011400
 800c9b0:	40007800 	.word	0x40007800
 800c9b4:	40007c00 	.word	0x40007c00
 800c9b8:	58024400 	.word	0x58024400
 800c9bc:	03d09000 	.word	0x03d09000
 800c9c0:	003d0900 	.word	0x003d0900
 800c9c4:	08011818 	.word	0x08011818
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9c8:	4b24      	ldr	r3, [pc, #144]	@ (800ca5c <UART_SetConfig+0x364>)
 800c9ca:	681a      	ldr	r2, [r3, #0]
 800c9cc:	0690      	lsls	r0, r2, #26
 800c9ce:	d43d      	bmi.n	800ca4c <UART_SetConfig+0x354>
          pclk = (uint32_t) HSI_VALUE;
 800c9d0:	4823      	ldr	r0, [pc, #140]	@ (800ca60 <UART_SetConfig+0x368>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c9d2:	4b24      	ldr	r3, [pc, #144]	@ (800ca64 <UART_SetConfig+0x36c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9d4:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c9d6:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9da:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c9de:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9e2:	4299      	cmp	r1, r3
 800c9e4:	f63f aec8 	bhi.w	800c778 <UART_SetConfig+0x80>
 800c9e8:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 800c9ec:	f63f aec4 	bhi.w	800c778 <UART_SetConfig+0x80>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	f7f3 fcdc 	bl	80003b0 <__aeabi_uldivmod>
 800c9f8:	4632      	mov	r2, r6
 800c9fa:	0209      	lsls	r1, r1, #8
 800c9fc:	0203      	lsls	r3, r0, #8
 800c9fe:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800ca02:	0870      	lsrs	r0, r6, #1
 800ca04:	1818      	adds	r0, r3, r0
 800ca06:	f04f 0300 	mov.w	r3, #0
 800ca0a:	f141 0100 	adc.w	r1, r1, #0
 800ca0e:	f7f3 fccf 	bl	80003b0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca12:	4b15      	ldr	r3, [pc, #84]	@ (800ca68 <UART_SetConfig+0x370>)
 800ca14:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	f63f aead 	bhi.w	800c778 <UART_SetConfig+0x80>
 800ca1e:	e74f      	b.n	800c8c0 <UART_SetConfig+0x1c8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca20:	a803      	add	r0, sp, #12
 800ca22:	f7ff fca1 	bl	800c368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca26:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	f43f af4b 	beq.w	800c8c4 <UART_SetConfig+0x1cc>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ca2e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800ca30:	e7cf      	b.n	800c9d2 <UART_SetConfig+0x2da>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca32:	4668      	mov	r0, sp
 800ca34:	f7ff fbfe 	bl	800c234 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca38:	9801      	ldr	r0, [sp, #4]
        break;
 800ca3a:	e7f5      	b.n	800ca28 <UART_SetConfig+0x330>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ca3c:	f7ff fbe8 	bl	800c210 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800ca40:	e7f2      	b.n	800ca28 <UART_SetConfig+0x330>
        pclk = (uint32_t) LSE_VALUE;
 800ca42:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800ca46:	e7c4      	b.n	800c9d2 <UART_SetConfig+0x2da>
        pclk = (uint32_t) CSI_VALUE;
 800ca48:	4808      	ldr	r0, [pc, #32]	@ (800ca6c <UART_SetConfig+0x374>)
 800ca4a:	e7c2      	b.n	800c9d2 <UART_SetConfig+0x2da>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4804      	ldr	r0, [pc, #16]	@ (800ca60 <UART_SetConfig+0x368>)
 800ca50:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ca54:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800ca56:	e7bc      	b.n	800c9d2 <UART_SetConfig+0x2da>
          pclk = (uint32_t) HSI_VALUE;
 800ca58:	4801      	ldr	r0, [pc, #4]	@ (800ca60 <UART_SetConfig+0x368>)
 800ca5a:	e748      	b.n	800c8ee <UART_SetConfig+0x1f6>
 800ca5c:	58024400 	.word	0x58024400
 800ca60:	03d09000 	.word	0x03d09000
 800ca64:	08011818 	.word	0x08011818
 800ca68:	000ffcff 	.word	0x000ffcff
 800ca6c:	003d0900 	.word	0x003d0900

0800ca70 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ca70:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ca72:	071a      	lsls	r2, r3, #28
{
 800ca74:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ca76:	d506      	bpl.n	800ca86 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ca78:	6801      	ldr	r1, [r0, #0]
 800ca7a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800ca7c:	684a      	ldr	r2, [r1, #4]
 800ca7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ca82:	4322      	orrs	r2, r4
 800ca84:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ca86:	07dc      	lsls	r4, r3, #31
 800ca88:	d506      	bpl.n	800ca98 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ca8a:	6801      	ldr	r1, [r0, #0]
 800ca8c:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800ca8e:	684a      	ldr	r2, [r1, #4]
 800ca90:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ca94:	4322      	orrs	r2, r4
 800ca96:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ca98:	0799      	lsls	r1, r3, #30
 800ca9a:	d506      	bpl.n	800caaa <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ca9c:	6801      	ldr	r1, [r0, #0]
 800ca9e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800caa0:	684a      	ldr	r2, [r1, #4]
 800caa2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800caa6:	4322      	orrs	r2, r4
 800caa8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800caaa:	075a      	lsls	r2, r3, #29
 800caac:	d506      	bpl.n	800cabc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800caae:	6801      	ldr	r1, [r0, #0]
 800cab0:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800cab2:	684a      	ldr	r2, [r1, #4]
 800cab4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800cab8:	4322      	orrs	r2, r4
 800caba:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cabc:	06dc      	lsls	r4, r3, #27
 800cabe:	d506      	bpl.n	800cace <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cac0:	6801      	ldr	r1, [r0, #0]
 800cac2:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800cac4:	688a      	ldr	r2, [r1, #8]
 800cac6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800caca:	4322      	orrs	r2, r4
 800cacc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cace:	0699      	lsls	r1, r3, #26
 800cad0:	d506      	bpl.n	800cae0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cad2:	6801      	ldr	r1, [r0, #0]
 800cad4:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800cad6:	688a      	ldr	r2, [r1, #8]
 800cad8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cadc:	4322      	orrs	r2, r4
 800cade:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cae0:	065a      	lsls	r2, r3, #25
 800cae2:	d50a      	bpl.n	800cafa <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cae4:	6801      	ldr	r1, [r0, #0]
 800cae6:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800cae8:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800caea:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800caee:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800caf2:	ea42 0204 	orr.w	r2, r2, r4
 800caf6:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800caf8:	d00b      	beq.n	800cb12 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cafa:	061b      	lsls	r3, r3, #24
 800cafc:	d506      	bpl.n	800cb0c <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cafe:	6802      	ldr	r2, [r0, #0]
 800cb00:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800cb02:	6853      	ldr	r3, [r2, #4]
 800cb04:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800cb08:	430b      	orrs	r3, r1
 800cb0a:	6053      	str	r3, [r2, #4]
}
 800cb0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb10:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cb12:	684a      	ldr	r2, [r1, #4]
 800cb14:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800cb16:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800cb1a:	4322      	orrs	r2, r4
 800cb1c:	604a      	str	r2, [r1, #4]
 800cb1e:	e7ec      	b.n	800cafa <UART_AdvFeatureConfig+0x8a>

0800cb20 <UART_WaitOnFlagUntilTimeout>:
{
 800cb20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb24:	9f08      	ldr	r7, [sp, #32]
 800cb26:	460d      	mov	r5, r1
 800cb28:	4680      	mov	r8, r0
 800cb2a:	4616      	mov	r6, r2
 800cb2c:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb2e:	6801      	ldr	r1, [r0, #0]
 800cb30:	e001      	b.n	800cb36 <UART_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 800cb32:	1c78      	adds	r0, r7, #1
 800cb34:	d10b      	bne.n	800cb4e <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb36:	69cc      	ldr	r4, [r1, #28]
 800cb38:	ea35 0404 	bics.w	r4, r5, r4
 800cb3c:	bf0c      	ite	eq
 800cb3e:	2401      	moveq	r4, #1
 800cb40:	2400      	movne	r4, #0
 800cb42:	42b4      	cmp	r4, r6
 800cb44:	d0f5      	beq.n	800cb32 <UART_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 800cb46:	2300      	movs	r3, #0
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb4e:	f7fd fbcd 	bl	800a2ec <HAL_GetTick>
 800cb52:	eba0 0009 	sub.w	r0, r0, r9
 800cb56:	fab7 f487 	clz	r4, r7
 800cb5a:	42b8      	cmp	r0, r7
 800cb5c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800cb60:	d81b      	bhi.n	800cb9a <UART_WaitOnFlagUntilTimeout+0x7a>
 800cb62:	b1d7      	cbz	r7, 800cb9a <UART_WaitOnFlagUntilTimeout+0x7a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cb64:	f8d8 1000 	ldr.w	r1, [r8]
 800cb68:	680b      	ldr	r3, [r1, #0]
 800cb6a:	075a      	lsls	r2, r3, #29
 800cb6c:	d5e3      	bpl.n	800cb36 <UART_WaitOnFlagUntilTimeout+0x16>
 800cb6e:	2d80      	cmp	r5, #128	@ 0x80
 800cb70:	d0e1      	beq.n	800cb36 <UART_WaitOnFlagUntilTimeout+0x16>
 800cb72:	2d40      	cmp	r5, #64	@ 0x40
 800cb74:	d0df      	beq.n	800cb36 <UART_WaitOnFlagUntilTimeout+0x16>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cb76:	69cb      	ldr	r3, [r1, #28]
 800cb78:	f013 0a08 	ands.w	sl, r3, #8
 800cb7c:	d10f      	bne.n	800cb9e <UART_WaitOnFlagUntilTimeout+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cb7e:	69ca      	ldr	r2, [r1, #28]
 800cb80:	0513      	lsls	r3, r2, #20
 800cb82:	d5d8      	bpl.n	800cb36 <UART_WaitOnFlagUntilTimeout+0x16>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
          UART_EndRxTransfer(huart);
 800cb88:	4640      	mov	r0, r8
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb8a:	620a      	str	r2, [r1, #32]
          UART_EndRxTransfer(huart);
 800cb8c:	f7ff fd7e 	bl	800c68c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cb90:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 800cb92:	f888 a084 	strb.w	sl, [r8, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cb96:	f8c8 2090 	str.w	r2, [r8, #144]	@ 0x90
        return HAL_TIMEOUT;
 800cb9a:	2303      	movs	r3, #3
 800cb9c:	e7d4      	b.n	800cb48 <UART_WaitOnFlagUntilTimeout+0x28>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cb9e:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 800cba0:	4640      	mov	r0, r8
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cba2:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 800cba4:	f7ff fd72 	bl	800c68c <UART_EndRxTransfer>
          return HAL_ERROR;
 800cba8:	2301      	movs	r3, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cbaa:	f8c8 5090 	str.w	r5, [r8, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 800cbae:	f888 4084 	strb.w	r4, [r8, #132]	@ 0x84
          return HAL_ERROR;
 800cbb2:	e7c9      	b.n	800cb48 <UART_WaitOnFlagUntilTimeout+0x28>

0800cbb4 <HAL_UART_Transmit>:
{
 800cbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb8:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800cbba:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 800cbbe:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_READY)
 800cbc0:	2b20      	cmp	r3, #32
 800cbc2:	d13b      	bne.n	800cc3c <HAL_UART_Transmit+0x88>
    if ((pData == NULL) || (Size == 0U))
 800cbc4:	460d      	mov	r5, r1
 800cbc6:	b3a9      	cbz	r1, 800cc34 <HAL_UART_Transmit+0x80>
 800cbc8:	fab2 f882 	clz	r8, r2
 800cbcc:	4617      	mov	r7, r2
 800cbce:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800cbd2:	b37a      	cbz	r2, 800cc34 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cbd4:	2321      	movs	r3, #33	@ 0x21
 800cbd6:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbd8:	f8c0 8090 	str.w	r8, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cbdc:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 800cbe0:	f7fd fb84 	bl	800a2ec <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbe4:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800cbe6:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 800cbee:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    tickstart = HAL_GetTick();
 800cbf2:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbf4:	d109      	bne.n	800cc0a <HAL_UART_Transmit+0x56>
 800cbf6:	e03b      	b.n	800cc70 <HAL_UART_Transmit+0xbc>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cbf8:	f815 2b01 	ldrb.w	r2, [r5], #1
 800cbfc:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 800cbfe:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 800cc02:	3a01      	subs	r2, #1
 800cc04:	b292      	uxth	r2, r2
 800cc06:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cc0a:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	b1fb      	cbz	r3, 800cc52 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cc12:	463b      	mov	r3, r7
 800cc14:	2200      	movs	r2, #0
 800cc16:	2180      	movs	r1, #128	@ 0x80
 800cc18:	4620      	mov	r0, r4
 800cc1a:	9600      	str	r6, [sp, #0]
 800cc1c:	f7ff ff80 	bl	800cb20 <UART_WaitOnFlagUntilTimeout>
 800cc20:	b980      	cbnz	r0, 800cc44 <HAL_UART_Transmit+0x90>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cc22:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 800cc24:	2d00      	cmp	r5, #0
 800cc26:	d1e7      	bne.n	800cbf8 <HAL_UART_Transmit+0x44>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cc28:	f838 2b02 	ldrh.w	r2, [r8], #2
 800cc2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc30:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cc32:	e7e4      	b.n	800cbfe <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 800cc34:	2001      	movs	r0, #1
}
 800cc36:	b002      	add	sp, #8
 800cc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800cc3c:	2002      	movs	r0, #2
}
 800cc3e:	b002      	add	sp, #8
 800cc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->gState = HAL_UART_STATE_READY;
 800cc44:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800cc46:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 800cc48:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 800cc4c:	b002      	add	sp, #8
 800cc4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cc52:	463b      	mov	r3, r7
 800cc54:	2200      	movs	r2, #0
 800cc56:	2140      	movs	r1, #64	@ 0x40
 800cc58:	4620      	mov	r0, r4
 800cc5a:	9600      	str	r6, [sp, #0]
 800cc5c:	f7ff ff60 	bl	800cb20 <UART_WaitOnFlagUntilTimeout>
 800cc60:	2800      	cmp	r0, #0
 800cc62:	d1ef      	bne.n	800cc44 <HAL_UART_Transmit+0x90>
    huart->gState = HAL_UART_STATE_READY;
 800cc64:	2320      	movs	r3, #32
 800cc66:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 800cc6a:	b002      	add	sp, #8
 800cc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc70:	6923      	ldr	r3, [r4, #16]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d1c9      	bne.n	800cc0a <HAL_UART_Transmit+0x56>
 800cc76:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800cc78:	461d      	mov	r5, r3
 800cc7a:	e7c6      	b.n	800cc0a <HAL_UART_Transmit+0x56>

0800cc7c <UART_CheckIdleState>:
{
 800cc7c:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc7e:	2600      	movs	r6, #0
{
 800cc80:	4604      	mov	r4, r0
 800cc82:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc84:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800cc88:	f7fd fb30 	bl	800a2ec <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc8c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800cc8e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc90:	681a      	ldr	r2, [r3, #0]
 800cc92:	0712      	lsls	r2, r2, #28
 800cc94:	d410      	bmi.n	800ccb8 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	075b      	lsls	r3, r3, #29
 800cc9a:	d427      	bmi.n	800ccec <UART_CheckIdleState+0x70>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc9c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800cc9e:	2220      	movs	r2, #32
  return HAL_OK;
 800cca0:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800cca2:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cca6:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccaa:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ccac:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 800ccae:	2300      	movs	r3, #0
 800ccb0:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800ccb4:	b002      	add	sp, #8
 800ccb6:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccb8:	f06f 417e 	mvn.w	r1, #4261412864	@ 0xfe000000
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	4632      	mov	r2, r6
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	9100      	str	r1, [sp, #0]
 800ccc4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ccc8:	f7ff ff2a 	bl	800cb20 <UART_WaitOnFlagUntilTimeout>
 800cccc:	6823      	ldr	r3, [r4, #0]
 800ccce:	2800      	cmp	r0, #0
 800ccd0:	d0e1      	beq.n	800cc96 <UART_CheckIdleState+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd2:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ccd6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccda:	e843 2100 	strex	r1, r2, [r3]
 800ccde:	2900      	cmp	r1, #0
 800cce0:	d1f7      	bne.n	800ccd2 <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 800cce2:	2320      	movs	r3, #32
 800cce4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 800cce8:	2003      	movs	r0, #3
 800ccea:	e7e0      	b.n	800ccae <UART_CheckIdleState+0x32>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccec:	f06f 407e 	mvn.w	r0, #4261412864	@ 0xfe000000
 800ccf0:	462b      	mov	r3, r5
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ccf8:	9000      	str	r0, [sp, #0]
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f7ff ff10 	bl	800cb20 <UART_WaitOnFlagUntilTimeout>
 800cd00:	2800      	cmp	r0, #0
 800cd02:	d0cb      	beq.n	800cc9c <UART_CheckIdleState+0x20>
 800cd04:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd06:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd0a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd0e:	e843 2100 	strex	r1, r2, [r3]
 800cd12:	2900      	cmp	r1, #0
 800cd14:	d1f7      	bne.n	800cd06 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd16:	f103 0208 	add.w	r2, r3, #8
 800cd1a:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd1e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd22:	f103 0008 	add.w	r0, r3, #8
 800cd26:	e840 2100 	strex	r1, r2, [r0]
 800cd2a:	2900      	cmp	r1, #0
 800cd2c:	d1f3      	bne.n	800cd16 <UART_CheckIdleState+0x9a>
      huart->RxState = HAL_UART_STATE_READY;
 800cd2e:	2320      	movs	r3, #32
 800cd30:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 800cd34:	e7d8      	b.n	800cce8 <UART_CheckIdleState+0x6c>
 800cd36:	bf00      	nop

0800cd38 <HAL_UART_Init>:
  if (huart == NULL)
 800cd38:	b380      	cbz	r0, 800cd9c <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800cd3a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 800cd3e:	b510      	push	{r4, lr}
 800cd40:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800cd42:	b333      	cbz	r3, 800cd92 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 800cd44:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800cd46:	2324      	movs	r3, #36	@ 0x24
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cd48:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 800cd4a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800cd4e:	6813      	ldr	r3, [r2, #0]
 800cd50:	f023 0301 	bic.w	r3, r3, #1
 800cd54:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cd56:	b9c1      	cbnz	r1, 800cd8a <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cd58:	4620      	mov	r0, r4
 800cd5a:	f7ff fccd 	bl	800c6f8 <UART_SetConfig>
 800cd5e:	2801      	cmp	r0, #1
 800cd60:	d011      	beq.n	800cd86 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd62:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800cd64:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd66:	685a      	ldr	r2, [r3, #4]
 800cd68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cd6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd6e:	689a      	ldr	r2, [r3, #8]
 800cd70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cd74:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800cd76:	681a      	ldr	r2, [r3, #0]
 800cd78:	f042 0201 	orr.w	r2, r2, #1
}
 800cd7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800cd80:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800cd82:	f7ff bf7b 	b.w	800cc7c <UART_CheckIdleState>
}
 800cd86:	2001      	movs	r0, #1
 800cd88:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800cd8a:	4620      	mov	r0, r4
 800cd8c:	f7ff fe70 	bl	800ca70 <UART_AdvFeatureConfig>
 800cd90:	e7e2      	b.n	800cd58 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 800cd92:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800cd96:	f7f4 f92f 	bl	8000ff8 <HAL_UART_MspInit>
 800cd9a:	e7d3      	b.n	800cd44 <HAL_UART_Init+0xc>
}
 800cd9c:	2001      	movs	r0, #1
 800cd9e:	4770      	bx	lr

0800cda0 <UARTEx_SetNbDataToProcess.part.0>:
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cda0:	6803      	ldr	r3, [r0, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cda2:	4a0e      	ldr	r2, [pc, #56]	@ (800cddc <UARTEx_SetNbDataToProcess.part.0+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cda4:	6899      	ldr	r1, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cda6:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cda8:	f3c1 6142 	ubfx	r1, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cdac:	ea4f 7c53 	mov.w	ip, r3, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdb0:	5c53      	ldrb	r3, [r2, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cdb2:	f812 200c 	ldrb.w	r2, [r2, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdb6:	011b      	lsls	r3, r3, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cdb8:	0112      	lsls	r2, r2, #4
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 800cdba:	b410      	push	{r4}
                               (uint16_t)denominator[tx_fifo_threshold];
 800cdbc:	4c08      	ldr	r4, [pc, #32]	@ (800cde0 <UARTEx_SetNbDataToProcess.part.0+0x40>)
 800cdbe:	f814 c00c 	ldrb.w	ip, [r4, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 800cdc2:	5c61      	ldrb	r1, [r4, r1]
  }
}
 800cdc4:	f85d 4b04 	ldr.w	r4, [sp], #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cdc8:	fbb2 f2fc 	udiv	r2, r2, ip
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdcc:	fbb3 f3f1 	udiv	r3, r3, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cdd0:	f8a0 206a 	strh.w	r2, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdd4:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
}
 800cdd8:	4770      	bx	lr
 800cdda:	bf00      	nop
 800cddc:	08011838 	.word	0x08011838
 800cde0:	08011830 	.word	0x08011830

0800cde4 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800cde4:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 800cde8:	2a01      	cmp	r2, #1
 800cdea:	d017      	beq.n	800ce1c <HAL_UARTEx_DisableFifoMode+0x38>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdec:	6802      	ldr	r2, [r0, #0]
 800cdee:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800cdf0:	2024      	movs	r0, #36	@ 0x24
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cdf2:	2100      	movs	r1, #0
{
 800cdf4:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800cdf6:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  huart->gState = HAL_UART_STATE_READY;
 800cdfa:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdfc:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800cdfe:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ce00:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 800ce04:	f024 0401 	bic.w	r4, r4, #1
 800ce08:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ce0a:	6659      	str	r1, [r3, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce0c:	6010      	str	r0, [r2, #0]
  return HAL_OK;
 800ce0e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800ce10:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800ce14:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 800ce18:	bc30      	pop	{r4, r5}
 800ce1a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800ce1c:	2002      	movs	r0, #2
}
 800ce1e:	4770      	bx	lr

0800ce20 <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 800ce20:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d020      	beq.n	800ce6a <HAL_UARTEx_SetTxFifoThreshold+0x4a>
  huart->gState = HAL_UART_STATE_BUSY;
 800ce28:	2324      	movs	r3, #36	@ 0x24
{
 800ce2a:	b570      	push	{r4, r5, r6, lr}
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce2c:	6805      	ldr	r5, [r0, #0]
 800ce2e:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800ce30:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce34:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800ce36:	682b      	ldr	r3, [r5, #0]
 800ce38:	f023 0301 	bic.w	r3, r3, #1
 800ce3c:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ce3e:	68ab      	ldr	r3, [r5, #8]
 800ce40:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800ce44:	4319      	orrs	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ce46:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ce48:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ce4a:	b153      	cbz	r3, 800ce62 <HAL_UARTEx_SetTxFifoThreshold+0x42>
 800ce4c:	f7ff ffa8 	bl	800cda0 <UARTEx_SetNbDataToProcess.part.0>
  __HAL_UNLOCK(huart);
 800ce50:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800ce52:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce54:	602e      	str	r6, [r5, #0]
  return HAL_OK;
 800ce56:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800ce58:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800ce5c:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800ce60:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800ce62:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800ce66:	6683      	str	r3, [r0, #104]	@ 0x68
 800ce68:	e7f2      	b.n	800ce50 <HAL_UARTEx_SetTxFifoThreshold+0x30>
  __HAL_LOCK(huart);
 800ce6a:	2002      	movs	r0, #2
}
 800ce6c:	4770      	bx	lr
 800ce6e:	bf00      	nop

0800ce70 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800ce70:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d020      	beq.n	800ceba <HAL_UARTEx_SetRxFifoThreshold+0x4a>
  huart->gState = HAL_UART_STATE_BUSY;
 800ce78:	2324      	movs	r3, #36	@ 0x24
{
 800ce7a:	b570      	push	{r4, r5, r6, lr}
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce7c:	6805      	ldr	r5, [r0, #0]
 800ce7e:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800ce80:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce84:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800ce86:	682b      	ldr	r3, [r5, #0]
 800ce88:	f023 0301 	bic.w	r3, r3, #1
 800ce8c:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ce8e:	68ab      	ldr	r3, [r5, #8]
 800ce90:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 800ce94:	4319      	orrs	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ce96:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ce98:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ce9a:	b153      	cbz	r3, 800ceb2 <HAL_UARTEx_SetRxFifoThreshold+0x42>
 800ce9c:	f7ff ff80 	bl	800cda0 <UARTEx_SetNbDataToProcess.part.0>
  __HAL_UNLOCK(huart);
 800cea0:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800cea2:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cea4:	602e      	str	r6, [r5, #0]
  return HAL_OK;
 800cea6:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800cea8:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800ceac:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800ceb0:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800ceb2:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800ceb6:	6683      	str	r3, [r0, #104]	@ 0x68
 800ceb8:	e7f2      	b.n	800cea0 <HAL_UARTEx_SetRxFifoThreshold+0x30>
  __HAL_LOCK(huart);
 800ceba:	2002      	movs	r0, #2
}
 800cebc:	4770      	bx	lr
 800cebe:	bf00      	nop

0800cec0 <vUDPLoggingTaskCreate>:
/*-----------------------------------------------------------*/

BaseType_t rc_create;

void vUDPLoggingTaskCreate( void )
{
 800cec0:	b510      	push	{r4, lr}
	/* Start a task which will send out the logging lines to a UDP address. */
	rc_create = xTaskCreate( prvLoggingTask, "LogTask", configUDP_LOGGING_TASK_STACK_SIZE, NULL, configUDP_LOGGING_TASK_PRIORITY, &xLoggingTask );
 800cec2:	2002      	movs	r0, #2
{
 800cec4:	b082      	sub	sp, #8
	rc_create = xTaskCreate( prvLoggingTask, "LogTask", configUDP_LOGGING_TASK_STACK_SIZE, NULL, configUDP_LOGGING_TASK_PRIORITY, &xLoggingTask );
 800cec6:	4c07      	ldr	r4, [pc, #28]	@ (800cee4 <vUDPLoggingTaskCreate+0x24>)
 800cec8:	2300      	movs	r3, #0
 800ceca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cece:	4906      	ldr	r1, [pc, #24]	@ (800cee8 <vUDPLoggingTaskCreate+0x28>)
 800ced0:	e9cd 0400 	strd	r0, r4, [sp]
 800ced4:	4805      	ldr	r0, [pc, #20]	@ (800ceec <vUDPLoggingTaskCreate+0x2c>)
 800ced6:	f7fb ffe7 	bl	8008ea8 <xTaskCreate>
 800ceda:	4b05      	ldr	r3, [pc, #20]	@ (800cef0 <vUDPLoggingTaskCreate+0x30>)
 800cedc:	6018      	str	r0, [r3, #0]
}
 800cede:	b002      	add	sp, #8
 800cee0:	bd10      	pop	{r4, pc}
 800cee2:	bf00      	nop
 800cee4:	200010b4 	.word	0x200010b4
 800cee8:	08011840 	.word	0x08011840
 800ceec:	0800d05d 	.word	0x0800d05d
 800cef0:	200010ac 	.word	0x200010ac

0800cef4 <xLoggingGetSocket>:

xSocket_t xLoggingGetSocket( void )
{
xSocket_t xReturn;

	if( ( xUDPLoggingSocket != NULL ) && ( xUDPLoggingSocket != FREERTOS_INVALID_SOCKET ) )
 800cef4:	4b03      	ldr	r3, [pc, #12]	@ (800cf04 <xLoggingGetSocket+0x10>)
 800cef6:	6818      	ldr	r0, [r3, #0]
 800cef8:	1e43      	subs	r3, r0, #1
	{
		xReturn = xUDPLoggingSocket;
	}
	else
	{
		xReturn = NULL;
 800cefa:	3303      	adds	r3, #3
	}

	return xReturn;
}
 800cefc:	bf88      	it	hi
 800cefe:	2000      	movhi	r0, #0
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	20000038 	.word	0x20000038

0800cf08 <vUDPLoggingHook>:

void __attribute__((weak)) vUDPLoggingHook( const char *pcMessage, BaseType_t xLength )
{
	( void ) pcMessage;
	( void ) xLength;
}
 800cf08:	4770      	bx	lr
 800cf0a:	bf00      	nop

0800cf0c <lUDPLoggingPrintf>:
{
 800cf0c:	b40f      	push	{r0, r1, r2, r3}
 800cf0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if( xLoggingInitialised == pdFALSE )
 800cf12:	4c4a      	ldr	r4, [pc, #296]	@ (800d03c <lUDPLoggingPrintf+0x130>)
{
 800cf14:	b087      	sub	sp, #28
	if( xLoggingInitialised == pdFALSE )
 800cf16:	6826      	ldr	r6, [r4, #0]
 800cf18:	2e00      	cmp	r6, #0
 800cf1a:	d050      	beq.n	800cfbe <lUDPLoggingPrintf+0xb2>
	configASSERT( pxStreamBuffer );
 800cf1c:	4d48      	ldr	r5, [pc, #288]	@ (800d040 <lUDPLoggingPrintf+0x134>)
		va_start (args, pcFormatString);
 800cf1e:	aa0f      	add	r2, sp, #60	@ 0x3c
	configASSERT( pxStreamBuffer );
 800cf20:	682b      	ldr	r3, [r5, #0]
 800cf22:	4690      	mov	r8, r2
		va_start (args, pcFormatString);
 800cf24:	9204      	str	r2, [sp, #16]
	configASSERT( pxStreamBuffer );
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	f000 8082 	beq.w	800d030 <lUDPLoggingPrintf+0x124>
	vTaskSuspendAll();
 800cf2c:	f7fc f8e6 	bl	80090fc <vTaskSuspendAll>
		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 800cf30:	4f44      	ldr	r7, [pc, #272]	@ (800d044 <lUDPLoggingPrintf+0x138>)
		ullCurrentTime = ullGetHighResolutionTime();
 800cf32:	f000 f991 	bl	800d258 <ullGetHighResolutionTime>
		ulSeconds = ( uint32_t ) ( ullCurrentTime / 1000000ull );
 800cf36:	4a44      	ldr	r2, [pc, #272]	@ (800d048 <lUDPLoggingPrintf+0x13c>)
 800cf38:	2300      	movs	r3, #0
 800cf3a:	f7f3 fa39 	bl	80003b0 <__aeabi_uldivmod>
 800cf3e:	4604      	mov	r4, r0
		ulMilliSeconds = ( uint32_t ) ( ullCurrentTime / 1000ull );
 800cf40:	4619      	mov	r1, r3
 800cf42:	4610      	mov	r0, r2
 800cf44:	2300      	movs	r3, #0
 800cf46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800cf4a:	f7f3 fa31 	bl	80003b0 <__aeabi_uldivmod>
 800cf4e:	4606      	mov	r6, r0
 800cf50:	4691      	mov	r9, r2
		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 800cf52:	2000      	movs	r0, #0
 800cf54:	f7fc f8e0 	bl	8009118 <pcTaskGetName>
 800cf58:	4623      	mov	r3, r4
 800cf5a:	4a3c      	ldr	r2, [pc, #240]	@ (800d04c <lUDPLoggingPrintf+0x140>)
 800cf5c:	21c8      	movs	r1, #200	@ 0xc8
 800cf5e:	9002      	str	r0, [sp, #8]
 800cf60:	4638      	mov	r0, r7
		ulMilliSeconds = ( uint32_t ) ( ullCurrentTime / 1000ull );
 800cf62:	e9cd 6900 	strd	r6, r9, [sp]
		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 800cf66:	f001 f93b 	bl	800e1e0 <snprintf>
 800cf6a:	4601      	mov	r1, r0
		xLength += ( size_t ) vsnprintf( xLogEntry.cMessage + xLength, sizeof( xLogEntry.cMessage ) - xLength, pcFormatString, xArgs );
 800cf6c:	4643      	mov	r3, r8
 800cf6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 800cf70:	9105      	str	r1, [sp, #20]
		xLength += ( size_t ) vsnprintf( xLogEntry.cMessage + xLength, sizeof( xLogEntry.cMessage ) - xLength, pcFormatString, xArgs );
 800cf72:	1838      	adds	r0, r7, r0
 800cf74:	f1c1 01c8 	rsb	r1, r1, #200	@ 0xc8
 800cf78:	f001 f91a 	bl	800e1b0 <vsnprintf>
		xSpace = uxStreamBufferGetSpace( pxStreamBuffer );
 800cf7c:	682c      	ldr	r4, [r5, #0]
		xLength += ( size_t ) vsnprintf( xLogEntry.cMessage + xLength, sizeof( xLogEntry.cMessage ) - xLength, pcFormatString, xArgs );
 800cf7e:	9b05      	ldr	r3, [sp, #20]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800cf80:	6921      	ldr	r1, [r4, #16]
 800cf82:	18c2      	adds	r2, r0, r3
        size_t uxHead = pxBuffer->uxHead;
 800cf84:	68a6      	ldr	r6, [r4, #8]
        size_t uxTail = pxBuffer->uxTail;
 800cf86:	6823      	ldr	r3, [r4, #0]
 800cf88:	9205      	str	r2, [sp, #20]
		if( xSpace > ( xLength + sizeof( BaseType_t ) ) )
 800cf8a:	3204      	adds	r2, #4
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800cf8c:	440b      	add	r3, r1
 800cf8e:	3b01      	subs	r3, #1
 800cf90:	1b9b      	subs	r3, r3, r6
        if( uxCount >= pxBuffer->LENGTH )
 800cf92:	4299      	cmp	r1, r3
            uxCount -= pxBuffer->LENGTH;
 800cf94:	bf98      	it	ls
 800cf96:	1a5b      	subls	r3, r3, r1
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d31c      	bcc.n	800cfd6 <lUDPLoggingPrintf+0xca>
	xTaskResumeAll();
 800cf9c:	f7fc f98c 	bl	80092b8 <xTaskResumeAll>
	if( xLoggingTask == NULL )
 800cfa0:	4b2b      	ldr	r3, [pc, #172]	@ (800d050 <lUDPLoggingPrintf+0x144>)
 800cfa2:	6818      	ldr	r0, [r3, #0]
 800cfa4:	b320      	cbz	r0, 800cff0 <lUDPLoggingPrintf+0xe4>
		xTaskNotifyGive( xLoggingTask );
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	2302      	movs	r3, #2
 800cfaa:	4611      	mov	r1, r2
 800cfac:	9200      	str	r2, [sp, #0]
 800cfae:	f7fc fd3d 	bl	8009a2c <xTaskGenericNotify>
	return xLength;
 800cfb2:	9805      	ldr	r0, [sp, #20]
}
 800cfb4:	b007      	add	sp, #28
 800cfb6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfba:	b004      	add	sp, #16
 800cfbc:	4770      	bx	lr
		if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cfbe:	f7fc fbd1 	bl	8009764 <xTaskGetSchedulerState>
 800cfc2:	2802      	cmp	r0, #2
 800cfc4:	d01d      	beq.n	800d002 <lUDPLoggingPrintf+0xf6>
	return xLoggingInitialised;
 800cfc6:	6820      	ldr	r0, [r4, #0]
	if( prvInitialiseLogging() != pdFALSE )
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	d1a7      	bne.n	800cf1c <lUDPLoggingPrintf+0x10>
}
 800cfcc:	b007      	add	sp, #28
 800cfce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfd2:	b004      	add	sp, #16
 800cfd4:	4770      	bx	lr
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) &xLength, sizeof( xLength ) );
 800cfd6:	aa05      	add	r2, sp, #20
 800cfd8:	2304      	movs	r3, #4
 800cfda:	2100      	movs	r1, #0
 800cfdc:	4620      	mov	r0, r4
 800cfde:	f7f6 ff03 	bl	8003de8 <uxStreamBufferAdd>
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) ( xLogEntry.cMessage ), xLength );
 800cfe2:	9b05      	ldr	r3, [sp, #20]
 800cfe4:	4a17      	ldr	r2, [pc, #92]	@ (800d044 <lUDPLoggingPrintf+0x138>)
 800cfe6:	2100      	movs	r1, #0
 800cfe8:	6828      	ldr	r0, [r5, #0]
 800cfea:	f7f6 fefd 	bl	8003de8 <uxStreamBufferAdd>
 800cfee:	e7d5      	b.n	800cf9c <lUDPLoggingPrintf+0x90>
		vUDPLoggingHook( xLogEntry.cMessage, xLength );
 800cff0:	9905      	ldr	r1, [sp, #20]
 800cff2:	4814      	ldr	r0, [pc, #80]	@ (800d044 <lUDPLoggingPrintf+0x138>)
 800cff4:	f7ff ff88 	bl	800cf08 <vUDPLoggingHook>
		uxSkipCount++;
 800cff8:	4a16      	ldr	r2, [pc, #88]	@ (800d054 <lUDPLoggingPrintf+0x148>)
 800cffa:	6813      	ldr	r3, [r2, #0]
 800cffc:	3301      	adds	r3, #1
 800cffe:	6013      	str	r3, [r2, #0]
 800d000:	e7d7      	b.n	800cfb2 <lUDPLoggingPrintf+0xa6>
			pxStreamBuffer = pvPortMalloc( xSize );
 800d002:	4d0f      	ldr	r5, [pc, #60]	@ (800d040 <lUDPLoggingPrintf+0x134>)
 800d004:	f640 70b5 	movw	r0, #4021	@ 0xfb5
 800d008:	f7fc ffce 	bl	8009fa8 <pvPortMalloc>
 800d00c:	4607      	mov	r7, r0
 800d00e:	6028      	str	r0, [r5, #0]
			if( pxStreamBuffer != NULL )
 800d010:	2800      	cmp	r0, #0
 800d012:	d0d8      	beq.n	800cfc6 <lUDPLoggingPrintf+0xba>
				memset( pxStreamBuffer, '\0', xSize );
 800d014:	f640 72b5 	movw	r2, #4021	@ 0xfb5
 800d018:	4631      	mov	r1, r6
 800d01a:	f000 fdd5 	bl	800dbc8 <memset>
		va_start (args, pcFormatString);
 800d01e:	ab0f      	add	r3, sp, #60	@ 0x3c
				pxStreamBuffer->LENGTH = logMESSAGE_BUFFER_SIZE_BYTES + 1;
 800d020:	f640 72a1 	movw	r2, #4001	@ 0xfa1
 800d024:	4698      	mov	r8, r3
		va_start (args, pcFormatString);
 800d026:	9304      	str	r3, [sp, #16]
				xLoggingInitialised = pdTRUE;
 800d028:	2301      	movs	r3, #1
				pxStreamBuffer->LENGTH = logMESSAGE_BUFFER_SIZE_BYTES + 1;
 800d02a:	613a      	str	r2, [r7, #16]
				xLoggingInitialised = pdTRUE;
 800d02c:	6023      	str	r3, [r4, #0]
	configASSERT( pxStreamBuffer );
 800d02e:	e77d      	b.n	800cf2c <lUDPLoggingPrintf+0x20>
 800d030:	f240 112f 	movw	r1, #303	@ 0x12f
 800d034:	4808      	ldr	r0, [pc, #32]	@ (800d058 <lUDPLoggingPrintf+0x14c>)
 800d036:	f7f3 fe5f 	bl	8000cf8 <vAssertCalled>
 800d03a:	e777      	b.n	800cf2c <lUDPLoggingPrintf+0x20>
 800d03c:	200010a8 	.word	0x200010a8
 800d040:	200010b8 	.word	0x200010b8
 800d044:	200010c8 	.word	0x200010c8
 800d048:	000f4240 	.word	0x000f4240
 800d04c:	08011870 	.word	0x08011870
 800d050:	200010b4 	.word	0x200010b4
 800d054:	200010b0 	.word	0x200010b0
 800d058:	08011848 	.word	0x08011848

0800d05c <prvLoggingTask>:
#if( ipconfigOLD_MULTI != 0 )
	#define ENDPOINT_IS_IPv4( pxEndPoint )	( 1 )
#endif

static void prvLoggingTask( void *pvParameters )
{
 800d05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	}
	#endif /* ipconfigMULTI_INTERFACE */

	#if( ipconfigMULTI_INTERFACE == 0 )
	{
		xRemoteAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_REMOTE );
 800d060:	f246 3309 	movw	r3, #25353	@ 0x6309
{
 800d064:	b089      	sub	sp, #36	@ 0x24
 800d066:	f8df 9140 	ldr.w	r9, [pc, #320]	@ 800d1a8 <prvLoggingTask+0x14c>
		xRemoteAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_REMOTE );
 800d06a:	f8ad 301a 	strh.w	r3, [sp, #26]
		}
		#else
		{
			/* The logging will be broadcasted on the local broadcasting
			address, such as 192.168.0.255 */
			xRemoteAddress.sin_addr = FreeRTOS_GetIPAddress() | ~( FreeRTOS_GetNetmask() );
 800d06e:	f7f5 fb33 	bl	80026d8 <FreeRTOS_GetIPAddress>
 800d072:	4604      	mov	r4, r0
 800d074:	f7f5 fb36 	bl	80026e4 <FreeRTOS_GetNetmask>
 800d078:	ea64 0400 	orn	r4, r4, r0
 800d07c:	9407      	str	r4, [sp, #28]
	#endif	/* ( ipconfigMULTI_INTERFACE != 0 ) */

	/* Loop until a socket is created. */
	do
	{
		vTaskDelay( xBlockingTime );
 800d07e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800d082:	f7fc f9af 	bl	80093e4 <vTaskDelay>
		xUDPLoggingSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 800d086:	2102      	movs	r1, #2
 800d088:	2211      	movs	r2, #17
 800d08a:	4608      	mov	r0, r1
 800d08c:	f7f5 fbca 	bl	8002824 <FreeRTOS_socket>
 800d090:	f8c9 0000 	str.w	r0, [r9]
	} while( xUDPLoggingSocket == FREERTOS_INVALID_SOCKET );
 800d094:	3001      	adds	r0, #1
 800d096:	d0f2      	beq.n	800d07e <prvLoggingTask+0x22>
		pxNetworkInterface = pxEndPoint->pxNetworkInterface;
		//xRemoteAddress.sin_addr = FREERTOS_INADDR_ANY;
	}
	#endif

	xLocalAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_LOCAL );
 800d098:	f246 2309 	movw	r3, #25097	@ 0x6209
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );

	for( ;; )
	{
		/* Wait for another message to be placed into the stream buffer. */
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 800d09c:	2600      	movs	r6, #0
 800d09e:	f8df 810c 	ldr.w	r8, [pc, #268]	@ 800d1ac <prvLoggingTask+0x150>
 800d0a2:	f10d 0a18 	add.w	sl, sp, #24
	xLocalAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_LOCAL );
 800d0a6:	f8ad 3012 	strh.w	r3, [sp, #18]
	xLocalAddress.sin_addr = FreeRTOS_GetIPAddress();
 800d0aa:	f7f5 fb15 	bl	80026d8 <FreeRTOS_GetIPAddress>
 800d0ae:	4603      	mov	r3, r0
	FreeRTOS_bind( xUDPLoggingSocket, &xLocalAddress, sizeof( xLocalAddress ) );
 800d0b0:	2208      	movs	r2, #8
 800d0b2:	a904      	add	r1, sp, #16
 800d0b4:	f8d9 0000 	ldr.w	r0, [r9]
	xLocalAddress.sin_addr = FreeRTOS_GetIPAddress();
 800d0b8:	9305      	str	r3, [sp, #20]
	FreeRTOS_bind( xUDPLoggingSocket, &xLocalAddress, sizeof( xLocalAddress ) );
 800d0ba:	f7f5 fd31 	bl	8002b20 <FreeRTOS_bind>
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 800d0be:	2004      	movs	r0, #4
	xSendTimeOut = xBlockingTime;
 800d0c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 800d0c4:	ab02      	add	r3, sp, #8
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	9000      	str	r0, [sp, #0]
	xSendTimeOut = xBlockingTime;
 800d0ca:	9102      	str	r1, [sp, #8]
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 800d0cc:	4631      	mov	r1, r6
 800d0ce:	f8d9 0000 	ldr.w	r0, [r9]
 800d0d2:	4d32      	ldr	r5, [pc, #200]	@ (800d19c <prvLoggingTask+0x140>)
 800d0d4:	4f32      	ldr	r7, [pc, #200]	@ (800d1a0 <prvLoggingTask+0x144>)
 800d0d6:	f7f5 ff55 	bl	8002f84 <FreeRTOS_setsockopt>
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 800d0da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d0de:	2101      	movs	r1, #1
 800d0e0:	2000      	movs	r0, #0
 800d0e2:	f7fc fc53 	bl	800998c <ulTaskGenericNotifyTake>

	#if( ipconfigMULTI_INTERFACE != 0 )
		if( pxNetworkInterface->pfGetPhyLinkStatus( pxNetworkInterface ) != pdFALSE )
	#else
		if( xGetPhyLinkStatus() != pdFALSE )
 800d0e6:	f7fa f9cb 	bl	8007480 <xGetPhyLinkStatus>
 800d0ea:	2800      	cmp	r0, #0
 800d0ec:	d0f5      	beq.n	800d0da <prvLoggingTask+0x7e>
 800d0ee:	2414      	movs	r4, #20
	if( pxStreamBuffer != NULL )
 800d0f0:	f8d8 2000 	ldr.w	r2, [r8]
size_t xMessageLength = 0;
 800d0f4:	9603      	str	r6, [sp, #12]
	if( pxStreamBuffer != NULL )
 800d0f6:	2a00      	cmp	r2, #0
 800d0f8:	d0ef      	beq.n	800d0da <prvLoggingTask+0x7e>
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800d0fa:	6911      	ldr	r1, [r2, #16]
        size_t uxHead = pxBuffer->uxHead;
 800d0fc:	6893      	ldr	r3, [r2, #8]
        size_t uxTail = pxBuffer->uxTail;
 800d0fe:	6812      	ldr	r2, [r2, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800d100:	440b      	add	r3, r1
 800d102:	1a9b      	subs	r3, r3, r2
        if( uxCount >= pxBuffer->LENGTH )
 800d104:	4299      	cmp	r1, r3
            uxCount -= pxBuffer->LENGTH;
 800d106:	bf98      	it	ls
 800d108:	1a5b      	subls	r3, r3, r1
		if( uxLength > sizeof( size_t ) )
 800d10a:	2b04      	cmp	r3, #4
 800d10c:	d9e5      	bls.n	800d0da <prvLoggingTask+0x7e>
			vTaskSuspendAll();
 800d10e:	f7fb fff5 	bl	80090fc <vTaskSuspendAll>
				uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) &xMessageLength, sizeof( xMessageLength ), pdFALSE );
 800d112:	2304      	movs	r3, #4
 800d114:	aa03      	add	r2, sp, #12
 800d116:	2100      	movs	r1, #0
 800d118:	f8d8 0000 	ldr.w	r0, [r8]
 800d11c:	9600      	str	r6, [sp, #0]
 800d11e:	f7f6 fecf 	bl	8003ec0 <uxStreamBufferGet>
				if( xBufferLength < xMessageLength )
 800d122:	9b03      	ldr	r3, [sp, #12]
 800d124:	2bc8      	cmp	r3, #200	@ 0xc8
 800d126:	d92e      	bls.n	800d186 <prvLoggingTask+0x12a>
					memcpy( pcBuffer, xLogEntry.cMessage, xBufferLength );
 800d128:	f04f 0bc8 	mov.w	fp, #200	@ 0xc8
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) xLogEntry.cMessage, xMessageLength, pdFALSE );
 800d12c:	4a1d      	ldr	r2, [pc, #116]	@ (800d1a4 <prvLoggingTask+0x148>)
 800d12e:	2100      	movs	r1, #0
 800d130:	f8d8 0000 	ldr.w	r0, [r8]
 800d134:	9600      	str	r6, [sp, #0]
 800d136:	f7f6 fec3 	bl	8003ec0 <uxStreamBufferGet>
					memcpy( pcBuffer, xLogEntry.cMessage, xBufferLength );
 800d13a:	491a      	ldr	r1, [pc, #104]	@ (800d1a4 <prvLoggingTask+0x148>)
 800d13c:	4628      	mov	r0, r5
 800d13e:	465a      	mov	r2, fp
 800d140:	f000 fc6e 	bl	800da20 <memcpy>
					xMessageLength = xBufferLength;
 800d144:	f8cd b00c 	str.w	fp, [sp, #12]
					pcBuffer[ xBufferLength - 1 ] = 0x00;
 800d148:	f885 60c7 	strb.w	r6, [r5, #199]	@ 0xc7
			xTaskResumeAll();
 800d14c:	f7fc f8b4 	bl	80092b8 <xTaskResumeAll>
	return xMessageLength;
 800d150:	f8dd b00c 	ldr.w	fp, [sp, #12]
			/* Check for messages in the buffer. */
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
			{
				xCount = prvGetMessageFromStreamBuffer ( cLoggingLine, sizeof( cLoggingLine ) );

				if( xCount <= 0 )
 800d154:	f1bb 0f00 	cmp.w	fp, #0
 800d158:	d0bf      	beq.n	800d0da <prvLoggingTask+0x7e>
					}
				}
				#else
				{
//#warning Do not send logging as a test
					FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xRemoteAddress, sizeof( xRemoteAddress ) );
 800d15a:	2108      	movs	r1, #8
 800d15c:	2300      	movs	r3, #0
 800d15e:	465a      	mov	r2, fp
 800d160:	f8d9 0000 	ldr.w	r0, [r9]
 800d164:	e9cd a100 	strd	sl, r1, [sp]
 800d168:	4629      	mov	r1, r5
 800d16a:	f7f5 fd1b 	bl	8002ba4 <FreeRTOS_sendto>
				}
				#endif
				if( uxSkipCount != ( size_t )0u )
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	b123      	cbz	r3, 800d17c <prvLoggingTask+0x120>
				{
					uxSkipCount--;
 800d172:	3b01      	subs	r3, #1
 800d174:	603b      	str	r3, [r7, #0]
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 800d176:	3c01      	subs	r4, #1
 800d178:	d1ba      	bne.n	800d0f0 <prvLoggingTask+0x94>
 800d17a:	e7ae      	b.n	800d0da <prvLoggingTask+0x7e>
				}
				else
				{
					vUDPLoggingHook( cLoggingLine, xCount );
 800d17c:	4659      	mov	r1, fp
 800d17e:	4628      	mov	r0, r5
 800d180:	f7ff fec2 	bl	800cf08 <vUDPLoggingHook>
 800d184:	e7f7      	b.n	800d176 <prvLoggingTask+0x11a>
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) pcBuffer, xMessageLength, pdFALSE );
 800d186:	462a      	mov	r2, r5
 800d188:	2100      	movs	r1, #0
 800d18a:	f8d8 0000 	ldr.w	r0, [r8]
 800d18e:	9600      	str	r6, [sp, #0]
 800d190:	f7f6 fe96 	bl	8003ec0 <uxStreamBufferGet>
					pcBuffer[ xMessageLength ] = 0x00;
 800d194:	9b03      	ldr	r3, [sp, #12]
 800d196:	54ee      	strb	r6, [r5, r3]
 800d198:	e7d8      	b.n	800d14c <prvLoggingTask+0xf0>
 800d19a:	bf00      	nop
 800d19c:	20000fe0 	.word	0x20000fe0
 800d1a0:	200010b0 	.word	0x200010b0
 800d1a4:	200010c8 	.word	0x200010c8
 800d1a8:	20000038 	.word	0x20000038
 800d1ac:	200010b8 	.word	0x200010b8

0800d1b0 <TIM2_IRQHandler>:
static uint32_t ulInterruptCount = 0;

uint32_t ulTimer2Flags;
void TIM2_IRQHandler(void)
{
	ulTimer2Flags = htim2.Instance->SR;
 800d1b0:	4b07      	ldr	r3, [pc, #28]	@ (800d1d0 <TIM2_IRQHandler+0x20>)
 800d1b2:	4908      	ldr	r1, [pc, #32]	@ (800d1d4 <TIM2_IRQHandler+0x24>)
 800d1b4:	681a      	ldr	r2, [r3, #0]
 800d1b6:	6913      	ldr	r3, [r2, #16]
 800d1b8:	600b      	str	r3, [r1, #0]
	if( ( ulTimer2Flags & TIM_FLAG_UPDATE ) != 0 )
 800d1ba:	07db      	lsls	r3, r3, #31
 800d1bc:	d506      	bpl.n	800d1cc <TIM2_IRQHandler+0x1c>
	{
		__HAL_TIM_CLEAR_FLAG( &htim2, TIM_FLAG_UPDATE );
		ulInterruptCount++;
 800d1be:	4906      	ldr	r1, [pc, #24]	@ (800d1d8 <TIM2_IRQHandler+0x28>)
		__HAL_TIM_CLEAR_FLAG( &htim2, TIM_FLAG_UPDATE );
 800d1c0:	f06f 0001 	mvn.w	r0, #1
		ulInterruptCount++;
 800d1c4:	680b      	ldr	r3, [r1, #0]
		__HAL_TIM_CLEAR_FLAG( &htim2, TIM_FLAG_UPDATE );
 800d1c6:	6110      	str	r0, [r2, #16]
		ulInterruptCount++;
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	600b      	str	r3, [r1, #0]
	}
}
 800d1cc:	4770      	bx	lr
 800d1ce:	bf00      	nop
 800d1d0:	20001198 	.word	0x20001198
 800d1d4:	20001190 	.word	0x20001190
 800d1d8:	20001194 	.word	0x20001194

0800d1dc <vStartHighResolutionTimer>:

/* Timer2 initialization function */
void vStartHighResolutionTimer( void )
{
	/* TIM2 clock enable */
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d1dc:	4b19      	ldr	r3, [pc, #100]	@ (800d244 <vStartHighResolutionTimer+0x68>)

	htim2.Instance = TIM2;     /* Register base address             */
 800d1de:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d1e2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
{
 800d1e6:	b530      	push	{r4, r5, lr}
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d1e8:	f042 0201 	orr.w	r2, r2, #1
	htim2.Instance = TIM2;     /* Register base address             */
 800d1ec:	4c16      	ldr	r4, [pc, #88]	@ (800d248 <vStartHighResolutionTimer+0x6c>)

	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 800d1ee:	2500      	movs	r5, #0
{
 800d1f0:	b083      	sub	sp, #12
	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 800d1f2:	60a5      	str	r5, [r4, #8]
 800d1f4:	6125      	str	r5, [r4, #16]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;			/* Specifies the counter mode. */
	htim2.Init.Period = ( ulReloadCount - 1ul );			/* Specifies the period value to be loaded into the active. */
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;	/* Specifies the clock division. */
	htim2.Init.RepetitionCounter = 0ul;					/* Specifies the repetition counter value. */
 800d1f6:	6165      	str	r5, [r4, #20]
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d1f8:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800d1fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 800d200:	4a12      	ldr	r2, [pc, #72]	@ (800d24c <vStartHighResolutionTimer+0x70>)
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d202:	f003 0301 	and.w	r3, r3, #1
	htim2.Instance = TIM2;     /* Register base address             */
 800d206:	6021      	str	r1, [r4, #0]
	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 800d208:	21c7      	movs	r1, #199	@ 0xc7
 800d20a:	60e2      	str	r2, [r4, #12]
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d20c:	9301      	str	r3, [sp, #4]
	htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d20e:	2301      	movs	r3, #1

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority( TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0 );
 800d210:	462a      	mov	r2, r5
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d212:	9801      	ldr	r0, [sp, #4]
	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 800d214:	6061      	str	r1, [r4, #4]
	HAL_NVIC_SetPriority( TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0 );
 800d216:	201c      	movs	r0, #28
 800d218:	2105      	movs	r1, #5
	htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d21a:	7723      	strb	r3, [r4, #28]
	HAL_NVIC_SetPriority( TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0 );
 800d21c:	f7fd f88e 	bl	800a33c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ( TIM2_IRQn );
 800d220:	201c      	movs	r0, #28
 800d222:	f7fd f8c7 	bl	800a3b4 <HAL_NVIC_EnableIRQ>


	HAL_TIM_Base_Init( &htim2 );
 800d226:	4620      	mov	r0, r4
 800d228:	f7ff f9fe 	bl	800c628 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT( &htim2 );
 800d22c:	4620      	mov	r0, r4
 800d22e:	f7ff f935 	bl	800c49c <HAL_TIM_Base_Start_IT>
	ulTimer2Flags = htim2.Instance->SR;
 800d232:	6822      	ldr	r2, [r4, #0]
 800d234:	4b06      	ldr	r3, [pc, #24]	@ (800d250 <vStartHighResolutionTimer+0x74>)
	/* Ignore the initial interrupt which sets ulInterruptCount = 1.*/
	ulInterruptCount = 0ul;
 800d236:	4907      	ldr	r1, [pc, #28]	@ (800d254 <vStartHighResolutionTimer+0x78>)
	ulTimer2Flags = htim2.Instance->SR;
 800d238:	6912      	ldr	r2, [r2, #16]
	ulInterruptCount = 0ul;
 800d23a:	600d      	str	r5, [r1, #0]
	ulTimer2Flags = htim2.Instance->SR;
 800d23c:	601a      	str	r2, [r3, #0]
}
 800d23e:	b003      	add	sp, #12
 800d240:	bd30      	pop	{r4, r5, pc}
 800d242:	bf00      	nop
 800d244:	58024400 	.word	0x58024400
 800d248:	20001198 	.word	0x20001198
 800d24c:	0098967f 	.word	0x0098967f
 800d250:	20001190 	.word	0x20001190
 800d254:	20001194 	.word	0x20001194

0800d258 <ullGetHighResolutionTime>:

uint64_t ullGetHighResolutionTime()
{
uint64_t ullReturn;
	if( htim2.Instance == NULL )
 800d258:	4b0a      	ldr	r3, [pc, #40]	@ (800d284 <ullGetHighResolutionTime+0x2c>)
 800d25a:	681b      	ldr	r3, [r3, #0]
{
 800d25c:	b510      	push	{r4, lr}
	if( htim2.Instance == NULL )
 800d25e:	b153      	cbz	r3, 800d276 <ullGetHighResolutionTime+0x1e>
	uint32_t ulSlowCount;

		for( ;; )
		{
			ulCounts[ 0 ] = htim2.Instance->CNT;
			ulSlowCount = ulInterruptCount;
 800d260:	4a09      	ldr	r2, [pc, #36]	@ (800d288 <ullGetHighResolutionTime+0x30>)
 800d262:	6814      	ldr	r4, [r2, #0]
			ulCounts[ 0 ] = htim2.Instance->CNT;
 800d264:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
			ulCounts[ 1 ] = htim2.Instance->CNT;
 800d266:	6a58      	ldr	r0, [r3, #36]	@ 0x24
			if( ulCounts[ 1 ] >= ulCounts[ 0 ] )
 800d268:	4282      	cmp	r2, r0
 800d26a:	d8fb      	bhi.n	800d264 <ullGetHighResolutionTime+0xc>
			{
				/* TIM2_IRQHandler() has not occurred in between. */
				break;
			}
		}
		ullReturn = ( uint64_t )ulSlowCount * ulReloadCount + ulCounts[ 1 ];
 800d26c:	4b07      	ldr	r3, [pc, #28]	@ (800d28c <ullGetHighResolutionTime+0x34>)
 800d26e:	2100      	movs	r1, #0
 800d270:	fbe4 0103 	umlal	r0, r1, r4, r3
	}

	return ullReturn;
}
 800d274:	bd10      	pop	{r4, pc}
		ullReturn = 1000ull * xTaskGetTickCount();
 800d276:	f7fb ff49 	bl	800910c <xTaskGetTickCount>
 800d27a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800d27e:	fba0 0101 	umull	r0, r1, r0, r1
}
 800d282:	bd10      	pop	{r4, pc}
 800d284:	20001198 	.word	0x20001198
 800d288:	20001194 	.word	0x20001194
 800d28c:	00989680 	.word	0x00989680

0800d290 <xOnUdpReceive>:
		const struct freertos_sockaddr *pxFrom, const struct freertos_sockaddr *pxDest )
	{
		( void ) pvData;
		( void ) pxFrom;

		ulUDPRecvCount += xLength;
 800d290:	4902      	ldr	r1, [pc, #8]	@ (800d29c <xOnUdpReceive+0xc>)
			( void ) xSocket;
		}
		#endif
		/* Tell the driver not to store the RX data */
		return 1;
	}
 800d292:	2001      	movs	r0, #1
		ulUDPRecvCount += xLength;
 800d294:	680b      	ldr	r3, [r1, #0]
 800d296:	4413      	add	r3, r2
 800d298:	600b      	str	r3, [r1, #0]
	}
 800d29a:	4770      	bx	lr
 800d29c:	200011f4 	.word	0x200011f4

0800d2a0 <vIPerfTCPClose>:
	if( pxControlClient == pxClient )
 800d2a0:	4b1b      	ldr	r3, [pc, #108]	@ (800d310 <vIPerfTCPClose+0x70>)
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	4282      	cmp	r2, r0
{
 800d2a6:	b510      	push	{r4, lr}
 800d2a8:	4604      	mov	r4, r0
 800d2aa:	b084      	sub	sp, #16
	if( pxControlClient == pxClient )
 800d2ac:	d026      	beq.n	800d2fc <vIPerfTCPClose+0x5c>
	if( pxDataClient == pxClient )
 800d2ae:	4b19      	ldr	r3, [pc, #100]	@ (800d314 <vIPerfTCPClose+0x74>)
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	42a2      	cmp	r2, r4
 800d2b4:	d028      	beq.n	800d308 <vIPerfTCPClose+0x68>
	if( pxClient->xServerSocket != NULL )
 800d2b6:	6823      	ldr	r3, [r4, #0]
 800d2b8:	b1b3      	cbz	r3, 800d2e8 <vIPerfTCPClose+0x48>
		FreeRTOS_inet_ntoa( pxClient->xRemoteAddr.sin_addr, pucBuffer );
 800d2ba:	4669      	mov	r1, sp
 800d2bc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d2be:	f7f5 ffe7 	bl	8003290 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "vIPerfTCPClose: Closing server socket %s:%u after %lu bytes\n",
 800d2c2:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 800d2c4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d2c6:	4669      	mov	r1, sp
 800d2c8:	ba52      	rev16	r2, r2
 800d2ca:	4813      	ldr	r0, [pc, #76]	@ (800d318 <vIPerfTCPClose+0x78>)
 800d2cc:	b292      	uxth	r2, r2
 800d2ce:	f7ff fe1d 	bl	800cf0c <lUDPLoggingPrintf>
		FreeRTOS_FD_CLR( pxClient->xServerSocket, xSocketSet, eSELECT_ALL );
 800d2d2:	4b12      	ldr	r3, [pc, #72]	@ (800d31c <vIPerfTCPClose+0x7c>)
 800d2d4:	220f      	movs	r2, #15
 800d2d6:	6820      	ldr	r0, [r4, #0]
 800d2d8:	6819      	ldr	r1, [r3, #0]
 800d2da:	f7f5 fb6b 	bl	80029b4 <FreeRTOS_FD_CLR>
		FreeRTOS_closesocket( pxClient->xServerSocket );
 800d2de:	6820      	ldr	r0, [r4, #0]
 800d2e0:	f7f5 fd96 	bl	8002e10 <FreeRTOS_closesocket>
		pxClient->xServerSocket = NULL;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	6023      	str	r3, [r4, #0]
			uxListRemove( &( pxClient->xListItem ) );
 800d2e8:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800d2ec:	f7fb f97a 	bl	80085e4 <uxListRemove>
			vPortFree( ( void * ) pxClient );
 800d2f0:	4620      	mov	r0, r4
}
 800d2f2:	b004      	add	sp, #16
 800d2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( ( void * ) pxClient );
 800d2f8:	f7fc bec2 	b.w	800a080 <vPortFree>
		pxControlClient = NULL;
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	601a      	str	r2, [r3, #0]
	if( pxDataClient == pxClient )
 800d300:	4b04      	ldr	r3, [pc, #16]	@ (800d314 <vIPerfTCPClose+0x74>)
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	42a2      	cmp	r2, r4
 800d306:	d1d6      	bne.n	800d2b6 <vIPerfTCPClose+0x16>
		pxDataClient = NULL;
 800d308:	2200      	movs	r2, #0
 800d30a:	601a      	str	r2, [r3, #0]
 800d30c:	e7d3      	b.n	800d2b6 <vIPerfTCPClose+0x16>
 800d30e:	bf00      	nop
 800d310:	20001210 	.word	0x20001210
 800d314:	2000120c 	.word	0x2000120c
 800d318:	08011888 	.word	0x08011888
 800d31c:	200011e8 	.word	0x200011e8

0800d320 <vIPerfTask>:
		return xUDPServerSocket;
	}
#endif /* ipconfigIPERF_HAS_UDP */

void vIPerfTask( void *pvParameter )
{
 800d320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d324:	b0bb      	sub	sp, #236	@ 0xec
	Socket_t xUDPServerSocket;
#endif /* ipconfigIPERF_HAS_UDP */

	( void ) pvParameter;

	xSocketSet = FreeRTOS_CreateSocketSet( );
 800d326:	f7f5 fb0d 	bl	8002944 <FreeRTOS_CreateSocketSet>
 800d32a:	4ab4      	ldr	r2, [pc, #720]	@ (800d5fc <vIPerfTask+0x2dc>)
 800d32c:	4603      	mov	r3, r0

	vListInitialise( &xTCPClientList );
 800d32e:	48b4      	ldr	r0, [pc, #720]	@ (800d600 <vIPerfTask+0x2e0>)
	xSocketSet = FreeRTOS_CreateSocketSet( );
 800d330:	6013      	str	r3, [r2, #0]
	vListInitialise( &xTCPClientList );
 800d332:	f7fb f921 	bl	8008578 <vListInitialise>
	TickType_t xNoTimeOut = 0;
 800d336:	2300      	movs	r3, #0
		xTCPServerSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 800d338:	2206      	movs	r2, #6
 800d33a:	2101      	movs	r1, #1
 800d33c:	2002      	movs	r0, #2
	TickType_t xNoTimeOut = 0;
 800d33e:	9305      	str	r3, [sp, #20]
		xTCPServerSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 800d340:	f7f5 fa70 	bl	8002824 <FreeRTOS_socket>
		configASSERT( ( xTCPServerSocket != FREERTOS_INVALID_SOCKET ) && ( xTCPServerSocket != NULL ) );
 800d344:	1e43      	subs	r3, r0, #1
		xTCPServerSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 800d346:	4680      	mov	r8, r0
		configASSERT( ( xTCPServerSocket != FREERTOS_INVALID_SOCKET ) && ( xTCPServerSocket != NULL ) );
 800d348:	3303      	adds	r3, #3
 800d34a:	f200 8331 	bhi.w	800d9b0 <vIPerfTask+0x690>
		memset( &xEchoServerAddress, '\0', sizeof xEchoServerAddress );
 800d34e:	2400      	movs	r4, #0
		FreeRTOS_setsockopt( xTCPServerSocket, 0, FREERTOS_SO_RCVTIMEO, &xNoTimeOut, sizeof( xNoTimeOut ) );
 800d350:	2504      	movs	r5, #4
		xEchoServerAddress.sin_port = FreeRTOS_htons( ipconfigIPERF_TCP_ECHO_PORT  );
 800d352:	f648 1313 	movw	r3, #35091	@ 0x8913
		FreeRTOS_setsockopt( xTCPServerSocket, 0, FREERTOS_SO_RCVTIMEO, &xNoTimeOut, sizeof( xNoTimeOut ) );
 800d356:	4640      	mov	r0, r8
 800d358:	4622      	mov	r2, r4
 800d35a:	4621      	mov	r1, r4
		memset( &xEchoServerAddress, '\0', sizeof xEchoServerAddress );
 800d35c:	9406      	str	r4, [sp, #24]
		FreeRTOS_setsockopt( xTCPServerSocket, 0, FREERTOS_SO_RCVTIMEO, &xNoTimeOut, sizeof( xNoTimeOut ) );
 800d35e:	9500      	str	r5, [sp, #0]
		xEchoServerAddress.sin_port = FreeRTOS_htons( ipconfigIPERF_TCP_ECHO_PORT  );
 800d360:	f8ad 301a 	strh.w	r3, [sp, #26]
		FreeRTOS_setsockopt( xTCPServerSocket, 0, FREERTOS_SO_RCVTIMEO, &xNoTimeOut, sizeof( xNoTimeOut ) );
 800d364:	ab05      	add	r3, sp, #20
		memset( &xEchoServerAddress, '\0', sizeof xEchoServerAddress );
 800d366:	9407      	str	r4, [sp, #28]
		FreeRTOS_setsockopt( xTCPServerSocket, 0, FREERTOS_SO_RCVTIMEO, &xNoTimeOut, sizeof( xNoTimeOut ) );
 800d368:	f7f5 fe0c 	bl	8002f84 <FreeRTOS_setsockopt>
			FreeRTOS_setsockopt( xTCPServerSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 800d36c:	2310      	movs	r3, #16
 800d36e:	4621      	mov	r1, r4
 800d370:	220d      	movs	r2, #13
 800d372:	4640      	mov	r0, r8
 800d374:	9300      	str	r3, [sp, #0]
			xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 800d376:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 800d37a:	9308      	str	r3, [sp, #32]
			xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 800d37c:	930a      	str	r3, [sp, #40]	@ 0x28
			xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 800d37e:	230c      	movs	r3, #12
 800d380:	9309      	str	r3, [sp, #36]	@ 0x24
			xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 800d382:	930b      	str	r3, [sp, #44]	@ 0x2c
			FreeRTOS_setsockopt( xTCPServerSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 800d384:	ab08      	add	r3, sp, #32
 800d386:	f7f5 fdfd 	bl	8002f84 <FreeRTOS_setsockopt>
		xBindResult = FreeRTOS_bind( xTCPServerSocket, &xEchoServerAddress, sizeof xEchoServerAddress );
 800d38a:	2208      	movs	r2, #8
 800d38c:	a906      	add	r1, sp, #24
 800d38e:	4640      	mov	r0, r8
 800d390:	f7f5 fbc6 	bl	8002b20 <FreeRTOS_bind>
		xListenResult = FreeRTOS_listen( xTCPServerSocket, 4 );
 800d394:	4629      	mov	r1, r5
		xBindResult = FreeRTOS_bind( xTCPServerSocket, &xEchoServerAddress, sizeof xEchoServerAddress );
 800d396:	4605      	mov	r5, r0
		xListenResult = FreeRTOS_listen( xTCPServerSocket, 4 );
 800d398:	4640      	mov	r0, r8
 800d39a:	f7f6 fa25 	bl	80037e8 <FreeRTOS_listen>
		FreeRTOS_FD_SET( xTCPServerSocket, xSocketSet, eSELECT_READ );
 800d39e:	4b97      	ldr	r3, [pc, #604]	@ (800d5fc <vIPerfTask+0x2dc>)
		xListenResult = FreeRTOS_listen( xTCPServerSocket, 4 );
 800d3a0:	4606      	mov	r6, r0
		FreeRTOS_FD_SET( xTCPServerSocket, xSocketSet, eSELECT_READ );
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	6819      	ldr	r1, [r3, #0]
 800d3a6:	4640      	mov	r0, r8
 800d3a8:	f7f5 fae0 	bl	800296c <FreeRTOS_FD_SET>
		FreeRTOS_printf( ( "vIPerfTask: created TCP server socket %p bind port %u: %ld listen %ld\n",
 800d3ac:	462b      	mov	r3, r5
 800d3ae:	f241 3289 	movw	r2, #5001	@ 0x1389
 800d3b2:	4641      	mov	r1, r8
 800d3b4:	4893      	ldr	r0, [pc, #588]	@ (800d604 <vIPerfTask+0x2e4>)
 800d3b6:	9600      	str	r6, [sp, #0]
 800d3b8:	f7ff fda8 	bl	800cf0c <lUDPLoggingPrintf>
		xUDPServerSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 800d3bc:	2102      	movs	r1, #2
 800d3be:	2211      	movs	r2, #17
	TickType_t xNoTimeOut = 0;
 800d3c0:	9405      	str	r4, [sp, #20]
		xUDPServerSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 800d3c2:	4608      	mov	r0, r1
 800d3c4:	f7f5 fa2e 	bl	8002824 <FreeRTOS_socket>
		configASSERT( ( xUDPServerSocket != FREERTOS_INVALID_SOCKET ) && ( xUDPServerSocket != NULL ) );
 800d3c8:	1e43      	subs	r3, r0, #1
		xUDPServerSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 800d3ca:	4604      	mov	r4, r0
		configASSERT( ( xUDPServerSocket != FREERTOS_INVALID_SOCKET ) && ( xUDPServerSocket != NULL ) );
 800d3cc:	3303      	adds	r3, #3
 800d3ce:	f200 82e9 	bhi.w	800d9a4 <vIPerfTask+0x684>
		FreeRTOS_setsockopt( xUDPServerSocket, 0, FREERTOS_SO_RCVTIMEO, &xNoTimeOut, sizeof( xNoTimeOut ) );
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	2504      	movs	r5, #4
		xEchoServerAddress.sin_port = FreeRTOS_htons( ipconfigIPERF_UDP_ECHO_PORT  );
 800d3d6:	f648 1313 	movw	r3, #35091	@ 0x8913
		FreeRTOS_setsockopt( xUDPServerSocket, 0, FREERTOS_SO_RCVTIMEO, &xNoTimeOut, sizeof( xNoTimeOut ) );
 800d3da:	4620      	mov	r0, r4
 800d3dc:	4611      	mov	r1, r2
 800d3de:	9500      	str	r5, [sp, #0]
		xEchoServerAddress.sin_port = FreeRTOS_htons( ipconfigIPERF_UDP_ECHO_PORT  );
 800d3e0:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
		FreeRTOS_setsockopt( xUDPServerSocket, 0, FREERTOS_SO_RCVTIMEO, &xNoTimeOut, sizeof( xNoTimeOut ) );
 800d3e4:	ab05      	add	r3, sp, #20
 800d3e6:	f7f5 fdcd 	bl	8002f84 <FreeRTOS_setsockopt>
		xBindResult = FreeRTOS_bind( xUDPServerSocket, &xEchoServerAddress, sizeof xEchoServerAddress );
 800d3ea:	2208      	movs	r2, #8
 800d3ec:	a908      	add	r1, sp, #32
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	f7f5 fb96 	bl	8002b20 <FreeRTOS_bind>
		FreeRTOS_printf( ( "vIPerfTask: created UDP server socket %p bind port %u: %ld\n",
 800d3f4:	4621      	mov	r1, r4
		xBindResult = FreeRTOS_bind( xUDPServerSocket, &xEchoServerAddress, sizeof xEchoServerAddress );
 800d3f6:	4603      	mov	r3, r0
		FreeRTOS_printf( ( "vIPerfTask: created UDP server socket %p bind port %u: %ld\n",
 800d3f8:	f241 3289 	movw	r2, #5001	@ 0x1389
 800d3fc:	4882      	ldr	r0, [pc, #520]	@ (800d608 <vIPerfTask+0x2e8>)
 800d3fe:	f7ff fd85 	bl	800cf0c <lUDPLoggingPrintf>
			xHandler.pOnUdpReceive = xOnUdpReceive;
 800d402:	4b82      	ldr	r3, [pc, #520]	@ (800d60c <vIPerfTask+0x2ec>)
			FreeRTOS_setsockopt( xUDPServerSocket, 0, FREERTOS_SO_UDP_RECV_HANDLER, ( void * ) &xHandler, sizeof( xHandler ) );
 800d404:	2209      	movs	r2, #9
 800d406:	2100      	movs	r1, #0
 800d408:	4620      	mov	r0, r4
 800d40a:	9500      	str	r5, [sp, #0]
			xHandler.pOnUdpReceive = xOnUdpReceive;
 800d40c:	9306      	str	r3, [sp, #24]
			FreeRTOS_setsockopt( xUDPServerSocket, 0, FREERTOS_SO_UDP_RECV_HANDLER, ( void * ) &xHandler, sizeof( xHandler ) );
 800d40e:	ab06      	add	r3, sp, #24
 800d410:	f7f5 fdb8 	bl	8002f84 <FreeRTOS_setsockopt>
		xUDPServerSocket = xCreateUDPServerSocket();
		(void)xUDPServerSocket;
	}
	#endif /* ipconfigIPERF_HAS_UDP */

	FreeRTOS_printf( ( "Use for example:\n" ) );
 800d414:	487e      	ldr	r0, [pc, #504]	@ (800d610 <vIPerfTask+0x2f0>)
 800d416:	f7ff fd79 	bl	800cf0c <lUDPLoggingPrintf>
	FreeRTOS_printf( ( "iperf3 -c %lxip --port %u --bytes 100M [ -R ]\n",
 800d41a:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 800d648 <vIPerfTask+0x328>
 800d41e:	f7f5 f95b 	bl	80026d8 <FreeRTOS_GetIPAddress>
 800d422:	4606      	mov	r6, r0
 800d424:	f7f5 f958 	bl	80026d8 <FreeRTOS_GetIPAddress>
 800d428:	4605      	mov	r5, r0
 800d42a:	f7f5 f955 	bl	80026d8 <FreeRTOS_GetIPAddress>
 800d42e:	4604      	mov	r4, r0
 800d430:	022d      	lsls	r5, r5, #8
		FreeRTOS_printf( ( "TCP[ port %d ] recv[ %d ] %d\n", FreeRTOS_ntohs( pxClient->xRemoteAddr.sin_port ), ( int ) pxClient->eTCP_Status, ( int )xRecvResult ) );
 800d432:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800d64c <vIPerfTask+0x32c>
	FreeRTOS_printf( ( "iperf3 -c %lxip --port %u --bytes 100M [ -R ]\n",
 800d436:	f7f5 f94f 	bl	80026d8 <FreeRTOS_GetIPAddress>
 800d43a:	f241 3289 	movw	r2, #5001	@ 0x1389
 800d43e:	0e01      	lsrs	r1, r0, #24
 800d440:	f405 057f 	and.w	r5, r5, #16711680	@ 0xff0000
 800d444:	0a24      	lsrs	r4, r4, #8
 800d446:	4873      	ldr	r0, [pc, #460]	@ (800d614 <vIPerfTask+0x2f4>)
 800d448:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 800d44c:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 800d450:	4329      	orrs	r1, r5
 800d452:	4321      	orrs	r1, r4
 800d454:	f7ff fd5a 	bl	800cf0c <lUDPLoggingPrintf>
	{
	BaseType_t xResult;
	const TickType_t xBlockingTime = pdMS_TO_TICKS( ipconfigIPERF_LOOP_BLOCKING_TIME_MS );

		/* Wait at most 5 seconds. */
		xResult = FreeRTOS_select( xSocketSet, xBlockingTime );
 800d458:	4b68      	ldr	r3, [pc, #416]	@ (800d5fc <vIPerfTask+0x2dc>)
 800d45a:	496f      	ldr	r1, [pc, #444]	@ (800d618 <vIPerfTask+0x2f8>)
 800d45c:	6818      	ldr	r0, [r3, #0]
 800d45e:	f7f5 facb 	bl	80029f8 <FreeRTOS_select>
#if( ipconfigIPERF_HAS_TCP != 0 )
		if( xResult != 0 )
 800d462:	bb20      	cbnz	r0, 800d4ae <vIPerfTask+0x18e>
			vIPerfUDPWork( xUDPServerSocket );
		}
		else
		#endif /* ipconfigUSE_CALLBACKS */
		{
			if( ulUDPRecvCountSeen != ulUDPRecvCount )
 800d464:	4b6d      	ldr	r3, [pc, #436]	@ (800d61c <vIPerfTask+0x2fc>)
 800d466:	4a6e      	ldr	r2, [pc, #440]	@ (800d620 <vIPerfTask+0x300>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	6812      	ldr	r2, [r2, #0]
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d002      	beq.n	800d476 <vIPerfTask+0x156>
			{
				/* The amount is still changing, do not show it yet. */
				ulUDPRecvCountSeen = ulUDPRecvCount;
 800d470:	4a6b      	ldr	r2, [pc, #428]	@ (800d620 <vIPerfTask+0x300>)
 800d472:	6013      	str	r3, [r2, #0]
 800d474:	e7f0      	b.n	800d458 <vIPerfTask+0x138>
			}
			else if( ulUDPRecvCountShown != ulUDPRecvCount )
 800d476:	4f6b      	ldr	r7, [pc, #428]	@ (800d624 <vIPerfTask+0x304>)
 800d478:	6839      	ldr	r1, [r7, #0]
 800d47a:	428a      	cmp	r2, r1
 800d47c:	d0ec      	beq.n	800d458 <vIPerfTask+0x138>
			{
			uint32_t ulNewBytes = ulUDPRecvCount - ulUDPRecvCountShown;
			uint32_t ulMB = (ulNewBytes + HUNDREDTH_MB/2) / HUNDREDTH_MB;

				FreeRTOS_printf( ( "UDP received %lu + %lu (%lu.%02lu MB) = %lu\n",
 800d47e:	9201      	str	r2, [sp, #4]
			uint32_t ulMB = (ulNewBytes + HUNDREDTH_MB/2) / HUNDREDTH_MB;
 800d480:	f241 437a 	movw	r3, #5242	@ 0x147a
			uint32_t ulNewBytes = ulUDPRecvCount - ulUDPRecvCountShown;
 800d484:	1a52      	subs	r2, r2, r1
			uint32_t ulMB = (ulNewBytes + HUNDREDTH_MB/2) / HUNDREDTH_MB;
 800d486:	4868      	ldr	r0, [pc, #416]	@ (800d628 <vIPerfTask+0x308>)
				FreeRTOS_printf( ( "UDP received %lu + %lu (%lu.%02lu MB) = %lu\n",
 800d488:	2564      	movs	r5, #100	@ 0x64
			uint32_t ulMB = (ulNewBytes + HUNDREDTH_MB/2) / HUNDREDTH_MB;
 800d48a:	4413      	add	r3, r2
 800d48c:	fba0 0303 	umull	r0, r3, r0, r3
				FreeRTOS_printf( ( "UDP received %lu + %lu (%lu.%02lu MB) = %lu\n",
 800d490:	4866      	ldr	r0, [pc, #408]	@ (800d62c <vIPerfTask+0x30c>)
			uint32_t ulMB = (ulNewBytes + HUNDREDTH_MB/2) / HUNDREDTH_MB;
 800d492:	0b1c      	lsrs	r4, r3, #12
				FreeRTOS_printf( ( "UDP received %lu + %lu (%lu.%02lu MB) = %lu\n",
 800d494:	4b66      	ldr	r3, [pc, #408]	@ (800d630 <vIPerfTask+0x310>)
 800d496:	fba3 6304 	umull	r6, r3, r3, r4
 800d49a:	095b      	lsrs	r3, r3, #5
 800d49c:	fb05 4413 	mls	r4, r5, r3, r4
 800d4a0:	9400      	str	r4, [sp, #0]
 800d4a2:	f7ff fd33 	bl	800cf0c <lUDPLoggingPrintf>
					ulUDPRecvCountShown,
					ulNewBytes,
					ulMB / 100,
					ulMB % 100,
					ulUDPRecvCount ) );
				ulUDPRecvCountShown = ulUDPRecvCount;
 800d4a6:	4b5d      	ldr	r3, [pc, #372]	@ (800d61c <vIPerfTask+0x2fc>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	603b      	str	r3, [r7, #0]
 800d4ac:	e7d4      	b.n	800d458 <vIPerfTask+0x138>
	xNexSocket = FreeRTOS_accept( xSocket, &xAddress, &xSocketLength);
 800d4ae:	aa05      	add	r2, sp, #20
 800d4b0:	a906      	add	r1, sp, #24
 800d4b2:	4640      	mov	r0, r8
 800d4b4:	f7f5 ff84 	bl	80033c0 <FreeRTOS_accept>
	if( ( xNexSocket != NULL ) && ( xNexSocket != FREERTOS_INVALID_SOCKET ) )
 800d4b8:	1e43      	subs	r3, r0, #1
	xNexSocket = FreeRTOS_accept( xSocket, &xAddress, &xSocketLength);
 800d4ba:	4604      	mov	r4, r0
	if( ( xNexSocket != NULL ) && ( xNexSocket != FREERTOS_INVALID_SOCKET ) )
 800d4bc:	3303      	adds	r3, #3
 800d4be:	f240 8202 	bls.w	800d8c6 <vIPerfTask+0x5a6>
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800d4c2:	4b4f      	ldr	r3, [pc, #316]	@ (800d600 <vIPerfTask+0x2e0>)
 800d4c4:	68df      	ldr	r7, [r3, #12]
				 pxIterator != ( const ListItem_t * ) pxEnd;
 800d4c6:	3308      	adds	r3, #8
 800d4c8:	429f      	cmp	r7, r3
 800d4ca:	d0cb      	beq.n	800d464 <vIPerfTask+0x144>
			ulLength = snprintf( pcResponse + 4, sizeof( pcResponse ) - 4,
 800d4cc:	f8cd 800c 	str.w	r8, [sp, #12]
uint64_t ullStart = ullGetHighResolutionTime();
 800d4d0:	f7ff fec2 	bl	800d258 <ullGetHighResolutionTime>
				pxClient = ( TcpClient_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800d4d4:	68fc      	ldr	r4, [r7, #12]
				pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800d4d6:	687f      	ldr	r7, [r7, #4]
	if( pxClient->xServerSocket == NULL )
 800d4d8:	6820      	ldr	r0, [r4, #0]
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	f000 818b 	beq.w	800d7f6 <vIPerfTask+0x4d6>
	if( ( pxClient->bits.bIsControl == pdFALSE_UNSIGNED ) && ( pxClient->bits.bReverse != pdFALSE_UNSIGNED ) )
 800d4e0:	7923      	ldrb	r3, [r4, #4]
 800d4e2:	f003 0503 	and.w	r5, r3, #3
 800d4e6:	2d02      	cmp	r5, #2
 800d4e8:	f000 8132 	beq.w	800d750 <vIPerfTask+0x430>
 800d4ec:	46b8      	mov	r8, r7
 800d4ee:	e006      	b.n	800d4fe <vIPerfTask+0x1de>
				pxClient->eTCP_Status = ( eTCP_Server_Status_t ) ( ( ( int ) pxClient->eTCP_Status ) + 1 );
 800d4f0:	6820      	ldr	r0, [r4, #0]
			FreeRTOS_recv( pxClient->xServerSocket, /* The socket being received from. */
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	4652      	mov	r2, sl
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	f7f5 ffda 	bl	80034b0 <FreeRTOS_recv>
			xRecvResult = FreeRTOS_recv( pxClient->xServerSocket, /* The socket being received from. */
 800d4fc:	6820      	ldr	r0, [r4, #0]
 800d4fe:	2301      	movs	r3, #1
 800d500:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800d504:	4649      	mov	r1, r9
 800d506:	f7f5 ffd3 	bl	80034b0 <FreeRTOS_recv>
		if( xRecvResult <= 0 )
 800d50a:	f1b0 0a00 	subs.w	sl, r0, #0
 800d50e:	f340 8135 	ble.w	800d77c <vIPerfTask+0x45c>
		pxClient->ulRecvCount += xRecvResult;
 800d512:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
		if( pxClient->eTCP_Status < eTCP_6_WaitDone )
 800d514:	7a22      	ldrb	r2, [r4, #8]
		pxClient->ulRecvCount += xRecvResult;
 800d516:	4453      	add	r3, sl
		if( pxClient->eTCP_Status < eTCP_6_WaitDone )
 800d518:	2a05      	cmp	r2, #5
		pxClient->ulRecvCount += xRecvResult;
 800d51a:	62a3      	str	r3, [r4, #40]	@ 0x28
		if( pxClient->eTCP_Status < eTCP_6_WaitDone )
 800d51c:	d8e8      	bhi.n	800d4f0 <vIPerfTask+0x1d0>
		FreeRTOS_printf( ( "TCP[ port %d ] recv[ %d ] %d\n", FreeRTOS_ntohs( pxClient->xRemoteAddr.sin_port ), ( int ) pxClient->eTCP_Status, ( int )xRecvResult ) );
 800d51e:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 800d520:	4653      	mov	r3, sl
 800d522:	4658      	mov	r0, fp
			handleRecvPacket(pxClient, pcRecvBuffer, xRecvResult);
 800d524:	f8d9 5000 	ldr.w	r5, [r9]
		FreeRTOS_printf( ( "TCP[ port %d ] recv[ %d ] %d\n", FreeRTOS_ntohs( pxClient->xRemoteAddr.sin_port ), ( int ) pxClient->eTCP_Status, ( int )xRecvResult ) );
 800d528:	ba49      	rev16	r1, r1
 800d52a:	b289      	uxth	r1, r1
 800d52c:	f7ff fcee 	bl	800cf0c <lUDPLoggingPrintf>
	switch( pxClient->eTCP_Status  )
 800d530:	7a23      	ldrb	r3, [r4, #8]
 800d532:	2b05      	cmp	r3, #5
 800d534:	d8dc      	bhi.n	800d4f0 <vIPerfTask+0x1d0>
 800d536:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d53a:	00e5      	.short	0x00e5
 800d53c:	000f00ba 	.word	0x000f00ba
 800d540:	008b00cf 	.word	0x008b00cf
 800d544:	0006      	.short	0x0006
 800d546:	4652      	mov	r2, sl
			if( pxClient->ulSkipCount > ( uint32_t ) xRemaining )
 800d548:	68e3      	ldr	r3, [r4, #12]
 800d54a:	4293      	cmp	r3, r2
 800d54c:	f240 8097 	bls.w	800d67e <vIPerfTask+0x35e>
				pxClient->ulSkipCount -= xRemaining;
 800d550:	1a9b      	subs	r3, r3, r2
 800d552:	6820      	ldr	r0, [r4, #0]
 800d554:	60e3      	str	r3, [r4, #12]
 800d556:	e7cc      	b.n	800d4f2 <vIPerfTask+0x1d2>
	switch( pxClient->eTCP_Status  )
 800d558:	4656      	mov	r6, sl
				pcReadBuffer[ xRemaining ] = '\0';
 800d55a:	2300      	movs	r3, #0
FreeRTOS_printf( ( "Control string: %s\n", pcReadBuffer ) );
 800d55c:	4629      	mov	r1, r5
 800d55e:	4835      	ldr	r0, [pc, #212]	@ (800d634 <vIPerfTask+0x314>)
				pcReadBuffer[ xRemaining ] = '\0';
 800d560:	55ab      	strb	r3, [r5, r6]
FreeRTOS_printf( ( "Control string: %s\n", pcReadBuffer ) );
 800d562:	f7ff fcd3 	bl	800cf0c <lUDPLoggingPrintf>
				for( pcPtr = pcReadBuffer; *pcPtr; pcPtr++ )
 800d566:	782b      	ldrb	r3, [r5, #0]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d03b      	beq.n	800d5e4 <vIPerfTask+0x2c4>
					if( strncmp( pcPtr, "\"reverse\"", 9 ) == 0 )
 800d56c:	4f32      	ldr	r7, [pc, #200]	@ (800d638 <vIPerfTask+0x318>)
 800d56e:	e00c      	b.n	800d58a <vIPerfTask+0x26a>
						pxClient->bits.bReverse = pcPtr[ 10 ] == 't';
 800d570:	7aab      	ldrb	r3, [r5, #10]
 800d572:	7922      	ldrb	r2, [r4, #4]
 800d574:	f1a3 0374 	sub.w	r3, r3, #116	@ 0x74
 800d578:	fab3 f383 	clz	r3, r3
 800d57c:	095b      	lsrs	r3, r3, #5
 800d57e:	f363 0241 	bfi	r2, r3, #1, #1
 800d582:	7122      	strb	r2, [r4, #4]
				for( pcPtr = pcReadBuffer; *pcPtr; pcPtr++ )
 800d584:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800d588:	b363      	cbz	r3, 800d5e4 <vIPerfTask+0x2c4>
					if( strncmp( pcPtr, "\"reverse\"", 9 ) == 0 )
 800d58a:	4639      	mov	r1, r7
 800d58c:	2209      	movs	r2, #9
 800d58e:	4628      	mov	r0, r5
 800d590:	f000 fff6 	bl	800e580 <strncmp>
 800d594:	4603      	mov	r3, r0
					else if( strncmp( pcPtr, "\"num\"", 5 ) == 0 )
 800d596:	4929      	ldr	r1, [pc, #164]	@ (800d63c <vIPerfTask+0x31c>)
 800d598:	2205      	movs	r2, #5
 800d59a:	4628      	mov	r0, r5
					if( strncmp( pcPtr, "\"reverse\"", 9 ) == 0 )
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d0e7      	beq.n	800d570 <vIPerfTask+0x250>
					else if( strncmp( pcPtr, "\"num\"", 5 ) == 0 )
 800d5a0:	f000 ffee 	bl	800e580 <strncmp>
 800d5a4:	4603      	mov	r3, r0
					else if( strncmp( pcPtr, "\"time\"", 6 ) == 0 )
 800d5a6:	2206      	movs	r2, #6
 800d5a8:	4925      	ldr	r1, [pc, #148]	@ (800d640 <vIPerfTask+0x320>)
 800d5aa:	4628      	mov	r0, r5
					else if( strncmp( pcPtr, "\"num\"", 5 ) == 0 )
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	f000 8126 	beq.w	800d7fe <vIPerfTask+0x4de>
					else if( strncmp( pcPtr, "\"time\"", 6 ) == 0 )
 800d5b2:	f000 ffe5 	bl	800e580 <strncmp>
 800d5b6:	2800      	cmp	r0, #0
 800d5b8:	d1e4      	bne.n	800d584 <vIPerfTask+0x264>
						if( sscanf( pcPtr + 7, "%lu", &( ulSeconds ) ) > 0 )
 800d5ba:	4922      	ldr	r1, [pc, #136]	@ (800d644 <vIPerfTask+0x324>)
 800d5bc:	1de8      	adds	r0, r5, #7
 800d5be:	aa08      	add	r2, sp, #32
 800d5c0:	f000 ff2a 	bl	800e418 <siscanf>
 800d5c4:	2800      	cmp	r0, #0
							pxClient->xRemainingTime = ulSeconds * 1000ul;
 800d5c6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
						if( sscanf( pcPtr + 7, "%lu", &( ulSeconds ) ) > 0 )
 800d5ca:	dddb      	ble.n	800d584 <vIPerfTask+0x264>
							pxClient->xRemainingTime = ulSeconds * 1000ul;
 800d5cc:	9a08      	ldr	r2, [sp, #32]
							pxClient->bits.bTimed = pdTRUE_UNSIGNED;
 800d5ce:	7923      	ldrb	r3, [r4, #4]
							pxClient->xRemainingTime = ulSeconds * 1000ul;
 800d5d0:	fb01 f202 	mul.w	r2, r1, r2
							pxClient->bits.bTimed = pdTRUE_UNSIGNED;
 800d5d4:	f043 0304 	orr.w	r3, r3, #4
							pxClient->xRemainingTime = ulSeconds * 1000ul;
 800d5d8:	6162      	str	r2, [r4, #20]
							pxClient->bits.bTimed = pdTRUE_UNSIGNED;
 800d5da:	7123      	strb	r3, [r4, #4]
				for( pcPtr = pcReadBuffer; *pcPtr; pcPtr++ )
 800d5dc:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d1d2      	bne.n	800d58a <vIPerfTask+0x26a>
				if( pxClient->bits.bReverse != pdFALSE_UNSIGNED )
 800d5e4:	7921      	ldrb	r1, [r4, #4]
 800d5e6:	0788      	lsls	r0, r1, #30
 800d5e8:	f100 8162 	bmi.w	800d8b0 <vIPerfTask+0x590>
			if( pxClient->ulSkipCount > ( uint32_t ) xRemaining )
 800d5ec:	68e3      	ldr	r3, [r4, #12]
				FreeRTOS_send( pxClient->xServerSocket, (const void *)newline, sizeof( newline ), 0 );
 800d5ee:	6820      	ldr	r0, [r4, #0]
			if( pxClient->ulSkipCount > ( uint32_t ) xRemaining )
 800d5f0:	42b3      	cmp	r3, r6
 800d5f2:	f240 814b 	bls.w	800d88c <vIPerfTask+0x56c>
				pxClient->ulSkipCount -= ( uint32_t ) xRemaining;
 800d5f6:	1b9b      	subs	r3, r3, r6
 800d5f8:	60e3      	str	r3, [r4, #12]
 800d5fa:	e77a      	b.n	800d4f2 <vIPerfTask+0x1d2>
 800d5fc:	200011e8 	.word	0x200011e8
 800d600:	200011f8 	.word	0x200011f8
 800d604:	080118f0 	.word	0x080118f0
 800d608:	08011938 	.word	0x08011938
 800d60c:	0800d291 	.word	0x0800d291
 800d610:	08011974 	.word	0x08011974
 800d614:	08011988 	.word	0x08011988
 800d618:	000f4240 	.word	0x000f4240
 800d61c:	200011f4 	.word	0x200011f4
 800d620:	200011ec 	.word	0x200011ec
 800d624:	200011f0 	.word	0x200011f0
 800d628:	6401db09 	.word	0x6401db09
 800d62c:	08011bf0 	.word	0x08011bf0
 800d630:	51eb851f 	.word	0x51eb851f
 800d634:	08011a98 	.word	0x08011a98
 800d638:	08011aac 	.word	0x08011aac
 800d63c:	08011ab8 	.word	0x08011ab8
 800d640:	08011ac4 	.word	0x08011ac4
 800d644:	08011ac0 	.word	0x08011ac0
 800d648:	20001264 	.word	0x20001264
 800d64c:	08011a00 	.word	0x08011a00
		if( xRemaining < 4 )
 800d650:	f1ba 0f03 	cmp.w	sl, #3
 800d654:	f77f af4c 	ble.w	800d4f0 <vIPerfTask+0x1d0>
			pxClient->ulSkipCount =
 800d658:	6829      	ldr	r1, [r5, #0]
			FreeRTOS_printf( ( "TCP skipcount %lu xRecvResult %ld\n", pxClient->ulSkipCount, xRemaining ) );
 800d65a:	4652      	mov	r2, sl
 800d65c:	48ae      	ldr	r0, [pc, #696]	@ (800d918 <vIPerfTask+0x5f8>)
 800d65e:	ba09      	rev	r1, r1
			pxClient->ulSkipCount =
 800d660:	60e1      	str	r1, [r4, #12]
			FreeRTOS_printf( ( "TCP skipcount %lu xRecvResult %ld\n", pxClient->ulSkipCount, xRemaining ) );
 800d662:	f7ff fc53 	bl	800cf0c <lUDPLoggingPrintf>
			pxClient->eTCP_Status = ( eTCP_Server_Status_t ) ( ( ( int ) pxClient->eTCP_Status ) + 1 );
 800d666:	7a23      	ldrb	r3, [r4, #8]
		if( xRemaining == 0 )
 800d668:	f1ba 0204 	subs.w	r2, sl, #4
			pxClient->eTCP_Status = ( eTCP_Server_Status_t ) ( ( ( int ) pxClient->eTCP_Status ) + 1 );
 800d66c:	f103 0301 	add.w	r3, r3, #1
 800d670:	7223      	strb	r3, [r4, #8]
		if( xRemaining == 0 )
 800d672:	f43f af3d 	beq.w	800d4f0 <vIPerfTask+0x1d0>
			if( pxClient->ulSkipCount > ( uint32_t ) xRemaining )
 800d676:	68e3      	ldr	r3, [r4, #12]
 800d678:	4293      	cmp	r3, r2
 800d67a:	f63f af69 	bhi.w	800d550 <vIPerfTask+0x230>
			if( pxDataClient != NULL )
 800d67e:	4ba7      	ldr	r3, [pc, #668]	@ (800d91c <vIPerfTask+0x5fc>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	b103      	cbz	r3, 800d686 <vIPerfTask+0x366>
				ulCount = pxDataClient->ulRecvCount;
 800d684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
			ulLength = snprintf( pcResponse + 4, sizeof( pcResponse ) - 4,
 800d686:	4aa6      	ldr	r2, [pc, #664]	@ (800d920 <vIPerfTask+0x600>)
 800d688:	21c4      	movs	r1, #196	@ 0xc4
 800d68a:	a809      	add	r0, sp, #36	@ 0x24
 800d68c:	f000 fda8 	bl	800e1e0 <snprintf>
			ulStore = FreeRTOS_htonl( ulLength - 1 );
 800d690:	1e45      	subs	r5, r0, #1
				FreeRTOS_send( pxClient->xServerSocket, (const void *)pcResponse, ulLength + 4, 0 );
 800d692:	2300      	movs	r3, #0
 800d694:	a908      	add	r1, sp, #32
 800d696:	ba2d      	rev	r5, r5
 800d698:	1d02      	adds	r2, r0, #4
			memcpy( pcResponse, &( ulStore ), sizeof ( ulStore ) );
 800d69a:	9508      	str	r5, [sp, #32]
				FreeRTOS_send( pxClient->xServerSocket, (const void *)pcResponse, ulLength + 4, 0 );
 800d69c:	6820      	ldr	r0, [r4, #0]
 800d69e:	f7f5 ffbf 	bl	8003620 <FreeRTOS_send>
				pxClient->eTCP_Status = ( eTCP_Server_Status_t ) ( ( ( int ) pxClient->eTCP_Status ) + 1 );
 800d6a2:	7a23      	ldrb	r3, [r4, #8]
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	7223      	strb	r3, [r4, #8]
				pxClient->ulSkipCount = 0;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	60e3      	str	r3, [r4, #12]
 800d6ac:	e720      	b.n	800d4f0 <vIPerfTask+0x1d0>
		if( xRemaining < 4 )
 800d6ae:	f1ba 0f03 	cmp.w	sl, #3
 800d6b2:	f77f af1d 	ble.w	800d4f0 <vIPerfTask+0x1d0>
			pxClient->ulSkipCount =
 800d6b6:	6829      	ldr	r1, [r5, #0]
			FreeRTOS_printf( ( "TCP skipcount %u xRecvResult %d\n", ( unsigned )pxClient->ulSkipCount, ( int )xRemaining ) );
 800d6b8:	4652      	mov	r2, sl
 800d6ba:	489a      	ldr	r0, [pc, #616]	@ (800d924 <vIPerfTask+0x604>)
 800d6bc:	ba09      	rev	r1, r1
			pxClient->ulSkipCount =
 800d6be:	60e1      	str	r1, [r4, #12]
			FreeRTOS_printf( ( "TCP skipcount %u xRecvResult %d\n", ( unsigned )pxClient->ulSkipCount, ( int )xRemaining ) );
 800d6c0:	f7ff fc24 	bl	800cf0c <lUDPLoggingPrintf>
			pxClient->eTCP_Status = ( eTCP_Server_Status_t ) ( ( ( int ) pxClient->eTCP_Status ) + 1 );
 800d6c4:	7a23      	ldrb	r3, [r4, #8]
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	7223      	strb	r3, [r4, #8]
		if( xRemaining == 0 )
 800d6ca:	f1ba 0304 	subs.w	r3, sl, #4
 800d6ce:	f43f af0f 	beq.w	800d4f0 <vIPerfTask+0x1d0>
			pcReadBuffer += 4;
 800d6d2:	3504      	adds	r5, #4
				pcReadBuffer[ xRemaining ] = '\0';
 800d6d4:	461e      	mov	r6, r3
 800d6d6:	e740      	b.n	800d55a <vIPerfTask+0x23a>
		unsigned char cr[ 1 ] = { '\r' };
 800d6d8:	220d      	movs	r2, #13
		unsigned char ch = pcReadBuffer[ 0 ];
 800d6da:	782b      	ldrb	r3, [r5, #0]
			FreeRTOS_printf( ( "TCP[ port %d ] recv %d bytes: 0x%02X\n",
 800d6dc:	4892      	ldr	r0, [pc, #584]	@ (800d928 <vIPerfTask+0x608>)
		unsigned char cr[ 1 ] = { '\r' };
 800d6de:	f88d 2020 	strb.w	r2, [sp, #32]
			FreeRTOS_printf( ( "TCP[ port %d ] recv %d bytes: 0x%02X\n",
 800d6e2:	4652      	mov	r2, sl
 800d6e4:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 800d6e6:	ba49      	rev16	r1, r1
 800d6e8:	b289      	uxth	r1, r1
 800d6ea:	f7ff fc0f 	bl	800cf0c <lUDPLoggingPrintf>
			FreeRTOS_send( pxClient->xServerSocket, (const void *)cr, sizeof( cr ), 0 );
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	a908      	add	r1, sp, #32
 800d6f4:	6820      	ldr	r0, [r4, #0]
 800d6f6:	f7f5 ff93 	bl	8003620 <FreeRTOS_send>
			pxClient->eTCP_Status = ( eTCP_Server_Status_t ) ( ( ( int ) pxClient->eTCP_Status ) + 1 );
 800d6fa:	7a23      	ldrb	r3, [r4, #8]
 800d6fc:	6820      	ldr	r0, [r4, #0]
 800d6fe:	3301      	adds	r3, #1
 800d700:	7223      	strb	r3, [r4, #8]
		break;
 800d702:	e6f6      	b.n	800d4f2 <vIPerfTask+0x1d2>
			if( pcExpectedClient[ 0 ] != '\0' )
 800d704:	4b89      	ldr	r3, [pc, #548]	@ (800d92c <vIPerfTask+0x60c>)
				FreeRTOS_send( pxClient->xServerSocket, (const void *)tab, 1, 0 );
 800d706:	6827      	ldr	r7, [r4, #0]
			if( pcExpectedClient[ 0 ] != '\0' )
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	f040 8082 	bne.w	800d814 <vIPerfTask+0x4f4>
			unsigned char tab[ 1 ] = { '\t' };
 800d710:	2209      	movs	r2, #9
				FreeRTOS_send( pxClient->xServerSocket, (const void *)tab, 1, 0 );
 800d712:	4638      	mov	r0, r7
				rc = -1;
 800d714:	f04f 37ff 	mov.w	r7, #4294967295
				FreeRTOS_send( pxClient->xServerSocket, (const void *)tab, 1, 0 );
 800d718:	a908      	add	r1, sp, #32
			unsigned char tab[ 1 ] = { '\t' };
 800d71a:	f88d 2020 	strb.w	r2, [sp, #32]
				FreeRTOS_send( pxClient->xServerSocket, (const void *)tab, 1, 0 );
 800d71e:	2201      	movs	r2, #1
 800d720:	f7f5 ff7e 	bl	8003620 <FreeRTOS_send>
				FreeRTOS_printf( ( "Got Control Socket: rc %d: exp: '%s' got: '%s'\n", rc, pcExpectedClient, pcReadBuffer ) );
 800d724:	462b      	mov	r3, r5
 800d726:	4639      	mov	r1, r7
 800d728:	4a80      	ldr	r2, [pc, #512]	@ (800d92c <vIPerfTask+0x60c>)
 800d72a:	4881      	ldr	r0, [pc, #516]	@ (800d930 <vIPerfTask+0x610>)
 800d72c:	f7ff fbee 	bl	800cf0c <lUDPLoggingPrintf>
				strncpy( pcExpectedClient, pcReadBuffer, sizeof( pcExpectedClient ) );
 800d730:	4629      	mov	r1, r5
 800d732:	2250      	movs	r2, #80	@ 0x50
 800d734:	487d      	ldr	r0, [pc, #500]	@ (800d92c <vIPerfTask+0x60c>)
 800d736:	f000 ff35 	bl	800e5a4 <strncpy>
				pxControlClient = pxClient;
 800d73a:	4b7e      	ldr	r3, [pc, #504]	@ (800d934 <vIPerfTask+0x614>)
 800d73c:	6820      	ldr	r0, [r4, #0]
 800d73e:	601c      	str	r4, [r3, #0]
				pxClient->bits.bIsControl = pdTRUE_UNSIGNED;
 800d740:	7923      	ldrb	r3, [r4, #4]
 800d742:	f043 0301 	orr.w	r3, r3, #1
 800d746:	7123      	strb	r3, [r4, #4]
				pxClient->eTCP_Status = ( eTCP_Server_Status_t ) ( ( ( int ) pxClient->eTCP_Status ) + 1 );
 800d748:	7a23      	ldrb	r3, [r4, #8]
 800d74a:	3301      	adds	r3, #1
 800d74c:	7223      	strb	r3, [r4, #8]
 800d74e:	e6d0      	b.n	800d4f2 <vIPerfTask+0x1d2>
		if( ( pxClient->bits.bTimed == pdFALSE_UNSIGNED ) && ( pxClient->bits.bHasShutdown == pdFALSE_UNSIGNED ) && ( pxClient->ulAmount == (uint32_t)0u ) )
 800d750:	f013 0f14 	tst.w	r3, #20
 800d754:	f47f aeca 	bne.w	800d4ec <vIPerfTask+0x1cc>
 800d758:	6923      	ldr	r3, [r4, #16]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	f47f aec6 	bne.w	800d4ec <vIPerfTask+0x1cc>
			FreeRTOS_printf( ( "Shutdown connection\n" ) );
 800d760:	4875      	ldr	r0, [pc, #468]	@ (800d938 <vIPerfTask+0x618>)
			xRecvResult = FreeRTOS_recv( pxClient->xServerSocket, /* The socket being received from. */
 800d762:	46b8      	mov	r8, r7
			FreeRTOS_printf( ( "Shutdown connection\n" ) );
 800d764:	f7ff fbd2 	bl	800cf0c <lUDPLoggingPrintf>
			FreeRTOS_shutdown( pxClient->xServerSocket, FREERTOS_SHUT_RDWR );
 800d768:	4629      	mov	r1, r5
 800d76a:	6820      	ldr	r0, [r4, #0]
 800d76c:	f7f6 f884 	bl	8003878 <FreeRTOS_shutdown>
			pxClient->bits.bHasShutdown = pdTRUE_UNSIGNED;
 800d770:	7923      	ldrb	r3, [r4, #4]
			xRecvResult = FreeRTOS_recv( pxClient->xServerSocket, /* The socket being received from. */
 800d772:	6820      	ldr	r0, [r4, #0]
			pxClient->bits.bHasShutdown = pdTRUE_UNSIGNED;
 800d774:	f043 0310 	orr.w	r3, r3, #16
 800d778:	7123      	strb	r3, [r4, #4]
 800d77a:	e6c0      	b.n	800d4fe <vIPerfTask+0x1de>
	if( ( xRecvResult == 0 ) && ( pxClient->bits.bIsControl == pdFALSE_UNSIGNED ) && ( pxClient->bits.bReverse != pdFALSE_UNSIGNED ) )
 800d77c:	4647      	mov	r7, r8
 800d77e:	d134      	bne.n	800d7ea <vIPerfTask+0x4ca>
 800d780:	7925      	ldrb	r5, [r4, #4]
 800d782:	f005 0503 	and.w	r5, r5, #3
 800d786:	2d02      	cmp	r5, #2
 800d788:	d008      	beq.n	800d79c <vIPerfTask+0x47c>
uint32_t ulDuration = ( uint32_t ) ( ullGetHighResolutionTime() - ullStart  );
 800d78a:	f7ff fd65 	bl	800d258 <ullGetHighResolutionTime>
				 pxIterator != ( const ListItem_t * ) pxEnd;
 800d78e:	4b6b      	ldr	r3, [pc, #428]	@ (800d93c <vIPerfTask+0x61c>)
 800d790:	429f      	cmp	r7, r3
 800d792:	f47f ae9d 	bne.w	800d4d0 <vIPerfTask+0x1b0>
 800d796:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d79a:	e663      	b.n	800d464 <vIPerfTask+0x144>
		size_t uxMaxSpace = (size_t) FreeRTOS_tx_space( pxClient->xServerSocket );
 800d79c:	6820      	ldr	r0, [r4, #0]
 800d79e:	f7f6 f9bd 	bl	8003b1c <FreeRTOS_tx_space>
		if( pxClient->bits.bTimed != pdFALSE_UNSIGNED )
 800d7a2:	7923      	ldrb	r3, [r4, #4]
		size_t uxMaxSpace = (size_t) FreeRTOS_tx_space( pxClient->xServerSocket );
 800d7a4:	4606      	mov	r6, r0
		if( pxClient->bits.bTimed != pdFALSE_UNSIGNED )
 800d7a6:	0759      	lsls	r1, r3, #29
 800d7a8:	f100 80d6 	bmi.w	800d958 <vIPerfTask+0x638>
            return ( a <= b ) ? a : b;
 800d7ac:	f648 05e0 	movw	r5, #35040	@ 0x88e0
 800d7b0:	6923      	ldr	r3, [r4, #16]
 800d7b2:	429d      	cmp	r5, r3
 800d7b4:	bf28      	it	cs
 800d7b6:	461d      	movcs	r5, r3
 800d7b8:	42b5      	cmp	r5, r6
 800d7ba:	bf28      	it	cs
 800d7bc:	4635      	movcs	r5, r6
		if( uxSize <= 0 )
 800d7be:	2d00      	cmp	r5, #0
 800d7c0:	d0e3      	beq.n	800d78a <vIPerfTask+0x46a>
		xResult = FreeRTOS_send( pxClient->xServerSocket, (const void *)pcSendBuffer, uxSize, 0 );
 800d7c2:	495f      	ldr	r1, [pc, #380]	@ (800d940 <vIPerfTask+0x620>)
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	462a      	mov	r2, r5
 800d7c8:	6820      	ldr	r0, [r4, #0]
 800d7ca:	6809      	ldr	r1, [r1, #0]
 800d7cc:	f7f5 ff28 	bl	8003620 <FreeRTOS_send>
		if( xResult < 0 )
 800d7d0:	f1b0 0a00 	subs.w	sl, r0, #0
 800d7d4:	db0c      	blt.n	800d7f0 <vIPerfTask+0x4d0>
		if( pxClient->bits.bTimed == pdFALSE_UNSIGNED )
 800d7d6:	7923      	ldrb	r3, [r4, #4]
 800d7d8:	075b      	lsls	r3, r3, #29
 800d7da:	d405      	bmi.n	800d7e8 <vIPerfTask+0x4c8>
			pxClient->ulAmount -= uxSize;
 800d7dc:	6923      	ldr	r3, [r4, #16]
 800d7de:	1b5b      	subs	r3, r3, r5
 800d7e0:	6123      	str	r3, [r4, #16]
			if( pxClient->ulAmount == 0ul )
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	f000 80d6 	beq.w	800d994 <vIPerfTask+0x674>
			xResult += uxSize;
 800d7e8:	44aa      	add	sl, r5
	if( ( xRecvResult < 0 ) && ( xRecvResult != -pdFREERTOS_ERRNO_EAGAIN ) )
 800d7ea:	f1ba 0f00 	cmp.w	sl, #0
 800d7ee:	dacc      	bge.n	800d78a <vIPerfTask+0x46a>
 800d7f0:	f11a 0f0b 	cmn.w	sl, #11
 800d7f4:	d0c9      	beq.n	800d78a <vIPerfTask+0x46a>
		vIPerfTCPClose( pxClient );
 800d7f6:	4620      	mov	r0, r4
 800d7f8:	f7ff fd52 	bl	800d2a0 <vIPerfTCPClose>
 800d7fc:	e7c5      	b.n	800d78a <vIPerfTask+0x46a>
						if( sscanf( pcPtr + 6, "%lu", &( ulAmount ) ) > 0 )
 800d7fe:	18a8      	adds	r0, r5, r2
 800d800:	4950      	ldr	r1, [pc, #320]	@ (800d944 <vIPerfTask+0x624>)
 800d802:	aa08      	add	r2, sp, #32
 800d804:	f000 fe08 	bl	800e418 <siscanf>
 800d808:	2800      	cmp	r0, #0
 800d80a:	f77f aebb 	ble.w	800d584 <vIPerfTask+0x264>
							pxClient->ulAmount = ulAmount;
 800d80e:	9b08      	ldr	r3, [sp, #32]
 800d810:	6123      	str	r3, [r4, #16]
 800d812:	e6b7      	b.n	800d584 <vIPerfTask+0x264>
				rc = strncmp( pcExpectedClient, pcReadBuffer, sizeof( pcExpectedClient ) );
 800d814:	2250      	movs	r2, #80	@ 0x50
 800d816:	4629      	mov	r1, r5
 800d818:	4844      	ldr	r0, [pc, #272]	@ (800d92c <vIPerfTask+0x60c>)
 800d81a:	f000 feb1 	bl	800e580 <strncmp>
			unsigned char tab[ 1 ] = { '\t' };
 800d81e:	2309      	movs	r3, #9
				rc = strncmp( pcExpectedClient, pcReadBuffer, sizeof( pcExpectedClient ) );
 800d820:	4606      	mov	r6, r0
				FreeRTOS_send( pxClient->xServerSocket, (const void *)tab, 1, 0 );
 800d822:	2201      	movs	r2, #1
 800d824:	4638      	mov	r0, r7
			unsigned char tab[ 1 ] = { '\t' };
 800d826:	f88d 3020 	strb.w	r3, [sp, #32]
				FreeRTOS_send( pxClient->xServerSocket, (const void *)tab, 1, 0 );
 800d82a:	a908      	add	r1, sp, #32
 800d82c:	2300      	movs	r3, #0
				rc = strncmp( pcExpectedClient, pcReadBuffer, sizeof( pcExpectedClient ) );
 800d82e:	4637      	mov	r7, r6
				FreeRTOS_send( pxClient->xServerSocket, (const void *)tab, 1, 0 );
 800d830:	f7f5 fef6 	bl	8003620 <FreeRTOS_send>
			if( rc != 0 )
 800d834:	2e00      	cmp	r6, #0
 800d836:	f47f af75 	bne.w	800d724 <vIPerfTask+0x404>
				FreeRTOS_printf( ( "Got expected client: rc %d: '%s'\n", rc, pcExpectedClient ) );
 800d83a:	4a3c      	ldr	r2, [pc, #240]	@ (800d92c <vIPerfTask+0x60c>)
 800d83c:	4631      	mov	r1, r6
 800d83e:	4842      	ldr	r0, [pc, #264]	@ (800d948 <vIPerfTask+0x628>)
 800d840:	f7ff fb64 	bl	800cf0c <lUDPLoggingPrintf>
				pcExpectedClient[ 0 ] = '\0';
 800d844:	4b39      	ldr	r3, [pc, #228]	@ (800d92c <vIPerfTask+0x60c>)
				pxDataClient = pxClient;
 800d846:	4d35      	ldr	r5, [pc, #212]	@ (800d91c <vIPerfTask+0x5fc>)
				pcExpectedClient[ 0 ] = '\0';
 800d848:	701e      	strb	r6, [r3, #0]
				if( pxControlClient != NULL )
 800d84a:	4b3a      	ldr	r3, [pc, #232]	@ (800d934 <vIPerfTask+0x614>)
				pxDataClient = pxClient;
 800d84c:	602c      	str	r4, [r5, #0]
				if( pxControlClient != NULL )
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	b363      	cbz	r3, 800d8ac <vIPerfTask+0x58c>
					memcpy( &( pxDataClient->bits ), &( pxControlClient->bits ), sizeof( pxDataClient->bits ) );
 800d852:	685a      	ldr	r2, [r3, #4]
					vTaskSetTimeOutState( &( pxDataClient->xTimeOut ) );
 800d854:	f104 0018 	add.w	r0, r4, #24
					memcpy( &( pxDataClient->bits ), &( pxControlClient->bits ), sizeof( pxDataClient->bits ) );
 800d858:	6062      	str	r2, [r4, #4]
					pxDataClient->ulAmount = pxControlClient->ulAmount;
 800d85a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d85e:	e9c4 2304 	strd	r2, r3, [r4, #16]
					vTaskSetTimeOutState( &( pxDataClient->xTimeOut ) );
 800d862:	f7fb ff09 	bl	8009678 <vTaskSetTimeOutState>
					if( pxDataClient->bits.bReverse != pdFALSE_UNSIGNED )
 800d866:	682b      	ldr	r3, [r5, #0]
 800d868:	791a      	ldrb	r2, [r3, #4]
 800d86a:	0796      	lsls	r6, r2, #30
 800d86c:	f100 808a 	bmi.w	800d984 <vIPerfTask+0x664>
					pxControlClient->bits.bIsControl = pdTRUE_UNSIGNED;
 800d870:	4a30      	ldr	r2, [pc, #192]	@ (800d934 <vIPerfTask+0x614>)
 800d872:	6811      	ldr	r1, [r2, #0]
 800d874:	790a      	ldrb	r2, [r1, #4]
 800d876:	f042 0201 	orr.w	r2, r2, #1
 800d87a:	710a      	strb	r2, [r1, #4]
					pxDataClient->bits.bIsControl    = pdFALSE_UNSIGNED;
 800d87c:	791a      	ldrb	r2, [r3, #4]
 800d87e:	f36f 0200 	bfc	r2, #0, #1
 800d882:	711a      	strb	r2, [r3, #4]
				pxDataClient->eTCP_Status = eTCP_7_WaitTransfer;
 800d884:	2207      	movs	r2, #7
 800d886:	721a      	strb	r2, [r3, #8]
 800d888:	6820      	ldr	r0, [r4, #0]
 800d88a:	e632      	b.n	800d4f2 <vIPerfTask+0x1d2>
			unsigned char newline[ 1 ] = { '\n' };
 800d88c:	230a      	movs	r3, #10
				FreeRTOS_send( pxClient->xServerSocket, (const void *)newline, sizeof( newline ), 0 );
 800d88e:	2201      	movs	r2, #1
 800d890:	a906      	add	r1, sp, #24
			unsigned char newline[ 1 ] = { '\n' };
 800d892:	f88d 3018 	strb.w	r3, [sp, #24]
			unsigned char onetwo[ 2 ] = { '\1', '\2' };
 800d896:	f240 2301 	movw	r3, #513	@ 0x201
 800d89a:	f8ad 3020 	strh.w	r3, [sp, #32]
				FreeRTOS_send( pxClient->xServerSocket, (const void *)newline, sizeof( newline ), 0 );
 800d89e:	2300      	movs	r3, #0
 800d8a0:	f7f5 febe 	bl	8003620 <FreeRTOS_send>
				FreeRTOS_send( pxClient->xServerSocket, (const void *)onetwo, sizeof( onetwo ), 0 );
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	2202      	movs	r2, #2
 800d8a8:	a908      	add	r1, sp, #32
 800d8aa:	e6f7      	b.n	800d69c <vIPerfTask+0x37c>
 800d8ac:	4623      	mov	r3, r4
 800d8ae:	e7e9      	b.n	800d884 <vIPerfTask+0x564>
					FreeRTOS_printf( ( "Reverse %d send %lu bytes timed %d: %lu\n",
 800d8b0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800d8b4:	4825      	ldr	r0, [pc, #148]	@ (800d94c <vIPerfTask+0x62c>)
 800d8b6:	9300      	str	r3, [sp, #0]
 800d8b8:	f3c1 0380 	ubfx	r3, r1, #2, #1
 800d8bc:	f3c1 0140 	ubfx	r1, r1, #1, #1
 800d8c0:	f7ff fb24 	bl	800cf0c <lUDPLoggingPrintf>
 800d8c4:	e692      	b.n	800d5ec <vIPerfTask+0x2cc>
		pxClient = ( TcpClient_t * )pvPortMalloc( sizeof *pxClient );
 800d8c6:	2040      	movs	r0, #64	@ 0x40
 800d8c8:	f7fc fb6e 	bl	8009fa8 <pvPortMalloc>
 800d8cc:	4605      	mov	r5, r0
		memset( pxClient, '\0', sizeof *pxClient );
 800d8ce:	223c      	movs	r2, #60	@ 0x3c
 800d8d0:	2100      	movs	r1, #0
 800d8d2:	3004      	adds	r0, #4
 800d8d4:	f000 f978 	bl	800dbc8 <memset>
		FreeRTOS_GetRemoteAddress( xNexSocket, ( struct freertos_sockaddr * ) &pxClient->xRemoteAddr );
 800d8d8:	f105 0120 	add.w	r1, r5, #32
 800d8dc:	4620      	mov	r0, r4
		pxClient->xServerSocket = xNexSocket;
 800d8de:	602c      	str	r4, [r5, #0]
		listSET_LIST_ITEM_OWNER( &( pxClient->xListItem ), ( void* ) pxClient );
 800d8e0:	63ad      	str	r5, [r5, #56]	@ 0x38
		FreeRTOS_GetRemoteAddress( xNexSocket, ( struct freertos_sockaddr * ) &pxClient->xRemoteAddr );
 800d8e2:	f7f6 f90b 	bl	8003afc <FreeRTOS_GetRemoteAddress>
		FreeRTOS_inet_ntoa( pxClient->xRemoteAddr.sin_addr, pucBuffer );
 800d8e6:	a908      	add	r1, sp, #32
 800d8e8:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800d8ea:	f7f5 fcd1 	bl	8003290 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "vIPerfTask: Received a connection from %s:%u\n",
 800d8ee:	8c6a      	ldrh	r2, [r5, #34]	@ 0x22
 800d8f0:	a908      	add	r1, sp, #32
 800d8f2:	4817      	ldr	r0, [pc, #92]	@ (800d950 <vIPerfTask+0x630>)
 800d8f4:	ba52      	rev16	r2, r2
 800d8f6:	b292      	uxth	r2, r2
 800d8f8:	f7ff fb08 	bl	800cf0c <lUDPLoggingPrintf>
		FreeRTOS_FD_SET( xNexSocket, xSocketSet, eSELECT_READ );
 800d8fc:	4b15      	ldr	r3, [pc, #84]	@ (800d954 <vIPerfTask+0x634>)
 800d8fe:	4620      	mov	r0, r4
 800d900:	2201      	movs	r2, #1
 800d902:	6819      	ldr	r1, [r3, #0]
 800d904:	f7f5 f832 	bl	800296c <FreeRTOS_FD_SET>
	vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800d908:	4a0c      	ldr	r2, [pc, #48]	@ (800d93c <vIPerfTask+0x61c>)
 800d90a:	f105 012c 	add.w	r1, r5, #44	@ 0x2c
 800d90e:	f1a2 0008 	sub.w	r0, r2, #8
 800d912:	f7f8 faa5 	bl	8005e60 <vListInsertGeneric>
 800d916:	e5d4      	b.n	800d4c2 <vIPerfTask+0x1a2>
 800d918:	08011b20 	.word	0x08011b20
 800d91c:	2000120c 	.word	0x2000120c
 800d920:	08011b44 	.word	0x08011b44
 800d924:	08011a74 	.word	0x08011a74
 800d928:	08011af8 	.word	0x08011af8
 800d92c:	20001214 	.word	0x20001214
 800d930:	08011a20 	.word	0x08011a20
 800d934:	20001210 	.word	0x20001210
 800d938:	080119e8 	.word	0x080119e8
 800d93c:	20001200 	.word	0x20001200
 800d940:	20001268 	.word	0x20001268
 800d944:	08011ac0 	.word	0x08011ac0
 800d948:	08011a50 	.word	0x08011a50
 800d94c:	08011acc 	.word	0x08011acc
 800d950:	080119b8 	.word	0x080119b8
 800d954:	200011e8 	.word	0x200011e8
			if( xTaskCheckForTimeOut( &( pxClient->xTimeOut ), &( pxClient->xRemainingTime ) ) != pdFALSE )
 800d958:	f104 0114 	add.w	r1, r4, #20
 800d95c:	f104 0018 	add.w	r0, r4, #24
 800d960:	f7fb feb2 	bl	80096c8 <xTaskCheckForTimeOut>
 800d964:	2800      	cmp	r0, #0
 800d966:	f43f af21 	beq.w	800d7ac <vIPerfTask+0x48c>
				if( pxClient->bits.bTimedOut == pdFALSE_UNSIGNED )
 800d96a:	7923      	ldrb	r3, [r4, #4]
 800d96c:	071a      	lsls	r2, r3, #28
 800d96e:	f53f af0c 	bmi.w	800d78a <vIPerfTask+0x46a>
					FreeRTOS_shutdown( pxClient->xServerSocket, FREERTOS_SHUT_RDWR );
 800d972:	4629      	mov	r1, r5
 800d974:	6820      	ldr	r0, [r4, #0]
 800d976:	f7f5 ff7f 	bl	8003878 <FreeRTOS_shutdown>
					pxClient->bits.bTimedOut = pdTRUE_UNSIGNED;
 800d97a:	7923      	ldrb	r3, [r4, #4]
 800d97c:	f043 0308 	orr.w	r3, r3, #8
 800d980:	7123      	strb	r3, [r4, #4]
	if( ( xRecvResult < 0 ) && ( xRecvResult != -pdFREERTOS_ERRNO_EAGAIN ) )
 800d982:	e702      	b.n	800d78a <vIPerfTask+0x46a>
						FreeRTOS_FD_SET( pxClient->xServerSocket, xSocketSet, eSELECT_WRITE );
 800d984:	4b0d      	ldr	r3, [pc, #52]	@ (800d9bc <vIPerfTask+0x69c>)
 800d986:	2202      	movs	r2, #2
 800d988:	6820      	ldr	r0, [r4, #0]
 800d98a:	6819      	ldr	r1, [r3, #0]
 800d98c:	f7f4 ffee 	bl	800296c <FreeRTOS_FD_SET>
					pxDataClient->bits.bIsControl    = pdFALSE_UNSIGNED;
 800d990:	682b      	ldr	r3, [r5, #0]
 800d992:	e76d      	b.n	800d870 <vIPerfTask+0x550>
				FreeRTOS_FD_CLR( pxClient->xServerSocket, xSocketSet, eSELECT_WRITE );
 800d994:	4b09      	ldr	r3, [pc, #36]	@ (800d9bc <vIPerfTask+0x69c>)
 800d996:	2202      	movs	r2, #2
 800d998:	6820      	ldr	r0, [r4, #0]
			xResult += uxSize;
 800d99a:	44aa      	add	sl, r5
				FreeRTOS_FD_CLR( pxClient->xServerSocket, xSocketSet, eSELECT_WRITE );
 800d99c:	6819      	ldr	r1, [r3, #0]
 800d99e:	f7f5 f809 	bl	80029b4 <FreeRTOS_FD_CLR>
			xResult += uxSize;
 800d9a2:	e722      	b.n	800d7ea <vIPerfTask+0x4ca>
		configASSERT( ( xUDPServerSocket != FREERTOS_INVALID_SOCKET ) && ( xUDPServerSocket != NULL ) );
 800d9a4:	f240 21ea 	movw	r1, #746	@ 0x2ea
 800d9a8:	4805      	ldr	r0, [pc, #20]	@ (800d9c0 <vIPerfTask+0x6a0>)
 800d9aa:	f7f3 f9a5 	bl	8000cf8 <vAssertCalled>
 800d9ae:	e510      	b.n	800d3d2 <vIPerfTask+0xb2>
		configASSERT( ( xTCPServerSocket != FREERTOS_INVALID_SOCKET ) && ( xTCPServerSocket != NULL ) );
 800d9b0:	f240 21bf 	movw	r1, #703	@ 0x2bf
 800d9b4:	4802      	ldr	r0, [pc, #8]	@ (800d9c0 <vIPerfTask+0x6a0>)
 800d9b6:	f7f3 f99f 	bl	8000cf8 <vAssertCalled>
 800d9ba:	e4c8      	b.n	800d34e <vIPerfTask+0x2e>
 800d9bc:	200011e8 	.word	0x200011e8
 800d9c0:	080118c8 	.word	0x080118c8

0800d9c4 <vIPerfInstall>:
{
 800d9c4:	b510      	push	{r4, lr}
	if( pxRawBuffer == NULL )
 800d9c6:	4c11      	ldr	r4, [pc, #68]	@ (800da0c <vIPerfInstall+0x48>)
{
 800d9c8:	b082      	sub	sp, #8
	if( pxRawBuffer == NULL )
 800d9ca:	6823      	ldr	r3, [r4, #0]
 800d9cc:	b123      	cbz	r3, 800d9d8 <vIPerfInstall+0x14>
	if( pxIperfTask == NULL )
 800d9ce:	4810      	ldr	r0, [pc, #64]	@ (800da10 <vIPerfInstall+0x4c>)
 800d9d0:	6803      	ldr	r3, [r0, #0]
 800d9d2:	b183      	cbz	r3, 800d9f6 <vIPerfInstall+0x32>
}
 800d9d4:	b002      	add	sp, #8
 800d9d6:	bd10      	pop	{r4, pc}
		pxRawBuffer = ( struct xRawBuffer * ) pvPortMalloc( sizeof *pxRawBuffer );
 800d9d8:	f648 00e0 	movw	r0, #35040	@ 0x88e0
 800d9dc:	f7fc fae4 	bl	8009fa8 <pvPortMalloc>
 800d9e0:	6020      	str	r0, [r4, #0]
		if( pxRawBuffer == NULL )
 800d9e2:	2800      	cmp	r0, #0
 800d9e4:	d1f3      	bne.n	800d9ce <vIPerfInstall+0xa>
			FreeRTOS_printf( ( "vIPerfInstall: malloc %u bytes failed.\n", (unsigned)sizeof *pxRawBuffer ) ) ;
 800d9e6:	f648 01e0 	movw	r1, #35040	@ 0x88e0
 800d9ea:	480a      	ldr	r0, [pc, #40]	@ (800da14 <vIPerfInstall+0x50>)
}
 800d9ec:	b002      	add	sp, #8
 800d9ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			FreeRTOS_printf( ( "vIPerfInstall: malloc %u bytes failed.\n", (unsigned)sizeof *pxRawBuffer ) ) ;
 800d9f2:	f7ff ba8b 	b.w	800cf0c <lUDPLoggingPrintf>
		xTaskCreate( vIPerfTask, "IPerf", ipconfigIPERF_STACK_SIZE_IPERF_TASK, NULL, ipconfigIPERF_PRIORITY_IPERF_TASK, &pxIperfTask );
 800d9f6:	2406      	movs	r4, #6
 800d9f8:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800d9fc:	4906      	ldr	r1, [pc, #24]	@ (800da18 <vIPerfInstall+0x54>)
 800d9fe:	e9cd 4000 	strd	r4, r0, [sp]
 800da02:	4806      	ldr	r0, [pc, #24]	@ (800da1c <vIPerfInstall+0x58>)
 800da04:	f7fb fa50 	bl	8008ea8 <xTaskCreate>
}
 800da08:	b002      	add	sp, #8
 800da0a:	bd10      	pop	{r4, pc}
 800da0c:	20001268 	.word	0x20001268
 800da10:	200011e4 	.word	0x200011e4
 800da14:	08011c20 	.word	0x08011c20
 800da18:	08011c48 	.word	0x08011c48
 800da1c:	0800d321 	.word	0x0800d321

0800da20 <memcpy>:
	uint32_t uint32;
};

#if( SIMPLE_MEMCPY == 0 )
void *memcpy( void *pvDest, const void *pvSource, size_t ulBytes )
{
 800da20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	pxDestination.u8 = ( uint8_t * ) pvDest;
	pxSource.u8 = ( uint8_t * ) pvSource;
	pxLastSource.u8 = pxSource.u8 + ulBytes;

	ulAlignBits = ( pxDestination.uint32 & 0x03 ) ^ ( pxSource.uint32 & 0x03 );
 800da24:	ea81 0500 	eor.w	r5, r1, r0
	pxLastSource.u8 = pxSource.u8 + ulBytes;
 800da28:	188c      	adds	r4, r1, r2
	pxDestination.u8 = ( uint8_t * ) pvDest;
 800da2a:	4603      	mov	r3, r0
	pxSource.u8 = ( uint8_t * ) pvSource;
 800da2c:	468c      	mov	ip, r1

	if( ( ulAlignBits & 0x01 ) == 0 )
 800da2e:	07ee      	lsls	r6, r5, #31
	pxLastSource.u8 = pxSource.u8 + ulBytes;
 800da30:	46a6      	mov	lr, r4
	if( ( ulAlignBits & 0x01 ) == 0 )
 800da32:	d42c      	bmi.n	800da8e <memcpy+0x6e>
	{
		if( ( ( pxSource.uint32 & 1 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 ) )
 800da34:	428c      	cmp	r4, r1
 800da36:	d902      	bls.n	800da3e <memcpy+0x1e>
 800da38:	07cf      	lsls	r7, r1, #31
 800da3a:	f100 80ae 	bmi.w	800db9a <memcpy+0x17a>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++) ;
		}
		/* 16-bit aligned here */
		if( ( ulAlignBits & 0x02 ) != 0 )
 800da3e:	07ae      	lsls	r6, r5, #30
 800da40:	d559      	bpl.n	800daf6 <memcpy+0xd6>
		{
			uint32_t extra = pxLastSource.uint32 & 0x01ul;

			pxLastSource.uint32 &= ~0x01ul;
 800da42:	f02e 0701 	bic.w	r7, lr, #1

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 800da46:	428f      	cmp	r7, r1
 800da48:	f240 80b6 	bls.w	800dbb8 <memcpy+0x198>
 800da4c:	b1ea      	cbz	r2, 800da8a <memcpy+0x6a>
 800da4e:	4413      	add	r3, r2
 800da50:	e000      	b.n	800da54 <memcpy+0x34>
 800da52:	b1d2      	cbz	r2, 800da8a <memcpy+0x6a>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 800da54:	f831 6b02 	ldrh.w	r6, [r1], #2
 800da58:	1a9d      	subs	r5, r3, r2
					ulBytes -= 2;
 800da5a:	3a02      	subs	r2, #2
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 800da5c:	42b9      	cmp	r1, r7
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 800da5e:	802e      	strh	r6, [r5, #0]
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 800da60:	d3f7      	bcc.n	800da52 <memcpy+0x32>
			iCount -= 8;
		}
	}
	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 800da62:	2a00      	cmp	r2, #0
 800da64:	bf18      	it	ne
 800da66:	4571      	cmpne	r1, lr
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 800da68:	f105 0302 	add.w	r3, r5, #2
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 800da6c:	bf34      	ite	cc
 800da6e:	2501      	movcc	r5, #1
 800da70:	2500      	movcs	r5, #0
 800da72:	b155      	cbz	r5, 800da8a <memcpy+0x6a>
 800da74:	eb01 0e02 	add.w	lr, r1, r2
 800da78:	1a5b      	subs	r3, r3, r1
 800da7a:	e001      	b.n	800da80 <memcpy+0x60>
 800da7c:	428c      	cmp	r4, r1
 800da7e:	d904      	bls.n	800da8a <memcpy+0x6a>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
 800da80:	780a      	ldrb	r2, [r1, #0]
 800da82:	54ca      	strb	r2, [r1, r3]
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 800da84:	3101      	adds	r1, #1
 800da86:	4571      	cmp	r1, lr
 800da88:	d1f8      	bne.n	800da7c <memcpy+0x5c>
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
		}
	}
	#endif
	return pvDest;
}
 800da8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		while( iCount > 8 )
 800da8e:	2a08      	cmp	r2, #8
 800da90:	f340 808b 	ble.w	800dbaa <memcpy+0x18a>
 800da94:	f1a2 0109 	sub.w	r1, r2, #9
 800da98:	f021 0107 	bic.w	r1, r1, #7
 800da9c:	4461      	add	r1, ip
			pxDestination.u8[ 0 ] = pxSource.u8[ 0 ];
 800da9e:	f89c 6000 	ldrb.w	r6, [ip]
 800daa2:	4665      	mov	r5, ip
		while( iCount > 8 )
 800daa4:	f10c 0c08 	add.w	ip, ip, #8
 800daa8:	3308      	adds	r3, #8
			pxDestination.u8[ 0 ] = pxSource.u8[ 0 ];
 800daaa:	f803 6c08 	strb.w	r6, [r3, #-8]
		while( iCount > 8 )
 800daae:	428d      	cmp	r5, r1
			pxDestination.u8[ 1 ] = pxSource.u8[ 1 ];
 800dab0:	f81c 6c07 	ldrb.w	r6, [ip, #-7]
 800dab4:	f803 6c07 	strb.w	r6, [r3, #-7]
			pxDestination.u8[ 2 ] = pxSource.u8[ 2 ];
 800dab8:	f81c 6c06 	ldrb.w	r6, [ip, #-6]
 800dabc:	f803 6c06 	strb.w	r6, [r3, #-6]
			pxDestination.u8[ 3 ] = pxSource.u8[ 3 ];
 800dac0:	f81c 6c05 	ldrb.w	r6, [ip, #-5]
 800dac4:	f803 6c05 	strb.w	r6, [r3, #-5]
			pxDestination.u8[ 4 ] = pxSource.u8[ 4 ];
 800dac8:	f81c 6c04 	ldrb.w	r6, [ip, #-4]
 800dacc:	f803 6c04 	strb.w	r6, [r3, #-4]
			pxDestination.u8[ 5 ] = pxSource.u8[ 5 ];
 800dad0:	f81c 6c03 	ldrb.w	r6, [ip, #-3]
 800dad4:	f803 6c03 	strb.w	r6, [r3, #-3]
			pxDestination.u8[ 6 ] = pxSource.u8[ 6 ];
 800dad8:	f81c 6c02 	ldrb.w	r6, [ip, #-2]
 800dadc:	f803 6c02 	strb.w	r6, [r3, #-2]
			pxDestination.u8[ 7 ] = pxSource.u8[ 7 ];
 800dae0:	f81c 6c01 	ldrb.w	r6, [ip, #-1]
 800dae4:	f803 6c01 	strb.w	r6, [r3, #-1]
		while( iCount > 8 )
 800dae8:	d1d9      	bne.n	800da9e <memcpy+0x7e>
			pxSource.u8 += 8;
 800daea:	3108      	adds	r1, #8
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 800daec:	4571      	cmp	r1, lr
 800daee:	bf2c      	ite	cs
 800daf0:	2500      	movcs	r5, #0
 800daf2:	2501      	movcc	r5, #1
 800daf4:	e7bd      	b.n	800da72 <memcpy+0x52>
			if( ( ( pxSource.uint32 & 2 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 - 1 ) )
 800daf6:	f01c 0f02 	tst.w	ip, #2
 800dafa:	d142      	bne.n	800db82 <memcpy+0x162>
			pxLastSource.uint32 &= ~0x03ul;
 800dafc:	f02e 0703 	bic.w	r7, lr, #3
			iCount = pxLastSource.u32 - pxSource.u32;
 800db00:	1a7e      	subs	r6, r7, r1
			while( iCount > 8 )
 800db02:	2e20      	cmp	r6, #32
			iCount = pxLastSource.u32 - pxSource.u32;
 800db04:	ea4f 05a6 	mov.w	r5, r6, asr #2
			while( iCount > 8 )
 800db08:	dd23      	ble.n	800db52 <memcpy+0x132>
 800db0a:	eba3 060c 	sub.w	r6, r3, ip
				pxDestination.u32[ 0 ] = pxSource.u32[ 0 ];
 800db0e:	f8dc 1000 	ldr.w	r1, [ip]
 800db12:	eb06 030c 	add.w	r3, r6, ip
				iCount -= 8;
 800db16:	3d08      	subs	r5, #8
				pxDestination.u32[ 0 ] = pxSource.u32[ 0 ];
 800db18:	f846 100c 	str.w	r1, [r6, ip]
			while( iCount > 8 )
 800db1c:	f10c 0c20 	add.w	ip, ip, #32
				pxDestination.u32[ 1 ] = pxSource.u32[ 1 ];
 800db20:	f85c 1c1c 	ldr.w	r1, [ip, #-28]
			while( iCount > 8 )
 800db24:	2d08      	cmp	r5, #8
				pxDestination.u32[ 1 ] = pxSource.u32[ 1 ];
 800db26:	6059      	str	r1, [r3, #4]
				pxDestination.u32[ 2 ] = pxSource.u32[ 2 ];
 800db28:	f85c 1c18 	ldr.w	r1, [ip, #-24]
 800db2c:	6099      	str	r1, [r3, #8]
				pxDestination.u32[ 3 ] = pxSource.u32[ 3 ];
 800db2e:	f85c 1c14 	ldr.w	r1, [ip, #-20]
 800db32:	60d9      	str	r1, [r3, #12]
				pxDestination.u32[ 4 ] = pxSource.u32[ 4 ];
 800db34:	f85c 1c10 	ldr.w	r1, [ip, #-16]
 800db38:	6119      	str	r1, [r3, #16]
				pxDestination.u32[ 5 ] = pxSource.u32[ 5 ];
 800db3a:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
 800db3e:	6159      	str	r1, [r3, #20]
				pxDestination.u32[ 6 ] = pxSource.u32[ 6 ];
 800db40:	f85c 1c08 	ldr.w	r1, [ip, #-8]
 800db44:	6199      	str	r1, [r3, #24]
				pxDestination.u32[ 7 ] = pxSource.u32[ 7 ];
 800db46:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 800db4a:	61d9      	str	r1, [r3, #28]
			while( iCount > 8 )
 800db4c:	dcdf      	bgt.n	800db0e <memcpy+0xee>
				pxDestination.u32 += 8;
 800db4e:	3320      	adds	r3, #32
				pxSource.u32 += 8;
 800db50:	4661      	mov	r1, ip
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 800db52:	428f      	cmp	r7, r1
 800db54:	d930      	bls.n	800dbb8 <memcpy+0x198>
 800db56:	2a00      	cmp	r2, #0
 800db58:	d097      	beq.n	800da8a <memcpy+0x6a>
 800db5a:	4413      	add	r3, r2
 800db5c:	e001      	b.n	800db62 <memcpy+0x142>
 800db5e:	2a00      	cmp	r2, #0
 800db60:	d093      	beq.n	800da8a <memcpy+0x6a>
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
 800db62:	f851 6b04 	ldr.w	r6, [r1], #4
 800db66:	1a9d      	subs	r5, r3, r2
					ulBytes -= 4;
 800db68:	3a04      	subs	r2, #4
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 800db6a:	428f      	cmp	r7, r1
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
 800db6c:	602e      	str	r6, [r5, #0]
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 800db6e:	d8f6      	bhi.n	800db5e <memcpy+0x13e>
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 800db70:	2a00      	cmp	r2, #0
 800db72:	bf18      	it	ne
 800db74:	4571      	cmpne	r1, lr
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
 800db76:	f105 0304 	add.w	r3, r5, #4
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 800db7a:	bf34      	ite	cc
 800db7c:	2501      	movcc	r5, #1
 800db7e:	2500      	movcs	r5, #0
 800db80:	e777      	b.n	800da72 <memcpy+0x52>
			if( ( ( pxSource.uint32 & 2 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 - 1 ) )
 800db82:	f10e 35ff 	add.w	r5, lr, #4294967295
 800db86:	42a9      	cmp	r1, r5
 800db88:	d2b8      	bcs.n	800dafc <memcpy+0xdc>
				*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 800db8a:	468c      	mov	ip, r1
 800db8c:	3302      	adds	r3, #2
 800db8e:	f83c 5b02 	ldrh.w	r5, [ip], #2
 800db92:	f823 5c02 	strh.w	r5, [r3, #-2]
 800db96:	4661      	mov	r1, ip
 800db98:	e7b0      	b.n	800dafc <memcpy+0xdc>
			*( pxDestination.u8++ ) = *( pxSource.u8++) ;
 800db9a:	f81c 1b01 	ldrb.w	r1, [ip], #1
		if( ( ulAlignBits & 0x02 ) != 0 )
 800db9e:	07ae      	lsls	r6, r5, #30
			*( pxDestination.u8++ ) = *( pxSource.u8++) ;
 800dba0:	f803 1b01 	strb.w	r1, [r3], #1
 800dba4:	4661      	mov	r1, ip
		if( ( ulAlignBits & 0x02 ) != 0 )
 800dba6:	d5a6      	bpl.n	800daf6 <memcpy+0xd6>
 800dba8:	e74b      	b.n	800da42 <memcpy+0x22>
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 800dbaa:	2a00      	cmp	r2, #0
 800dbac:	bf18      	it	ne
 800dbae:	428c      	cmpne	r4, r1
 800dbb0:	bf8c      	ite	hi
 800dbb2:	2501      	movhi	r5, #1
 800dbb4:	2500      	movls	r5, #0
 800dbb6:	e75c      	b.n	800da72 <memcpy+0x52>
 800dbb8:	2a00      	cmp	r2, #0
 800dbba:	bf18      	it	ne
 800dbbc:	4571      	cmpne	r1, lr
 800dbbe:	bf34      	ite	cc
 800dbc0:	2501      	movcc	r5, #1
 800dbc2:	2500      	movcs	r5, #0
 800dbc4:	e755      	b.n	800da72 <memcpy+0x52>
 800dbc6:	bf00      	nop

0800dbc8 <memset>:
uint32_t ulPattern;

	pxDestination.u8 = ( uint8_t * ) pvDest;
	pxLast.u8 = pxDestination.u8 + ulBytes;

	if( ulBytes >= 8 )
 800dbc8:	2a07      	cmp	r2, #7
{
 800dbca:	b5f0      	push	{r4, r5, r6, r7, lr}
	pxLast.u8 = pxDestination.u8 + ulBytes;
 800dbcc:	eb00 0602 	add.w	r6, r0, r2
	if( ulBytes >= 8 )
 800dbd0:	d93b      	bls.n	800dc4a <memset+0x82>
	{
	uint32_t ulAlignBits;
	uint32_t ulExtra;
	int iCount;

		ulPattern = iValue & 0xff;
 800dbd2:	b2cb      	uxtb	r3, r1
		ulPattern |= ( ulPattern << 8 ) | ( ulPattern << 16 ) | ( ulPattern << 24 );
		ulAlignBits = ( pxDestination.uint32 & 0x03 );
		if( ulAlignBits != 0 )
 800dbd4:	f010 0703 	ands.w	r7, r0, #3
	pxDestination.u8 = ( uint8_t * ) pvDest;
 800dbd8:	4684      	mov	ip, r0
		ulPattern |= ( ulPattern << 8 ) | ( ulPattern << 16 ) | ( ulPattern << 24 );
 800dbda:	eb03 2403 	add.w	r4, r3, r3, lsl #8
 800dbde:	eb04 4404 	add.w	r4, r4, r4, lsl #16
		if( ulAlignBits != 0 )
 800dbe2:	d13a      	bne.n	800dc5a <memset+0x92>
 800dbe4:	4603      	mov	r3, r0
		}
		/* Strip-off the last 1 up-to 3 bytes because they can not be set in a 32-bit
		memory instruction. */
		ulExtra = pxLast.uint32 & 0x03ul;

		pxLast.uint32 &= ~0x03ul;
 800dbe6:	f026 0503 	bic.w	r5, r6, #3
		iCount = ( int ) ( pxLast.u32 - pxDestination.u32 );
 800dbea:	1aef      	subs	r7, r5, r3
		while( iCount > 8 )
 800dbec:	2f20      	cmp	r7, #32
		iCount = ( int ) ( pxLast.u32 - pxDestination.u32 );
 800dbee:	ea4f 0ea7 	mov.w	lr, r7, asr #2
		while( iCount > 8 )
 800dbf2:	dd0f      	ble.n	800dc14 <memset+0x4c>
			pxDestination.u32[ 4 ] = ulPattern;
			pxDestination.u32[ 5 ] = ulPattern;
			pxDestination.u32[ 6 ] = ulPattern;
			pxDestination.u32[ 7 ] = ulPattern;
			pxDestination.u32 += 8;
			iCount -= 8;
 800dbf4:	f1ae 0e08 	sub.w	lr, lr, #8
		while( iCount > 8 )
 800dbf8:	f1be 0f08 	cmp.w	lr, #8
			pxDestination.u32[ 0 ] = ulPattern;
 800dbfc:	e9cc 4400 	strd	r4, r4, [ip]
 800dc00:	e9cc 4402 	strd	r4, r4, [ip, #8]
 800dc04:	e9cc 4404 	strd	r4, r4, [ip, #16]
 800dc08:	e9cc 4406 	strd	r4, r4, [ip, #24]
		while( iCount > 8 )
 800dc0c:	f10c 0c20 	add.w	ip, ip, #32
 800dc10:	dcf0      	bgt.n	800dbf4 <memset+0x2c>
			pxDestination.u32 += 8;
 800dc12:	4663      	mov	r3, ip
		}

		#if( MEMCPY_USES_LOOP_COUNTER != 0 )
		{
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 800dc14:	429d      	cmp	r5, r3
 800dc16:	d801      	bhi.n	800dc1c <memset+0x54>
 800dc18:	e027      	b.n	800dc6a <memset+0xa2>
 800dc1a:	b1aa      	cbz	r2, 800dc48 <memset+0x80>
			{
				pxDestination.u32[0] = ulPattern;
 800dc1c:	f843 4b04 	str.w	r4, [r3], #4
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 800dc20:	429d      	cmp	r5, r3
				pxDestination.u32++;
				ulBytes += 4;
 800dc22:	f102 0204 	add.w	r2, r2, #4
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 800dc26:	d8f8      	bhi.n	800dc1a <memset+0x52>
		pxLast.uint32 |= ulExtra;
	}

	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 800dc28:	2a00      	cmp	r2, #0
 800dc2a:	bf18      	it	ne
 800dc2c:	429e      	cmpne	r6, r3
 800dc2e:	bf8c      	ite	hi
 800dc30:	2401      	movhi	r4, #1
 800dc32:	2400      	movls	r4, #0
 800dc34:	b144      	cbz	r4, 800dc48 <memset+0x80>
				pxDestination.u8[ 0 ] = ( uint8_t )iValue;
 800dc36:	b2c9      	uxtb	r1, r1
 800dc38:	1ad2      	subs	r2, r2, r3
 800dc3a:	e001      	b.n	800dc40 <memset+0x78>
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 800dc3c:	429e      	cmp	r6, r3
 800dc3e:	d903      	bls.n	800dc48 <memset+0x80>
		{
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
 800dc40:	f803 1b01 	strb.w	r1, [r3], #1
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 800dc44:	42d3      	cmn	r3, r2
 800dc46:	d1f9      	bne.n	800dc3c <memset+0x74>
			pxDestination.u8++;
		}
	}
	#endif
	return pvDest;
}
 800dc48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 800dc4a:	2a00      	cmp	r2, #0
 800dc4c:	bf18      	it	ne
 800dc4e:	4286      	cmpne	r6, r0
 800dc50:	4603      	mov	r3, r0
 800dc52:	bf8c      	ite	hi
 800dc54:	2401      	movhi	r4, #1
 800dc56:	2400      	movls	r4, #0
 800dc58:	e7ec      	b.n	800dc34 <memset+0x6c>
			while( ulAlignBits-- > 0 )
 800dc5a:	1d05      	adds	r5, r0, #4
 800dc5c:	1bed      	subs	r5, r5, r7
				pxDestination.u8[ 0 ] = ( uint8_t )iValue;
 800dc5e:	f80c 3b01 	strb.w	r3, [ip], #1
			while( ulAlignBits-- > 0 )
 800dc62:	4565      	cmp	r5, ip
 800dc64:	d1fb      	bne.n	800dc5e <memset+0x96>
				pxDestination.u8++;
 800dc66:	4663      	mov	r3, ip
 800dc68:	e7bd      	b.n	800dbe6 <memset+0x1e>
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 800dc6a:	429e      	cmp	r6, r3
 800dc6c:	bf94      	ite	ls
 800dc6e:	2400      	movls	r4, #0
 800dc70:	2401      	movhi	r4, #1
 800dc72:	e7df      	b.n	800dc34 <memset+0x6c>

0800dc74 <xApplicationMemoryPermissions>:
__attribute__((weak)) BaseType_t xApplicationMemoryPermissions( uint32_t aAddress )
{
	( void ) aAddress;
	/* Return 1 for readable, 2 for writeable, 3 for both. */
	return 0x03;
}
 800dc74:	2003      	movs	r0, #3
 800dc76:	4770      	bx	lr

0800dc78 <vOutputChar>:
__attribute__((weak)) void vOutputChar( const char cChar, const TickType_t xTicksToWait  )
{
	( void ) cChar;
	( void ) xTicksToWait;
	/* Do nothing. */
}
 800dc78:	4770      	bx	lr
 800dc7a:	bf00      	nop

0800dc7c <strbuf_printchar>:
	memset( &apStr->flags, '\0', sizeof apStr->flags );
}
/*-----------------------------------------------------------*/

static BaseType_t strbuf_printchar( struct SStringBuf *apStr, int c )
{
 800dc7c:	b510      	push	{r4, lr}
 800dc7e:	4604      	mov	r4, r0
 800dc80:	4608      	mov	r0, r1
	if( apStr->str == NULL )
 800dc82:	6823      	ldr	r3, [r4, #0]
 800dc84:	b19b      	cbz	r3, 800dcae <strbuf_printchar+0x32>
	{
		vOutputChar( ( char ) c, xTicksToWait );
		apStr->curLen++;
		return pdTRUE;
	}
	if( apStr->str < apStr->nulPos )
 800dc86:	68a2      	ldr	r2, [r4, #8]
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d302      	bcc.n	800dc92 <strbuf_printchar+0x16>
	{
		*( apStr->str++ ) = c;
		apStr->curLen++;
		return pdTRUE;
	}
	if( apStr->str == apStr->nulPos )
 800dc8c:	d009      	beq.n	800dca2 <strbuf_printchar+0x26>
	{
		*( apStr->str++ ) = '\0';
	}
	return pdFALSE;
 800dc8e:	2000      	movs	r0, #0
}
 800dc90:	bd10      	pop	{r4, pc}
		*( apStr->str++ ) = c;
 800dc92:	1c5a      	adds	r2, r3, #1
 800dc94:	6022      	str	r2, [r4, #0]
 800dc96:	7019      	strb	r1, [r3, #0]
		apStr->curLen++;
 800dc98:	68e3      	ldr	r3, [r4, #12]
 800dc9a:	3301      	adds	r3, #1
		return pdTRUE;
 800dc9c:	2001      	movs	r0, #1
		apStr->curLen++;
 800dc9e:	60e3      	str	r3, [r4, #12]
}
 800dca0:	bd10      	pop	{r4, pc}
		*( apStr->str++ ) = '\0';
 800dca2:	1c59      	adds	r1, r3, #1
 800dca4:	2200      	movs	r2, #0
	return pdFALSE;
 800dca6:	2000      	movs	r0, #0
		*( apStr->str++ ) = '\0';
 800dca8:	6021      	str	r1, [r4, #0]
 800dcaa:	701a      	strb	r2, [r3, #0]
 800dcac:	e7f0      	b.n	800dc90 <strbuf_printchar+0x14>
		vOutputChar( ( char ) c, xTicksToWait );
 800dcae:	2114      	movs	r1, #20
 800dcb0:	b2c0      	uxtb	r0, r0
 800dcb2:	f7ff ffe1 	bl	800dc78 <vOutputChar>
		apStr->curLen++;
 800dcb6:	68e3      	ldr	r3, [r4, #12]
 800dcb8:	3301      	adds	r3, #1
		return pdTRUE;
 800dcba:	e7ef      	b.n	800dc9c <strbuf_printchar+0x20>

0800dcbc <prints>:
	return iResult;
}
/*-----------------------------------------------------------*/

static BaseType_t prints(struct SStringBuf *apBuf, const char *apString )
{
 800dcbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcc0:	4604      	mov	r4, r0
	register int padchar = ' ';
	int i,len;

	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 800dcc2:	4608      	mov	r0, r1
{
 800dcc4:	460e      	mov	r6, r1
	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 800dcc6:	f7ff ffd5 	bl	800dc74 <xApplicationMemoryPermissions>
		/* The user has probably made a mistake with the parameter
		for '%s', the memory is not readbale. */
		apString = "INV_MEM";
	}

	if( apBuf->flags.width > 0 )
 800dcca:	6967      	ldr	r7, [r4, #20]
		else
		{
			apBuf->flags.width -= count;
		}

		if( apBuf->flags.pad & PAD_ZERO )
 800dccc:	f894 801c 	ldrb.w	r8, [r4, #28]
	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 800dcd0:	b320      	cbz	r0, 800dd1c <prints+0x60>
	if( apBuf->flags.width > 0 )
 800dcd2:	2f00      	cmp	r7, #0
 800dcd4:	dd25      	ble.n	800dd22 <prints+0x66>
		for( ptr = apString; *ptr; ++ptr )
 800dcd6:	7833      	ldrb	r3, [r6, #0]
 800dcd8:	b13b      	cbz	r3, 800dcea <prints+0x2e>
 800dcda:	1c70      	adds	r0, r6, #1
 800dcdc:	f7f2 fb0a 	bl	80002f4 <strlen>
 800dce0:	3001      	adds	r0, #1
		if( count >= apBuf->flags.width )
 800dce2:	4287      	cmp	r7, r0
			apBuf->flags.width -= count;
 800dce4:	bfcc      	ite	gt
 800dce6:	1a3f      	subgt	r7, r7, r0
			apBuf->flags.width = 0;
 800dce8:	2700      	movle	r7, #0
		{
			padchar = '0';
 800dcea:	f018 0f02 	tst.w	r8, #2
 800dcee:	6167      	str	r7, [r4, #20]
 800dcf0:	bf0c      	ite	eq
 800dcf2:	2520      	moveq	r5, #32
 800dcf4:	2530      	movne	r5, #48	@ 0x30
		}
	}
	if( ( apBuf->flags.pad & PAD_RIGHT ) == 0 )
 800dcf6:	f018 0f01 	tst.w	r8, #1
 800dcfa:	d113      	bne.n	800dd24 <prints+0x68>
	{
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 800dcfc:	b92f      	cbnz	r7, 800dd0a <prints+0x4e>
 800dcfe:	e011      	b.n	800dd24 <prints+0x68>
 800dd00:	6963      	ldr	r3, [r4, #20]
 800dd02:	3b01      	subs	r3, #1
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	6163      	str	r3, [r4, #20]
 800dd08:	dd0c      	ble.n	800dd24 <prints+0x68>
		{
			if( strbuf_printchar( apBuf, padchar ) == 0 )
 800dd0a:	4629      	mov	r1, r5
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	f7ff ffb5 	bl	800dc7c <strbuf_printchar>
 800dd12:	2800      	cmp	r0, #0
 800dd14:	d1f4      	bne.n	800dd00 <prints+0x44>
			{
				return pdFALSE;
 800dd16:	2000      	movs	r0, #0
			return pdFALSE;
		}
	}

	return pdTRUE;
}
 800dd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if( apBuf->flags.width > 0 )
 800dd1c:	2f00      	cmp	r7, #0
		apString = "INV_MEM";
 800dd1e:	4e1f      	ldr	r6, [pc, #124]	@ (800dd9c <prints+0xe0>)
	if( apBuf->flags.width > 0 )
 800dd20:	dcdb      	bgt.n	800dcda <prints+0x1e>
	register int padchar = ' ';
 800dd22:	2520      	movs	r5, #32
	if( ( apBuf->flags.isNumber == pdTRUE ) && ( apBuf->flags.pad == pdTRUE ) )
 800dd24:	69e2      	ldr	r2, [r4, #28]
 800dd26:	4b1e      	ldr	r3, [pc, #120]	@ (800dda0 <prints+0xe4>)
		if( len < apBuf->flags.printLimit )
 800dd28:	69a7      	ldr	r7, [r4, #24]
	if( ( apBuf->flags.isNumber == pdTRUE ) && ( apBuf->flags.pad == pdTRUE ) )
 800dd2a:	4013      	ands	r3, r2
 800dd2c:	4a1d      	ldr	r2, [pc, #116]	@ (800dda4 <prints+0xe8>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d01f      	beq.n	800dd72 <prints+0xb6>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 800dd32:	b177      	cbz	r7, 800dd52 <prints+0x96>
 800dd34:	3e01      	subs	r6, #1
 800dd36:	e007      	b.n	800dd48 <prints+0x8c>
		if( !strbuf_printchar( apBuf, *apString ) )
 800dd38:	f7ff ffa0 	bl	800dc7c <strbuf_printchar>
 800dd3c:	2800      	cmp	r0, #0
 800dd3e:	d0ea      	beq.n	800dd16 <prints+0x5a>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 800dd40:	69a3      	ldr	r3, [r4, #24]
 800dd42:	3b01      	subs	r3, #1
 800dd44:	61a3      	str	r3, [r4, #24]
 800dd46:	b123      	cbz	r3, 800dd52 <prints+0x96>
 800dd48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		if( !strbuf_printchar( apBuf, *apString ) )
 800dd4c:	4620      	mov	r0, r4
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 800dd4e:	2900      	cmp	r1, #0
 800dd50:	d1f2      	bne.n	800dd38 <prints+0x7c>
	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 800dd52:	6963      	ldr	r3, [r4, #20]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	dc05      	bgt.n	800dd64 <prints+0xa8>
 800dd58:	e01b      	b.n	800dd92 <prints+0xd6>
 800dd5a:	6963      	ldr	r3, [r4, #20]
 800dd5c:	3b01      	subs	r3, #1
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	6163      	str	r3, [r4, #20]
 800dd62:	dd16      	ble.n	800dd92 <prints+0xd6>
		if( !strbuf_printchar( apBuf, padchar ) )
 800dd64:	4629      	mov	r1, r5
 800dd66:	4620      	mov	r0, r4
 800dd68:	f7ff ff88 	bl	800dc7c <strbuf_printchar>
 800dd6c:	2800      	cmp	r0, #0
 800dd6e:	d1f4      	bne.n	800dd5a <prints+0x9e>
 800dd70:	e7d1      	b.n	800dd16 <prints+0x5a>
		len = strlen( apString );
 800dd72:	4630      	mov	r0, r6
 800dd74:	f7f2 fabe 	bl	80002f4 <strlen>
		if( len < apBuf->flags.printLimit )
 800dd78:	4287      	cmp	r7, r0
 800dd7a:	ddda      	ble.n	800dd32 <prints+0x76>
			i = apBuf->flags.printLimit - len;
 800dd7c:	1a3f      	subs	r7, r7, r0
			for( ; i; i-- )
 800dd7e:	e001      	b.n	800dd84 <prints+0xc8>
 800dd80:	3f01      	subs	r7, #1
 800dd82:	d009      	beq.n	800dd98 <prints+0xdc>
				if( strbuf_printchar( apBuf, '0' )  == 0 )
 800dd84:	2130      	movs	r1, #48	@ 0x30
 800dd86:	4620      	mov	r0, r4
 800dd88:	f7ff ff78 	bl	800dc7c <strbuf_printchar>
 800dd8c:	2800      	cmp	r0, #0
 800dd8e:	d1f7      	bne.n	800dd80 <prints+0xc4>
 800dd90:	e7c1      	b.n	800dd16 <prints+0x5a>
	return pdTRUE;
 800dd92:	2001      	movs	r0, #1
}
 800dd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 800dd98:	69a7      	ldr	r7, [r4, #24]
 800dd9a:	e7ca      	b.n	800dd32 <prints+0x76>
 800dd9c:	08011c50 	.word	0x08011c50
 800dda0:	000200ff 	.word	0x000200ff
 800dda4:	00020001 	.word	0x00020001

0800dda8 <printi>:
}
#endif	/* SPRINTF_LONG_LONG */
/*-----------------------------------------------------------*/

static BaseType_t printi( struct SStringBuf *apBuf, int i )
{
 800dda8:	b5f0      	push	{r4, r5, r6, r7, lr}
	register char *s;
	register int t, neg = 0;
	register unsigned int u = i;
	register unsigned base = apBuf->flags.base;

	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 800ddaa:	7f82      	ldrb	r2, [r0, #30]
{
 800ddac:	b085      	sub	sp, #20
	register unsigned base = apBuf->flags.base;
 800ddae:	6905      	ldr	r5, [r0, #16]
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 800ddb0:	f042 0202 	orr.w	r2, r2, #2
 800ddb4:	7782      	strb	r2, [r0, #30]

	if( i == 0 )
 800ddb6:	2900      	cmp	r1, #0
 800ddb8:	d048      	beq.n	800de4c <printi+0xa4>
		print_buf[ 0 ] = '0';
		print_buf[ 1 ] = '\0';
		return prints( apBuf, print_buf );
	}

	if( ( apBuf->flags.isSigned == pdTRUE ) && ( base == 10 ) && ( i < 0 ) )
 800ddba:	7f82      	ldrb	r2, [r0, #30]
 800ddbc:	4604      	mov	r4, r0
 800ddbe:	460b      	mov	r3, r1
 800ddc0:	07d2      	lsls	r2, r2, #31
 800ddc2:	d523      	bpl.n	800de0c <printi+0x64>
 800ddc4:	2d0a      	cmp	r5, #10
 800ddc6:	d121      	bne.n	800de0c <printi+0x64>
 800ddc8:	2900      	cmp	r1, #0
 800ddca:	da1f      	bge.n	800de0c <printi+0x64>
		u = -i;
	}

	s = print_buf + sizeof print_buf - 1;

	*s = '\0';
 800ddcc:	2200      	movs	r2, #0
		u = -i;
 800ddce:	424b      	negs	r3, r1
		neg = 1;
 800ddd0:	2701      	movs	r7, #1
	*s = '\0';
 800ddd2:	f88d 200f 	strb.w	r2, [sp, #15]
	s = print_buf + sizeof print_buf - 1;
 800ddd6:	f10d 060f 	add.w	r6, sp, #15
	case 10:
		/* GCC compiles very efficient */
		while( u )
		{
			t = u % base;
			*( --s ) = t + '0';
 800ddda:	4618      	mov	r0, r3
 800dddc:	4631      	mov	r1, r6
			t = u % base;
 800ddde:	fbb3 fcf5 	udiv	ip, r3, r5
 800dde2:	fb05 321c 	mls	r2, r5, ip, r3
		while( u )
 800dde6:	4285      	cmp	r5, r0
			u /= base;
 800dde8:	4663      	mov	r3, ip
			*( --s ) = t + '0';
 800ddea:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800ddee:	f806 2d01 	strb.w	r2, [r6, #-1]!
		while( u )
 800ddf2:	d9f2      	bls.n	800ddda <printi+0x32>
		}
		break;
*/
	}

	if( neg != 0 )
 800ddf4:	2f00      	cmp	r7, #0
 800ddf6:	d03c      	beq.n	800de72 <printi+0xca>
	{
		if( apBuf->flags.width && (apBuf->flags.pad & PAD_ZERO ) )
 800ddf8:	6963      	ldr	r3, [r4, #20]
 800ddfa:	b113      	cbz	r3, 800de02 <printi+0x5a>
 800ddfc:	7f23      	ldrb	r3, [r4, #28]
 800ddfe:	079b      	lsls	r3, r3, #30
 800de00:	d42e      	bmi.n	800de60 <printi+0xb8>
			}
			--apBuf->flags.width;
		}
		else
		{
			*( --s ) = '-';
 800de02:	232d      	movs	r3, #45	@ 0x2d
 800de04:	3902      	subs	r1, #2
 800de06:	f806 3c01 	strb.w	r3, [r6, #-1]
 800de0a:	e00b      	b.n	800de24 <printi+0x7c>
	*s = '\0';
 800de0c:	2200      	movs	r2, #0
	switch( base )
 800de0e:	2d10      	cmp	r5, #16
	*s = '\0';
 800de10:	f88d 200f 	strb.w	r2, [sp, #15]
	switch( base )
 800de14:	d00b      	beq.n	800de2e <printi+0x86>
 800de16:	dc03      	bgt.n	800de20 <printi+0x78>
 800de18:	f025 0102 	bic.w	r1, r5, #2
 800de1c:	2908      	cmp	r1, #8
 800de1e:	d01d      	beq.n	800de5c <printi+0xb4>
 800de20:	f10d 010f 	add.w	r1, sp, #15
		}
	}

	return prints( apBuf, s );
 800de24:	4620      	mov	r0, r4
 800de26:	f7ff ff49 	bl	800dcbc <prints>
}
 800de2a:	b005      	add	sp, #20
 800de2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch( base )
 800de2e:	f10d 010f 	add.w	r1, sp, #15
				t += apBuf->flags.letBase - '0' - 10;
 800de32:	f003 020f 	and.w	r2, r3, #15
			if( t >= 10 )
 800de36:	2a09      	cmp	r2, #9
 800de38:	d902      	bls.n	800de40 <printi+0x98>
				t += apBuf->flags.letBase - '0' - 10;
 800de3a:	7f60      	ldrb	r0, [r4, #29]
 800de3c:	383a      	subs	r0, #58	@ 0x3a
 800de3e:	4402      	add	r2, r0
			*( --s ) = t + '0';
 800de40:	3230      	adds	r2, #48	@ 0x30
		while( u != 0 )
 800de42:	091b      	lsrs	r3, r3, #4
			*( --s ) = t + '0';
 800de44:	f801 2d01 	strb.w	r2, [r1, #-1]!
		while( u != 0 )
 800de48:	d1f3      	bne.n	800de32 <printi+0x8a>
 800de4a:	e7eb      	b.n	800de24 <printi+0x7c>
		print_buf[ 0 ] = '0';
 800de4c:	2330      	movs	r3, #48	@ 0x30
		return prints( apBuf, print_buf );
 800de4e:	a901      	add	r1, sp, #4
		print_buf[ 0 ] = '0';
 800de50:	f8ad 3004 	strh.w	r3, [sp, #4]
		return prints( apBuf, print_buf );
 800de54:	f7ff ff32 	bl	800dcbc <prints>
}
 800de58:	b005      	add	sp, #20
 800de5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch( base )
 800de5c:	4617      	mov	r7, r2
 800de5e:	e7ba      	b.n	800ddd6 <printi+0x2e>
			if( strbuf_printchar( apBuf, '-' ) == 0 )
 800de60:	212d      	movs	r1, #45	@ 0x2d
 800de62:	4620      	mov	r0, r4
 800de64:	f7ff ff0a 	bl	800dc7c <strbuf_printchar>
 800de68:	2800      	cmp	r0, #0
 800de6a:	d0de      	beq.n	800de2a <printi+0x82>
			--apBuf->flags.width;
 800de6c:	6963      	ldr	r3, [r4, #20]
 800de6e:	3b01      	subs	r3, #1
 800de70:	6163      	str	r3, [r4, #20]
			*( --s ) = t + '0';
 800de72:	4631      	mov	r1, r6
 800de74:	e7d6      	b.n	800de24 <printi+0x7c>
 800de76:	bf00      	nop

0800de78 <sprintf>:
	return strBuf.curLen;
}
/*-----------------------------------------------------------*/

int sprintf( char *apBuf, const char *apFmt, ... )
{
 800de78:	b40e      	push	{r1, r2, r3}
 800de7a:	b500      	push	{lr}
 800de7c:	b08a      	sub	sp, #40	@ 0x28
	apStr->curLen = 0;
 800de7e:	2300      	movs	r3, #0
{
 800de80:	aa0b      	add	r2, sp, #44	@ 0x2c
	apStr->str = apBuf;
 800de82:	9003      	str	r0, [sp, #12]
	memset( &apStr->flags, '\0', sizeof apStr->flags );
 800de84:	9309      	str	r3, [sp, #36]	@ 0x24
{
 800de86:	f852 1b04 	ldr.w	r1, [r2], #4
	apStr->str = apBuf;
 800de8a:	e9cd 2001 	strd	r2, r0, [sp, #4]
	apStr->nulPos = apMaxStr-1;
 800de8e:	f200 30ff 	addw	r0, r0, #1023	@ 0x3ff
 800de92:	9004      	str	r0, [sp, #16]
	va_list args;

	va_start( args,  apFmt );
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char * )apBuf + 1024 );
	tiny_print( &strBuf, apFmt, args );
 800de94:	a802      	add	r0, sp, #8
	memset( &apStr->flags, '\0', sizeof apStr->flags );
 800de96:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800de9a:	e9cd 3307 	strd	r3, r3, [sp, #28]
	tiny_print( &strBuf, apFmt, args );
 800de9e:	f000 f807 	bl	800deb0 <tiny_print>
	va_end( args );

	return strBuf.curLen;
}
 800dea2:	9805      	ldr	r0, [sp, #20]
 800dea4:	b00a      	add	sp, #40	@ 0x28
 800dea6:	f85d eb04 	ldr.w	lr, [sp], #4
 800deaa:	b003      	add	sp, #12
 800deac:	4770      	bx	lr
 800deae:	bf00      	nop

0800deb0 <tiny_print>:
{
 800deb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800deb4:	4604      	mov	r4, r0
 800deb6:	b086      	sub	sp, #24
 800deb8:	460d      	mov	r5, r1
 800deba:	4617      	mov	r7, r2
		int ch = *( format++ );
 800debc:	462e      	mov	r6, r5
 800debe:	f816 5b01 	ldrb.w	r5, [r6], #1
		if( ch != '%' )
 800dec2:	2d25      	cmp	r5, #37	@ 0x25
 800dec4:	d11a      	bne.n	800defc <tiny_print+0x4c>
		ch = *( format++ );
 800dec6:	4635      	mov	r5, r6
 800dec8:	f815 1b01 	ldrb.w	r1, [r5], #1
		if( ch == '\0' )
 800decc:	2900      	cmp	r1, #0
 800dece:	d07b      	beq.n	800dfc8 <tiny_print+0x118>
		if( ch == '%' )
 800ded0:	2925      	cmp	r1, #37	@ 0x25
 800ded2:	d129      	bne.n	800df28 <tiny_print+0x78>
			if( strbuf_printchar( apBuf, ch ) == 0 )
 800ded4:	4620      	mov	r0, r4
 800ded6:	f7ff fed1 	bl	800dc7c <strbuf_printchar>
 800deda:	2800      	cmp	r0, #0
 800dedc:	d1ee      	bne.n	800debc <tiny_print+0xc>
}
 800dede:	b006      	add	sp, #24
 800dee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		vOutputChar( ( char ) c, xTicksToWait );
 800dee4:	2114      	movs	r1, #20
 800dee6:	4628      	mov	r0, r5
 800dee8:	f7ff fec6 	bl	800dc78 <vOutputChar>
		if( c == 0 )
 800deec:	b18d      	cbz	r5, 800df12 <tiny_print+0x62>
		apStr->curLen++;
 800deee:	68e3      	ldr	r3, [r4, #12]
 800def0:	3301      	adds	r3, #1
 800def2:	60e3      	str	r3, [r4, #12]
				ch = *( format++ );
 800def4:	f816 5b01 	ldrb.w	r5, [r6], #1
			} while( ch != '%' );
 800def8:	2d25      	cmp	r5, #37	@ 0x25
 800defa:	d0e4      	beq.n	800dec6 <tiny_print+0x16>
	if( apStr->str == NULL )
 800defc:	6823      	ldr	r3, [r4, #0]
		*(apStr->str++) = c;
 800defe:	1c59      	adds	r1, r3, #1
	if( apStr->str == NULL )
 800df00:	2b00      	cmp	r3, #0
 800df02:	d0ef      	beq.n	800dee4 <tiny_print+0x34>
	if( apStr->str < apStr->nulPos )
 800df04:	68a2      	ldr	r2, [r4, #8]
 800df06:	4293      	cmp	r3, r2
 800df08:	d206      	bcs.n	800df18 <tiny_print+0x68>
		*(apStr->str++) = c;
 800df0a:	6021      	str	r1, [r4, #0]
 800df0c:	701d      	strb	r5, [r3, #0]
		if( c == 0 )
 800df0e:	2d00      	cmp	r5, #0
 800df10:	d1ed      	bne.n	800deee <tiny_print+0x3e>
}
 800df12:	b006      	add	sp, #24
 800df14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if( apStr->str == apStr->nulPos )
 800df18:	d1fb      	bne.n	800df12 <tiny_print+0x62>
		*( apStr->str++ ) = '\0';
 800df1a:	1c59      	adds	r1, r3, #1
 800df1c:	2200      	movs	r2, #0
 800df1e:	6021      	str	r1, [r4, #0]
 800df20:	701a      	strb	r2, [r3, #0]
}
 800df22:	b006      	add	sp, #24
 800df24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		memset( &apBuf->flags, '\0', sizeof apBuf->flags );
 800df28:	2300      	movs	r3, #0
		if( ch == '-' )
 800df2a:	292d      	cmp	r1, #45	@ 0x2d
		memset( &apBuf->flags, '\0', sizeof apBuf->flags );
 800df2c:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800df30:	e9c4 3306 	strd	r3, r3, [r4, #24]
		if( ch == '-' )
 800df34:	d103      	bne.n	800df3e <tiny_print+0x8e>
			apBuf->flags.pad = PAD_RIGHT;
 800df36:	2301      	movs	r3, #1
			ch = *( format++ );
 800df38:	1cb5      	adds	r5, r6, #2
 800df3a:	7871      	ldrb	r1, [r6, #1]
			apBuf->flags.pad = PAD_RIGHT;
 800df3c:	7723      	strb	r3, [r4, #28]
		while( ch == '0' )
 800df3e:	2930      	cmp	r1, #48	@ 0x30
 800df40:	d107      	bne.n	800df52 <tiny_print+0xa2>
			apBuf->flags.pad |= PAD_ZERO;
 800df42:	7f23      	ldrb	r3, [r4, #28]
			ch = *( format++ );
 800df44:	f815 1b01 	ldrb.w	r1, [r5], #1
			apBuf->flags.pad |= PAD_ZERO;
 800df48:	f043 0302 	orr.w	r3, r3, #2
		while( ch == '0' )
 800df4c:	2930      	cmp	r1, #48	@ 0x30
			apBuf->flags.pad |= PAD_ZERO;
 800df4e:	7723      	strb	r3, [r4, #28]
		while( ch == '0' )
 800df50:	d0f8      	beq.n	800df44 <tiny_print+0x94>
		if( ch == '*' )
 800df52:	292a      	cmp	r1, #42	@ 0x2a
 800df54:	d13f      	bne.n	800dfd6 <tiny_print+0x126>
			apBuf->flags.width = va_arg( args, int );
 800df56:	f857 3b04 	ldr.w	r3, [r7], #4
			ch = *( format++ );
 800df5a:	f815 1b01 	ldrb.w	r1, [r5], #1
			apBuf->flags.width = va_arg( args, int );
 800df5e:	6163      	str	r3, [r4, #20]
		if( ch == '.' )
 800df60:	292e      	cmp	r1, #46	@ 0x2e
 800df62:	d04a      	beq.n	800dffa <tiny_print+0x14a>
			apBuf->flags.printLimit--;  /* -1: make it unlimited */
 800df64:	f04f 33ff 	mov.w	r3, #4294967295
		if( ch == 'p' )
 800df68:	2970      	cmp	r1, #112	@ 0x70
			apBuf->flags.printLimit--;  /* -1: make it unlimited */
 800df6a:	61a3      	str	r3, [r4, #24]
		if( ch == 'p' )
 800df6c:	d052      	beq.n	800e014 <tiny_print+0x164>
		if( ch == 's' )
 800df6e:	2973      	cmp	r1, #115	@ 0x73
 800df70:	d067      	beq.n	800e042 <tiny_print+0x192>
		if( ch == 'c' )
 800df72:	2963      	cmp	r1, #99	@ 0x63
 800df74:	d05d      	beq.n	800e032 <tiny_print+0x182>
		if( ch == 'l' )
 800df76:	296c      	cmp	r1, #108	@ 0x6c
 800df78:	d105      	bne.n	800df86 <tiny_print+0xd6>
			apBuf->flags.long32 = 1;
 800df7a:	7fa3      	ldrb	r3, [r4, #30]
			ch = *( format++ );
 800df7c:	f815 1b01 	ldrb.w	r1, [r5], #1
			apBuf->flags.long32 = 1;
 800df80:	f043 0304 	orr.w	r3, r3, #4
 800df84:	77a3      	strb	r3, [r4, #30]
		if( ch == 'L' )
 800df86:	294c      	cmp	r1, #76	@ 0x4c
 800df88:	d105      	bne.n	800df96 <tiny_print+0xe6>
			apBuf->flags.long64 = 1;
 800df8a:	7fa3      	ldrb	r3, [r4, #30]
			ch = *( format++ );
 800df8c:	f815 1b01 	ldrb.w	r1, [r5], #1
			apBuf->flags.long64 = 1;
 800df90:	f043 0308 	orr.w	r3, r3, #8
 800df94:	77a3      	strb	r3, [r4, #30]
		apBuf->flags.base = 10;
 800df96:	230a      	movs	r3, #10
		if( ch == 'd' || ch == 'u' )
 800df98:	f1a1 0264 	sub.w	r2, r1, #100	@ 0x64
 800df9c:	2975      	cmp	r1, #117	@ 0x75
 800df9e:	fab2 f282 	clz	r2, r2
		apBuf->flags.base = 10;
 800dfa2:	6123      	str	r3, [r4, #16]
		apBuf->flags.letBase = 'a';
 800dfa4:	f04f 0361 	mov.w	r3, #97	@ 0x61
		if( ch == 'd' || ch == 'u' )
 800dfa8:	ea4f 1252 	mov.w	r2, r2, lsr #5
		apBuf->flags.letBase = 'a';
 800dfac:	7763      	strb	r3, [r4, #29]
		if( ch == 'd' || ch == 'u' )
 800dfae:	d002      	beq.n	800dfb6 <tiny_print+0x106>
 800dfb0:	2a00      	cmp	r2, #0
 800dfb2:	f000 80ac 	beq.w	800e10e <tiny_print+0x25e>
			apBuf->flags.isSigned = ( ch == 'd' );
 800dfb6:	7fa3      	ldrb	r3, [r4, #30]
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 800dfb8:	4620      	mov	r0, r4
			apBuf->flags.isSigned = ( ch == 'd' );
 800dfba:	f362 0300 	bfi	r3, r2, #0, #1
 800dfbe:	77a3      	strb	r3, [r4, #30]
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 800dfc0:	6839      	ldr	r1, [r7, #0]
 800dfc2:	f7ff fef1 	bl	800dda8 <printi>
 800dfc6:	bb90      	cbnz	r0, 800e02e <tiny_print+0x17e>
	strbuf_printchar( apBuf, '\0' );
 800dfc8:	2100      	movs	r1, #0
 800dfca:	4620      	mov	r0, r4
}
 800dfcc:	b006      	add	sp, #24
 800dfce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	strbuf_printchar( apBuf, '\0' );
 800dfd2:	f7ff be53 	b.w	800dc7c <strbuf_printchar>
			while( ch >= '0' && ch <= '9' )
 800dfd6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800dfda:	2a09      	cmp	r2, #9
 800dfdc:	d8c0      	bhi.n	800df60 <tiny_print+0xb0>
 800dfde:	2300      	movs	r3, #0
				apBuf->flags.width *= 10;
 800dfe0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
				apBuf->flags.width += ch - '0';
 800dfe4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800dfe8:	6163      	str	r3, [r4, #20]
				ch = *( format++ );
 800dfea:	f815 1b01 	ldrb.w	r1, [r5], #1
			while( ch >= '0' && ch <= '9' )
 800dfee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800dff2:	2a09      	cmp	r2, #9
 800dff4:	d9f4      	bls.n	800dfe0 <tiny_print+0x130>
		if( ch == '.' )
 800dff6:	292e      	cmp	r1, #46	@ 0x2e
 800dff8:	d1b4      	bne.n	800df64 <tiny_print+0xb4>
			ch = *( format++ );
 800dffa:	7829      	ldrb	r1, [r5, #0]
			if( ch == '*' )
 800dffc:	292a      	cmp	r1, #42	@ 0x2a
 800dffe:	d12b      	bne.n	800e058 <tiny_print+0x1a8>
				apBuf->flags.printLimit = va_arg( args, int );
 800e000:	f857 3b04 	ldr.w	r3, [r7], #4
				ch = *( format++ );
 800e004:	3502      	adds	r5, #2
				apBuf->flags.printLimit = va_arg( args, int );
 800e006:	61a3      	str	r3, [r4, #24]
				ch = *( format++ );
 800e008:	f815 1c01 	ldrb.w	r1, [r5, #-1]
		if( apBuf->flags.printLimit == 0 )
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d0a9      	beq.n	800df64 <tiny_print+0xb4>
		if( ch == 'p' )
 800e010:	2970      	cmp	r1, #112	@ 0x70
 800e012:	d1ac      	bne.n	800df6e <tiny_print+0xbe>
			if( format[0] == 'i' && format[1] == 'p' )
 800e014:	782b      	ldrb	r3, [r5, #0]
 800e016:	2b69      	cmp	r3, #105	@ 0x69
 800e018:	d032      	beq.n	800e080 <tiny_print+0x1d0>
		apBuf->flags.letBase = 'a';
 800e01a:	2261      	movs	r2, #97	@ 0x61
		apBuf->flags.base = 16;		/* From here all hexadecimal */
 800e01c:	2310      	movs	r3, #16
		apBuf->flags.letBase = 'a';
 800e01e:	7762      	strb	r2, [r4, #29]
		apBuf->flags.base = 16;		/* From here all hexadecimal */
 800e020:	6123      	str	r3, [r4, #16]
 800e022:	6839      	ldr	r1, [r7, #0]
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 800e024:	4620      	mov	r0, r4
 800e026:	f7ff febf 	bl	800dda8 <printi>
 800e02a:	2800      	cmp	r0, #0
 800e02c:	d0cc      	beq.n	800dfc8 <tiny_print+0x118>
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 800e02e:	3704      	adds	r7, #4
 800e030:	e744      	b.n	800debc <tiny_print+0xc>
			if( strbuf_printchar( apBuf, scr[0] )  == 0 )
 800e032:	7839      	ldrb	r1, [r7, #0]
 800e034:	4620      	mov	r0, r4
 800e036:	f7ff fe21 	bl	800dc7c <strbuf_printchar>
 800e03a:	2800      	cmp	r0, #0
 800e03c:	f43f af69 	beq.w	800df12 <tiny_print+0x62>
 800e040:	e7f5      	b.n	800e02e <tiny_print+0x17e>
			register char *s = ( char * )va_arg( args, int );
 800e042:	6839      	ldr	r1, [r7, #0]
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 800e044:	4620      	mov	r0, r4
			register char *s = ( char * )va_arg( args, int );
 800e046:	4b58      	ldr	r3, [pc, #352]	@ (800e1a8 <tiny_print+0x2f8>)
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 800e048:	2900      	cmp	r1, #0
 800e04a:	bf08      	it	eq
 800e04c:	4619      	moveq	r1, r3
 800e04e:	f7ff fe35 	bl	800dcbc <prints>
 800e052:	2800      	cmp	r0, #0
 800e054:	d0b8      	beq.n	800dfc8 <tiny_print+0x118>
 800e056:	e7ea      	b.n	800e02e <tiny_print+0x17e>
				while( ch >= '0' && ch <= '9' )
 800e058:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
			ch = *( format++ );
 800e05c:	3501      	adds	r5, #1
				while( ch >= '0' && ch <= '9' )
 800e05e:	2a09      	cmp	r2, #9
 800e060:	d880      	bhi.n	800df64 <tiny_print+0xb4>
 800e062:	2300      	movs	r3, #0
					apBuf->flags.printLimit *= 10;
 800e064:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					apBuf->flags.printLimit += ch - '0';
 800e068:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800e06c:	61a3      	str	r3, [r4, #24]
					ch = *( format++ );
 800e06e:	f815 1b01 	ldrb.w	r1, [r5], #1
				while( ch >= '0' && ch <= '9' )
 800e072:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e076:	2a09      	cmp	r2, #9
 800e078:	d9f4      	bls.n	800e064 <tiny_print+0x1b4>
		if( apBuf->flags.printLimit == 0 )
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d1c8      	bne.n	800e010 <tiny_print+0x160>
 800e07e:	e771      	b.n	800df64 <tiny_print+0xb4>
			if( format[0] == 'i' && format[1] == 'p' )
 800e080:	786b      	ldrb	r3, [r5, #1]
 800e082:	2b70      	cmp	r3, #112	@ 0x70
 800e084:	d1c9      	bne.n	800e01a <tiny_print+0x16a>
	int iCurStart = 0;
 800e086:	2600      	movs	r6, #0
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 800e088:	f8d7 a000 	ldr.w	sl, [r7]
	int iZeroStart = -1;
 800e08c:	f04f 38ff 	mov.w	r8, #4294967295
 800e090:	f1aa 0102 	sub.w	r1, sl, #2
	int iZeroLength = 0;
 800e094:	46b1      	mov	r9, r6
	int iCurLength = 0;
 800e096:	4632      	mov	r2, r6
	for( iIndex = 0; iIndex < 8; iIndex++ )
 800e098:	4633      	mov	r3, r6
		if( usValue == 0 )
 800e09a:	f831 0f02 	ldrh.w	r0, [r1, #2]!
 800e09e:	2800      	cmp	r0, #0
 800e0a0:	d06a      	beq.n	800e178 <tiny_print+0x2c8>
			if( ( iCurLength > 1 ) && ( iZeroLength < iCurLength ) )
 800e0a2:	4648      	mov	r0, r9
	for( iIndex = 0; iIndex < 8; iIndex++ )
 800e0a4:	3301      	adds	r3, #1
			if( ( iCurLength > 1 ) && ( iZeroLength < iCurLength ) )
 800e0a6:	2801      	cmp	r0, #1
 800e0a8:	bfb8      	it	lt
 800e0aa:	2001      	movlt	r0, #1
 800e0ac:	4290      	cmp	r0, r2
 800e0ae:	bfbc      	itt	lt
 800e0b0:	4691      	movlt	r9, r2
 800e0b2:	46b0      	movlt	r8, r6
	for( iIndex = 0; iIndex < 8; iIndex++ )
 800e0b4:	2b08      	cmp	r3, #8
 800e0b6:	f04f 0200 	mov.w	r2, #0
 800e0ba:	d1ee      	bne.n	800e09a <tiny_print+0x1ea>
	apBuf->flags.base = 16;
 800e0bc:	2310      	movs	r3, #16
			iIndex += iZeroLength - 1;
 800e0be:	f109 39ff 	add.w	r9, r9, #4294967295
	for( iIndex = 0; iIndex < 8; iIndex++ )
 800e0c2:	2600      	movs	r6, #0
	apBuf->flags.base = 16;
 800e0c4:	6123      	str	r3, [r4, #16]
	apBuf->flags.letBase = 'a'; /* use lower-case letters 'a' to 'f' */
 800e0c6:	2361      	movs	r3, #97	@ 0x61
 800e0c8:	7763      	strb	r3, [r4, #29]
	for( iIndex = 0; iIndex < 8; iIndex++ )
 800e0ca:	e010      	b.n	800e0ee <tiny_print+0x23e>
			if( iIndex > 0 )
 800e0cc:	2e00      	cmp	r6, #0
				strbuf_printchar( apBuf, ':' );
 800e0ce:	f04f 013a 	mov.w	r1, #58	@ 0x3a
			if( iIndex > 0 )
 800e0d2:	dd02      	ble.n	800e0da <tiny_print+0x22a>
				strbuf_printchar( apBuf, ':' );
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	f7ff fdd1 	bl	800dc7c <strbuf_printchar>
			printi( apBuf, ( int ) ( ( uint32_t ) usNetToHost( pusAddress[ iIndex ] ) ) );
 800e0da:	f83a 1016 	ldrh.w	r1, [sl, r6, lsl #1]
 800e0de:	4620      	mov	r0, r4
 800e0e0:	ba49      	rev16	r1, r1
 800e0e2:	b289      	uxth	r1, r1
 800e0e4:	f7ff fe60 	bl	800dda8 <printi>
	for( iIndex = 0; iIndex < 8; iIndex++ )
 800e0e8:	3601      	adds	r6, #1
 800e0ea:	2e07      	cmp	r6, #7
 800e0ec:	dc0d      	bgt.n	800e10a <tiny_print+0x25a>
		if( iIndex == iZeroStart )
 800e0ee:	45b0      	cmp	r8, r6
 800e0f0:	d1ec      	bne.n	800e0cc <tiny_print+0x21c>
			iIndex += iZeroLength - 1;
 800e0f2:	eb08 0609 	add.w	r6, r8, r9
			strbuf_printchar( apBuf, ':' );
 800e0f6:	213a      	movs	r1, #58	@ 0x3a
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	f7ff fdbf 	bl	800dc7c <strbuf_printchar>
			if( iIndex == 7 )
 800e0fe:	2e07      	cmp	r6, #7
 800e100:	d1f2      	bne.n	800e0e8 <tiny_print+0x238>
				strbuf_printchar( apBuf, ':' );
 800e102:	213a      	movs	r1, #58	@ 0x3a
 800e104:	4620      	mov	r0, r4
 800e106:	f7ff fdb9 	bl	800dc7c <strbuf_printchar>
				format += 2;	/* eat the "pi" of "pip" */
 800e10a:	3502      	adds	r5, #2
 800e10c:	e78f      	b.n	800e02e <tiny_print+0x17e>
		apBuf->flags.base = 16;		/* From here all hexadecimal */
 800e10e:	2310      	movs	r3, #16
		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 800e110:	2978      	cmp	r1, #120	@ 0x78
		apBuf->flags.base = 16;		/* From here all hexadecimal */
 800e112:	6123      	str	r3, [r4, #16]
		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 800e114:	d010      	beq.n	800e138 <tiny_print+0x288>
		if( ch == 'x' || ch == 'X' || ch == 'p' || ch == 'o' )
 800e116:	2958      	cmp	r1, #88	@ 0x58
 800e118:	d103      	bne.n	800e122 <tiny_print+0x272>
				apBuf->flags.letBase = 'A';
 800e11a:	2341      	movs	r3, #65	@ 0x41
 800e11c:	7763      	strb	r3, [r4, #29]
 800e11e:	6839      	ldr	r1, [r7, #0]
 800e120:	e780      	b.n	800e024 <tiny_print+0x174>
		if( ch == 'x' || ch == 'X' || ch == 'p' || ch == 'o' )
 800e122:	f1a1 036f 	sub.w	r3, r1, #111	@ 0x6f
 800e126:	2b01      	cmp	r3, #1
 800e128:	f63f aec8 	bhi.w	800debc <tiny_print+0xc>
			else if( ch == 'o' )
 800e12c:	296f      	cmp	r1, #111	@ 0x6f
				apBuf->flags.base = 8;
 800e12e:	bf04      	itt	eq
 800e130:	2308      	moveq	r3, #8
 800e132:	6123      	streq	r3, [r4, #16]
 800e134:	6839      	ldr	r1, [r7, #0]
 800e136:	e775      	b.n	800e024 <tiny_print+0x174>
		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 800e138:	782b      	ldrb	r3, [r5, #0]
			if( printIp( apBuf, va_arg( args, int ) ) == 0 )
 800e13a:	6839      	ldr	r1, [r7, #0]
		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 800e13c:	2b69      	cmp	r3, #105	@ 0x69
 800e13e:	f47f af71 	bne.w	800e024 <tiny_print+0x174>
 800e142:	786b      	ldrb	r3, [r5, #1]
 800e144:	2b70      	cmp	r3, #112	@ 0x70
 800e146:	f47f af6d 	bne.w	800e024 <tiny_print+0x174>
	sprintf( print_buf, "%u.%u.%u.%u",
 800e14a:	b2cb      	uxtb	r3, r1
 800e14c:	a802      	add	r0, sp, #8
 800e14e:	0e0a      	lsrs	r2, r1, #24
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 800e150:	3704      	adds	r7, #4
	sprintf( print_buf, "%u.%u.%u.%u",
 800e152:	9301      	str	r3, [sp, #4]
 800e154:	f3c1 2307 	ubfx	r3, r1, #8, #8
			format += 2;	/* eat the "xi" of "xip" */
 800e158:	3502      	adds	r5, #2
	sprintf( print_buf, "%u.%u.%u.%u",
 800e15a:	9300      	str	r3, [sp, #0]
 800e15c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800e160:	4912      	ldr	r1, [pc, #72]	@ (800e1ac <tiny_print+0x2fc>)
 800e162:	f7ff fe89 	bl	800de78 <sprintf>
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 800e166:	7fa3      	ldrb	r3, [r4, #30]
	prints( apBuf, print_buf );
 800e168:	a902      	add	r1, sp, #8
 800e16a:	4620      	mov	r0, r4
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 800e16c:	f043 0302 	orr.w	r3, r3, #2
 800e170:	77a3      	strb	r3, [r4, #30]
	prints( apBuf, print_buf );
 800e172:	f7ff fda3 	bl	800dcbc <prints>
	return pdTRUE;
 800e176:	e6a1      	b.n	800debc <tiny_print+0xc>
			if( iCurLength == 0 )
 800e178:	b932      	cbnz	r2, 800e188 <tiny_print+0x2d8>
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 800e17a:	2b07      	cmp	r3, #7
			iCurLength++;
 800e17c:	f04f 0201 	mov.w	r2, #1
	for( iIndex = 0; iIndex < 8; iIndex++ )
 800e180:	461e      	mov	r6, r3
 800e182:	4413      	add	r3, r2
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 800e184:	d189      	bne.n	800e09a <tiny_print+0x1ea>
 800e186:	e799      	b.n	800e0bc <tiny_print+0x20c>
 800e188:	2b07      	cmp	r3, #7
			iCurLength++;
 800e18a:	f102 0201 	add.w	r2, r2, #1
	for( iIndex = 0; iIndex < 8; iIndex++ )
 800e18e:	f103 0301 	add.w	r3, r3, #1
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 800e192:	d182      	bne.n	800e09a <tiny_print+0x1ea>
			if( ( iCurLength > 1 ) && ( iZeroLength < iCurLength ) )
 800e194:	464b      	mov	r3, r9
 800e196:	2b01      	cmp	r3, #1
 800e198:	bfb8      	it	lt
 800e19a:	2301      	movlt	r3, #1
 800e19c:	429a      	cmp	r2, r3
 800e19e:	bfc4      	itt	gt
 800e1a0:	4691      	movgt	r9, r2
 800e1a2:	46b0      	movgt	r8, r6
 800e1a4:	e78a      	b.n	800e0bc <tiny_print+0x20c>
 800e1a6:	bf00      	nop
 800e1a8:	08011c58 	.word	0x08011c58
 800e1ac:	08011c60 	.word	0x08011c60

0800e1b0 <vsnprintf>:
	apStr->nulPos = apMaxStr-1;
 800e1b0:	f101 3cff 	add.w	ip, r1, #4294967295
{
 800e1b4:	b510      	push	{r4, lr}
 800e1b6:	4696      	mov	lr, r2
 800e1b8:	b088      	sub	sp, #32
	apStr->curLen = 0;
 800e1ba:	2400      	movs	r4, #0
	tiny_print( &strBuf, apFmt, args );
 800e1bc:	461a      	mov	r2, r3
	apStr->nulPos = apMaxStr-1;
 800e1be:	eb00 030c 	add.w	r3, r0, ip
	tiny_print( &strBuf, apFmt, args );
 800e1c2:	4671      	mov	r1, lr
	memset( &apStr->flags, '\0', sizeof apStr->flags );
 800e1c4:	9407      	str	r4, [sp, #28]
	apStr->nulPos = apMaxStr-1;
 800e1c6:	9302      	str	r3, [sp, #8]
	apStr->str = apBuf;
 800e1c8:	e9cd 0000 	strd	r0, r0, [sp]
	tiny_print( &strBuf, apFmt, args );
 800e1cc:	4668      	mov	r0, sp
	memset( &apStr->flags, '\0', sizeof apStr->flags );
 800e1ce:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800e1d2:	e9cd 4405 	strd	r4, r4, [sp, #20]
	tiny_print( &strBuf, apFmt, args );
 800e1d6:	f7ff fe6b 	bl	800deb0 <tiny_print>
}
 800e1da:	9803      	ldr	r0, [sp, #12]
 800e1dc:	b008      	add	sp, #32
 800e1de:	bd10      	pop	{r4, pc}

0800e1e0 <snprintf>:
{
 800e1e0:	b40c      	push	{r2, r3}
 800e1e2:	b510      	push	{r4, lr}
 800e1e4:	b08a      	sub	sp, #40	@ 0x28
	apStr->nulPos = apMaxStr-1;
 800e1e6:	1e4c      	subs	r4, r1, #1
	apStr->curLen = 0;
 800e1e8:	2300      	movs	r3, #0
{
 800e1ea:	aa0c      	add	r2, sp, #48	@ 0x30
	apStr->nulPos = apMaxStr-1;
 800e1ec:	4404      	add	r4, r0
	apStr->curLen = 0;
 800e1ee:	9305      	str	r3, [sp, #20]
{
 800e1f0:	f852 1b04 	ldr.w	r1, [r2], #4
	apStr->nulPos = apMaxStr-1;
 800e1f4:	e9cd 0403 	strd	r0, r4, [sp, #12]
	va_start( args,  apFmt );
 800e1f8:	e9cd 2001 	strd	r2, r0, [sp, #4]
	tiny_print( &strBuf, apFmt, args );
 800e1fc:	a802      	add	r0, sp, #8
	memset( &apStr->flags, '\0', sizeof apStr->flags );
 800e1fe:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800e202:	e9cd 3308 	strd	r3, r3, [sp, #32]
	tiny_print( &strBuf, apFmt, args );
 800e206:	f7ff fe53 	bl	800deb0 <tiny_print>
}
 800e20a:	9805      	ldr	r0, [sp, #20]
 800e20c:	b00a      	add	sp, #40	@ 0x28
 800e20e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e212:	b002      	add	sp, #8
 800e214:	4770      	bx	lr
 800e216:	bf00      	nop

0800e218 <rand>:
 800e218:	4b16      	ldr	r3, [pc, #88]	@ (800e274 <rand+0x5c>)
 800e21a:	b510      	push	{r4, lr}
 800e21c:	681c      	ldr	r4, [r3, #0]
 800e21e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e220:	b9b3      	cbnz	r3, 800e250 <rand+0x38>
 800e222:	2018      	movs	r0, #24
 800e224:	f000 faae 	bl	800e784 <malloc>
 800e228:	4602      	mov	r2, r0
 800e22a:	6320      	str	r0, [r4, #48]	@ 0x30
 800e22c:	b920      	cbnz	r0, 800e238 <rand+0x20>
 800e22e:	4b12      	ldr	r3, [pc, #72]	@ (800e278 <rand+0x60>)
 800e230:	4812      	ldr	r0, [pc, #72]	@ (800e27c <rand+0x64>)
 800e232:	2152      	movs	r1, #82	@ 0x52
 800e234:	f000 fa3e 	bl	800e6b4 <__assert_func>
 800e238:	4911      	ldr	r1, [pc, #68]	@ (800e280 <rand+0x68>)
 800e23a:	4b12      	ldr	r3, [pc, #72]	@ (800e284 <rand+0x6c>)
 800e23c:	e9c0 1300 	strd	r1, r3, [r0]
 800e240:	4b11      	ldr	r3, [pc, #68]	@ (800e288 <rand+0x70>)
 800e242:	6083      	str	r3, [r0, #8]
 800e244:	230b      	movs	r3, #11
 800e246:	8183      	strh	r3, [r0, #12]
 800e248:	2100      	movs	r1, #0
 800e24a:	2001      	movs	r0, #1
 800e24c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e250:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e252:	480e      	ldr	r0, [pc, #56]	@ (800e28c <rand+0x74>)
 800e254:	690b      	ldr	r3, [r1, #16]
 800e256:	694c      	ldr	r4, [r1, #20]
 800e258:	4a0d      	ldr	r2, [pc, #52]	@ (800e290 <rand+0x78>)
 800e25a:	4358      	muls	r0, r3
 800e25c:	fb02 0004 	mla	r0, r2, r4, r0
 800e260:	fba3 3202 	umull	r3, r2, r3, r2
 800e264:	3301      	adds	r3, #1
 800e266:	eb40 0002 	adc.w	r0, r0, r2
 800e26a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e26e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800e272:	bd10      	pop	{r4, pc}
 800e274:	20000048 	.word	0x20000048
 800e278:	08011c6c 	.word	0x08011c6c
 800e27c:	08011c83 	.word	0x08011c83
 800e280:	abcd330e 	.word	0xabcd330e
 800e284:	e66d1234 	.word	0xe66d1234
 800e288:	0005deec 	.word	0x0005deec
 800e28c:	5851f42d 	.word	0x5851f42d
 800e290:	4c957f2d 	.word	0x4c957f2d

0800e294 <std>:
 800e294:	2300      	movs	r3, #0
 800e296:	b510      	push	{r4, lr}
 800e298:	4604      	mov	r4, r0
 800e29a:	e9c0 3300 	strd	r3, r3, [r0]
 800e29e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e2a2:	6083      	str	r3, [r0, #8]
 800e2a4:	8181      	strh	r1, [r0, #12]
 800e2a6:	6643      	str	r3, [r0, #100]	@ 0x64
 800e2a8:	81c2      	strh	r2, [r0, #14]
 800e2aa:	6183      	str	r3, [r0, #24]
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	2208      	movs	r2, #8
 800e2b0:	305c      	adds	r0, #92	@ 0x5c
 800e2b2:	f7ff fc89 	bl	800dbc8 <memset>
 800e2b6:	4b0d      	ldr	r3, [pc, #52]	@ (800e2ec <std+0x58>)
 800e2b8:	6263      	str	r3, [r4, #36]	@ 0x24
 800e2ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e2f0 <std+0x5c>)
 800e2bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e2be:	4b0d      	ldr	r3, [pc, #52]	@ (800e2f4 <std+0x60>)
 800e2c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e2c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e2f8 <std+0x64>)
 800e2c4:	6323      	str	r3, [r4, #48]	@ 0x30
 800e2c6:	4b0d      	ldr	r3, [pc, #52]	@ (800e2fc <std+0x68>)
 800e2c8:	6224      	str	r4, [r4, #32]
 800e2ca:	429c      	cmp	r4, r3
 800e2cc:	d006      	beq.n	800e2dc <std+0x48>
 800e2ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e2d2:	4294      	cmp	r4, r2
 800e2d4:	d002      	beq.n	800e2dc <std+0x48>
 800e2d6:	33d0      	adds	r3, #208	@ 0xd0
 800e2d8:	429c      	cmp	r4, r3
 800e2da:	d105      	bne.n	800e2e8 <std+0x54>
 800e2dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2e4:	f000 b9e2 	b.w	800e6ac <__retarget_lock_init_recursive>
 800e2e8:	bd10      	pop	{r4, pc}
 800e2ea:	bf00      	nop
 800e2ec:	0800e46d 	.word	0x0800e46d
 800e2f0:	0800e493 	.word	0x0800e493
 800e2f4:	0800e4cb 	.word	0x0800e4cb
 800e2f8:	0800e4ef 	.word	0x0800e4ef
 800e2fc:	2000126c 	.word	0x2000126c

0800e300 <stdio_exit_handler>:
 800e300:	4a02      	ldr	r2, [pc, #8]	@ (800e30c <stdio_exit_handler+0xc>)
 800e302:	4903      	ldr	r1, [pc, #12]	@ (800e310 <stdio_exit_handler+0x10>)
 800e304:	4803      	ldr	r0, [pc, #12]	@ (800e314 <stdio_exit_handler+0x14>)
 800e306:	f000 b869 	b.w	800e3dc <_fwalk_sglue>
 800e30a:	bf00      	nop
 800e30c:	2000003c 	.word	0x2000003c
 800e310:	0800f02d 	.word	0x0800f02d
 800e314:	2000004c 	.word	0x2000004c

0800e318 <cleanup_stdio>:
 800e318:	6841      	ldr	r1, [r0, #4]
 800e31a:	4b0c      	ldr	r3, [pc, #48]	@ (800e34c <cleanup_stdio+0x34>)
 800e31c:	4299      	cmp	r1, r3
 800e31e:	b510      	push	{r4, lr}
 800e320:	4604      	mov	r4, r0
 800e322:	d001      	beq.n	800e328 <cleanup_stdio+0x10>
 800e324:	f000 fe82 	bl	800f02c <_fflush_r>
 800e328:	68a1      	ldr	r1, [r4, #8]
 800e32a:	4b09      	ldr	r3, [pc, #36]	@ (800e350 <cleanup_stdio+0x38>)
 800e32c:	4299      	cmp	r1, r3
 800e32e:	d002      	beq.n	800e336 <cleanup_stdio+0x1e>
 800e330:	4620      	mov	r0, r4
 800e332:	f000 fe7b 	bl	800f02c <_fflush_r>
 800e336:	68e1      	ldr	r1, [r4, #12]
 800e338:	4b06      	ldr	r3, [pc, #24]	@ (800e354 <cleanup_stdio+0x3c>)
 800e33a:	4299      	cmp	r1, r3
 800e33c:	d004      	beq.n	800e348 <cleanup_stdio+0x30>
 800e33e:	4620      	mov	r0, r4
 800e340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e344:	f000 be72 	b.w	800f02c <_fflush_r>
 800e348:	bd10      	pop	{r4, pc}
 800e34a:	bf00      	nop
 800e34c:	2000126c 	.word	0x2000126c
 800e350:	200012d4 	.word	0x200012d4
 800e354:	2000133c 	.word	0x2000133c

0800e358 <global_stdio_init.part.0>:
 800e358:	b510      	push	{r4, lr}
 800e35a:	4b0b      	ldr	r3, [pc, #44]	@ (800e388 <global_stdio_init.part.0+0x30>)
 800e35c:	4c0b      	ldr	r4, [pc, #44]	@ (800e38c <global_stdio_init.part.0+0x34>)
 800e35e:	4a0c      	ldr	r2, [pc, #48]	@ (800e390 <global_stdio_init.part.0+0x38>)
 800e360:	601a      	str	r2, [r3, #0]
 800e362:	4620      	mov	r0, r4
 800e364:	2200      	movs	r2, #0
 800e366:	2104      	movs	r1, #4
 800e368:	f7ff ff94 	bl	800e294 <std>
 800e36c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e370:	2201      	movs	r2, #1
 800e372:	2109      	movs	r1, #9
 800e374:	f7ff ff8e 	bl	800e294 <std>
 800e378:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e37c:	2202      	movs	r2, #2
 800e37e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e382:	2112      	movs	r1, #18
 800e384:	f7ff bf86 	b.w	800e294 <std>
 800e388:	200013a4 	.word	0x200013a4
 800e38c:	2000126c 	.word	0x2000126c
 800e390:	0800e301 	.word	0x0800e301

0800e394 <__sfp_lock_acquire>:
 800e394:	4801      	ldr	r0, [pc, #4]	@ (800e39c <__sfp_lock_acquire+0x8>)
 800e396:	f000 b98a 	b.w	800e6ae <__retarget_lock_acquire_recursive>
 800e39a:	bf00      	nop
 800e39c:	200013ad 	.word	0x200013ad

0800e3a0 <__sfp_lock_release>:
 800e3a0:	4801      	ldr	r0, [pc, #4]	@ (800e3a8 <__sfp_lock_release+0x8>)
 800e3a2:	f000 b985 	b.w	800e6b0 <__retarget_lock_release_recursive>
 800e3a6:	bf00      	nop
 800e3a8:	200013ad 	.word	0x200013ad

0800e3ac <__sinit>:
 800e3ac:	b510      	push	{r4, lr}
 800e3ae:	4604      	mov	r4, r0
 800e3b0:	f7ff fff0 	bl	800e394 <__sfp_lock_acquire>
 800e3b4:	6a23      	ldr	r3, [r4, #32]
 800e3b6:	b11b      	cbz	r3, 800e3c0 <__sinit+0x14>
 800e3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3bc:	f7ff bff0 	b.w	800e3a0 <__sfp_lock_release>
 800e3c0:	4b04      	ldr	r3, [pc, #16]	@ (800e3d4 <__sinit+0x28>)
 800e3c2:	6223      	str	r3, [r4, #32]
 800e3c4:	4b04      	ldr	r3, [pc, #16]	@ (800e3d8 <__sinit+0x2c>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d1f5      	bne.n	800e3b8 <__sinit+0xc>
 800e3cc:	f7ff ffc4 	bl	800e358 <global_stdio_init.part.0>
 800e3d0:	e7f2      	b.n	800e3b8 <__sinit+0xc>
 800e3d2:	bf00      	nop
 800e3d4:	0800e319 	.word	0x0800e319
 800e3d8:	200013a4 	.word	0x200013a4

0800e3dc <_fwalk_sglue>:
 800e3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3e0:	4607      	mov	r7, r0
 800e3e2:	4688      	mov	r8, r1
 800e3e4:	4614      	mov	r4, r2
 800e3e6:	2600      	movs	r6, #0
 800e3e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e3ec:	f1b9 0901 	subs.w	r9, r9, #1
 800e3f0:	d505      	bpl.n	800e3fe <_fwalk_sglue+0x22>
 800e3f2:	6824      	ldr	r4, [r4, #0]
 800e3f4:	2c00      	cmp	r4, #0
 800e3f6:	d1f7      	bne.n	800e3e8 <_fwalk_sglue+0xc>
 800e3f8:	4630      	mov	r0, r6
 800e3fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3fe:	89ab      	ldrh	r3, [r5, #12]
 800e400:	2b01      	cmp	r3, #1
 800e402:	d907      	bls.n	800e414 <_fwalk_sglue+0x38>
 800e404:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e408:	3301      	adds	r3, #1
 800e40a:	d003      	beq.n	800e414 <_fwalk_sglue+0x38>
 800e40c:	4629      	mov	r1, r5
 800e40e:	4638      	mov	r0, r7
 800e410:	47c0      	blx	r8
 800e412:	4306      	orrs	r6, r0
 800e414:	3568      	adds	r5, #104	@ 0x68
 800e416:	e7e9      	b.n	800e3ec <_fwalk_sglue+0x10>

0800e418 <siscanf>:
 800e418:	b40e      	push	{r1, r2, r3}
 800e41a:	b530      	push	{r4, r5, lr}
 800e41c:	b09c      	sub	sp, #112	@ 0x70
 800e41e:	ac1f      	add	r4, sp, #124	@ 0x7c
 800e420:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800e424:	f854 5b04 	ldr.w	r5, [r4], #4
 800e428:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e42c:	9002      	str	r0, [sp, #8]
 800e42e:	9006      	str	r0, [sp, #24]
 800e430:	f7f1 ff60 	bl	80002f4 <strlen>
 800e434:	4b0b      	ldr	r3, [pc, #44]	@ (800e464 <siscanf+0x4c>)
 800e436:	9003      	str	r0, [sp, #12]
 800e438:	9007      	str	r0, [sp, #28]
 800e43a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e43c:	480a      	ldr	r0, [pc, #40]	@ (800e468 <siscanf+0x50>)
 800e43e:	9401      	str	r4, [sp, #4]
 800e440:	2300      	movs	r3, #0
 800e442:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e444:	9314      	str	r3, [sp, #80]	@ 0x50
 800e446:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e44a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e44e:	462a      	mov	r2, r5
 800e450:	4623      	mov	r3, r4
 800e452:	a902      	add	r1, sp, #8
 800e454:	6800      	ldr	r0, [r0, #0]
 800e456:	f000 faa3 	bl	800e9a0 <__ssvfiscanf_r>
 800e45a:	b01c      	add	sp, #112	@ 0x70
 800e45c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e460:	b003      	add	sp, #12
 800e462:	4770      	bx	lr
 800e464:	0800e48f 	.word	0x0800e48f
 800e468:	20000048 	.word	0x20000048

0800e46c <__sread>:
 800e46c:	b510      	push	{r4, lr}
 800e46e:	460c      	mov	r4, r1
 800e470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e474:	f000 f8cc 	bl	800e610 <_read_r>
 800e478:	2800      	cmp	r0, #0
 800e47a:	bfab      	itete	ge
 800e47c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e47e:	89a3      	ldrhlt	r3, [r4, #12]
 800e480:	181b      	addge	r3, r3, r0
 800e482:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e486:	bfac      	ite	ge
 800e488:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e48a:	81a3      	strhlt	r3, [r4, #12]
 800e48c:	bd10      	pop	{r4, pc}

0800e48e <__seofread>:
 800e48e:	2000      	movs	r0, #0
 800e490:	4770      	bx	lr

0800e492 <__swrite>:
 800e492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e496:	461f      	mov	r7, r3
 800e498:	898b      	ldrh	r3, [r1, #12]
 800e49a:	05db      	lsls	r3, r3, #23
 800e49c:	4605      	mov	r5, r0
 800e49e:	460c      	mov	r4, r1
 800e4a0:	4616      	mov	r6, r2
 800e4a2:	d505      	bpl.n	800e4b0 <__swrite+0x1e>
 800e4a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4a8:	2302      	movs	r3, #2
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	f000 f89e 	bl	800e5ec <_lseek_r>
 800e4b0:	89a3      	ldrh	r3, [r4, #12]
 800e4b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e4ba:	81a3      	strh	r3, [r4, #12]
 800e4bc:	4632      	mov	r2, r6
 800e4be:	463b      	mov	r3, r7
 800e4c0:	4628      	mov	r0, r5
 800e4c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4c6:	f000 b8b5 	b.w	800e634 <_write_r>

0800e4ca <__sseek>:
 800e4ca:	b510      	push	{r4, lr}
 800e4cc:	460c      	mov	r4, r1
 800e4ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4d2:	f000 f88b 	bl	800e5ec <_lseek_r>
 800e4d6:	1c43      	adds	r3, r0, #1
 800e4d8:	89a3      	ldrh	r3, [r4, #12]
 800e4da:	bf15      	itete	ne
 800e4dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e4de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e4e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e4e6:	81a3      	strheq	r3, [r4, #12]
 800e4e8:	bf18      	it	ne
 800e4ea:	81a3      	strhne	r3, [r4, #12]
 800e4ec:	bd10      	pop	{r4, pc}

0800e4ee <__sclose>:
 800e4ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4f2:	f000 b86b 	b.w	800e5cc <_close_r>

0800e4f6 <memcmp>:
 800e4f6:	b510      	push	{r4, lr}
 800e4f8:	3901      	subs	r1, #1
 800e4fa:	4402      	add	r2, r0
 800e4fc:	4290      	cmp	r0, r2
 800e4fe:	d101      	bne.n	800e504 <memcmp+0xe>
 800e500:	2000      	movs	r0, #0
 800e502:	e005      	b.n	800e510 <memcmp+0x1a>
 800e504:	7803      	ldrb	r3, [r0, #0]
 800e506:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e50a:	42a3      	cmp	r3, r4
 800e50c:	d001      	beq.n	800e512 <memcmp+0x1c>
 800e50e:	1b18      	subs	r0, r3, r4
 800e510:	bd10      	pop	{r4, pc}
 800e512:	3001      	adds	r0, #1
 800e514:	e7f2      	b.n	800e4fc <memcmp+0x6>

0800e516 <memmove>:
 800e516:	4288      	cmp	r0, r1
 800e518:	b510      	push	{r4, lr}
 800e51a:	eb01 0402 	add.w	r4, r1, r2
 800e51e:	d902      	bls.n	800e526 <memmove+0x10>
 800e520:	4284      	cmp	r4, r0
 800e522:	4623      	mov	r3, r4
 800e524:	d807      	bhi.n	800e536 <memmove+0x20>
 800e526:	1e43      	subs	r3, r0, #1
 800e528:	42a1      	cmp	r1, r4
 800e52a:	d008      	beq.n	800e53e <memmove+0x28>
 800e52c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e530:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e534:	e7f8      	b.n	800e528 <memmove+0x12>
 800e536:	4402      	add	r2, r0
 800e538:	4601      	mov	r1, r0
 800e53a:	428a      	cmp	r2, r1
 800e53c:	d100      	bne.n	800e540 <memmove+0x2a>
 800e53e:	bd10      	pop	{r4, pc}
 800e540:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e544:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e548:	e7f7      	b.n	800e53a <memmove+0x24>
	...

0800e54c <strcasecmp>:
 800e54c:	b530      	push	{r4, r5, lr}
 800e54e:	4d0b      	ldr	r5, [pc, #44]	@ (800e57c <strcasecmp+0x30>)
 800e550:	4604      	mov	r4, r0
 800e552:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e556:	5cea      	ldrb	r2, [r5, r3]
 800e558:	f002 0203 	and.w	r2, r2, #3
 800e55c:	2a01      	cmp	r2, #1
 800e55e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e562:	5ca8      	ldrb	r0, [r5, r2]
 800e564:	f000 0003 	and.w	r0, r0, #3
 800e568:	bf08      	it	eq
 800e56a:	3320      	addeq	r3, #32
 800e56c:	2801      	cmp	r0, #1
 800e56e:	bf08      	it	eq
 800e570:	3220      	addeq	r2, #32
 800e572:	1a98      	subs	r0, r3, r2
 800e574:	d101      	bne.n	800e57a <strcasecmp+0x2e>
 800e576:	2a00      	cmp	r2, #0
 800e578:	d1eb      	bne.n	800e552 <strcasecmp+0x6>
 800e57a:	bd30      	pop	{r4, r5, pc}
 800e57c:	08011d18 	.word	0x08011d18

0800e580 <strncmp>:
 800e580:	b510      	push	{r4, lr}
 800e582:	b16a      	cbz	r2, 800e5a0 <strncmp+0x20>
 800e584:	3901      	subs	r1, #1
 800e586:	1884      	adds	r4, r0, r2
 800e588:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e58c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e590:	429a      	cmp	r2, r3
 800e592:	d103      	bne.n	800e59c <strncmp+0x1c>
 800e594:	42a0      	cmp	r0, r4
 800e596:	d001      	beq.n	800e59c <strncmp+0x1c>
 800e598:	2a00      	cmp	r2, #0
 800e59a:	d1f5      	bne.n	800e588 <strncmp+0x8>
 800e59c:	1ad0      	subs	r0, r2, r3
 800e59e:	bd10      	pop	{r4, pc}
 800e5a0:	4610      	mov	r0, r2
 800e5a2:	e7fc      	b.n	800e59e <strncmp+0x1e>

0800e5a4 <strncpy>:
 800e5a4:	b510      	push	{r4, lr}
 800e5a6:	3901      	subs	r1, #1
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	b132      	cbz	r2, 800e5ba <strncpy+0x16>
 800e5ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e5b0:	f803 4b01 	strb.w	r4, [r3], #1
 800e5b4:	3a01      	subs	r2, #1
 800e5b6:	2c00      	cmp	r4, #0
 800e5b8:	d1f7      	bne.n	800e5aa <strncpy+0x6>
 800e5ba:	441a      	add	r2, r3
 800e5bc:	2100      	movs	r1, #0
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d100      	bne.n	800e5c4 <strncpy+0x20>
 800e5c2:	bd10      	pop	{r4, pc}
 800e5c4:	f803 1b01 	strb.w	r1, [r3], #1
 800e5c8:	e7f9      	b.n	800e5be <strncpy+0x1a>
	...

0800e5cc <_close_r>:
 800e5cc:	b538      	push	{r3, r4, r5, lr}
 800e5ce:	4d06      	ldr	r5, [pc, #24]	@ (800e5e8 <_close_r+0x1c>)
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	4604      	mov	r4, r0
 800e5d4:	4608      	mov	r0, r1
 800e5d6:	602b      	str	r3, [r5, #0]
 800e5d8:	f7f2 fdae 	bl	8001138 <_close>
 800e5dc:	1c43      	adds	r3, r0, #1
 800e5de:	d102      	bne.n	800e5e6 <_close_r+0x1a>
 800e5e0:	682b      	ldr	r3, [r5, #0]
 800e5e2:	b103      	cbz	r3, 800e5e6 <_close_r+0x1a>
 800e5e4:	6023      	str	r3, [r4, #0]
 800e5e6:	bd38      	pop	{r3, r4, r5, pc}
 800e5e8:	200013a8 	.word	0x200013a8

0800e5ec <_lseek_r>:
 800e5ec:	b538      	push	{r3, r4, r5, lr}
 800e5ee:	4d07      	ldr	r5, [pc, #28]	@ (800e60c <_lseek_r+0x20>)
 800e5f0:	4604      	mov	r4, r0
 800e5f2:	4608      	mov	r0, r1
 800e5f4:	4611      	mov	r1, r2
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	602a      	str	r2, [r5, #0]
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	f7f2 fda8 	bl	8001150 <_lseek>
 800e600:	1c43      	adds	r3, r0, #1
 800e602:	d102      	bne.n	800e60a <_lseek_r+0x1e>
 800e604:	682b      	ldr	r3, [r5, #0]
 800e606:	b103      	cbz	r3, 800e60a <_lseek_r+0x1e>
 800e608:	6023      	str	r3, [r4, #0]
 800e60a:	bd38      	pop	{r3, r4, r5, pc}
 800e60c:	200013a8 	.word	0x200013a8

0800e610 <_read_r>:
 800e610:	b538      	push	{r3, r4, r5, lr}
 800e612:	4d07      	ldr	r5, [pc, #28]	@ (800e630 <_read_r+0x20>)
 800e614:	4604      	mov	r4, r0
 800e616:	4608      	mov	r0, r1
 800e618:	4611      	mov	r1, r2
 800e61a:	2200      	movs	r2, #0
 800e61c:	602a      	str	r2, [r5, #0]
 800e61e:	461a      	mov	r2, r3
 800e620:	f7f2 fd6e 	bl	8001100 <_read>
 800e624:	1c43      	adds	r3, r0, #1
 800e626:	d102      	bne.n	800e62e <_read_r+0x1e>
 800e628:	682b      	ldr	r3, [r5, #0]
 800e62a:	b103      	cbz	r3, 800e62e <_read_r+0x1e>
 800e62c:	6023      	str	r3, [r4, #0]
 800e62e:	bd38      	pop	{r3, r4, r5, pc}
 800e630:	200013a8 	.word	0x200013a8

0800e634 <_write_r>:
 800e634:	b538      	push	{r3, r4, r5, lr}
 800e636:	4d07      	ldr	r5, [pc, #28]	@ (800e654 <_write_r+0x20>)
 800e638:	4604      	mov	r4, r0
 800e63a:	4608      	mov	r0, r1
 800e63c:	4611      	mov	r1, r2
 800e63e:	2200      	movs	r2, #0
 800e640:	602a      	str	r2, [r5, #0]
 800e642:	461a      	mov	r2, r3
 800e644:	f7f2 fd6a 	bl	800111c <_write>
 800e648:	1c43      	adds	r3, r0, #1
 800e64a:	d102      	bne.n	800e652 <_write_r+0x1e>
 800e64c:	682b      	ldr	r3, [r5, #0]
 800e64e:	b103      	cbz	r3, 800e652 <_write_r+0x1e>
 800e650:	6023      	str	r3, [r4, #0]
 800e652:	bd38      	pop	{r3, r4, r5, pc}
 800e654:	200013a8 	.word	0x200013a8

0800e658 <__errno>:
 800e658:	4b01      	ldr	r3, [pc, #4]	@ (800e660 <__errno+0x8>)
 800e65a:	6818      	ldr	r0, [r3, #0]
 800e65c:	4770      	bx	lr
 800e65e:	bf00      	nop
 800e660:	20000048 	.word	0x20000048

0800e664 <__libc_init_array>:
 800e664:	b570      	push	{r4, r5, r6, lr}
 800e666:	4d0d      	ldr	r5, [pc, #52]	@ (800e69c <__libc_init_array+0x38>)
 800e668:	4c0d      	ldr	r4, [pc, #52]	@ (800e6a0 <__libc_init_array+0x3c>)
 800e66a:	1b64      	subs	r4, r4, r5
 800e66c:	10a4      	asrs	r4, r4, #2
 800e66e:	2600      	movs	r6, #0
 800e670:	42a6      	cmp	r6, r4
 800e672:	d109      	bne.n	800e688 <__libc_init_array+0x24>
 800e674:	4d0b      	ldr	r5, [pc, #44]	@ (800e6a4 <__libc_init_array+0x40>)
 800e676:	4c0c      	ldr	r4, [pc, #48]	@ (800e6a8 <__libc_init_array+0x44>)
 800e678:	f001 faec 	bl	800fc54 <_init>
 800e67c:	1b64      	subs	r4, r4, r5
 800e67e:	10a4      	asrs	r4, r4, #2
 800e680:	2600      	movs	r6, #0
 800e682:	42a6      	cmp	r6, r4
 800e684:	d105      	bne.n	800e692 <__libc_init_array+0x2e>
 800e686:	bd70      	pop	{r4, r5, r6, pc}
 800e688:	f855 3b04 	ldr.w	r3, [r5], #4
 800e68c:	4798      	blx	r3
 800e68e:	3601      	adds	r6, #1
 800e690:	e7ee      	b.n	800e670 <__libc_init_array+0xc>
 800e692:	f855 3b04 	ldr.w	r3, [r5], #4
 800e696:	4798      	blx	r3
 800e698:	3601      	adds	r6, #1
 800e69a:	e7f2      	b.n	800e682 <__libc_init_array+0x1e>
 800e69c:	08011e70 	.word	0x08011e70
 800e6a0:	08011e70 	.word	0x08011e70
 800e6a4:	08011e70 	.word	0x08011e70
 800e6a8:	08011e74 	.word	0x08011e74

0800e6ac <__retarget_lock_init_recursive>:
 800e6ac:	4770      	bx	lr

0800e6ae <__retarget_lock_acquire_recursive>:
 800e6ae:	4770      	bx	lr

0800e6b0 <__retarget_lock_release_recursive>:
 800e6b0:	4770      	bx	lr
	...

0800e6b4 <__assert_func>:
 800e6b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6b6:	4614      	mov	r4, r2
 800e6b8:	461a      	mov	r2, r3
 800e6ba:	4b09      	ldr	r3, [pc, #36]	@ (800e6e0 <__assert_func+0x2c>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	4605      	mov	r5, r0
 800e6c0:	68d8      	ldr	r0, [r3, #12]
 800e6c2:	b954      	cbnz	r4, 800e6da <__assert_func+0x26>
 800e6c4:	4b07      	ldr	r3, [pc, #28]	@ (800e6e4 <__assert_func+0x30>)
 800e6c6:	461c      	mov	r4, r3
 800e6c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e6cc:	9100      	str	r1, [sp, #0]
 800e6ce:	462b      	mov	r3, r5
 800e6d0:	4905      	ldr	r1, [pc, #20]	@ (800e6e8 <__assert_func+0x34>)
 800e6d2:	f000 fcd3 	bl	800f07c <fiprintf>
 800e6d6:	f000 fd67 	bl	800f1a8 <abort>
 800e6da:	4b04      	ldr	r3, [pc, #16]	@ (800e6ec <__assert_func+0x38>)
 800e6dc:	e7f4      	b.n	800e6c8 <__assert_func+0x14>
 800e6de:	bf00      	nop
 800e6e0:	20000048 	.word	0x20000048
 800e6e4:	08011d16 	.word	0x08011d16
 800e6e8:	08011ce8 	.word	0x08011ce8
 800e6ec:	08011cdb 	.word	0x08011cdb

0800e6f0 <_free_r>:
 800e6f0:	b538      	push	{r3, r4, r5, lr}
 800e6f2:	4605      	mov	r5, r0
 800e6f4:	2900      	cmp	r1, #0
 800e6f6:	d041      	beq.n	800e77c <_free_r+0x8c>
 800e6f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6fc:	1f0c      	subs	r4, r1, #4
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	bfb8      	it	lt
 800e702:	18e4      	addlt	r4, r4, r3
 800e704:	f000 f8e8 	bl	800e8d8 <__malloc_lock>
 800e708:	4a1d      	ldr	r2, [pc, #116]	@ (800e780 <_free_r+0x90>)
 800e70a:	6813      	ldr	r3, [r2, #0]
 800e70c:	b933      	cbnz	r3, 800e71c <_free_r+0x2c>
 800e70e:	6063      	str	r3, [r4, #4]
 800e710:	6014      	str	r4, [r2, #0]
 800e712:	4628      	mov	r0, r5
 800e714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e718:	f000 b8e4 	b.w	800e8e4 <__malloc_unlock>
 800e71c:	42a3      	cmp	r3, r4
 800e71e:	d908      	bls.n	800e732 <_free_r+0x42>
 800e720:	6820      	ldr	r0, [r4, #0]
 800e722:	1821      	adds	r1, r4, r0
 800e724:	428b      	cmp	r3, r1
 800e726:	bf01      	itttt	eq
 800e728:	6819      	ldreq	r1, [r3, #0]
 800e72a:	685b      	ldreq	r3, [r3, #4]
 800e72c:	1809      	addeq	r1, r1, r0
 800e72e:	6021      	streq	r1, [r4, #0]
 800e730:	e7ed      	b.n	800e70e <_free_r+0x1e>
 800e732:	461a      	mov	r2, r3
 800e734:	685b      	ldr	r3, [r3, #4]
 800e736:	b10b      	cbz	r3, 800e73c <_free_r+0x4c>
 800e738:	42a3      	cmp	r3, r4
 800e73a:	d9fa      	bls.n	800e732 <_free_r+0x42>
 800e73c:	6811      	ldr	r1, [r2, #0]
 800e73e:	1850      	adds	r0, r2, r1
 800e740:	42a0      	cmp	r0, r4
 800e742:	d10b      	bne.n	800e75c <_free_r+0x6c>
 800e744:	6820      	ldr	r0, [r4, #0]
 800e746:	4401      	add	r1, r0
 800e748:	1850      	adds	r0, r2, r1
 800e74a:	4283      	cmp	r3, r0
 800e74c:	6011      	str	r1, [r2, #0]
 800e74e:	d1e0      	bne.n	800e712 <_free_r+0x22>
 800e750:	6818      	ldr	r0, [r3, #0]
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	6053      	str	r3, [r2, #4]
 800e756:	4408      	add	r0, r1
 800e758:	6010      	str	r0, [r2, #0]
 800e75a:	e7da      	b.n	800e712 <_free_r+0x22>
 800e75c:	d902      	bls.n	800e764 <_free_r+0x74>
 800e75e:	230c      	movs	r3, #12
 800e760:	602b      	str	r3, [r5, #0]
 800e762:	e7d6      	b.n	800e712 <_free_r+0x22>
 800e764:	6820      	ldr	r0, [r4, #0]
 800e766:	1821      	adds	r1, r4, r0
 800e768:	428b      	cmp	r3, r1
 800e76a:	bf04      	itt	eq
 800e76c:	6819      	ldreq	r1, [r3, #0]
 800e76e:	685b      	ldreq	r3, [r3, #4]
 800e770:	6063      	str	r3, [r4, #4]
 800e772:	bf04      	itt	eq
 800e774:	1809      	addeq	r1, r1, r0
 800e776:	6021      	streq	r1, [r4, #0]
 800e778:	6054      	str	r4, [r2, #4]
 800e77a:	e7ca      	b.n	800e712 <_free_r+0x22>
 800e77c:	bd38      	pop	{r3, r4, r5, pc}
 800e77e:	bf00      	nop
 800e780:	200013b4 	.word	0x200013b4

0800e784 <malloc>:
 800e784:	4b02      	ldr	r3, [pc, #8]	@ (800e790 <malloc+0xc>)
 800e786:	4601      	mov	r1, r0
 800e788:	6818      	ldr	r0, [r3, #0]
 800e78a:	f000 b825 	b.w	800e7d8 <_malloc_r>
 800e78e:	bf00      	nop
 800e790:	20000048 	.word	0x20000048

0800e794 <sbrk_aligned>:
 800e794:	b570      	push	{r4, r5, r6, lr}
 800e796:	4e0f      	ldr	r6, [pc, #60]	@ (800e7d4 <sbrk_aligned+0x40>)
 800e798:	460c      	mov	r4, r1
 800e79a:	6831      	ldr	r1, [r6, #0]
 800e79c:	4605      	mov	r5, r0
 800e79e:	b911      	cbnz	r1, 800e7a6 <sbrk_aligned+0x12>
 800e7a0:	f000 fcf2 	bl	800f188 <_sbrk_r>
 800e7a4:	6030      	str	r0, [r6, #0]
 800e7a6:	4621      	mov	r1, r4
 800e7a8:	4628      	mov	r0, r5
 800e7aa:	f000 fced 	bl	800f188 <_sbrk_r>
 800e7ae:	1c43      	adds	r3, r0, #1
 800e7b0:	d103      	bne.n	800e7ba <sbrk_aligned+0x26>
 800e7b2:	f04f 34ff 	mov.w	r4, #4294967295
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	bd70      	pop	{r4, r5, r6, pc}
 800e7ba:	1cc4      	adds	r4, r0, #3
 800e7bc:	f024 0403 	bic.w	r4, r4, #3
 800e7c0:	42a0      	cmp	r0, r4
 800e7c2:	d0f8      	beq.n	800e7b6 <sbrk_aligned+0x22>
 800e7c4:	1a21      	subs	r1, r4, r0
 800e7c6:	4628      	mov	r0, r5
 800e7c8:	f000 fcde 	bl	800f188 <_sbrk_r>
 800e7cc:	3001      	adds	r0, #1
 800e7ce:	d1f2      	bne.n	800e7b6 <sbrk_aligned+0x22>
 800e7d0:	e7ef      	b.n	800e7b2 <sbrk_aligned+0x1e>
 800e7d2:	bf00      	nop
 800e7d4:	200013b0 	.word	0x200013b0

0800e7d8 <_malloc_r>:
 800e7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7dc:	1ccd      	adds	r5, r1, #3
 800e7de:	f025 0503 	bic.w	r5, r5, #3
 800e7e2:	3508      	adds	r5, #8
 800e7e4:	2d0c      	cmp	r5, #12
 800e7e6:	bf38      	it	cc
 800e7e8:	250c      	movcc	r5, #12
 800e7ea:	2d00      	cmp	r5, #0
 800e7ec:	4606      	mov	r6, r0
 800e7ee:	db01      	blt.n	800e7f4 <_malloc_r+0x1c>
 800e7f0:	42a9      	cmp	r1, r5
 800e7f2:	d904      	bls.n	800e7fe <_malloc_r+0x26>
 800e7f4:	230c      	movs	r3, #12
 800e7f6:	6033      	str	r3, [r6, #0]
 800e7f8:	2000      	movs	r0, #0
 800e7fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e8d4 <_malloc_r+0xfc>
 800e802:	f000 f869 	bl	800e8d8 <__malloc_lock>
 800e806:	f8d8 3000 	ldr.w	r3, [r8]
 800e80a:	461c      	mov	r4, r3
 800e80c:	bb44      	cbnz	r4, 800e860 <_malloc_r+0x88>
 800e80e:	4629      	mov	r1, r5
 800e810:	4630      	mov	r0, r6
 800e812:	f7ff ffbf 	bl	800e794 <sbrk_aligned>
 800e816:	1c43      	adds	r3, r0, #1
 800e818:	4604      	mov	r4, r0
 800e81a:	d158      	bne.n	800e8ce <_malloc_r+0xf6>
 800e81c:	f8d8 4000 	ldr.w	r4, [r8]
 800e820:	4627      	mov	r7, r4
 800e822:	2f00      	cmp	r7, #0
 800e824:	d143      	bne.n	800e8ae <_malloc_r+0xd6>
 800e826:	2c00      	cmp	r4, #0
 800e828:	d04b      	beq.n	800e8c2 <_malloc_r+0xea>
 800e82a:	6823      	ldr	r3, [r4, #0]
 800e82c:	4639      	mov	r1, r7
 800e82e:	4630      	mov	r0, r6
 800e830:	eb04 0903 	add.w	r9, r4, r3
 800e834:	f000 fca8 	bl	800f188 <_sbrk_r>
 800e838:	4581      	cmp	r9, r0
 800e83a:	d142      	bne.n	800e8c2 <_malloc_r+0xea>
 800e83c:	6821      	ldr	r1, [r4, #0]
 800e83e:	1a6d      	subs	r5, r5, r1
 800e840:	4629      	mov	r1, r5
 800e842:	4630      	mov	r0, r6
 800e844:	f7ff ffa6 	bl	800e794 <sbrk_aligned>
 800e848:	3001      	adds	r0, #1
 800e84a:	d03a      	beq.n	800e8c2 <_malloc_r+0xea>
 800e84c:	6823      	ldr	r3, [r4, #0]
 800e84e:	442b      	add	r3, r5
 800e850:	6023      	str	r3, [r4, #0]
 800e852:	f8d8 3000 	ldr.w	r3, [r8]
 800e856:	685a      	ldr	r2, [r3, #4]
 800e858:	bb62      	cbnz	r2, 800e8b4 <_malloc_r+0xdc>
 800e85a:	f8c8 7000 	str.w	r7, [r8]
 800e85e:	e00f      	b.n	800e880 <_malloc_r+0xa8>
 800e860:	6822      	ldr	r2, [r4, #0]
 800e862:	1b52      	subs	r2, r2, r5
 800e864:	d420      	bmi.n	800e8a8 <_malloc_r+0xd0>
 800e866:	2a0b      	cmp	r2, #11
 800e868:	d917      	bls.n	800e89a <_malloc_r+0xc2>
 800e86a:	1961      	adds	r1, r4, r5
 800e86c:	42a3      	cmp	r3, r4
 800e86e:	6025      	str	r5, [r4, #0]
 800e870:	bf18      	it	ne
 800e872:	6059      	strne	r1, [r3, #4]
 800e874:	6863      	ldr	r3, [r4, #4]
 800e876:	bf08      	it	eq
 800e878:	f8c8 1000 	streq.w	r1, [r8]
 800e87c:	5162      	str	r2, [r4, r5]
 800e87e:	604b      	str	r3, [r1, #4]
 800e880:	4630      	mov	r0, r6
 800e882:	f000 f82f 	bl	800e8e4 <__malloc_unlock>
 800e886:	f104 000b 	add.w	r0, r4, #11
 800e88a:	1d23      	adds	r3, r4, #4
 800e88c:	f020 0007 	bic.w	r0, r0, #7
 800e890:	1ac2      	subs	r2, r0, r3
 800e892:	bf1c      	itt	ne
 800e894:	1a1b      	subne	r3, r3, r0
 800e896:	50a3      	strne	r3, [r4, r2]
 800e898:	e7af      	b.n	800e7fa <_malloc_r+0x22>
 800e89a:	6862      	ldr	r2, [r4, #4]
 800e89c:	42a3      	cmp	r3, r4
 800e89e:	bf0c      	ite	eq
 800e8a0:	f8c8 2000 	streq.w	r2, [r8]
 800e8a4:	605a      	strne	r2, [r3, #4]
 800e8a6:	e7eb      	b.n	800e880 <_malloc_r+0xa8>
 800e8a8:	4623      	mov	r3, r4
 800e8aa:	6864      	ldr	r4, [r4, #4]
 800e8ac:	e7ae      	b.n	800e80c <_malloc_r+0x34>
 800e8ae:	463c      	mov	r4, r7
 800e8b0:	687f      	ldr	r7, [r7, #4]
 800e8b2:	e7b6      	b.n	800e822 <_malloc_r+0x4a>
 800e8b4:	461a      	mov	r2, r3
 800e8b6:	685b      	ldr	r3, [r3, #4]
 800e8b8:	42a3      	cmp	r3, r4
 800e8ba:	d1fb      	bne.n	800e8b4 <_malloc_r+0xdc>
 800e8bc:	2300      	movs	r3, #0
 800e8be:	6053      	str	r3, [r2, #4]
 800e8c0:	e7de      	b.n	800e880 <_malloc_r+0xa8>
 800e8c2:	230c      	movs	r3, #12
 800e8c4:	6033      	str	r3, [r6, #0]
 800e8c6:	4630      	mov	r0, r6
 800e8c8:	f000 f80c 	bl	800e8e4 <__malloc_unlock>
 800e8cc:	e794      	b.n	800e7f8 <_malloc_r+0x20>
 800e8ce:	6005      	str	r5, [r0, #0]
 800e8d0:	e7d6      	b.n	800e880 <_malloc_r+0xa8>
 800e8d2:	bf00      	nop
 800e8d4:	200013b4 	.word	0x200013b4

0800e8d8 <__malloc_lock>:
 800e8d8:	4801      	ldr	r0, [pc, #4]	@ (800e8e0 <__malloc_lock+0x8>)
 800e8da:	f7ff bee8 	b.w	800e6ae <__retarget_lock_acquire_recursive>
 800e8de:	bf00      	nop
 800e8e0:	200013ac 	.word	0x200013ac

0800e8e4 <__malloc_unlock>:
 800e8e4:	4801      	ldr	r0, [pc, #4]	@ (800e8ec <__malloc_unlock+0x8>)
 800e8e6:	f7ff bee3 	b.w	800e6b0 <__retarget_lock_release_recursive>
 800e8ea:	bf00      	nop
 800e8ec:	200013ac 	.word	0x200013ac

0800e8f0 <_sungetc_r>:
 800e8f0:	b538      	push	{r3, r4, r5, lr}
 800e8f2:	1c4b      	adds	r3, r1, #1
 800e8f4:	4614      	mov	r4, r2
 800e8f6:	d103      	bne.n	800e900 <_sungetc_r+0x10>
 800e8f8:	f04f 35ff 	mov.w	r5, #4294967295
 800e8fc:	4628      	mov	r0, r5
 800e8fe:	bd38      	pop	{r3, r4, r5, pc}
 800e900:	8993      	ldrh	r3, [r2, #12]
 800e902:	f023 0320 	bic.w	r3, r3, #32
 800e906:	8193      	strh	r3, [r2, #12]
 800e908:	6853      	ldr	r3, [r2, #4]
 800e90a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800e90c:	b2cd      	uxtb	r5, r1
 800e90e:	b18a      	cbz	r2, 800e934 <_sungetc_r+0x44>
 800e910:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800e912:	429a      	cmp	r2, r3
 800e914:	dd08      	ble.n	800e928 <_sungetc_r+0x38>
 800e916:	6823      	ldr	r3, [r4, #0]
 800e918:	1e5a      	subs	r2, r3, #1
 800e91a:	6022      	str	r2, [r4, #0]
 800e91c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e920:	6863      	ldr	r3, [r4, #4]
 800e922:	3301      	adds	r3, #1
 800e924:	6063      	str	r3, [r4, #4]
 800e926:	e7e9      	b.n	800e8fc <_sungetc_r+0xc>
 800e928:	4621      	mov	r1, r4
 800e92a:	f000 fbf2 	bl	800f112 <__submore>
 800e92e:	2800      	cmp	r0, #0
 800e930:	d0f1      	beq.n	800e916 <_sungetc_r+0x26>
 800e932:	e7e1      	b.n	800e8f8 <_sungetc_r+0x8>
 800e934:	6921      	ldr	r1, [r4, #16]
 800e936:	6822      	ldr	r2, [r4, #0]
 800e938:	b141      	cbz	r1, 800e94c <_sungetc_r+0x5c>
 800e93a:	4291      	cmp	r1, r2
 800e93c:	d206      	bcs.n	800e94c <_sungetc_r+0x5c>
 800e93e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800e942:	42a9      	cmp	r1, r5
 800e944:	d102      	bne.n	800e94c <_sungetc_r+0x5c>
 800e946:	3a01      	subs	r2, #1
 800e948:	6022      	str	r2, [r4, #0]
 800e94a:	e7ea      	b.n	800e922 <_sungetc_r+0x32>
 800e94c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800e950:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e954:	6363      	str	r3, [r4, #52]	@ 0x34
 800e956:	2303      	movs	r3, #3
 800e958:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e95a:	4623      	mov	r3, r4
 800e95c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e960:	6023      	str	r3, [r4, #0]
 800e962:	2301      	movs	r3, #1
 800e964:	e7de      	b.n	800e924 <_sungetc_r+0x34>

0800e966 <__ssrefill_r>:
 800e966:	b510      	push	{r4, lr}
 800e968:	460c      	mov	r4, r1
 800e96a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e96c:	b169      	cbz	r1, 800e98a <__ssrefill_r+0x24>
 800e96e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e972:	4299      	cmp	r1, r3
 800e974:	d001      	beq.n	800e97a <__ssrefill_r+0x14>
 800e976:	f7ff febb 	bl	800e6f0 <_free_r>
 800e97a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e97c:	6063      	str	r3, [r4, #4]
 800e97e:	2000      	movs	r0, #0
 800e980:	6360      	str	r0, [r4, #52]	@ 0x34
 800e982:	b113      	cbz	r3, 800e98a <__ssrefill_r+0x24>
 800e984:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e986:	6023      	str	r3, [r4, #0]
 800e988:	bd10      	pop	{r4, pc}
 800e98a:	6923      	ldr	r3, [r4, #16]
 800e98c:	6023      	str	r3, [r4, #0]
 800e98e:	2300      	movs	r3, #0
 800e990:	6063      	str	r3, [r4, #4]
 800e992:	89a3      	ldrh	r3, [r4, #12]
 800e994:	f043 0320 	orr.w	r3, r3, #32
 800e998:	81a3      	strh	r3, [r4, #12]
 800e99a:	f04f 30ff 	mov.w	r0, #4294967295
 800e99e:	e7f3      	b.n	800e988 <__ssrefill_r+0x22>

0800e9a0 <__ssvfiscanf_r>:
 800e9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9a4:	460c      	mov	r4, r1
 800e9a6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800e9aa:	2100      	movs	r1, #0
 800e9ac:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800e9b0:	49a5      	ldr	r1, [pc, #660]	@ (800ec48 <__ssvfiscanf_r+0x2a8>)
 800e9b2:	91a0      	str	r1, [sp, #640]	@ 0x280
 800e9b4:	f10d 0804 	add.w	r8, sp, #4
 800e9b8:	49a4      	ldr	r1, [pc, #656]	@ (800ec4c <__ssvfiscanf_r+0x2ac>)
 800e9ba:	4fa5      	ldr	r7, [pc, #660]	@ (800ec50 <__ssvfiscanf_r+0x2b0>)
 800e9bc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800e9c0:	4606      	mov	r6, r0
 800e9c2:	91a1      	str	r1, [sp, #644]	@ 0x284
 800e9c4:	9300      	str	r3, [sp, #0]
 800e9c6:	7813      	ldrb	r3, [r2, #0]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	f000 8158 	beq.w	800ec7e <__ssvfiscanf_r+0x2de>
 800e9ce:	5cf9      	ldrb	r1, [r7, r3]
 800e9d0:	f011 0108 	ands.w	r1, r1, #8
 800e9d4:	f102 0501 	add.w	r5, r2, #1
 800e9d8:	d019      	beq.n	800ea0e <__ssvfiscanf_r+0x6e>
 800e9da:	6863      	ldr	r3, [r4, #4]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	dd0f      	ble.n	800ea00 <__ssvfiscanf_r+0x60>
 800e9e0:	6823      	ldr	r3, [r4, #0]
 800e9e2:	781a      	ldrb	r2, [r3, #0]
 800e9e4:	5cba      	ldrb	r2, [r7, r2]
 800e9e6:	0712      	lsls	r2, r2, #28
 800e9e8:	d401      	bmi.n	800e9ee <__ssvfiscanf_r+0x4e>
 800e9ea:	462a      	mov	r2, r5
 800e9ec:	e7eb      	b.n	800e9c6 <__ssvfiscanf_r+0x26>
 800e9ee:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e9f0:	3201      	adds	r2, #1
 800e9f2:	9245      	str	r2, [sp, #276]	@ 0x114
 800e9f4:	6862      	ldr	r2, [r4, #4]
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	3a01      	subs	r2, #1
 800e9fa:	6062      	str	r2, [r4, #4]
 800e9fc:	6023      	str	r3, [r4, #0]
 800e9fe:	e7ec      	b.n	800e9da <__ssvfiscanf_r+0x3a>
 800ea00:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ea02:	4621      	mov	r1, r4
 800ea04:	4630      	mov	r0, r6
 800ea06:	4798      	blx	r3
 800ea08:	2800      	cmp	r0, #0
 800ea0a:	d0e9      	beq.n	800e9e0 <__ssvfiscanf_r+0x40>
 800ea0c:	e7ed      	b.n	800e9ea <__ssvfiscanf_r+0x4a>
 800ea0e:	2b25      	cmp	r3, #37	@ 0x25
 800ea10:	d012      	beq.n	800ea38 <__ssvfiscanf_r+0x98>
 800ea12:	4699      	mov	r9, r3
 800ea14:	6863      	ldr	r3, [r4, #4]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	f340 8093 	ble.w	800eb42 <__ssvfiscanf_r+0x1a2>
 800ea1c:	6822      	ldr	r2, [r4, #0]
 800ea1e:	7813      	ldrb	r3, [r2, #0]
 800ea20:	454b      	cmp	r3, r9
 800ea22:	f040 812c 	bne.w	800ec7e <__ssvfiscanf_r+0x2de>
 800ea26:	6863      	ldr	r3, [r4, #4]
 800ea28:	3b01      	subs	r3, #1
 800ea2a:	6063      	str	r3, [r4, #4]
 800ea2c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800ea2e:	3201      	adds	r2, #1
 800ea30:	3301      	adds	r3, #1
 800ea32:	6022      	str	r2, [r4, #0]
 800ea34:	9345      	str	r3, [sp, #276]	@ 0x114
 800ea36:	e7d8      	b.n	800e9ea <__ssvfiscanf_r+0x4a>
 800ea38:	9141      	str	r1, [sp, #260]	@ 0x104
 800ea3a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ea3c:	7853      	ldrb	r3, [r2, #1]
 800ea3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea40:	bf02      	ittt	eq
 800ea42:	2310      	moveq	r3, #16
 800ea44:	1c95      	addeq	r5, r2, #2
 800ea46:	9341      	streq	r3, [sp, #260]	@ 0x104
 800ea48:	220a      	movs	r2, #10
 800ea4a:	46a9      	mov	r9, r5
 800ea4c:	f819 1b01 	ldrb.w	r1, [r9], #1
 800ea50:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800ea54:	2b09      	cmp	r3, #9
 800ea56:	d91e      	bls.n	800ea96 <__ssvfiscanf_r+0xf6>
 800ea58:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800ec54 <__ssvfiscanf_r+0x2b4>
 800ea5c:	2203      	movs	r2, #3
 800ea5e:	4650      	mov	r0, sl
 800ea60:	f7f1 fc56 	bl	8000310 <memchr>
 800ea64:	b138      	cbz	r0, 800ea76 <__ssvfiscanf_r+0xd6>
 800ea66:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ea68:	eba0 000a 	sub.w	r0, r0, sl
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	4083      	lsls	r3, r0
 800ea70:	4313      	orrs	r3, r2
 800ea72:	9341      	str	r3, [sp, #260]	@ 0x104
 800ea74:	464d      	mov	r5, r9
 800ea76:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ea7a:	2b78      	cmp	r3, #120	@ 0x78
 800ea7c:	d806      	bhi.n	800ea8c <__ssvfiscanf_r+0xec>
 800ea7e:	2b57      	cmp	r3, #87	@ 0x57
 800ea80:	d810      	bhi.n	800eaa4 <__ssvfiscanf_r+0x104>
 800ea82:	2b25      	cmp	r3, #37	@ 0x25
 800ea84:	d0c5      	beq.n	800ea12 <__ssvfiscanf_r+0x72>
 800ea86:	d857      	bhi.n	800eb38 <__ssvfiscanf_r+0x198>
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d065      	beq.n	800eb58 <__ssvfiscanf_r+0x1b8>
 800ea8c:	2303      	movs	r3, #3
 800ea8e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ea90:	230a      	movs	r3, #10
 800ea92:	9342      	str	r3, [sp, #264]	@ 0x108
 800ea94:	e078      	b.n	800eb88 <__ssvfiscanf_r+0x1e8>
 800ea96:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800ea98:	fb02 1103 	mla	r1, r2, r3, r1
 800ea9c:	3930      	subs	r1, #48	@ 0x30
 800ea9e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800eaa0:	464d      	mov	r5, r9
 800eaa2:	e7d2      	b.n	800ea4a <__ssvfiscanf_r+0xaa>
 800eaa4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800eaa8:	2a20      	cmp	r2, #32
 800eaaa:	d8ef      	bhi.n	800ea8c <__ssvfiscanf_r+0xec>
 800eaac:	a101      	add	r1, pc, #4	@ (adr r1, 800eab4 <__ssvfiscanf_r+0x114>)
 800eaae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800eab2:	bf00      	nop
 800eab4:	0800eb67 	.word	0x0800eb67
 800eab8:	0800ea8d 	.word	0x0800ea8d
 800eabc:	0800ea8d 	.word	0x0800ea8d
 800eac0:	0800ebc1 	.word	0x0800ebc1
 800eac4:	0800ea8d 	.word	0x0800ea8d
 800eac8:	0800ea8d 	.word	0x0800ea8d
 800eacc:	0800ea8d 	.word	0x0800ea8d
 800ead0:	0800ea8d 	.word	0x0800ea8d
 800ead4:	0800ea8d 	.word	0x0800ea8d
 800ead8:	0800ea8d 	.word	0x0800ea8d
 800eadc:	0800ea8d 	.word	0x0800ea8d
 800eae0:	0800ebd7 	.word	0x0800ebd7
 800eae4:	0800ebbd 	.word	0x0800ebbd
 800eae8:	0800eb3f 	.word	0x0800eb3f
 800eaec:	0800eb3f 	.word	0x0800eb3f
 800eaf0:	0800eb3f 	.word	0x0800eb3f
 800eaf4:	0800ea8d 	.word	0x0800ea8d
 800eaf8:	0800eb79 	.word	0x0800eb79
 800eafc:	0800ea8d 	.word	0x0800ea8d
 800eb00:	0800ea8d 	.word	0x0800ea8d
 800eb04:	0800ea8d 	.word	0x0800ea8d
 800eb08:	0800ea8d 	.word	0x0800ea8d
 800eb0c:	0800ebe7 	.word	0x0800ebe7
 800eb10:	0800eb81 	.word	0x0800eb81
 800eb14:	0800eb5f 	.word	0x0800eb5f
 800eb18:	0800ea8d 	.word	0x0800ea8d
 800eb1c:	0800ea8d 	.word	0x0800ea8d
 800eb20:	0800ebe3 	.word	0x0800ebe3
 800eb24:	0800ea8d 	.word	0x0800ea8d
 800eb28:	0800ebbd 	.word	0x0800ebbd
 800eb2c:	0800ea8d 	.word	0x0800ea8d
 800eb30:	0800ea8d 	.word	0x0800ea8d
 800eb34:	0800eb67 	.word	0x0800eb67
 800eb38:	3b45      	subs	r3, #69	@ 0x45
 800eb3a:	2b02      	cmp	r3, #2
 800eb3c:	d8a6      	bhi.n	800ea8c <__ssvfiscanf_r+0xec>
 800eb3e:	2305      	movs	r3, #5
 800eb40:	e021      	b.n	800eb86 <__ssvfiscanf_r+0x1e6>
 800eb42:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800eb44:	4621      	mov	r1, r4
 800eb46:	4630      	mov	r0, r6
 800eb48:	4798      	blx	r3
 800eb4a:	2800      	cmp	r0, #0
 800eb4c:	f43f af66 	beq.w	800ea1c <__ssvfiscanf_r+0x7c>
 800eb50:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800eb52:	2800      	cmp	r0, #0
 800eb54:	f040 808b 	bne.w	800ec6e <__ssvfiscanf_r+0x2ce>
 800eb58:	f04f 30ff 	mov.w	r0, #4294967295
 800eb5c:	e08b      	b.n	800ec76 <__ssvfiscanf_r+0x2d6>
 800eb5e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800eb60:	f042 0220 	orr.w	r2, r2, #32
 800eb64:	9241      	str	r2, [sp, #260]	@ 0x104
 800eb66:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800eb68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800eb6c:	9241      	str	r2, [sp, #260]	@ 0x104
 800eb6e:	2210      	movs	r2, #16
 800eb70:	2b6e      	cmp	r3, #110	@ 0x6e
 800eb72:	9242      	str	r2, [sp, #264]	@ 0x108
 800eb74:	d902      	bls.n	800eb7c <__ssvfiscanf_r+0x1dc>
 800eb76:	e005      	b.n	800eb84 <__ssvfiscanf_r+0x1e4>
 800eb78:	2300      	movs	r3, #0
 800eb7a:	9342      	str	r3, [sp, #264]	@ 0x108
 800eb7c:	2303      	movs	r3, #3
 800eb7e:	e002      	b.n	800eb86 <__ssvfiscanf_r+0x1e6>
 800eb80:	2308      	movs	r3, #8
 800eb82:	9342      	str	r3, [sp, #264]	@ 0x108
 800eb84:	2304      	movs	r3, #4
 800eb86:	9347      	str	r3, [sp, #284]	@ 0x11c
 800eb88:	6863      	ldr	r3, [r4, #4]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	dd39      	ble.n	800ec02 <__ssvfiscanf_r+0x262>
 800eb8e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800eb90:	0659      	lsls	r1, r3, #25
 800eb92:	d404      	bmi.n	800eb9e <__ssvfiscanf_r+0x1fe>
 800eb94:	6823      	ldr	r3, [r4, #0]
 800eb96:	781a      	ldrb	r2, [r3, #0]
 800eb98:	5cba      	ldrb	r2, [r7, r2]
 800eb9a:	0712      	lsls	r2, r2, #28
 800eb9c:	d438      	bmi.n	800ec10 <__ssvfiscanf_r+0x270>
 800eb9e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800eba0:	2b02      	cmp	r3, #2
 800eba2:	dc47      	bgt.n	800ec34 <__ssvfiscanf_r+0x294>
 800eba4:	466b      	mov	r3, sp
 800eba6:	4622      	mov	r2, r4
 800eba8:	a941      	add	r1, sp, #260	@ 0x104
 800ebaa:	4630      	mov	r0, r6
 800ebac:	f000 f86c 	bl	800ec88 <_scanf_chars>
 800ebb0:	2801      	cmp	r0, #1
 800ebb2:	d064      	beq.n	800ec7e <__ssvfiscanf_r+0x2de>
 800ebb4:	2802      	cmp	r0, #2
 800ebb6:	f47f af18 	bne.w	800e9ea <__ssvfiscanf_r+0x4a>
 800ebba:	e7c9      	b.n	800eb50 <__ssvfiscanf_r+0x1b0>
 800ebbc:	220a      	movs	r2, #10
 800ebbe:	e7d7      	b.n	800eb70 <__ssvfiscanf_r+0x1d0>
 800ebc0:	4629      	mov	r1, r5
 800ebc2:	4640      	mov	r0, r8
 800ebc4:	f000 fa6c 	bl	800f0a0 <__sccl>
 800ebc8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ebca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebce:	9341      	str	r3, [sp, #260]	@ 0x104
 800ebd0:	4605      	mov	r5, r0
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	e7d7      	b.n	800eb86 <__ssvfiscanf_r+0x1e6>
 800ebd6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ebd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebdc:	9341      	str	r3, [sp, #260]	@ 0x104
 800ebde:	2300      	movs	r3, #0
 800ebe0:	e7d1      	b.n	800eb86 <__ssvfiscanf_r+0x1e6>
 800ebe2:	2302      	movs	r3, #2
 800ebe4:	e7cf      	b.n	800eb86 <__ssvfiscanf_r+0x1e6>
 800ebe6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800ebe8:	06c3      	lsls	r3, r0, #27
 800ebea:	f53f aefe 	bmi.w	800e9ea <__ssvfiscanf_r+0x4a>
 800ebee:	9b00      	ldr	r3, [sp, #0]
 800ebf0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ebf2:	1d19      	adds	r1, r3, #4
 800ebf4:	9100      	str	r1, [sp, #0]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	07c0      	lsls	r0, r0, #31
 800ebfa:	bf4c      	ite	mi
 800ebfc:	801a      	strhmi	r2, [r3, #0]
 800ebfe:	601a      	strpl	r2, [r3, #0]
 800ec00:	e6f3      	b.n	800e9ea <__ssvfiscanf_r+0x4a>
 800ec02:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ec04:	4621      	mov	r1, r4
 800ec06:	4630      	mov	r0, r6
 800ec08:	4798      	blx	r3
 800ec0a:	2800      	cmp	r0, #0
 800ec0c:	d0bf      	beq.n	800eb8e <__ssvfiscanf_r+0x1ee>
 800ec0e:	e79f      	b.n	800eb50 <__ssvfiscanf_r+0x1b0>
 800ec10:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ec12:	3201      	adds	r2, #1
 800ec14:	9245      	str	r2, [sp, #276]	@ 0x114
 800ec16:	6862      	ldr	r2, [r4, #4]
 800ec18:	3a01      	subs	r2, #1
 800ec1a:	2a00      	cmp	r2, #0
 800ec1c:	6062      	str	r2, [r4, #4]
 800ec1e:	dd02      	ble.n	800ec26 <__ssvfiscanf_r+0x286>
 800ec20:	3301      	adds	r3, #1
 800ec22:	6023      	str	r3, [r4, #0]
 800ec24:	e7b6      	b.n	800eb94 <__ssvfiscanf_r+0x1f4>
 800ec26:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ec28:	4621      	mov	r1, r4
 800ec2a:	4630      	mov	r0, r6
 800ec2c:	4798      	blx	r3
 800ec2e:	2800      	cmp	r0, #0
 800ec30:	d0b0      	beq.n	800eb94 <__ssvfiscanf_r+0x1f4>
 800ec32:	e78d      	b.n	800eb50 <__ssvfiscanf_r+0x1b0>
 800ec34:	2b04      	cmp	r3, #4
 800ec36:	dc0f      	bgt.n	800ec58 <__ssvfiscanf_r+0x2b8>
 800ec38:	466b      	mov	r3, sp
 800ec3a:	4622      	mov	r2, r4
 800ec3c:	a941      	add	r1, sp, #260	@ 0x104
 800ec3e:	4630      	mov	r0, r6
 800ec40:	f000 f87c 	bl	800ed3c <_scanf_i>
 800ec44:	e7b4      	b.n	800ebb0 <__ssvfiscanf_r+0x210>
 800ec46:	bf00      	nop
 800ec48:	0800e8f1 	.word	0x0800e8f1
 800ec4c:	0800e967 	.word	0x0800e967
 800ec50:	08011d18 	.word	0x08011d18
 800ec54:	08011e18 	.word	0x08011e18
 800ec58:	4b0a      	ldr	r3, [pc, #40]	@ (800ec84 <__ssvfiscanf_r+0x2e4>)
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	f43f aec5 	beq.w	800e9ea <__ssvfiscanf_r+0x4a>
 800ec60:	466b      	mov	r3, sp
 800ec62:	4622      	mov	r2, r4
 800ec64:	a941      	add	r1, sp, #260	@ 0x104
 800ec66:	4630      	mov	r0, r6
 800ec68:	f3af 8000 	nop.w
 800ec6c:	e7a0      	b.n	800ebb0 <__ssvfiscanf_r+0x210>
 800ec6e:	89a3      	ldrh	r3, [r4, #12]
 800ec70:	065b      	lsls	r3, r3, #25
 800ec72:	f53f af71 	bmi.w	800eb58 <__ssvfiscanf_r+0x1b8>
 800ec76:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800ec7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec7e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ec80:	e7f9      	b.n	800ec76 <__ssvfiscanf_r+0x2d6>
 800ec82:	bf00      	nop
 800ec84:	00000000 	.word	0x00000000

0800ec88 <_scanf_chars>:
 800ec88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec8c:	4615      	mov	r5, r2
 800ec8e:	688a      	ldr	r2, [r1, #8]
 800ec90:	4680      	mov	r8, r0
 800ec92:	460c      	mov	r4, r1
 800ec94:	b932      	cbnz	r2, 800eca4 <_scanf_chars+0x1c>
 800ec96:	698a      	ldr	r2, [r1, #24]
 800ec98:	2a00      	cmp	r2, #0
 800ec9a:	bf14      	ite	ne
 800ec9c:	f04f 32ff 	movne.w	r2, #4294967295
 800eca0:	2201      	moveq	r2, #1
 800eca2:	608a      	str	r2, [r1, #8]
 800eca4:	6822      	ldr	r2, [r4, #0]
 800eca6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ed38 <_scanf_chars+0xb0>
 800ecaa:	06d1      	lsls	r1, r2, #27
 800ecac:	bf5f      	itttt	pl
 800ecae:	681a      	ldrpl	r2, [r3, #0]
 800ecb0:	1d11      	addpl	r1, r2, #4
 800ecb2:	6019      	strpl	r1, [r3, #0]
 800ecb4:	6816      	ldrpl	r6, [r2, #0]
 800ecb6:	2700      	movs	r7, #0
 800ecb8:	69a0      	ldr	r0, [r4, #24]
 800ecba:	b188      	cbz	r0, 800ece0 <_scanf_chars+0x58>
 800ecbc:	2801      	cmp	r0, #1
 800ecbe:	d107      	bne.n	800ecd0 <_scanf_chars+0x48>
 800ecc0:	682b      	ldr	r3, [r5, #0]
 800ecc2:	781a      	ldrb	r2, [r3, #0]
 800ecc4:	6963      	ldr	r3, [r4, #20]
 800ecc6:	5c9b      	ldrb	r3, [r3, r2]
 800ecc8:	b953      	cbnz	r3, 800ece0 <_scanf_chars+0x58>
 800ecca:	2f00      	cmp	r7, #0
 800eccc:	d031      	beq.n	800ed32 <_scanf_chars+0xaa>
 800ecce:	e022      	b.n	800ed16 <_scanf_chars+0x8e>
 800ecd0:	2802      	cmp	r0, #2
 800ecd2:	d120      	bne.n	800ed16 <_scanf_chars+0x8e>
 800ecd4:	682b      	ldr	r3, [r5, #0]
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ecdc:	071b      	lsls	r3, r3, #28
 800ecde:	d41a      	bmi.n	800ed16 <_scanf_chars+0x8e>
 800ece0:	6823      	ldr	r3, [r4, #0]
 800ece2:	06da      	lsls	r2, r3, #27
 800ece4:	bf5e      	ittt	pl
 800ece6:	682b      	ldrpl	r3, [r5, #0]
 800ece8:	781b      	ldrbpl	r3, [r3, #0]
 800ecea:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ecee:	682a      	ldr	r2, [r5, #0]
 800ecf0:	686b      	ldr	r3, [r5, #4]
 800ecf2:	3201      	adds	r2, #1
 800ecf4:	602a      	str	r2, [r5, #0]
 800ecf6:	68a2      	ldr	r2, [r4, #8]
 800ecf8:	3b01      	subs	r3, #1
 800ecfa:	3a01      	subs	r2, #1
 800ecfc:	606b      	str	r3, [r5, #4]
 800ecfe:	3701      	adds	r7, #1
 800ed00:	60a2      	str	r2, [r4, #8]
 800ed02:	b142      	cbz	r2, 800ed16 <_scanf_chars+0x8e>
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	dcd7      	bgt.n	800ecb8 <_scanf_chars+0x30>
 800ed08:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ed0c:	4629      	mov	r1, r5
 800ed0e:	4640      	mov	r0, r8
 800ed10:	4798      	blx	r3
 800ed12:	2800      	cmp	r0, #0
 800ed14:	d0d0      	beq.n	800ecb8 <_scanf_chars+0x30>
 800ed16:	6823      	ldr	r3, [r4, #0]
 800ed18:	f013 0310 	ands.w	r3, r3, #16
 800ed1c:	d105      	bne.n	800ed2a <_scanf_chars+0xa2>
 800ed1e:	68e2      	ldr	r2, [r4, #12]
 800ed20:	3201      	adds	r2, #1
 800ed22:	60e2      	str	r2, [r4, #12]
 800ed24:	69a2      	ldr	r2, [r4, #24]
 800ed26:	b102      	cbz	r2, 800ed2a <_scanf_chars+0xa2>
 800ed28:	7033      	strb	r3, [r6, #0]
 800ed2a:	6923      	ldr	r3, [r4, #16]
 800ed2c:	443b      	add	r3, r7
 800ed2e:	6123      	str	r3, [r4, #16]
 800ed30:	2000      	movs	r0, #0
 800ed32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed36:	bf00      	nop
 800ed38:	08011d18 	.word	0x08011d18

0800ed3c <_scanf_i>:
 800ed3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed40:	4698      	mov	r8, r3
 800ed42:	4b74      	ldr	r3, [pc, #464]	@ (800ef14 <_scanf_i+0x1d8>)
 800ed44:	460c      	mov	r4, r1
 800ed46:	4682      	mov	sl, r0
 800ed48:	4616      	mov	r6, r2
 800ed4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ed4e:	b087      	sub	sp, #28
 800ed50:	ab03      	add	r3, sp, #12
 800ed52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ed56:	4b70      	ldr	r3, [pc, #448]	@ (800ef18 <_scanf_i+0x1dc>)
 800ed58:	69a1      	ldr	r1, [r4, #24]
 800ed5a:	4a70      	ldr	r2, [pc, #448]	@ (800ef1c <_scanf_i+0x1e0>)
 800ed5c:	2903      	cmp	r1, #3
 800ed5e:	bf08      	it	eq
 800ed60:	461a      	moveq	r2, r3
 800ed62:	68a3      	ldr	r3, [r4, #8]
 800ed64:	9201      	str	r2, [sp, #4]
 800ed66:	1e5a      	subs	r2, r3, #1
 800ed68:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ed6c:	bf88      	it	hi
 800ed6e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ed72:	4627      	mov	r7, r4
 800ed74:	bf82      	ittt	hi
 800ed76:	eb03 0905 	addhi.w	r9, r3, r5
 800ed7a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ed7e:	60a3      	strhi	r3, [r4, #8]
 800ed80:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ed84:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800ed88:	bf98      	it	ls
 800ed8a:	f04f 0900 	movls.w	r9, #0
 800ed8e:	6023      	str	r3, [r4, #0]
 800ed90:	463d      	mov	r5, r7
 800ed92:	f04f 0b00 	mov.w	fp, #0
 800ed96:	6831      	ldr	r1, [r6, #0]
 800ed98:	ab03      	add	r3, sp, #12
 800ed9a:	7809      	ldrb	r1, [r1, #0]
 800ed9c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800eda0:	2202      	movs	r2, #2
 800eda2:	f7f1 fab5 	bl	8000310 <memchr>
 800eda6:	b328      	cbz	r0, 800edf4 <_scanf_i+0xb8>
 800eda8:	f1bb 0f01 	cmp.w	fp, #1
 800edac:	d159      	bne.n	800ee62 <_scanf_i+0x126>
 800edae:	6862      	ldr	r2, [r4, #4]
 800edb0:	b92a      	cbnz	r2, 800edbe <_scanf_i+0x82>
 800edb2:	6822      	ldr	r2, [r4, #0]
 800edb4:	2108      	movs	r1, #8
 800edb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800edba:	6061      	str	r1, [r4, #4]
 800edbc:	6022      	str	r2, [r4, #0]
 800edbe:	6822      	ldr	r2, [r4, #0]
 800edc0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800edc4:	6022      	str	r2, [r4, #0]
 800edc6:	68a2      	ldr	r2, [r4, #8]
 800edc8:	1e51      	subs	r1, r2, #1
 800edca:	60a1      	str	r1, [r4, #8]
 800edcc:	b192      	cbz	r2, 800edf4 <_scanf_i+0xb8>
 800edce:	6832      	ldr	r2, [r6, #0]
 800edd0:	1c51      	adds	r1, r2, #1
 800edd2:	6031      	str	r1, [r6, #0]
 800edd4:	7812      	ldrb	r2, [r2, #0]
 800edd6:	f805 2b01 	strb.w	r2, [r5], #1
 800edda:	6872      	ldr	r2, [r6, #4]
 800eddc:	3a01      	subs	r2, #1
 800edde:	2a00      	cmp	r2, #0
 800ede0:	6072      	str	r2, [r6, #4]
 800ede2:	dc07      	bgt.n	800edf4 <_scanf_i+0xb8>
 800ede4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800ede8:	4631      	mov	r1, r6
 800edea:	4650      	mov	r0, sl
 800edec:	4790      	blx	r2
 800edee:	2800      	cmp	r0, #0
 800edf0:	f040 8085 	bne.w	800eefe <_scanf_i+0x1c2>
 800edf4:	f10b 0b01 	add.w	fp, fp, #1
 800edf8:	f1bb 0f03 	cmp.w	fp, #3
 800edfc:	d1cb      	bne.n	800ed96 <_scanf_i+0x5a>
 800edfe:	6863      	ldr	r3, [r4, #4]
 800ee00:	b90b      	cbnz	r3, 800ee06 <_scanf_i+0xca>
 800ee02:	230a      	movs	r3, #10
 800ee04:	6063      	str	r3, [r4, #4]
 800ee06:	6863      	ldr	r3, [r4, #4]
 800ee08:	4945      	ldr	r1, [pc, #276]	@ (800ef20 <_scanf_i+0x1e4>)
 800ee0a:	6960      	ldr	r0, [r4, #20]
 800ee0c:	1ac9      	subs	r1, r1, r3
 800ee0e:	f000 f947 	bl	800f0a0 <__sccl>
 800ee12:	f04f 0b00 	mov.w	fp, #0
 800ee16:	68a3      	ldr	r3, [r4, #8]
 800ee18:	6822      	ldr	r2, [r4, #0]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d03d      	beq.n	800ee9a <_scanf_i+0x15e>
 800ee1e:	6831      	ldr	r1, [r6, #0]
 800ee20:	6960      	ldr	r0, [r4, #20]
 800ee22:	f891 c000 	ldrb.w	ip, [r1]
 800ee26:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ee2a:	2800      	cmp	r0, #0
 800ee2c:	d035      	beq.n	800ee9a <_scanf_i+0x15e>
 800ee2e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800ee32:	d124      	bne.n	800ee7e <_scanf_i+0x142>
 800ee34:	0510      	lsls	r0, r2, #20
 800ee36:	d522      	bpl.n	800ee7e <_scanf_i+0x142>
 800ee38:	f10b 0b01 	add.w	fp, fp, #1
 800ee3c:	f1b9 0f00 	cmp.w	r9, #0
 800ee40:	d003      	beq.n	800ee4a <_scanf_i+0x10e>
 800ee42:	3301      	adds	r3, #1
 800ee44:	f109 39ff 	add.w	r9, r9, #4294967295
 800ee48:	60a3      	str	r3, [r4, #8]
 800ee4a:	6873      	ldr	r3, [r6, #4]
 800ee4c:	3b01      	subs	r3, #1
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	6073      	str	r3, [r6, #4]
 800ee52:	dd1b      	ble.n	800ee8c <_scanf_i+0x150>
 800ee54:	6833      	ldr	r3, [r6, #0]
 800ee56:	3301      	adds	r3, #1
 800ee58:	6033      	str	r3, [r6, #0]
 800ee5a:	68a3      	ldr	r3, [r4, #8]
 800ee5c:	3b01      	subs	r3, #1
 800ee5e:	60a3      	str	r3, [r4, #8]
 800ee60:	e7d9      	b.n	800ee16 <_scanf_i+0xda>
 800ee62:	f1bb 0f02 	cmp.w	fp, #2
 800ee66:	d1ae      	bne.n	800edc6 <_scanf_i+0x8a>
 800ee68:	6822      	ldr	r2, [r4, #0]
 800ee6a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800ee6e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ee72:	d1bf      	bne.n	800edf4 <_scanf_i+0xb8>
 800ee74:	2110      	movs	r1, #16
 800ee76:	6061      	str	r1, [r4, #4]
 800ee78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ee7c:	e7a2      	b.n	800edc4 <_scanf_i+0x88>
 800ee7e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800ee82:	6022      	str	r2, [r4, #0]
 800ee84:	780b      	ldrb	r3, [r1, #0]
 800ee86:	f805 3b01 	strb.w	r3, [r5], #1
 800ee8a:	e7de      	b.n	800ee4a <_scanf_i+0x10e>
 800ee8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ee90:	4631      	mov	r1, r6
 800ee92:	4650      	mov	r0, sl
 800ee94:	4798      	blx	r3
 800ee96:	2800      	cmp	r0, #0
 800ee98:	d0df      	beq.n	800ee5a <_scanf_i+0x11e>
 800ee9a:	6823      	ldr	r3, [r4, #0]
 800ee9c:	05d9      	lsls	r1, r3, #23
 800ee9e:	d50d      	bpl.n	800eebc <_scanf_i+0x180>
 800eea0:	42bd      	cmp	r5, r7
 800eea2:	d909      	bls.n	800eeb8 <_scanf_i+0x17c>
 800eea4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800eea8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eeac:	4632      	mov	r2, r6
 800eeae:	4650      	mov	r0, sl
 800eeb0:	4798      	blx	r3
 800eeb2:	f105 39ff 	add.w	r9, r5, #4294967295
 800eeb6:	464d      	mov	r5, r9
 800eeb8:	42bd      	cmp	r5, r7
 800eeba:	d028      	beq.n	800ef0e <_scanf_i+0x1d2>
 800eebc:	6822      	ldr	r2, [r4, #0]
 800eebe:	f012 0210 	ands.w	r2, r2, #16
 800eec2:	d113      	bne.n	800eeec <_scanf_i+0x1b0>
 800eec4:	702a      	strb	r2, [r5, #0]
 800eec6:	6863      	ldr	r3, [r4, #4]
 800eec8:	9e01      	ldr	r6, [sp, #4]
 800eeca:	4639      	mov	r1, r7
 800eecc:	4650      	mov	r0, sl
 800eece:	47b0      	blx	r6
 800eed0:	f8d8 3000 	ldr.w	r3, [r8]
 800eed4:	6821      	ldr	r1, [r4, #0]
 800eed6:	1d1a      	adds	r2, r3, #4
 800eed8:	f8c8 2000 	str.w	r2, [r8]
 800eedc:	f011 0f20 	tst.w	r1, #32
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	d00f      	beq.n	800ef04 <_scanf_i+0x1c8>
 800eee4:	6018      	str	r0, [r3, #0]
 800eee6:	68e3      	ldr	r3, [r4, #12]
 800eee8:	3301      	adds	r3, #1
 800eeea:	60e3      	str	r3, [r4, #12]
 800eeec:	6923      	ldr	r3, [r4, #16]
 800eeee:	1bed      	subs	r5, r5, r7
 800eef0:	445d      	add	r5, fp
 800eef2:	442b      	add	r3, r5
 800eef4:	6123      	str	r3, [r4, #16]
 800eef6:	2000      	movs	r0, #0
 800eef8:	b007      	add	sp, #28
 800eefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eefe:	f04f 0b00 	mov.w	fp, #0
 800ef02:	e7ca      	b.n	800ee9a <_scanf_i+0x15e>
 800ef04:	07ca      	lsls	r2, r1, #31
 800ef06:	bf4c      	ite	mi
 800ef08:	8018      	strhmi	r0, [r3, #0]
 800ef0a:	6018      	strpl	r0, [r3, #0]
 800ef0c:	e7eb      	b.n	800eee6 <_scanf_i+0x1aa>
 800ef0e:	2001      	movs	r0, #1
 800ef10:	e7f2      	b.n	800eef8 <_scanf_i+0x1bc>
 800ef12:	bf00      	nop
 800ef14:	0800fcac 	.word	0x0800fcac
 800ef18:	0800f309 	.word	0x0800f309
 800ef1c:	0800f3e9 	.word	0x0800f3e9
 800ef20:	08011e2c 	.word	0x08011e2c

0800ef24 <__sflush_r>:
 800ef24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ef28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef2c:	0716      	lsls	r6, r2, #28
 800ef2e:	4605      	mov	r5, r0
 800ef30:	460c      	mov	r4, r1
 800ef32:	d454      	bmi.n	800efde <__sflush_r+0xba>
 800ef34:	684b      	ldr	r3, [r1, #4]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	dc02      	bgt.n	800ef40 <__sflush_r+0x1c>
 800ef3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	dd48      	ble.n	800efd2 <__sflush_r+0xae>
 800ef40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef42:	2e00      	cmp	r6, #0
 800ef44:	d045      	beq.n	800efd2 <__sflush_r+0xae>
 800ef46:	2300      	movs	r3, #0
 800ef48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ef4c:	682f      	ldr	r7, [r5, #0]
 800ef4e:	6a21      	ldr	r1, [r4, #32]
 800ef50:	602b      	str	r3, [r5, #0]
 800ef52:	d030      	beq.n	800efb6 <__sflush_r+0x92>
 800ef54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ef56:	89a3      	ldrh	r3, [r4, #12]
 800ef58:	0759      	lsls	r1, r3, #29
 800ef5a:	d505      	bpl.n	800ef68 <__sflush_r+0x44>
 800ef5c:	6863      	ldr	r3, [r4, #4]
 800ef5e:	1ad2      	subs	r2, r2, r3
 800ef60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ef62:	b10b      	cbz	r3, 800ef68 <__sflush_r+0x44>
 800ef64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ef66:	1ad2      	subs	r2, r2, r3
 800ef68:	2300      	movs	r3, #0
 800ef6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef6c:	6a21      	ldr	r1, [r4, #32]
 800ef6e:	4628      	mov	r0, r5
 800ef70:	47b0      	blx	r6
 800ef72:	1c43      	adds	r3, r0, #1
 800ef74:	89a3      	ldrh	r3, [r4, #12]
 800ef76:	d106      	bne.n	800ef86 <__sflush_r+0x62>
 800ef78:	6829      	ldr	r1, [r5, #0]
 800ef7a:	291d      	cmp	r1, #29
 800ef7c:	d82b      	bhi.n	800efd6 <__sflush_r+0xb2>
 800ef7e:	4a2a      	ldr	r2, [pc, #168]	@ (800f028 <__sflush_r+0x104>)
 800ef80:	410a      	asrs	r2, r1
 800ef82:	07d6      	lsls	r6, r2, #31
 800ef84:	d427      	bmi.n	800efd6 <__sflush_r+0xb2>
 800ef86:	2200      	movs	r2, #0
 800ef88:	6062      	str	r2, [r4, #4]
 800ef8a:	04d9      	lsls	r1, r3, #19
 800ef8c:	6922      	ldr	r2, [r4, #16]
 800ef8e:	6022      	str	r2, [r4, #0]
 800ef90:	d504      	bpl.n	800ef9c <__sflush_r+0x78>
 800ef92:	1c42      	adds	r2, r0, #1
 800ef94:	d101      	bne.n	800ef9a <__sflush_r+0x76>
 800ef96:	682b      	ldr	r3, [r5, #0]
 800ef98:	b903      	cbnz	r3, 800ef9c <__sflush_r+0x78>
 800ef9a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ef9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef9e:	602f      	str	r7, [r5, #0]
 800efa0:	b1b9      	cbz	r1, 800efd2 <__sflush_r+0xae>
 800efa2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800efa6:	4299      	cmp	r1, r3
 800efa8:	d002      	beq.n	800efb0 <__sflush_r+0x8c>
 800efaa:	4628      	mov	r0, r5
 800efac:	f7ff fba0 	bl	800e6f0 <_free_r>
 800efb0:	2300      	movs	r3, #0
 800efb2:	6363      	str	r3, [r4, #52]	@ 0x34
 800efb4:	e00d      	b.n	800efd2 <__sflush_r+0xae>
 800efb6:	2301      	movs	r3, #1
 800efb8:	4628      	mov	r0, r5
 800efba:	47b0      	blx	r6
 800efbc:	4602      	mov	r2, r0
 800efbe:	1c50      	adds	r0, r2, #1
 800efc0:	d1c9      	bne.n	800ef56 <__sflush_r+0x32>
 800efc2:	682b      	ldr	r3, [r5, #0]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d0c6      	beq.n	800ef56 <__sflush_r+0x32>
 800efc8:	2b1d      	cmp	r3, #29
 800efca:	d001      	beq.n	800efd0 <__sflush_r+0xac>
 800efcc:	2b16      	cmp	r3, #22
 800efce:	d11e      	bne.n	800f00e <__sflush_r+0xea>
 800efd0:	602f      	str	r7, [r5, #0]
 800efd2:	2000      	movs	r0, #0
 800efd4:	e022      	b.n	800f01c <__sflush_r+0xf8>
 800efd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efda:	b21b      	sxth	r3, r3
 800efdc:	e01b      	b.n	800f016 <__sflush_r+0xf2>
 800efde:	690f      	ldr	r7, [r1, #16]
 800efe0:	2f00      	cmp	r7, #0
 800efe2:	d0f6      	beq.n	800efd2 <__sflush_r+0xae>
 800efe4:	0793      	lsls	r3, r2, #30
 800efe6:	680e      	ldr	r6, [r1, #0]
 800efe8:	bf08      	it	eq
 800efea:	694b      	ldreq	r3, [r1, #20]
 800efec:	600f      	str	r7, [r1, #0]
 800efee:	bf18      	it	ne
 800eff0:	2300      	movne	r3, #0
 800eff2:	eba6 0807 	sub.w	r8, r6, r7
 800eff6:	608b      	str	r3, [r1, #8]
 800eff8:	f1b8 0f00 	cmp.w	r8, #0
 800effc:	dde9      	ble.n	800efd2 <__sflush_r+0xae>
 800effe:	6a21      	ldr	r1, [r4, #32]
 800f000:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f002:	4643      	mov	r3, r8
 800f004:	463a      	mov	r2, r7
 800f006:	4628      	mov	r0, r5
 800f008:	47b0      	blx	r6
 800f00a:	2800      	cmp	r0, #0
 800f00c:	dc08      	bgt.n	800f020 <__sflush_r+0xfc>
 800f00e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f012:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f016:	81a3      	strh	r3, [r4, #12]
 800f018:	f04f 30ff 	mov.w	r0, #4294967295
 800f01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f020:	4407      	add	r7, r0
 800f022:	eba8 0800 	sub.w	r8, r8, r0
 800f026:	e7e7      	b.n	800eff8 <__sflush_r+0xd4>
 800f028:	dfbffffe 	.word	0xdfbffffe

0800f02c <_fflush_r>:
 800f02c:	b538      	push	{r3, r4, r5, lr}
 800f02e:	690b      	ldr	r3, [r1, #16]
 800f030:	4605      	mov	r5, r0
 800f032:	460c      	mov	r4, r1
 800f034:	b913      	cbnz	r3, 800f03c <_fflush_r+0x10>
 800f036:	2500      	movs	r5, #0
 800f038:	4628      	mov	r0, r5
 800f03a:	bd38      	pop	{r3, r4, r5, pc}
 800f03c:	b118      	cbz	r0, 800f046 <_fflush_r+0x1a>
 800f03e:	6a03      	ldr	r3, [r0, #32]
 800f040:	b90b      	cbnz	r3, 800f046 <_fflush_r+0x1a>
 800f042:	f7ff f9b3 	bl	800e3ac <__sinit>
 800f046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d0f3      	beq.n	800f036 <_fflush_r+0xa>
 800f04e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f050:	07d0      	lsls	r0, r2, #31
 800f052:	d404      	bmi.n	800f05e <_fflush_r+0x32>
 800f054:	0599      	lsls	r1, r3, #22
 800f056:	d402      	bmi.n	800f05e <_fflush_r+0x32>
 800f058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f05a:	f7ff fb28 	bl	800e6ae <__retarget_lock_acquire_recursive>
 800f05e:	4628      	mov	r0, r5
 800f060:	4621      	mov	r1, r4
 800f062:	f7ff ff5f 	bl	800ef24 <__sflush_r>
 800f066:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f068:	07da      	lsls	r2, r3, #31
 800f06a:	4605      	mov	r5, r0
 800f06c:	d4e4      	bmi.n	800f038 <_fflush_r+0xc>
 800f06e:	89a3      	ldrh	r3, [r4, #12]
 800f070:	059b      	lsls	r3, r3, #22
 800f072:	d4e1      	bmi.n	800f038 <_fflush_r+0xc>
 800f074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f076:	f7ff fb1b 	bl	800e6b0 <__retarget_lock_release_recursive>
 800f07a:	e7dd      	b.n	800f038 <_fflush_r+0xc>

0800f07c <fiprintf>:
 800f07c:	b40e      	push	{r1, r2, r3}
 800f07e:	b503      	push	{r0, r1, lr}
 800f080:	4601      	mov	r1, r0
 800f082:	ab03      	add	r3, sp, #12
 800f084:	4805      	ldr	r0, [pc, #20]	@ (800f09c <fiprintf+0x20>)
 800f086:	f853 2b04 	ldr.w	r2, [r3], #4
 800f08a:	6800      	ldr	r0, [r0, #0]
 800f08c:	9301      	str	r3, [sp, #4]
 800f08e:	f000 f9d7 	bl	800f440 <_vfiprintf_r>
 800f092:	b002      	add	sp, #8
 800f094:	f85d eb04 	ldr.w	lr, [sp], #4
 800f098:	b003      	add	sp, #12
 800f09a:	4770      	bx	lr
 800f09c:	20000048 	.word	0x20000048

0800f0a0 <__sccl>:
 800f0a0:	b570      	push	{r4, r5, r6, lr}
 800f0a2:	780b      	ldrb	r3, [r1, #0]
 800f0a4:	4604      	mov	r4, r0
 800f0a6:	2b5e      	cmp	r3, #94	@ 0x5e
 800f0a8:	bf0b      	itete	eq
 800f0aa:	784b      	ldrbeq	r3, [r1, #1]
 800f0ac:	1c4a      	addne	r2, r1, #1
 800f0ae:	1c8a      	addeq	r2, r1, #2
 800f0b0:	2100      	movne	r1, #0
 800f0b2:	bf08      	it	eq
 800f0b4:	2101      	moveq	r1, #1
 800f0b6:	3801      	subs	r0, #1
 800f0b8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800f0bc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f0c0:	42a8      	cmp	r0, r5
 800f0c2:	d1fb      	bne.n	800f0bc <__sccl+0x1c>
 800f0c4:	b90b      	cbnz	r3, 800f0ca <__sccl+0x2a>
 800f0c6:	1e50      	subs	r0, r2, #1
 800f0c8:	bd70      	pop	{r4, r5, r6, pc}
 800f0ca:	f081 0101 	eor.w	r1, r1, #1
 800f0ce:	54e1      	strb	r1, [r4, r3]
 800f0d0:	4610      	mov	r0, r2
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f0d8:	2d2d      	cmp	r5, #45	@ 0x2d
 800f0da:	d005      	beq.n	800f0e8 <__sccl+0x48>
 800f0dc:	2d5d      	cmp	r5, #93	@ 0x5d
 800f0de:	d016      	beq.n	800f10e <__sccl+0x6e>
 800f0e0:	2d00      	cmp	r5, #0
 800f0e2:	d0f1      	beq.n	800f0c8 <__sccl+0x28>
 800f0e4:	462b      	mov	r3, r5
 800f0e6:	e7f2      	b.n	800f0ce <__sccl+0x2e>
 800f0e8:	7846      	ldrb	r6, [r0, #1]
 800f0ea:	2e5d      	cmp	r6, #93	@ 0x5d
 800f0ec:	d0fa      	beq.n	800f0e4 <__sccl+0x44>
 800f0ee:	42b3      	cmp	r3, r6
 800f0f0:	dcf8      	bgt.n	800f0e4 <__sccl+0x44>
 800f0f2:	3002      	adds	r0, #2
 800f0f4:	461a      	mov	r2, r3
 800f0f6:	3201      	adds	r2, #1
 800f0f8:	4296      	cmp	r6, r2
 800f0fa:	54a1      	strb	r1, [r4, r2]
 800f0fc:	dcfb      	bgt.n	800f0f6 <__sccl+0x56>
 800f0fe:	1af2      	subs	r2, r6, r3
 800f100:	3a01      	subs	r2, #1
 800f102:	1c5d      	adds	r5, r3, #1
 800f104:	42b3      	cmp	r3, r6
 800f106:	bfa8      	it	ge
 800f108:	2200      	movge	r2, #0
 800f10a:	18ab      	adds	r3, r5, r2
 800f10c:	e7e1      	b.n	800f0d2 <__sccl+0x32>
 800f10e:	4610      	mov	r0, r2
 800f110:	e7da      	b.n	800f0c8 <__sccl+0x28>

0800f112 <__submore>:
 800f112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f116:	460c      	mov	r4, r1
 800f118:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f11a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f11e:	4299      	cmp	r1, r3
 800f120:	d11d      	bne.n	800f15e <__submore+0x4c>
 800f122:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f126:	f7ff fb57 	bl	800e7d8 <_malloc_r>
 800f12a:	b918      	cbnz	r0, 800f134 <__submore+0x22>
 800f12c:	f04f 30ff 	mov.w	r0, #4294967295
 800f130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f134:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f138:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f13a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800f13e:	6360      	str	r0, [r4, #52]	@ 0x34
 800f140:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800f144:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f148:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800f14c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f150:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800f154:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800f158:	6020      	str	r0, [r4, #0]
 800f15a:	2000      	movs	r0, #0
 800f15c:	e7e8      	b.n	800f130 <__submore+0x1e>
 800f15e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800f160:	0077      	lsls	r7, r6, #1
 800f162:	463a      	mov	r2, r7
 800f164:	f000 f827 	bl	800f1b6 <_realloc_r>
 800f168:	4605      	mov	r5, r0
 800f16a:	2800      	cmp	r0, #0
 800f16c:	d0de      	beq.n	800f12c <__submore+0x1a>
 800f16e:	eb00 0806 	add.w	r8, r0, r6
 800f172:	4601      	mov	r1, r0
 800f174:	4632      	mov	r2, r6
 800f176:	4640      	mov	r0, r8
 800f178:	f7fe fc52 	bl	800da20 <memcpy>
 800f17c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800f180:	f8c4 8000 	str.w	r8, [r4]
 800f184:	e7e9      	b.n	800f15a <__submore+0x48>
	...

0800f188 <_sbrk_r>:
 800f188:	b538      	push	{r3, r4, r5, lr}
 800f18a:	4d06      	ldr	r5, [pc, #24]	@ (800f1a4 <_sbrk_r+0x1c>)
 800f18c:	2300      	movs	r3, #0
 800f18e:	4604      	mov	r4, r0
 800f190:	4608      	mov	r0, r1
 800f192:	602b      	str	r3, [r5, #0]
 800f194:	f7f1 ffde 	bl	8001154 <_sbrk>
 800f198:	1c43      	adds	r3, r0, #1
 800f19a:	d102      	bne.n	800f1a2 <_sbrk_r+0x1a>
 800f19c:	682b      	ldr	r3, [r5, #0]
 800f19e:	b103      	cbz	r3, 800f1a2 <_sbrk_r+0x1a>
 800f1a0:	6023      	str	r3, [r4, #0]
 800f1a2:	bd38      	pop	{r3, r4, r5, pc}
 800f1a4:	200013a8 	.word	0x200013a8

0800f1a8 <abort>:
 800f1a8:	b508      	push	{r3, lr}
 800f1aa:	2006      	movs	r0, #6
 800f1ac:	f000 fcaa 	bl	800fb04 <raise>
 800f1b0:	2001      	movs	r0, #1
 800f1b2:	f7f1 ff9f 	bl	80010f4 <_exit>

0800f1b6 <_realloc_r>:
 800f1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1ba:	4680      	mov	r8, r0
 800f1bc:	4615      	mov	r5, r2
 800f1be:	460c      	mov	r4, r1
 800f1c0:	b921      	cbnz	r1, 800f1cc <_realloc_r+0x16>
 800f1c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1c6:	4611      	mov	r1, r2
 800f1c8:	f7ff bb06 	b.w	800e7d8 <_malloc_r>
 800f1cc:	b92a      	cbnz	r2, 800f1da <_realloc_r+0x24>
 800f1ce:	f7ff fa8f 	bl	800e6f0 <_free_r>
 800f1d2:	2400      	movs	r4, #0
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1da:	f000 fcaf 	bl	800fb3c <_malloc_usable_size_r>
 800f1de:	4285      	cmp	r5, r0
 800f1e0:	4606      	mov	r6, r0
 800f1e2:	d802      	bhi.n	800f1ea <_realloc_r+0x34>
 800f1e4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f1e8:	d8f4      	bhi.n	800f1d4 <_realloc_r+0x1e>
 800f1ea:	4629      	mov	r1, r5
 800f1ec:	4640      	mov	r0, r8
 800f1ee:	f7ff faf3 	bl	800e7d8 <_malloc_r>
 800f1f2:	4607      	mov	r7, r0
 800f1f4:	2800      	cmp	r0, #0
 800f1f6:	d0ec      	beq.n	800f1d2 <_realloc_r+0x1c>
 800f1f8:	42b5      	cmp	r5, r6
 800f1fa:	462a      	mov	r2, r5
 800f1fc:	4621      	mov	r1, r4
 800f1fe:	bf28      	it	cs
 800f200:	4632      	movcs	r2, r6
 800f202:	f7fe fc0d 	bl	800da20 <memcpy>
 800f206:	4621      	mov	r1, r4
 800f208:	4640      	mov	r0, r8
 800f20a:	f7ff fa71 	bl	800e6f0 <_free_r>
 800f20e:	463c      	mov	r4, r7
 800f210:	e7e0      	b.n	800f1d4 <_realloc_r+0x1e>
	...

0800f214 <_strtol_l.constprop.0>:
 800f214:	2b24      	cmp	r3, #36	@ 0x24
 800f216:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f21a:	4686      	mov	lr, r0
 800f21c:	4690      	mov	r8, r2
 800f21e:	d801      	bhi.n	800f224 <_strtol_l.constprop.0+0x10>
 800f220:	2b01      	cmp	r3, #1
 800f222:	d106      	bne.n	800f232 <_strtol_l.constprop.0+0x1e>
 800f224:	f7ff fa18 	bl	800e658 <__errno>
 800f228:	2316      	movs	r3, #22
 800f22a:	6003      	str	r3, [r0, #0]
 800f22c:	2000      	movs	r0, #0
 800f22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f232:	4834      	ldr	r0, [pc, #208]	@ (800f304 <_strtol_l.constprop.0+0xf0>)
 800f234:	460d      	mov	r5, r1
 800f236:	462a      	mov	r2, r5
 800f238:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f23c:	5d06      	ldrb	r6, [r0, r4]
 800f23e:	f016 0608 	ands.w	r6, r6, #8
 800f242:	d1f8      	bne.n	800f236 <_strtol_l.constprop.0+0x22>
 800f244:	2c2d      	cmp	r4, #45	@ 0x2d
 800f246:	d12d      	bne.n	800f2a4 <_strtol_l.constprop.0+0x90>
 800f248:	782c      	ldrb	r4, [r5, #0]
 800f24a:	2601      	movs	r6, #1
 800f24c:	1c95      	adds	r5, r2, #2
 800f24e:	f033 0210 	bics.w	r2, r3, #16
 800f252:	d109      	bne.n	800f268 <_strtol_l.constprop.0+0x54>
 800f254:	2c30      	cmp	r4, #48	@ 0x30
 800f256:	d12a      	bne.n	800f2ae <_strtol_l.constprop.0+0x9a>
 800f258:	782a      	ldrb	r2, [r5, #0]
 800f25a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f25e:	2a58      	cmp	r2, #88	@ 0x58
 800f260:	d125      	bne.n	800f2ae <_strtol_l.constprop.0+0x9a>
 800f262:	786c      	ldrb	r4, [r5, #1]
 800f264:	2310      	movs	r3, #16
 800f266:	3502      	adds	r5, #2
 800f268:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f26c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f270:	2200      	movs	r2, #0
 800f272:	fbbc f9f3 	udiv	r9, ip, r3
 800f276:	4610      	mov	r0, r2
 800f278:	fb03 ca19 	mls	sl, r3, r9, ip
 800f27c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f280:	2f09      	cmp	r7, #9
 800f282:	d81b      	bhi.n	800f2bc <_strtol_l.constprop.0+0xa8>
 800f284:	463c      	mov	r4, r7
 800f286:	42a3      	cmp	r3, r4
 800f288:	dd27      	ble.n	800f2da <_strtol_l.constprop.0+0xc6>
 800f28a:	1c57      	adds	r7, r2, #1
 800f28c:	d007      	beq.n	800f29e <_strtol_l.constprop.0+0x8a>
 800f28e:	4581      	cmp	r9, r0
 800f290:	d320      	bcc.n	800f2d4 <_strtol_l.constprop.0+0xc0>
 800f292:	d101      	bne.n	800f298 <_strtol_l.constprop.0+0x84>
 800f294:	45a2      	cmp	sl, r4
 800f296:	db1d      	blt.n	800f2d4 <_strtol_l.constprop.0+0xc0>
 800f298:	fb00 4003 	mla	r0, r0, r3, r4
 800f29c:	2201      	movs	r2, #1
 800f29e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f2a2:	e7eb      	b.n	800f27c <_strtol_l.constprop.0+0x68>
 800f2a4:	2c2b      	cmp	r4, #43	@ 0x2b
 800f2a6:	bf04      	itt	eq
 800f2a8:	782c      	ldrbeq	r4, [r5, #0]
 800f2aa:	1c95      	addeq	r5, r2, #2
 800f2ac:	e7cf      	b.n	800f24e <_strtol_l.constprop.0+0x3a>
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d1da      	bne.n	800f268 <_strtol_l.constprop.0+0x54>
 800f2b2:	2c30      	cmp	r4, #48	@ 0x30
 800f2b4:	bf0c      	ite	eq
 800f2b6:	2308      	moveq	r3, #8
 800f2b8:	230a      	movne	r3, #10
 800f2ba:	e7d5      	b.n	800f268 <_strtol_l.constprop.0+0x54>
 800f2bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f2c0:	2f19      	cmp	r7, #25
 800f2c2:	d801      	bhi.n	800f2c8 <_strtol_l.constprop.0+0xb4>
 800f2c4:	3c37      	subs	r4, #55	@ 0x37
 800f2c6:	e7de      	b.n	800f286 <_strtol_l.constprop.0+0x72>
 800f2c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f2cc:	2f19      	cmp	r7, #25
 800f2ce:	d804      	bhi.n	800f2da <_strtol_l.constprop.0+0xc6>
 800f2d0:	3c57      	subs	r4, #87	@ 0x57
 800f2d2:	e7d8      	b.n	800f286 <_strtol_l.constprop.0+0x72>
 800f2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f2d8:	e7e1      	b.n	800f29e <_strtol_l.constprop.0+0x8a>
 800f2da:	1c53      	adds	r3, r2, #1
 800f2dc:	d108      	bne.n	800f2f0 <_strtol_l.constprop.0+0xdc>
 800f2de:	2322      	movs	r3, #34	@ 0x22
 800f2e0:	f8ce 3000 	str.w	r3, [lr]
 800f2e4:	4660      	mov	r0, ip
 800f2e6:	f1b8 0f00 	cmp.w	r8, #0
 800f2ea:	d0a0      	beq.n	800f22e <_strtol_l.constprop.0+0x1a>
 800f2ec:	1e69      	subs	r1, r5, #1
 800f2ee:	e006      	b.n	800f2fe <_strtol_l.constprop.0+0xea>
 800f2f0:	b106      	cbz	r6, 800f2f4 <_strtol_l.constprop.0+0xe0>
 800f2f2:	4240      	negs	r0, r0
 800f2f4:	f1b8 0f00 	cmp.w	r8, #0
 800f2f8:	d099      	beq.n	800f22e <_strtol_l.constprop.0+0x1a>
 800f2fa:	2a00      	cmp	r2, #0
 800f2fc:	d1f6      	bne.n	800f2ec <_strtol_l.constprop.0+0xd8>
 800f2fe:	f8c8 1000 	str.w	r1, [r8]
 800f302:	e794      	b.n	800f22e <_strtol_l.constprop.0+0x1a>
 800f304:	08011d18 	.word	0x08011d18

0800f308 <_strtol_r>:
 800f308:	f7ff bf84 	b.w	800f214 <_strtol_l.constprop.0>

0800f30c <_strtoul_l.constprop.0>:
 800f30c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f310:	4e34      	ldr	r6, [pc, #208]	@ (800f3e4 <_strtoul_l.constprop.0+0xd8>)
 800f312:	4686      	mov	lr, r0
 800f314:	460d      	mov	r5, r1
 800f316:	4628      	mov	r0, r5
 800f318:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f31c:	5d37      	ldrb	r7, [r6, r4]
 800f31e:	f017 0708 	ands.w	r7, r7, #8
 800f322:	d1f8      	bne.n	800f316 <_strtoul_l.constprop.0+0xa>
 800f324:	2c2d      	cmp	r4, #45	@ 0x2d
 800f326:	d12f      	bne.n	800f388 <_strtoul_l.constprop.0+0x7c>
 800f328:	782c      	ldrb	r4, [r5, #0]
 800f32a:	2701      	movs	r7, #1
 800f32c:	1c85      	adds	r5, r0, #2
 800f32e:	f033 0010 	bics.w	r0, r3, #16
 800f332:	d109      	bne.n	800f348 <_strtoul_l.constprop.0+0x3c>
 800f334:	2c30      	cmp	r4, #48	@ 0x30
 800f336:	d12c      	bne.n	800f392 <_strtoul_l.constprop.0+0x86>
 800f338:	7828      	ldrb	r0, [r5, #0]
 800f33a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800f33e:	2858      	cmp	r0, #88	@ 0x58
 800f340:	d127      	bne.n	800f392 <_strtoul_l.constprop.0+0x86>
 800f342:	786c      	ldrb	r4, [r5, #1]
 800f344:	2310      	movs	r3, #16
 800f346:	3502      	adds	r5, #2
 800f348:	f04f 38ff 	mov.w	r8, #4294967295
 800f34c:	2600      	movs	r6, #0
 800f34e:	fbb8 f8f3 	udiv	r8, r8, r3
 800f352:	fb03 f908 	mul.w	r9, r3, r8
 800f356:	ea6f 0909 	mvn.w	r9, r9
 800f35a:	4630      	mov	r0, r6
 800f35c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800f360:	f1bc 0f09 	cmp.w	ip, #9
 800f364:	d81c      	bhi.n	800f3a0 <_strtoul_l.constprop.0+0x94>
 800f366:	4664      	mov	r4, ip
 800f368:	42a3      	cmp	r3, r4
 800f36a:	dd2a      	ble.n	800f3c2 <_strtoul_l.constprop.0+0xb6>
 800f36c:	f1b6 3fff 	cmp.w	r6, #4294967295
 800f370:	d007      	beq.n	800f382 <_strtoul_l.constprop.0+0x76>
 800f372:	4580      	cmp	r8, r0
 800f374:	d322      	bcc.n	800f3bc <_strtoul_l.constprop.0+0xb0>
 800f376:	d101      	bne.n	800f37c <_strtoul_l.constprop.0+0x70>
 800f378:	45a1      	cmp	r9, r4
 800f37a:	db1f      	blt.n	800f3bc <_strtoul_l.constprop.0+0xb0>
 800f37c:	fb00 4003 	mla	r0, r0, r3, r4
 800f380:	2601      	movs	r6, #1
 800f382:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f386:	e7e9      	b.n	800f35c <_strtoul_l.constprop.0+0x50>
 800f388:	2c2b      	cmp	r4, #43	@ 0x2b
 800f38a:	bf04      	itt	eq
 800f38c:	782c      	ldrbeq	r4, [r5, #0]
 800f38e:	1c85      	addeq	r5, r0, #2
 800f390:	e7cd      	b.n	800f32e <_strtoul_l.constprop.0+0x22>
 800f392:	2b00      	cmp	r3, #0
 800f394:	d1d8      	bne.n	800f348 <_strtoul_l.constprop.0+0x3c>
 800f396:	2c30      	cmp	r4, #48	@ 0x30
 800f398:	bf0c      	ite	eq
 800f39a:	2308      	moveq	r3, #8
 800f39c:	230a      	movne	r3, #10
 800f39e:	e7d3      	b.n	800f348 <_strtoul_l.constprop.0+0x3c>
 800f3a0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800f3a4:	f1bc 0f19 	cmp.w	ip, #25
 800f3a8:	d801      	bhi.n	800f3ae <_strtoul_l.constprop.0+0xa2>
 800f3aa:	3c37      	subs	r4, #55	@ 0x37
 800f3ac:	e7dc      	b.n	800f368 <_strtoul_l.constprop.0+0x5c>
 800f3ae:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800f3b2:	f1bc 0f19 	cmp.w	ip, #25
 800f3b6:	d804      	bhi.n	800f3c2 <_strtoul_l.constprop.0+0xb6>
 800f3b8:	3c57      	subs	r4, #87	@ 0x57
 800f3ba:	e7d5      	b.n	800f368 <_strtoul_l.constprop.0+0x5c>
 800f3bc:	f04f 36ff 	mov.w	r6, #4294967295
 800f3c0:	e7df      	b.n	800f382 <_strtoul_l.constprop.0+0x76>
 800f3c2:	1c73      	adds	r3, r6, #1
 800f3c4:	d106      	bne.n	800f3d4 <_strtoul_l.constprop.0+0xc8>
 800f3c6:	2322      	movs	r3, #34	@ 0x22
 800f3c8:	f8ce 3000 	str.w	r3, [lr]
 800f3cc:	4630      	mov	r0, r6
 800f3ce:	b932      	cbnz	r2, 800f3de <_strtoul_l.constprop.0+0xd2>
 800f3d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3d4:	b107      	cbz	r7, 800f3d8 <_strtoul_l.constprop.0+0xcc>
 800f3d6:	4240      	negs	r0, r0
 800f3d8:	2a00      	cmp	r2, #0
 800f3da:	d0f9      	beq.n	800f3d0 <_strtoul_l.constprop.0+0xc4>
 800f3dc:	b106      	cbz	r6, 800f3e0 <_strtoul_l.constprop.0+0xd4>
 800f3de:	1e69      	subs	r1, r5, #1
 800f3e0:	6011      	str	r1, [r2, #0]
 800f3e2:	e7f5      	b.n	800f3d0 <_strtoul_l.constprop.0+0xc4>
 800f3e4:	08011d18 	.word	0x08011d18

0800f3e8 <_strtoul_r>:
 800f3e8:	f7ff bf90 	b.w	800f30c <_strtoul_l.constprop.0>

0800f3ec <__sfputc_r>:
 800f3ec:	6893      	ldr	r3, [r2, #8]
 800f3ee:	3b01      	subs	r3, #1
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	b410      	push	{r4}
 800f3f4:	6093      	str	r3, [r2, #8]
 800f3f6:	da08      	bge.n	800f40a <__sfputc_r+0x1e>
 800f3f8:	6994      	ldr	r4, [r2, #24]
 800f3fa:	42a3      	cmp	r3, r4
 800f3fc:	db01      	blt.n	800f402 <__sfputc_r+0x16>
 800f3fe:	290a      	cmp	r1, #10
 800f400:	d103      	bne.n	800f40a <__sfputc_r+0x1e>
 800f402:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f406:	f000 bac1 	b.w	800f98c <__swbuf_r>
 800f40a:	6813      	ldr	r3, [r2, #0]
 800f40c:	1c58      	adds	r0, r3, #1
 800f40e:	6010      	str	r0, [r2, #0]
 800f410:	7019      	strb	r1, [r3, #0]
 800f412:	4608      	mov	r0, r1
 800f414:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f418:	4770      	bx	lr

0800f41a <__sfputs_r>:
 800f41a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f41c:	4606      	mov	r6, r0
 800f41e:	460f      	mov	r7, r1
 800f420:	4614      	mov	r4, r2
 800f422:	18d5      	adds	r5, r2, r3
 800f424:	42ac      	cmp	r4, r5
 800f426:	d101      	bne.n	800f42c <__sfputs_r+0x12>
 800f428:	2000      	movs	r0, #0
 800f42a:	e007      	b.n	800f43c <__sfputs_r+0x22>
 800f42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f430:	463a      	mov	r2, r7
 800f432:	4630      	mov	r0, r6
 800f434:	f7ff ffda 	bl	800f3ec <__sfputc_r>
 800f438:	1c43      	adds	r3, r0, #1
 800f43a:	d1f3      	bne.n	800f424 <__sfputs_r+0xa>
 800f43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f440 <_vfiprintf_r>:
 800f440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f444:	460d      	mov	r5, r1
 800f446:	b09d      	sub	sp, #116	@ 0x74
 800f448:	4614      	mov	r4, r2
 800f44a:	4698      	mov	r8, r3
 800f44c:	4606      	mov	r6, r0
 800f44e:	b118      	cbz	r0, 800f458 <_vfiprintf_r+0x18>
 800f450:	6a03      	ldr	r3, [r0, #32]
 800f452:	b90b      	cbnz	r3, 800f458 <_vfiprintf_r+0x18>
 800f454:	f7fe ffaa 	bl	800e3ac <__sinit>
 800f458:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f45a:	07d9      	lsls	r1, r3, #31
 800f45c:	d405      	bmi.n	800f46a <_vfiprintf_r+0x2a>
 800f45e:	89ab      	ldrh	r3, [r5, #12]
 800f460:	059a      	lsls	r2, r3, #22
 800f462:	d402      	bmi.n	800f46a <_vfiprintf_r+0x2a>
 800f464:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f466:	f7ff f922 	bl	800e6ae <__retarget_lock_acquire_recursive>
 800f46a:	89ab      	ldrh	r3, [r5, #12]
 800f46c:	071b      	lsls	r3, r3, #28
 800f46e:	d501      	bpl.n	800f474 <_vfiprintf_r+0x34>
 800f470:	692b      	ldr	r3, [r5, #16]
 800f472:	b99b      	cbnz	r3, 800f49c <_vfiprintf_r+0x5c>
 800f474:	4629      	mov	r1, r5
 800f476:	4630      	mov	r0, r6
 800f478:	f000 fac6 	bl	800fa08 <__swsetup_r>
 800f47c:	b170      	cbz	r0, 800f49c <_vfiprintf_r+0x5c>
 800f47e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f480:	07dc      	lsls	r4, r3, #31
 800f482:	d504      	bpl.n	800f48e <_vfiprintf_r+0x4e>
 800f484:	f04f 30ff 	mov.w	r0, #4294967295
 800f488:	b01d      	add	sp, #116	@ 0x74
 800f48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f48e:	89ab      	ldrh	r3, [r5, #12]
 800f490:	0598      	lsls	r0, r3, #22
 800f492:	d4f7      	bmi.n	800f484 <_vfiprintf_r+0x44>
 800f494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f496:	f7ff f90b 	bl	800e6b0 <__retarget_lock_release_recursive>
 800f49a:	e7f3      	b.n	800f484 <_vfiprintf_r+0x44>
 800f49c:	2300      	movs	r3, #0
 800f49e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4a0:	2320      	movs	r3, #32
 800f4a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f4a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4aa:	2330      	movs	r3, #48	@ 0x30
 800f4ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f65c <_vfiprintf_r+0x21c>
 800f4b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f4b4:	f04f 0901 	mov.w	r9, #1
 800f4b8:	4623      	mov	r3, r4
 800f4ba:	469a      	mov	sl, r3
 800f4bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4c0:	b10a      	cbz	r2, 800f4c6 <_vfiprintf_r+0x86>
 800f4c2:	2a25      	cmp	r2, #37	@ 0x25
 800f4c4:	d1f9      	bne.n	800f4ba <_vfiprintf_r+0x7a>
 800f4c6:	ebba 0b04 	subs.w	fp, sl, r4
 800f4ca:	d00b      	beq.n	800f4e4 <_vfiprintf_r+0xa4>
 800f4cc:	465b      	mov	r3, fp
 800f4ce:	4622      	mov	r2, r4
 800f4d0:	4629      	mov	r1, r5
 800f4d2:	4630      	mov	r0, r6
 800f4d4:	f7ff ffa1 	bl	800f41a <__sfputs_r>
 800f4d8:	3001      	adds	r0, #1
 800f4da:	f000 80a7 	beq.w	800f62c <_vfiprintf_r+0x1ec>
 800f4de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4e0:	445a      	add	r2, fp
 800f4e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800f4e4:	f89a 3000 	ldrb.w	r3, [sl]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	f000 809f 	beq.w	800f62c <_vfiprintf_r+0x1ec>
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800f4f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4f8:	f10a 0a01 	add.w	sl, sl, #1
 800f4fc:	9304      	str	r3, [sp, #16]
 800f4fe:	9307      	str	r3, [sp, #28]
 800f500:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f504:	931a      	str	r3, [sp, #104]	@ 0x68
 800f506:	4654      	mov	r4, sl
 800f508:	2205      	movs	r2, #5
 800f50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f50e:	4853      	ldr	r0, [pc, #332]	@ (800f65c <_vfiprintf_r+0x21c>)
 800f510:	f7f0 fefe 	bl	8000310 <memchr>
 800f514:	9a04      	ldr	r2, [sp, #16]
 800f516:	b9d8      	cbnz	r0, 800f550 <_vfiprintf_r+0x110>
 800f518:	06d1      	lsls	r1, r2, #27
 800f51a:	bf44      	itt	mi
 800f51c:	2320      	movmi	r3, #32
 800f51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f522:	0713      	lsls	r3, r2, #28
 800f524:	bf44      	itt	mi
 800f526:	232b      	movmi	r3, #43	@ 0x2b
 800f528:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f52c:	f89a 3000 	ldrb.w	r3, [sl]
 800f530:	2b2a      	cmp	r3, #42	@ 0x2a
 800f532:	d015      	beq.n	800f560 <_vfiprintf_r+0x120>
 800f534:	9a07      	ldr	r2, [sp, #28]
 800f536:	4654      	mov	r4, sl
 800f538:	2000      	movs	r0, #0
 800f53a:	f04f 0c0a 	mov.w	ip, #10
 800f53e:	4621      	mov	r1, r4
 800f540:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f544:	3b30      	subs	r3, #48	@ 0x30
 800f546:	2b09      	cmp	r3, #9
 800f548:	d94b      	bls.n	800f5e2 <_vfiprintf_r+0x1a2>
 800f54a:	b1b0      	cbz	r0, 800f57a <_vfiprintf_r+0x13a>
 800f54c:	9207      	str	r2, [sp, #28]
 800f54e:	e014      	b.n	800f57a <_vfiprintf_r+0x13a>
 800f550:	eba0 0308 	sub.w	r3, r0, r8
 800f554:	fa09 f303 	lsl.w	r3, r9, r3
 800f558:	4313      	orrs	r3, r2
 800f55a:	9304      	str	r3, [sp, #16]
 800f55c:	46a2      	mov	sl, r4
 800f55e:	e7d2      	b.n	800f506 <_vfiprintf_r+0xc6>
 800f560:	9b03      	ldr	r3, [sp, #12]
 800f562:	1d19      	adds	r1, r3, #4
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	9103      	str	r1, [sp, #12]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	bfbb      	ittet	lt
 800f56c:	425b      	neglt	r3, r3
 800f56e:	f042 0202 	orrlt.w	r2, r2, #2
 800f572:	9307      	strge	r3, [sp, #28]
 800f574:	9307      	strlt	r3, [sp, #28]
 800f576:	bfb8      	it	lt
 800f578:	9204      	strlt	r2, [sp, #16]
 800f57a:	7823      	ldrb	r3, [r4, #0]
 800f57c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f57e:	d10a      	bne.n	800f596 <_vfiprintf_r+0x156>
 800f580:	7863      	ldrb	r3, [r4, #1]
 800f582:	2b2a      	cmp	r3, #42	@ 0x2a
 800f584:	d132      	bne.n	800f5ec <_vfiprintf_r+0x1ac>
 800f586:	9b03      	ldr	r3, [sp, #12]
 800f588:	1d1a      	adds	r2, r3, #4
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	9203      	str	r2, [sp, #12]
 800f58e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f592:	3402      	adds	r4, #2
 800f594:	9305      	str	r3, [sp, #20]
 800f596:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f66c <_vfiprintf_r+0x22c>
 800f59a:	7821      	ldrb	r1, [r4, #0]
 800f59c:	2203      	movs	r2, #3
 800f59e:	4650      	mov	r0, sl
 800f5a0:	f7f0 feb6 	bl	8000310 <memchr>
 800f5a4:	b138      	cbz	r0, 800f5b6 <_vfiprintf_r+0x176>
 800f5a6:	9b04      	ldr	r3, [sp, #16]
 800f5a8:	eba0 000a 	sub.w	r0, r0, sl
 800f5ac:	2240      	movs	r2, #64	@ 0x40
 800f5ae:	4082      	lsls	r2, r0
 800f5b0:	4313      	orrs	r3, r2
 800f5b2:	3401      	adds	r4, #1
 800f5b4:	9304      	str	r3, [sp, #16]
 800f5b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5ba:	4829      	ldr	r0, [pc, #164]	@ (800f660 <_vfiprintf_r+0x220>)
 800f5bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f5c0:	2206      	movs	r2, #6
 800f5c2:	f7f0 fea5 	bl	8000310 <memchr>
 800f5c6:	2800      	cmp	r0, #0
 800f5c8:	d03f      	beq.n	800f64a <_vfiprintf_r+0x20a>
 800f5ca:	4b26      	ldr	r3, [pc, #152]	@ (800f664 <_vfiprintf_r+0x224>)
 800f5cc:	bb1b      	cbnz	r3, 800f616 <_vfiprintf_r+0x1d6>
 800f5ce:	9b03      	ldr	r3, [sp, #12]
 800f5d0:	3307      	adds	r3, #7
 800f5d2:	f023 0307 	bic.w	r3, r3, #7
 800f5d6:	3308      	adds	r3, #8
 800f5d8:	9303      	str	r3, [sp, #12]
 800f5da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5dc:	443b      	add	r3, r7
 800f5de:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5e0:	e76a      	b.n	800f4b8 <_vfiprintf_r+0x78>
 800f5e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5e6:	460c      	mov	r4, r1
 800f5e8:	2001      	movs	r0, #1
 800f5ea:	e7a8      	b.n	800f53e <_vfiprintf_r+0xfe>
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	3401      	adds	r4, #1
 800f5f0:	9305      	str	r3, [sp, #20]
 800f5f2:	4619      	mov	r1, r3
 800f5f4:	f04f 0c0a 	mov.w	ip, #10
 800f5f8:	4620      	mov	r0, r4
 800f5fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5fe:	3a30      	subs	r2, #48	@ 0x30
 800f600:	2a09      	cmp	r2, #9
 800f602:	d903      	bls.n	800f60c <_vfiprintf_r+0x1cc>
 800f604:	2b00      	cmp	r3, #0
 800f606:	d0c6      	beq.n	800f596 <_vfiprintf_r+0x156>
 800f608:	9105      	str	r1, [sp, #20]
 800f60a:	e7c4      	b.n	800f596 <_vfiprintf_r+0x156>
 800f60c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f610:	4604      	mov	r4, r0
 800f612:	2301      	movs	r3, #1
 800f614:	e7f0      	b.n	800f5f8 <_vfiprintf_r+0x1b8>
 800f616:	ab03      	add	r3, sp, #12
 800f618:	9300      	str	r3, [sp, #0]
 800f61a:	462a      	mov	r2, r5
 800f61c:	4b12      	ldr	r3, [pc, #72]	@ (800f668 <_vfiprintf_r+0x228>)
 800f61e:	a904      	add	r1, sp, #16
 800f620:	4630      	mov	r0, r6
 800f622:	f3af 8000 	nop.w
 800f626:	4607      	mov	r7, r0
 800f628:	1c78      	adds	r0, r7, #1
 800f62a:	d1d6      	bne.n	800f5da <_vfiprintf_r+0x19a>
 800f62c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f62e:	07d9      	lsls	r1, r3, #31
 800f630:	d405      	bmi.n	800f63e <_vfiprintf_r+0x1fe>
 800f632:	89ab      	ldrh	r3, [r5, #12]
 800f634:	059a      	lsls	r2, r3, #22
 800f636:	d402      	bmi.n	800f63e <_vfiprintf_r+0x1fe>
 800f638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f63a:	f7ff f839 	bl	800e6b0 <__retarget_lock_release_recursive>
 800f63e:	89ab      	ldrh	r3, [r5, #12]
 800f640:	065b      	lsls	r3, r3, #25
 800f642:	f53f af1f 	bmi.w	800f484 <_vfiprintf_r+0x44>
 800f646:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f648:	e71e      	b.n	800f488 <_vfiprintf_r+0x48>
 800f64a:	ab03      	add	r3, sp, #12
 800f64c:	9300      	str	r3, [sp, #0]
 800f64e:	462a      	mov	r2, r5
 800f650:	4b05      	ldr	r3, [pc, #20]	@ (800f668 <_vfiprintf_r+0x228>)
 800f652:	a904      	add	r1, sp, #16
 800f654:	4630      	mov	r0, r6
 800f656:	f000 f879 	bl	800f74c <_printf_i>
 800f65a:	e7e4      	b.n	800f626 <_vfiprintf_r+0x1e6>
 800f65c:	08011e37 	.word	0x08011e37
 800f660:	08011e3d 	.word	0x08011e3d
 800f664:	00000000 	.word	0x00000000
 800f668:	0800f41b 	.word	0x0800f41b
 800f66c:	08011e18 	.word	0x08011e18

0800f670 <_printf_common>:
 800f670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f674:	4616      	mov	r6, r2
 800f676:	4698      	mov	r8, r3
 800f678:	688a      	ldr	r2, [r1, #8]
 800f67a:	690b      	ldr	r3, [r1, #16]
 800f67c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f680:	4293      	cmp	r3, r2
 800f682:	bfb8      	it	lt
 800f684:	4613      	movlt	r3, r2
 800f686:	6033      	str	r3, [r6, #0]
 800f688:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f68c:	4607      	mov	r7, r0
 800f68e:	460c      	mov	r4, r1
 800f690:	b10a      	cbz	r2, 800f696 <_printf_common+0x26>
 800f692:	3301      	adds	r3, #1
 800f694:	6033      	str	r3, [r6, #0]
 800f696:	6823      	ldr	r3, [r4, #0]
 800f698:	0699      	lsls	r1, r3, #26
 800f69a:	bf42      	ittt	mi
 800f69c:	6833      	ldrmi	r3, [r6, #0]
 800f69e:	3302      	addmi	r3, #2
 800f6a0:	6033      	strmi	r3, [r6, #0]
 800f6a2:	6825      	ldr	r5, [r4, #0]
 800f6a4:	f015 0506 	ands.w	r5, r5, #6
 800f6a8:	d106      	bne.n	800f6b8 <_printf_common+0x48>
 800f6aa:	f104 0a19 	add.w	sl, r4, #25
 800f6ae:	68e3      	ldr	r3, [r4, #12]
 800f6b0:	6832      	ldr	r2, [r6, #0]
 800f6b2:	1a9b      	subs	r3, r3, r2
 800f6b4:	42ab      	cmp	r3, r5
 800f6b6:	dc26      	bgt.n	800f706 <_printf_common+0x96>
 800f6b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f6bc:	6822      	ldr	r2, [r4, #0]
 800f6be:	3b00      	subs	r3, #0
 800f6c0:	bf18      	it	ne
 800f6c2:	2301      	movne	r3, #1
 800f6c4:	0692      	lsls	r2, r2, #26
 800f6c6:	d42b      	bmi.n	800f720 <_printf_common+0xb0>
 800f6c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f6cc:	4641      	mov	r1, r8
 800f6ce:	4638      	mov	r0, r7
 800f6d0:	47c8      	blx	r9
 800f6d2:	3001      	adds	r0, #1
 800f6d4:	d01e      	beq.n	800f714 <_printf_common+0xa4>
 800f6d6:	6823      	ldr	r3, [r4, #0]
 800f6d8:	6922      	ldr	r2, [r4, #16]
 800f6da:	f003 0306 	and.w	r3, r3, #6
 800f6de:	2b04      	cmp	r3, #4
 800f6e0:	bf02      	ittt	eq
 800f6e2:	68e5      	ldreq	r5, [r4, #12]
 800f6e4:	6833      	ldreq	r3, [r6, #0]
 800f6e6:	1aed      	subeq	r5, r5, r3
 800f6e8:	68a3      	ldr	r3, [r4, #8]
 800f6ea:	bf0c      	ite	eq
 800f6ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f6f0:	2500      	movne	r5, #0
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	bfc4      	itt	gt
 800f6f6:	1a9b      	subgt	r3, r3, r2
 800f6f8:	18ed      	addgt	r5, r5, r3
 800f6fa:	2600      	movs	r6, #0
 800f6fc:	341a      	adds	r4, #26
 800f6fe:	42b5      	cmp	r5, r6
 800f700:	d11a      	bne.n	800f738 <_printf_common+0xc8>
 800f702:	2000      	movs	r0, #0
 800f704:	e008      	b.n	800f718 <_printf_common+0xa8>
 800f706:	2301      	movs	r3, #1
 800f708:	4652      	mov	r2, sl
 800f70a:	4641      	mov	r1, r8
 800f70c:	4638      	mov	r0, r7
 800f70e:	47c8      	blx	r9
 800f710:	3001      	adds	r0, #1
 800f712:	d103      	bne.n	800f71c <_printf_common+0xac>
 800f714:	f04f 30ff 	mov.w	r0, #4294967295
 800f718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f71c:	3501      	adds	r5, #1
 800f71e:	e7c6      	b.n	800f6ae <_printf_common+0x3e>
 800f720:	18e1      	adds	r1, r4, r3
 800f722:	1c5a      	adds	r2, r3, #1
 800f724:	2030      	movs	r0, #48	@ 0x30
 800f726:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f72a:	4422      	add	r2, r4
 800f72c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f730:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f734:	3302      	adds	r3, #2
 800f736:	e7c7      	b.n	800f6c8 <_printf_common+0x58>
 800f738:	2301      	movs	r3, #1
 800f73a:	4622      	mov	r2, r4
 800f73c:	4641      	mov	r1, r8
 800f73e:	4638      	mov	r0, r7
 800f740:	47c8      	blx	r9
 800f742:	3001      	adds	r0, #1
 800f744:	d0e6      	beq.n	800f714 <_printf_common+0xa4>
 800f746:	3601      	adds	r6, #1
 800f748:	e7d9      	b.n	800f6fe <_printf_common+0x8e>
	...

0800f74c <_printf_i>:
 800f74c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f750:	7e0f      	ldrb	r7, [r1, #24]
 800f752:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f754:	2f78      	cmp	r7, #120	@ 0x78
 800f756:	4691      	mov	r9, r2
 800f758:	4680      	mov	r8, r0
 800f75a:	460c      	mov	r4, r1
 800f75c:	469a      	mov	sl, r3
 800f75e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f762:	d807      	bhi.n	800f774 <_printf_i+0x28>
 800f764:	2f62      	cmp	r7, #98	@ 0x62
 800f766:	d80a      	bhi.n	800f77e <_printf_i+0x32>
 800f768:	2f00      	cmp	r7, #0
 800f76a:	f000 80d2 	beq.w	800f912 <_printf_i+0x1c6>
 800f76e:	2f58      	cmp	r7, #88	@ 0x58
 800f770:	f000 80b9 	beq.w	800f8e6 <_printf_i+0x19a>
 800f774:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f778:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f77c:	e03a      	b.n	800f7f4 <_printf_i+0xa8>
 800f77e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f782:	2b15      	cmp	r3, #21
 800f784:	d8f6      	bhi.n	800f774 <_printf_i+0x28>
 800f786:	a101      	add	r1, pc, #4	@ (adr r1, 800f78c <_printf_i+0x40>)
 800f788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f78c:	0800f7e5 	.word	0x0800f7e5
 800f790:	0800f7f9 	.word	0x0800f7f9
 800f794:	0800f775 	.word	0x0800f775
 800f798:	0800f775 	.word	0x0800f775
 800f79c:	0800f775 	.word	0x0800f775
 800f7a0:	0800f775 	.word	0x0800f775
 800f7a4:	0800f7f9 	.word	0x0800f7f9
 800f7a8:	0800f775 	.word	0x0800f775
 800f7ac:	0800f775 	.word	0x0800f775
 800f7b0:	0800f775 	.word	0x0800f775
 800f7b4:	0800f775 	.word	0x0800f775
 800f7b8:	0800f8f9 	.word	0x0800f8f9
 800f7bc:	0800f823 	.word	0x0800f823
 800f7c0:	0800f8b3 	.word	0x0800f8b3
 800f7c4:	0800f775 	.word	0x0800f775
 800f7c8:	0800f775 	.word	0x0800f775
 800f7cc:	0800f91b 	.word	0x0800f91b
 800f7d0:	0800f775 	.word	0x0800f775
 800f7d4:	0800f823 	.word	0x0800f823
 800f7d8:	0800f775 	.word	0x0800f775
 800f7dc:	0800f775 	.word	0x0800f775
 800f7e0:	0800f8bb 	.word	0x0800f8bb
 800f7e4:	6833      	ldr	r3, [r6, #0]
 800f7e6:	1d1a      	adds	r2, r3, #4
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	6032      	str	r2, [r6, #0]
 800f7ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f7f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	e09d      	b.n	800f934 <_printf_i+0x1e8>
 800f7f8:	6833      	ldr	r3, [r6, #0]
 800f7fa:	6820      	ldr	r0, [r4, #0]
 800f7fc:	1d19      	adds	r1, r3, #4
 800f7fe:	6031      	str	r1, [r6, #0]
 800f800:	0606      	lsls	r6, r0, #24
 800f802:	d501      	bpl.n	800f808 <_printf_i+0xbc>
 800f804:	681d      	ldr	r5, [r3, #0]
 800f806:	e003      	b.n	800f810 <_printf_i+0xc4>
 800f808:	0645      	lsls	r5, r0, #25
 800f80a:	d5fb      	bpl.n	800f804 <_printf_i+0xb8>
 800f80c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f810:	2d00      	cmp	r5, #0
 800f812:	da03      	bge.n	800f81c <_printf_i+0xd0>
 800f814:	232d      	movs	r3, #45	@ 0x2d
 800f816:	426d      	negs	r5, r5
 800f818:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f81c:	4859      	ldr	r0, [pc, #356]	@ (800f984 <_printf_i+0x238>)
 800f81e:	230a      	movs	r3, #10
 800f820:	e011      	b.n	800f846 <_printf_i+0xfa>
 800f822:	6821      	ldr	r1, [r4, #0]
 800f824:	6833      	ldr	r3, [r6, #0]
 800f826:	0608      	lsls	r0, r1, #24
 800f828:	f853 5b04 	ldr.w	r5, [r3], #4
 800f82c:	d402      	bmi.n	800f834 <_printf_i+0xe8>
 800f82e:	0649      	lsls	r1, r1, #25
 800f830:	bf48      	it	mi
 800f832:	b2ad      	uxthmi	r5, r5
 800f834:	2f6f      	cmp	r7, #111	@ 0x6f
 800f836:	4853      	ldr	r0, [pc, #332]	@ (800f984 <_printf_i+0x238>)
 800f838:	6033      	str	r3, [r6, #0]
 800f83a:	bf14      	ite	ne
 800f83c:	230a      	movne	r3, #10
 800f83e:	2308      	moveq	r3, #8
 800f840:	2100      	movs	r1, #0
 800f842:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f846:	6866      	ldr	r6, [r4, #4]
 800f848:	60a6      	str	r6, [r4, #8]
 800f84a:	2e00      	cmp	r6, #0
 800f84c:	bfa2      	ittt	ge
 800f84e:	6821      	ldrge	r1, [r4, #0]
 800f850:	f021 0104 	bicge.w	r1, r1, #4
 800f854:	6021      	strge	r1, [r4, #0]
 800f856:	b90d      	cbnz	r5, 800f85c <_printf_i+0x110>
 800f858:	2e00      	cmp	r6, #0
 800f85a:	d04b      	beq.n	800f8f4 <_printf_i+0x1a8>
 800f85c:	4616      	mov	r6, r2
 800f85e:	fbb5 f1f3 	udiv	r1, r5, r3
 800f862:	fb03 5711 	mls	r7, r3, r1, r5
 800f866:	5dc7      	ldrb	r7, [r0, r7]
 800f868:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f86c:	462f      	mov	r7, r5
 800f86e:	42bb      	cmp	r3, r7
 800f870:	460d      	mov	r5, r1
 800f872:	d9f4      	bls.n	800f85e <_printf_i+0x112>
 800f874:	2b08      	cmp	r3, #8
 800f876:	d10b      	bne.n	800f890 <_printf_i+0x144>
 800f878:	6823      	ldr	r3, [r4, #0]
 800f87a:	07df      	lsls	r7, r3, #31
 800f87c:	d508      	bpl.n	800f890 <_printf_i+0x144>
 800f87e:	6923      	ldr	r3, [r4, #16]
 800f880:	6861      	ldr	r1, [r4, #4]
 800f882:	4299      	cmp	r1, r3
 800f884:	bfde      	ittt	le
 800f886:	2330      	movle	r3, #48	@ 0x30
 800f888:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f88c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f890:	1b92      	subs	r2, r2, r6
 800f892:	6122      	str	r2, [r4, #16]
 800f894:	f8cd a000 	str.w	sl, [sp]
 800f898:	464b      	mov	r3, r9
 800f89a:	aa03      	add	r2, sp, #12
 800f89c:	4621      	mov	r1, r4
 800f89e:	4640      	mov	r0, r8
 800f8a0:	f7ff fee6 	bl	800f670 <_printf_common>
 800f8a4:	3001      	adds	r0, #1
 800f8a6:	d14a      	bne.n	800f93e <_printf_i+0x1f2>
 800f8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f8ac:	b004      	add	sp, #16
 800f8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8b2:	6823      	ldr	r3, [r4, #0]
 800f8b4:	f043 0320 	orr.w	r3, r3, #32
 800f8b8:	6023      	str	r3, [r4, #0]
 800f8ba:	4833      	ldr	r0, [pc, #204]	@ (800f988 <_printf_i+0x23c>)
 800f8bc:	2778      	movs	r7, #120	@ 0x78
 800f8be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f8c2:	6823      	ldr	r3, [r4, #0]
 800f8c4:	6831      	ldr	r1, [r6, #0]
 800f8c6:	061f      	lsls	r7, r3, #24
 800f8c8:	f851 5b04 	ldr.w	r5, [r1], #4
 800f8cc:	d402      	bmi.n	800f8d4 <_printf_i+0x188>
 800f8ce:	065f      	lsls	r7, r3, #25
 800f8d0:	bf48      	it	mi
 800f8d2:	b2ad      	uxthmi	r5, r5
 800f8d4:	6031      	str	r1, [r6, #0]
 800f8d6:	07d9      	lsls	r1, r3, #31
 800f8d8:	bf44      	itt	mi
 800f8da:	f043 0320 	orrmi.w	r3, r3, #32
 800f8de:	6023      	strmi	r3, [r4, #0]
 800f8e0:	b11d      	cbz	r5, 800f8ea <_printf_i+0x19e>
 800f8e2:	2310      	movs	r3, #16
 800f8e4:	e7ac      	b.n	800f840 <_printf_i+0xf4>
 800f8e6:	4827      	ldr	r0, [pc, #156]	@ (800f984 <_printf_i+0x238>)
 800f8e8:	e7e9      	b.n	800f8be <_printf_i+0x172>
 800f8ea:	6823      	ldr	r3, [r4, #0]
 800f8ec:	f023 0320 	bic.w	r3, r3, #32
 800f8f0:	6023      	str	r3, [r4, #0]
 800f8f2:	e7f6      	b.n	800f8e2 <_printf_i+0x196>
 800f8f4:	4616      	mov	r6, r2
 800f8f6:	e7bd      	b.n	800f874 <_printf_i+0x128>
 800f8f8:	6833      	ldr	r3, [r6, #0]
 800f8fa:	6825      	ldr	r5, [r4, #0]
 800f8fc:	6961      	ldr	r1, [r4, #20]
 800f8fe:	1d18      	adds	r0, r3, #4
 800f900:	6030      	str	r0, [r6, #0]
 800f902:	062e      	lsls	r6, r5, #24
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	d501      	bpl.n	800f90c <_printf_i+0x1c0>
 800f908:	6019      	str	r1, [r3, #0]
 800f90a:	e002      	b.n	800f912 <_printf_i+0x1c6>
 800f90c:	0668      	lsls	r0, r5, #25
 800f90e:	d5fb      	bpl.n	800f908 <_printf_i+0x1bc>
 800f910:	8019      	strh	r1, [r3, #0]
 800f912:	2300      	movs	r3, #0
 800f914:	6123      	str	r3, [r4, #16]
 800f916:	4616      	mov	r6, r2
 800f918:	e7bc      	b.n	800f894 <_printf_i+0x148>
 800f91a:	6833      	ldr	r3, [r6, #0]
 800f91c:	1d1a      	adds	r2, r3, #4
 800f91e:	6032      	str	r2, [r6, #0]
 800f920:	681e      	ldr	r6, [r3, #0]
 800f922:	6862      	ldr	r2, [r4, #4]
 800f924:	2100      	movs	r1, #0
 800f926:	4630      	mov	r0, r6
 800f928:	f7f0 fcf2 	bl	8000310 <memchr>
 800f92c:	b108      	cbz	r0, 800f932 <_printf_i+0x1e6>
 800f92e:	1b80      	subs	r0, r0, r6
 800f930:	6060      	str	r0, [r4, #4]
 800f932:	6863      	ldr	r3, [r4, #4]
 800f934:	6123      	str	r3, [r4, #16]
 800f936:	2300      	movs	r3, #0
 800f938:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f93c:	e7aa      	b.n	800f894 <_printf_i+0x148>
 800f93e:	6923      	ldr	r3, [r4, #16]
 800f940:	4632      	mov	r2, r6
 800f942:	4649      	mov	r1, r9
 800f944:	4640      	mov	r0, r8
 800f946:	47d0      	blx	sl
 800f948:	3001      	adds	r0, #1
 800f94a:	d0ad      	beq.n	800f8a8 <_printf_i+0x15c>
 800f94c:	6823      	ldr	r3, [r4, #0]
 800f94e:	079b      	lsls	r3, r3, #30
 800f950:	d413      	bmi.n	800f97a <_printf_i+0x22e>
 800f952:	68e0      	ldr	r0, [r4, #12]
 800f954:	9b03      	ldr	r3, [sp, #12]
 800f956:	4298      	cmp	r0, r3
 800f958:	bfb8      	it	lt
 800f95a:	4618      	movlt	r0, r3
 800f95c:	e7a6      	b.n	800f8ac <_printf_i+0x160>
 800f95e:	2301      	movs	r3, #1
 800f960:	4632      	mov	r2, r6
 800f962:	4649      	mov	r1, r9
 800f964:	4640      	mov	r0, r8
 800f966:	47d0      	blx	sl
 800f968:	3001      	adds	r0, #1
 800f96a:	d09d      	beq.n	800f8a8 <_printf_i+0x15c>
 800f96c:	3501      	adds	r5, #1
 800f96e:	68e3      	ldr	r3, [r4, #12]
 800f970:	9903      	ldr	r1, [sp, #12]
 800f972:	1a5b      	subs	r3, r3, r1
 800f974:	42ab      	cmp	r3, r5
 800f976:	dcf2      	bgt.n	800f95e <_printf_i+0x212>
 800f978:	e7eb      	b.n	800f952 <_printf_i+0x206>
 800f97a:	2500      	movs	r5, #0
 800f97c:	f104 0619 	add.w	r6, r4, #25
 800f980:	e7f5      	b.n	800f96e <_printf_i+0x222>
 800f982:	bf00      	nop
 800f984:	08011e44 	.word	0x08011e44
 800f988:	08011e55 	.word	0x08011e55

0800f98c <__swbuf_r>:
 800f98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f98e:	460e      	mov	r6, r1
 800f990:	4614      	mov	r4, r2
 800f992:	4605      	mov	r5, r0
 800f994:	b118      	cbz	r0, 800f99e <__swbuf_r+0x12>
 800f996:	6a03      	ldr	r3, [r0, #32]
 800f998:	b90b      	cbnz	r3, 800f99e <__swbuf_r+0x12>
 800f99a:	f7fe fd07 	bl	800e3ac <__sinit>
 800f99e:	69a3      	ldr	r3, [r4, #24]
 800f9a0:	60a3      	str	r3, [r4, #8]
 800f9a2:	89a3      	ldrh	r3, [r4, #12]
 800f9a4:	071a      	lsls	r2, r3, #28
 800f9a6:	d501      	bpl.n	800f9ac <__swbuf_r+0x20>
 800f9a8:	6923      	ldr	r3, [r4, #16]
 800f9aa:	b943      	cbnz	r3, 800f9be <__swbuf_r+0x32>
 800f9ac:	4621      	mov	r1, r4
 800f9ae:	4628      	mov	r0, r5
 800f9b0:	f000 f82a 	bl	800fa08 <__swsetup_r>
 800f9b4:	b118      	cbz	r0, 800f9be <__swbuf_r+0x32>
 800f9b6:	f04f 37ff 	mov.w	r7, #4294967295
 800f9ba:	4638      	mov	r0, r7
 800f9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9be:	6823      	ldr	r3, [r4, #0]
 800f9c0:	6922      	ldr	r2, [r4, #16]
 800f9c2:	1a98      	subs	r0, r3, r2
 800f9c4:	6963      	ldr	r3, [r4, #20]
 800f9c6:	b2f6      	uxtb	r6, r6
 800f9c8:	4283      	cmp	r3, r0
 800f9ca:	4637      	mov	r7, r6
 800f9cc:	dc05      	bgt.n	800f9da <__swbuf_r+0x4e>
 800f9ce:	4621      	mov	r1, r4
 800f9d0:	4628      	mov	r0, r5
 800f9d2:	f7ff fb2b 	bl	800f02c <_fflush_r>
 800f9d6:	2800      	cmp	r0, #0
 800f9d8:	d1ed      	bne.n	800f9b6 <__swbuf_r+0x2a>
 800f9da:	68a3      	ldr	r3, [r4, #8]
 800f9dc:	3b01      	subs	r3, #1
 800f9de:	60a3      	str	r3, [r4, #8]
 800f9e0:	6823      	ldr	r3, [r4, #0]
 800f9e2:	1c5a      	adds	r2, r3, #1
 800f9e4:	6022      	str	r2, [r4, #0]
 800f9e6:	701e      	strb	r6, [r3, #0]
 800f9e8:	6962      	ldr	r2, [r4, #20]
 800f9ea:	1c43      	adds	r3, r0, #1
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d004      	beq.n	800f9fa <__swbuf_r+0x6e>
 800f9f0:	89a3      	ldrh	r3, [r4, #12]
 800f9f2:	07db      	lsls	r3, r3, #31
 800f9f4:	d5e1      	bpl.n	800f9ba <__swbuf_r+0x2e>
 800f9f6:	2e0a      	cmp	r6, #10
 800f9f8:	d1df      	bne.n	800f9ba <__swbuf_r+0x2e>
 800f9fa:	4621      	mov	r1, r4
 800f9fc:	4628      	mov	r0, r5
 800f9fe:	f7ff fb15 	bl	800f02c <_fflush_r>
 800fa02:	2800      	cmp	r0, #0
 800fa04:	d0d9      	beq.n	800f9ba <__swbuf_r+0x2e>
 800fa06:	e7d6      	b.n	800f9b6 <__swbuf_r+0x2a>

0800fa08 <__swsetup_r>:
 800fa08:	b538      	push	{r3, r4, r5, lr}
 800fa0a:	4b29      	ldr	r3, [pc, #164]	@ (800fab0 <__swsetup_r+0xa8>)
 800fa0c:	4605      	mov	r5, r0
 800fa0e:	6818      	ldr	r0, [r3, #0]
 800fa10:	460c      	mov	r4, r1
 800fa12:	b118      	cbz	r0, 800fa1c <__swsetup_r+0x14>
 800fa14:	6a03      	ldr	r3, [r0, #32]
 800fa16:	b90b      	cbnz	r3, 800fa1c <__swsetup_r+0x14>
 800fa18:	f7fe fcc8 	bl	800e3ac <__sinit>
 800fa1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa20:	0719      	lsls	r1, r3, #28
 800fa22:	d422      	bmi.n	800fa6a <__swsetup_r+0x62>
 800fa24:	06da      	lsls	r2, r3, #27
 800fa26:	d407      	bmi.n	800fa38 <__swsetup_r+0x30>
 800fa28:	2209      	movs	r2, #9
 800fa2a:	602a      	str	r2, [r5, #0]
 800fa2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa30:	81a3      	strh	r3, [r4, #12]
 800fa32:	f04f 30ff 	mov.w	r0, #4294967295
 800fa36:	e033      	b.n	800faa0 <__swsetup_r+0x98>
 800fa38:	0758      	lsls	r0, r3, #29
 800fa3a:	d512      	bpl.n	800fa62 <__swsetup_r+0x5a>
 800fa3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa3e:	b141      	cbz	r1, 800fa52 <__swsetup_r+0x4a>
 800fa40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa44:	4299      	cmp	r1, r3
 800fa46:	d002      	beq.n	800fa4e <__swsetup_r+0x46>
 800fa48:	4628      	mov	r0, r5
 800fa4a:	f7fe fe51 	bl	800e6f0 <_free_r>
 800fa4e:	2300      	movs	r3, #0
 800fa50:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa52:	89a3      	ldrh	r3, [r4, #12]
 800fa54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fa58:	81a3      	strh	r3, [r4, #12]
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	6063      	str	r3, [r4, #4]
 800fa5e:	6923      	ldr	r3, [r4, #16]
 800fa60:	6023      	str	r3, [r4, #0]
 800fa62:	89a3      	ldrh	r3, [r4, #12]
 800fa64:	f043 0308 	orr.w	r3, r3, #8
 800fa68:	81a3      	strh	r3, [r4, #12]
 800fa6a:	6923      	ldr	r3, [r4, #16]
 800fa6c:	b94b      	cbnz	r3, 800fa82 <__swsetup_r+0x7a>
 800fa6e:	89a3      	ldrh	r3, [r4, #12]
 800fa70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fa74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa78:	d003      	beq.n	800fa82 <__swsetup_r+0x7a>
 800fa7a:	4621      	mov	r1, r4
 800fa7c:	4628      	mov	r0, r5
 800fa7e:	f000 f88b 	bl	800fb98 <__smakebuf_r>
 800fa82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa86:	f013 0201 	ands.w	r2, r3, #1
 800fa8a:	d00a      	beq.n	800faa2 <__swsetup_r+0x9a>
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	60a2      	str	r2, [r4, #8]
 800fa90:	6962      	ldr	r2, [r4, #20]
 800fa92:	4252      	negs	r2, r2
 800fa94:	61a2      	str	r2, [r4, #24]
 800fa96:	6922      	ldr	r2, [r4, #16]
 800fa98:	b942      	cbnz	r2, 800faac <__swsetup_r+0xa4>
 800fa9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fa9e:	d1c5      	bne.n	800fa2c <__swsetup_r+0x24>
 800faa0:	bd38      	pop	{r3, r4, r5, pc}
 800faa2:	0799      	lsls	r1, r3, #30
 800faa4:	bf58      	it	pl
 800faa6:	6962      	ldrpl	r2, [r4, #20]
 800faa8:	60a2      	str	r2, [r4, #8]
 800faaa:	e7f4      	b.n	800fa96 <__swsetup_r+0x8e>
 800faac:	2000      	movs	r0, #0
 800faae:	e7f7      	b.n	800faa0 <__swsetup_r+0x98>
 800fab0:	20000048 	.word	0x20000048

0800fab4 <_raise_r>:
 800fab4:	291f      	cmp	r1, #31
 800fab6:	b538      	push	{r3, r4, r5, lr}
 800fab8:	4605      	mov	r5, r0
 800faba:	460c      	mov	r4, r1
 800fabc:	d904      	bls.n	800fac8 <_raise_r+0x14>
 800fabe:	2316      	movs	r3, #22
 800fac0:	6003      	str	r3, [r0, #0]
 800fac2:	f04f 30ff 	mov.w	r0, #4294967295
 800fac6:	bd38      	pop	{r3, r4, r5, pc}
 800fac8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800faca:	b112      	cbz	r2, 800fad2 <_raise_r+0x1e>
 800facc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fad0:	b94b      	cbnz	r3, 800fae6 <_raise_r+0x32>
 800fad2:	4628      	mov	r0, r5
 800fad4:	f000 f830 	bl	800fb38 <_getpid_r>
 800fad8:	4622      	mov	r2, r4
 800fada:	4601      	mov	r1, r0
 800fadc:	4628      	mov	r0, r5
 800fade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fae2:	f000 b817 	b.w	800fb14 <_kill_r>
 800fae6:	2b01      	cmp	r3, #1
 800fae8:	d00a      	beq.n	800fb00 <_raise_r+0x4c>
 800faea:	1c59      	adds	r1, r3, #1
 800faec:	d103      	bne.n	800faf6 <_raise_r+0x42>
 800faee:	2316      	movs	r3, #22
 800faf0:	6003      	str	r3, [r0, #0]
 800faf2:	2001      	movs	r0, #1
 800faf4:	e7e7      	b.n	800fac6 <_raise_r+0x12>
 800faf6:	2100      	movs	r1, #0
 800faf8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fafc:	4620      	mov	r0, r4
 800fafe:	4798      	blx	r3
 800fb00:	2000      	movs	r0, #0
 800fb02:	e7e0      	b.n	800fac6 <_raise_r+0x12>

0800fb04 <raise>:
 800fb04:	4b02      	ldr	r3, [pc, #8]	@ (800fb10 <raise+0xc>)
 800fb06:	4601      	mov	r1, r0
 800fb08:	6818      	ldr	r0, [r3, #0]
 800fb0a:	f7ff bfd3 	b.w	800fab4 <_raise_r>
 800fb0e:	bf00      	nop
 800fb10:	20000048 	.word	0x20000048

0800fb14 <_kill_r>:
 800fb14:	b538      	push	{r3, r4, r5, lr}
 800fb16:	4d07      	ldr	r5, [pc, #28]	@ (800fb34 <_kill_r+0x20>)
 800fb18:	2300      	movs	r3, #0
 800fb1a:	4604      	mov	r4, r0
 800fb1c:	4608      	mov	r0, r1
 800fb1e:	4611      	mov	r1, r2
 800fb20:	602b      	str	r3, [r5, #0]
 800fb22:	f7f1 fadd 	bl	80010e0 <_kill>
 800fb26:	1c43      	adds	r3, r0, #1
 800fb28:	d102      	bne.n	800fb30 <_kill_r+0x1c>
 800fb2a:	682b      	ldr	r3, [r5, #0]
 800fb2c:	b103      	cbz	r3, 800fb30 <_kill_r+0x1c>
 800fb2e:	6023      	str	r3, [r4, #0]
 800fb30:	bd38      	pop	{r3, r4, r5, pc}
 800fb32:	bf00      	nop
 800fb34:	200013a8 	.word	0x200013a8

0800fb38 <_getpid_r>:
 800fb38:	f7f1 bad0 	b.w	80010dc <_getpid>

0800fb3c <_malloc_usable_size_r>:
 800fb3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb40:	1f18      	subs	r0, r3, #4
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	bfbc      	itt	lt
 800fb46:	580b      	ldrlt	r3, [r1, r0]
 800fb48:	18c0      	addlt	r0, r0, r3
 800fb4a:	4770      	bx	lr

0800fb4c <__swhatbuf_r>:
 800fb4c:	b570      	push	{r4, r5, r6, lr}
 800fb4e:	460c      	mov	r4, r1
 800fb50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb54:	2900      	cmp	r1, #0
 800fb56:	b096      	sub	sp, #88	@ 0x58
 800fb58:	4615      	mov	r5, r2
 800fb5a:	461e      	mov	r6, r3
 800fb5c:	da0d      	bge.n	800fb7a <__swhatbuf_r+0x2e>
 800fb5e:	89a3      	ldrh	r3, [r4, #12]
 800fb60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fb64:	f04f 0100 	mov.w	r1, #0
 800fb68:	bf14      	ite	ne
 800fb6a:	2340      	movne	r3, #64	@ 0x40
 800fb6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fb70:	2000      	movs	r0, #0
 800fb72:	6031      	str	r1, [r6, #0]
 800fb74:	602b      	str	r3, [r5, #0]
 800fb76:	b016      	add	sp, #88	@ 0x58
 800fb78:	bd70      	pop	{r4, r5, r6, pc}
 800fb7a:	466a      	mov	r2, sp
 800fb7c:	f000 f848 	bl	800fc10 <_fstat_r>
 800fb80:	2800      	cmp	r0, #0
 800fb82:	dbec      	blt.n	800fb5e <__swhatbuf_r+0x12>
 800fb84:	9901      	ldr	r1, [sp, #4]
 800fb86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fb8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fb8e:	4259      	negs	r1, r3
 800fb90:	4159      	adcs	r1, r3
 800fb92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb96:	e7eb      	b.n	800fb70 <__swhatbuf_r+0x24>

0800fb98 <__smakebuf_r>:
 800fb98:	898b      	ldrh	r3, [r1, #12]
 800fb9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb9c:	079d      	lsls	r5, r3, #30
 800fb9e:	4606      	mov	r6, r0
 800fba0:	460c      	mov	r4, r1
 800fba2:	d507      	bpl.n	800fbb4 <__smakebuf_r+0x1c>
 800fba4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fba8:	6023      	str	r3, [r4, #0]
 800fbaa:	6123      	str	r3, [r4, #16]
 800fbac:	2301      	movs	r3, #1
 800fbae:	6163      	str	r3, [r4, #20]
 800fbb0:	b003      	add	sp, #12
 800fbb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbb4:	ab01      	add	r3, sp, #4
 800fbb6:	466a      	mov	r2, sp
 800fbb8:	f7ff ffc8 	bl	800fb4c <__swhatbuf_r>
 800fbbc:	9f00      	ldr	r7, [sp, #0]
 800fbbe:	4605      	mov	r5, r0
 800fbc0:	4639      	mov	r1, r7
 800fbc2:	4630      	mov	r0, r6
 800fbc4:	f7fe fe08 	bl	800e7d8 <_malloc_r>
 800fbc8:	b948      	cbnz	r0, 800fbde <__smakebuf_r+0x46>
 800fbca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbce:	059a      	lsls	r2, r3, #22
 800fbd0:	d4ee      	bmi.n	800fbb0 <__smakebuf_r+0x18>
 800fbd2:	f023 0303 	bic.w	r3, r3, #3
 800fbd6:	f043 0302 	orr.w	r3, r3, #2
 800fbda:	81a3      	strh	r3, [r4, #12]
 800fbdc:	e7e2      	b.n	800fba4 <__smakebuf_r+0xc>
 800fbde:	89a3      	ldrh	r3, [r4, #12]
 800fbe0:	6020      	str	r0, [r4, #0]
 800fbe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fbe6:	81a3      	strh	r3, [r4, #12]
 800fbe8:	9b01      	ldr	r3, [sp, #4]
 800fbea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fbee:	b15b      	cbz	r3, 800fc08 <__smakebuf_r+0x70>
 800fbf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbf4:	4630      	mov	r0, r6
 800fbf6:	f000 f81d 	bl	800fc34 <_isatty_r>
 800fbfa:	b128      	cbz	r0, 800fc08 <__smakebuf_r+0x70>
 800fbfc:	89a3      	ldrh	r3, [r4, #12]
 800fbfe:	f023 0303 	bic.w	r3, r3, #3
 800fc02:	f043 0301 	orr.w	r3, r3, #1
 800fc06:	81a3      	strh	r3, [r4, #12]
 800fc08:	89a3      	ldrh	r3, [r4, #12]
 800fc0a:	431d      	orrs	r5, r3
 800fc0c:	81a5      	strh	r5, [r4, #12]
 800fc0e:	e7cf      	b.n	800fbb0 <__smakebuf_r+0x18>

0800fc10 <_fstat_r>:
 800fc10:	b538      	push	{r3, r4, r5, lr}
 800fc12:	4d07      	ldr	r5, [pc, #28]	@ (800fc30 <_fstat_r+0x20>)
 800fc14:	2300      	movs	r3, #0
 800fc16:	4604      	mov	r4, r0
 800fc18:	4608      	mov	r0, r1
 800fc1a:	4611      	mov	r1, r2
 800fc1c:	602b      	str	r3, [r5, #0]
 800fc1e:	f7f1 fa8f 	bl	8001140 <_fstat>
 800fc22:	1c43      	adds	r3, r0, #1
 800fc24:	d102      	bne.n	800fc2c <_fstat_r+0x1c>
 800fc26:	682b      	ldr	r3, [r5, #0]
 800fc28:	b103      	cbz	r3, 800fc2c <_fstat_r+0x1c>
 800fc2a:	6023      	str	r3, [r4, #0]
 800fc2c:	bd38      	pop	{r3, r4, r5, pc}
 800fc2e:	bf00      	nop
 800fc30:	200013a8 	.word	0x200013a8

0800fc34 <_isatty_r>:
 800fc34:	b538      	push	{r3, r4, r5, lr}
 800fc36:	4d06      	ldr	r5, [pc, #24]	@ (800fc50 <_isatty_r+0x1c>)
 800fc38:	2300      	movs	r3, #0
 800fc3a:	4604      	mov	r4, r0
 800fc3c:	4608      	mov	r0, r1
 800fc3e:	602b      	str	r3, [r5, #0]
 800fc40:	f7f1 fa84 	bl	800114c <_isatty>
 800fc44:	1c43      	adds	r3, r0, #1
 800fc46:	d102      	bne.n	800fc4e <_isatty_r+0x1a>
 800fc48:	682b      	ldr	r3, [r5, #0]
 800fc4a:	b103      	cbz	r3, 800fc4e <_isatty_r+0x1a>
 800fc4c:	6023      	str	r3, [r4, #0]
 800fc4e:	bd38      	pop	{r3, r4, r5, pc}
 800fc50:	200013a8 	.word	0x200013a8

0800fc54 <_init>:
 800fc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc56:	bf00      	nop
 800fc58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc5a:	bc08      	pop	{r3}
 800fc5c:	469e      	mov	lr, r3
 800fc5e:	4770      	bx	lr

0800fc60 <_fini>:
 800fc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc62:	bf00      	nop
 800fc64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc66:	bc08      	pop	{r3}
 800fc68:	469e      	mov	lr, r3
 800fc6a:	4770      	bx	lr
