
freertos-iperf-port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e764  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ec0  0800ea04  0800ea04  0000fa04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080108c4  080108c4  000118c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080108cc  080108cc  000118cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080108d0  080108d0  000118d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000098  20000000  080108d4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001228  20000098  0801096c  00012098  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200012c0  0801096c  000122c0  2**0
                  ALLOC
  9 .dtcm_data    00018000  200018c0  0801096c  000128c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ethernet_data 000580c0  24000000  24000000  0002b000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ram2_data    00010000  30000000  30000000  00084000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ram3_data    00008000  38000000  38000000  00094000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 0000002e  00000000  00000000  0009c000  2**0
                  CONTENTS, READONLY
 14 .debug_info   00045806  00000000  00000000  0009c02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008207  00000000  00000000  000e1834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0001f29a  00000000  00000000  000e9a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001b80  00000000  00000000  00108cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000345e  00000000  00000000  0010a858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000405c4  00000000  00000000  0010dcb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003e8eb  00000000  00000000  0014e27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0017ffe7  00000000  00000000  0018cb65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0030cb4c  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00005d28  00000000  00000000  0030cb90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006f  00000000  00000000  003128b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000098 	.word	0x20000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e9ec 	.word	0x0800e9ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000009c 	.word	0x2000009c
 80002dc:	0800e9ec 	.word	0x0800e9ec

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <prvServerWorkTask>:
/*-----------------------------------------------------------*/

#define CONTINUOUS_PING	0

static void prvServerWorkTask( void *pvParameters )
{
 80006a0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80006a4:	b0c3      	sub	sp, #268	@ 0x10c
 80006a6:	f8df 8228 	ldr.w	r8, [pc, #552]	@ 80008d0 <prvServerWorkTask+0x230>
 80006aa:	4d7a      	ldr	r5, [pc, #488]	@ (8000894 <prvServerWorkTask+0x1f4>)
 80006ac:	af08      	add	r7, sp, #32
 80006ae:	f8df 9224 	ldr.w	r9, [pc, #548]	@ 80008d4 <prvServerWorkTask+0x234>
 80006b2:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80008d8 <prvServerWorkTask+0x238>
	TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 100U );
#endif	/* ( CONTINUOUS_PING != 0 ) */

	for( ;; )
	{
		vTaskDelay( 10U );
 80006b6:	200a      	movs	r0, #10
 80006b8:	f008 fe2e 	bl	8009318 <vTaskDelay>
		if( xDoCreateSockets != pdFALSE )
 80006bc:	f8d8 3000 	ldr.w	r3, [r8]
 80006c0:	b123      	cbz	r3, 80006cc <prvServerWorkTask+0x2c>
		{
			xDoCreateSockets = pdFALSE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	f8c8 3000 	str.w	r3, [r8]
			/* Start a new task to fetch logging lines and send them out.
			See FreeRTOSConfig.h for the configuration of UDP logging. */
			vUDPLoggingTaskCreate();
 80006c8:	f00c fb92 	bl	800cdf0 <vUDPLoggingTaskCreate>
static BaseType_t run_command_line()
{
char  pcBuffer[ 92 ];
BaseType_t xCount;
struct freertos_sockaddr xSourceAddress;
socklen_t xSourceAddressLength = sizeof( xSourceAddress );
 80006cc:	2308      	movs	r3, #8
 80006ce:	9308      	str	r3, [sp, #32]
xSocket_t xSocket = xLoggingGetSocket();
 80006d0:	f00c fba8 	bl	800ce24 <xLoggingGetSocket>
static NetworkBufferDescriptor_t *pxDescriptor = NULL;

	if( xSocket == NULL )
 80006d4:	4604      	mov	r4, r0
 80006d6:	2800      	cmp	r0, #0
 80006d8:	d0ed      	beq.n	80006b6 <prvServerWorkTask+0x16>
		return 0;
	}

	#if( USE_ZERO_COPY )
	{
		if( pxDescriptor != NULL )
 80006da:	6828      	ldr	r0, [r5, #0]
 80006dc:	b118      	cbz	r0, 80006e6 <prvServerWorkTask+0x46>
		{
			vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 80006de:	f006 f957 	bl	8006990 <vReleaseNetworkBufferAndDescriptor>
			pxDescriptor = NULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	602b      	str	r3, [r5, #0]
		}
		char  *ppcBuffer;
		xCount = FreeRTOS_recvfrom( xSocket, ( void * )&ppcBuffer, sizeof( pcBuffer ) - 1, FREERTOS_MSG_DONTWAIT | FREERTOS_ZERO_COPY, &xSourceAddress, &xSourceAddressLength );
 80006e6:	ab09      	add	r3, sp, #36	@ 0x24
 80006e8:	225b      	movs	r2, #91	@ 0x5b
 80006ea:	4620      	mov	r0, r4
 80006ec:	a922      	add	r1, sp, #136	@ 0x88
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2311      	movs	r3, #17
 80006f2:	9701      	str	r7, [sp, #4]
 80006f4:	f002 f9bc 	bl	8002a70 <FreeRTOS_recvfrom>
		if( xCount > 0 )
 80006f8:	1e02      	subs	r2, r0, #0
 80006fa:	dddc      	ble.n	80006b6 <prvServerWorkTask+0x16>
		{
			if( ( ( size_t ) xCount ) > ( sizeof pcBuffer - 1 ) )
 80006fc:	2a5b      	cmp	r2, #91	@ 0x5b
			{
				xCount = ( BaseType_t ) ( sizeof pcBuffer - 1 );
			}
			memcpy( pcBuffer, ppcBuffer, xCount );
			pcBuffer[ xCount ] = '\0';
 80006fe:	ab42      	add	r3, sp, #264	@ 0x108
			memcpy( pcBuffer, ppcBuffer, xCount );
 8000700:	f8dd b088 	ldr.w	fp, [sp, #136]	@ 0x88
			pcBuffer[ xCount ] = '\0';
 8000704:	f04f 0600 	mov.w	r6, #0
			if( ( ( size_t ) xCount ) > ( sizeof pcBuffer - 1 ) )
 8000708:	bfa8      	it	ge
 800070a:	225b      	movge	r2, #91	@ 0x5b
			memcpy( pcBuffer, ppcBuffer, xCount );
 800070c:	a80b      	add	r0, sp, #44	@ 0x2c
 800070e:	4659      	mov	r1, fp
			pcBuffer[ xCount ] = '\0';
 8000710:	189c      	adds	r4, r3, r2
			memcpy( pcBuffer, ppcBuffer, xCount );
 8000712:	f00c fd55 	bl	800d1c0 <memcpy>
			pxDescriptor = pxUDPPayloadBuffer_to_NetworkBuffer( ( const void * ) ppcBuffer );
 8000716:	4658      	mov	r0, fp
			pcBuffer[ xCount ] = '\0';
 8000718:	f804 6cdc 	strb.w	r6, [r4, #-220]
			pxDescriptor = pxUDPPayloadBuffer_to_NetworkBuffer( ( const void * ) ppcBuffer );
 800071c:	f001 fc08 	bl	8001f30 <pxUDPPayloadBuffer_to_NetworkBuffer>
	#endif
	if( xCount <= 0 )
	{
		return 0;
	}
	pcBuffer[ xCount ] = 0;
 8000720:	f804 6cdc 	strb.w	r6, [r4, #-220]
	if( strncmp( pcBuffer, "ver", 4 ) == 0 )
 8000724:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000726:	4a5c      	ldr	r2, [pc, #368]	@ (8000898 <prvServerWorkTask+0x1f8>)
			pxDescriptor = pxUDPPayloadBuffer_to_NetworkBuffer( ( const void * ) ppcBuffer );
 8000728:	6028      	str	r0, [r5, #0]
	if( strncmp( pcBuffer, "ver", 4 ) == 0 )
 800072a:	4293      	cmp	r3, r2
 800072c:	d01e      	beq.n	800076c <prvServerWorkTask+0xcc>
	{
		lUDPLoggingPrintf( "Verbose level %d\n", verboseLevel );
		lUDPLoggingPrintf( "CPU sped %lu\n", configCPU_CLOCK_HZ );
	}
	else if( strncmp( pcBuffer, "hrtime", 6 ) == 0 )
 800072e:	4a5b      	ldr	r2, [pc, #364]	@ (800089c <prvServerWorkTask+0x1fc>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d026      	beq.n	8000782 <prvServerWorkTask+0xe2>
			( uint32_t ) difTime,
			( uint32_t ) ulDifTime );
		lastTime = curTime;
		ulLastTime = ulCurTime;
	}
	else if( memcmp( pcBuffer, "random", 6 ) == 0 )
 8000734:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000736:	4a5a      	ldr	r2, [pc, #360]	@ (80008a0 <prvServerWorkTask+0x200>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d049      	beq.n	80007d0 <prvServerWorkTask+0x130>
				ulFrequencies[ ulIndex + 7 ] ) );
		}
		FreeRTOS_printf( ( "\n" ) );
	}
#if ( USE_IPERF != 0 )
    else if( strncmp( pcBuffer, "iperf", 5 ) == 0 )
 800073c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800073e:	4a59      	ldr	r2, [pc, #356]	@ (80008a4 <prvServerWorkTask+0x204>)
 8000740:	4293      	cmp	r3, r2
 8000742:	f000 808a 	beq.w	800085a <prvServerWorkTask+0x1ba>
    {
        FreeRTOS_printf( ( "iperf is already installed.\n" ) );
    }
#endif /* ( USE_IPERF != 0 ) */
	else if( memcmp( pcBuffer, "mem", 3 ) == 0 )
 8000746:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800074a:	f246 536d 	movw	r3, #25965	@ 0x656d
 800074e:	429a      	cmp	r2, r3
 8000750:	f000 808c 	beq.w	800086c <prvServerWorkTask+0x1cc>
		}
	}
#endif /* USE_LOG_EVENT */
	else
	{
		FreeRTOS_printf( ( "Don't know: %s\n", pcBuffer ) );
 8000754:	a90b      	add	r1, sp, #44	@ 0x2c
 8000756:	4854      	ldr	r0, [pc, #336]	@ (80008a8 <prvServerWorkTask+0x208>)
 8000758:	f00c fb70 	bl	800ce3c <lUDPLoggingPrintf>
		vTaskDelay( 10U );
 800075c:	200a      	movs	r0, #10
 800075e:	f008 fddb 	bl	8009318 <vTaskDelay>
		if( xDoCreateSockets != pdFALSE )
 8000762:	f8d8 3000 	ldr.w	r3, [r8]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1ab      	bne.n	80006c2 <prvServerWorkTask+0x22>
 800076a:	e7af      	b.n	80006cc <prvServerWorkTask+0x2c>
		lUDPLoggingPrintf( "Verbose level %d\n", verboseLevel );
 800076c:	4b4f      	ldr	r3, [pc, #316]	@ (80008ac <prvServerWorkTask+0x20c>)
 800076e:	4850      	ldr	r0, [pc, #320]	@ (80008b0 <prvServerWorkTask+0x210>)
 8000770:	6819      	ldr	r1, [r3, #0]
 8000772:	f00c fb63 	bl	800ce3c <lUDPLoggingPrintf>
		lUDPLoggingPrintf( "CPU sped %lu\n", configCPU_CLOCK_HZ );
 8000776:	4b4f      	ldr	r3, [pc, #316]	@ (80008b4 <prvServerWorkTask+0x214>)
 8000778:	484f      	ldr	r0, [pc, #316]	@ (80008b8 <prvServerWorkTask+0x218>)
 800077a:	6819      	ldr	r1, [r3, #0]
 800077c:	f00c fb5e 	bl	800ce3c <lUDPLoggingPrintf>
 8000780:	e799      	b.n	80006b6 <prvServerWorkTask+0x16>
	else if( strncmp( pcBuffer, "hrtime", 6 ) == 0 )
 8000782:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8000786:	f246 536d 	movw	r3, #25965	@ 0x656d
 800078a:	429a      	cmp	r2, r3
 800078c:	d1d2      	bne.n	8000734 <prvServerWorkTask+0x94>
		uint64_t curTime = ullGetHighResolutionTime();
 800078e:	f00c fcfb 	bl	800d188 <ullGetHighResolutionTime>
		uint32_t difTime = ( uint32_t ) ( ( curTime - lastTime ) / 1000U );
 8000792:	f8d9 3000 	ldr.w	r3, [r9]
		uint64_t curTime = ullGetHighResolutionTime();
 8000796:	468b      	mov	fp, r1
 8000798:	4604      	mov	r4, r0
		uint32_t difTime = ( uint32_t ) ( ( curTime - lastTime ) / 1000U );
 800079a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800079e:	1ac0      	subs	r0, r0, r3
 80007a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007a4:	f04f 0300 	mov.w	r3, #0
 80007a8:	eb6b 0101 	sbc.w	r1, fp, r1
 80007ac:	f7ff fe00 	bl	80003b0 <__aeabi_uldivmod>
 80007b0:	4606      	mov	r6, r0
		TickType_t ulCurTime = xTaskGetTickCount();
 80007b2:	f008 fc45 	bl	8009040 <xTaskGetTickCount>
		TickType_t ulDifTime = ulCurTime - ulLastTime;
 80007b6:	f8da 2000 	ldr.w	r2, [sl]
		lUDPLoggingPrintf( "hr_time %lu  FreeRTOS %u\n",
 80007ba:	4631      	mov	r1, r6
		TickType_t ulCurTime = xTaskGetTickCount();
 80007bc:	4606      	mov	r6, r0
		lUDPLoggingPrintf( "hr_time %lu  FreeRTOS %u\n",
 80007be:	1a82      	subs	r2, r0, r2
 80007c0:	483e      	ldr	r0, [pc, #248]	@ (80008bc <prvServerWorkTask+0x21c>)
 80007c2:	f00c fb3b 	bl	800ce3c <lUDPLoggingPrintf>
		ulLastTime = ulCurTime;
 80007c6:	f8ca 6000 	str.w	r6, [sl]
		lastTime = curTime;
 80007ca:	e9c9 4b00 	strd	r4, fp, [r9]
		ulLastTime = ulCurTime;
 80007ce:	e772      	b.n	80006b6 <prvServerWorkTask+0x16>
	else if( memcmp( pcBuffer, "random", 6 ) == 0 )
 80007d0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 80007d4:	f646 536f 	movw	r3, #28015	@ 0x6d6f
 80007d8:	429a      	cmp	r2, r3
 80007da:	d1af      	bne.n	800073c <prvServerWorkTask+0x9c>
		memset( ulFrequencies, 0, sizeof ulFrequencies );
 80007dc:	f644 6420 	movw	r4, #20000	@ 0x4e20
 80007e0:	ae42      	add	r6, sp, #264	@ 0x108
 80007e2:	2280      	movs	r2, #128	@ 0x80
 80007e4:	2100      	movs	r1, #0
 80007e6:	a822      	add	r0, sp, #136	@ 0x88
 80007e8:	f00c fdbe 	bl	800d368 <memset>
			ulValue = rand();
 80007ec:	f10d 0b88 	add.w	fp, sp, #136	@ 0x88
 80007f0:	f00d f8e2 	bl	800d9b8 <rand>
 80007f4:	465a      	mov	r2, fp
				if( ( ulValue & 0x80000000U ) != 0 )
 80007f6:	2800      	cmp	r0, #0
				ulValue <<= 1;
 80007f8:	ea4f 0040 	mov.w	r0, r0, lsl #1
				if( ( ulValue & 0x80000000U ) != 0 )
 80007fc:	da02      	bge.n	8000804 <prvServerWorkTask+0x164>
					ulFrequencies[ ulIndex ]++;
 80007fe:	6813      	ldr	r3, [r2, #0]
 8000800:	3301      	adds	r3, #1
 8000802:	6013      	str	r3, [r2, #0]
			for( ulIndex = 0; ulIndex < ARRAY_SIZE( ulFrequencies ); ulIndex++ )
 8000804:	3204      	adds	r2, #4
 8000806:	42b2      	cmp	r2, r6
 8000808:	d1f5      	bne.n	80007f6 <prvServerWorkTask+0x156>
		for( ulCount = 0U; ulCount < 20000; ulCount++ )
 800080a:	3c01      	subs	r4, #1
 800080c:	d1ee      	bne.n	80007ec <prvServerWorkTask+0x14c>
			FreeRTOS_printf( ( "%2d - %2d : %6u %6u %6u %6u %6u %6u %6u %6u\n",
 800080e:	4e2c      	ldr	r6, [pc, #176]	@ (80008c0 <prvServerWorkTask+0x220>)
 8000810:	f8db 301c 	ldr.w	r3, [fp, #28]
 8000814:	1de2      	adds	r2, r4, #7
 8000816:	4621      	mov	r1, r4
		for( ulIndex = 0; ulIndex < ARRAY_SIZE( ulFrequencies ); ulIndex += 8 )
 8000818:	3408      	adds	r4, #8
			FreeRTOS_printf( ( "%2d - %2d : %6u %6u %6u %6u %6u %6u %6u %6u\n",
 800081a:	9306      	str	r3, [sp, #24]
 800081c:	4630      	mov	r0, r6
 800081e:	f8db 3018 	ldr.w	r3, [fp, #24]
		for( ulIndex = 0; ulIndex < ARRAY_SIZE( ulFrequencies ); ulIndex += 8 )
 8000822:	f10b 0b20 	add.w	fp, fp, #32
			FreeRTOS_printf( ( "%2d - %2d : %6u %6u %6u %6u %6u %6u %6u %6u\n",
 8000826:	9305      	str	r3, [sp, #20]
 8000828:	f85b 3c0c 	ldr.w	r3, [fp, #-12]
 800082c:	9304      	str	r3, [sp, #16]
 800082e:	f85b 3c10 	ldr.w	r3, [fp, #-16]
 8000832:	9303      	str	r3, [sp, #12]
 8000834:	f85b 3c14 	ldr.w	r3, [fp, #-20]
 8000838:	9302      	str	r3, [sp, #8]
 800083a:	f85b 3c18 	ldr.w	r3, [fp, #-24]
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	f85b 3c1c 	ldr.w	r3, [fp, #-28]
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	f85b 3c20 	ldr.w	r3, [fp, #-32]
 800084a:	f00c faf7 	bl	800ce3c <lUDPLoggingPrintf>
		for( ulIndex = 0; ulIndex < ARRAY_SIZE( ulFrequencies ); ulIndex += 8 )
 800084e:	2c20      	cmp	r4, #32
 8000850:	d1de      	bne.n	8000810 <prvServerWorkTask+0x170>
		FreeRTOS_printf( ( "\n" ) );
 8000852:	481c      	ldr	r0, [pc, #112]	@ (80008c4 <prvServerWorkTask+0x224>)
 8000854:	f00c faf2 	bl	800ce3c <lUDPLoggingPrintf>
 8000858:	e72d      	b.n	80006b6 <prvServerWorkTask+0x16>
    else if( strncmp( pcBuffer, "iperf", 5 ) == 0 )
 800085a:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800085e:	2b66      	cmp	r3, #102	@ 0x66
 8000860:	f47f af71 	bne.w	8000746 <prvServerWorkTask+0xa6>
        FreeRTOS_printf( ( "iperf is already installed.\n" ) );
 8000864:	4818      	ldr	r0, [pc, #96]	@ (80008c8 <prvServerWorkTask+0x228>)
 8000866:	f00c fae9 	bl	800ce3c <lUDPLoggingPrintf>
 800086a:	e724      	b.n	80006b6 <prvServerWorkTask+0x16>
	else if( memcmp( pcBuffer, "mem", 3 ) == 0 )
 800086c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8000870:	2b6d      	cmp	r3, #109	@ 0x6d
 8000872:	f47f af6f 	bne.w	8000754 <prvServerWorkTask+0xb4>
		uint32_t now = xPortGetFreeHeapSize( );
 8000876:	f009 fbe5 	bl	800a044 <xPortGetFreeHeapSize>
 800087a:	4604      	mov	r4, r0
		lUDPLoggingPrintf("mem Low %u, Current %lu / %lu (%lu perc free)\n",
 800087c:	f009 fbe8 	bl	800a050 <xPortGetMinimumEverFreeHeapSize>
 8000880:	2364      	movs	r3, #100	@ 0x64
 8000882:	4601      	mov	r1, r0
 8000884:	4622      	mov	r2, r4
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	2300      	movs	r3, #0
 800088a:	4810      	ldr	r0, [pc, #64]	@ (80008cc <prvServerWorkTask+0x22c>)
 800088c:	f00c fad6 	bl	800ce3c <lUDPLoggingPrintf>
 8000890:	e711      	b.n	80006b6 <prvServerWorkTask+0x16>
 8000892:	bf00      	nop
 8000894:	200000c0 	.word	0x200000c0
 8000898:	00726576 	.word	0x00726576
 800089c:	69747268 	.word	0x69747268
 80008a0:	646e6172 	.word	0x646e6172
 80008a4:	72657069 	.word	0x72657069
 80008a8:	0800eb2c 	.word	0x0800eb2c
 80008ac:	200000cc 	.word	0x200000cc
 80008b0:	0800ea50 	.word	0x0800ea50
 80008b4:	20000004 	.word	0x20000004
 80008b8:	0800ea64 	.word	0x0800ea64
 80008bc:	0800ea7c 	.word	0x0800ea7c
 80008c0:	0800eaa0 	.word	0x0800eaa0
 80008c4:	0800eb68 	.word	0x0800eb68
 80008c8:	0800ead8 	.word	0x0800ead8
 80008cc:	0800eafc 	.word	0x0800eafc
 80008d0:	200000c8 	.word	0x200000c8
 80008d4:	200000b8 	.word	0x200000b8
 80008d8:	200000b4 	.word	0x200000b4

080008dc <vTCPSendADC>:
//
//supply the RAM used by the Idle and Timer Service tasks if configSUPPORT_STATIC_ALLOCATION
//
//is set to 1.

void vTCPSendADC(void *pvParameter){
 80008dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct freertos_sockaddr xRemoteAddress;
  socklen_t xSocketLength;
  static const TickType_t xTimeOut = pdMS_TO_TICKS( 2000 );
  size_t xLenToSend;
  BaseType_t xAlreadyTransmitted = 0, xBytesSent = 0;
  BaseType_t xTxBufLen = 0;
 80008de:	2500      	movs	r5, #0
void vTCPSendADC(void *pvParameter){
 80008e0:	b08b      	sub	sp, #44	@ 0x2c
  char* pTxBuf;
  const size_t xTotalLengthToSend = 65536;

  FreeRTOS_printf(("ADC Task Start \n"));
 80008e2:	4841      	ldr	r0, [pc, #260]	@ (80009e8 <vTCPSendADC+0x10c>)
  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */

  /* Set send and receive time outs. */
  FreeRTOS_setsockopt( xSendSocket,
 80008e4:	2604      	movs	r6, #4
  BaseType_t xTxBufLen = 0;
 80008e6:	9502      	str	r5, [sp, #8]
  FreeRTOS_printf(("ADC Task Start \n"));
 80008e8:	f00c faa8 	bl	800ce3c <lUDPLoggingPrintf>
  xRemoteAddress.sin_port = FreeRTOS_htons( 5555 );
 80008ec:	f24b 3115 	movw	r1, #45845	@ 0xb315
  xRemoteAddress.sin_addr = FreeRTOS_inet_addr_quick( 192, 168, 1, 3 );
 80008f0:	4b3e      	ldr	r3, [pc, #248]	@ (80009ec <vTCPSendADC+0x110>)
  xRemoteAddress.sin_family = FREERTOS_AF_INET;
 80008f2:	2002      	movs	r0, #2
  xSendSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 80008f4:	2206      	movs	r2, #6
  xRemoteAddress.sin_port = FreeRTOS_htons( 5555 );
 80008f6:	f8ad 1012 	strh.w	r1, [sp, #18]
  xSendSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 80008fa:	2101      	movs	r1, #1
  xRemoteAddress.sin_addr = FreeRTOS_inet_addr_quick( 192, 168, 1, 3 );
 80008fc:	9305      	str	r3, [sp, #20]
  memset( &xRemoteAddress, 0, sizeof(xRemoteAddress) );
 80008fe:	f88d 5010 	strb.w	r5, [sp, #16]
  xRemoteAddress.sin_family = FREERTOS_AF_INET;
 8000902:	f88d 0011 	strb.w	r0, [sp, #17]
  xSendSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8000906:	f002 f823 	bl	8002950 <FreeRTOS_socket>
  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 800090a:	f648 02e0 	movw	r2, #35040	@ 0x88e0
 800090e:	230c      	movs	r3, #12
  xSendSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8000910:	4604      	mov	r4, r0
  FreeRTOS_setsockopt( xSendSocket,
 8000912:	4629      	mov	r1, r5
 8000914:	9600      	str	r6, [sp, #0]
  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 8000916:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800091a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  FreeRTOS_setsockopt( xSendSocket,
 800091e:	4b34      	ldr	r3, [pc, #208]	@ (80009f0 <vTCPSendADC+0x114>)
 8000920:	462a      	mov	r2, r5
 8000922:	f002 fb3f 	bl	8002fa4 <FreeRTOS_setsockopt>
		     0,
		     FREERTOS_SO_RCVTIMEO,
		     &xTimeOut,
		     sizeof( xTimeOut ) );

  FreeRTOS_setsockopt( xSendSocket,
 8000926:	4b32      	ldr	r3, [pc, #200]	@ (80009f0 <vTCPSendADC+0x114>)
 8000928:	2201      	movs	r2, #1
 800092a:	4629      	mov	r1, r5
 800092c:	4620      	mov	r0, r4
 800092e:	9600      	str	r6, [sp, #0]
 8000930:	f002 fb38 	bl	8002fa4 <FreeRTOS_setsockopt>
		     0,
		     FREERTOS_SO_SNDTIMEO,
		     &xTimeOut,
		     sizeof( xTimeOut ) );

  FreeRTOS_setsockopt( xSendSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 8000934:	2110      	movs	r1, #16
 8000936:	ab06      	add	r3, sp, #24
 8000938:	220d      	movs	r2, #13
 800093a:	9100      	str	r1, [sp, #0]
 800093c:	4620      	mov	r0, r4
 800093e:	4629      	mov	r1, r5
 8000940:	f002 fb30 	bl	8002fa4 <FreeRTOS_setsockopt>

  /* Check the socket was created. */
  configASSERT( xSendSocket != FREERTOS_INVALID_SOCKET );
 8000944:	1c63      	adds	r3, r4, #1
 8000946:	d043      	beq.n	80009d0 <vTCPSendADC+0xf4>
  FreeRTOS_printf(("Created ADC Data Socket \n"));
 8000948:	482a      	ldr	r0, [pc, #168]	@ (80009f4 <vTCPSendADC+0x118>)
 800094a:	f00c fa77 	bl	800ce3c <lUDPLoggingPrintf>


  /* Connect to the remote socket. The socket has not previously been bound to
         a local port number so will get automatically bound to a local port inside
         the FreeRTOS_connect() function. */
      if( FreeRTOS_connect( xSendSocket, &xRemoteAddress, sizeof( xRemoteAddress ) ) == 0 )
 800094e:	2208      	movs	r2, #8
 8000950:	a904      	add	r1, sp, #16
 8000952:	4620      	mov	r0, r4
 8000954:	f002 fd44 	bl	80033e0 <FreeRTOS_connect>
 8000958:	4605      	mov	r5, r0
 800095a:	b1b8      	cbz	r0, 800098c <vTCPSendADC+0xb0>
              }
          }
      }

      /* Initiate graceful shutdown. */
      FreeRTOS_shutdown( xSendSocket, FREERTOS_SHUT_RDWR );
 800095c:	2102      	movs	r1, #2
 800095e:	4620      	mov	r0, r4
      /* Wait for the socket to disconnect gracefully (indicated by FreeRTOS\_recv()
	 returning a -pdFREERTOS_ERRNO_EINVAL error) before closing the socket. */
      while( FreeRTOS_recv( xSendSocket, adc_data_mock, xTotalLengthToSend, 0 ) >= 0 )
 8000960:	4d25      	ldr	r5, [pc, #148]	@ (80009f8 <vTCPSendADC+0x11c>)
      FreeRTOS_shutdown( xSendSocket, FREERTOS_SHUT_RDWR );
 8000962:	f002 ff81 	bl	8003868 <FreeRTOS_shutdown>
      while( FreeRTOS_recv( xSendSocket, adc_data_mock, xTotalLengthToSend, 0 ) >= 0 )
 8000966:	e001      	b.n	800096c <vTCPSendADC+0x90>
      {
	  /* Wait for shutdown to complete. If a receive block time is used then
	     this delay will not be necessary as FreeRTOS_recv() will place the RTOS task
	     into the Blocked state anyway. */
	  vTaskDelay( 1 );
 8000968:	f008 fcd6 	bl	8009318 <vTaskDelay>
      while( FreeRTOS_recv( xSendSocket, adc_data_mock, xTotalLengthToSend, 0 ) >= 0 )
 800096c:	2300      	movs	r3, #0
 800096e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000972:	4629      	mov	r1, r5
 8000974:	4620      	mov	r0, r4
 8000976:	f002 fdb5 	bl	80034e4 <FreeRTOS_recv>
 800097a:	4603      	mov	r3, r0
	  vTaskDelay( 1 );
 800097c:	2001      	movs	r0, #1
      while( FreeRTOS_recv( xSendSocket, adc_data_mock, xTotalLengthToSend, 0 ) >= 0 )
 800097e:	2b00      	cmp	r3, #0
 8000980:	daf2      	bge.n	8000968 <vTCPSendADC+0x8c>
	  /* Note - real applications should implement a timeout here, not just
	     loop forever. */
      }

      /* The socket has shut down and is safe to close. */
      FreeRTOS_closesocket( xSendSocket );
 8000982:	4620      	mov	r0, r4
 8000984:	f002 fa54 	bl	8002e30 <FreeRTOS_closesocket>

}
 8000988:	b00b      	add	sp, #44	@ 0x2c
 800098a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  FreeRTOS_printf(("Connected to Remote ADC Data Socket \n"));
 800098c:	481b      	ldr	r0, [pc, #108]	@ (80009fc <vTCPSendADC+0x120>)
 800098e:	f00c fa55 	bl	800ce3c <lUDPLoggingPrintf>
	  pTxBuf = (char*)FreeRTOS_get_tx_head(xSendSocket, &xTxBufLen);
 8000992:	a902      	add	r1, sp, #8
 8000994:	4620      	mov	r0, r4
 8000996:	4f18      	ldr	r7, [pc, #96]	@ (80009f8 <vTCPSendADC+0x11c>)
 8000998:	f002 fe5c 	bl	8003654 <FreeRTOS_get_tx_head>
	  FreeRTOS_printf(("ADC TX Buffer Length: %d \n", (uint32_t)xTxBufLen));
 800099c:	9902      	ldr	r1, [sp, #8]
 800099e:	4818      	ldr	r0, [pc, #96]	@ (8000a00 <vTCPSendADC+0x124>)
                  FreeRTOS_printf(("Already transmitted %d bytes \n", xAlreadyTransmitted));
 80009a0:	4e18      	ldr	r6, [pc, #96]	@ (8000a04 <vTCPSendADC+0x128>)
	  FreeRTOS_printf(("ADC TX Buffer Length: %d \n", (uint32_t)xTxBufLen));
 80009a2:	f00c fa4b 	bl	800ce3c <lUDPLoggingPrintf>
          while( xAlreadyTransmitted < xTotalLengthToSend )
 80009a6:	e005      	b.n	80009b4 <vTCPSendADC+0xd8>
                  FreeRTOS_printf(("Already transmitted %d bytes \n", xAlreadyTransmitted));
 80009a8:	4629      	mov	r1, r5
 80009aa:	f00c fa47 	bl	800ce3c <lUDPLoggingPrintf>
          while( xAlreadyTransmitted < xTotalLengthToSend )
 80009ae:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 80009b2:	dad3      	bge.n	800095c <vTCPSendADC+0x80>
              xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 80009b4:	f5c5 3280 	rsb	r2, r5, #65536	@ 0x10000
 80009b8:	eb07 0145 	add.w	r1, r7, r5, lsl #1
 80009bc:	2300      	movs	r3, #0
 80009be:	4620      	mov	r0, r4
 80009c0:	f002 fe6e 	bl	80036a0 <FreeRTOS_send>
 80009c4:	4603      	mov	r3, r0
                  FreeRTOS_printf(("Already transmitted %d bytes \n", xAlreadyTransmitted));
 80009c6:	4630      	mov	r0, r6
              if( xBytesSent >= 0 )
 80009c8:	2b00      	cmp	r3, #0
                  xAlreadyTransmitted += xBytesSent;
 80009ca:	441d      	add	r5, r3
              if( xBytesSent >= 0 )
 80009cc:	daec      	bge.n	80009a8 <vTCPSendADC+0xcc>
 80009ce:	e7c5      	b.n	800095c <vTCPSendADC+0x80>
volatile unsigned long ul = 0;
 80009d0:	9503      	str	r5, [sp, #12]
	taskENTER_CRITICAL();
 80009d2:	f009 f92f 	bl	8009c34 <vPortEnterCritical>
		while( ul == 0 )
 80009d6:	9b03      	ldr	r3, [sp, #12]
 80009d8:	b91b      	cbnz	r3, 80009e2 <vTCPSendADC+0x106>
			__NOP();
 80009da:	bf00      	nop
		while( ul == 0 )
 80009dc:	9b03      	ldr	r3, [sp, #12]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d0fb      	beq.n	80009da <vTCPSendADC+0xfe>
	taskEXIT_CRITICAL();
 80009e2:	f009 f949 	bl	8009c78 <vPortExitCritical>
}
 80009e6:	e7af      	b.n	8000948 <vTCPSendADC+0x6c>
 80009e8:	0800eb3c 	.word	0x0800eb3c
 80009ec:	0301a8c0 	.word	0x0301a8c0
 80009f0:	0800ec78 	.word	0x0800ec78
 80009f4:	0800eb50 	.word	0x0800eb50
 80009f8:	30000000 	.word	0x30000000
 80009fc:	0800eb6c 	.word	0x0800eb6c
 8000a00:	0800eb94 	.word	0x0800eb94
 8000a04:	0800ebb0 	.word	0x0800ebb0

08000a08 <SystemClock_Config>:
{
 8000a08:	b530      	push	{r4, r5, lr}
 8000a0a:	b0a1      	sub	sp, #132	@ 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0c:	224c      	movs	r2, #76	@ 0x4c
 8000a0e:	2100      	movs	r1, #0
 8000a10:	a80c      	add	r0, sp, #48	@ 0x30
 8000a12:	f00c fca9 	bl	800d368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a16:	2220      	movs	r2, #32
 8000a18:	2100      	movs	r1, #0
 8000a1a:	a804      	add	r0, sp, #16
 8000a1c:	f00c fca4 	bl	800d368 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a20:	2002      	movs	r0, #2
 8000a22:	f009 fe17 	bl	800a654 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a26:	4b38      	ldr	r3, [pc, #224]	@ (8000b08 <SystemClock_Config+0x100>)
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4a38      	ldr	r2, [pc, #224]	@ (8000b0c <SystemClock_Config+0x104>)
 8000a2c:	9101      	str	r1, [sp, #4]
 8000a2e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000a30:	f021 0101 	bic.w	r1, r1, #1
 8000a34:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	6993      	ldr	r3, [r2, #24]
 8000a40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a44:	6193      	str	r3, [r2, #24]
 8000a46:	6993      	ldr	r3, [r2, #24]
 8000a48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a50:	6993      	ldr	r3, [r2, #24]
 8000a52:	0499      	lsls	r1, r3, #18
 8000a54:	d5fc      	bpl.n	8000a50 <SystemClock_Config+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	4b2e      	ldr	r3, [pc, #184]	@ (8000b10 <SystemClock_Config+0x108>)
 8000a58:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 8000a5c:	f041 0102 	orr.w	r1, r1, #2
 8000a60:	f8c3 10f4 	str.w	r1, [r3, #244]	@ 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a64:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	9302      	str	r3, [sp, #8]
 8000a70:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a72:	9103      	str	r1, [sp, #12]
 8000a74:	6991      	ldr	r1, [r2, #24]
 8000a76:	4b24      	ldr	r3, [pc, #144]	@ (8000b08 <SystemClock_Config+0x100>)
 8000a78:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8000a7c:	6191      	str	r1, [r2, #24]
 8000a7e:	6992      	ldr	r2, [r2, #24]
 8000a80:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000a84:	9203      	str	r2, [sp, #12]
 8000a86:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a88:	4a20      	ldr	r2, [pc, #128]	@ (8000b0c <SystemClock_Config+0x104>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a8a:	f041 0101 	orr.w	r1, r1, #1
 8000a8e:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	9303      	str	r3, [sp, #12]
 8000a98:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a9a:	6993      	ldr	r3, [r2, #24]
 8000a9c:	049b      	lsls	r3, r3, #18
 8000a9e:	d5fc      	bpl.n	8000a9a <SystemClock_Config+0x92>
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aa0:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aa2:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aaa:	9217      	str	r2, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000aac:	2264      	movs	r2, #100	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aae:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ab0:	931d      	str	r3, [sp, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000ab2:	9218      	str	r2, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ab4:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ab6:	931e      	str	r3, [sp, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ab8:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000aba:	9419      	str	r4, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000abc:	931c      	str	r3, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000abe:	941b      	str	r4, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ac0:	921a      	str	r2, [sp, #104]	@ 0x68
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac6:	a80c      	add	r0, sp, #48	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac8:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000acc:	f009 fe58 	bl	800a780 <HAL_RCC_OscConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	b108      	cbz	r0, 8000ad8 <SystemClock_Config+0xd0>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <SystemClock_Config+0xce>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ad8:	2240      	movs	r2, #64	@ 0x40
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ada:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000adc:	2308      	movs	r3, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ade:	253f      	movs	r5, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ae0:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae2:	2403      	movs	r4, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ae4:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae6:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae8:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000aea:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000aec:	e9cd 3207 	strd	r3, r2, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000af0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000af4:	e9cd 320a 	strd	r3, r2, [sp, #40]	@ 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000af8:	f00a f956 	bl	800ada8 <HAL_RCC_ClockConfig>
 8000afc:	b108      	cbz	r0, 8000b02 <SystemClock_Config+0xfa>
 8000afe:	b672      	cpsid	i
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <SystemClock_Config+0xf8>
}
 8000b02:	b021      	add	sp, #132	@ 0x84
 8000b04:	bd30      	pop	{r4, r5, pc}
 8000b06:	bf00      	nop
 8000b08:	58000400 	.word	0x58000400
 8000b0c:	58024800 	.word	0x58024800
 8000b10:	58024400 	.word	0x58024400

08000b14 <main>:
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b094      	sub	sp, #80	@ 0x50
    HAL_MPU_Disable();
 8000b18:	f009 fc08 	bl	800a32c <HAL_MPU_Disable>
    MPU_InitStruct.BaseAddress      = 0x24000000;               // AXI memory where ETH descriptors and buffers are stored
 8000b1c:	f04f 5010 	mov.w	r0, #603979776	@ 0x24000000
    MPU_InitStruct.Size             = MPU_REGION_SIZE_512KB;
 8000b20:	4ab5      	ldr	r2, [pc, #724]	@ (8000df8 <main+0x2e4>)
 8000b22:	f44f 7380 	mov.w	r3, #256	@ 0x100
    MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000b26:	2101      	movs	r1, #1
    MPU_InitStruct.BaseAddress      = 0x24000000;               // AXI memory where ETH descriptors and buffers are stored
 8000b28:	900d      	str	r0, [sp, #52]	@ 0x34
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b2a:	a80c      	add	r0, sp, #48	@ 0x30
    MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000b2c:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
    MPU_InitStruct.Size             = MPU_REGION_SIZE_512KB;
 8000b30:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b34:	f009 fc18 	bl	800a368 <HAL_MPU_ConfigRegion>
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b38:	2004      	movs	r0, #4
 8000b3a:	f009 fc05 	bl	800a348 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b3e:	4aaf      	ldr	r2, [pc, #700]	@ (8000dfc <main+0x2e8>)
 8000b40:	6953      	ldr	r3, [r2, #20]
 8000b42:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8000b46:	d111      	bne.n	8000b6c <main+0x58>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b4c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b50:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b58:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b5c:	6953      	ldr	r3, [r2, #20]
 8000b5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b68:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b6c:	48a3      	ldr	r0, [pc, #652]	@ (8000dfc <main+0x2e8>)
 8000b6e:	6943      	ldr	r3, [r0, #20]
 8000b70:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8000b74:	d124      	bne.n	8000bc0 <main+0xac>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000b76:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b7a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b7e:	f8d0 5080 	ldr.w	r5, [r0, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b82:	f643 76e0 	movw	r6, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b86:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b8a:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8000b8e:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b90:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b94:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b96:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b9e:	f8c0 2260 	str.w	r2, [r0, #608]	@ 0x260
      } while (ways-- != 0U);
 8000ba2:	d1f8      	bne.n	8000b96 <main+0x82>
    } while(sets-- != 0U);
 8000ba4:	3c20      	subs	r4, #32
 8000ba6:	f114 0f20 	cmn.w	r4, #32
 8000baa:	d1f1      	bne.n	8000b90 <main+0x7c>
 8000bac:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000bb0:	6943      	ldr	r3, [r0, #20]
 8000bb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bb6:	6143      	str	r3, [r0, #20]
 8000bb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bbc:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000bc0:	f009 faf0 	bl	800a1a4 <HAL_Init>
  memset(adc_data_mock, 0x41, sizeof(adc_data_mock));
 8000bc4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000bc8:	2141      	movs	r1, #65	@ 0x41
 8000bca:	488d      	ldr	r0, [pc, #564]	@ (8000e00 <main+0x2ec>)
 8000bcc:	f00c fbcc 	bl	800d368 <memset>
  __ASM volatile ("dsb 0xF":::"memory");
 8000bd0:	f3bf 8f4f 	dsb	sy
	HeapRegion_t xHeapRegions[] = {
 8000bd4:	4e8b      	ldr	r6, [pc, #556]	@ (8000e04 <main+0x2f0>)
  SystemClock_Config();
 8000bd6:	f7ff ff17 	bl	8000a08 <SystemClock_Config>
	HeapRegion_t xHeapRegions[] = {
 8000bda:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	f04f 0802 	mov.w	r8, #2
  huart3.Instance = USART3;
 8000be6:	4d88      	ldr	r5, [pc, #544]	@ (8000e08 <main+0x2f4>)
	HeapRegion_t xHeapRegions[] = {
 8000be8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000bee:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000bf2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	vPortDefineHeapRegions( xHeapRegions );
 8000bf6:	a80c      	add	r0, sp, #48	@ 0x30
 8000bf8:	f009 fa30 	bl	800a05c <vPortDefineHeapRegions>
  vStartHighResolutionTimer();
 8000bfc:	f00c fa86 	bl	800d10c <vStartHighResolutionTimer>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c00:	4b82      	ldr	r3, [pc, #520]	@ (8000e0c <main+0x2f8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	9410      	str	r4, [sp, #64]	@ 0x40
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c04:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000c08:	4881      	ldr	r0, [pc, #516]	@ (8000e10 <main+0x2fc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
 8000c0e:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c16:	f042 0204 	orr.w	r2, r2, #4
 8000c1a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000c1e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c22:	f002 0204 	and.w	r2, r2, #4
 8000c26:	9205      	str	r2, [sp, #20]
 8000c28:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c2e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000c32:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000c36:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c3a:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000c3e:	9206      	str	r2, [sp, #24]
 8000c40:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c46:	433a      	orrs	r2, r7
 8000c48:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000c4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c50:	403a      	ands	r2, r7
 8000c52:	9207      	str	r2, [sp, #28]
 8000c54:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c5a:	ea42 0208 	orr.w	r2, r2, r8
 8000c5e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000c62:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c66:	ea02 0208 	and.w	r2, r2, r8
 8000c6a:	9208      	str	r2, [sp, #32]
 8000c6c:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c72:	f042 0208 	orr.w	r2, r2, #8
 8000c76:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000c7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c7e:	f002 0208 	and.w	r2, r2, #8
 8000c82:	9209      	str	r2, [sp, #36]	@ 0x24
 8000c84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000c8e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000c92:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c96:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000c9a:	920a      	str	r2, [sp, #40]	@ 0x28
 8000c9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c9e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ca2:	f042 0210 	orr.w	r2, r2, #16
 8000ca6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000caa:	4622      	mov	r2, r4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb0:	f003 0310 	and.w	r3, r3, #16
 8000cb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000cb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cb8:	f009 fcc8 	bl	800a64c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cbc:	4622      	mov	r2, r4
 8000cbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cc2:	4854      	ldr	r0, [pc, #336]	@ (8000e14 <main+0x300>)
 8000cc4:	f009 fcc2 	bl	800a64c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cc8:	4622      	mov	r2, r4
 8000cca:	4641      	mov	r1, r8
 8000ccc:	4852      	ldr	r0, [pc, #328]	@ (8000e18 <main+0x304>)
 8000cce:	f009 fcbd 	bl	800a64c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8000cd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	a90c      	add	r1, sp, #48	@ 0x30
 8000cd8:	4850      	ldr	r0, [pc, #320]	@ (8000e1c <main+0x308>)
  GPIO_InitStruct.Pin = B1_Pin;
 8000cda:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f009 fb72 	bl	800a3c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ce4:	f244 0301 	movw	r3, #16385	@ 0x4001
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	a90c      	add	r1, sp, #48	@ 0x30
 8000cea:	4849      	ldr	r0, [pc, #292]	@ (8000e10 <main+0x2fc>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000cec:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	e9cd 740d 	strd	r7, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	f009 fb68 	bl	800a3c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000cf8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	a90c      	add	r1, sp, #48	@ 0x30
 8000cfe:	4845      	ldr	r0, [pc, #276]	@ (8000e14 <main+0x300>)
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d00:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	e9cd 740d 	strd	r7, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f009 fb5e 	bl	800a3c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d0c:	2280      	movs	r2, #128	@ 0x80
 8000d0e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d12:	a90c      	add	r1, sp, #48	@ 0x30
 8000d14:	4842      	ldr	r0, [pc, #264]	@ (8000e20 <main+0x30c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	940e      	str	r4, [sp, #56]	@ 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d18:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f009 fb54 	bl	800a3c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d20:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	a90c      	add	r1, sp, #48	@ 0x30
 8000d26:	483f      	ldr	r0, [pc, #252]	@ (8000e24 <main+0x310>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d28:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000d2a:	230a      	movs	r3, #10
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000d2e:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	e9cd 840d 	strd	r8, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f009 fb48 	bl	800a3c8 <HAL_GPIO_Init>
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d38:	4837      	ldr	r0, [pc, #220]	@ (8000e18 <main+0x304>)
 8000d3a:	a90c      	add	r1, sp, #48	@ 0x30
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d3c:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	e9cd 740d 	strd	r7, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f009 fb3f 	bl	800a3c8 <HAL_GPIO_Init>
  huart3.Instance = USART3;
 8000d4a:	4b37      	ldr	r3, [pc, #220]	@ (8000e28 <main+0x314>)
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d4c:	4628      	mov	r0, r5
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d4e:	612c      	str	r4, [r5, #16]
  huart3.Instance = USART3;
 8000d50:	602b      	str	r3, [r5, #0]
  huart3.Init.BaudRate = 115200;
 8000d52:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d56:	61ac      	str	r4, [r5, #24]
  huart3.Init.BaudRate = 115200;
 8000d58:	606b      	str	r3, [r5, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d5a:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d60:	e9c5 4407 	strd	r4, r4, [r5, #28]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d64:	616b      	str	r3, [r5, #20]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d66:	e9c5 4409 	strd	r4, r4, [r5, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d6a:	f00b ff7d 	bl	800cc68 <HAL_UART_Init>
 8000d6e:	b108      	cbz	r0, 8000d74 <main+0x260>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <main+0x25e>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d74:	4601      	mov	r1, r0
 8000d76:	4628      	mov	r0, r5
 8000d78:	f00b ffea 	bl	800cd50 <HAL_UARTEx_SetTxFifoThreshold>
 8000d7c:	b108      	cbz	r0, 8000d82 <main+0x26e>
 8000d7e:	b672      	cpsid	i
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <main+0x26c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d82:	4601      	mov	r1, r0
 8000d84:	4628      	mov	r0, r5
 8000d86:	f00c f80b 	bl	800cda0 <HAL_UARTEx_SetRxFifoThreshold>
 8000d8a:	b108      	cbz	r0, 8000d90 <main+0x27c>
 8000d8c:	b672      	cpsid	i
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <main+0x27a>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d90:	4628      	mov	r0, r5
 8000d92:	f00b ffbf 	bl	800cd14 <HAL_UARTEx_DisableFifoMode>
 8000d96:	4604      	mov	r4, r0
 8000d98:	b108      	cbz	r0, 8000d9e <main+0x28a>
 8000d9a:	b672      	cpsid	i
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <main+0x288>
  const uint8_t ucNetMask[ 4 ] = { configNET_MASK0, configNET_MASK1, configNET_MASK2, configNET_MASK3 };
 8000d9e:	4a23      	ldr	r2, [pc, #140]	@ (8000e2c <main+0x318>)
 8000da0:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
  FreeRTOS_printf( ( "Calling FreeRTOS_IPInit\n" ) );
 8000da4:	4822      	ldr	r0, [pc, #136]	@ (8000e30 <main+0x31c>)
  const uint8_t ucNetMask[ 4 ] = { configNET_MASK0, configNET_MASK1, configNET_MASK2, configNET_MASK3 };
 8000da6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  const uint8_t ucGatewayAddress[ 4 ] = { configGATEWAY_ADDR0, configGATEWAY_ADDR1, configGATEWAY_ADDR2, configGATEWAY_ADDR3 };
 8000daa:	f102 427c 	add.w	r2, r2, #4227858432	@ 0xfc000000
  const uint8_t ucDNSServerAddress[ 4 ] = { configDNS_SERVER_ADDR0, configDNS_SERVER_ADDR1, configDNS_SERVER_ADDR2, configDNS_SERVER_ADDR3 };
 8000dae:	f04f 3308 	mov.w	r3, #134744072	@ 0x8080808
  const uint8_t ucGatewayAddress[ 4 ] = { configGATEWAY_ADDR0, configGATEWAY_ADDR1, configGATEWAY_ADDR2, configGATEWAY_ADDR3 };
 8000db2:	9204      	str	r2, [sp, #16]
  const uint8_t ucDNSServerAddress[ 4 ] = { configDNS_SERVER_ADDR0, configDNS_SERVER_ADDR1, configDNS_SERVER_ADDR2, configDNS_SERVER_ADDR3 };
 8000db4:	930c      	str	r3, [sp, #48]	@ 0x30
  FreeRTOS_printf( ( "Calling FreeRTOS_IPInit\n" ) );
 8000db6:	f00c f841 	bl	800ce3c <lUDPLoggingPrintf>
  FreeRTOS_IPInit( ucIPAddress, ucNetMask, ucGatewayAddress, ucDNSServerAddress, ucMACAddress );
 8000dba:	491e      	ldr	r1, [pc, #120]	@ (8000e34 <main+0x320>)
 8000dbc:	ab0c      	add	r3, sp, #48	@ 0x30
 8000dbe:	aa04      	add	r2, sp, #16
 8000dc0:	a802      	add	r0, sp, #8
 8000dc2:	9100      	str	r1, [sp, #0]
 8000dc4:	a903      	add	r1, sp, #12
 8000dc6:	f001 f8bb 	bl	8001f40 <FreeRTOS_IPInit>
  xTaskCreate( prvServerWorkTask, "SvrWork", mainTCP_SERVER_STACK_SIZE, NULL, 1, &xServerWorkTaskHandle );
 8000dca:	491b      	ldr	r1, [pc, #108]	@ (8000e38 <main+0x324>)
 8000dcc:	4623      	mov	r3, r4
 8000dce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000dd2:	481a      	ldr	r0, [pc, #104]	@ (8000e3c <main+0x328>)
 8000dd4:	e9cd 7100 	strd	r7, r1, [sp]
 8000dd8:	4919      	ldr	r1, [pc, #100]	@ (8000e40 <main+0x32c>)
 8000dda:	f007 ffff 	bl	8008ddc <xTaskCreate>
  xTaskCreate( vTCPSendADC, "TCP-ADC-task", mainTCP_SERVER_STACK_SIZE, NULL, 1, &xTCPSendADCTaskHandle );
 8000dde:	4819      	ldr	r0, [pc, #100]	@ (8000e44 <main+0x330>)
 8000de0:	4623      	mov	r3, r4
 8000de2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000de6:	4918      	ldr	r1, [pc, #96]	@ (8000e48 <main+0x334>)
 8000de8:	e9cd 7000 	strd	r7, r0, [sp]
 8000dec:	4817      	ldr	r0, [pc, #92]	@ (8000e4c <main+0x338>)
 8000dee:	f007 fff5 	bl	8008ddc <xTaskCreate>
  vTaskStartScheduler();
 8000df2:	f008 f8dd 	bl	8008fb0 <vTaskStartScheduler>
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <main+0x2e2>
 8000df8:	03010012 	.word	0x03010012
 8000dfc:	e000ed00 	.word	0xe000ed00
 8000e00:	30000000 	.word	0x30000000
 8000e04:	0800ea04 	.word	0x0800ea04
 8000e08:	200000dc 	.word	0x200000dc
 8000e0c:	58024400 	.word	0x58024400
 8000e10:	58020400 	.word	0x58020400
 8000e14:	58020c00 	.word	0x58020c00
 8000e18:	58021000 	.word	0x58021000
 8000e1c:	58020800 	.word	0x58020800
 8000e20:	58021800 	.word	0x58021800
 8000e24:	58020000 	.word	0x58020000
 8000e28:	40004800 	.word	0x40004800
 8000e2c:	0501a8c0 	.word	0x0501a8c0
 8000e30:	0800ebd0 	.word	0x0800ebd0
 8000e34:	0800ec7c 	.word	0x0800ec7c
 8000e38:	200000d8 	.word	0x200000d8
 8000e3c:	080006a1 	.word	0x080006a1
 8000e40:	0800ebec 	.word	0x0800ebec
 8000e44:	200000d4 	.word	0x200000d4
 8000e48:	0800ebf4 	.word	0x0800ebf4
 8000e4c:	080008dd 	.word	0x080008dd

08000e50 <ulGetRunTimeCounterValue>:
}
 8000e50:	2000      	movs	r0, #0
 8000e52:	4770      	bx	lr

08000e54 <vAssertCalled>:
volatile unsigned long ul = 0;
 8000e54:	2300      	movs	r3, #0
{
 8000e56:	b500      	push	{lr}
 8000e58:	b083      	sub	sp, #12
volatile unsigned long ul = 0;
 8000e5a:	9301      	str	r3, [sp, #4]
	taskENTER_CRITICAL();
 8000e5c:	f008 feea 	bl	8009c34 <vPortEnterCritical>
		while( ul == 0 )
 8000e60:	9b01      	ldr	r3, [sp, #4]
 8000e62:	b91b      	cbnz	r3, 8000e6c <vAssertCalled+0x18>
			__NOP();
 8000e64:	bf00      	nop
		while( ul == 0 )
 8000e66:	9b01      	ldr	r3, [sp, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0fb      	beq.n	8000e64 <vAssertCalled+0x10>
}
 8000e6c:	b003      	add	sp, #12
 8000e6e:	f85d eb04 	ldr.w	lr, [sp], #4
	taskEXIT_CRITICAL();
 8000e72:	f008 bf01 	b.w	8009c78 <vPortExitCritical>
 8000e76:	bf00      	nop

08000e78 <vApplicationMallocFailedHook>:
volatile unsigned long ul = 0;
 8000e78:	2300      	movs	r3, #0
{
 8000e7a:	b500      	push	{lr}
 8000e7c:	b083      	sub	sp, #12
volatile unsigned long ul = 0;
 8000e7e:	9301      	str	r3, [sp, #4]
	taskENTER_CRITICAL();
 8000e80:	f008 fed8 	bl	8009c34 <vPortEnterCritical>
		while( ul == 0 )
 8000e84:	9b01      	ldr	r3, [sp, #4]
 8000e86:	b91b      	cbnz	r3, 8000e90 <vApplicationMallocFailedHook+0x18>
			__NOP();
 8000e88:	bf00      	nop
		while( ul == 0 )
 8000e8a:	9b01      	ldr	r3, [sp, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0fb      	beq.n	8000e88 <vApplicationMallocFailedHook+0x10>
}
 8000e90:	b003      	add	sp, #12
 8000e92:	f85d eb04 	ldr.w	lr, [sp], #4
	taskEXIT_CRITICAL();
 8000e96:	f008 beef 	b.w	8009c78 <vPortExitCritical>
 8000e9a:	bf00      	nop

08000e9c <ulApplicationGetNextSequenceNumber>:
	*pulNumber = rand();
 8000e9c:	f00c bd8c 	b.w	800d9b8 <rand>

08000ea0 <vApplicationIPNetworkEventHook>:
	if( eNetworkEvent == eNetworkUp )
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d131      	bne.n	8000f08 <vApplicationIPNetworkEventHook+0x68>
		if( xTasksAlreadyCreated == pdFALSE )
 8000ea4:	4b19      	ldr	r3, [pc, #100]	@ (8000f0c <vApplicationIPNetworkEventHook+0x6c>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
{
 8000ea8:	b500      	push	{lr}
 8000eaa:	b089      	sub	sp, #36	@ 0x24
		if( xTasksAlreadyCreated == pdFALSE )
 8000eac:	b91a      	cbnz	r2, 8000eb6 <vApplicationIPNetworkEventHook+0x16>
			xTasksAlreadyCreated = pdTRUE;
 8000eae:	2201      	movs	r2, #1
			xDoCreateSockets = pdTRUE;
 8000eb0:	4917      	ldr	r1, [pc, #92]	@ (8000f10 <vApplicationIPNetworkEventHook+0x70>)
			xTasksAlreadyCreated = pdTRUE;
 8000eb2:	601a      	str	r2, [r3, #0]
			xDoCreateSockets = pdTRUE;
 8000eb4:	600a      	str	r2, [r1, #0]
		FreeRTOS_GetAddressConfiguration( &ulIPAddress, &ulNetMask, &ulGatewayAddress, &ulDNSServerAddress );
 8000eb6:	ab03      	add	r3, sp, #12
 8000eb8:	aa02      	add	r2, sp, #8
 8000eba:	a901      	add	r1, sp, #4
 8000ebc:	4668      	mov	r0, sp
 8000ebe:	f001 f8d9 	bl	8002074 <FreeRTOS_GetAddressConfiguration>
		FreeRTOS_inet_ntoa( ulIPAddress, cBuffer );
 8000ec2:	a904      	add	r1, sp, #16
 8000ec4:	9800      	ldr	r0, [sp, #0]
 8000ec6:	f002 f9f3 	bl	80032b0 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "IP Address: %s\n", cBuffer ) );
 8000eca:	a904      	add	r1, sp, #16
 8000ecc:	4811      	ldr	r0, [pc, #68]	@ (8000f14 <vApplicationIPNetworkEventHook+0x74>)
 8000ece:	f00b ffb5 	bl	800ce3c <lUDPLoggingPrintf>
		FreeRTOS_inet_ntoa( ulNetMask, cBuffer );
 8000ed2:	a904      	add	r1, sp, #16
 8000ed4:	9801      	ldr	r0, [sp, #4]
 8000ed6:	f002 f9eb 	bl	80032b0 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Subnet Mask: %s\n", cBuffer ) );
 8000eda:	a904      	add	r1, sp, #16
 8000edc:	480e      	ldr	r0, [pc, #56]	@ (8000f18 <vApplicationIPNetworkEventHook+0x78>)
 8000ede:	f00b ffad 	bl	800ce3c <lUDPLoggingPrintf>
		FreeRTOS_inet_ntoa( ulGatewayAddress, cBuffer );
 8000ee2:	a904      	add	r1, sp, #16
 8000ee4:	9802      	ldr	r0, [sp, #8]
 8000ee6:	f002 f9e3 	bl	80032b0 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Gateway Address: %s\n", cBuffer ) );
 8000eea:	a904      	add	r1, sp, #16
 8000eec:	480b      	ldr	r0, [pc, #44]	@ (8000f1c <vApplicationIPNetworkEventHook+0x7c>)
 8000eee:	f00b ffa5 	bl	800ce3c <lUDPLoggingPrintf>
		FreeRTOS_inet_ntoa( ulDNSServerAddress, cBuffer );
 8000ef2:	a904      	add	r1, sp, #16
 8000ef4:	9803      	ldr	r0, [sp, #12]
 8000ef6:	f002 f9db 	bl	80032b0 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "DNS Server Address: %s\n", cBuffer ) );
 8000efa:	a904      	add	r1, sp, #16
 8000efc:	4808      	ldr	r0, [pc, #32]	@ (8000f20 <vApplicationIPNetworkEventHook+0x80>)
 8000efe:	f00b ff9d 	bl	800ce3c <lUDPLoggingPrintf>
}
 8000f02:	b009      	add	sp, #36	@ 0x24
 8000f04:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	200000d0 	.word	0x200000d0
 8000f10:	200000c8 	.word	0x200000c8
 8000f14:	0800ec04 	.word	0x0800ec04
 8000f18:	0800ec14 	.word	0x0800ec14
 8000f1c:	0800ec28 	.word	0x0800ec28
 8000f20:	0800ec40 	.word	0x0800ec40

08000f24 <xApplicationDNSQueryHook>:
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 8000f24:	4903      	ldr	r1, [pc, #12]	@ (8000f34 <xApplicationDNSQueryHook+0x10>)
{
 8000f26:	b508      	push	{r3, lr}
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 8000f28:	f00c feb4 	bl	800dc94 <strcasecmp>
}
 8000f2c:	fab0 f080 	clz	r0, r0
 8000f30:	0940      	lsrs	r0, r0, #5
 8000f32:	bd08      	pop	{r3, pc}
 8000f34:	0800ec58 	.word	0x0800ec58

08000f38 <xApplicationGetRandomNumber>:
BaseType_t xApplicationGetRandomNumber( uint32_t *pulNumber ){
 8000f38:	b510      	push	{r4, lr}
 8000f3a:	4604      	mov	r4, r0
	*pulNumber = rand();
 8000f3c:	f00c fd3c 	bl	800d9b8 <rand>
 8000f40:	4603      	mov	r3, r0
}
 8000f42:	2001      	movs	r0, #1
	*pulNumber = rand();
 8000f44:	6023      	str	r3, [r4, #0]
}
 8000f46:	bd10      	pop	{r4, pc}

08000f48 <prvGetRegistersFromStack>:
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
 8000f48:	4a01      	ldr	r2, [pc, #4]	@ (8000f50 <prvGetRegistersFromStack+0x8>)
		( pulFaultStackAddress - ARRAY_SIZE( pxRegisterStack->spare0 ) );
 8000f4a:	3820      	subs	r0, #32
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
 8000f4c:	6010      	str	r0, [r2, #0]
	for( ;; );
 8000f4e:	e7fe      	b.n	8000f4e <prvGetRegistersFromStack+0x6>
 8000f50:	200000c4 	.word	0x200000c4

08000f54 <HardFault_Handler>:
	__asm volatile
 8000f54:	f01e 0f04 	tst.w	lr, #4
 8000f58:	bf0c      	ite	eq
 8000f5a:	f3ef 8008 	mrseq	r0, MSP
 8000f5e:	f3ef 8009 	mrsne	r0, PSP
 8000f62:	6981      	ldr	r1, [r0, #24]
 8000f64:	f7ff fff0 	bl	8000f48 <prvGetRegistersFromStack>
}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <vApplicationPingReplyHook>:
		FreeRTOS_printf( ( "Received ping ID %04X\n", usIdentifier ) );
 8000f6c:	4801      	ldr	r0, [pc, #4]	@ (8000f74 <vApplicationPingReplyHook+0x8>)
 8000f6e:	f00b bf65 	b.w	800ce3c <lUDPLoggingPrintf>
 8000f72:	bf00      	nop
 8000f74:	0800ec60 	.word	0x0800ec60

08000f78 <__io_putchar>:
{
 8000f78:	b500      	push	{lr}
 8000f7a:	b083      	sub	sp, #12
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000f7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f80:	2201      	movs	r2, #1
{
 8000f82:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000f84:	a901      	add	r1, sp, #4
 8000f86:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <__io_putchar+0x1c>)
 8000f88:	f00b fdac 	bl	800cae4 <HAL_UART_Transmit>
}
 8000f8c:	9801      	ldr	r0, [sp, #4]
 8000f8e:	b003      	add	sp, #12
 8000f90:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f94:	200000dc 	.word	0x200000dc

08000f98 <Error_Handler>:
 8000f98:	b672      	cpsid	i
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <Error_Handler+0x2>

08000f9c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9c:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <HAL_MspInit+0x20>)
{
 8000f9e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000fa4:	f042 0202 	orr.w	r2, r2, #2
 8000fa8:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000fac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb8:	b002      	add	sp, #8
 8000fba:	4770      	bx	lr
 8000fbc:	58024400 	.word	0x58024400

08000fc0 <HAL_ETH_MspInit>:
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(heth->Instance==ETH)
 8000fc0:	4b51      	ldr	r3, [pc, #324]	@ (8001108 <HAL_ETH_MspInit+0x148>)
 8000fc2:	6802      	ldr	r2, [r0, #0]
{
 8000fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(heth->Instance==ETH)
 8000fc6:	429a      	cmp	r2, r3
{
 8000fc8:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f04f 0400 	mov.w	r4, #0
 8000fce:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000fd2:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 8000fd6:	940c      	str	r4, [sp, #48]	@ 0x30
  if(heth->Instance==ETH)
 8000fd8:	d001      	beq.n	8000fde <HAL_ETH_MspInit+0x1e>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000fda:	b00f      	add	sp, #60	@ 0x3c
 8000fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000fde:	4b4b      	ldr	r3, [pc, #300]	@ (800110c <HAL_ETH_MspInit+0x14c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2603      	movs	r6, #3
 8000fe2:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe4:	a908      	add	r1, sp, #32
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000fe6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fec:	4848      	ldr	r0, [pc, #288]	@ (8001110 <HAL_ETH_MspInit+0x150>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000fee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000ff2:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8000ff6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8000ffa:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8000ffe:	9201      	str	r2, [sp, #4]
 8001000:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001002:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001006:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800100a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 800100e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001012:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8001016:	9202      	str	r2, [sp, #8]
 8001018:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800101a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800101e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001022:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8001026:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800102a:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800102e:	9203      	str	r2, [sp, #12]
 8001030:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001032:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001036:	f042 0204 	orr.w	r2, r2, #4
 800103a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800103e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001042:	f002 0204 	and.w	r2, r2, #4
 8001046:	9204      	str	r2, [sp, #16]
 8001048:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800104e:	f042 0201 	orr.w	r2, r2, #1
 8001052:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001056:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800105a:	f002 0201 	and.w	r2, r2, #1
 800105e:	9205      	str	r2, [sp, #20]
 8001060:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001066:	f042 0202 	orr.w	r2, r2, #2
 800106a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800106e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001072:	f002 0202 	and.w	r2, r2, #2
 8001076:	9206      	str	r2, [sp, #24]
 8001078:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800107a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800107e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001082:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001086:	2232      	movs	r2, #50	@ 0x32
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001090:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001092:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	e9cd 650b 	strd	r6, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001098:	e9cd 2308 	strd	r2, r3, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800109c:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109e:	f009 f993 	bl	800a3c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80010a2:	2386      	movs	r3, #134	@ 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	a908      	add	r1, sp, #32
 80010a6:	481b      	ldr	r0, [pc, #108]	@ (8001114 <HAL_ETH_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80010a8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010aa:	950c      	str	r5, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	e9cd 460a 	strd	r4, r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f009 f989 	bl	800a3c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	a908      	add	r1, sp, #32
 80010bc:	4816      	ldr	r0, [pc, #88]	@ (8001118 <HAL_ETH_MspInit+0x158>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010be:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	e9cd 7409 	strd	r7, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010c4:	e9cd 650b 	strd	r6, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f009 f97e 	bl	800a3c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80010cc:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010d0:	a908      	add	r1, sp, #32
 80010d2:	4812      	ldr	r0, [pc, #72]	@ (800111c <HAL_ETH_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80010d4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010d8:	950c      	str	r5, [sp, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	e9cd 460a 	strd	r4, r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010de:	f009 f973 	bl	800a3c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80010e2:	4622      	mov	r2, r4
 80010e4:	2105      	movs	r1, #5
 80010e6:	203d      	movs	r0, #61	@ 0x3d
 80010e8:	f009 f8c0 	bl	800a26c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80010ec:	203d      	movs	r0, #61	@ 0x3d
 80010ee:	f009 f8f9 	bl	800a2e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 80010f2:	4622      	mov	r2, r4
 80010f4:	2105      	movs	r1, #5
 80010f6:	203e      	movs	r0, #62	@ 0x3e
 80010f8:	f009 f8b8 	bl	800a26c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 80010fc:	203e      	movs	r0, #62	@ 0x3e
 80010fe:	f009 f8f1 	bl	800a2e4 <HAL_NVIC_EnableIRQ>
}
 8001102:	b00f      	add	sp, #60	@ 0x3c
 8001104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001106:	bf00      	nop
 8001108:	40028000 	.word	0x40028000
 800110c:	58024400 	.word	0x58024400
 8001110:	58020800 	.word	0x58020800
 8001114:	58020000 	.word	0x58020000
 8001118:	58020400 	.word	0x58020400
 800111c:	58021800 	.word	0x58021800

08001120 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8001120:	6803      	ldr	r3, [r0, #0]
 8001122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001126:	d000      	beq.n	800112a <HAL_TIM_Base_MspInit+0xa>
 8001128:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <HAL_TIM_Base_MspInit+0x2c>)
{
 800112c:	b082      	sub	sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 800112e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001132:	f042 0201 	orr.w	r2, r2, #1
 8001136:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800113a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001146:	b002      	add	sp, #8
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	58024400 	.word	0x58024400

08001150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001150:	b510      	push	{r4, lr}
 8001152:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	2100      	movs	r1, #0
{
 8001156:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001158:	22c0      	movs	r2, #192	@ 0xc0
 800115a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	9106      	str	r1, [sp, #24]
 800115e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001162:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001166:	f00c f8ff 	bl	800d368 <memset>
  if(huart->Instance==USART3)
 800116a:	4b21      	ldr	r3, [pc, #132]	@ (80011f0 <HAL_UART_MspInit+0xa0>)
 800116c:	6822      	ldr	r2, [r4, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d001      	beq.n	8001176 <HAL_UART_MspInit+0x26>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001172:	b038      	add	sp, #224	@ 0xe0
 8001174:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001176:	2202      	movs	r2, #2
 8001178:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800117a:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800117c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001180:	f00a f884 	bl	800b28c <HAL_RCCEx_PeriphCLKConfig>
 8001184:	bb40      	cbnz	r0, 80011d8 <HAL_UART_MspInit+0x88>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001186:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001188:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800118a:	a902      	add	r1, sp, #8
 800118c:	481a      	ldr	r0, [pc, #104]	@ (80011f8 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800118e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001192:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001196:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800119a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800119e:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80011a2:	9200      	str	r2, [sp, #0]
 80011a4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80011aa:	f042 0208 	orr.w	r2, r2, #8
 80011ae:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011b6:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b8:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011bc:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80011e0 <HAL_UART_MspInit+0x90>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80011c8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80011e8 <HAL_UART_MspInit+0x98>
 80011cc:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d0:	f009 f8fa 	bl	800a3c8 <HAL_GPIO_Init>
}
 80011d4:	b038      	add	sp, #224	@ 0xe0
 80011d6:	bd10      	pop	{r4, pc}
      Error_Handler();
 80011d8:	f7ff fede 	bl	8000f98 <Error_Handler>
 80011dc:	e7d3      	b.n	8001186 <HAL_UART_MspInit+0x36>
 80011de:	bf00      	nop
 80011e0:	00000300 	.word	0x00000300
 80011e4:	00000002 	.word	0x00000002
	...
 80011f0:	40004800 	.word	0x40004800
 80011f4:	58024400 	.word	0x58024400
 80011f8:	58020c00 	.word	0x58020c00

080011fc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011fc:	e7fe      	b.n	80011fc <NMI_Handler>
 80011fe:	bf00      	nop

08001200 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <MemManage_Handler>
 8001202:	bf00      	nop

08001204 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <BusFault_Handler>
 8001206:	bf00      	nop

08001208 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <UsageFault_Handler>
 800120a:	bf00      	nop

0800120c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop

08001210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001210:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001212:	f008 fff7 	bl	800a204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001216:	f008 fa3f 	bl	8009698 <xTaskGetSchedulerState>
 800121a:	2802      	cmp	r0, #2
 800121c:	d000      	beq.n	8001220 <SysTick_Handler+0x10>
    {
  	xPortSysTickHandler();
    }
  /* USER CODE END SysTick_IRQn 1 */
}
 800121e:	bd08      	pop	{r3, pc}
 8001220:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  	xPortSysTickHandler();
 8001224:	f008 bd76 	b.w	8009d14 <xPortSysTickHandler>

08001228 <ETH_WKUP_IRQHandler>:
void ETH_WKUP_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */
//
  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001228:	4801      	ldr	r0, [pc, #4]	@ (8001230 <ETH_WKUP_IRQHandler+0x8>)
 800122a:	f006 bcab 	b.w	8007b84 <HAL_ETH_IRQHandler>
 800122e:	bf00      	nop
 8001230:	20000170 	.word	0x20000170

08001234 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001234:	2001      	movs	r0, #1
 8001236:	4770      	bx	lr

08001238 <_kill>:

int _kill(int pid, int sig)
{
 8001238:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800123a:	f00c fd8b 	bl	800dd54 <__errno>
 800123e:	2216      	movs	r2, #22
 8001240:	4603      	mov	r3, r0
  return -1;
}
 8001242:	f04f 30ff 	mov.w	r0, #4294967295
  errno = EINVAL;
 8001246:	601a      	str	r2, [r3, #0]
}
 8001248:	bd08      	pop	{r3, pc}
 800124a:	bf00      	nop

0800124c <_exit>:

void _exit (int status)
{
 800124c:	b508      	push	{r3, lr}
  errno = EINVAL;
 800124e:	f00c fd81 	bl	800dd54 <__errno>
 8001252:	2316      	movs	r3, #22
 8001254:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001256:	e7fe      	b.n	8001256 <_exit+0xa>

08001258 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001258:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125a:	1e16      	subs	r6, r2, #0
 800125c:	dd07      	ble.n	800126e <_read+0x16>
 800125e:	460c      	mov	r4, r1
 8001260:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001262:	f3af 8000 	nop.w
 8001266:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126a:	42a5      	cmp	r5, r4
 800126c:	d1f9      	bne.n	8001262 <_read+0xa>
  }

  return len;
}
 800126e:	4630      	mov	r0, r6
 8001270:	bd70      	pop	{r4, r5, r6, pc}
 8001272:	bf00      	nop

08001274 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001274:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001276:	1e16      	subs	r6, r2, #0
 8001278:	dd07      	ble.n	800128a <_write+0x16>
 800127a:	460c      	mov	r4, r1
 800127c:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 800127e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001282:	f7ff fe79 	bl	8000f78 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001286:	42a5      	cmp	r5, r4
 8001288:	d1f9      	bne.n	800127e <_write+0xa>
  }
  return len;
}
 800128a:	4630      	mov	r0, r6
 800128c:	bd70      	pop	{r4, r5, r6, pc}
 800128e:	bf00      	nop

08001290 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop

08001298 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001298:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 800129c:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800129e:	604b      	str	r3, [r1, #4]
}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop

080012a4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80012a4:	2001      	movs	r0, #1
 80012a6:	4770      	bx	lr

080012a8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80012a8:	2000      	movs	r0, #0
 80012aa:	4770      	bx	lr

080012ac <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ac:	490d      	ldr	r1, [pc, #52]	@ (80012e4 <_sbrk+0x38>)
{
 80012ae:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b0:	4a0d      	ldr	r2, [pc, #52]	@ (80012e8 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80012b2:	6808      	ldr	r0, [r1, #0]
{
 80012b4:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b6:	4c0d      	ldr	r4, [pc, #52]	@ (80012ec <_sbrk+0x40>)
 80012b8:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80012ba:	b120      	cbz	r0, 80012c6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012bc:	4403      	add	r3, r0
 80012be:	4293      	cmp	r3, r2
 80012c0:	d807      	bhi.n	80012d2 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80012c2:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80012c4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80012c6:	4c0a      	ldr	r4, [pc, #40]	@ (80012f0 <_sbrk+0x44>)
 80012c8:	4620      	mov	r0, r4
 80012ca:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80012cc:	4403      	add	r3, r0
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d9f7      	bls.n	80012c2 <_sbrk+0x16>
    errno = ENOMEM;
 80012d2:	f00c fd3f 	bl	800dd54 <__errno>
 80012d6:	220c      	movs	r2, #12
 80012d8:	4603      	mov	r3, r0
    return (void *)-1;
 80012da:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 80012de:	601a      	str	r2, [r3, #0]
}
 80012e0:	bd10      	pop	{r4, pc}
 80012e2:	bf00      	nop
 80012e4:	200001e4 	.word	0x200001e4
 80012e8:	24080000 	.word	0x24080000
 80012ec:	00000400 	.word	0x00000400
 80012f0:	200012c0 	.word	0x200012c0

080012f4 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012f4:	492e      	ldr	r1, [pc, #184]	@ (80013b0 <SystemInit+0xbc>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012f6:	4a2f      	ldr	r2, [pc, #188]	@ (80013b4 <SystemInit+0xc0>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012f8:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80012fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 8001300:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
{
 8001306:	b083      	sub	sp, #12
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001308:	6813      	ldr	r3, [r2, #0]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	2b06      	cmp	r3, #6
 8001310:	d805      	bhi.n	800131e <SystemInit+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001312:	6813      	ldr	r3, [r2, #0]
 8001314:	f023 030f 	bic.w	r3, r3, #15
 8001318:	f043 0307 	orr.w	r3, r3, #7
 800131c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800131e:	4b26      	ldr	r3, [pc, #152]	@ (80013b8 <SystemInit+0xc4>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001320:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001322:	4a26      	ldr	r2, [pc, #152]	@ (80013bc <SystemInit+0xc8>)
  RCC->CR |= RCC_CR_HSION;
 8001324:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001326:	4823      	ldr	r0, [pc, #140]	@ (80013b4 <SystemInit+0xc0>)
  RCC->CR |= RCC_CR_HSION;
 8001328:	f041 0101 	orr.w	r1, r1, #1
 800132c:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 800132e:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8001330:	6819      	ldr	r1, [r3, #0]
 8001332:	400a      	ands	r2, r1
 8001334:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001336:	6803      	ldr	r3, [r0, #0]
 8001338:	071b      	lsls	r3, r3, #28
 800133a:	d505      	bpl.n	8001348 <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800133c:	6803      	ldr	r3, [r0, #0]
 800133e:	f023 030f 	bic.w	r3, r3, #15
 8001342:	f043 0307 	orr.w	r3, r3, #7
 8001346:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001348:	4b1b      	ldr	r3, [pc, #108]	@ (80013b8 <SystemInit+0xc4>)
 800134a:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800134c:	491c      	ldr	r1, [pc, #112]	@ (80013c0 <SystemInit+0xcc>)
  RCC->PLLCKSELR = 0x02020200;
 800134e:	4c1d      	ldr	r4, [pc, #116]	@ (80013c4 <SystemInit+0xd0>)
  RCC->PLLCFGR = 0x01FF0000;
 8001350:	481d      	ldr	r0, [pc, #116]	@ (80013c8 <SystemInit+0xd4>)
  RCC->D1CFGR = 0x00000000;
 8001352:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8001354:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001356:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8001358:	629c      	str	r4, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x01FF0000;
 800135a:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800135c:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800135e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001360:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001362:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001364:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001366:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001368:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800136a:	4c18      	ldr	r4, [pc, #96]	@ (80013cc <SystemInit+0xd8>)
  RCC->CR &= 0xFFFBFFFFU;
 800136c:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001370:	4917      	ldr	r1, [pc, #92]	@ (80013d0 <SystemInit+0xdc>)
  RCC->CR &= 0xFFFBFFFFU;
 8001372:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8001374:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	4019      	ands	r1, r3
 800137a:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 800137e:	d203      	bcs.n	8001388 <SystemInit+0x94>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001380:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <SystemInit+0xe0>)
 8001382:	2201      	movs	r2, #1
 8001384:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8001388:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <SystemInit+0xc4>)
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800138a:	f243 00d2 	movw	r0, #12498	@ 0x30d2
 800138e:	4912      	ldr	r1, [pc, #72]	@ (80013d8 <SystemInit+0xe4>)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8001390:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8001394:	f042 4260 	orr.w	r2, r2, #3758096384	@ 0xe0000000
 8001398:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  tmpreg = RCC->AHB2ENR;
 800139c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80013a0:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80013a2:	9b01      	ldr	r3, [sp, #4]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013a4:	6008      	str	r0, [r1, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013a6:	b003      	add	sp, #12
 80013a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00
 80013b4:	52002000 	.word	0x52002000
 80013b8:	58024400 	.word	0x58024400
 80013bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80013c0:	01010280 	.word	0x01010280
 80013c4:	02020200 	.word	0x02020200
 80013c8:	01ff0000 	.word	0x01ff0000
 80013cc:	5c001000 	.word	0x5c001000
 80013d0:	ffff0000 	.word	0xffff0000
 80013d4:	51008000 	.word	0x51008000
 80013d8:	52004000 	.word	0x52004000

080013dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001414 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013e0:	f7ff ff88 	bl	80012f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e4:	480c      	ldr	r0, [pc, #48]	@ (8001418 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013e6:	490d      	ldr	r1, [pc, #52]	@ (800141c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001420 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ec:	e002      	b.n	80013f4 <LoopCopyDataInit>

080013ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f2:	3304      	adds	r3, #4

080013f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f8:	d3f9      	bcc.n	80013ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001428 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001400:	e001      	b.n	8001406 <LoopFillZerobss>

08001402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001404:	3204      	adds	r2, #4

08001406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001408:	d3fb      	bcc.n	8001402 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800140a:	f00c fca9 	bl	800dd60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140e:	f7ff fb81 	bl	8000b14 <main>
  bx  lr
 8001412:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001414:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001420:	080108d4 	.word	0x080108d4
  ldr r2, =_sbss
 8001424:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001428:	200012c0 	.word	0x200012c0

0800142c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC3_IRQHandler>
	...

08001430 <vARPRefreshCacheEntry>:

					/* If ARP stores the MAC address of IP addresses outside the
					 * network, than the MAC address of the gateway should not be
					 * overwritten. */
					BaseType_t bIsLocal[ 2 ];
					bIsLocal[ 0 ] = ( ( xARPCache[ x ].ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) );
 8001430:	4a55      	ldr	r2, [pc, #340]	@ (8001588 <vARPRefreshCacheEntry+0x158>)
 8001432:	4b56      	ldr	r3, [pc, #344]	@ (800158c <vARPRefreshCacheEntry+0x15c>)
{
 8001434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
					bIsLocal[ 0 ] = ( ( xARPCache[ x ].ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) );
 8001438:	f8d2 9014 	ldr.w	r9, [r2, #20]
{
 800143c:	b085      	sub	sp, #20
					bIsLocal[ 0 ] = ( ( xARPCache[ x ].ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) );
 800143e:	685a      	ldr	r2, [r3, #4]
{
 8001440:	468b      	mov	fp, r1
					bIsLocal[ 1 ] = ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) );
 8001442:	ea89 0301 	eor.w	r3, r9, r1
	BaseType_t xMacEntry = -1;
 8001446:	f04f 3aff 	mov.w	sl, #4294967295
	BaseType_t xUseEntry = 0;
 800144a:	2100      	movs	r1, #0
{
 800144c:	4607      	mov	r7, r0
					bIsLocal[ 1 ] = ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) );
 800144e:	4213      	tst	r3, r2
 8001450:	4d4f      	ldr	r5, [pc, #316]	@ (8001590 <vARPRefreshCacheEntry+0x160>)
		ucMinAgeFound--;
 8001452:	f04f 08ff 	mov.w	r8, #255	@ 0xff
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8001456:	460c      	mov	r4, r1
					bIsLocal[ 1 ] = ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) );
 8001458:	bf0c      	ite	eq
 800145a:	2301      	moveq	r3, #1
 800145c:	2300      	movne	r3, #0
	BaseType_t xIpEntry = -1;
 800145e:	f8cd a00c 	str.w	sl, [sp, #12]
					bIsLocal[ 1 ] = ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) );
 8001462:	9300      	str	r3, [sp, #0]
	BaseType_t xIpEntry = -1;
 8001464:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8001468:	e010      	b.n	800148c <vARPRefreshCacheEntry+0x5c>
				if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 800146a:	2206      	movs	r2, #6
 800146c:	4639      	mov	r1, r7
 800146e:	4628      	mov	r0, r5
 8001470:	f00c fbe5 	bl	800dc3e <memcmp>
 8001474:	b350      	cbz	r0, 80014cc <vARPRefreshCacheEntry+0x9c>
			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8001476:	45b3      	cmp	fp, r6
 8001478:	d04b      	beq.n	8001512 <vARPRefreshCacheEntry+0xe2>
				#endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
			}

			/* _HT_
			 * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
			else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 800147a:	79aa      	ldrb	r2, [r5, #6]
 800147c:	4542      	cmp	r2, r8
 800147e:	d201      	bcs.n	8001484 <vARPRefreshCacheEntry+0x54>
 8001480:	4690      	mov	r8, r2
 8001482:	9402      	str	r4, [sp, #8]
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8001484:	3401      	adds	r4, #1
 8001486:	350c      	adds	r5, #12
 8001488:	2c06      	cmp	r4, #6
 800148a:	d030      	beq.n	80014ee <vARPRefreshCacheEntry+0xbe>
			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 800148c:	f855 6c04 	ldr.w	r6, [r5, #-4]
			if( pxMACAddress != NULL )
 8001490:	2f00      	cmp	r7, #0
 8001492:	d1ea      	bne.n	800146a <vARPRefreshCacheEntry+0x3a>
			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8001494:	45b3      	cmp	fp, r6
 8001496:	d1f0      	bne.n	800147a <vARPRefreshCacheEntry+0x4a>
			{
				/* Nothing happens to this cache entry for now. */
			}
		}

		if( xMacEntry >= 0 )
 8001498:	f1ba 3fff 	cmp.w	sl, #4294967295
 800149c:	d13c      	bne.n	8001518 <vARPRefreshCacheEntry+0xe8>
		{
			/* No matching entry found. */
		}

		/* If the entry was not found, we use the oldest entry and set the IPaddress */
		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 800149e:	4d3d      	ldr	r5, [pc, #244]	@ (8001594 <vARPRefreshCacheEntry+0x164>)
 80014a0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80014a4:	0063      	lsls	r3, r4, #1
 80014a6:	f845 b022 	str.w	fp, [r5, r2, lsl #2]

		if( pxMACAddress != NULL )
 80014aa:	b167      	cbz	r7, 80014c6 <vARPRefreshCacheEntry+0x96>
		{
			( void ) memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 80014ac:	4423      	add	r3, r4
 80014ae:	6838      	ldr	r0, [r7, #0]

			iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
			/* And this entry does not need immediate attention */
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80014b0:	f44f 71cb 	mov.w	r1, #406	@ 0x196
			( void ) memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	1d1a      	adds	r2, r3, #4
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80014b8:	3308      	adds	r3, #8
			( void ) memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 80014ba:	50a8      	str	r0, [r5, r2]
 80014bc:	18ac      	adds	r4, r5, r2
 80014be:	88b8      	ldrh	r0, [r7, #4]
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80014c0:	4a35      	ldr	r2, [pc, #212]	@ (8001598 <vARPRefreshCacheEntry+0x168>)
			( void ) memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 80014c2:	80a0      	strh	r0, [r4, #4]
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80014c4:	52d1      	strh	r1, [r2, r3]
		else
		{
			/* Nothing will be stored. */
		}
	}
}
 80014c6:	b005      	add	sp, #20
 80014c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 80014cc:	45b3      	cmp	fp, r6
 80014ce:	d036      	beq.n	800153e <vARPRefreshCacheEntry+0x10e>
					bIsLocal[ 0 ] = ( ( xARPCache[ x ].ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) );
 80014d0:	9b01      	ldr	r3, [sp, #4]
 80014d2:	ea89 0606 	eor.w	r6, r9, r6
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80014d6:	350c      	adds	r5, #12
					bIsLocal[ 0 ] = ( ( xARPCache[ x ].ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) );
 80014d8:	421e      	tst	r6, r3
 80014da:	9b00      	ldr	r3, [sp, #0]
					if( bIsLocal[ 0 ] == bIsLocal[ 1 ] )
 80014dc:	bf0c      	ite	eq
 80014de:	2201      	moveq	r2, #1
 80014e0:	2200      	movne	r2, #0
 80014e2:	429a      	cmp	r2, r3
 80014e4:	bf08      	it	eq
 80014e6:	46a2      	moveq	sl, r4
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80014e8:	3401      	adds	r4, #1
 80014ea:	2c06      	cmp	r4, #6
 80014ec:	d1ce      	bne.n	800148c <vARPRefreshCacheEntry+0x5c>
		if( xMacEntry >= 0 )
 80014ee:	f1ba 3fff 	cmp.w	sl, #4294967295
			if( xIpEntry >= 0 )
 80014f2:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
		if( xMacEntry >= 0 )
 80014f6:	d038      	beq.n	800156a <vARPRefreshCacheEntry+0x13a>
			if( xIpEntry >= 0 )
 80014f8:	1c59      	adds	r1, r3, #1
 80014fa:	d10c      	bne.n	8001516 <vARPRefreshCacheEntry+0xe6>
		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 80014fc:	4d25      	ldr	r5, [pc, #148]	@ (8001594 <vARPRefreshCacheEntry+0x164>)
 80014fe:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
 8001502:	ea4f 024a 	mov.w	r2, sl, lsl #1
 8001506:	f845 b021 	str.w	fp, [r5, r1, lsl #2]
		if( pxMACAddress != NULL )
 800150a:	b327      	cbz	r7, 8001556 <vARPRefreshCacheEntry+0x126>
 800150c:	4654      	mov	r4, sl
 800150e:	0063      	lsls	r3, r4, #1
 8001510:	e7cc      	b.n	80014ac <vARPRefreshCacheEntry+0x7c>
			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8001512:	9403      	str	r4, [sp, #12]
 8001514:	e7b6      	b.n	8001484 <vARPRefreshCacheEntry+0x54>
 8001516:	461c      	mov	r4, r3
				( void ) memset( &( xARPCache[ xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 8001518:	4d1e      	ldr	r5, [pc, #120]	@ (8001594 <vARPRefreshCacheEntry+0x164>)
 800151a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800151e:	2200      	movs	r2, #0
 8001520:	00a1      	lsls	r1, r4, #2
 8001522:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8001526:	506a      	str	r2, [r5, r1]
 8001528:	e9c4 2201 	strd	r2, r2, [r4, #4]
		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 800152c:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
 8001530:	f845 b022 	str.w	fp, [r5, r2, lsl #2]
		if( pxMACAddress != NULL )
 8001534:	2f00      	cmp	r7, #0
 8001536:	d0c6      	beq.n	80014c6 <vARPRefreshCacheEntry+0x96>
 8001538:	4654      	mov	r4, sl
 800153a:	0063      	lsls	r3, r4, #1
 800153c:	e7b6      	b.n	80014ac <vARPRefreshCacheEntry+0x7c>
					xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800153e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001542:	4b15      	ldr	r3, [pc, #84]	@ (8001598 <vARPRefreshCacheEntry+0x168>)
 8001544:	f44f 72cb 	mov.w	r2, #406	@ 0x196
 8001548:	00a4      	lsls	r4, r4, #2
 800154a:	3408      	adds	r4, #8
 800154c:	531a      	strh	r2, [r3, r4]
}
 800154e:	b005      	add	sp, #20
 8001550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if( pxMACAddress != NULL )
 8001554:	468a      	mov	sl, r1
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 8001556:	eb02 030a 	add.w	r3, r2, sl
 800155a:	2105      	movs	r1, #5
 800155c:	4a0e      	ldr	r2, [pc, #56]	@ (8001598 <vARPRefreshCacheEntry+0x168>)
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	3308      	adds	r3, #8
 8001562:	52d1      	strh	r1, [r2, r3]
}
 8001564:	b005      	add	sp, #20
 8001566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if( xIpEntry >= 0 )
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	d10a      	bne.n	8001584 <vARPRefreshCacheEntry+0x154>
		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 800156e:	4d09      	ldr	r5, [pc, #36]	@ (8001594 <vARPRefreshCacheEntry+0x164>)
 8001570:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8001574:	004a      	lsls	r2, r1, #1
 8001576:	f845 b023 	str.w	fp, [r5, r3, lsl #2]
		if( pxMACAddress != NULL )
 800157a:	2f00      	cmp	r7, #0
 800157c:	d0ea      	beq.n	8001554 <vARPRefreshCacheEntry+0x124>
 800157e:	460c      	mov	r4, r1
 8001580:	4613      	mov	r3, r2
 8001582:	e793      	b.n	80014ac <vARPRefreshCacheEntry+0x7c>
 8001584:	461c      	mov	r4, r3
 8001586:	e78a      	b.n	800149e <vARPRefreshCacheEntry+0x6e>
 8001588:	20000014 	.word	0x20000014
 800158c:	20000348 	.word	0x20000348
 8001590:	200001f0 	.word	0x200001f0
 8001594:	200001ec 	.word	0x200001ec
 8001598:	200001ee 	.word	0x200001ee

0800159c <eARPProcessPacket>:
{
 800159c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 800159e:	4e20      	ldr	r6, [pc, #128]	@ (8001620 <eARPProcessPacket+0x84>)
{
 80015a0:	b083      	sub	sp, #12
	if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 80015a2:	6975      	ldr	r5, [r6, #20]
 80015a4:	b915      	cbnz	r5, 80015ac <eARPProcessPacket+0x10>
	eFrameProcessingResult_t eReturn = eReleaseBuffer;
 80015a6:	2000      	movs	r0, #0
}
 80015a8:	b003      	add	sp, #12
 80015aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch( pxARPHeader->usOperation )
 80015ac:	8a83      	ldrh	r3, [r0, #20]
 80015ae:	4604      	mov	r4, r0
	( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 80015b0:	69c1      	ldr	r1, [r0, #28]
		switch( pxARPHeader->usOperation )
 80015b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
	ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 80015b6:	f8d0 2026 	ldr.w	r2, [r0, #38]	@ 0x26
		switch( pxARPHeader->usOperation )
 80015ba:	d006      	beq.n	80015ca <eARPProcessPacket+0x2e>
 80015bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015c0:	d1f1      	bne.n	80015a6 <eARPProcessPacket+0xa>
				vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 80015c2:	3016      	adds	r0, #22
 80015c4:	f7ff ff34 	bl	8001430 <vARPRefreshCacheEntry>
				break;
 80015c8:	e7ed      	b.n	80015a6 <eARPProcessPacket+0xa>
				if( ulTargetProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 80015ca:	4295      	cmp	r5, r2
 80015cc:	d1eb      	bne.n	80015a6 <eARPProcessPacket+0xa>
					vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 80015ce:	f100 0716 	add.w	r7, r0, #22
 80015d2:	9101      	str	r1, [sp, #4]
 80015d4:	4638      	mov	r0, r7
 80015d6:	f7ff ff2b 	bl	8001430 <vARPRefreshCacheEntry>
					if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 80015da:	9901      	ldr	r1, [sp, #4]
					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 80015dc:	2202      	movs	r2, #2
 80015de:	2300      	movs	r3, #0
					if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 80015e0:	42a9      	cmp	r1, r5
					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 80015e2:	7562      	strb	r2, [r4, #21]
						( void ) memset( pxARPHeader->xTargetHardwareAddress.ucBytes, 0, sizeof( MACAddress_t ) );
 80015e4:	f104 0220 	add.w	r2, r4, #32
					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 80015e8:	7523      	strb	r3, [r4, #20]
					if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 80015ea:	d00f      	beq.n	800160c <eARPProcessPacket+0x70>
						( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 80015ec:	f8d4 3016 	ldr.w	r3, [r4, #22]
 80015f0:	6223      	str	r3, [r4, #32]
 80015f2:	88bb      	ldrh	r3, [r7, #4]
 80015f4:	8093      	strh	r3, [r2, #4]
					( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 80015f6:	6830      	ldr	r0, [r6, #0]
						pxARPHeader->ulTargetProtocolAddress = 0UL;
 80015f8:	f8c4 1026 	str.w	r1, [r4, #38]	@ 0x26
					( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 80015fc:	f8c4 0016 	str.w	r0, [r4, #22]
					eReturn = eReturnEthernetFrame;
 8001600:	2002      	movs	r0, #2
					( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 8001602:	88b3      	ldrh	r3, [r6, #4]
 8001604:	80bb      	strh	r3, [r7, #4]
					( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 8001606:	6973      	ldr	r3, [r6, #20]
 8001608:	61e3      	str	r3, [r4, #28]
					eReturn = eReturnEthernetFrame;
 800160a:	e7cd      	b.n	80015a8 <eARPProcessPacket+0xc>
						( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xBroadcastMACAddress ) );
 800160c:	4805      	ldr	r0, [pc, #20]	@ (8001624 <eARPProcessPacket+0x88>)
 800160e:	4619      	mov	r1, r3
						( void ) memset( pxARPHeader->xTargetHardwareAddress.ucBytes, 0, sizeof( MACAddress_t ) );
 8001610:	6223      	str	r3, [r4, #32]
						( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xBroadcastMACAddress ) );
 8001612:	6805      	ldr	r5, [r0, #0]
 8001614:	8880      	ldrh	r0, [r0, #4]
 8001616:	f8c4 5006 	str.w	r5, [r4, #6]
 800161a:	8160      	strh	r0, [r4, #10]
						( void ) memset( pxARPHeader->xTargetHardwareAddress.ucBytes, 0, sizeof( MACAddress_t ) );
 800161c:	8093      	strh	r3, [r2, #4]
						pxARPHeader->ulTargetProtocolAddress = 0UL;
 800161e:	e7ea      	b.n	80015f6 <eARPProcessPacket+0x5a>
 8001620:	20000014 	.word	0x20000014
 8001624:	0800ef5c 	.word	0x0800ef5c

08001628 <eARPGetCacheEntry>:
 *         addressing needs a gateway but there isn't a gateway defined) then return
 *         eCantSendPacket.
 */
eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
									  MACAddress_t * const pxMACAddress )
{
 8001628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t ulAddressToLookup;

	ulAddressToLookup = *pulIPAddress;

	#if ( ipconfigUSE_LLMNR == 1 )
		if( ulAddressToLookup == ipLLMNR_IP_ADDR ) /* Is in network byte order. */
 800162a:	4b34      	ldr	r3, [pc, #208]	@ (80016fc <eARPGetCacheEntry+0xd4>)
{
 800162c:	460c      	mov	r4, r1
	ulAddressToLookup = *pulIPAddress;
 800162e:	6806      	ldr	r6, [r0, #0]
		if( ulAddressToLookup == ipLLMNR_IP_ADDR ) /* Is in network byte order. */
 8001630:	429e      	cmp	r6, r3
 8001632:	d106      	bne.n	8001642 <eARPGetCacheEntry+0x1a>
		{
			/* The LLMNR IP-address has a fixed virtual MAC address. */
			( void ) memcpy( pxMACAddress->ucBytes, xLLMNR_MacAdress.ucBytes, sizeof( MACAddress_t ) );
 8001634:	4b32      	ldr	r3, [pc, #200]	@ (8001700 <eARPGetCacheEntry+0xd8>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	889b      	ldrh	r3, [r3, #4]
 800163a:	600a      	str	r2, [r1, #0]
 800163c:	808b      	strh	r3, [r1, #4]
			eReturn = eARPCacheHit;
 800163e:	2001      	movs	r0, #1
			}
		}
	}

	return eReturn;
}
 8001640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 8001642:	4605      	mov	r5, r0
 8001644:	4630      	mov	r0, r6
 8001646:	f000 fe17 	bl	8002278 <xIsIPv4Multicast>
 800164a:	b9b0      	cbnz	r0, 800167a <eARPGetCacheEntry+0x52>
	else if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||               /* Is it the general broadcast address 255.255.255.255? */
 800164c:	682b      	ldr	r3, [r5, #0]
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	d00d      	beq.n	800166e <eARPGetCacheEntry+0x46>
			 ( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) ) /* Or a local broadcast address, eg 192.168.1.255? */
 8001652:	492c      	ldr	r1, [pc, #176]	@ (8001704 <eARPGetCacheEntry+0xdc>)
	else if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||               /* Is it the general broadcast address 255.255.255.255? */
 8001654:	690a      	ldr	r2, [r1, #16]
 8001656:	4293      	cmp	r3, r2
 8001658:	d009      	beq.n	800166e <eARPGetCacheEntry+0x46>
	else if( *ipLOCAL_IP_ADDRESS_POINTER == 0UL )
 800165a:	4a2b      	ldr	r2, [pc, #172]	@ (8001708 <eARPGetCacheEntry+0xe0>)
 800165c:	6952      	ldr	r2, [r2, #20]
 800165e:	b122      	cbz	r2, 800166a <eARPGetCacheEntry+0x42>
		if( ( *pulIPAddress & xNetworkAddressing.ulNetMask ) != ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) )
 8001660:	405a      	eors	r2, r3
 8001662:	684e      	ldr	r6, [r1, #4]
 8001664:	4232      	tst	r2, r6
 8001666:	d10d      	bne.n	8001684 <eARPGetCacheEntry+0x5c>
			if( ulAddressToLookup == 0UL )
 8001668:	b9eb      	cbnz	r3, 80016a6 <eARPGetCacheEntry+0x7e>
		{
			/* A matching valid entry was found. */
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
			{
				/* This entry is waiting an ARP reply, so is not valid. */
				eReturn = eCantSendPacket;
 800166a:	2002      	movs	r0, #2
}
 800166c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800166e:	4b27      	ldr	r3, [pc, #156]	@ (800170c <eARPGetCacheEntry+0xe4>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	889b      	ldrh	r3, [r3, #4]
 8001674:	6022      	str	r2, [r4, #0]
 8001676:	80a3      	strh	r3, [r4, #4]
		eReturn = eARPCacheHit;
 8001678:	e7e1      	b.n	800163e <eARPGetCacheEntry+0x16>
		vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 800167a:	4621      	mov	r1, r4
 800167c:	4630      	mov	r0, r6
 800167e:	f000 fe05 	bl	800228c <vSetMultiCastIPv4MacAddress>
		eReturn = eARPCacheHit;
 8001682:	e7dc      	b.n	800163e <eARPGetCacheEntry+0x16>
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8001684:	4602      	mov	r2, r0
 8001686:	4684      	mov	ip, r0
 8001688:	4e21      	ldr	r6, [pc, #132]	@ (8001710 <eARPGetCacheEntry+0xe8>)
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 800168a:	f856 702c 	ldr.w	r7, [r6, ip, lsl #2]
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800168e:	f10c 0c03 	add.w	ip, ip, #3
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8001692:	42bb      	cmp	r3, r7
 8001694:	d023      	beq.n	80016de <eARPGetCacheEntry+0xb6>
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8001696:	3201      	adds	r2, #1
 8001698:	2a06      	cmp	r2, #6
 800169a:	d1f6      	bne.n	800168a <eARPGetCacheEntry+0x62>
				if( xNetworkAddressing.ulGatewayAddress != ( uint32_t ) 0U )
 800169c:	688a      	ldr	r2, [r1, #8]
 800169e:	2a00      	cmp	r2, #0
 80016a0:	d0e2      	beq.n	8001668 <eARPGetCacheEntry+0x40>
 80016a2:	4613      	mov	r3, r2
 80016a4:	e000      	b.n	80016a8 <eARPGetCacheEntry+0x80>
 80016a6:	4e1a      	ldr	r6, [pc, #104]	@ (8001710 <eARPGetCacheEntry+0xe8>)
 80016a8:	2200      	movs	r2, #0
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 80016aa:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80016ae:	3203      	adds	r2, #3
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 80016b0:	4299      	cmp	r1, r3
 80016b2:	d005      	beq.n	80016c0 <eARPGetCacheEntry+0x98>
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80016b4:	3001      	adds	r0, #1
 80016b6:	2806      	cmp	r0, #6
 80016b8:	d1f7      	bne.n	80016aa <eARPGetCacheEntry+0x82>
				eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress );
 80016ba:	2000      	movs	r0, #0
					*pulIPAddress = ulAddressToLookup;
 80016bc:	602b      	str	r3, [r5, #0]
}
 80016be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80016c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80016c4:	eb06 0380 	add.w	r3, r6, r0, lsl #2
 80016c8:	0080      	lsls	r0, r0, #2
 80016ca:	7adb      	ldrb	r3, [r3, #11]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0cc      	beq.n	800166a <eARPGetCacheEntry+0x42>
			}
			else
			{
				/* A valid entry was found. */
				( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 80016d0:	1d03      	adds	r3, r0, #4
 80016d2:	58f0      	ldr	r0, [r6, r3]
 80016d4:	441e      	add	r6, r3
 80016d6:	6020      	str	r0, [r4, #0]
 80016d8:	88b3      	ldrh	r3, [r6, #4]
 80016da:	80a3      	strh	r3, [r4, #4]
				if( eReturn == eARPCacheMiss )
 80016dc:	e7af      	b.n	800163e <eARPGetCacheEntry+0x16>
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80016de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80016e2:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 80016e6:	0092      	lsls	r2, r2, #2
 80016e8:	7adb      	ldrb	r3, [r3, #11]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0bd      	beq.n	800166a <eARPGetCacheEntry+0x42>
				( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 80016ee:	3204      	adds	r2, #4
 80016f0:	58b0      	ldr	r0, [r6, r2]
 80016f2:	4432      	add	r2, r6
 80016f4:	6020      	str	r0, [r4, #0]
 80016f6:	8893      	ldrh	r3, [r2, #4]
 80016f8:	80a3      	strh	r3, [r4, #4]
				if( eReturn == eARPCacheHit )
 80016fa:	e7a0      	b.n	800163e <eARPGetCacheEntry+0x16>
 80016fc:	fc0000e0 	.word	0xfc0000e0
 8001700:	0800ed70 	.word	0x0800ed70
 8001704:	20000348 	.word	0x20000348
 8001708:	20000014 	.word	0x20000014
 800170c:	0800ef5c 	.word	0x0800ef5c
 8001710:	200001ec 	.word	0x200001ec

08001714 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer: Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8001714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	void * pvCopyDest;

	/* Buffer allocation ensures that buffers always have space
	 * for an ARP packet. See buffer allocation implementations 1
	 * and 2 under portable/BufferManagement. */
	configASSERT( pxNetworkBuffer != NULL );
 8001716:	4604      	mov	r4, r0
 8001718:	b3a0      	cbz	r0, 8001784 <vARPGenerateRequestPacket+0x70>
	configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 800171a:	69e3      	ldr	r3, [r4, #28]
 800171c:	2b29      	cmp	r3, #41	@ 0x29
 800171e:	d92b      	bls.n	8001778 <vARPGenerateRequestPacket+0x64>

	pxARPPacket = ipCAST_PTR_TO_TYPE_PTR( ARPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8001720:	69a5      	ldr	r5, [r4, #24]
	 * compliant with MISRA Rule 21.15.  These should be
	 * optimized away.
	 */
	pvCopySource = xDefaultPartARPPacketHeader;
	pvCopyDest = pxARPPacket;
	( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 8001722:	4e1b      	ldr	r6, [pc, #108]	@ (8001790 <vARPGenerateRequestPacket+0x7c>)
 8001724:	46ac      	mov	ip, r5
 8001726:	f106 0720 	add.w	r7, r6, #32
 800172a:	46b6      	mov	lr, r6
 800172c:	f10c 0c10 	add.w	ip, ip, #16
 8001730:	3610      	adds	r6, #16
 8001732:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001736:	45be      	cmp	lr, r7
 8001738:	f84c 0c10 	str.w	r0, [ip, #-16]
 800173c:	f84c 1c0c 	str.w	r1, [ip, #-12]
 8001740:	f84c 2c08 	str.w	r2, [ip, #-8]
 8001744:	f84c 3c04 	str.w	r3, [ip, #-4]
 8001748:	d1ef      	bne.n	800172a <vARPGenerateRequestPacket+0x16>

	pvCopySource = ipLOCAL_MAC_ADDRESS;
	pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
	( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 800174a:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <vARPGenerateRequestPacket+0x80>)
	pvCopySource = ipLOCAL_IP_ADDRESS_POINTER;
	pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
	( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
	pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;

	pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 800174c:	212a      	movs	r1, #42	@ 0x2a
	( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 800174e:	6830      	ldr	r0, [r6, #0]
 8001750:	88b2      	ldrh	r2, [r6, #4]
 8001752:	f8cc 0000 	str.w	r0, [ip]
 8001756:	f8ac 2004 	strh.w	r2, [ip, #4]
	( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 800175a:	6818      	ldr	r0, [r3, #0]
 800175c:	f8c5 0006 	str.w	r0, [r5, #6]
 8001760:	889a      	ldrh	r2, [r3, #4]
	( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8001762:	f8c5 0016 	str.w	r0, [r5, #22]
	( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8001766:	816a      	strh	r2, [r5, #10]
	( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 8001768:	695b      	ldr	r3, [r3, #20]
	( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 800176a:	836a      	strh	r2, [r5, #26]
	( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 800176c:	61eb      	str	r3, [r5, #28]
	pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;
 800176e:	6963      	ldr	r3, [r4, #20]
 8001770:	f8c5 3026 	str.w	r3, [r5, #38]	@ 0x26
	pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8001774:	61e1      	str	r1, [r4, #28]

	iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->ulIPAddress );
}
 8001776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 8001778:	f44f 7155 	mov.w	r1, #852	@ 0x354
 800177c:	4806      	ldr	r0, [pc, #24]	@ (8001798 <vARPGenerateRequestPacket+0x84>)
 800177e:	f7ff fb69 	bl	8000e54 <vAssertCalled>
 8001782:	e7cd      	b.n	8001720 <vARPGenerateRequestPacket+0xc>
	configASSERT( pxNetworkBuffer != NULL );
 8001784:	f240 3153 	movw	r1, #851	@ 0x353
 8001788:	4803      	ldr	r0, [pc, #12]	@ (8001798 <vARPGenerateRequestPacket+0x84>)
 800178a:	f7ff fb63 	bl	8000e54 <vAssertCalled>
 800178e:	e7c4      	b.n	800171a <vARPGenerateRequestPacket+0x6>
 8001790:	0800ea24 	.word	0x0800ea24
 8001794:	20000014 	.word	0x20000014
 8001798:	0800ec94 	.word	0x0800ec94

0800179c <FreeRTOS_OutputARPRequest>:
{
 800179c:	b530      	push	{r4, r5, lr}
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 800179e:	2100      	movs	r1, #0
{
 80017a0:	b083      	sub	sp, #12
 80017a2:	4605      	mov	r5, r0
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 80017a4:	202a      	movs	r0, #42	@ 0x2a
 80017a6:	f005 f8b7 	bl	8006918 <pxGetNetworkBufferWithDescriptor>
	if( pxNetworkBuffer != NULL )
 80017aa:	b308      	cbz	r0, 80017f0 <FreeRTOS_OutputARPRequest+0x54>
 80017ac:	4604      	mov	r4, r0
		pxNetworkBuffer->ulIPAddress = ulIPAddress;
 80017ae:	6145      	str	r5, [r0, #20]
		vARPGenerateRequestPacket( pxNetworkBuffer );
 80017b0:	f7ff ffb0 	bl	8001714 <vARPGenerateRequestPacket>
				if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80017b4:	69e3      	ldr	r3, [r4, #28]
 80017b6:	2b3b      	cmp	r3, #59	@ 0x3b
 80017b8:	d806      	bhi.n	80017c8 <FreeRTOS_OutputARPRequest+0x2c>
						pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 80017ba:	2100      	movs	r1, #0
 80017bc:	69a2      	ldr	r2, [r4, #24]
 80017be:	54d1      	strb	r1, [r2, r3]
					for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80017c0:	3301      	adds	r3, #1
 80017c2:	2b3c      	cmp	r3, #60	@ 0x3c
 80017c4:	d1fa      	bne.n	80017bc <FreeRTOS_OutputARPRequest+0x20>
					pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80017c6:	61e3      	str	r3, [r4, #28]
		if( xIsCallingFromIPTask() != 0 )
 80017c8:	f000 fb64 	bl	8001e94 <xIsCallingFromIPTask>
 80017cc:	b130      	cbz	r0, 80017dc <FreeRTOS_OutputARPRequest+0x40>
			( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 80017ce:	2101      	movs	r1, #1
 80017d0:	4620      	mov	r0, r4
}
 80017d2:	b003      	add	sp, #12
 80017d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 80017d8:	f005 be20 	b.w	800741c <xNetworkInterfaceOutput>
			xSendEvent.eEventType = eNetworkTxEvent;
 80017dc:	2302      	movs	r3, #2
			if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 80017de:	f04f 31ff 	mov.w	r1, #4294967295
 80017e2:	4668      	mov	r0, sp
			xSendEvent.pvData = pxNetworkBuffer;
 80017e4:	9401      	str	r4, [sp, #4]
			xSendEvent.eEventType = eNetworkTxEvent;
 80017e6:	f88d 3000 	strb.w	r3, [sp]
			if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 80017ea:	f000 fc9f 	bl	800212c <xSendEventStructToIPTask>
 80017ee:	b108      	cbz	r0, 80017f4 <FreeRTOS_OutputARPRequest+0x58>
}
 80017f0:	b003      	add	sp, #12
 80017f2:	bd30      	pop	{r4, r5, pc}
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80017f4:	4620      	mov	r0, r4
 80017f6:	f005 f8cb 	bl	8006990 <vReleaseNetworkBufferAndDescriptor>
}
 80017fa:	e7f9      	b.n	80017f0 <FreeRTOS_OutputARPRequest+0x54>

080017fc <vARPAgeCache>:
{
 80017fc:	b538      	push	{r3, r4, r5, lr}
 80017fe:	4c16      	ldr	r4, [pc, #88]	@ (8001858 <vARPAgeCache+0x5c>)
 8001800:	f104 0548 	add.w	r5, r4, #72	@ 0x48
 8001804:	e004      	b.n	8001810 <vARPAgeCache+0x14>
			else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8001806:	2a03      	cmp	r2, #3
 8001808:	d90b      	bls.n	8001822 <vARPAgeCache+0x26>
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800180a:	340c      	adds	r4, #12
 800180c:	42ac      	cmp	r4, r5
 800180e:	d012      	beq.n	8001836 <vARPAgeCache+0x3a>
		if( xARPCache[ x ].ucAge > 0U )
 8001810:	7aa3      	ldrb	r3, [r4, #10]
			( xARPCache[ x ].ucAge )--;
 8001812:	1e5a      	subs	r2, r3, #1
		if( xARPCache[ x ].ucAge > 0U )
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0f8      	beq.n	800180a <vARPAgeCache+0xe>
			( xARPCache[ x ].ucAge )--;
 8001818:	b2d2      	uxtb	r2, r2
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800181a:	7ae3      	ldrb	r3, [r4, #11]
			( xARPCache[ x ].ucAge )--;
 800181c:	72a2      	strb	r2, [r4, #10]
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f1      	bne.n	8001806 <vARPAgeCache+0xa>
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8001822:	6820      	ldr	r0, [r4, #0]
 8001824:	f7ff ffba 	bl	800179c <FreeRTOS_OutputARPRequest>
			if( xARPCache[ x ].ucAge == 0U )
 8001828:	7aa3      	ldrb	r3, [r4, #10]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1ed      	bne.n	800180a <vARPAgeCache+0xe>
				xARPCache[ x ].ulIPAddress = 0UL;
 800182e:	6023      	str	r3, [r4, #0]
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8001830:	340c      	adds	r4, #12
 8001832:	42ac      	cmp	r4, r5
 8001834:	d1ec      	bne.n	8001810 <vARPAgeCache+0x14>
	if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 8001836:	4d09      	ldr	r5, [pc, #36]	@ (800185c <vARPAgeCache+0x60>)
	xTimeNow = xTaskGetTickCount();
 8001838:	f007 fc02 	bl	8009040 <xTaskGetTickCount>
 800183c:	4604      	mov	r4, r0
	if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 800183e:	682b      	ldr	r3, [r5, #0]
 8001840:	b123      	cbz	r3, 800184c <vARPAgeCache+0x50>
 8001842:	1ac3      	subs	r3, r0, r3
 8001844:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001848:	4293      	cmp	r3, r2
 800184a:	d904      	bls.n	8001856 <vARPAgeCache+0x5a>
		FreeRTOS_OutputARPRequest( *ipLOCAL_IP_ADDRESS_POINTER );
 800184c:	4b04      	ldr	r3, [pc, #16]	@ (8001860 <vARPAgeCache+0x64>)
 800184e:	6958      	ldr	r0, [r3, #20]
 8001850:	f7ff ffa4 	bl	800179c <FreeRTOS_OutputARPRequest>
		xLastGratuitousARPTime = xTimeNow;
 8001854:	602c      	str	r4, [r5, #0]
}
 8001856:	bd38      	pop	{r3, r4, r5, pc}
 8001858:	200001ec 	.word	0x200001ec
 800185c:	200001e8 	.word	0x200001e8
 8001860:	20000014 	.word	0x20000014

08001864 <xARPWaitResolution>:
{
 8001864:	b510      	push	{r4, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	e9cd 1000 	strd	r1, r0, [sp]
	xLookupResult = eARPGetCacheEntry( &( ulIPAddress ), &( xMACAddress ) );
 800186c:	a801      	add	r0, sp, #4
 800186e:	a902      	add	r1, sp, #8
 8001870:	f7ff feda 	bl	8001628 <eARPGetCacheEntry>
	if( xLookupResult == eARPCacheMiss )
 8001874:	4604      	mov	r4, r0
 8001876:	b130      	cbz	r0, 8001886 <xARPWaitResolution+0x22>
	BaseType_t xResult = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 8001878:	2c01      	cmp	r4, #1
}
 800187a:	bf14      	ite	ne
 800187c:	f06f 007c 	mvnne.w	r0, #124	@ 0x7c
 8001880:	2000      	moveq	r0, #0
 8001882:	b006      	add	sp, #24
 8001884:	bd10      	pop	{r4, pc}
		FreeRTOS_OutputARPRequest( ulIPAddress );
 8001886:	9801      	ldr	r0, [sp, #4]
 8001888:	f7ff ff88 	bl	800179c <FreeRTOS_OutputARPRequest>
		vTaskSetTimeOutState( &xTimeOut );
 800188c:	a804      	add	r0, sp, #16
 800188e:	f007 fe8d 	bl	80095ac <vTaskSetTimeOutState>
 8001892:	e003      	b.n	800189c <xARPWaitResolution+0x38>
			if( ( xTaskCheckForTimeOut( &( xTimeOut ), &( uxTicksToWait ) ) == pdTRUE ) ||
 8001894:	2b01      	cmp	r3, #1
 8001896:	d0ef      	beq.n	8001878 <xARPWaitResolution+0x14>
			vTaskDelay( uxSleepTime );
 8001898:	f007 fd3e 	bl	8009318 <vTaskDelay>
			xLookupResult = eARPGetCacheEntry( &( ulIPAddress ), &( xMACAddress ) );
 800189c:	a902      	add	r1, sp, #8
 800189e:	a801      	add	r0, sp, #4
 80018a0:	f7ff fec2 	bl	8001628 <eARPGetCacheEntry>
 80018a4:	4604      	mov	r4, r0
			if( ( xTaskCheckForTimeOut( &( xTimeOut ), &( uxTicksToWait ) ) == pdTRUE ) ||
 80018a6:	4669      	mov	r1, sp
 80018a8:	a804      	add	r0, sp, #16
 80018aa:	f007 fea7 	bl	80095fc <xTaskCheckForTimeOut>
 80018ae:	4603      	mov	r3, r0
			vTaskDelay( uxSleepTime );
 80018b0:	200a      	movs	r0, #10
			if( ( xTaskCheckForTimeOut( &( xTimeOut ), &( uxTicksToWait ) ) == pdTRUE ) ||
 80018b2:	2c00      	cmp	r4, #0
 80018b4:	d0ee      	beq.n	8001894 <xARPWaitResolution+0x30>
 80018b6:	e7df      	b.n	8001878 <xARPWaitResolution+0x14>

080018b8 <FreeRTOS_ClearARP>:
/**
 * @brief A call to this function will clear the ARP cache.
 */
void FreeRTOS_ClearARP( void )
{
	( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 80018b8:	2248      	movs	r2, #72	@ 0x48
 80018ba:	2100      	movs	r1, #0
 80018bc:	4801      	ldr	r0, [pc, #4]	@ (80018c4 <FreeRTOS_ClearARP+0xc>)
 80018be:	f00b bd53 	b.w	800d368 <memset>
 80018c2:	bf00      	nop
 80018c4:	200001ec 	.word	0x200001ec

080018c8 <prvSkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
	_static size_t prvSkipNameField( const uint8_t * pucByte,
									 size_t uxLength )
	{
 80018c8:	4602      	mov	r2, r0
		size_t uxChunkLength;
		size_t uxSourceLenCpy = uxLength;
		size_t uxIndex = 0U;

		if( uxSourceLenCpy == 0U )
 80018ca:	b1a1      	cbz	r1, 80018f6 <prvSkipNameField+0x2e>
			uxIndex = 0U;
		}

		/* Determine if the name is the fully coded name, or an offset to the name
		 * elsewhere in the message. */
		else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 80018cc:	7803      	ldrb	r3, [r0, #0]
 80018ce:	f003 00c0 	and.w	r0, r3, #192	@ 0xc0
 80018d2:	28c0      	cmp	r0, #192	@ 0xc0
 80018d4:	d018      	beq.n	8001908 <prvSkipNameField+0x40>
			}
		}
		else
		{
			/* pucByte points to the full name. Walk over the string. */
			while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 80018d6:	2901      	cmp	r1, #1
		size_t uxIndex = 0U;
 80018d8:	f04f 0000 	mov.w	r0, #0
			while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 80018dc:	d01a      	beq.n	8001914 <prvSkipNameField+0x4c>
 80018de:	b923      	cbnz	r3, 80018ea <prvSkipNameField+0x22>
 80018e0:	e018      	b.n	8001914 <prvSkipNameField+0x4c>
 80018e2:	5c13      	ldrb	r3, [r2, r0]
 80018e4:	b14b      	cbz	r3, 80018fa <prvSkipNameField+0x32>
 80018e6:	2901      	cmp	r1, #1
 80018e8:	d007      	beq.n	80018fa <prvSkipNameField+0x32>
			{
				/* Conversion to size_t causes addition to be done
				 * in size_t */
				uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 80018ea:	3301      	adds	r3, #1

				if( uxSourceLenCpy > uxChunkLength )
 80018ec:	428b      	cmp	r3, r1
				{
					uxSourceLenCpy -= uxChunkLength;
					uxIndex += uxChunkLength;
 80018ee:	4418      	add	r0, r3
					uxSourceLenCpy -= uxChunkLength;
 80018f0:	eba1 0103 	sub.w	r1, r1, r3
				if( uxSourceLenCpy > uxChunkLength )
 80018f4:	d3f5      	bcc.n	80018e2 <prvSkipNameField+0x1a>
			uxIndex = 0U;
 80018f6:	2000      	movs	r0, #0
				}
			}
		}

		return uxIndex;
	}
 80018f8:	4770      	bx	lr
			if( uxIndex > 0U )
 80018fa:	2800      	cmp	r0, #0
 80018fc:	d0fc      	beq.n	80018f8 <prvSkipNameField+0x30>
				if( pucByte[ uxIndex ] == 0U )
 80018fe:	5c13      	ldrb	r3, [r2, r0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1f8      	bne.n	80018f6 <prvSkipNameField+0x2e>
					uxIndex++;
 8001904:	3001      	adds	r0, #1
 8001906:	4770      	bx	lr
			if( uxSourceLenCpy > sizeof( uint16_t ) )
 8001908:	2902      	cmp	r1, #2
 800190a:	bf94      	ite	ls
 800190c:	2100      	movls	r1, #0
 800190e:	2101      	movhi	r1, #1
 8001910:	0048      	lsls	r0, r1, #1
 8001912:	4770      	bx	lr
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop

08001918 <prvProcessDNSCache.isra.0>:
 * @param[in] xLookUp: pdTRUE if a look-up is expected, pdFALSE, when the DNS cache must
 *                     be updated.
 *
 * @return
 */
		static BaseType_t prvProcessDNSCache( const char * pcName,
 8001918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800191c:	b083      	sub	sp, #12
 800191e:	469b      	mov	fp, r3
 8001920:	4606      	mov	r6, r0
 8001922:	4688      	mov	r8, r1
 8001924:	4692      	mov	sl, r2
											  uint32_t ulTTL,
											  BaseType_t xLookUp )
		{
			BaseType_t x;
			BaseType_t xFound = pdFALSE;
			uint32_t ulCurrentTimeSeconds = ( xTaskGetTickCount() / portTICK_PERIOD_MS ) / 1000UL;
 8001926:	f007 fb8b 	bl	8009040 <xTaskGetTickCount>
 800192a:	4b56      	ldr	r3, [pc, #344]	@ (8001a84 <prvProcessDNSCache.isra.0+0x16c>)
 800192c:	fba3 3700 	umull	r3, r7, r3, r0
 8001930:	09bf      	lsrs	r7, r7, #6
			uint32_t ulIPAddressIndex = 0;
			static BaseType_t xFreeEntry = 0;

			configASSERT( ( pcName != NULL ) );
 8001932:	b34e      	cbz	r6, 8001988 <prvProcessDNSCache.isra.0+0x70>

			/* For each entry in the DNS cache table. */
			for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 8001934:	f8df 9168 	ldr.w	r9, [pc, #360]	@ 8001aa0 <prvProcessDNSCache.isra.0+0x188>
 8001938:	2500      	movs	r5, #0
 800193a:	464c      	mov	r4, r9
			{
				if( xDNSCache[ x ].pcName[ 0 ] == ( char ) 0 )
 800193c:	7c23      	ldrb	r3, [r4, #16]
				{
					continue;
				}

				if( strcmp( xDNSCache[ x ].pcName, pcName ) == 0 )
 800193e:	f104 0010 	add.w	r0, r4, #16
 8001942:	4631      	mov	r1, r6
			for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 8001944:	342c      	adds	r4, #44	@ 0x2c
				if( xDNSCache[ x ].pcName[ 0 ] == ( char ) 0 )
 8001946:	b11b      	cbz	r3, 8001950 <prvProcessDNSCache.isra.0+0x38>
				if( strcmp( xDNSCache[ x ].pcName, pcName ) == 0 )
 8001948:	f7fe fcca 	bl	80002e0 <strcmp>
 800194c:	2800      	cmp	r0, #0
 800194e:	d04d      	beq.n	80019ec <prvProcessDNSCache.isra.0+0xd4>
			for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 8001950:	3501      	adds	r5, #1
 8001952:	2d04      	cmp	r5, #4
 8001954:	d1f2      	bne.n	800193c <prvProcessDNSCache.isra.0+0x24>
				}
			}

			if( xFound == pdFALSE )
			{
				if( xLookUp != pdFALSE )
 8001956:	f1bb 0f00 	cmp.w	fp, #0
 800195a:	d10f      	bne.n	800197c <prvProcessDNSCache.isra.0+0x64>
					*pulIP = 0UL;
				}
				else
				{
					/* Add or update the item. */
					if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 800195c:	4630      	mov	r0, r6
 800195e:	f7fe fcc9 	bl	80002f4 <strlen>
 8001962:	280f      	cmp	r0, #15
 8001964:	d916      	bls.n	8001994 <prvProcessDNSCache.isra.0+0x7c>
						xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ] = *pulIP;
 8001966:	f8d8 3000 	ldr.w	r3, [r8]
				}
			}

			if( ( xLookUp == 0 ) || ( *pulIP != 0UL ) )
			{
				FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", ( xLookUp != 0 ) ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
 800196a:	4947      	ldr	r1, [pc, #284]	@ (8001a88 <prvProcessDNSCache.isra.0+0x170>)
 800196c:	ba1b      	rev	r3, r3
 800196e:	4632      	mov	r2, r6
 8001970:	4846      	ldr	r0, [pc, #280]	@ (8001a8c <prvProcessDNSCache.isra.0+0x174>)
			}

			return xFound;
		}
 8001972:	b003      	add	sp, #12
 8001974:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", ( xLookUp != 0 ) ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
 8001978:	f00b ba60 	b.w	800ce3c <lUDPLoggingPrintf>
					*pulIP = 0UL;
 800197c:	2300      	movs	r3, #0
 800197e:	f8c8 3000 	str.w	r3, [r8]
		}
 8001982:	b003      	add	sp, #12
 8001984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			configASSERT( ( pcName != NULL ) );
 8001988:	f240 71d9 	movw	r1, #2009	@ 0x7d9
 800198c:	4840      	ldr	r0, [pc, #256]	@ (8001a90 <prvProcessDNSCache.isra.0+0x178>)
 800198e:	f7ff fa61 	bl	8000e54 <vAssertCalled>
 8001992:	e7cf      	b.n	8001934 <prvProcessDNSCache.isra.0+0x1c>
						( void ) strcpy( xDNSCache[ xFreeEntry ].pcName, pcName );
 8001994:	4d3f      	ldr	r5, [pc, #252]	@ (8001a94 <prvProcessDNSCache.isra.0+0x17c>)
 8001996:	242c      	movs	r4, #44	@ 0x2c
 8001998:	1c42      	adds	r2, r0, #1
 800199a:	4631      	mov	r1, r6
 800199c:	682b      	ldr	r3, [r5, #0]
 800199e:	fb03 f404 	mul.w	r4, r3, r4
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	f104 0010 	add.w	r0, r4, #16
 80019a8:	4448      	add	r0, r9
 80019aa:	f00b fc09 	bl	800d1c0 <memcpy>
						xFreeEntry++;
 80019ae:	9b01      	ldr	r3, [sp, #4]
							( void ) memset( &xDNSCache[ xFreeEntry ].ulIPAddresses[ 1 ],
 80019b0:	1d21      	adds	r1, r4, #4
							xDNSCache[ xFreeEntry ].ucNumIPAddresses = 1;
 80019b2:	2001      	movs	r0, #1
						xFreeEntry++;
 80019b4:	1c5a      	adds	r2, r3, #1
						xDNSCache[ xFreeEntry ].ulIPAddresses[ 0 ] = *pulIP;
 80019b6:	f8d8 3000 	ldr.w	r3, [r8]
 80019ba:	f849 3004 	str.w	r3, [r9, r4]
 80019be:	eb09 0304 	add.w	r3, r9, r4
						if( xFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 80019c2:	2a04      	cmp	r2, #4
							xDNSCache[ xFreeEntry ].ucNumIPAddresses = 1;
 80019c4:	f104 0428 	add.w	r4, r4, #40	@ 0x28
						xFreeEntry++;
 80019c8:	602a      	str	r2, [r5, #0]
							xFreeEntry = 0;
 80019ca:	bf08      	it	eq
 80019cc:	f8c5 b000 	streq.w	fp, [r5]
						xDNSCache[ xFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 80019d0:	e9c3 a708 	strd	sl, r7, [r3, #32]
							( void ) memset( &xDNSCache[ xFreeEntry ].ulIPAddresses[ 1 ],
 80019d4:	eb09 0301 	add.w	r3, r9, r1
							xDNSCache[ xFreeEntry ].ucNumIPAddresses = 1;
 80019d8:	f829 0004 	strh.w	r0, [r9, r4]
							( void ) memset( &xDNSCache[ xFreeEntry ].ulIPAddresses[ 1 ],
 80019dc:	f849 b001 	str.w	fp, [r9, r1]
				FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", ( xLookUp != 0 ) ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
 80019e0:	4929      	ldr	r1, [pc, #164]	@ (8001a88 <prvProcessDNSCache.isra.0+0x170>)
							( void ) memset( &xDNSCache[ xFreeEntry ].ulIPAddresses[ 1 ],
 80019e2:	e9c3 bb01 	strd	fp, fp, [r3, #4]
			if( ( xLookUp == 0 ) || ( *pulIP != 0UL ) )
 80019e6:	f8d8 3000 	ldr.w	r3, [r8]
 80019ea:	e7bf      	b.n	800196c <prvProcessDNSCache.isra.0+0x54>
					if( xLookUp != pdFALSE )
 80019ec:	f1bb 0f00 	cmp.w	fp, #0
 80019f0:	d024      	beq.n	8001a3c <prvProcessDNSCache.isra.0+0x124>
						if( ulCurrentTimeSeconds < ( xDNSCache[ x ].ulTimeWhenAddedInSeconds + FreeRTOS_ntohl( xDNSCache[ x ].ulTTL ) ) )
 80019f2:	242c      	movs	r4, #44	@ 0x2c
 80019f4:	4b28      	ldr	r3, [pc, #160]	@ (8001a98 <prvProcessDNSCache.isra.0+0x180>)
 80019f6:	fb05 f404 	mul.w	r4, r5, r4
 80019fa:	591b      	ldr	r3, [r3, r4]
 80019fc:	444c      	add	r4, r9
 80019fe:	ba1b      	rev	r3, r3
 8001a00:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001a02:	4413      	add	r3, r2
 8001a04:	429f      	cmp	r7, r3
 8001a06:	d233      	bcs.n	8001a70 <prvProcessDNSCache.isra.0+0x158>
								ucIndex = xDNSCache[ x ].ucCurrentIPAddress % xDNSCache[ x ].ucNumIPAddresses;
 8001a08:	f894 1029 	ldrb.w	r1, [r4, #41]	@ 0x29
							*pulIP = xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ];
 8001a0c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
								ucIndex = xDNSCache[ x ].ucCurrentIPAddress % xDNSCache[ x ].ucNumIPAddresses;
 8001a10:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
							*pulIP = xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ];
 8001a14:	eb05 0343 	add.w	r3, r5, r3, lsl #1
								ucIndex = xDNSCache[ x ].ucCurrentIPAddress % xDNSCache[ x ].ucNumIPAddresses;
 8001a18:	fbb1 f2f0 	udiv	r2, r1, r0
 8001a1c:	fb00 1212 	mls	r2, r0, r2, r1
								xDNSCache[ x ].ucCurrentIPAddress++;
 8001a20:	3101      	adds	r1, #1
								ulIPAddressIndex = ucIndex;
 8001a22:	f002 0203 	and.w	r2, r2, #3
								xDNSCache[ x ].ucCurrentIPAddress++;
 8001a26:	f884 1029 	strb.w	r1, [r4, #41]	@ 0x29
							*pulIP = xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ];
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8001a30:	f8c8 3000 	str.w	r3, [r8]
			if( ( xLookUp == 0 ) || ( *pulIP != 0UL ) )
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0a4      	beq.n	8001982 <prvProcessDNSCache.isra.0+0x6a>
				FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", ( xLookUp != 0 ) ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
 8001a38:	4918      	ldr	r1, [pc, #96]	@ (8001a9c <prvProcessDNSCache.isra.0+0x184>)
 8001a3a:	e797      	b.n	800196c <prvProcessDNSCache.isra.0+0x54>
							if( xDNSCache[ x ].ucNumIPAddresses < ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
 8001a3c:	232c      	movs	r3, #44	@ 0x2c
 8001a3e:	fb03 9305 	mla	r3, r3, r5, r9
 8001a42:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8001a46:	2a03      	cmp	r2, #3
 8001a48:	d918      	bls.n	8001a7c <prvProcessDNSCache.isra.0+0x164>
			uint32_t ulIPAddressIndex = 0;
 8001a4a:	465a      	mov	r2, fp
						xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ] = *pulIP;
 8001a4c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
				FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", ( xLookUp != 0 ) ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
 8001a50:	490d      	ldr	r1, [pc, #52]	@ (8001a88 <prvProcessDNSCache.isra.0+0x170>)
						xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ] = *pulIP;
 8001a52:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8001a56:	4413      	add	r3, r2
						xDNSCache[ x ].ulTTL = ulTTL;
 8001a58:	222c      	movs	r2, #44	@ 0x2c
 8001a5a:	fb02 9505 	mla	r5, r2, r5, r9
						xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ] = *pulIP;
 8001a5e:	f8d8 2000 	ldr.w	r2, [r8]
						xDNSCache[ x ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8001a62:	e9c5 a708 	strd	sl, r7, [r5, #32]
						xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ] = *pulIP;
 8001a66:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
			if( ( xLookUp == 0 ) || ( *pulIP != 0UL ) )
 8001a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8001a6e:	e77d      	b.n	800196c <prvProcessDNSCache.isra.0+0x54>
							xDNSCache[ x ].pcName[ 0 ] = ( char ) 0;
 8001a70:	7420      	strb	r0, [r4, #16]
			if( ( xLookUp == 0 ) || ( *pulIP != 0UL ) )
 8001a72:	f8d8 3000 	ldr.w	r3, [r8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1de      	bne.n	8001a38 <prvProcessDNSCache.isra.0+0x120>
 8001a7a:	e782      	b.n	8001982 <prvProcessDNSCache.isra.0+0x6a>
								xDNSCache[ x ].ucNumIPAddresses++;
 8001a7c:	1c51      	adds	r1, r2, #1
 8001a7e:	f883 1028 	strb.w	r1, [r3, #40]	@ 0x28
 8001a82:	e7e3      	b.n	8001a4c <prvProcessDNSCache.isra.0+0x134>
 8001a84:	10624dd3 	.word	0x10624dd3
 8001a88:	0800ecc8 	.word	0x0800ecc8
 8001a8c:	0800ed08 	.word	0x0800ed08
 8001a90:	0800ecd4 	.word	0x0800ecd4
 8001a94:	20000234 	.word	0x20000234
 8001a98:	20000258 	.word	0x20000258
 8001a9c:	0800eccc 	.word	0x0800eccc
 8001aa0:	20000238 	.word	0x20000238

08001aa4 <prvParseDNSReply>:
	{
 8001aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if( uxBufferLength < sizeof( DNSMessage_t ) )
 8001aa8:	290b      	cmp	r1, #11
	{
 8001aaa:	b08f      	sub	sp, #60	@ 0x3c
		uint32_t ulIPAddress = 0UL;
 8001aac:	f04f 0500 	mov.w	r5, #0
			char pcName[ ipconfigDNS_CACHE_NAME_LENGTH ] = "";
 8001ab0:	e9cd 5505 	strd	r5, r5, [sp, #20]
 8001ab4:	e9cd 5507 	strd	r5, r5, [sp, #28]
 8001ab8:	9509      	str	r5, [sp, #36]	@ 0x24
		if( uxBufferLength < sizeof( DNSMessage_t ) )
 8001aba:	d944      	bls.n	8001b46 <prvParseDNSReply+0xa2>
				pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 8001abc:	8883      	ldrh	r3, [r0, #4]
 8001abe:	4689      	mov	r9, r1
 8001ac0:	4680      	mov	r8, r0
 8001ac2:	4692      	mov	sl, r2
 8001ac4:	ba5f      	rev16	r7, r3
 8001ac6:	f100 060c 	add.w	r6, r0, #12
				uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 8001aca:	f1a1 040c 	sub.w	r4, r1, #12
				usQuestions = FreeRTOS_ntohs( pxDNSMessageHeader->usQuestions );
 8001ace:	b2bf      	uxth	r7, r7
				for( x = 0U; x < usQuestions; x++ )
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80a4 	beq.w	8001c1e <prvParseDNSReply+0x17a>
			char * pcRequestedName = NULL;
 8001ad6:	46a8      	mov	r8, r5
 8001ad8:	4683      	mov	fp, r0
							if( x == 0U )
 8001ada:	b3c5      	cbz	r5, 8001b4e <prvParseDNSReply+0xaa>
						uxResult = prvSkipNameField( pucByte,
 8001adc:	4621      	mov	r1, r4
 8001ade:	4630      	mov	r0, r6
 8001ae0:	f7ff fef2 	bl	80018c8 <prvSkipNameField>
						if( uxResult == 0U )
 8001ae4:	b378      	cbz	r0, 8001b46 <prvParseDNSReply+0xa2>
						pucByte = &( pucByte[ uxResult ] );
 8001ae6:	eb06 0c00 	add.w	ip, r6, r0
						uxSourceBytesRemaining -= uxResult;
 8001aea:	1a23      	subs	r3, r4, r0
					if( uxSourceBytesRemaining >= sizeof( uint32_t ) )
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	d92a      	bls.n	8001b46 <prvParseDNSReply+0xa2>
				for( x = 0U; x < usQuestions; x++ )
 8001af0:	3501      	adds	r5, #1
 8001af2:	f8bc 2000 	ldrh.w	r2, [ip]
								usClass = usChar2u16( &( pucByte[ 2 ] ) );
 8001af6:	f8bc 1002 	ldrh.w	r1, [ip, #2]
						pucByte = &( pucByte[ sizeof( uint32_t ) ] );
 8001afa:	f10c 0604 	add.w	r6, ip, #4
				for( x = 0U; x < usQuestions; x++ )
 8001afe:	42af      	cmp	r7, r5
						uxSourceBytesRemaining -= sizeof( uint32_t );
 8001b00:	f1a3 0404 	sub.w	r4, r3, #4
				for( x = 0U; x < usQuestions; x++ )
 8001b04:	d1e9      	bne.n	8001ada <prvParseDNSReply+0x36>
 8001b06:	465b      	mov	r3, fp
 8001b08:	46c3      	mov	fp, r8
				pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 8001b0a:	4698      	mov	r8, r3
 8001b0c:	88db      	ldrh	r3, [r3, #6]
				if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8001b0e:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8001b12:	ba5b      	rev16	r3, r3
 8001b14:	f400 6078 	and.w	r0, r0, #3968	@ 0xf80
				pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 8001b18:	f8a8 3006 	strh.w	r3, [r8, #6]
				if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	2880      	cmp	r0, #128	@ 0x80
 8001b20:	f000 8086 	beq.w	8001c30 <prvParseDNSReply+0x18c>
					else if( ( usQuestions != ( uint16_t ) 0U ) && ( usType == dnsTYPE_A_HOST ) && ( usClass == dnsCLASS_IN ) && ( pcRequestedName != NULL ) )
 8001b24:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8001b28:	d106      	bne.n	8001b38 <prvParseDNSReply+0x94>
 8001b2a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8001b2e:	d103      	bne.n	8001b38 <prvParseDNSReply+0x94>
 8001b30:	f1bb 0f00 	cmp.w	fp, #0
 8001b34:	f040 80b1 	bne.w	8001c9a <prvParseDNSReply+0x1f6>
		else if( xExpected == pdFALSE )
 8001b38:	f1ba 0f00 	cmp.w	sl, #0
 8001b3c:	d003      	beq.n	8001b46 <prvParseDNSReply+0xa2>
		return ulIPAddress;
 8001b3e:	9805      	ldr	r0, [sp, #20]
 8001b40:	e002      	b.n	8001b48 <prvParseDNSReply+0xa4>
				if( uxSourceLen > sizeof( uint16_t ) )
 8001b42:	2c02      	cmp	r4, #2
 8001b44:	d863      	bhi.n	8001c0e <prvParseDNSReply+0x16a>
			ulIPAddress = dnsPARSE_ERROR;
 8001b46:	2000      	movs	r0, #0
	}
 8001b48:	b00f      	add	sp, #60	@ 0x3c
 8001b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( uxSourceLen == ( size_t ) 0U )
 8001b4e:	2c00      	cmp	r4, #0
 8001b50:	d0f9      	beq.n	8001b46 <prvParseDNSReply+0xa2>
			else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8001b52:	7830      	ldrb	r0, [r6, #0]
 8001b54:	f000 03c0 	and.w	r3, r0, #192	@ 0xc0
 8001b58:	2bc0      	cmp	r3, #192	@ 0xc0
 8001b5a:	d0f2      	beq.n	8001b42 <prvParseDNSReply+0x9e>
				while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8001b5c:	2800      	cmp	r0, #0
 8001b5e:	d0f2      	beq.n	8001b46 <prvParseDNSReply+0xa2>
					if( ( uxIndex + uxCount ) > uxSourceLen )
 8001b60:	1c43      	adds	r3, r0, #1
 8001b62:	42a3      	cmp	r3, r4
 8001b64:	d8ef      	bhi.n	8001b46 <prvParseDNSReply+0xa2>
			size_t uxIndex = 0U;
 8001b66:	462b      	mov	r3, r5
					if( ( uxIndex + uxCount ) > uxSourceLen )
 8001b68:	46ac      	mov	ip, r5
					uxIndex++;
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001b70:	eb06 0e03 	add.w	lr, r6, r3
 8001b74:	4663      	mov	r3, ip
 8001b76:	f10d 0c18 	add.w	ip, sp, #24
 8001b7a:	4418      	add	r0, r3
 8001b7c:	4461      	add	r1, ip
 8001b7e:	e003      	b.n	8001b88 <prvParseDNSReply+0xe4>
					while( ( uxCount-- != 0U ) && ( uxIndex < uxSourceLen ) )
 8001b80:	42a2      	cmp	r2, r4
 8001b82:	d247      	bcs.n	8001c14 <prvParseDNSReply+0x170>
						if( uxNameLen >= uxDestLen )
 8001b84:	2b10      	cmp	r3, #16
 8001b86:	d027      	beq.n	8001bd8 <prvParseDNSReply+0x134>
						uxNameLen++;
 8001b88:	3301      	adds	r3, #1
						pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 8001b8a:	f81e cf01 	ldrb.w	ip, [lr, #1]!
						uxIndex++;
 8001b8e:	3201      	adds	r2, #1
					while( ( uxCount-- != 0U ) && ( uxIndex < uxSourceLen ) )
 8001b90:	4298      	cmp	r0, r3
						pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 8001b92:	f801 cf01 	strb.w	ip, [r1, #1]!
					while( ( uxCount-- != 0U ) && ( uxIndex < uxSourceLen ) )
 8001b96:	d1f3      	bne.n	8001b80 <prvParseDNSReply+0xdc>
				while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8001b98:	42a2      	cmp	r2, r4
 8001b9a:	d23b      	bcs.n	8001c14 <prvParseDNSReply+0x170>
 8001b9c:	9503      	str	r5, [sp, #12]
						pcName[ uxNameLen ] = '.';
 8001b9e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
					uxIndex++;
 8001ba2:	1c51      	adds	r1, r2, #1
						pcName[ uxNameLen ] = '.';
 8001ba4:	252e      	movs	r5, #46	@ 0x2e
						uxNameLen++;
 8001ba6:	f103 0c01 	add.w	ip, r3, #1
						pcName[ uxNameLen ] = '.';
 8001baa:	eb0d 0800 	add.w	r8, sp, r0
				while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8001bae:	5cb0      	ldrb	r0, [r6, r2]
					uxCount = ( size_t ) pucByte[ uxIndex ];
 8001bb0:	4686      	mov	lr, r0
				while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8001bb2:	b370      	cbz	r0, 8001c12 <prvParseDNSReply+0x16e>
						if( uxNameLen >= uxDestLen )
 8001bb4:	2b10      	cmp	r3, #16
					if( ( uxIndex + uxCount ) > uxSourceLen )
 8001bb6:	eb0e 0301 	add.w	r3, lr, r1
						if( uxNameLen >= uxDestLen )
 8001bba:	d0c4      	beq.n	8001b46 <prvParseDNSReply+0xa2>
					if( ( uxIndex + uxCount ) > uxSourceLen )
 8001bbc:	42a3      	cmp	r3, r4
						pcName[ uxNameLen ] = '.';
 8001bbe:	f808 5c20 	strb.w	r5, [r8, #-32]
					if( ( uxIndex + uxCount ) > uxSourceLen )
 8001bc2:	d8c0      	bhi.n	8001b46 <prvParseDNSReply+0xa2>
					while( ( uxCount-- != 0U ) && ( uxIndex < uxSourceLen ) )
 8001bc4:	42a1      	cmp	r1, r4
 8001bc6:	d20d      	bcs.n	8001be4 <prvParseDNSReply+0x140>
						if( uxNameLen >= uxDestLen )
 8001bc8:	f1bc 0f10 	cmp.w	ip, #16
 8001bcc:	d007      	beq.n	8001bde <prvParseDNSReply+0x13a>
 8001bce:	4613      	mov	r3, r2
 8001bd0:	4670      	mov	r0, lr
 8001bd2:	9d03      	ldr	r5, [sp, #12]
					uxIndex++;
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	e7c9      	b.n	8001b6c <prvParseDNSReply+0xc8>
							uxIndex = 0U;
 8001bd8:	2200      	movs	r2, #0
 8001bda:	9503      	str	r5, [sp, #12]
 8001bdc:	e7df      	b.n	8001b9e <prvParseDNSReply+0xfa>
 8001bde:	2200      	movs	r2, #0
						uxNameLen++;
 8001be0:	4663      	mov	r3, ip
 8001be2:	e7dc      	b.n	8001b9e <prvParseDNSReply+0xfa>
 8001be4:	9d03      	ldr	r5, [sp, #12]
					if( ( uxNameLen < uxDestLen ) && ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] == 0U ) )
 8001be6:	f1bc 0f0f 	cmp.w	ip, #15
 8001bea:	d8ac      	bhi.n	8001b46 <prvParseDNSReply+0xa2>
 8001bec:	428c      	cmp	r4, r1
 8001bee:	d9aa      	bls.n	8001b46 <prvParseDNSReply+0xa2>
 8001bf0:	5c73      	ldrb	r3, [r6, r1]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1a7      	bne.n	8001b46 <prvParseDNSReply+0xa2>
						pcName[ uxNameLen ] = '\0';
 8001bf6:	f10c 0238 	add.w	r2, ip, #56	@ 0x38
 8001bfa:	eb0d 0c02 	add.w	ip, sp, r2
 8001bfe:	f80c 3c20 	strb.w	r3, [ip, #-32]
						uxIndex++;
 8001c02:	1c4b      	adds	r3, r1, #1
							pucByte = &( pucByte[ uxResult ] );
 8001c04:	eb06 0c03 	add.w	ip, r6, r3
							uxSourceBytesRemaining -= uxResult;
 8001c08:	46b0      	mov	r8, r6
 8001c0a:	1ae3      	subs	r3, r4, r3
 8001c0c:	e76e      	b.n	8001aec <prvParseDNSReply+0x48>
					uxIndex += sizeof( uint16_t );
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e7f8      	b.n	8001c04 <prvParseDNSReply+0x160>
 8001c12:	9d03      	ldr	r5, [sp, #12]
				if( uxIndex > 0U )
 8001c14:	2a00      	cmp	r2, #0
 8001c16:	d096      	beq.n	8001b46 <prvParseDNSReply+0xa2>
 8001c18:	469c      	mov	ip, r3
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	e7e3      	b.n	8001be6 <prvParseDNSReply+0x142>
				if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8001c1e:	8842      	ldrh	r2, [r0, #2]
 8001c20:	88c3      	ldrh	r3, [r0, #6]
 8001c22:	f402 6278 	and.w	r2, r2, #3968	@ 0xf80
 8001c26:	ba5b      	rev16	r3, r3
 8001c28:	2a80      	cmp	r2, #128	@ 0x80
				pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 8001c2a:	80c3      	strh	r3, [r0, #6]
				if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	d183      	bne.n	8001b38 <prvParseDNSReply+0x94>
						if( usNumARecordsStored >= usCount )
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d081      	beq.n	8001b38 <prvParseDNSReply+0x94>
					uint16_t usNumARecordsStored = 0;
 8001c34:	2700      	movs	r7, #0
					for( x = 0U; x < pxDNSMessageHeader->usAnswers; x++ )
 8001c36:	463d      	mov	r5, r7
 8001c38:	e015      	b.n	8001c66 <prvParseDNSReply+0x1c2>
						else if( uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 8001c3a:	2c09      	cmp	r4, #9
 8001c3c:	d909      	bls.n	8001c52 <prvParseDNSReply+0x1ae>
							if( uxSourceBytesRemaining >= usDataLength )
 8001c3e:	8933      	ldrh	r3, [r6, #8]
							uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 8001c40:	3c0a      	subs	r4, #10
							if( uxSourceBytesRemaining >= usDataLength )
 8001c42:	ba5b      	rev16	r3, r3
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	42a3      	cmp	r3, r4
 8001c48:	f63f af7d 	bhi.w	8001b46 <prvParseDNSReply+0xa2>
								uxSourceBytesRemaining -= usDataLength;
 8001c4c:	1ae4      	subs	r4, r4, r3
								pucByte = &( pucByte[ usDataLength ] );
 8001c4e:	330a      	adds	r3, #10
 8001c50:	441e      	add	r6, r3
					for( x = 0U; x < pxDNSMessageHeader->usAnswers; x++ )
 8001c52:	3501      	adds	r5, #1
 8001c54:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8001c58:	b2ad      	uxth	r5, r5
						if( usNumARecordsStored >= usCount )
 8001c5a:	42ab      	cmp	r3, r5
 8001c5c:	f67f af6c 	bls.w	8001b38 <prvParseDNSReply+0x94>
 8001c60:	2f04      	cmp	r7, #4
 8001c62:	f43f af69 	beq.w	8001b38 <prvParseDNSReply+0x94>
						uxResult = prvSkipNameField( pucByte,
 8001c66:	4621      	mov	r1, r4
 8001c68:	4630      	mov	r0, r6
 8001c6a:	f7ff fe2d 	bl	80018c8 <prvSkipNameField>
						if( uxResult == 0U )
 8001c6e:	2800      	cmp	r0, #0
 8001c70:	f43f af69 	beq.w	8001b46 <prvParseDNSReply+0xa2>
						uxSourceBytesRemaining -= uxResult;
 8001c74:	1a24      	subs	r4, r4, r0
						pucByte = &( pucByte[ uxResult ] );
 8001c76:	4406      	add	r6, r0
						if( uxSourceBytesRemaining < sizeof( uint16_t ) )
 8001c78:	2c01      	cmp	r4, #1
 8001c7a:	f67f af64 	bls.w	8001b46 <prvParseDNSReply+0xa2>
						if( usType == ( uint16_t ) dnsTYPE_A_HOST )
 8001c7e:	8833      	ldrh	r3, [r6, #0]
							if( uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + uxAddressLength ) )
 8001c80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c84:	d1d9      	bne.n	8001c3a <prvParseDNSReply+0x196>
 8001c86:	2c0d      	cmp	r4, #13
 8001c88:	d9d7      	bls.n	8001c3a <prvParseDNSReply+0x196>
							if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) == ( uint16_t ) uxAddressLength )
 8001c8a:	8933      	ldrh	r3, [r6, #8]
 8001c8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c90:	f000 8088 	beq.w	8001da4 <prvParseDNSReply+0x300>
							pucByte = &( pucByte[ sizeof( DNSAnswerRecord_t ) + uxAddressLength ] );
 8001c94:	360e      	adds	r6, #14
							uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + uxAddressLength );
 8001c96:	3c0e      	subs	r4, #14
 8001c98:	e7db      	b.n	8001c52 <prvParseDNSReply+0x1ae>
						if( xApplicationDNSQueryHook( &( pcRequestedName[ 1 ] ) ) != pdFALSE )
 8001c9a:	f10b 0001 	add.w	r0, fp, #1
 8001c9e:	f7ff f941 	bl	8000f24 <xApplicationDNSQueryHook>
 8001ca2:	2800      	cmp	r0, #0
 8001ca4:	f43f af48 	beq.w	8001b38 <prvParseDNSReply+0x94>
							NetworkBufferDescriptor_t * pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 8001ca8:	4640      	mov	r0, r8
 8001caa:	f000 f941 	bl	8001f30 <pxUDPPayloadBuffer_to_NetworkBuffer>
							if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
 8001cae:	4a55      	ldr	r2, [pc, #340]	@ (8001e04 <prvParseDNSReply+0x360>)
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	2a00      	cmp	r2, #0
 8001cb4:	f47f af40 	bne.w	8001b38 <prvParseDNSReply+0x94>
 8001cb8:	2800      	cmp	r0, #0
 8001cba:	f43f af3d 	beq.w	8001b38 <prvParseDNSReply+0x94>
								size_t uxDataLength = uxBufferLength + sizeof( UDPHeader_t ) + sizeof( EthernetHeader_t ) + sizeof( IPHeader_t );
 8001cbe:	f109 022a 	add.w	r2, r9, #42	@ 0x2a
								pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, uxDataLength + sizeof( LLMNRAnswer_t ) );
 8001cc2:	f109 013a 	add.w	r1, r9, #58	@ 0x3a
								pxNetworkBuffer->xDataLength = uxDataLength;
 8001cc6:	61c2      	str	r2, [r0, #28]
								pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, uxDataLength + sizeof( LLMNRAnswer_t ) );
 8001cc8:	f000 f912 	bl	8001ef0 <pxDuplicateNetworkBufferWithDescriptor>
								if( pxNewBuffer != NULL )
 8001ccc:	4604      	mov	r4, r0
 8001cce:	2800      	cmp	r0, #0
 8001cd0:	f43f af32 	beq.w	8001b38 <prvParseDNSReply+0x94>
									pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 8001cd4:	6980      	ldr	r0, [r0, #24]
									xOffset1 = ( BaseType_t ) ( pucByte - pucUDPPayloadBuffer );
 8001cd6:	eba6 0208 	sub.w	r2, r6, r8
									xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) pcRequestedName ) - pucUDPPayloadBuffer );
 8001cda:	ebab 0b08 	sub.w	fp, fp, r8
									vSetField16( pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );                       /* Provide a single answer */
 8001cde:	f44f 7880 	mov.w	r8, #256	@ 0x100
									vSetField16( pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );                 /* No additional info */
 8001ce2:	2100      	movs	r1, #0
									pucByte = &( pucNewBuffer[ xOffset1 ] );
 8001ce4:	f102 0e2a 	add.w	lr, r2, #42	@ 0x2a
									vSetField16( pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );                       /* Provide a single answer */
 8001ce8:	f8c0 8030 	str.w	r8, [r0, #48]	@ 0x30
									vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE ); /* Set the response flag */
 8001cec:	2680      	movs	r6, #128	@ 0x80
								pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 8001cee:	f04f 08c0 	mov.w	r8, #192	@ 0xc0
									vSetField16( pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );                 /* No additional info */
 8001cf2:	8681      	strh	r1, [r0, #52]	@ 0x34
									vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE ); /* Set the response flag */
 8001cf4:	8586      	strh	r6, [r0, #44]	@ 0x2c
									pucByte = &( pucNewBuffer[ xOffset1 ] );
 8001cf6:	eb00 030e 	add.w	r3, r0, lr
								pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 8001cfa:	f800 800e 	strb.w	r8, [r0, lr]
									vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8001cfe:	2093      	movs	r0, #147	@ 0x93
									vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 8001d00:	4d41      	ldr	r5, [pc, #260]	@ (8001e08 <prvParseDNSReply+0x364>)
									vSetField16( pxAnswer, LLMNRAnswer_t, usType, dnsTYPE_A_HOST ); /* Type A: host */
 8001d02:	f04f 0c01 	mov.w	ip, #1
									vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8001d06:	7218      	strb	r0, [r3, #8]
 8001d08:	2704      	movs	r7, #4
 8001d0a:	20e0      	movs	r0, #224	@ 0xe0
								pxAnswer->ucNameOffset = ( uint8_t ) ( pcRequestedName - ( char * ) pucNewBuffer );
 8001d0c:	f883 b001 	strb.w	fp, [r3, #1]
									vSetField16( pxAnswer, LLMNRAnswer_t, usType, dnsTYPE_A_HOST ); /* Type A: host */
 8001d10:	7099      	strb	r1, [r3, #2]
								usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( pucByte - pucNewBuffer ) );
 8001d12:	b292      	uxth	r2, r2
									vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN );   /* 1: Class IN */
 8001d14:	7119      	strb	r1, [r3, #4]
									vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8001d16:	7199      	strb	r1, [r3, #6]
									vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, 4 );
 8001d18:	7299      	strb	r1, [r3, #10]
									vSetField16( pxAnswer, LLMNRAnswer_t, usType, dnsTYPE_A_HOST ); /* Type A: host */
 8001d1a:	f883 c003 	strb.w	ip, [r3, #3]
									vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN );   /* 1: Class IN */
 8001d1e:	f883 c005 	strb.w	ip, [r3, #5]
			pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8001d22:	f102 0c18 	add.w	ip, r2, #24
									vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8001d26:	71df      	strb	r7, [r3, #7]
									vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, 4 );
 8001d28:	72df      	strb	r7, [r3, #11]
									vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8001d2a:	7258      	strb	r0, [r3, #9]
									vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 8001d2c:	6968      	ldr	r0, [r5, #20]
 8001d2e:	f8df e0e8 	ldr.w	lr, [pc, #232]	@ 8001e18 <prvParseDNSReply+0x374>
 8001d32:	7318      	strb	r0, [r3, #12]
 8001d34:	6968      	ldr	r0, [r5, #20]
 8001d36:	ba00      	rev	r0, r0
 8001d38:	0c00      	lsrs	r0, r0, #16
 8001d3a:	7358      	strb	r0, [r3, #13]
 8001d3c:	6968      	ldr	r0, [r5, #20]
 8001d3e:	ba00      	rev	r0, r0
 8001d40:	0a00      	lsrs	r0, r0, #8
 8001d42:	7398      	strb	r0, [r3, #14]
								usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( pucByte - pucNewBuffer ) );
 8001d44:	f102 0010 	add.w	r0, r2, #16
									vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 8001d48:	7def      	ldrb	r7, [r5, #23]
 8001d4a:	73df      	strb	r7, [r3, #15]
								usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( pucByte - pucNewBuffer ) );
 8001d4c:	b207      	sxth	r7, r0
			pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 8001d4e:	b283      	uxth	r3, r0
 8001d50:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
			pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8001d54:	f107 0208 	add.w	r2, r7, #8
			pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8001d58:	696d      	ldr	r5, [r5, #20]
			pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 8001d5a:	331c      	adds	r3, #28
 8001d5c:	0200      	lsls	r0, r0, #8
			pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8001d5e:	0a12      	lsrs	r2, r2, #8
			uxDataLength = ( ( size_t ) lNetLength ) + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 8001d60:	372a      	adds	r7, #42	@ 0x2a
			pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 8001d62:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
			pxUDPPacket = ipCAST_PTR_TO_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8001d66:	69a3      	ldr	r3, [r4, #24]
			pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8001d68:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
			pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 8001d6c:	8218      	strh	r0, [r3, #16]
			pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8001d6e:	f8be 0000 	ldrh.w	r0, [lr]
			pxIPHeader->ucTimeToLive = ipconfigUDP_TIME_TO_LIVE;
 8001d72:	759e      	strb	r6, [r3, #22]
			pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8001d74:	f8d3 601a 	ldr.w	r6, [r3, #26]
			pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8001d78:	f8c3 501a 	str.w	r5, [r3, #26]
			pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8001d7c:	ba45      	rev16	r5, r0
			usPacketIdentifier++;
 8001d7e:	3001      	adds	r0, #1
			pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8001d80:	f8c3 601e 	str.w	r6, [r3, #30]
			pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8001d84:	825d      	strh	r5, [r3, #18]
			pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8001d86:	84da      	strh	r2, [r3, #38]	@ 0x26
			usPacketIdentifier++;
 8001d88:	f8ae 0000 	strh.w	r0, [lr]
			vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 8001d8c:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
 8001d8e:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8001d90:	8498      	strh	r0, [r3, #36]	@ 0x24
			vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8001d92:	4620      	mov	r0, r4
			vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 8001d94:	845a      	strh	r2, [r3, #34]	@ 0x22
			pxNetworkBuffer->xDataLength = uxDataLength;
 8001d96:	61e7      	str	r7, [r4, #28]
			vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8001d98:	f000 fa86 	bl	80022a8 <vReturnEthernetFrame>
									vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f004 fdf7 	bl	8006990 <vReleaseNetworkBufferAndDescriptor>
		if( xReturn == pdFALSE )
 8001da2:	e6c9      	b.n	8001b38 <prvParseDNSReply+0x94>
								( void ) memcpy( pvCopyDest, pvCopySource, uxAddressLength );
 8001da4:	f8d6 300a 	ldr.w	r3, [r6, #10]
 8001da8:	9305      	str	r3, [sp, #20]
										if( xDoStore != pdFALSE )
 8001daa:	f1ba 0f00 	cmp.w	sl, #0
 8001dae:	d113      	bne.n	8001dd8 <prvParseDNSReply+0x334>
										( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET, ( const void * ) &( ulIPAddress ), cBuffer, sizeof( cBuffer ) );
 8001db0:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 8001db4:	2310      	movs	r3, #16
 8001db6:	a905      	add	r1, sp, #20
 8001db8:	2002      	movs	r0, #2
 8001dba:	464a      	mov	r2, r9
 8001dbc:	f10d 0b18 	add.w	fp, sp, #24
 8001dc0:	f001 fad6 	bl	8003370 <FreeRTOS_inet_ntop>
										FreeRTOS_printf( ( "DNS[0x%04lX]: The answer to '%s' (%s) will%s be stored\n",
 8001dc4:	f8b8 1000 	ldrh.w	r1, [r8]
 8001dc8:	4b10      	ldr	r3, [pc, #64]	@ (8001e0c <prvParseDNSReply+0x368>)
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	465a      	mov	r2, fp
 8001dce:	464b      	mov	r3, r9
 8001dd0:	480f      	ldr	r0, [pc, #60]	@ (8001e10 <prvParseDNSReply+0x36c>)
 8001dd2:	f00b f833 	bl	800ce3c <lUDPLoggingPrintf>
 8001dd6:	e75d      	b.n	8001c94 <prvParseDNSReply+0x1f0>
											( void ) prvProcessDNSCache( pcName, &ulIPAddress, pxDNSAnswerRecord->ulTTL, pdFALSE );
 8001dd8:	f10d 0b18 	add.w	fp, sp, #24
										( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET, ( const void * ) &( ulIPAddress ), cBuffer, sizeof( cBuffer ) );
 8001ddc:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
											( void ) prvProcessDNSCache( pcName, &ulIPAddress, pxDNSAnswerRecord->ulTTL, pdFALSE );
 8001de0:	2300      	movs	r3, #0
 8001de2:	6872      	ldr	r2, [r6, #4]
 8001de4:	a905      	add	r1, sp, #20
 8001de6:	4658      	mov	r0, fp
											usNumARecordsStored++; /* Track # of A records stored */
 8001de8:	3701      	adds	r7, #1
											( void ) prvProcessDNSCache( pcName, &ulIPAddress, pxDNSAnswerRecord->ulTTL, pdFALSE );
 8001dea:	f7ff fd95 	bl	8001918 <prvProcessDNSCache.isra.0>
										( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET, ( const void * ) &( ulIPAddress ), cBuffer, sizeof( cBuffer ) );
 8001dee:	a905      	add	r1, sp, #20
 8001df0:	2310      	movs	r3, #16
 8001df2:	2002      	movs	r0, #2
 8001df4:	464a      	mov	r2, r9
 8001df6:	f001 fabb 	bl	8003370 <FreeRTOS_inet_ntop>
										FreeRTOS_printf( ( "DNS[0x%04lX]: The answer to '%s' (%s) will%s be stored\n",
 8001dfa:	f8b8 1000 	ldrh.w	r1, [r8]
											usNumARecordsStored++; /* Track # of A records stored */
 8001dfe:	b2bf      	uxth	r7, r7
										FreeRTOS_printf( ( "DNS[0x%04lX]: The answer to '%s' (%s) will%s be stored\n",
 8001e00:	4b04      	ldr	r3, [pc, #16]	@ (8001e14 <prvParseDNSReply+0x370>)
 8001e02:	e7e2      	b.n	8001dca <prvParseDNSReply+0x326>
 8001e04:	08010254 	.word	0x08010254
 8001e08:	20000014 	.word	0x20000014
 8001e0c:	0800ed30 	.word	0x0800ed30
 8001e10:	0800ed38 	.word	0x0800ed38
 8001e14:	0800eb4c 	.word	0x0800eb4c
 8001e18:	2000035c 	.word	0x2000035c

08001e1c <ulDNSHandlePacket>:
		if( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) )
 8001e1c:	69c1      	ldr	r1, [r0, #28]
 8001e1e:	2929      	cmp	r1, #41	@ 0x29
 8001e20:	d902      	bls.n	8001e28 <ulDNSHandlePacket+0xc>
			uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 8001e22:	392a      	subs	r1, #42	@ 0x2a
			if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 8001e24:	290b      	cmp	r1, #11
 8001e26:	d801      	bhi.n	8001e2c <ulDNSHandlePacket+0x10>
	}
 8001e28:	2000      	movs	r0, #0
 8001e2a:	4770      	bx	lr
				pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( UDPPacket_t ) ] );
 8001e2c:	6980      	ldr	r0, [r0, #24]
				( void ) prvParseDNSReply( pucPayLoadBuffer,
 8001e2e:	2200      	movs	r2, #0
	{
 8001e30:	b508      	push	{r3, lr}
				( void ) prvParseDNSReply( pucPayLoadBuffer,
 8001e32:	302a      	adds	r0, #42	@ 0x2a
 8001e34:	f7ff fe36 	bl	8001aa4 <prvParseDNSReply>
	}
 8001e38:	2000      	movs	r0, #0
 8001e3a:	bd08      	pop	{r3, pc}

08001e3c <prvIPTimerCheck>:
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
	BaseType_t xReturn;

	if( pxTimer->bActive == pdFALSE_UNSIGNED )
 8001e3c:	7803      	ldrb	r3, [r0, #0]
 8001e3e:	07d9      	lsls	r1, r3, #31
 8001e40:	d401      	bmi.n	8001e46 <prvIPTimerCheck+0xa>
	{
		/* The timer is not enabled. */
		xReturn = pdFALSE;
 8001e42:	2000      	movs	r0, #0
			xReturn = pdFALSE;
		}
	}

	return xReturn;
}
 8001e44:	4770      	bx	lr
		if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 8001e46:	079a      	lsls	r2, r3, #30
{
 8001e48:	b570      	push	{r4, r5, r6, lr}
 8001e4a:	4604      	mov	r4, r0
			if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 8001e4c:	f100 0604 	add.w	r6, r0, #4
		if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 8001e50:	d510      	bpl.n	8001e74 <prvIPTimerCheck+0x38>
			prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 8001e52:	6925      	ldr	r5, [r4, #16]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 8001e54:	4630      	mov	r0, r6
 8001e56:	f007 fba9 	bl	80095ac <vTaskSetTimeOutState>
	pxTimer->bActive = pdTRUE_UNSIGNED;
 8001e5a:	2001      	movs	r0, #1
	if( xTime == ( TickType_t ) 0 )
 8001e5c:	fab5 f385 	clz	r3, r5
	pxTimer->bActive = pdTRUE_UNSIGNED;
 8001e60:	7822      	ldrb	r2, [r4, #0]
	pxTimer->ulRemainingTime = xTime;
 8001e62:	60e5      	str	r5, [r4, #12]
	if( xTime == ( TickType_t ) 0 )
 8001e64:	095b      	lsrs	r3, r3, #5
	pxTimer->bActive = pdTRUE_UNSIGNED;
 8001e66:	f022 0203 	bic.w	r2, r2, #3
 8001e6a:	4083      	lsls	r3, r0
 8001e6c:	4303      	orrs	r3, r0
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	7023      	strb	r3, [r4, #0]
}
 8001e72:	bd70      	pop	{r4, r5, r6, pc}
			if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 8001e74:	f100 010c 	add.w	r1, r0, #12
 8001e78:	4630      	mov	r0, r6
 8001e7a:	f007 fbbf 	bl	80095fc <xTaskCheckForTimeOut>
 8001e7e:	b118      	cbz	r0, 8001e88 <prvIPTimerCheck+0x4c>
				pxTimer->bExpired = pdTRUE_UNSIGNED;
 8001e80:	7823      	ldrb	r3, [r4, #0]
 8001e82:	f043 0302 	orr.w	r3, r3, #2
 8001e86:	7023      	strb	r3, [r4, #0]
		if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 8001e88:	7823      	ldrb	r3, [r4, #0]
 8001e8a:	079b      	lsls	r3, r3, #30
 8001e8c:	d4e1      	bmi.n	8001e52 <prvIPTimerCheck+0x16>
		xReturn = pdFALSE;
 8001e8e:	2000      	movs	r0, #0
}
 8001e90:	bd70      	pop	{r4, r5, r6, pc}
 8001e92:	bf00      	nop

08001e94 <xIsCallingFromIPTask>:
{
 8001e94:	b508      	push	{r3, lr}
	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 8001e96:	f007 fbf9 	bl	800968c <xTaskGetCurrentTaskHandle>
 8001e9a:	4b03      	ldr	r3, [pc, #12]	@ (8001ea8 <xIsCallingFromIPTask+0x14>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
}
 8001e9e:	1a18      	subs	r0, r3, r0
 8001ea0:	fab0 f080 	clz	r0, r0
 8001ea4:	0940      	lsrs	r0, r0, #5
 8001ea6:	bd08      	pop	{r3, pc}
 8001ea8:	2000032c 	.word	0x2000032c

08001eac <FreeRTOS_NetworkDown>:
 * @brief Send a network down event to the IP-task. If it fails to post a message,
 *         the failure will be noted in the variable 'xNetworkDownEventPending'
 *         and later on a 'network-down' event, it will be executed.
 */
void FreeRTOS_NetworkDown( void )
{
 8001eac:	b508      	push	{r3, lr}
	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 8001eae:	f007 fbed 	bl	800968c <xTaskGetCurrentTaskHandle>
			if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
			{
				uxUseTimeout = ( TickType_t ) 0;
			}

			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	480a      	ldr	r0, [pc, #40]	@ (8001ee0 <FreeRTOS_NetworkDown+0x34>)
 8001eb6:	490b      	ldr	r1, [pc, #44]	@ (8001ee4 <FreeRTOS_NetworkDown+0x38>)
 8001eb8:	461a      	mov	r2, r3
 8001eba:	6800      	ldr	r0, [r0, #0]
 8001ebc:	f006 fc48 	bl	8008750 <xQueueGenericSend>

			if( xReturn == pdFAIL )
 8001ec0:	b128      	cbz	r0, 8001ece <FreeRTOS_NetworkDown+0x22>
	if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 8001ec2:	2801      	cmp	r0, #1
 8001ec4:	d107      	bne.n	8001ed6 <FreeRTOS_NetworkDown+0x2a>
		xNetworkDownEventPending = pdFALSE;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <FreeRTOS_NetworkDown+0x3c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
}
 8001ecc:	bd08      	pop	{r3, pc}
			{
				/* A message should have been sent to the IP task, but wasn't. */
				FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 8001ece:	4601      	mov	r1, r0
 8001ed0:	4806      	ldr	r0, [pc, #24]	@ (8001eec <FreeRTOS_NetworkDown+0x40>)
 8001ed2:	f00a ffb3 	bl	800ce3c <lUDPLoggingPrintf>
		xNetworkDownEventPending = pdTRUE;
 8001ed6:	4b04      	ldr	r3, [pc, #16]	@ (8001ee8 <FreeRTOS_NetworkDown+0x3c>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	601a      	str	r2, [r3, #0]
}
 8001edc:	bd08      	pop	{r3, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000360 	.word	0x20000360
 8001ee4:	0800ef54 	.word	0x0800ef54
 8001ee8:	20000330 	.word	0x20000330
 8001eec:	0800ed78 	.word	0x0800ed78

08001ef0 <pxDuplicateNetworkBufferWithDescriptor>:
{
 8001ef0:	b570      	push	{r4, r5, r6, lr}
 8001ef2:	460e      	mov	r6, r1
 8001ef4:	4605      	mov	r5, r0
	pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4630      	mov	r0, r6
 8001efa:	f004 fd0d 	bl	8006918 <pxGetNetworkBufferWithDescriptor>
	if( pxNewBuffer != NULL )
 8001efe:	4604      	mov	r4, r0
 8001f00:	b148      	cbz	r0, 8001f16 <pxDuplicateNetworkBufferWithDescriptor+0x26>
		pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 8001f02:	696a      	ldr	r2, [r5, #20]
		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 8001f04:	6a2b      	ldr	r3, [r5, #32]
		pxNewBuffer->xDataLength = uxNewLength;
 8001f06:	61c6      	str	r6, [r0, #28]
		pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 8001f08:	6142      	str	r2, [r0, #20]
		( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8001f0a:	e9d5 1206 	ldrd	r1, r2, [r5, #24]
		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 8001f0e:	6203      	str	r3, [r0, #32]
		( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8001f10:	6980      	ldr	r0, [r0, #24]
 8001f12:	f00b f955 	bl	800d1c0 <memcpy>
}
 8001f16:	4620      	mov	r0, r4
 8001f18:	bd70      	pop	{r4, r5, r6, pc}
 8001f1a:	bf00      	nop

08001f1c <pxPacketBuffer_to_NetworkBuffer>:
	if( pvBuffer == NULL )
 8001f1c:	b138      	cbz	r0, 8001f2e <pxPacketBuffer_to_NetworkBuffer+0x12>
		uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 8001f1e:	f1a0 030a 	sub.w	r3, r0, #10
		if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 8001f22:	079b      	lsls	r3, r3, #30
 8001f24:	d102      	bne.n	8001f2c <pxPacketBuffer_to_NetworkBuffer+0x10>
			pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 8001f26:	f850 0c0a 	ldr.w	r0, [r0, #-10]
 8001f2a:	4770      	bx	lr
		pxResult = NULL;
 8001f2c:	2000      	movs	r0, #0
	}
 8001f2e:	4770      	bx	lr

08001f30 <pxUDPPayloadBuffer_to_NetworkBuffer>:
	if( pvBuffer == NULL )
 8001f30:	b128      	cbz	r0, 8001f3e <pxUDPPayloadBuffer_to_NetworkBuffer+0xe>
		if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 8001f32:	0783      	lsls	r3, r0, #30
 8001f34:	d102      	bne.n	8001f3c <pxUDPPayloadBuffer_to_NetworkBuffer+0xc>
			pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 8001f36:	f850 0c34 	ldr.w	r0, [r0, #-52]
 8001f3a:	4770      	bx	lr
		pxResult = NULL;
 8001f3c:	2000      	movs	r0, #0
}
 8001f3e:	4770      	bx	lr

08001f40 <FreeRTOS_IPInit>:
{
 8001f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
	return xIPTaskInitialised;
 8001f44:	4c3f      	ldr	r4, [pc, #252]	@ (8002044 <FreeRTOS_IPInit+0x104>)
{
 8001f46:	b083      	sub	sp, #12
 8001f48:	4681      	mov	r9, r0
 8001f4a:	4688      	mov	r8, r1
	configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 8001f4c:	6824      	ldr	r4, [r4, #0]
{
 8001f4e:	4616      	mov	r6, r2
 8001f50:	461d      	mov	r5, r3
	configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 8001f52:	2c00      	cmp	r4, #0
 8001f54:	d164      	bne.n	8002020 <FreeRTOS_IPInit+0xe0>
	configASSERT( xNetworkEventQueue == NULL );
 8001f56:	4c3c      	ldr	r4, [pc, #240]	@ (8002048 <FreeRTOS_IPInit+0x108>)
 8001f58:	6823      	ldr	r3, [r4, #0]
 8001f5a:	b123      	cbz	r3, 8001f66 <FreeRTOS_IPInit+0x26>
 8001f5c:	f240 4179 	movw	r1, #1145	@ 0x479
 8001f60:	483a      	ldr	r0, [pc, #232]	@ (800204c <FreeRTOS_IPInit+0x10c>)
 8001f62:	f7fe ff77 	bl	8000e54 <vAssertCalled>
	configASSERT( xIPTaskHandle == NULL );
 8001f66:	4f3a      	ldr	r7, [pc, #232]	@ (8002050 <FreeRTOS_IPInit+0x110>)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	b123      	cbz	r3, 8001f76 <FreeRTOS_IPInit+0x36>
 8001f6c:	f240 417a 	movw	r1, #1146	@ 0x47a
 8001f70:	4836      	ldr	r0, [pc, #216]	@ (800204c <FreeRTOS_IPInit+0x10c>)
 8001f72:	f7fe ff6f 	bl	8000e54 <vAssertCalled>
	xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
 8001f76:	2200      	movs	r2, #0
 8001f78:	2108      	movs	r1, #8
 8001f7a:	2045      	movs	r0, #69	@ 0x45
 8001f7c:	f006 fba6 	bl	80086cc <xQueueGenericCreate>
 8001f80:	6020      	str	r0, [r4, #0]
	configASSERT( xNetworkEventQueue != NULL );
 8001f82:	2800      	cmp	r0, #0
 8001f84:	d052      	beq.n	800202c <FreeRTOS_IPInit+0xec>
				vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 8001f86:	4933      	ldr	r1, [pc, #204]	@ (8002054 <FreeRTOS_IPInit+0x114>)
 8001f88:	f006 fe94 	bl	8008cb4 <vQueueAddToRegistry>
		if( xNetworkBuffersInitialise() == pdPASS )
 8001f8c:	f004 fc8a 	bl	80068a4 <xNetworkBuffersInitialise>
 8001f90:	2801      	cmp	r0, #1
 8001f92:	d139      	bne.n	8002008 <FreeRTOS_IPInit+0xc8>
			xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 8001f94:	f8d9 e000 	ldr.w	lr, [r9]
 8001f98:	482f      	ldr	r0, [pc, #188]	@ (8002058 <FreeRTOS_IPInit+0x118>)
			( void ) memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 8001f9a:	4c30      	ldr	r4, [pc, #192]	@ (800205c <FreeRTOS_IPInit+0x11c>)
			xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 8001f9c:	f8c0 e000 	str.w	lr, [r0]
			( void ) memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 8001fa0:	4684      	mov	ip, r0
			xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 8001fa2:	f8d8 8000 	ldr.w	r8, [r8]
 8001fa6:	f8c0 8004 	str.w	r8, [r0, #4]
			xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddressing.ulNetMask ) | ~xNetworkAddressing.ulNetMask;
 8001faa:	ea6e 0908 	orn	r9, lr, r8
			xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 8001fae:	6836      	ldr	r6, [r6, #0]
 8001fb0:	6086      	str	r6, [r0, #8]
			xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 8001fb2:	682b      	ldr	r3, [r5, #0]
					*ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 8001fb4:	4d2a      	ldr	r5, [pc, #168]	@ (8002060 <FreeRTOS_IPInit+0x120>)
			xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 8001fb6:	60c3      	str	r3, [r0, #12]
			xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddressing.ulNetMask ) | ~xNetworkAddressing.ulNetMask;
 8001fb8:	f8c0 9010 	str.w	r9, [r0, #16]
					*ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 8001fbc:	f8c5 e014 	str.w	lr, [r5, #20]
			( void ) memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 8001fc0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fc6:	f8c4 9000 	str.w	r9, [r4]
					if( xNetworkAddressing.ulGatewayAddress != 0UL )
 8001fca:	b14e      	cbz	r6, 8001fe0 <FreeRTOS_IPInit+0xa0>
						configASSERT( ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) == ( xNetworkAddressing.ulGatewayAddress & xNetworkAddressing.ulNetMask ) );
 8001fcc:	ea8e 0e06 	eor.w	lr, lr, r6
 8001fd0:	ea1e 0f08 	tst.w	lr, r8
 8001fd4:	d004      	beq.n	8001fe0 <FreeRTOS_IPInit+0xa0>
 8001fd6:	f240 41b7 	movw	r1, #1207	@ 0x4b7
 8001fda:	481c      	ldr	r0, [pc, #112]	@ (800204c <FreeRTOS_IPInit+0x10c>)
 8001fdc:	f7fe ff3a 	bl	8000e54 <vAssertCalled>
			( void ) memcpy( ipLOCAL_MAC_ADDRESS, ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8001fe0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	6028      	str	r0, [r5, #0]
 8001fe6:	889b      	ldrh	r3, [r3, #4]
 8001fe8:	80ab      	strh	r3, [r5, #4]
			vNetworkSocketsInit();
 8001fea:	f000 fca3 	bl	8002934 <vNetworkSocketsInit>
			xReturn = xTaskCreate( prvIPTask,
 8001fee:	2004      	movs	r0, #4
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8001ff6:	491b      	ldr	r1, [pc, #108]	@ (8002064 <FreeRTOS_IPInit+0x124>)
 8001ff8:	e9cd 0700 	strd	r0, r7, [sp]
 8001ffc:	481a      	ldr	r0, [pc, #104]	@ (8002068 <FreeRTOS_IPInit+0x128>)
 8001ffe:	f006 feed 	bl	8008ddc <xTaskCreate>
}
 8002002:	b003      	add	sp, #12
 8002004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: xNetworkBuffersInitialise() failed\n" ) );
 8002008:	4818      	ldr	r0, [pc, #96]	@ (800206c <FreeRTOS_IPInit+0x12c>)
 800200a:	f00a ff17 	bl	800ce3c <lUDPLoggingPrintf>
			vQueueDelete( xNetworkEventQueue );
 800200e:	6820      	ldr	r0, [r4, #0]
 8002010:	f006 fe26 	bl	8008c60 <vQueueDelete>
			xNetworkEventQueue = NULL;
 8002014:	2300      	movs	r3, #0
 8002016:	6023      	str	r3, [r4, #0]
	BaseType_t xReturn = pdFALSE;
 8002018:	2000      	movs	r0, #0
}
 800201a:	b003      	add	sp, #12
 800201c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 8002020:	f44f 618f 	mov.w	r1, #1144	@ 0x478
 8002024:	4809      	ldr	r0, [pc, #36]	@ (800204c <FreeRTOS_IPInit+0x10c>)
 8002026:	f7fe ff15 	bl	8000e54 <vAssertCalled>
 800202a:	e794      	b.n	8001f56 <FreeRTOS_IPInit+0x16>
	configASSERT( xNetworkEventQueue != NULL );
 800202c:	4807      	ldr	r0, [pc, #28]	@ (800204c <FreeRTOS_IPInit+0x10c>)
 800202e:	f240 4191 	movw	r1, #1169	@ 0x491
 8002032:	f7fe ff0f 	bl	8000e54 <vAssertCalled>
	if( xNetworkEventQueue != NULL )
 8002036:	6820      	ldr	r0, [r4, #0]
 8002038:	2800      	cmp	r0, #0
 800203a:	d1a4      	bne.n	8001f86 <FreeRTOS_IPInit+0x46>
		FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: Network event queue could not be created\n" ) );
 800203c:	480c      	ldr	r0, [pc, #48]	@ (8002070 <FreeRTOS_IPInit+0x130>)
 800203e:	f00a fefd 	bl	800ce3c <lUDPLoggingPrintf>
 8002042:	e7e9      	b.n	8002018 <FreeRTOS_IPInit+0xd8>
 8002044:	200002f8 	.word	0x200002f8
 8002048:	20000360 	.word	0x20000360
 800204c:	0800eda4 	.word	0x0800eda4
 8002050:	2000032c 	.word	0x2000032c
 8002054:	0800edd8 	.word	0x0800edd8
 8002058:	20000348 	.word	0x20000348
 800205c:	20000334 	.word	0x20000334
 8002060:	20000014 	.word	0x20000014
 8002064:	0800ede0 	.word	0x0800ede0
 8002068:	0800232d 	.word	0x0800232d
 800206c:	0800ede8 	.word	0x0800ede8
 8002070:	0800ee20 	.word	0x0800ee20

08002074 <FreeRTOS_GetAddressConfiguration>:
	if( pulIPAddress != NULL )
 8002074:	b190      	cbz	r0, 800209c <FreeRTOS_GetAddressConfiguration+0x28>
{
 8002076:	b410      	push	{r4}
		*pulIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8002078:	4c0f      	ldr	r4, [pc, #60]	@ (80020b8 <FreeRTOS_GetAddressConfiguration+0x44>)
 800207a:	6964      	ldr	r4, [r4, #20]
 800207c:	6004      	str	r4, [r0, #0]
	if( pulNetMask != NULL )
 800207e:	b111      	cbz	r1, 8002086 <FreeRTOS_GetAddressConfiguration+0x12>
		*pulNetMask = xNetworkAddressing.ulNetMask;
 8002080:	480e      	ldr	r0, [pc, #56]	@ (80020bc <FreeRTOS_GetAddressConfiguration+0x48>)
 8002082:	6840      	ldr	r0, [r0, #4]
 8002084:	6008      	str	r0, [r1, #0]
	if( pulGatewayAddress != NULL )
 8002086:	b112      	cbz	r2, 800208e <FreeRTOS_GetAddressConfiguration+0x1a>
		*pulGatewayAddress = xNetworkAddressing.ulGatewayAddress;
 8002088:	490c      	ldr	r1, [pc, #48]	@ (80020bc <FreeRTOS_GetAddressConfiguration+0x48>)
 800208a:	6889      	ldr	r1, [r1, #8]
 800208c:	6011      	str	r1, [r2, #0]
	if( pulDNSServerAddress != NULL )
 800208e:	b113      	cbz	r3, 8002096 <FreeRTOS_GetAddressConfiguration+0x22>
		*pulDNSServerAddress = xNetworkAddressing.ulDNSServerAddress;
 8002090:	4a0a      	ldr	r2, [pc, #40]	@ (80020bc <FreeRTOS_GetAddressConfiguration+0x48>)
 8002092:	68d2      	ldr	r2, [r2, #12]
 8002094:	601a      	str	r2, [r3, #0]
}
 8002096:	f85d 4b04 	ldr.w	r4, [sp], #4
 800209a:	4770      	bx	lr
	if( pulNetMask != NULL )
 800209c:	b111      	cbz	r1, 80020a4 <FreeRTOS_GetAddressConfiguration+0x30>
		*pulNetMask = xNetworkAddressing.ulNetMask;
 800209e:	4807      	ldr	r0, [pc, #28]	@ (80020bc <FreeRTOS_GetAddressConfiguration+0x48>)
 80020a0:	6840      	ldr	r0, [r0, #4]
 80020a2:	6008      	str	r0, [r1, #0]
	if( pulGatewayAddress != NULL )
 80020a4:	b112      	cbz	r2, 80020ac <FreeRTOS_GetAddressConfiguration+0x38>
		*pulGatewayAddress = xNetworkAddressing.ulGatewayAddress;
 80020a6:	4905      	ldr	r1, [pc, #20]	@ (80020bc <FreeRTOS_GetAddressConfiguration+0x48>)
 80020a8:	6889      	ldr	r1, [r1, #8]
 80020aa:	6011      	str	r1, [r2, #0]
	if( pulDNSServerAddress != NULL )
 80020ac:	b11b      	cbz	r3, 80020b6 <FreeRTOS_GetAddressConfiguration+0x42>
		*pulDNSServerAddress = xNetworkAddressing.ulDNSServerAddress;
 80020ae:	4a03      	ldr	r2, [pc, #12]	@ (80020bc <FreeRTOS_GetAddressConfiguration+0x48>)
 80020b0:	68d2      	ldr	r2, [r2, #12]
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	4770      	bx	lr
 80020b6:	4770      	bx	lr
 80020b8:	20000014 	.word	0x20000014
 80020bc:	20000348 	.word	0x20000348

080020c0 <xSendEventToIPTask>:
	return xIPTaskInitialised;
 80020c0:	4b16      	ldr	r3, [pc, #88]	@ (800211c <xSendEventToIPTask+0x5c>)
	xEventMessage.pvData = ( void * ) NULL;
 80020c2:	2200      	movs	r2, #0
{
 80020c4:	b510      	push	{r4, lr}
	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 80020c6:	681b      	ldr	r3, [r3, #0]
{
 80020c8:	b082      	sub	sp, #8
	xEventMessage.pvData = ( void * ) NULL;
 80020ca:	9201      	str	r2, [sp, #4]
	xEventMessage.eEventType = eEvent;
 80020cc:	f88d 0000 	strb.w	r0, [sp]
	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 80020d0:	b963      	cbnz	r3, 80020ec <xSendEventToIPTask+0x2c>
 80020d2:	bb00      	cbnz	r0, 8002116 <xSendEventToIPTask+0x56>
 80020d4:	4c12      	ldr	r4, [pc, #72]	@ (8002120 <xSendEventToIPTask+0x60>)
	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 80020d6:	f007 fad9 	bl	800968c <xTaskGetCurrentTaskHandle>
			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 80020da:	2300      	movs	r3, #0
 80020dc:	4669      	mov	r1, sp
 80020de:	6820      	ldr	r0, [r4, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	f006 fb35 	bl	8008750 <xQueueGenericSend>
			if( xReturn == pdFAIL )
 80020e6:	b188      	cbz	r0, 800210c <xSendEventToIPTask+0x4c>
}
 80020e8:	b002      	add	sp, #8
 80020ea:	bd10      	pop	{r4, pc}
				if( pxEvent->eEventType == eTCPTimerEvent )
 80020ec:	2806      	cmp	r0, #6
 80020ee:	d1f1      	bne.n	80020d4 <xSendEventToIPTask+0x14>
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 80020f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002124 <xSendEventToIPTask+0x64>)
					if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 80020f2:	4c0b      	ldr	r4, [pc, #44]	@ (8002120 <xSendEventToIPTask+0x60>)
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 80020f4:	7813      	ldrb	r3, [r2, #0]
					if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 80020f6:	6820      	ldr	r0, [r4, #0]
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 80020f8:	f043 0302 	orr.w	r3, r3, #2
 80020fc:	7013      	strb	r3, [r2, #0]
					if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 80020fe:	f006 fd83 	bl	8008c08 <uxQueueMessagesWaiting>
 8002102:	2800      	cmp	r0, #0
 8002104:	d0e7      	beq.n	80020d6 <xSendEventToIPTask+0x16>
			xReturn = pdPASS;
 8002106:	2001      	movs	r0, #1
}
 8002108:	b002      	add	sp, #8
 800210a:	bd10      	pop	{r4, pc}
				FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 800210c:	f99d 1000 	ldrsb.w	r1, [sp]
 8002110:	4805      	ldr	r0, [pc, #20]	@ (8002128 <xSendEventToIPTask+0x68>)
 8002112:	f00a fe93 	bl	800ce3c <lUDPLoggingPrintf>
		xReturn = pdFAIL;
 8002116:	2000      	movs	r0, #0
}
 8002118:	b002      	add	sp, #8
 800211a:	bd10      	pop	{r4, pc}
 800211c:	200002f8 	.word	0x200002f8
 8002120:	20000360 	.word	0x20000360
 8002124:	200002fc 	.word	0x200002fc
 8002128:	0800ed78 	.word	0x0800ed78

0800212c <xSendEventStructToIPTask>:
	return xIPTaskInitialised;
 800212c:	4b17      	ldr	r3, [pc, #92]	@ (800218c <xSendEventStructToIPTask+0x60>)
{
 800212e:	b570      	push	{r4, r5, r6, lr}
 8002130:	4604      	mov	r4, r0
	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 8002132:	6818      	ldr	r0, [r3, #0]
{
 8002134:	460d      	mov	r5, r1
	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 8002136:	f994 3000 	ldrsb.w	r3, [r4]
 800213a:	b988      	cbnz	r0, 8002160 <xSendEventStructToIPTask+0x34>
 800213c:	bb23      	cbnz	r3, 8002188 <xSendEventStructToIPTask+0x5c>
 800213e:	4e14      	ldr	r6, [pc, #80]	@ (8002190 <xSendEventStructToIPTask+0x64>)
	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 8002140:	f007 faa4 	bl	800968c <xTaskGetCurrentTaskHandle>
 8002144:	4a13      	ldr	r2, [pc, #76]	@ (8002194 <xSendEventStructToIPTask+0x68>)
 8002146:	4603      	mov	r3, r0
			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 8002148:	4621      	mov	r1, r4
	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 800214a:	6812      	ldr	r2, [r2, #0]
			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 800214c:	6830      	ldr	r0, [r6, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	bf14      	ite	ne
 8002152:	462a      	movne	r2, r5
 8002154:	2200      	moveq	r2, #0
 8002156:	2300      	movs	r3, #0
 8002158:	f006 fafa 	bl	8008750 <xQueueGenericSend>
			if( xReturn == pdFAIL )
 800215c:	b178      	cbz	r0, 800217e <xSendEventStructToIPTask+0x52>
}
 800215e:	bd70      	pop	{r4, r5, r6, pc}
				if( pxEvent->eEventType == eTCPTimerEvent )
 8002160:	2b06      	cmp	r3, #6
 8002162:	d1ec      	bne.n	800213e <xSendEventStructToIPTask+0x12>
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8002164:	4a0c      	ldr	r2, [pc, #48]	@ (8002198 <xSendEventStructToIPTask+0x6c>)
					if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 8002166:	4e0a      	ldr	r6, [pc, #40]	@ (8002190 <xSendEventStructToIPTask+0x64>)
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8002168:	7813      	ldrb	r3, [r2, #0]
					if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 800216a:	6830      	ldr	r0, [r6, #0]
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	7013      	strb	r3, [r2, #0]
					if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 8002172:	f006 fd49 	bl	8008c08 <uxQueueMessagesWaiting>
 8002176:	2800      	cmp	r0, #0
 8002178:	d0e2      	beq.n	8002140 <xSendEventStructToIPTask+0x14>
			xReturn = pdPASS;
 800217a:	2001      	movs	r0, #1
}
 800217c:	bd70      	pop	{r4, r5, r6, pc}
				FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 800217e:	f994 1000 	ldrsb.w	r1, [r4]
 8002182:	4806      	ldr	r0, [pc, #24]	@ (800219c <xSendEventStructToIPTask+0x70>)
 8002184:	f00a fe5a 	bl	800ce3c <lUDPLoggingPrintf>
		xReturn = pdFAIL;
 8002188:	2000      	movs	r0, #0
}
 800218a:	bd70      	pop	{r4, r5, r6, pc}
 800218c:	200002f8 	.word	0x200002f8
 8002190:	20000360 	.word	0x20000360
 8002194:	2000032c 	.word	0x2000032c
 8002198:	200002fc 	.word	0x200002fc
 800219c:	0800ed78 	.word	0x0800ed78

080021a0 <prvProcessNetworkDownEvent>:
{
 80021a0:	b570      	push	{r4, r5, r6, lr}
	xARPTimer.bActive = pdFALSE_UNSIGNED;
 80021a2:	4c1c      	ldr	r4, [pc, #112]	@ (8002214 <prvProcessNetworkDownEvent+0x74>)
			if( xCallEventHook == pdTRUE )
 80021a4:	4d1c      	ldr	r5, [pc, #112]	@ (8002218 <prvProcessNetworkDownEvent+0x78>)
	xARPTimer.bActive = pdFALSE_UNSIGNED;
 80021a6:	7823      	ldrb	r3, [r4, #0]
			if( xCallEventHook == pdTRUE )
 80021a8:	6828      	ldr	r0, [r5, #0]
	xARPTimer.bActive = pdFALSE_UNSIGNED;
 80021aa:	f36f 0300 	bfc	r3, #0, #1
			if( xCallEventHook == pdTRUE )
 80021ae:	2801      	cmp	r0, #1
	xARPTimer.bActive = pdFALSE_UNSIGNED;
 80021b0:	7023      	strb	r3, [r4, #0]
			if( xCallEventHook == pdTRUE )
 80021b2:	d02b      	beq.n	800220c <prvProcessNetworkDownEvent+0x6c>
			xCallEventHook = pdTRUE;
 80021b4:	2601      	movs	r6, #1
 80021b6:	602e      	str	r6, [r5, #0]
	FreeRTOS_ClearARP();
 80021b8:	f7ff fb7e 	bl	80018b8 <FreeRTOS_ClearARP>
	if( xNetworkInterfaceInitialise() != pdPASS )
 80021bc:	f005 f86c 	bl	8007298 <xNetworkInterfaceInitialise>
 80021c0:	42b0      	cmp	r0, r6
 80021c2:	4603      	mov	r3, r0
 80021c4:	d00f      	beq.n	80021e6 <prvProcessNetworkDownEvent+0x46>
		vTaskDelay( ipINITIALISATION_RETRY_DELAY );
 80021c6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80021ca:	f007 f8a5 	bl	8009318 <vTaskDelay>
	if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 80021ce:	2100      	movs	r1, #0
 80021d0:	4812      	ldr	r0, [pc, #72]	@ (800221c <prvProcessNetworkDownEvent+0x7c>)
 80021d2:	f7ff ffab 	bl	800212c <xSendEventStructToIPTask>
 80021d6:	42b0      	cmp	r0, r6
		xNetworkDownEventPending = pdTRUE;
 80021d8:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <prvProcessNetworkDownEvent+0x80>)
	if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 80021da:	d001      	beq.n	80021e0 <prvProcessNetworkDownEvent+0x40>
		xNetworkDownEventPending = pdTRUE;
 80021dc:	601e      	str	r6, [r3, #0]
}
 80021de:	bd70      	pop	{r4, r5, r6, pc}
		xNetworkDownEventPending = pdFALSE;
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
}
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
	xNetworkUp = pdTRUE;
 80021e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002224 <prvProcessNetworkDownEvent+0x84>)
			vApplicationIPNetworkEventHook( eNetworkUp );
 80021e8:	2000      	movs	r0, #0
	pxTimer->ulReloadTime = xTime;
 80021ea:	f242 7510 	movw	r5, #10000	@ 0x2710
	xNetworkUp = pdTRUE;
 80021ee:	6013      	str	r3, [r2, #0]
			vApplicationIPNetworkEventHook( eNetworkUp );
 80021f0:	f7fe fe56 	bl	8000ea0 <vApplicationIPNetworkEventHook>
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 80021f4:	480c      	ldr	r0, [pc, #48]	@ (8002228 <prvProcessNetworkDownEvent+0x88>)
	pxTimer->ulReloadTime = xTime;
 80021f6:	6125      	str	r5, [r4, #16]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 80021f8:	f007 f9d8 	bl	80095ac <vTaskSetTimeOutState>
	pxTimer->bActive = pdTRUE_UNSIGNED;
 80021fc:	7823      	ldrb	r3, [r4, #0]
	pxTimer->ulRemainingTime = xTime;
 80021fe:	60e5      	str	r5, [r4, #12]
	pxTimer->bActive = pdTRUE_UNSIGNED;
 8002200:	f023 0303 	bic.w	r3, r3, #3
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	7023      	strb	r3, [r4, #0]
}
 800220a:	bd70      	pop	{r4, r5, r6, pc}
				vApplicationIPNetworkEventHook( eNetworkDown );
 800220c:	f7fe fe48 	bl	8000ea0 <vApplicationIPNetworkEventHook>
 8002210:	e7d0      	b.n	80021b4 <prvProcessNetworkDownEvent+0x14>
 8002212:	bf00      	nop
 8002214:	20000310 	.word	0x20000310
 8002218:	200002f0 	.word	0x200002f0
 800221c:	0800ef54 	.word	0x0800ef54
 8002220:	20000330 	.word	0x20000330
 8002224:	20000324 	.word	0x20000324
 8002228:	20000314 	.word	0x20000314

0800222c <eConsiderFrameForProcessing>:
{
 800222c:	b510      	push	{r4, lr}
 800222e:	4604      	mov	r4, r0
	if( memcmp( ipLOCAL_MAC_ADDRESS, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8002230:	2206      	movs	r2, #6
 8002232:	480e      	ldr	r0, [pc, #56]	@ (800226c <eConsiderFrameForProcessing+0x40>)
 8002234:	4621      	mov	r1, r4
 8002236:	f00b fd02 	bl	800dc3e <memcmp>
 800223a:	b128      	cbz	r0, 8002248 <eConsiderFrameForProcessing+0x1c>
	else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800223c:	2206      	movs	r2, #6
 800223e:	4621      	mov	r1, r4
 8002240:	480b      	ldr	r0, [pc, #44]	@ (8002270 <eConsiderFrameForProcessing+0x44>)
 8002242:	f00b fcfc 	bl	800dc3e <memcmp>
 8002246:	b940      	cbnz	r0, 800225a <eConsiderFrameForProcessing+0x2e>
				if( usFrameType <= 0x600U )
 8002248:	89a0      	ldrh	r0, [r4, #12]
 800224a:	ba40      	rev16	r0, r0
 800224c:	b280      	uxth	r0, r0
 800224e:	f5b0 6fc0 	cmp.w	r0, #1536	@ 0x600
 8002252:	bf94      	ite	ls
 8002254:	2000      	movls	r0, #0
 8002256:	2001      	movhi	r0, #1
}
 8002258:	bd10      	pop	{r4, pc}
		if( memcmp( xLLMNR_MacAdress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800225a:	2206      	movs	r2, #6
 800225c:	4621      	mov	r1, r4
 800225e:	4805      	ldr	r0, [pc, #20]	@ (8002274 <eConsiderFrameForProcessing+0x48>)
 8002260:	f00b fced 	bl	800dc3e <memcmp>
 8002264:	2800      	cmp	r0, #0
 8002266:	d0ef      	beq.n	8002248 <eConsiderFrameForProcessing+0x1c>
		eReturn = eReleaseBuffer;
 8002268:	2000      	movs	r0, #0
}
 800226a:	bd10      	pop	{r4, pc}
 800226c:	20000014 	.word	0x20000014
 8002270:	0800ef5c 	.word	0x0800ef5c
 8002274:	0800ed70 	.word	0x0800ed70

08002278 <xIsIPv4Multicast>:
	uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 8002278:	ba00      	rev	r0, r0
	if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 800227a:	f100 5000 	add.w	r0, r0, #536870912	@ 0x20000000
}
 800227e:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 8002282:	bf2c      	ite	cs
 8002284:	2000      	movcs	r0, #0
 8002286:	2001      	movcc	r0, #1
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop

0800228c <vSetMultiCastIPv4MacAddress>:
	uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800228c:	ba03      	rev	r3, r0
	pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 800228e:	225e      	movs	r2, #94	@ 0x5e
	pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 8002290:	f04f 0c01 	mov.w	ip, #1
	pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 8002294:	f3c0 2006 	ubfx	r0, r0, #8, #7
	pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 8002298:	708a      	strb	r2, [r1, #2]
	pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 800229a:	0a1a      	lsrs	r2, r3, #8
	pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 800229c:	f8a1 c000 	strh.w	ip, [r1]
	pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 80022a0:	70c8      	strb	r0, [r1, #3]
	pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 80022a2:	714b      	strb	r3, [r1, #5]
	pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 80022a4:	710a      	strb	r2, [r1, #4]
}
 80022a6:	4770      	bx	lr

080022a8 <vReturnEthernetFrame>:
{
 80022a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022aa:	460d      	mov	r5, r1
			if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80022ac:	69c1      	ldr	r1, [r0, #28]
{
 80022ae:	4604      	mov	r4, r0
			if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80022b0:	293b      	cmp	r1, #59	@ 0x3b
 80022b2:	d927      	bls.n	8002304 <vReturnEthernetFrame+0x5c>
		if( xReleaseAfterSend == pdFALSE )
 80022b4:	b9a5      	cbnz	r5, 80022e0 <vReturnEthernetFrame+0x38>
			pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 80022b6:	69e7      	ldr	r7, [r4, #28]
	pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 80022b8:	4629      	mov	r1, r5
 80022ba:	4638      	mov	r0, r7
 80022bc:	f004 fb2c 	bl	8006918 <pxGetNetworkBufferWithDescriptor>
	if( pxNewBuffer != NULL )
 80022c0:	4606      	mov	r6, r0
 80022c2:	b370      	cbz	r0, 8002322 <vReturnEthernetFrame+0x7a>
		pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 80022c4:	6962      	ldr	r2, [r4, #20]
				xReleaseAfterSend = pdTRUE;
 80022c6:	2501      	movs	r5, #1
		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 80022c8:	6a23      	ldr	r3, [r4, #32]
		pxNewBuffer->xDataLength = uxNewLength;
 80022ca:	61c7      	str	r7, [r0, #28]
		pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 80022cc:	6142      	str	r2, [r0, #20]
		( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 80022ce:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 80022d2:	6203      	str	r3, [r0, #32]
		( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 80022d4:	6980      	ldr	r0, [r0, #24]
 80022d6:	f00a ff73 	bl	800d1c0 <memcpy>
				pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 80022da:	69e3      	ldr	r3, [r4, #28]
 80022dc:	4634      	mov	r4, r6
 80022de:	61f3      	str	r3, [r6, #28]
		pxEthernetHeader = ipCAST_PTR_TO_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthernetBuffer );
 80022e0:	69a3      	ldr	r3, [r4, #24]
		( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 80022e2:	4629      	mov	r1, r5
		( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80022e4:	4a0f      	ldr	r2, [pc, #60]	@ (8002324 <vReturnEthernetFrame+0x7c>)
		( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 80022e6:	f8d3 0006 	ldr.w	r0, [r3, #6]
 80022ea:	6018      	str	r0, [r3, #0]
 80022ec:	8958      	ldrh	r0, [r3, #10]
 80022ee:	8098      	strh	r0, [r3, #4]
		( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80022f0:	6810      	ldr	r0, [r2, #0]
 80022f2:	f8c3 0006 	str.w	r0, [r3, #6]
		( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 80022f6:	4620      	mov	r0, r4
		( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80022f8:	8892      	ldrh	r2, [r2, #4]
 80022fa:	815a      	strh	r2, [r3, #10]
}
 80022fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 8002300:	f005 b88c 	b.w	800741c <xNetworkInterfaceOutput>
				FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );
 8002304:	4808      	ldr	r0, [pc, #32]	@ (8002328 <vReturnEthernetFrame+0x80>)
 8002306:	f00a fd99 	bl	800ce3c <lUDPLoggingPrintf>
				for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800230a:	69e3      	ldr	r3, [r4, #28]
 800230c:	2b3b      	cmp	r3, #59	@ 0x3b
 800230e:	dc05      	bgt.n	800231c <vReturnEthernetFrame+0x74>
					pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8002310:	2100      	movs	r1, #0
 8002312:	69a2      	ldr	r2, [r4, #24]
 8002314:	54d1      	strb	r1, [r2, r3]
				for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8002316:	3301      	adds	r3, #1
 8002318:	2b3c      	cmp	r3, #60	@ 0x3c
 800231a:	d1fa      	bne.n	8002312 <vReturnEthernetFrame+0x6a>
				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 800231c:	233c      	movs	r3, #60	@ 0x3c
 800231e:	61e3      	str	r3, [r4, #28]
 8002320:	e7c8      	b.n	80022b4 <vReturnEthernetFrame+0xc>
}
 8002322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002324:	20000014 	.word	0x20000014
 8002328:	0800ee5c 	.word	0x0800ee5c

0800232c <prvIPTask>:
{
 800232c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pxTimer->ulReloadTime = xTime;
 8002330:	4cb9      	ldr	r4, [pc, #740]	@ (8002618 <prvIPTask+0x2ec>)
{
 8002332:	b08b      	sub	sp, #44	@ 0x2c
	pxTimer->ulReloadTime = xTime;
 8002334:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
	FreeRTOS_NetworkDown();
 8002338:	f7ff fdb8 	bl	8001eac <FreeRTOS_NetworkDown>
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800233c:	1d20      	adds	r0, r4, #4
	pxTimer->bActive = pdTRUE_UNSIGNED;
 800233e:	46a3      	mov	fp, r4
	pxTimer->ulReloadTime = xTime;
 8002340:	6125      	str	r5, [r4, #16]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 8002342:	f007 f933 	bl	80095ac <vTaskSetTimeOutState>
	pxTimer->bActive = pdTRUE_UNSIGNED;
 8002346:	7823      	ldrb	r3, [r4, #0]
	xIPTaskInitialised = pdTRUE;
 8002348:	4ab4      	ldr	r2, [pc, #720]	@ (800261c <prvIPTask+0x2f0>)
	pxTimer->bActive = pdTRUE_UNSIGNED;
 800234a:	f023 0303 	bic.w	r3, r3, #3
	pxTimer->ulRemainingTime = xTime;
 800234e:	60e5      	str	r5, [r4, #12]
	pxTimer->bActive = pdTRUE_UNSIGNED;
 8002350:	4eb3      	ldr	r6, [pc, #716]	@ (8002620 <prvIPTask+0x2f4>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	4fb3      	ldr	r7, [pc, #716]	@ (8002624 <prvIPTask+0x2f8>)
 8002358:	4db3      	ldr	r5, [pc, #716]	@ (8002628 <prvIPTask+0x2fc>)
 800235a:	f80b 3b04 	strb.w	r3, [fp], #4
	xIPTaskInitialised = pdTRUE;
 800235e:	2301      	movs	r3, #1
 8002360:	f8df 92d8 	ldr.w	r9, [pc, #728]	@ 800263c <prvIPTask+0x310>
 8002364:	f8df 82d8 	ldr.w	r8, [pc, #728]	@ 8002640 <prvIPTask+0x314>
	FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 8002368:	48b0      	ldr	r0, [pc, #704]	@ (800262c <prvIPTask+0x300>)
	xIPTaskInitialised = pdTRUE;
 800236a:	6013      	str	r3, [r2, #0]
	FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 800236c:	f00a fd66 	bl	800ce3c <lUDPLoggingPrintf>
	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 8002370:	4628      	mov	r0, r5
 8002372:	f7ff fd63 	bl	8001e3c <prvIPTimerCheck>
 8002376:	2800      	cmp	r0, #0
 8002378:	d140      	bne.n	80023fc <prvIPTask+0xd0>
			if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 800237a:	6830      	ldr	r0, [r6, #0]
 800237c:	f006 fc44 	bl	8008c08 <uxQueueMessagesWaiting>
 8002380:	2800      	cmp	r0, #0
 8002382:	d148      	bne.n	8002416 <prvIPTask+0xea>
			xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 8002384:	4620      	mov	r0, r4
 8002386:	f7ff fd59 	bl	8001e3c <prvIPTimerCheck>
			if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 800238a:	683a      	ldr	r2, [r7, #0]
			xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800238c:	4603      	mov	r3, r0
				xWillSleep = pdTRUE;
 800238e:	2001      	movs	r0, #1
			if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 8002390:	2a00      	cmp	r2, #0
 8002392:	d045      	beq.n	8002420 <prvIPTask+0xf4>
				xNextTime = xTCPTimerCheck( xWillSleep );
 8002394:	f001 fa8a 	bl	80038ac <xTCPTimerCheck>
 8002398:	4682      	mov	sl, r0
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800239a:	4658      	mov	r0, fp
 800239c:	f007 f906 	bl	80095ac <vTaskSetTimeOutState>
	if( xTime == ( TickType_t ) 0 )
 80023a0:	faba f38a 	clz	r3, sl
	pxTimer->bActive = pdTRUE_UNSIGNED;
 80023a4:	7822      	ldrb	r2, [r4, #0]
	if( xTime == ( TickType_t ) 0 )
 80023a6:	095b      	lsrs	r3, r3, #5
	pxTimer->ulRemainingTime = xTime;
 80023a8:	f8c4 a00c 	str.w	sl, [r4, #12]
	pxTimer->bActive = pdTRUE_UNSIGNED;
 80023ac:	f022 0203 	bic.w	r2, r2, #3
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	4313      	orrs	r3, r2
 80023b8:	7023      	strb	r3, [r4, #0]
				xProcessedTCPMessage = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	603b      	str	r3, [r7, #0]
	if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 80023be:	782b      	ldrb	r3, [r5, #0]
 80023c0:	07db      	lsls	r3, r3, #31
 80023c2:	d534      	bpl.n	800242e <prvIPTask+0x102>
		if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
 80023c4:	68ea      	ldr	r2, [r5, #12]
 80023c6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d82f      	bhi.n	800242e <prvIPTask+0x102>
			xMaximumSleepTime = xARPTimer.ulReloadTime;
 80023ce:	692a      	ldr	r2, [r5, #16]
		if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 80023d0:	4552      	cmp	r2, sl
 80023d2:	a904      	add	r1, sp, #16
 80023d4:	6830      	ldr	r0, [r6, #0]
 80023d6:	bf28      	it	cs
 80023d8:	4652      	movcs	r2, sl
 80023da:	f006 fa95 	bl	8008908 <xQueueReceive>
 80023de:	bb48      	cbnz	r0, 8002434 <prvIPTask+0x108>
			xReceivedEvent.eEventType = eNoEvent;
 80023e0:	23ff      	movs	r3, #255	@ 0xff
 80023e2:	f88d 3010 	strb.w	r3, [sp, #16]
		if( xNetworkDownEventPending != pdFALSE )
 80023e6:	f8d8 3000 	ldr.w	r3, [r8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0c0      	beq.n	8002370 <prvIPTask+0x44>
			prvProcessNetworkDownEvent();
 80023ee:	f7ff fed7 	bl	80021a0 <prvProcessNetworkDownEvent>
	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 80023f2:	4628      	mov	r0, r5
 80023f4:	f7ff fd22 	bl	8001e3c <prvIPTimerCheck>
 80023f8:	2800      	cmp	r0, #0
 80023fa:	d0be      	beq.n	800237a <prvIPTask+0x4e>
	xEventMessage.pvData = ( void * ) NULL;
 80023fc:	2100      	movs	r1, #0
	xEventMessage.eEventType = eEvent;
 80023fe:	2303      	movs	r3, #3
	return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 8002400:	a808      	add	r0, sp, #32
	xEventMessage.pvData = ( void * ) NULL;
 8002402:	9109      	str	r1, [sp, #36]	@ 0x24
	xEventMessage.eEventType = eEvent;
 8002404:	f88d 3020 	strb.w	r3, [sp, #32]
	return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 8002408:	f7ff fe90 	bl	800212c <xSendEventStructToIPTask>
			if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 800240c:	6830      	ldr	r0, [r6, #0]
 800240e:	f006 fbfb 	bl	8008c08 <uxQueueMessagesWaiting>
 8002412:	2800      	cmp	r0, #0
 8002414:	d0b6      	beq.n	8002384 <prvIPTask+0x58>
			xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 8002416:	4620      	mov	r0, r4
 8002418:	f7ff fd10 	bl	8001e3c <prvIPTimerCheck>
 800241c:	4603      	mov	r3, r0
				xWillSleep = pdFALSE;
 800241e:	2000      	movs	r0, #0
			if( xCheckTCPSockets != pdFALSE )
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1b7      	bne.n	8002394 <prvIPTask+0x68>
	if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 8002424:	782b      	ldrb	r3, [r5, #0]
			if( xTCPTimer.ulRemainingTime < xMaximumSleepTime )
 8002426:	f8d4 a00c 	ldr.w	sl, [r4, #12]
	if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 800242a:	07db      	lsls	r3, r3, #31
 800242c:	d4ca      	bmi.n	80023c4 <prvIPTask+0x98>
	xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 800242e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002432:	e7cd      	b.n	80023d0 <prvIPTask+0xa4>
				if( xReceivedEvent.eEventType != eNoEvent )
 8002434:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 8002438:	3301      	adds	r3, #1
 800243a:	d0d4      	beq.n	80023e6 <prvIPTask+0xba>
					uxCount = uxQueueSpacesAvailable( xNetworkEventQueue );
 800243c:	6830      	ldr	r0, [r6, #0]
 800243e:	f006 fbfb 	bl	8008c38 <uxQueueSpacesAvailable>
					if( uxQueueMinimumSpace > uxCount )
 8002442:	f8d9 3000 	ldr.w	r3, [r9]
 8002446:	4283      	cmp	r3, r0
		switch( xReceivedEvent.eEventType )
 8002448:	f99d 3010 	ldrsb.w	r3, [sp, #16]
						uxQueueMinimumSpace = uxCount;
 800244c:	bf88      	it	hi
 800244e:	f8c9 0000 	strhi.w	r0, [r9]
		switch( xReceivedEvent.eEventType )
 8002452:	2b0b      	cmp	r3, #11
 8002454:	d8c7      	bhi.n	80023e6 <prvIPTask+0xba>
 8002456:	a201      	add	r2, pc, #4	@ (adr r2, 800245c <prvIPTask+0x130>)
 8002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245c:	08002531 	.word	0x08002531
 8002460:	08002503 	.word	0x08002503
 8002464:	08002543 	.word	0x08002543
 8002468:	0800253d 	.word	0x0800253d
 800246c:	0800254d 	.word	0x0800254d
 8002470:	080023e7 	.word	0x080023e7
 8002474:	080024f9 	.word	0x080024f9
 8002478:	080024d7 	.word	0x080024d7
 800247c:	080024d1 	.word	0x080024d1
 8002480:	0800249d 	.word	0x0800249d
 8002484:	08002495 	.word	0x08002495
 8002488:	0800248d 	.word	0x0800248d
							vSocketSelect( ipCAST_PTR_TO_TYPE_PTR( SocketSelect_t, xReceivedEvent.pvData ) );
 800248c:	9805      	ldr	r0, [sp, #20]
 800248e:	f001 fbcb 	bl	8003c28 <vSocketSelect>
				break;
 8002492:	e7a8      	b.n	80023e6 <prvIPTask+0xba>
				( void ) vSocketClose( ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData ) );
 8002494:	9805      	ldr	r0, [sp, #20]
 8002496:	f000 fcfb 	bl	8002e90 <vSocketClose>
				break;
 800249a:	e7a4      	b.n	80023e6 <prvIPTask+0xba>
				pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData );
 800249c:	f8dd a014 	ldr.w	sl, [sp, #20]
				xAddress.sin_addr = 0U; /* For the moment. */
 80024a0:	2300      	movs	r3, #0
				( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 80024a2:	a906      	add	r1, sp, #24
				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 80024a4:	f8ba 2024 	ldrh.w	r2, [sl, #36]	@ 0x24
				( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 80024a8:	4650      	mov	r0, sl
				pxSocket->usLocalPort = 0U;
 80024aa:	f8aa 3024 	strh.w	r3, [sl, #36]	@ 0x24
				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 80024ae:	ba52      	rev16	r2, r2
				xAddress.sin_addr = 0U; /* For the moment. */
 80024b0:	9307      	str	r3, [sp, #28]
				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 80024b2:	f8ad 201a 	strh.w	r2, [sp, #26]
				( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 80024b6:	2208      	movs	r2, #8
 80024b8:	f000 fc06 	bl	8002cc8 <vSocketBind>
				pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 80024bc:	f8da 3000 	ldr.w	r3, [sl]
				vSocketWakeUpUser( pxSocket );
 80024c0:	4650      	mov	r0, sl
				pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 80024c2:	f043 0310 	orr.w	r3, r3, #16
 80024c6:	f8ca 3000 	str.w	r3, [sl]
				vSocketWakeUpUser( pxSocket );
 80024ca:	f000 ff61 	bl	8003390 <vSocketWakeUpUser>
				break;
 80024ce:	e78a      	b.n	80023e6 <prvIPTask+0xba>
					vTCPNetStat();
 80024d0:	f001 fb0c 	bl	8003aec <vTCPNetStat>
				break;
 80024d4:	e787      	b.n	80023e6 <prvIPTask+0xba>
					pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData );
 80024d6:	f8dd a014 	ldr.w	sl, [sp, #20]
					if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 80024da:	4650      	mov	r0, sl
 80024dc:	f003 fb0c 	bl	8005af8 <xTCPCheckNewClient>
 80024e0:	2800      	cmp	r0, #0
 80024e2:	d080      	beq.n	80023e6 <prvIPTask+0xba>
						pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 80024e4:	f8da 3000 	ldr.w	r3, [sl]
						vSocketWakeUpUser( pxSocket );
 80024e8:	4650      	mov	r0, sl
						pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 80024ea:	f043 0304 	orr.w	r3, r3, #4
 80024ee:	f8ca 3000 	str.w	r3, [sl]
						vSocketWakeUpUser( pxSocket );
 80024f2:	f000 ff4d 	bl	8003390 <vSocketWakeUpUser>
 80024f6:	e776      	b.n	80023e6 <prvIPTask+0xba>
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 80024f8:	7823      	ldrb	r3, [r4, #0]
 80024fa:	f043 0302 	orr.w	r3, r3, #2
 80024fe:	7023      	strb	r3, [r4, #0]
				break;
 8002500:	e771      	b.n	80023e6 <prvIPTask+0xba>
				prvHandleEthernetPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData ) );
 8002502:	f8dd a014 	ldr.w	sl, [sp, #20]
	configASSERT( pxNetworkBuffer != NULL );
 8002506:	f1ba 0f00 	cmp.w	sl, #0
 800250a:	d03d      	beq.n	8002588 <prvIPTask+0x25c>
	if( pxNetworkBuffer->xDataLength >= sizeof( EthernetHeader_t ) )
 800250c:	f8da 201c 	ldr.w	r2, [sl, #28]
 8002510:	2a0d      	cmp	r2, #13
 8002512:	d909      	bls.n	8002528 <prvIPTask+0x1fc>
		pxEthernetHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthernetBuffer );
 8002514:	f8da 3018 	ldr.w	r3, [sl, #24]
			switch( pxEthernetHeader->usFrameType )
 8002518:	8999      	ldrh	r1, [r3, #12]
 800251a:	2908      	cmp	r1, #8
 800251c:	d01a      	beq.n	8002554 <prvIPTask+0x228>
 800251e:	f5b1 6fc1 	cmp.w	r1, #1544	@ 0x608
 8002522:	d101      	bne.n	8002528 <prvIPTask+0x1fc>
					if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 8002524:	2a29      	cmp	r2, #41	@ 0x29
 8002526:	d835      	bhi.n	8002594 <prvIPTask+0x268>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8002528:	4650      	mov	r0, sl
 800252a:	f004 fa31 	bl	8006990 <vReleaseNetworkBufferAndDescriptor>
			break;
 800252e:	e75a      	b.n	80023e6 <prvIPTask+0xba>
				xNetworkUp = pdFALSE;
 8002530:	2300      	movs	r3, #0
 8002532:	4a3f      	ldr	r2, [pc, #252]	@ (8002630 <prvIPTask+0x304>)
 8002534:	6013      	str	r3, [r2, #0]
				prvProcessNetworkDownEvent();
 8002536:	f7ff fe33 	bl	80021a0 <prvProcessNetworkDownEvent>
				break;
 800253a:	e754      	b.n	80023e6 <prvIPTask+0xba>
				vARPAgeCache();
 800253c:	f7ff f95e 	bl	80017fc <vARPAgeCache>
				break;
 8002540:	e751      	b.n	80023e6 <prvIPTask+0xba>
				   ( void ) xNetworkInterfaceOutput( pxDescriptor, pdTRUE );
 8002542:	2101      	movs	r1, #1
 8002544:	9805      	ldr	r0, [sp, #20]
 8002546:	f004 ff69 	bl	800741c <xNetworkInterfaceOutput>
			   break;
 800254a:	e74c      	b.n	80023e6 <prvIPTask+0xba>
				vProcessGeneratedUDPPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData ) );
 800254c:	9805      	ldr	r0, [sp, #20]
 800254e:	f004 f8c9 	bl	80066e4 <vProcessGeneratedUDPPacket>
				break;
 8002552:	e748      	b.n	80023e6 <prvIPTask+0xba>
					if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 8002554:	2a21      	cmp	r2, #33	@ 0x21
 8002556:	d9e7      	bls.n	8002528 <prvIPTask+0x1fc>
	size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 8002558:	f893 c00e 	ldrb.w	ip, [r3, #14]
	if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 800255c:	f1a2 000e 	sub.w	r0, r2, #14
	UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( uxLength & 0x0FU ) << 2 );
 8002560:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8002564:	f001 013c 	and.w	r1, r1, #60	@ 0x3c
	if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 8002568:	4281      	cmp	r1, r0
 800256a:	d8dd      	bhi.n	8002528 <prvIPTask+0x1fc>
 800256c:	2913      	cmp	r1, #19
 800256e:	d9db      	bls.n	8002528 <prvIPTask+0x1fc>
			if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 8002570:	f1ac 0c45 	sub.w	ip, ip, #69	@ 0x45
		ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8002574:	7dd8      	ldrb	r0, [r3, #23]
			if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 8002576:	f1bc 0f0a 	cmp.w	ip, #10
		ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800257a:	9001      	str	r0, [sp, #4]
			if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800257c:	d918      	bls.n	80025b0 <prvIPTask+0x284>
				DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800257e:	2102      	movs	r1, #2
			FreeRTOS_printf( ( "xCheckSizeFields: location %ld\n", xLocation ) );
 8002580:	482c      	ldr	r0, [pc, #176]	@ (8002634 <prvIPTask+0x308>)
 8002582:	f00a fc5b 	bl	800ce3c <lUDPLoggingPrintf>
		if( eReturn == eProcessBuffer )
 8002586:	e7cf      	b.n	8002528 <prvIPTask+0x1fc>
	configASSERT( pxNetworkBuffer != NULL );
 8002588:	f44f 61d3 	mov.w	r1, #1688	@ 0x698
 800258c:	482a      	ldr	r0, [pc, #168]	@ (8002638 <prvIPTask+0x30c>)
 800258e:	f7fe fc61 	bl	8000e54 <vAssertCalled>
 8002592:	e7bb      	b.n	800250c <prvIPTask+0x1e0>
						eReturned = eARPProcessPacket( ipCAST_PTR_TO_TYPE_PTR( ARPPacket_t, pxNetworkBuffer->pucEthernetBuffer ) );
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff f801 	bl	800159c <eARPProcessPacket>
	switch( eReturned )
 800259a:	2802      	cmp	r0, #2
 800259c:	d104      	bne.n	80025a8 <prvIPTask+0x27c>
			vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 800259e:	4650      	mov	r0, sl
 80025a0:	2101      	movs	r1, #1
 80025a2:	f7ff fe81 	bl	80022a8 <vReturnEthernetFrame>
			break;
 80025a6:	e71e      	b.n	80023e6 <prvIPTask+0xba>
	switch( eReturned )
 80025a8:	2803      	cmp	r0, #3
 80025aa:	f43f af1c 	beq.w	80023e6 <prvIPTask+0xba>
 80025ae:	e7bb      	b.n	8002528 <prvIPTask+0x1fc>
			if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 80025b0:	f101 000e 	add.w	r0, r1, #14
			uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 80025b4:	fa1f fc81 	uxth.w	ip, r1
			if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 80025b8:	4282      	cmp	r2, r0
 80025ba:	d317      	bcc.n	80025ec <prvIPTask+0x2c0>
			if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 80025bc:	8a18      	ldrh	r0, [r3, #16]
 80025be:	ba40      	rev16	r0, r0
 80025c0:	b280      	uxth	r0, r0
 80025c2:	f100 0e0e 	add.w	lr, r0, #14
 80025c6:	9002      	str	r0, [sp, #8]
 80025c8:	4572      	cmp	r2, lr
 80025ca:	d311      	bcc.n	80025f0 <prvIPTask+0x2c4>
			if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 80025cc:	9801      	ldr	r0, [sp, #4]
 80025ce:	2811      	cmp	r0, #17
 80025d0:	f000 80e6 	beq.w	80027a0 <prvIPTask+0x474>
			else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 80025d4:	9801      	ldr	r0, [sp, #4]
 80025d6:	2806      	cmp	r0, #6
 80025d8:	d00c      	beq.n	80025f4 <prvIPTask+0x2c8>
			else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 80025da:	9801      	ldr	r0, [sp, #4]
 80025dc:	f100 3eff 	add.w	lr, r0, #4294967295
 80025e0:	f1be 0f01 	cmp.w	lr, #1
 80025e4:	f240 80dc 	bls.w	80027a0 <prvIPTask+0x474>
				DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 80025e8:	2105      	movs	r1, #5
 80025ea:	e7c9      	b.n	8002580 <prvIPTask+0x254>
				DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 80025ec:	2103      	movs	r1, #3
 80025ee:	e7c7      	b.n	8002580 <prvIPTask+0x254>
				DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 80025f0:	2104      	movs	r1, #4
 80025f2:	e7c5      	b.n	8002580 <prvIPTask+0x254>
				uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 80025f4:	f10c 0e22 	add.w	lr, ip, #34	@ 0x22
			if( uxBufferLength < uxMinimumLength )
 80025f8:	4572      	cmp	r2, lr
 80025fa:	f0c0 80cf 	bcc.w	800279c <prvIPTask+0x470>
			uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 80025fe:	9802      	ldr	r0, [sp, #8]
 8002600:	eba0 000c 	sub.w	r0, r0, ip
			if( ( uxLength < ( ( size_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 8002604:	2807      	cmp	r0, #7
 8002606:	d905      	bls.n	8002614 <prvIPTask+0x2e8>
				( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 8002608:	f240 5edc 	movw	lr, #1500	@ 0x5dc
 800260c:	ebae 0e0c 	sub.w	lr, lr, ip
			if( ( uxLength < ( ( size_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 8002610:	4570      	cmp	r0, lr
 8002612:	d917      	bls.n	8002644 <prvIPTask+0x318>
				DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 8002614:	2107      	movs	r1, #7
 8002616:	e7b3      	b.n	8002580 <prvIPTask+0x254>
 8002618:	200002fc 	.word	0x200002fc
 800261c:	200002f8 	.word	0x200002f8
 8002620:	20000360 	.word	0x20000360
 8002624:	20000328 	.word	0x20000328
 8002628:	20000310 	.word	0x20000310
 800262c:	0800ee80 	.word	0x0800ee80
 8002630:	20000324 	.word	0x20000324
 8002634:	0800ee94 	.word	0x0800ee94
 8002638:	0800eda4 	.word	0x0800eda4
 800263c:	2000000c 	.word	0x2000000c
 8002640:	20000330 	.word	0x20000330
						if( pxIPPacket->xIPHeader.ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 8002644:	9801      	ldr	r0, [sp, #4]
 8002646:	2811      	cmp	r0, #17
 8002648:	d05a      	beq.n	8002700 <prvIPTask+0x3d4>
			if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 800264a:	2914      	cmp	r1, #20
 800264c:	d119      	bne.n	8002682 <prvIPTask+0x356>
					vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 800264e:	f8d3 101a 	ldr.w	r1, [r3, #26]
 8002652:	1d98      	adds	r0, r3, #6
 8002654:	9302      	str	r3, [sp, #8]
 8002656:	f7fe feeb 	bl	8001430 <vARPRefreshCacheEntry>
				switch( ucProtocol )
 800265a:	9a01      	ldr	r2, [sp, #4]
 800265c:	9b02      	ldr	r3, [sp, #8]
 800265e:	2a01      	cmp	r2, #1
 8002660:	d062      	beq.n	8002728 <prvIPTask+0x3fc>
 8002662:	2a06      	cmp	r2, #6
 8002664:	f47f af60 	bne.w	8002528 <prvIPTask+0x1fc>
								if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 8002668:	4650      	mov	r0, sl
 800266a:	f002 fae3 	bl	8004c34 <xProcessReceivedTCPPacket>
								xProcessedTCPMessage++;
 800266e:	683b      	ldr	r3, [r7, #0]
								if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 8002670:	2801      	cmp	r0, #1
								xProcessedTCPMessage++;
 8002672:	f103 0301 	add.w	r3, r3, #1
 8002676:	603b      	str	r3, [r7, #0]
								if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 8002678:	f47f af56 	bne.w	8002528 <prvIPTask+0x1fc>
 800267c:	e6b3      	b.n	80023e6 <prvIPTask+0xba>
			if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 800267e:	2914      	cmp	r1, #20
 8002680:	d019      	beq.n	80026b6 <prvIPTask+0x38a>
						const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 8002682:	f1a1 0014 	sub.w	r0, r1, #20
						const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 8002686:	3a22      	subs	r2, #34	@ 0x22
						const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 8002688:	310e      	adds	r1, #14
						( void ) memmove( pucTarget, pucSource, xMoveLen );
 800268a:	9303      	str	r3, [sp, #12]
 800268c:	1a12      	subs	r2, r2, r0
 800268e:	9002      	str	r0, [sp, #8]
 8002690:	4419      	add	r1, r3
 8002692:	f103 0022 	add.w	r0, r3, #34	@ 0x22
 8002696:	f00b fae2 	bl	800dc5e <memmove>
						pxNetworkBuffer->xDataLength -= optlen;
 800269a:	f8da 201c 	ldr.w	r2, [sl, #28]
 800269e:	9802      	ldr	r0, [sp, #8]
						pxIPHeader->ucVersionHeaderLength = ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 80026a0:	9b03      	ldr	r3, [sp, #12]
						pxNetworkBuffer->xDataLength -= optlen;
 80026a2:	1a12      	subs	r2, r2, r0
 80026a4:	f8ca 201c 	str.w	r2, [sl, #28]
						pxIPHeader->ucVersionHeaderLength = ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 80026a8:	2245      	movs	r2, #69	@ 0x45
 80026aa:	739a      	strb	r2, [r3, #14]
				if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 80026ac:	9a01      	ldr	r2, [sp, #4]
 80026ae:	2a11      	cmp	r2, #17
 80026b0:	d1cd      	bne.n	800264e <prvIPTask+0x322>
 80026b2:	e9da 3206 	ldrd	r3, r2, [sl, #24]
						   usLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength );
 80026b6:	8cd9      	ldrh	r1, [r3, #38]	@ 0x26
						   if( ( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) ) &&
 80026b8:	2a29      	cmp	r2, #41	@ 0x29
 80026ba:	ba49      	rev16	r1, r1
 80026bc:	b289      	uxth	r1, r1
 80026be:	f67f af33 	bls.w	8002528 <prvIPTask+0x1fc>
 80026c2:	2907      	cmp	r1, #7
 80026c4:	f67f af30 	bls.w	8002528 <prvIPTask+0x1fc>
							   uxPayloadSize_1 = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 80026c8:	3a2a      	subs	r2, #42	@ 0x2a
							   uxPayloadSize_2 = ( ( size_t ) usLength ) - sizeof( UDPHeader_t );
 80026ca:	f1a1 0008 	sub.w	r0, r1, #8
							   if( uxPayloadSize_1 > uxPayloadSize_2 )
 80026ce:	4282      	cmp	r2, r0
 80026d0:	d902      	bls.n	80026d8 <prvIPTask+0x3ac>
								   pxNetworkBuffer->xDataLength = uxPayloadSize_2 + sizeof( UDPPacket_t );
 80026d2:	3122      	adds	r1, #34	@ 0x22
 80026d4:	f8ca 101c 	str.w	r1, [sl, #28]
							   pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
 80026d8:	f893 1023 	ldrb.w	r1, [r3, #35]	@ 0x23
							   if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 80026dc:	4650      	mov	r0, sl
							   pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
 80026de:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80026e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026e6:	f8aa 2020 	strh.w	r2, [sl, #32]
							   pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 80026ea:	f8d3 201a 	ldr.w	r2, [r3, #26]
 80026ee:	f8ca 2014 	str.w	r2, [sl, #20]
							   if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 80026f2:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
 80026f4:	f004 f85c 	bl	80067b0 <xProcessReceivedUDPPacket>
 80026f8:	2801      	cmp	r0, #1
 80026fa:	f47f af15 	bne.w	8002528 <prvIPTask+0x1fc>
 80026fe:	e672      	b.n	80023e6 <prvIPTask+0xba>
							if( *pusChecksum == ( uint16_t ) 0U )
 8002700:	1858      	adds	r0, r3, r1
 8002702:	8a80      	ldrh	r0, [r0, #20]
 8002704:	2800      	cmp	r0, #0
 8002706:	d1ba      	bne.n	800267e <prvIPTask+0x352>
										if( xCount < 5 )
 8002708:	4a29      	ldr	r2, [pc, #164]	@ (80027b0 <prvIPTask+0x484>)
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	2a04      	cmp	r2, #4
 800270e:	f73f af0b 	bgt.w	8002528 <prvIPTask+0x1fc>
											FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %lxip without CRC dropped\n",
 8002712:	f8d3 101a 	ldr.w	r1, [r3, #26]
 8002716:	4827      	ldr	r0, [pc, #156]	@ (80027b4 <prvIPTask+0x488>)
 8002718:	ba09      	rev	r1, r1
 800271a:	f00a fb8f 	bl	800ce3c <lUDPLoggingPrintf>
											xCount++;
 800271e:	4a24      	ldr	r2, [pc, #144]	@ (80027b0 <prvIPTask+0x484>)
 8002720:	6813      	ldr	r3, [r2, #0]
 8002722:	3301      	adds	r3, #1
 8002724:	6013      	str	r3, [r2, #0]
		if( eReturn == eProcessBuffer )
 8002726:	e6ff      	b.n	8002528 <prvIPTask+0x1fc>
							if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 8002728:	f8da 201c 	ldr.w	r2, [sl, #28]
 800272c:	2a29      	cmp	r2, #41	@ 0x29
 800272e:	f67f aefb 	bls.w	8002528 <prvIPTask+0x1fc>
								if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 8002732:	f8d3 201e 	ldr.w	r2, [r3, #30]
 8002736:	4b20      	ldr	r3, [pc, #128]	@ (80027b8 <prvIPTask+0x48c>)
 8002738:	6959      	ldr	r1, [r3, #20]
								ICMPPacket_t * pxICMPPacket = ipCAST_PTR_TO_TYPE_PTR( ICMPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800273a:	f8da 3018 	ldr.w	r3, [sl, #24]
								if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 800273e:	428a      	cmp	r2, r1
 8002740:	f47f aef2 	bne.w	8002528 <prvIPTask+0x1fc>
		switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 8002744:	f893 0022 	ldrb.w	r0, [r3, #34]	@ 0x22
 8002748:	b1a8      	cbz	r0, 8002776 <prvIPTask+0x44a>
 800274a:	2808      	cmp	r0, #8
 800274c:	f47f aeec 	bne.w	8002528 <prvIPTask+0x1fc>
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8002750:	f8d3 101a 	ldr.w	r1, [r3, #26]
		pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8002754:	f8c3 201a 	str.w	r2, [r3, #26]
		pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 8002758:	2200      	movs	r2, #0
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800275a:	f8c3 101e 	str.w	r1, [r3, #30]
		if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFU - usRequest ) )
 800275e:	f64f 71f6 	movw	r1, #65526	@ 0xfff6
		pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 8002762:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFU - usRequest ) )
 8002766:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8002768:	428a      	cmp	r2, r1
			pxICMPHeader->usChecksum = pxICMPHeader->usChecksum + FreeRTOS_htons( usRequest + 1U );
 800276a:	bf8c      	ite	hi
 800276c:	f502 7284 	addhi.w	r2, r2, #264	@ 0x108
			pxICMPHeader->usChecksum = pxICMPHeader->usChecksum + FreeRTOS_htons( usRequest );
 8002770:	3208      	addls	r2, #8
 8002772:	849a      	strh	r2, [r3, #36]	@ 0x24
	switch( eReturned )
 8002774:	e713      	b.n	800259e <prvIPTask+0x272>
		usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMP_HEADER );
 8002776:	8a1a      	ldrh	r2, [r3, #16]
 8002778:	f103 0e29 	add.w	lr, r3, #41	@ 0x29
		for( usCount = 0; usCount < usDataLength; usCount++ )
 800277c:	4601      	mov	r1, r0
 800277e:	ba52      	rev16	r2, r2
		usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMP_HEADER );
 8002780:	3a1c      	subs	r2, #28
 8002782:	b292      	uxth	r2, r2
		for( usCount = 0; usCount < usDataLength; usCount++ )
 8002784:	e004      	b.n	8002790 <prvIPTask+0x464>
			if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 8002786:	f81e cf01 	ldrb.w	ip, [lr, #1]!
 800278a:	f1bc 0f78 	cmp.w	ip, #120	@ 0x78
 800278e:	d10a      	bne.n	80027a6 <prvIPTask+0x47a>
		for( usCount = 0; usCount < usDataLength; usCount++ )
 8002790:	fa1f fc81 	uxth.w	ip, r1
 8002794:	3101      	adds	r1, #1
 8002796:	4594      	cmp	ip, r2
 8002798:	d3f5      	bcc.n	8002786 <prvIPTask+0x45a>
 800279a:	e005      	b.n	80027a8 <prvIPTask+0x47c>
				DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800279c:	2106      	movs	r1, #6
 800279e:	e6ef      	b.n	8002580 <prvIPTask+0x254>
				uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMP_HEADER;
 80027a0:	f10c 0e16 	add.w	lr, ip, #22
 80027a4:	e728      	b.n	80025f8 <prvIPTask+0x2cc>
				eStatus = eInvalidData;
 80027a6:	2002      	movs	r0, #2
		vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 80027a8:	8cd9      	ldrh	r1, [r3, #38]	@ 0x26
 80027aa:	f7fe fbdf 	bl	8000f6c <vApplicationPingReplyHook>
	switch( eReturned )
 80027ae:	e6bb      	b.n	8002528 <prvIPTask+0x1fc>
 80027b0:	200002f4 	.word	0x200002f4
 80027b4:	0800eeb4 	.word	0x0800eeb4
 80027b8:	20000014 	.word	0x20000014

080027bc <vPrintResourceStats>:
	{
 80027bc:	b510      	push	{r4, lr}
		uxCurrentBufferCount = uxGetMinimumFreeNetworkBuffers();
 80027be:	f004 f90d 	bl	80069dc <uxGetMinimumFreeNetworkBuffers>
		if( uxLastMinBufferCount > uxCurrentBufferCount )
 80027c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002830 <vPrintResourceStats+0x74>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4282      	cmp	r2, r0
 80027c8:	d827      	bhi.n	800281a <vPrintResourceStats+0x5e>
		uxMinSize = xPortGetMinimumEverFreeHeapSize();
 80027ca:	f007 fc41 	bl	800a050 <xPortGetMinimumEverFreeHeapSize>
		if( uxMinLastSize == 0U )
 80027ce:	4a19      	ldr	r2, [pc, #100]	@ (8002834 <vPrintResourceStats+0x78>)
		uxMinSize = xPortGetMinimumEverFreeHeapSize();
 80027d0:	4604      	mov	r4, r0
		if( uxMinLastSize == 0U )
 80027d2:	6813      	ldr	r3, [r2, #0]
 80027d4:	b93b      	cbnz	r3, 80027e6 <vPrintResourceStats+0x2a>
			uxMinLastSize = uxMinSize;
 80027d6:	6010      	str	r0, [r2, #0]
 *
 * @return The minimum possible space in the IP task queue.
 */
	UBaseType_t uxGetMinimumIPQueueSpace( void )
	{
		return uxQueueMinimumSpace;
 80027d8:	4a17      	ldr	r2, [pc, #92]	@ (8002838 <vPrintResourceStats+0x7c>)
				if( uxLastMinQueueSpace != uxCurrentCount )
 80027da:	4b18      	ldr	r3, [pc, #96]	@ (800283c <vPrintResourceStats+0x80>)
		return uxQueueMinimumSpace;
 80027dc:	6811      	ldr	r1, [r2, #0]
				if( uxLastMinQueueSpace != uxCurrentCount )
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	428a      	cmp	r2, r1
 80027e2:	d114      	bne.n	800280e <vPrintResourceStats+0x52>
	}
 80027e4:	bd10      	pop	{r4, pc}
		else if( uxMinSize >= ipMONITOR_MAX_HEAP )
 80027e6:	f5b0 1f80 	cmp.w	r0, #1048576	@ 0x100000
 80027ea:	d2f5      	bcs.n	80027d8 <vPrintResourceStats+0x1c>
		else if( ( uxMinLastSize * ipMONITOR_PERCENTAGE_90 ) > ( uxMinSize * ipMONITOR_PERCENTAGE_100 ) )
 80027ec:	205a      	movs	r0, #90	@ 0x5a
 80027ee:	2164      	movs	r1, #100	@ 0x64
 80027f0:	fb00 f303 	mul.w	r3, r0, r3
 80027f4:	fb04 f101 	mul.w	r1, r4, r1
 80027f8:	428b      	cmp	r3, r1
 80027fa:	d9ed      	bls.n	80027d8 <vPrintResourceStats+0x1c>
			uxMinLastSize = uxMinSize;
 80027fc:	6014      	str	r4, [r2, #0]
			FreeRTOS_printf( ( "Heap: current %lu lowest %lu\n", ( printf_long_unsigned ) xPortGetFreeHeapSize(), ( printf_long_unsigned ) uxMinSize ) );
 80027fe:	f007 fc21 	bl	800a044 <xPortGetFreeHeapSize>
 8002802:	4622      	mov	r2, r4
 8002804:	4601      	mov	r1, r0
 8002806:	480e      	ldr	r0, [pc, #56]	@ (8002840 <vPrintResourceStats+0x84>)
 8002808:	f00a fb18 	bl	800ce3c <lUDPLoggingPrintf>
 800280c:	e7e4      	b.n	80027d8 <vPrintResourceStats+0x1c>
					FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
 800280e:	480d      	ldr	r0, [pc, #52]	@ (8002844 <vPrintResourceStats+0x88>)
					uxLastMinQueueSpace = uxCurrentCount;
 8002810:	6019      	str	r1, [r3, #0]
	}
 8002812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
 8002816:	f00a bb11 	b.w	800ce3c <lUDPLoggingPrintf>
			uxLastMinBufferCount = uxCurrentBufferCount;
 800281a:	4604      	mov	r4, r0
 800281c:	6018      	str	r0, [r3, #0]
			FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 800281e:	f004 f8e3 	bl	80069e8 <uxGetNumberOfFreeNetworkBuffers>
 8002822:	4601      	mov	r1, r0
 8002824:	4622      	mov	r2, r4
 8002826:	4808      	ldr	r0, [pc, #32]	@ (8002848 <vPrintResourceStats+0x8c>)
 8002828:	f00a fb08 	bl	800ce3c <lUDPLoggingPrintf>
 800282c:	e7cd      	b.n	80027ca <vPrintResourceStats+0xe>
 800282e:	bf00      	nop
 8002830:	20000008 	.word	0x20000008
 8002834:	200002ec 	.word	0x200002ec
 8002838:	2000000c 	.word	0x2000000c
 800283c:	200002e8 	.word	0x200002e8
 8002840:	0800ef18 	.word	0x0800ef18
 8002844:	0800ef38 	.word	0x0800ef38
 8002848:	0800eef4 	.word	0x0800eef4

0800284c <FreeRTOS_GetIPAddress>:
	return *ipLOCAL_IP_ADDRESS_POINTER;
 800284c:	4b01      	ldr	r3, [pc, #4]	@ (8002854 <FreeRTOS_GetIPAddress+0x8>)
}
 800284e:	6958      	ldr	r0, [r3, #20]
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20000014 	.word	0x20000014

08002858 <FreeRTOS_GetNetmask>:
	return xNetworkAddressing.ulNetMask;
 8002858:	4b01      	ldr	r3, [pc, #4]	@ (8002860 <FreeRTOS_GetNetmask+0x8>)
}
 800285a:	6858      	ldr	r0, [r3, #4]
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	20000348 	.word	0x20000348

08002864 <FreeRTOS_GetMACAddress>:
}
 8002864:	4800      	ldr	r0, [pc, #0]	@ (8002868 <FreeRTOS_GetMACAddress+0x4>)
 8002866:	4770      	bx	lr
 8002868:	20000014 	.word	0x20000014

0800286c <xIPIsNetworkTaskReady>:
	return xIPTaskInitialised;
 800286c:	4b01      	ldr	r3, [pc, #4]	@ (8002874 <xIPIsNetworkTaskReady+0x8>)
}
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	200002f8 	.word	0x200002f8

08002878 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
	static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
												BaseType_t xIsInputStream )
	{
 8002878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800287c:	4606      	mov	r6, r0
		size_t uxLength;
		size_t uxSize;

		/* Now that a stream is created, the maximum size is fixed before
		 * creation, it could still be changed with setsockopt(). */
		if( xIsInputStream != pdFALSE )
 800287e:	460f      	mov	r7, r1
 8002880:	b351      	cbz	r1, 80028d8 <prvTCPCreateStream+0x60>
		{
			uxLength = pxSocket->u.xTCP.uxRxStreamSize;

			if( pxSocket->u.xTCP.uxLittleSpace == 0UL )
 8002882:	6e43      	ldr	r3, [r0, #100]	@ 0x64
			uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 8002884:	6ec5      	ldr	r5, [r0, #108]	@ 0x6c
			if( pxSocket->u.xTCP.uxLittleSpace == 0UL )
 8002886:	b93b      	cbnz	r3, 8002898 <prvTCPCreateStream+0x20>
			{
				pxSocket->u.xTCP.uxLittleSpace = ( sock20_PERCENT * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 8002888:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800288c:	4a25      	ldr	r2, [pc, #148]	@ (8002924 <prvTCPCreateStream+0xac>)
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	6643      	str	r3, [r0, #100]	@ 0x64
			}

			if( pxSocket->u.xTCP.uxEnoughSpace == 0UL )
 8002898:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 800289a:	b32b      	cbz	r3, 80028e8 <prvTCPCreateStream+0x70>
		{
			uxLength = pxSocket->u.xTCP.uxTxStreamSize;
		}

		/* Add an extra 4 (or 8) bytes. */
		uxLength += sizeof( size_t );
 800289c:	3504      	adds	r5, #4

		/* And make the length a multiple of sizeof( size_t ). */
		uxLength &= ~( sizeof( size_t ) - 1U );
 800289e:	f025 0503 	bic.w	r5, r5, #3

		uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 80028a2:	f105 0814 	add.w	r8, r5, #20

		pxBuffer = ipCAST_PTR_TO_TYPE_PTR( StreamBuffer_t, pvPortMallocLarge( uxSize ) );
 80028a6:	4640      	mov	r0, r8
 80028a8:	f007 fb16 	bl	8009ed8 <pvPortMalloc>

		if( pxBuffer == NULL )
 80028ac:	4604      	mov	r4, r0
 80028ae:	b320      	cbz	r0, 80028fa <prvTCPCreateStream+0x82>
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
		}
		else
		{
			/* Clear the markers of the stream */
			( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 80028b0:	2200      	movs	r2, #0
			pxBuffer->LENGTH = ( size_t ) uxLength;

			if( xTCPWindowLoggingLevel != 0 )
 80028b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002928 <prvTCPCreateStream+0xb0>)
			pxBuffer->LENGTH = ( size_t ) uxLength;
 80028b4:	6105      	str	r5, [r0, #16]
			( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 80028b6:	6002      	str	r2, [r0, #0]
			if( xTCPWindowLoggingLevel != 0 )
 80028b8:	681b      	ldr	r3, [r3, #0]
			( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 80028ba:	6042      	str	r2, [r0, #4]
 80028bc:	6082      	str	r2, [r0, #8]
 80028be:	60c2      	str	r2, [r0, #12]
			if( xTCPWindowLoggingLevel != 0 )
 80028c0:	b163      	cbz	r3, 80028dc <prvTCPCreateStream+0x64>
			{
				FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', uxLength, uxSize ) );
 80028c2:	4643      	mov	r3, r8
 80028c4:	462a      	mov	r2, r5
 80028c6:	b33f      	cbz	r7, 8002918 <prvTCPCreateStream+0xa0>
 80028c8:	2152      	movs	r1, #82	@ 0x52
 80028ca:	4818      	ldr	r0, [pc, #96]	@ (800292c <prvTCPCreateStream+0xb4>)
 80028cc:	f00a fab6 	bl	800ce3c <lUDPLoggingPrintf>
				pxSocket->u.xTCP.txStream = pxBuffer;
			}
		}

		return pxBuffer;
	}
 80028d0:	4620      	mov	r0, r4
				pxSocket->u.xTCP.rxStream = pxBuffer;
 80028d2:	6774      	str	r4, [r6, #116]	@ 0x74
	}
 80028d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 80028d8:	6f05      	ldr	r5, [r0, #112]	@ 0x70
 80028da:	e7df      	b.n	800289c <prvTCPCreateStream+0x24>
			if( xIsInputStream != 0 )
 80028dc:	2f00      	cmp	r7, #0
 80028de:	d1f7      	bne.n	80028d0 <prvTCPCreateStream+0x58>
	}
 80028e0:	4620      	mov	r0, r4
				pxSocket->u.xTCP.txStream = pxBuffer;
 80028e2:	67b4      	str	r4, [r6, #120]	@ 0x78
	}
 80028e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pxSocket->u.xTCP.uxEnoughSpace = ( sock80_PERCENT * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 80028e8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80028ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002924 <prvTCPCreateStream+0xac>)
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	66b3      	str	r3, [r6, #104]	@ 0x68
 80028f8:	e7d0      	b.n	800289c <prvTCPCreateStream+0x24>
			FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
 80028fa:	480d      	ldr	r0, [pc, #52]	@ (8002930 <prvTCPCreateStream+0xb8>)
 80028fc:	f00a fa9e 	bl	800ce3c <lUDPLoggingPrintf>
			pxSocket->u.xTCP.bits.bMallocError = pdTRUE;
 8002900:	f896 3042 	ldrb.w	r3, [r6, #66]	@ 0x42
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8002904:	2108      	movs	r1, #8
 8002906:	4630      	mov	r0, r6
			pxSocket->u.xTCP.bits.bMallocError = pdTRUE;
 8002908:	430b      	orrs	r3, r1
 800290a:	f886 3042 	strb.w	r3, [r6, #66]	@ 0x42
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800290e:	f001 fcf5 	bl	80042fc <vTCPStateChange>
	}
 8002912:	4620      	mov	r0, r4
 8002914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', uxLength, uxSize ) );
 8002918:	2154      	movs	r1, #84	@ 0x54
 800291a:	4804      	ldr	r0, [pc, #16]	@ (800292c <prvTCPCreateStream+0xb4>)
 800291c:	f00a fa8e 	bl	800ce3c <lUDPLoggingPrintf>
			if( xIsInputStream != 0 )
 8002920:	e7de      	b.n	80028e0 <prvTCPCreateStream+0x68>
 8002922:	bf00      	nop
 8002924:	51eb851f 	.word	0x51eb851f
 8002928:	2000039c 	.word	0x2000039c
 800292c:	0800ef88 	.word	0x0800ef88
 8002930:	0800ef64 	.word	0x0800ef64

08002934 <vNetworkSocketsInit>:
	vListInitialise( &xBoundUDPSocketsList );
 8002934:	4804      	ldr	r0, [pc, #16]	@ (8002948 <vNetworkSocketsInit+0x14>)
{
 8002936:	b508      	push	{r3, lr}
	vListInitialise( &xBoundUDPSocketsList );
 8002938:	f005 fdb8 	bl	80084ac <vListInitialise>
			vListInitialise( &xBoundTCPSocketsList );
 800293c:	4803      	ldr	r0, [pc, #12]	@ (800294c <vNetworkSocketsInit+0x18>)
}
 800293e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			vListInitialise( &xBoundTCPSocketsList );
 8002942:	f005 bdb3 	b.w	80084ac <vListInitialise>
 8002946:	bf00      	nop
 8002948:	2000037c 	.word	0x2000037c
 800294c:	20000368 	.word	0x20000368

08002950 <FreeRTOS_socket>:
{
 8002950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002952:	4605      	mov	r5, r0
 8002954:	460e      	mov	r6, r1
 8002956:	4614      	mov	r4, r2
	if( xIPIsNetworkTaskReady() == pdFALSE )
 8002958:	f7ff ff88 	bl	800286c <xIPIsNetworkTaskReady>
 800295c:	b918      	cbnz	r0, 8002966 <FreeRTOS_socket+0x16>
		xReturn = FREERTOS_INVALID_SOCKET;
 800295e:	f04f 35ff 	mov.w	r5, #4294967295
}
 8002962:	4628      	mov	r0, r5
 8002964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		configASSERT( xDomain == FREERTOS_AF_INET );
 8002966:	2d02      	cmp	r5, #2
 8002968:	d004      	beq.n	8002974 <FreeRTOS_socket+0x24>
 800296a:	f240 1149 	movw	r1, #329	@ 0x149
 800296e:	483c      	ldr	r0, [pc, #240]	@ (8002a60 <FreeRTOS_socket+0x110>)
 8002970:	f7fe fa70 	bl	8000e54 <vAssertCalled>
		configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 8002974:	4b3b      	ldr	r3, [pc, #236]	@ (8002a64 <FreeRTOS_socket+0x114>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	3301      	adds	r3, #1
 800297a:	d004      	beq.n	8002986 <FreeRTOS_socket+0x36>
 800297c:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8002980:	4837      	ldr	r0, [pc, #220]	@ (8002a60 <FreeRTOS_socket+0x110>)
 8002982:	f7fe fa67 	bl	8000e54 <vAssertCalled>
				configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 8002986:	4b38      	ldr	r3, [pc, #224]	@ (8002a68 <FreeRTOS_socket+0x118>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	3301      	adds	r3, #1
 800298c:	d004      	beq.n	8002998 <FreeRTOS_socket+0x48>
 800298e:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8002992:	4833      	ldr	r0, [pc, #204]	@ (8002a60 <FreeRTOS_socket+0x110>)
 8002994:	f7fe fa5e 	bl	8000e54 <vAssertCalled>
		if( xProtocol == FREERTOS_IPPROTO_UDP )
 8002998:	2c11      	cmp	r4, #17
 800299a:	d00f      	beq.n	80029bc <FreeRTOS_socket+0x6c>
			else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800299c:	2c06      	cmp	r4, #6
 800299e:	d107      	bne.n	80029b0 <FreeRTOS_socket+0x60>
				if( xType != FREERTOS_SOCK_STREAM )
 80029a0:	2e01      	cmp	r6, #1
 80029a2:	d046      	beq.n	8002a32 <FreeRTOS_socket+0xe2>
					configASSERT( xReturn == pdPASS );
 80029a4:	f44f 71b3 	mov.w	r1, #358	@ 0x166
 80029a8:	482d      	ldr	r0, [pc, #180]	@ (8002a60 <FreeRTOS_socket+0x110>)
 80029aa:	f7fe fa53 	bl	8000e54 <vAssertCalled>
	return xReturn;
 80029ae:	e7d6      	b.n	800295e <FreeRTOS_socket+0xe>
			configASSERT( xReturn == pdPASS );
 80029b0:	f240 116f 	movw	r1, #367	@ 0x16f
 80029b4:	482a      	ldr	r0, [pc, #168]	@ (8002a60 <FreeRTOS_socket+0x110>)
 80029b6:	f7fe fa4d 	bl	8000e54 <vAssertCalled>
	return xReturn;
 80029ba:	e7d0      	b.n	800295e <FreeRTOS_socket+0xe>
			if( xType != FREERTOS_SOCK_DGRAM )
 80029bc:	2e02      	cmp	r6, #2
 80029be:	d005      	beq.n	80029cc <FreeRTOS_socket+0x7c>
				configASSERT( xReturn == pdPASS );
 80029c0:	f240 1159 	movw	r1, #345	@ 0x159
 80029c4:	4826      	ldr	r0, [pc, #152]	@ (8002a60 <FreeRTOS_socket+0x110>)
 80029c6:	f7fe fa45 	bl	8000e54 <vAssertCalled>
	return xReturn;
 80029ca:	e7c8      	b.n	800295e <FreeRTOS_socket+0xe>
			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 80029cc:	2754      	movs	r7, #84	@ 0x54
		pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, pvPortMallocSocket( uxSocketSize ) );
 80029ce:	4638      	mov	r0, r7
 80029d0:	f007 fa82 	bl	8009ed8 <pvPortMalloc>
		if( pxSocket == NULL )
 80029d4:	4605      	mov	r5, r0
 80029d6:	2800      	cmp	r0, #0
 80029d8:	d0c1      	beq.n	800295e <FreeRTOS_socket+0xe>
			xEventGroup = xEventGroupCreate();
 80029da:	f005 fc3b 	bl	8008254 <xEventGroupCreate>
			if( xEventGroup == NULL )
 80029de:	4606      	mov	r6, r0
 80029e0:	b350      	cbz	r0, 8002a38 <FreeRTOS_socket+0xe8>
				( void ) memset( pxSocket, 0, uxSocketSize );
 80029e2:	463a      	mov	r2, r7
 80029e4:	2100      	movs	r1, #0
 80029e6:	4628      	mov	r0, r5
				vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 80029e8:	f105 0708 	add.w	r7, r5, #8
				( void ) memset( pxSocket, 0, uxSocketSize );
 80029ec:	f00a fcbc 	bl	800d368 <memset>
				if( xProtocol == FREERTOS_IPPROTO_UDP )
 80029f0:	2c11      	cmp	r4, #17
				pxSocket->xEventGroup = xEventGroup;
 80029f2:	606e      	str	r6, [r5, #4]
				if( xProtocol == FREERTOS_IPPROTO_UDP )
 80029f4:	d024      	beq.n	8002a40 <FreeRTOS_socket+0xf0>
				vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 80029f6:	4638      	mov	r0, r7
 80029f8:	f005 fd64 	bl	80084c4 <vListInitialiseItem>
				pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 80029fc:	f241 3388 	movw	r3, #5000	@ 0x1388
				pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 8002a00:	2202      	movs	r2, #2
						if( xProtocol == FREERTOS_IPPROTO_TCP )
 8002a02:	2c06      	cmp	r4, #6
				listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ipPOINTER_CAST( void *, pxSocket ) );
 8002a04:	616d      	str	r5, [r5, #20]
				pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 8002a06:	f885 2026 	strb.w	r2, [r5, #38]	@ 0x26
				pxSocket->ucProtocol = ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 8002a0a:	f885 4027 	strb.w	r4, [r5, #39]	@ 0x27
				pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 8002a0e:	e9c5 3307 	strd	r3, r3, [r5, #28]
						if( xProtocol == FREERTOS_IPPROTO_TCP )
 8002a12:	d1a6      	bne.n	8002962 <FreeRTOS_socket+0x12>
									pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 8002a14:	2301      	movs	r3, #1
							pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ipconfigTCP_MSS;
 8002a16:	4815      	ldr	r0, [pc, #84]	@ (8002a6c <FreeRTOS_socket+0x11c>)
							pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 8002a18:	f241 111c 	movw	r1, #4380	@ 0x111c
							pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 8002a1c:	f640 3268 	movw	r2, #2920	@ 0xb68
							pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ipconfigTCP_MSS;
 8002a20:	f8c5 004a 	str.w	r0, [r5, #74]	@ 0x4a
									pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 8002a24:	f8c5 30dc 	str.w	r3, [r5, #220]	@ 0xdc
									pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 8002a28:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
							pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 8002a2c:	e9c5 121b 	strd	r1, r2, [r5, #108]	@ 0x6c
									pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 8002a30:	e797      	b.n	8002962 <FreeRTOS_socket+0x12>
				*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 8002a32:	f44f 77d4 	mov.w	r7, #424	@ 0x1a8
 8002a36:	e7ca      	b.n	80029ce <FreeRTOS_socket+0x7e>
				vPortFreeSocket( pxSocket );
 8002a38:	4628      	mov	r0, r5
 8002a3a:	f007 fab9 	bl	8009fb0 <vPortFree>
				iptraceFAILED_TO_CREATE_EVENT_GROUP();
 8002a3e:	e78e      	b.n	800295e <FreeRTOS_socket+0xe>
					vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 8002a40:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 8002a44:	f005 fd32 	bl	80084ac <vListInitialise>
				vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 8002a48:	4638      	mov	r0, r7
 8002a4a:	f005 fd3b 	bl	80084c4 <vListInitialiseItem>
				pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 8002a4e:	f241 3388 	movw	r3, #5000	@ 0x1388
				pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 8002a52:	f241 1202 	movw	r2, #4354	@ 0x1102
				listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ipPOINTER_CAST( void *, pxSocket ) );
 8002a56:	616d      	str	r5, [r5, #20]
				pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 8002a58:	e9c5 3307 	strd	r3, r3, [r5, #28]
				pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 8002a5c:	84ea      	strh	r2, [r5, #38]	@ 0x26
						if( xProtocol == FREERTOS_IPPROTO_TCP )
 8002a5e:	e780      	b.n	8002962 <FreeRTOS_socket+0x12>
 8002a60:	0800efc4 	.word	0x0800efc4
 8002a64:	2000037c 	.word	0x2000037c
 8002a68:	20000368 	.word	0x20000368
 8002a6c:	05b405b4 	.word	0x05b405b4

08002a70 <FreeRTOS_recvfrom>:
{
 8002a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a74:	4604      	mov	r4, r0
 8002a76:	4692      	mov	sl, r2
 8002a78:	b086      	sub	sp, #24
	TickType_t xRemainingTime = ( TickType_t ) 0; /* Obsolete assignment, but some compilers output a warning if its not done. */
 8002a7a:	2000      	movs	r0, #0
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 8002a7c:	1e62      	subs	r2, r4, #1
	TickType_t xRemainingTime = ( TickType_t ) 0; /* Obsolete assignment, but some compilers output a warning if its not done. */
 8002a7e:	9003      	str	r0, [sp, #12]
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 8002a80:	3203      	adds	r2, #3
 8002a82:	d806      	bhi.n	8002a92 <FreeRTOS_recvfrom+0x22>
	else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 8002a84:	461d      	mov	r5, r3
 8002a86:	69a3      	ldr	r3, [r4, #24]
 8002a88:	b11b      	cbz	r3, 8002a92 <FreeRTOS_recvfrom+0x22>
	else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 8002a8a:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 8002a8e:	2b11      	cmp	r3, #17
 8002a90:	d005      	beq.n	8002a9e <FreeRTOS_recvfrom+0x2e>
		lReturn = -pdFREERTOS_ERRNO_EINVAL;
 8002a92:	f06f 0415 	mvn.w	r4, #21
}
 8002a96:	4620      	mov	r0, r4
 8002a98:	b006      	add	sp, #24
 8002a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 8002a9e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
		while( lPacketCount == 0 )
 8002aa0:	460e      	mov	r6, r1
 8002aa2:	b9cb      	cbnz	r3, 8002ad8 <FreeRTOS_recvfrom+0x68>
				xRemainingTime = pxSocket->xReceiveBlockTime;
 8002aa4:	69e3      	ldr	r3, [r4, #28]
 8002aa6:	9303      	str	r3, [sp, #12]
				if( xRemainingTime == ( TickType_t ) 0 )
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d033      	beq.n	8002b14 <FreeRTOS_recvfrom+0xa4>
				if( ( ( ( UBaseType_t ) xFlags ) & ( ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) ) != 0U )
 8002aac:	06ea      	lsls	r2, r5, #27
 8002aae:	d431      	bmi.n	8002b14 <FreeRTOS_recvfrom+0xa4>
				vTaskSetTimeOutState( &xTimeOut );
 8002ab0:	a804      	add	r0, sp, #16
 8002ab2:	f006 fd7b 	bl	80095ac <vTaskSetTimeOutState>
 8002ab6:	e002      	b.n	8002abe <FreeRTOS_recvfrom+0x4e>
			if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 8002ab8:	f006 fda0 	bl	80095fc <xTaskCheckForTimeOut>
 8002abc:	bb50      	cbnz	r0, 8002b14 <FreeRTOS_recvfrom+0xa4>
			xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, ( ( EventBits_t ) eSOCKET_RECEIVE ) | ( ( EventBits_t ) eSOCKET_INTR ),
 8002abe:	9f03      	ldr	r7, [sp, #12]
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	2141      	movs	r1, #65	@ 0x41
 8002ac4:	6860      	ldr	r0, [r4, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	9700      	str	r7, [sp, #0]
 8002aca:	f005 fbd1 	bl	8008270 <xEventGroupWaitBits>
			lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 8002ace:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 8002ad0:	a903      	add	r1, sp, #12
 8002ad2:	a804      	add	r0, sp, #16
			if( lPacketCount != 0 )
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0ef      	beq.n	8002ab8 <FreeRTOS_recvfrom+0x48>
			taskENTER_CRITICAL();
 8002ad8:	f007 f8ac 	bl	8009c34 <vPortEnterCritical>
				pxNetworkBuffer = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 8002adc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
				if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_PEEK ) == 0U )
 8002ade:	f015 0904 	ands.w	r9, r5, #4
				pxNetworkBuffer = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 8002ae2:	f8d3 800c 	ldr.w	r8, [r3, #12]
				if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_PEEK ) == 0U )
 8002ae6:	d018      	beq.n	8002b1a <FreeRTOS_recvfrom+0xaa>
			taskEXIT_CRITICAL();
 8002ae8:	f007 f8c6 	bl	8009c78 <vPortExitCritical>
			uxPayloadLength = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 8002aec:	f8d8 401c 	ldr.w	r4, [r8, #28]
			if( pxSourceAddress != NULL )
 8002af0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
			uxPayloadLength = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 8002af2:	3c2a      	subs	r4, #42	@ 0x2a
			if( pxSourceAddress != NULL )
 8002af4:	b133      	cbz	r3, 8002b04 <FreeRTOS_recvfrom+0x94>
				pxSourceAddress->sin_port = pxNetworkBuffer->usPort;
 8002af6:	f8b8 3020 	ldrh.w	r3, [r8, #32]
 8002afa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002afc:	8053      	strh	r3, [r2, #2]
				pxSourceAddress->sin_addr = pxNetworkBuffer->ulIPAddress;
 8002afe:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8002b02:	6053      	str	r3, [r2, #4]
				pvCopySource = ( const void * ) &pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ];
 8002b04:	f8d8 1018 	ldr.w	r1, [r8, #24]
			if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 8002b08:	07eb      	lsls	r3, r5, #31
				pvCopySource = ( const void * ) &pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ];
 8002b0a:	f101 012a 	add.w	r1, r1, #42	@ 0x2a
			if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 8002b0e:	d508      	bpl.n	8002b22 <FreeRTOS_recvfrom+0xb2>
				*( ( void ** ) pvBuffer ) = ipPOINTER_CAST( void *, &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ) );
 8002b10:	6031      	str	r1, [r6, #0]
 8002b12:	e7c0      	b.n	8002a96 <FreeRTOS_recvfrom+0x26>
			lReturn = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 8002b14:	f06f 040a 	mvn.w	r4, #10
 8002b18:	e7bd      	b.n	8002a96 <FreeRTOS_recvfrom+0x26>
					( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 8002b1a:	4640      	mov	r0, r8
 8002b1c:	f005 fcfc 	bl	8008518 <uxListRemove>
 8002b20:	e7e2      	b.n	8002ae8 <FreeRTOS_recvfrom+0x78>
				if( lReturn > ( int32_t ) uxBufferLength )
 8002b22:	4554      	cmp	r4, sl
				( void ) memcpy( pvBuffer, pvCopySource, ( size_t ) lReturn );
 8002b24:	4630      	mov	r0, r6
 8002b26:	bfa8      	it	ge
 8002b28:	4654      	movge	r4, sl
 8002b2a:	4622      	mov	r2, r4
 8002b2c:	f00a fb48 	bl	800d1c0 <memcpy>
				if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_PEEK ) == 0U )
 8002b30:	f1b9 0f00 	cmp.w	r9, #0
 8002b34:	d1af      	bne.n	8002a96 <FreeRTOS_recvfrom+0x26>
					vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8002b36:	4640      	mov	r0, r8
 8002b38:	f003 ff2a 	bl	8006990 <vReleaseNetworkBufferAndDescriptor>
 8002b3c:	e7ab      	b.n	8002a96 <FreeRTOS_recvfrom+0x26>
 8002b3e:	bf00      	nop

08002b40 <FreeRTOS_bind>:
{
 8002b40:	b530      	push	{r4, r5, lr}
 8002b42:	b085      	sub	sp, #20
 8002b44:	4605      	mov	r5, r0
 8002b46:	460c      	mov	r4, r1
	configASSERT( xIsCallingFromIPTask() == pdFALSE );
 8002b48:	f7ff f9a4 	bl	8001e94 <xIsCallingFromIPTask>
 8002b4c:	bb08      	cbnz	r0, 8002b92 <FreeRTOS_bind+0x52>
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 8002b4e:	1e6b      	subs	r3, r5, #1
 8002b50:	3303      	adds	r3, #3
 8002b52:	d828      	bhi.n	8002ba6 <FreeRTOS_bind+0x66>
	else if( socketSOCKET_IS_BOUND( pxSocket ) )
 8002b54:	69ab      	ldr	r3, [r5, #24]
 8002b56:	bb13      	cbnz	r3, 8002b9e <FreeRTOS_bind+0x5e>
		xBindEvent.eEventType = eSocketBindEvent;
 8002b58:	2309      	movs	r3, #9
		xBindEvent.pvData = xSocket;
 8002b5a:	9503      	str	r5, [sp, #12]
		xBindEvent.eEventType = eSocketBindEvent;
 8002b5c:	f88d 3008 	strb.w	r3, [sp, #8]
		if( pxAddress != NULL )
 8002b60:	b114      	cbz	r4, 8002b68 <FreeRTOS_bind+0x28>
			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 8002b62:	8864      	ldrh	r4, [r4, #2]
 8002b64:	ba64      	rev16	r4, r4
 8002b66:	b2a4      	uxth	r4, r4
		if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8002b68:	f04f 31ff 	mov.w	r1, #4294967295
 8002b6c:	a802      	add	r0, sp, #8
 8002b6e:	84ac      	strh	r4, [r5, #36]	@ 0x24
 8002b70:	f7ff fadc 	bl	800212c <xSendEventStructToIPTask>
 8002b74:	b1d0      	cbz	r0, 8002bac <FreeRTOS_bind+0x6c>
			( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 8002b76:	f04f 30ff 	mov.w	r0, #4294967295
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	2110      	movs	r1, #16
 8002b80:	9000      	str	r0, [sp, #0]
 8002b82:	6868      	ldr	r0, [r5, #4]
 8002b84:	f005 fb74 	bl	8008270 <xEventGroupWaitBits>
			if( !socketSOCKET_IS_BOUND( pxSocket ) )
 8002b88:	69ab      	ldr	r3, [r5, #24]
 8002b8a:	b163      	cbz	r3, 8002ba6 <FreeRTOS_bind+0x66>
	BaseType_t xReturn = 0;
 8002b8c:	2000      	movs	r0, #0
}
 8002b8e:	b005      	add	sp, #20
 8002b90:	bd30      	pop	{r4, r5, pc}
	configASSERT( xIsCallingFromIPTask() == pdFALSE );
 8002b92:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8002b96:	4808      	ldr	r0, [pc, #32]	@ (8002bb8 <FreeRTOS_bind+0x78>)
 8002b98:	f7fe f95c 	bl	8000e54 <vAssertCalled>
 8002b9c:	e7d7      	b.n	8002b4e <FreeRTOS_bind+0xe>
		FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
 8002b9e:	8ca9      	ldrh	r1, [r5, #36]	@ 0x24
 8002ba0:	4806      	ldr	r0, [pc, #24]	@ (8002bbc <FreeRTOS_bind+0x7c>)
 8002ba2:	f00a f94b 	bl	800ce3c <lUDPLoggingPrintf>
		xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8002ba6:	f06f 0015 	mvn.w	r0, #21
 8002baa:	e7f0      	b.n	8002b8e <FreeRTOS_bind+0x4e>
			FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
 8002bac:	4804      	ldr	r0, [pc, #16]	@ (8002bc0 <FreeRTOS_bind+0x80>)
 8002bae:	f00a f945 	bl	800ce3c <lUDPLoggingPrintf>
			xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 8002bb2:	f06f 008b 	mvn.w	r0, #139	@ 0x8b
 8002bb6:	e7ea      	b.n	8002b8e <FreeRTOS_bind+0x4e>
 8002bb8:	0800efc4 	.word	0x0800efc4
 8002bbc:	0800effc 	.word	0x0800effc
 8002bc0:	0800f028 	.word	0x0800f028

08002bc4 <FreeRTOS_sendto>:
{
 8002bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 8002bc8:	2604      	movs	r6, #4
{
 8002bca:	b087      	sub	sp, #28
 8002bcc:	4699      	mov	r9, r3
	IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f88d 6008 	strb.w	r6, [sp, #8]
{
 8002bd4:	4607      	mov	r7, r0
 8002bd6:	4614      	mov	r4, r2
	configASSERT( pvBuffer != NULL );
 8002bd8:	460e      	mov	r6, r1
	IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 8002bda:	9303      	str	r3, [sp, #12]
	configASSERT( pvBuffer != NULL );
 8002bdc:	2900      	cmp	r1, #0
 8002bde:	d05d      	beq.n	8002c9c <FreeRTOS_sendto+0xd8>
	if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 8002be0:	f5b4 6fb8 	cmp.w	r4, #1472	@ 0x5c0
 8002be4:	d903      	bls.n	8002bee <FreeRTOS_sendto+0x2a>
	int32_t lReturn = 0;
 8002be6:	2000      	movs	r0, #0
} /* Tested */
 8002be8:	b007      	add	sp, #28
 8002bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if( socketSOCKET_IS_BOUND( pxSocket ) ||
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	2a00      	cmp	r2, #0
 8002bf2:	d059      	beq.n	8002ca8 <FreeRTOS_sendto+0xe4>
			xTicksToWait = pxSocket->xSendBlockTime;
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	9301      	str	r3, [sp, #4]
					if( xIsCallingFromIPTask() != pdFALSE )
 8002bf8:	f7ff f94c 	bl	8001e94 <xIsCallingFromIPTask>
 8002bfc:	b108      	cbz	r0, 8002c02 <FreeRTOS_sendto+0x3e>
						xTicksToWait = ( TickType_t ) 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	9301      	str	r3, [sp, #4]
			if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 8002c02:	f019 0f10 	tst.w	r9, #16
 8002c06:	d001      	beq.n	8002c0c <FreeRTOS_sendto+0x48>
				xTicksToWait = ( TickType_t ) 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	9301      	str	r3, [sp, #4]
			if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 8002c0c:	f019 0901 	ands.w	r9, r9, #1
 8002c10:	d11b      	bne.n	8002c4a <FreeRTOS_sendto+0x86>
				pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 8002c12:	f104 082a 	add.w	r8, r4, #42	@ 0x2a
				vTaskSetTimeOutState( &xTimeOut );
 8002c16:	a804      	add	r0, sp, #16
 8002c18:	f006 fcc8 	bl	80095ac <vTaskSetTimeOutState>
				pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 8002c1c:	9901      	ldr	r1, [sp, #4]
 8002c1e:	4640      	mov	r0, r8
 8002c20:	f003 fe7a 	bl	8006918 <pxGetNetworkBufferWithDescriptor>
				if( pxNetworkBuffer != NULL )
 8002c24:	4605      	mov	r5, r0
 8002c26:	2800      	cmp	r0, #0
 8002c28:	d0dd      	beq.n	8002be6 <FreeRTOS_sendto+0x22>
					pvCopyDest = ( void * ) &pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ];
 8002c2a:	6980      	ldr	r0, [r0, #24]
					( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 8002c2c:	4631      	mov	r1, r6
 8002c2e:	4622      	mov	r2, r4
 8002c30:	302a      	adds	r0, #42	@ 0x2a
 8002c32:	f00a fac5 	bl	800d1c0 <memcpy>
					if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 8002c36:	a804      	add	r0, sp, #16
 8002c38:	a901      	add	r1, sp, #4
 8002c3a:	f006 fcdf 	bl	80095fc <xTaskCheckForTimeOut>
 8002c3e:	2801      	cmp	r0, #1
 8002c40:	d10b      	bne.n	8002c5a <FreeRTOS_sendto+0x96>
						xTicksToWait = ( TickType_t ) 0;
 8002c42:	4649      	mov	r1, r9
 8002c44:	f8cd 9004 	str.w	r9, [sp, #4]
			if( pxNetworkBuffer != NULL )
 8002c48:	e008      	b.n	8002c5c <FreeRTOS_sendto+0x98>
				pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 8002c4a:	4630      	mov	r0, r6
 8002c4c:	f7ff f970 	bl	8001f30 <pxUDPPayloadBuffer_to_NetworkBuffer>
			if( pxNetworkBuffer != NULL )
 8002c50:	4605      	mov	r5, r0
 8002c52:	2800      	cmp	r0, #0
 8002c54:	d0c7      	beq.n	8002be6 <FreeRTOS_sendto+0x22>
				pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 8002c56:	f104 082a 	add.w	r8, r4, #42	@ 0x2a
				xARPWaitResolution( pxDestinationAddress->sin_addr, xTicksToWait );
 8002c5a:	9901      	ldr	r1, [sp, #4]
 8002c5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002c5e:	6858      	ldr	r0, [r3, #4]
 8002c60:	f7fe fe00 	bl	8001864 <xARPWaitResolution>
				pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 8002c64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
				pxNetworkBuffer->xDataLength = uxTotalDataLength + sizeof( UDPPacket_t );
 8002c66:	f8c5 801c 	str.w	r8, [r5, #28]
				if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 8002c6a:	a802      	add	r0, sp, #8
				pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 8002c6c:	885b      	ldrh	r3, [r3, #2]
				if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 8002c6e:	9901      	ldr	r1, [sp, #4]
				pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 8002c70:	842b      	strh	r3, [r5, #32]
				pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	846b      	strh	r3, [r5, #34]	@ 0x22
				pxNetworkBuffer->ulIPAddress = pxDestinationAddress->sin_addr;
 8002c76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	616b      	str	r3, [r5, #20]
				pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 8002c7c:	69ab      	ldr	r3, [r5, #24]
 8002c7e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002c82:	719a      	strb	r2, [r3, #6]
				xStackTxEvent.pvData = pxNetworkBuffer;
 8002c84:	9503      	str	r5, [sp, #12]
				if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 8002c86:	f7ff fa51 	bl	800212c <xSendEventStructToIPTask>
 8002c8a:	2801      	cmp	r0, #1
 8002c8c:	d013      	beq.n	8002cb6 <FreeRTOS_sendto+0xf2>
					if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 8002c8e:	f1b9 0f00 	cmp.w	r9, #0
 8002c92:	d1a8      	bne.n	8002be6 <FreeRTOS_sendto+0x22>
						vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8002c94:	4628      	mov	r0, r5
 8002c96:	f003 fe7b 	bl	8006990 <vReleaseNetworkBufferAndDescriptor>
 8002c9a:	e7a4      	b.n	8002be6 <FreeRTOS_sendto+0x22>
	configASSERT( pvBuffer != NULL );
 8002c9c:	f240 4116 	movw	r1, #1046	@ 0x416
 8002ca0:	4808      	ldr	r0, [pc, #32]	@ (8002cc4 <FreeRTOS_sendto+0x100>)
 8002ca2:	f7fe f8d7 	bl	8000e54 <vAssertCalled>
 8002ca6:	e79b      	b.n	8002be0 <FreeRTOS_sendto+0x1c>
			( FreeRTOS_bind( xSocket, NULL, 0U ) == 0 ) )
 8002ca8:	4611      	mov	r1, r2
 8002caa:	4638      	mov	r0, r7
 8002cac:	f7ff ff48 	bl	8002b40 <FreeRTOS_bind>
		if( socketSOCKET_IS_BOUND( pxSocket ) ||
 8002cb0:	2800      	cmp	r0, #0
 8002cb2:	d09f      	beq.n	8002bf4 <FreeRTOS_sendto+0x30>
 8002cb4:	e797      	b.n	8002be6 <FreeRTOS_sendto+0x22>
							if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleSent ) )
 8002cb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cb8:	b113      	cbz	r3, 8002cc0 <FreeRTOS_sendto+0xfc>
								pxSocket->u.xUDP.pxHandleSent( xSocket, uxTotalDataLength );
 8002cba:	4621      	mov	r1, r4
 8002cbc:	4638      	mov	r0, r7
 8002cbe:	4798      	blx	r3
					lReturn = ( int32_t ) uxTotalDataLength;
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	e791      	b.n	8002be8 <FreeRTOS_sendto+0x24>
 8002cc4:	0800efc4 	.word	0x0800efc4

08002cc8 <vSocketBind>:
{
 8002cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ccc:	b087      	sub	sp, #28
			pxSocketList = &xBoundTCPSocketsList;
 8002cce:	4f51      	ldr	r7, [pc, #324]	@ (8002e14 <vSocketBind+0x14c>)
 8002cd0:	4a51      	ldr	r2, [pc, #324]	@ (8002e18 <vSocketBind+0x150>)
{
 8002cd2:	4605      	mov	r5, r0
 8002cd4:	9301      	str	r3, [sp, #4]
 8002cd6:	460e      	mov	r6, r1
		if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8002cd8:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
			pxSocketList = &xBoundTCPSocketsList;
 8002cdc:	2b06      	cmp	r3, #6
 8002cde:	bf08      	it	eq
 8002ce0:	4617      	moveq	r7, r2
	configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 8002ce2:	3001      	adds	r0, #1
			pxSocketList = &xBoundTCPSocketsList;
 8002ce4:	9700      	str	r7, [sp, #0]
	configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 8002ce6:	f000 8088 	beq.w	8002dfa <vSocketBind+0x132>
			if( pxAddress == NULL )
 8002cea:	2e00      	cmp	r6, #0
 8002cec:	d041      	beq.n	8002d72 <vSocketBind+0xaa>
			if( pxAddress->sin_port == 0U )
 8002cee:	f8b6 9002 	ldrh.w	r9, [r6, #2]
 8002cf2:	f1b9 0f00 	cmp.w	r9, #0
 8002cf6:	d03f      	beq.n	8002d78 <vSocketBind+0xb0>
				( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 8002cf8:	464a      	mov	r2, r9
			if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 8002cfa:	9b01      	ldr	r3, [sp, #4]
 8002cfc:	b11b      	cbz	r3, 8002d06 <vSocketBind+0x3e>
 8002cfe:	f895 1027 	ldrb.w	r1, [r5, #39]	@ 0x27
 8002d02:	2906      	cmp	r1, #6
 8002d04:	d00e      	beq.n	8002d24 <vSocketBind+0x5c>
	if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 8002d06:	9201      	str	r2, [sp, #4]
 8002d08:	f7ff fdb0 	bl	800286c <xIPIsNetworkTaskReady>
 8002d0c:	9a01      	ldr	r2, [sp, #4]
 8002d0e:	2800      	cmp	r0, #0
 8002d10:	d070      	beq.n	8002df4 <vSocketBind+0x12c>
		const ListItem_t * pxEnd = listGET_END_MARKER( pxList );
 8002d12:	9b00      	ldr	r3, [sp, #0]
 8002d14:	f8b6 9002 	ldrh.w	r9, [r6, #2]
 8002d18:	f103 0408 	add.w	r4, r3, #8
		for( pxIterator = listGET_NEXT( pxEnd );
 8002d1c:	68d9      	ldr	r1, [r3, #12]
			 pxIterator != pxEnd;
 8002d1e:	428c      	cmp	r4, r1
 8002d20:	d114      	bne.n	8002d4c <vSocketBind+0x84>
				socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 8002d22:	464a      	mov	r2, r9
				pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 8002d24:	fa99 f399 	rev16.w	r3, r9
				socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 8002d28:	60aa      	str	r2, [r5, #8]
				pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 8002d2a:	84ab      	strh	r3, [r5, #36]	@ 0x24
							vTaskSuspendAll();
 8002d2c:	f006 f980 	bl	8009030 <vTaskSuspendAll>
					vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 8002d30:	f105 0108 	add.w	r1, r5, #8
 8002d34:	9800      	ldr	r0, [sp, #0]
 8002d36:	f005 fbc9 	bl	80084cc <vListInsertEnd>
							( void ) xTaskResumeAll();
 8002d3a:	f006 fa57 	bl	80091ec <xTaskResumeAll>
	BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 8002d3e:	2000      	movs	r0, #0
} /* Tested */
 8002d40:	b007      	add	sp, #28
 8002d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			 pxIterator = listGET_NEXT( pxIterator ) )
 8002d46:	6849      	ldr	r1, [r1, #4]
			 pxIterator != pxEnd;
 8002d48:	428c      	cmp	r4, r1
 8002d4a:	d0ea      	beq.n	8002d22 <vSocketBind+0x5a>
			if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 8002d4c:	6808      	ldr	r0, [r1, #0]
 8002d4e:	4290      	cmp	r0, r2
 8002d50:	d1f9      	bne.n	8002d46 <vSocketBind+0x7e>
				FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
 8002d52:	f895 5027 	ldrb.w	r5, [r5, #39]	@ 0x27
 8002d56:	fa99 f399 	rev16.w	r3, r9
 8002d5a:	4930      	ldr	r1, [pc, #192]	@ (8002e1c <vSocketBind+0x154>)
 8002d5c:	4c30      	ldr	r4, [pc, #192]	@ (8002e20 <vSocketBind+0x158>)
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	4830      	ldr	r0, [pc, #192]	@ (8002e24 <vSocketBind+0x15c>)
 8002d62:	2d06      	cmp	r5, #6
 8002d64:	bf18      	it	ne
 8002d66:	4621      	movne	r1, r4
 8002d68:	f00a f868 	bl	800ce3c <lUDPLoggingPrintf>
				xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 8002d6c:	f06f 006f 	mvn.w	r0, #111	@ 0x6f
 8002d70:	e7e6      	b.n	8002d40 <vSocketBind+0x78>
				pxAddress->sin_port = 0U;
 8002d72:	f8ad 6012 	strh.w	r6, [sp, #18]
				pxAddress = &xAddress;
 8002d76:	ae04      	add	r6, sp, #16
			pxList = &xBoundTCPSocketsList;
 8002d78:	4b27      	ldr	r3, [pc, #156]	@ (8002e18 <vSocketBind+0x150>)
		pxList = &xBoundUDPSocketsList;
 8002d7a:	f44f 447c 	mov.w	r4, #64512	@ 0xfc00
				pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 8002d7e:	f895 1027 	ldrb.w	r1, [r5, #39]	@ 0x27
			pxList = &xBoundTCPSocketsList;
 8002d82:	4a24      	ldr	r2, [pc, #144]	@ (8002e14 <vSocketBind+0x14c>)
			socketAUTO_PORT_ALLOCATION_START_NUMBER +
 8002d84:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8002e2c <vSocketBind+0x164>
			pxList = &xBoundTCPSocketsList;
 8002d88:	2906      	cmp	r1, #6
 8002d8a:	bf14      	ite	ne
 8002d8c:	4692      	movne	sl, r2
 8002d8e:	469a      	moveq	sl, r3
	uint32_t ulRandomSeed = 0;
 8002d90:	2300      	movs	r3, #0
		const ListItem_t * pxEnd = listGET_END_MARKER( pxList );
 8002d92:	f10a 0708 	add.w	r7, sl, #8
	uint32_t ulRandomSeed = 0;
 8002d96:	9303      	str	r3, [sp, #12]
		if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 8002d98:	a803      	add	r0, sp, #12
 8002d9a:	f7fe f8cd 	bl	8000f38 <xApplicationGetRandomNumber>
 8002d9e:	b310      	cbz	r0, 8002de6 <vSocketBind+0x11e>
			socketAUTO_PORT_ALLOCATION_START_NUMBER +
 8002da0:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8002da4:	ea4f 239b 	mov.w	r3, fp, lsr #10
 8002da8:	fba8 2303 	umull	r2, r3, r8, r3
 8002dac:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8002db0:	ebab 2b83 	sub.w	fp, fp, r3, lsl #10
		usResult =
 8002db4:	f50b 6b80 	add.w	fp, fp, #1024	@ 0x400
 8002db8:	fa9b fb9b 	rev16.w	fp, fp
 8002dbc:	fa1f f98b 	uxth.w	r9, fp
	if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 8002dc0:	f7ff fd54 	bl	800286c <xIPIsNetworkTaskReady>
 8002dc4:	b1f8      	cbz	r0, 8002e06 <vSocketBind+0x13e>
		for( pxIterator = listGET_NEXT( pxEnd );
 8002dc6:	f8da 000c 	ldr.w	r0, [sl, #12]
		if( NULL == pxListFindListItemWithValue(
 8002dca:	464a      	mov	r2, r9
			 pxIterator != pxEnd;
 8002dcc:	4287      	cmp	r7, r0
 8002dce:	d103      	bne.n	8002dd8 <vSocketBind+0x110>
 8002dd0:	e01c      	b.n	8002e0c <vSocketBind+0x144>
			 pxIterator = listGET_NEXT( pxIterator ) )
 8002dd2:	6840      	ldr	r0, [r0, #4]
			 pxIterator != pxEnd;
 8002dd4:	4287      	cmp	r7, r0
 8002dd6:	d016      	beq.n	8002e06 <vSocketBind+0x13e>
			if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 8002dd8:	6802      	ldr	r2, [r0, #0]
 8002dda:	4591      	cmp	r9, r2
 8002ddc:	d1f9      	bne.n	8002dd2 <vSocketBind+0x10a>
	while( usIterations > 0U );
 8002dde:	3c01      	subs	r4, #1
 8002de0:	b2a4      	uxth	r4, r4
 8002de2:	2c00      	cmp	r4, #0
 8002de4:	d1d8      	bne.n	8002d98 <vSocketBind+0xd0>
				pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 8002de6:	2300      	movs	r3, #0
					xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 8002de8:	f06f 007c 	mvn.w	r0, #124	@ 0x7c
				pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 8002dec:	8073      	strh	r3, [r6, #2]
} /* Tested */
 8002dee:	b007      	add	sp, #28
 8002df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002df4:	8872      	ldrh	r2, [r6, #2]
				socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 8002df6:	4691      	mov	r9, r2
 8002df8:	e794      	b.n	8002d24 <vSocketBind+0x5c>
	configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 8002dfa:	f240 5114 	movw	r1, #1300	@ 0x514
 8002dfe:	480a      	ldr	r0, [pc, #40]	@ (8002e28 <vSocketBind+0x160>)
 8002e00:	f7fe f828 	bl	8000e54 <vAssertCalled>
 8002e04:	e771      	b.n	8002cea <vSocketBind+0x22>
				pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 8002e06:	f8a6 b002 	strh.w	fp, [r6, #2]
 8002e0a:	e775      	b.n	8002cf8 <vSocketBind+0x30>
 8002e0c:	f8a6 b002 	strh.w	fp, [r6, #2]
				if( pxAddress->sin_port == ( uint16_t ) 0U )
 8002e10:	e773      	b.n	8002cfa <vSocketBind+0x32>
 8002e12:	bf00      	nop
 8002e14:	2000037c 	.word	0x2000037c
 8002e18:	20000368 	.word	0x20000368
 8002e1c:	0800f04c 	.word	0x0800f04c
 8002e20:	0800f050 	.word	0x0800f050
 8002e24:	0800f054 	.word	0x0800f054
 8002e28:	0800efc4 	.word	0x0800efc4
 8002e2c:	04104114 	.word	0x04104114

08002e30 <FreeRTOS_closesocket>:
{
 8002e30:	b500      	push	{lr}
	xCloseEvent.eEventType = eSocketCloseEvent;
 8002e32:	230a      	movs	r3, #10
{
 8002e34:	b083      	sub	sp, #12
	xCloseEvent.eEventType = eSocketCloseEvent;
 8002e36:	f88d 3000 	strb.w	r3, [sp]
	if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 8002e3a:	1e43      	subs	r3, r0, #1
	xCloseEvent.pvData = xSocket;
 8002e3c:	9001      	str	r0, [sp, #4]
	if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 8002e3e:	3303      	adds	r3, #3
 8002e40:	d80c      	bhi.n	8002e5c <FreeRTOS_closesocket+0x2c>
				if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8002e42:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	d00c      	beq.n	8002e64 <FreeRTOS_closesocket+0x34>
		if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4668      	mov	r0, sp
 8002e4e:	f7ff f96d 	bl	800212c <xSendEventStructToIPTask>
 8002e52:	b190      	cbz	r0, 8002e7a <FreeRTOS_closesocket+0x4a>
			xResult = 1;
 8002e54:	2001      	movs	r0, #1
}
 8002e56:	b003      	add	sp, #12
 8002e58:	f85d fb04 	ldr.w	pc, [sp], #4
		xResult = 0;
 8002e5c:	2000      	movs	r0, #0
}
 8002e5e:	b003      	add	sp, #12
 8002e60:	f85d fb04 	ldr.w	pc, [sp], #4
					pxSocket->u.xTCP.pxHandleConnected = NULL;
 8002e64:	2300      	movs	r3, #0
		if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
 8002e66:	2100      	movs	r1, #0
					pxSocket->u.xTCP.pxHandleConnected = NULL;
 8002e68:	f8c0 30d4 	str.w	r3, [r0, #212]	@ 0xd4
					pxSocket->u.xTCP.pxHandleReceive = NULL;
 8002e6c:	e9c0 3333 	strd	r3, r3, [r0, #204]	@ 0xcc
		if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
 8002e70:	4668      	mov	r0, sp
 8002e72:	f7ff f95b 	bl	800212c <xSendEventStructToIPTask>
 8002e76:	2800      	cmp	r0, #0
 8002e78:	d1ec      	bne.n	8002e54 <FreeRTOS_closesocket+0x24>
			FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
 8002e7a:	4804      	ldr	r0, [pc, #16]	@ (8002e8c <FreeRTOS_closesocket+0x5c>)
 8002e7c:	f009 ffde 	bl	800ce3c <lUDPLoggingPrintf>
			xResult = -1;
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002e84:	b003      	add	sp, #12
 8002e86:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e8a:	bf00      	nop
 8002e8c:	0800f078 	.word	0x0800f078

08002e90 <vSocketClose>:
{
 8002e90:	b5f0      	push	{r4, r5, r6, r7, lr}
			if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8002e92:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
{
 8002e96:	b083      	sub	sp, #12
 8002e98:	4604      	mov	r4, r0
			if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8002e9a:	2b06      	cmp	r3, #6
 8002e9c:	d01b      	beq.n	8002ed6 <vSocketClose+0x46>
	if( socketSOCKET_IS_BOUND( pxSocket ) )
 8002e9e:	69a3      	ldr	r3, [r4, #24]
 8002ea0:	b13b      	cbz	r3, 8002eb2 <vSocketClose+0x22>
				vTaskSuspendAll();
 8002ea2:	f006 f8c5 	bl	8009030 <vTaskSuspendAll>
		( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 8002ea6:	f104 0008 	add.w	r0, r4, #8
 8002eaa:	f005 fb35 	bl	8008518 <uxListRemove>
				( void ) xTaskResumeAll();
 8002eae:	f006 f99d 	bl	80091ec <xTaskResumeAll>
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 8002eb2:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 8002eb6:	2b11      	cmp	r3, #17
 8002eb8:	d043      	beq.n	8002f42 <vSocketClose+0xb2>
	if( pxSocket->xEventGroup != NULL )
 8002eba:	6860      	ldr	r0, [r4, #4]
 8002ebc:	b108      	cbz	r0, 8002ec2 <vSocketClose+0x32>
		vEventGroupDelete( pxSocket->xEventGroup );
 8002ebe:	f005 facb 	bl	8008458 <vEventGroupDelete>
			if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8002ec2:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 8002ec6:	2b06      	cmp	r3, #6
 8002ec8:	d049      	beq.n	8002f5e <vSocketClose+0xce>
	vPortFreeSocket( pxSocket );
 8002eca:	4620      	mov	r0, r4
 8002ecc:	f007 f870 	bl	8009fb0 <vPortFree>
} /* Tested */
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	b003      	add	sp, #12
 8002ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8002ed6:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8002ed8:	b108      	cbz	r0, 8002ede <vSocketClose+0x4e>
							vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8002eda:	f003 fd59 	bl	8006990 <vReleaseNetworkBufferAndDescriptor>
						vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 8002ede:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 8002ee2:	f002 ffa5 	bl	8005e30 <vTCPWindowDestroy>
				if( pxSocket->u.xTCP.rxStream != NULL )
 8002ee6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8002ee8:	b108      	cbz	r0, 8002eee <vSocketClose+0x5e>
					vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 8002eea:	f007 f861 	bl	8009fb0 <vPortFree>
				if( pxSocket->u.xTCP.txStream != NULL )
 8002eee:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8002ef0:	b108      	cbz	r0, 8002ef6 <vSocketClose+0x66>
					vPortFreeLarge( pxSocket->u.xTCP.txStream );
 8002ef2:	f007 f85d 	bl	8009fb0 <vPortFree>
		for( pxIterator = listGET_NEXT( pxEnd );
 8002ef6:	4d26      	ldr	r5, [pc, #152]	@ (8002f90 <vSocketClose+0x100>)
		uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 8002ef8:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		for( pxIterator = listGET_NEXT( pxEnd );
 8002efa:	68eb      	ldr	r3, [r5, #12]
			 pxIterator != pxEnd;
 8002efc:	3508      	adds	r5, #8
 8002efe:	42ab      	cmp	r3, r5
 8002f00:	d103      	bne.n	8002f0a <vSocketClose+0x7a>
 8002f02:	e7cc      	b.n	8002e9e <vSocketClose+0xe>
			 pxIterator = listGET_NEXT( pxIterator ) )
 8002f04:	685b      	ldr	r3, [r3, #4]
			 pxIterator != pxEnd;
 8002f06:	42ab      	cmp	r3, r5
 8002f08:	d0c9      	beq.n	8002e9e <vSocketClose+0xe>
			pxOtherSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8002f0a:	68d8      	ldr	r0, [r3, #12]
			if( ( pxOtherSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN ) &&
 8002f0c:	f890 2053 	ldrb.w	r2, [r0, #83]	@ 0x53
 8002f10:	2a01      	cmp	r2, #1
 8002f12:	d1f7      	bne.n	8002f04 <vSocketClose+0x74>
				( pxOtherSocket->usLocalPort == usLocalPort ) &&
 8002f14:	8c82      	ldrh	r2, [r0, #36]	@ 0x24
			if( ( pxOtherSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN ) &&
 8002f16:	4291      	cmp	r1, r2
 8002f18:	d1f4      	bne.n	8002f04 <vSocketClose+0x74>
				( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 8002f1a:	f8b0 204e 	ldrh.w	r2, [r0, #78]	@ 0x4e
				( pxOtherSocket->usLocalPort == usLocalPort ) &&
 8002f1e:	2a00      	cmp	r2, #0
 8002f20:	d0f0      	beq.n	8002f04 <vSocketClose+0x74>
				pxOtherSocket->u.xTCP.usChildCount--;
 8002f22:	3a01      	subs	r2, #1
				FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
 8002f24:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002f28:	4d1a      	ldr	r5, [pc, #104]	@ (8002f94 <vSocketClose+0x104>)
				pxOtherSocket->u.xTCP.usChildCount--;
 8002f2a:	b292      	uxth	r2, r2
 8002f2c:	f8a0 204e 	strh.w	r2, [r0, #78]	@ 0x4e
				FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
 8002f30:	4819      	ldr	r0, [pc, #100]	@ (8002f98 <vSocketClose+0x108>)
 8002f32:	2a01      	cmp	r2, #1
 8002f34:	bf18      	it	ne
 8002f36:	4628      	movne	r0, r5
 8002f38:	9000      	str	r0, [sp, #0]
 8002f3a:	4818      	ldr	r0, [pc, #96]	@ (8002f9c <vSocketClose+0x10c>)
 8002f3c:	f009 ff7e 	bl	800ce3c <lUDPLoggingPrintf>
				break;
 8002f40:	e7ad      	b.n	8002e9e <vSocketClose+0xe>
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 8002f42:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002f44:	b303      	cbz	r3, 8002f88 <vSocketClose+0xf8>
			pxNetworkBuffer = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 8002f46:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002f48:	68dd      	ldr	r5, [r3, #12]
			( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	f005 fae4 	bl	8008518 <uxListRemove>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8002f50:	4628      	mov	r0, r5
 8002f52:	f003 fd1d 	bl	8006990 <vReleaseNetworkBufferAndDescriptor>
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 8002f56:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1f4      	bne.n	8002f46 <vSocketClose+0xb6>
 8002f5c:	e7ad      	b.n	8002eba <vSocketClose+0x2a>
				FreeRTOS_debug_printf( ( "FreeRTOS_closesocket[%u to %lxip:%u]: buffers %lu socks %lu\n",
 8002f5e:	8ca5      	ldrh	r5, [r4, #36]	@ 0x24
 8002f60:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8002f62:	8fa7      	ldrh	r7, [r4, #60]	@ 0x3c
 8002f64:	f003 fd40 	bl	80069e8 <uxGetNumberOfFreeNetworkBuffers>
 8002f68:	4629      	mov	r1, r5
 8002f6a:	4d09      	ldr	r5, [pc, #36]	@ (8002f90 <vSocketClose+0x100>)
 8002f6c:	9000      	str	r0, [sp, #0]
 8002f6e:	463b      	mov	r3, r7
 8002f70:	682d      	ldr	r5, [r5, #0]
 8002f72:	4632      	mov	r2, r6
 8002f74:	480a      	ldr	r0, [pc, #40]	@ (8002fa0 <vSocketClose+0x110>)
 8002f76:	9501      	str	r5, [sp, #4]
 8002f78:	f009 ff60 	bl	800ce3c <lUDPLoggingPrintf>
	vPortFreeSocket( pxSocket );
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f007 f817 	bl	8009fb0 <vPortFree>
} /* Tested */
 8002f82:	2000      	movs	r0, #0
 8002f84:	b003      	add	sp, #12
 8002f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if( pxSocket->xEventGroup != NULL )
 8002f88:	6860      	ldr	r0, [r4, #4]
 8002f8a:	2800      	cmp	r0, #0
 8002f8c:	d197      	bne.n	8002ebe <vSocketClose+0x2e>
 8002f8e:	e79c      	b.n	8002eca <vSocketClose+0x3a>
 8002f90:	20000368 	.word	0x20000368
 8002f94:	0800f098 	.word	0x0800f098
 8002f98:	0800eb4c 	.word	0x0800eb4c
 8002f9c:	0800f09c 	.word	0x0800f09c
 8002fa0:	0800f0c8 	.word	0x0800f0c8

08002fa4 <FreeRTOS_setsockopt>:
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 8002fa4:	1e41      	subs	r1, r0, #1
 8002fa6:	3103      	adds	r1, #3
 8002fa8:	f200 8147 	bhi.w	800323a <FreeRTOS_setsockopt+0x296>
 8002fac:	4684      	mov	ip, r0
{
 8002fae:	b508      	push	{r3, lr}
	switch( lOptionName )
 8002fb0:	2a12      	cmp	r2, #18
 8002fb2:	f200 80f0 	bhi.w	8003196 <FreeRTOS_setsockopt+0x1f2>
 8002fb6:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002fba:	00e3      	.short	0x00e3
 8002fbc:	00e60088 	.word	0x00e60088
 8002fc0:	00290084 	.word	0x00290084
 8002fc4:	00130029 	.word	0x00130029
 8002fc8:	00130013 	.word	0x00130013
 8002fcc:	00130013 	.word	0x00130013
 8002fd0:	00480038 	.word	0x00480038
 8002fd4:	00940058 	.word	0x00940058
 8002fd8:	00ee00bd 	.word	0x00ee00bd
 8002fdc:	00d500ee 	.word	0x00d500ee
							   if( ( lOptionName == FREERTOS_SO_UDP_RECV_HANDLER ) ||
 8002fe0:	f1a2 0109 	sub.w	r1, r2, #9
							   if( pxSocket->ucProtocol != ( uint8_t ) uxProtocol )
 8002fe4:	f890 0027 	ldrb.w	r0, [r0, #39]	@ 0x27
							   if( ( lOptionName == FREERTOS_SO_UDP_RECV_HANDLER ) ||
 8002fe8:	2902      	cmp	r1, #2
 8002fea:	bf34      	ite	cc
 8002fec:	2111      	movcc	r1, #17
 8002fee:	2106      	movcs	r1, #6
							   if( pxSocket->ucProtocol != ( uint8_t ) uxProtocol )
 8002ff0:	4288      	cmp	r0, r1
 8002ff2:	f040 8103 	bne.w	80031fc <FreeRTOS_setsockopt+0x258>
					   switch( lOptionName )
 8002ff6:	3a07      	subs	r2, #7
								   pxSocket->u.xTCP.pxHandleConnected = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( F_TCP_UDP_Handler_t, pvOptionValue )->pxOnTCPConnected;
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2a03      	cmp	r2, #3
 8002ffc:	f200 8120 	bhi.w	8003240 <FreeRTOS_setsockopt+0x29c>
 8003000:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003004:	00eb00ee 	.word	0x00eb00ee
 8003008:	00e800f1 	.word	0x00e800f1
		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800300c:	f890 1027 	ldrb.w	r1, [r0, #39]	@ 0x27
 8003010:	2906      	cmp	r1, #6
 8003012:	f040 80f6 	bne.w	8003202 <FreeRTOS_setsockopt+0x25e>
		else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 8003016:	2a04      	cmp	r2, #4
 8003018:	f000 80ce 	beq.w	80031b8 <FreeRTOS_setsockopt+0x214>
				 ( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800301c:	6f42      	ldr	r2, [r0, #116]	@ 0x74
 800301e:	2a00      	cmp	r2, #0
 8003020:	f040 8104 	bne.w	800322c <FreeRTOS_setsockopt+0x288>
			ulNewValue = *( ipPOINTER_CAST( const uint32_t *, pvOptionValue ) );
 8003024:	681b      	ldr	r3, [r3, #0]
				pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 8003026:	66c3      	str	r3, [r0, #108]	@ 0x6c
 8003028:	e04d      	b.n	80030c6 <FreeRTOS_setsockopt+0x122>
					   if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800302a:	f890 2027 	ldrb.w	r2, [r0, #39]	@ 0x27
 800302e:	2a06      	cmp	r2, #6
 8003030:	f040 80e4 	bne.w	80031fc <FreeRTOS_setsockopt+0x258>
					   if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 80b7 	beq.w	80031aa <FreeRTOS_setsockopt+0x206>
						   pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 800303c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8003040:	f043 0308 	orr.w	r3, r3, #8
 8003044:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8003048:	e03d      	b.n	80030c6 <FreeRTOS_setsockopt+0x122>
					   if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800304a:	f890 2027 	ldrb.w	r2, [r0, #39]	@ 0x27
 800304e:	2a06      	cmp	r2, #6
 8003050:	f040 80d4 	bne.w	80031fc <FreeRTOS_setsockopt+0x258>
					   if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 80a0 	beq.w	800319c <FreeRTOS_setsockopt+0x1f8>
						   pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE;
 800305c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8003060:	f043 0310 	orr.w	r3, r3, #16
 8003064:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8003068:	e02d      	b.n	80030c6 <FreeRTOS_setsockopt+0x122>
					   if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800306a:	f890 2027 	ldrb.w	r2, [r0, #39]	@ 0x27
 800306e:	2a06      	cmp	r2, #6
 8003070:	f040 80d8 	bne.w	8003224 <FreeRTOS_setsockopt+0x280>
					   if( ( pxSocket->u.xTCP.txStream != NULL ) || ( pxSocket->u.xTCP.rxStream != NULL ) )
 8003074:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 8003076:	2a00      	cmp	r2, #0
 8003078:	f040 80bd 	bne.w	80031f6 <FreeRTOS_setsockopt+0x252>
 800307c:	6f42      	ldr	r2, [r0, #116]	@ 0x74
 800307e:	2a00      	cmp	r2, #0
 8003080:	f040 80b9 	bne.w	80031f6 <FreeRTOS_setsockopt+0x252>
            return ( a <= b ) ? a : b;
        }
        static portINLINE uint32_t FreeRTOS_round_up( uint32_t a,
                                                      uint32_t d )
        {
            return d * ( ( a + d - 1U ) / d );
 8003084:	681a      	ldr	r2, [r3, #0]
				ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 8003086:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 800308a:	3a01      	subs	r2, #1
							   pxSocket->u.xTCP.uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 800308c:	68d8      	ldr	r0, [r3, #12]
 800308e:	440a      	add	r2, r1
 8003090:	fbb2 f2f1 	udiv	r2, r2, r1
 8003094:	fb01 f202 	mul.w	r2, r1, r2
				pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 8003098:	f8cc 2070 	str.w	r2, [ip, #112]	@ 0x70
							   pxSocket->u.xTCP.uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 800309c:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
							   pxSocket->u.xTCP.uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 80030a0:	f8cc 00dc 	str.w	r0, [ip, #220]	@ 0xdc
				pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 80030a4:	f8cc 206c 	str.w	r2, [ip, #108]	@ 0x6c
					   if( pxSocket->u.xTCP.xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 80030a8:	f89c 20e4 	ldrb.w	r2, [ip, #228]	@ 0xe4
							   pxSocket->u.xTCP.uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 80030ac:	f8cc 30e0 	str.w	r3, [ip, #224]	@ 0xe0
					   if( pxSocket->u.xTCP.xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 80030b0:	07d2      	lsls	r2, r2, #31
 80030b2:	d508      	bpl.n	80030c6 <FreeRTOS_setsockopt+0x122>
						   pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength = pxSocket->u.xTCP.uxRxWinSize * pxSocket->u.xTCP.usInitMSS;
 80030b4:	fb01 f000 	mul.w	r0, r1, r0
						   pxSocket->u.xTCP.xTCPWindow.xSize.ulTxWindowLength = pxSocket->u.xTCP.uxTxWinSize * pxSocket->u.xTCP.usInitMSS;
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	e9cc 033a 	strd	r0, r3, [ip, #232]	@ 0xe8
 80030c0:	e001      	b.n	80030c6 <FreeRTOS_setsockopt+0x122>
						   pxSocket->pxUserSemaphore = *( ipPOINTER_CAST( SemaphoreHandle_t *, pvOptionValue ) );
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6283      	str	r3, [r0, #40]	@ 0x28
			xReturn = 0;
 80030c6:	2000      	movs	r0, #0
} /* Tested */
 80030c8:	bd08      	pop	{r3, pc}
			if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 80030ca:	f890 2027 	ldrb.w	r2, [r0, #39]	@ 0x27
			pxSocket->xSendBlockTime = *( ( const TickType_t * ) pvOptionValue );
 80030ce:	681b      	ldr	r3, [r3, #0]
				if( pxSocket->xSendBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 80030d0:	2a11      	cmp	r2, #17
			pxSocket->xSendBlockTime = *( ( const TickType_t * ) pvOptionValue );
 80030d2:	6203      	str	r3, [r0, #32]
				if( pxSocket->xSendBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 80030d4:	d1f7      	bne.n	80030c6 <FreeRTOS_setsockopt+0x122>
 80030d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030da:	4293      	cmp	r3, r2
 80030dc:	d9f3      	bls.n	80030c6 <FreeRTOS_setsockopt+0x122>
					pxSocket->xSendBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 80030de:	6202      	str	r2, [r0, #32]
 80030e0:	e7f1      	b.n	80030c6 <FreeRTOS_setsockopt+0x122>
					   if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 80030e2:	f890 2027 	ldrb.w	r2, [r0, #39]	@ 0x27
 80030e6:	2a06      	cmp	r2, #6
 80030e8:	f040 8088 	bne.w	80031fc <FreeRTOS_setsockopt+0x258>
					   if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	f890 30e4 	ldrb.w	r3, [r0, #228]	@ 0xe4
 80030f2:	3a00      	subs	r2, #0
 80030f4:	bf18      	it	ne
 80030f6:	2201      	movne	r2, #1
 80030f8:	f362 0341 	bfi	r3, r2, #1, #1
 80030fc:	f880 30e4 	strb.w	r3, [r0, #228]	@ 0xe4
					   if( ( pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize == pdFALSE_UNSIGNED ) &&
 8003100:	079b      	lsls	r3, r3, #30
 8003102:	d4e0      	bmi.n	80030c6 <FreeRTOS_setsockopt+0x122>
 8003104:	f890 3053 	ldrb.w	r3, [r0, #83]	@ 0x53
 8003108:	2b04      	cmp	r3, #4
 800310a:	d9dc      	bls.n	80030c6 <FreeRTOS_setsockopt+0x122>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
		}
		else
		{
			if( pxSocket->u.xTCP.txStream != NULL )
 800310c:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800310e:	2a00      	cmp	r2, #0
 8003110:	d0d9      	beq.n	80030c6 <FreeRTOS_setsockopt+0x122>
                                                     const size_t uxUpper )
    {
/* Returns the distance between uxLower and uxUpper */
        size_t uxCount;

        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003112:	6911      	ldr	r1, [r2, #16]
    static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t * pxBuffer );
    static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t * pxBuffer )
    {
/* Returns the number of items which can be read from uxTail
 * before reaching uxHead */
        size_t uxHead = pxBuffer->uxHead;
 8003114:	6893      	ldr	r3, [r2, #8]
        size_t uxTail = pxBuffer->uxTail;
 8003116:	6812      	ldr	r2, [r2, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003118:	440b      	add	r3, r1
 800311a:	1a9b      	subs	r3, r3, r2
        if( uxCount >= pxBuffer->LENGTH )
 800311c:	4299      	cmp	r1, r3
            uxCount -= pxBuffer->LENGTH;
 800311e:	bf98      	it	ls
 8003120:	1a5b      	subls	r3, r3, r1
						   ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0cf      	beq.n	80030c6 <FreeRTOS_setsockopt+0x122>
						   pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bSendFullSize */
 8003126:	2301      	movs	r3, #1
						   ( void ) xSendEventToIPTask( eTCPTimerEvent );
 8003128:	2006      	movs	r0, #6
						   pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bSendFullSize */
 800312a:	f8ac 3048 	strh.w	r3, [ip, #72]	@ 0x48
						   ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800312e:	f7fe ffc7 	bl	80020c0 <xSendEventToIPTask>
 8003132:	e7c8      	b.n	80030c6 <FreeRTOS_setsockopt+0x122>
					   if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8003134:	f890 0027 	ldrb.w	r0, [r0, #39]	@ 0x27
 8003138:	2806      	cmp	r0, #6
 800313a:	d15f      	bne.n	80031fc <FreeRTOS_setsockopt+0x258>
					   if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800313c:	681b      	ldr	r3, [r3, #0]
					   pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 800313e:	f8dc 1040 	ldr.w	r1, [ip, #64]	@ 0x40
					   if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 8003142:	3b00      	subs	r3, #0
					   pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 8003144:	4a40      	ldr	r2, [pc, #256]	@ (8003248 <FreeRTOS_setsockopt+0x2a4>)
					   if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 8003146:	bf18      	it	ne
 8003148:	2301      	movne	r3, #1
					   pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 800314a:	400a      	ands	r2, r1
					   pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 800314c:	2101      	movs	r1, #1
					   pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 800314e:	049b      	lsls	r3, r3, #18
					   pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 8003150:	f8ac 1048 	strh.w	r1, [ip, #72]	@ 0x48
					   pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 8003154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003158:	4313      	orrs	r3, r2
 800315a:	f8cc 3040 	str.w	r3, [ip, #64]	@ 0x40
					   ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800315e:	f7fe ffaf 	bl	80020c0 <xSendEventToIPTask>
					break;
 8003162:	e7b0      	b.n	80030c6 <FreeRTOS_setsockopt+0x122>
					   if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8003164:	f890 2027 	ldrb.w	r2, [r0, #39]	@ 0x27
 8003168:	2a06      	cmp	r2, #6
 800316a:	d157      	bne.n	800321c <FreeRTOS_setsockopt+0x278>
					   if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800316c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003170:	4293      	cmp	r3, r2
 8003172:	d94f      	bls.n	8003214 <FreeRTOS_setsockopt+0x270>
 8003174:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 8003176:	4299      	cmp	r1, r3
 8003178:	d34c      	bcc.n	8003214 <FreeRTOS_setsockopt+0x270>
					   pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 800317a:	e9c0 2319 	strd	r2, r3, [r0, #100]	@ 0x64
				   break;
 800317e:	e7a2      	b.n	80030c6 <FreeRTOS_setsockopt+0x122>
			pxSocket->xReceiveBlockTime = *( ( const TickType_t * ) pvOptionValue );
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	61c3      	str	r3, [r0, #28]
			break;
 8003184:	e79f      	b.n	80030c6 <FreeRTOS_setsockopt+0x122>
				pxSocket->ucSocketOptions &= ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT );
 8003186:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
			if( pvOptionValue == NULL )
 800318a:	b37b      	cbz	r3, 80031ec <FreeRTOS_setsockopt+0x248>
				pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800318c:	f042 0202 	orr.w	r2, r2, #2
 8003190:	f880 2026 	strb.w	r2, [r0, #38]	@ 0x26
 8003194:	e797      	b.n	80030c6 <FreeRTOS_setsockopt+0x122>
	switch( lOptionName )
 8003196:	f06f 006c 	mvn.w	r0, #108	@ 0x6c
} /* Tested */
 800319a:	bd08      	pop	{r3, pc}
						   pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE;
 800319c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80031a0:	f363 1204 	bfi	r2, r3, #4, #1
 80031a4:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
 80031a8:	e78d      	b.n	80030c6 <FreeRTOS_setsockopt+0x122>
						   pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE;
 80031aa:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80031ae:	f363 02c3 	bfi	r2, r3, #3, #1
 80031b2:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
 80031b6:	e786      	b.n	80030c6 <FreeRTOS_setsockopt+0x122>
		else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 80031b8:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 80031ba:	2a00      	cmp	r2, #0
 80031bc:	d13b      	bne.n	8003236 <FreeRTOS_setsockopt+0x292>
 80031be:	681b      	ldr	r3, [r3, #0]
				ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 80031c0:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 80031c4:	3b01      	subs	r3, #1
 80031c6:	4413      	add	r3, r2
 80031c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80031cc:	fb02 f303 	mul.w	r3, r2, r3
				pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 80031d0:	6703      	str	r3, [r0, #112]	@ 0x70
 80031d2:	e778      	b.n	80030c6 <FreeRTOS_setsockopt+0x122>
							   pxSocket->u.xUDP.pxHandleSent = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( F_TCP_UDP_Handler_t, pvOptionValue )->pxOnUDPSent;
 80031d4:	f8cc 3050 	str.w	r3, [ip, #80]	@ 0x50
							   break;
 80031d8:	e775      	b.n	80030c6 <FreeRTOS_setsockopt+0x122>
								   pxSocket->u.xTCP.pxHandleSent = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( F_TCP_UDP_Handler_t, pvOptionValue )->pxOnTCPSent;
 80031da:	f8cc 30d0 	str.w	r3, [ip, #208]	@ 0xd0
								   break;
 80031de:	e772      	b.n	80030c6 <FreeRTOS_setsockopt+0x122>
								   pxSocket->u.xTCP.pxHandleReceive = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( F_TCP_UDP_Handler_t, pvOptionValue )->pxOnTCPReceive;
 80031e0:	f8cc 30cc 	str.w	r3, [ip, #204]	@ 0xcc
								   break;
 80031e4:	e76f      	b.n	80030c6 <FreeRTOS_setsockopt+0x122>
							   pxSocket->u.xUDP.pxHandleReceive = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( F_TCP_UDP_Handler_t, pvOptionValue )->pxOnUDPReceive;
 80031e6:	f8cc 304c 	str.w	r3, [ip, #76]	@ 0x4c
							   break;
 80031ea:	e76c      	b.n	80030c6 <FreeRTOS_setsockopt+0x122>
				pxSocket->ucSocketOptions &= ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT );
 80031ec:	f022 0202 	bic.w	r2, r2, #2
 80031f0:	f880 2026 	strb.w	r2, [r0, #38]	@ 0x26
 80031f4:	e767      	b.n	80030c6 <FreeRTOS_setsockopt+0x122>
						   FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: buffer already created\n" ) );
 80031f6:	4815      	ldr	r0, [pc, #84]	@ (800324c <FreeRTOS_setsockopt+0x2a8>)
 80031f8:	f009 fe20 	bl	800ce3c <lUDPLoggingPrintf>
		return xReturn;
 80031fc:	f06f 0015 	mvn.w	r0, #21
} /* Tested */
 8003200:	bd08      	pop	{r3, pc}
			FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
 8003202:	4b13      	ldr	r3, [pc, #76]	@ (8003250 <FreeRTOS_setsockopt+0x2ac>)
 8003204:	4913      	ldr	r1, [pc, #76]	@ (8003254 <FreeRTOS_setsockopt+0x2b0>)
 8003206:	4814      	ldr	r0, [pc, #80]	@ (8003258 <FreeRTOS_setsockopt+0x2b4>)
 8003208:	2a04      	cmp	r2, #4
 800320a:	bf08      	it	eq
 800320c:	4619      	moveq	r1, r3
 800320e:	f009 fe15 	bl	800ce3c <lUDPLoggingPrintf>
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8003212:	e7f3      	b.n	80031fc <FreeRTOS_setsockopt+0x258>
						   FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
 8003214:	4811      	ldr	r0, [pc, #68]	@ (800325c <FreeRTOS_setsockopt+0x2b8>)
 8003216:	f009 fe11 	bl	800ce3c <lUDPLoggingPrintf>
						   break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800321a:	e7ef      	b.n	80031fc <FreeRTOS_setsockopt+0x258>
						   FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
 800321c:	4810      	ldr	r0, [pc, #64]	@ (8003260 <FreeRTOS_setsockopt+0x2bc>)
 800321e:	f009 fe0d 	bl	800ce3c <lUDPLoggingPrintf>
						   break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 8003222:	e7eb      	b.n	80031fc <FreeRTOS_setsockopt+0x258>
						   FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
 8003224:	480f      	ldr	r0, [pc, #60]	@ (8003264 <FreeRTOS_setsockopt+0x2c0>)
 8003226:	f009 fe09 	bl	800ce3c <lUDPLoggingPrintf>
						   break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800322a:	e7e7      	b.n	80031fc <FreeRTOS_setsockopt+0x258>
			FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
 800322c:	4909      	ldr	r1, [pc, #36]	@ (8003254 <FreeRTOS_setsockopt+0x2b0>)
 800322e:	480e      	ldr	r0, [pc, #56]	@ (8003268 <FreeRTOS_setsockopt+0x2c4>)
 8003230:	f009 fe04 	bl	800ce3c <lUDPLoggingPrintf>
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8003234:	e7e2      	b.n	80031fc <FreeRTOS_setsockopt+0x258>
			FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
 8003236:	4906      	ldr	r1, [pc, #24]	@ (8003250 <FreeRTOS_setsockopt+0x2ac>)
 8003238:	e7f9      	b.n	800322e <FreeRTOS_setsockopt+0x28a>
		return xReturn;
 800323a:	f06f 0015 	mvn.w	r0, #21
} /* Tested */
 800323e:	4770      	bx	lr
								   pxSocket->u.xTCP.pxHandleConnected = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( F_TCP_UDP_Handler_t, pvOptionValue )->pxOnTCPConnected;
 8003240:	f8cc 30d4 	str.w	r3, [ip, #212]	@ 0xd4
								   break;
 8003244:	e73f      	b.n	80030c6 <FreeRTOS_setsockopt+0x122>
 8003246:	bf00      	nop
 8003248:	fffbfeff 	.word	0xfffbfeff
 800324c:	0800f1e0 	.word	0x0800f1e0
 8003250:	0800f108 	.word	0x0800f108
 8003254:	0800f10c 	.word	0x0800f10c
 8003258:	0800f170 	.word	0x0800f170
 800325c:	0800f144 	.word	0x0800f144
 8003260:	0800f110 	.word	0x0800f110
 8003264:	0800f1bc 	.word	0x0800f1bc
 8003268:	0800f194 	.word	0x0800f194

0800326c <pxUDPSocketLookup>:
{
 800326c:	b510      	push	{r4, lr}
 800326e:	4604      	mov	r4, r0
	if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 8003270:	f7ff fafc 	bl	800286c <xIPIsNetworkTaskReady>
 8003274:	b178      	cbz	r0, 8003296 <pxUDPSocketLookup+0x2a>
		for( pxIterator = listGET_NEXT( pxEnd );
 8003276:	490c      	ldr	r1, [pc, #48]	@ (80032a8 <pxUDPSocketLookup+0x3c>)
 8003278:	68cb      	ldr	r3, [r1, #12]
			 pxIterator != pxEnd;
 800327a:	3108      	adds	r1, #8
 800327c:	428b      	cmp	r3, r1
 800327e:	d103      	bne.n	8003288 <pxUDPSocketLookup+0x1c>
 8003280:	e009      	b.n	8003296 <pxUDPSocketLookup+0x2a>
			 pxIterator = listGET_NEXT( pxIterator ) )
 8003282:	685b      	ldr	r3, [r3, #4]
			 pxIterator != pxEnd;
 8003284:	428b      	cmp	r3, r1
 8003286:	d006      	beq.n	8003296 <pxUDPSocketLookup+0x2a>
			if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	4294      	cmp	r4, r2
 800328c:	d1f9      	bne.n	8003282 <pxUDPSocketLookup+0x16>
		pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxListItem ) );
 800328e:	68dc      	ldr	r4, [r3, #12]
		configASSERT( pxSocket != NULL );
 8003290:	b124      	cbz	r4, 800329c <pxUDPSocketLookup+0x30>
}
 8003292:	4620      	mov	r0, r4
 8003294:	bd10      	pop	{r4, pc}
	FreeRTOS_Socket_t * pxSocket = NULL;
 8003296:	2400      	movs	r4, #0
}
 8003298:	4620      	mov	r0, r4
 800329a:	bd10      	pop	{r4, pc}
		configASSERT( pxSocket != NULL );
 800329c:	f640 018e 	movw	r1, #2190	@ 0x88e
 80032a0:	4802      	ldr	r0, [pc, #8]	@ (80032ac <pxUDPSocketLookup+0x40>)
 80032a2:	f7fd fdd7 	bl	8000e54 <vAssertCalled>
 80032a6:	e7f4      	b.n	8003292 <pxUDPSocketLookup+0x26>
 80032a8:	2000037c 	.word	0x2000037c
 80032ac:	0800efc4 	.word	0x0800efc4

080032b0 <FreeRTOS_inet_ntoa>:
{
 80032b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032b4:	b085      	sub	sp, #20
	socklen_t uxIndex = 0;
 80032b6:	f04f 0c00 	mov.w	ip, #0
			pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 80032ba:	4c2c      	ldr	r4, [pc, #176]	@ (800336c <FreeRTOS_inet_ntoa+0xbc>)
			pcBuffer[ uxIndex ] = '.';
 80032bc:	262e      	movs	r6, #46	@ 0x2e
{
 80032be:	9001      	str	r0, [sp, #4]
 80032c0:	f10d 0e04 	add.w	lr, sp, #4
 80032c4:	ad02      	add	r5, sp, #8
 80032c6:	f10d 000f 	add.w	r0, sp, #15
		uint8_t ucValue = pucAddress[ uxNibble ];
 80032ca:	f81e 2b01 	ldrb.w	r2, [lr], #1
			pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 80032ce:	fba4 7302 	umull	r7, r3, r4, r2
			if( pucDigits[ uxSource ] != 0U )
 80032d2:	2a63      	cmp	r2, #99	@ 0x63
			pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 80032d4:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80032d8:	eb03 0883 	add.w	r8, r3, r3, lsl #2
			ucValue /= ( uint8_t ) 10U;
 80032dc:	b2df      	uxtb	r7, r3
			pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 80032de:	eba2 0348 	sub.w	r3, r2, r8, lsl #1
 80032e2:	f88d 300e 	strb.w	r3, [sp, #14]
 80032e6:	fba4 8307 	umull	r8, r3, r4, r7
 80032ea:	ea4f 03d3 	mov.w	r3, r3, lsr #3
		pucDigits[ 0 ] = ucValue;
 80032ee:	f88d 300c 	strb.w	r3, [sp, #12]
			pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 80032f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80032f6:	eba7 0343 	sub.w	r3, r7, r3, lsl #1
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	f88d 300d 	strb.w	r3, [sp, #13]
			if( pucDigits[ uxSource ] != 0U )
 8003300:	d827      	bhi.n	8003352 <FreeRTOS_inet_ntoa+0xa2>
		for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 8003302:	2b00      	cmp	r3, #0
		if( ( uxIndex + uxNeeded ) > uxSize )
 8003304:	f10c 0804 	add.w	r8, ip, #4
		for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 8003308:	bf0c      	ite	eq
 800330a:	f04f 0902 	moveq.w	r9, #2
 800330e:	f04f 0901 	movne.w	r9, #1
		if( ( uxIndex + uxNeeded ) > uxSize )
 8003312:	eba8 0809 	sub.w	r8, r8, r9
 8003316:	f1b8 0f10 	cmp.w	r8, #16
 800331a:	d823      	bhi.n	8003364 <FreeRTOS_inet_ntoa+0xb4>
 800331c:	ab03      	add	r3, sp, #12
 800331e:	eb01 070c 	add.w	r7, r1, ip
 8003322:	eb03 0209 	add.w	r2, r3, r9
			pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 8003326:	f812 3b01 	ldrb.w	r3, [r2], #1
 800332a:	3330      	adds	r3, #48	@ 0x30
		for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800332c:	4290      	cmp	r0, r2
			pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800332e:	f807 3b01 	strb.w	r3, [r7], #1
		for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 8003332:	d1f8      	bne.n	8003326 <FreeRTOS_inet_ntoa+0x76>
 8003334:	f10c 0303 	add.w	r3, ip, #3
		if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 8003338:	45ae      	cmp	lr, r5
			uxIndex++;
 800333a:	eba3 0309 	sub.w	r3, r3, r9
		if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800333e:	d002      	beq.n	8003346 <FreeRTOS_inet_ntoa+0x96>
		uxIndex++;
 8003340:	46c4      	mov	ip, r8
			pcBuffer[ uxIndex ] = '.';
 8003342:	54ce      	strb	r6, [r1, r3]
	for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 8003344:	e7c1      	b.n	80032ca <FreeRTOS_inet_ntoa+0x1a>
			pcBuffer[ uxIndex ] = '\0';
 8003346:	2200      	movs	r2, #0
	const char * pcResult = pcBuffer;
 8003348:	4608      	mov	r0, r1
			pcBuffer[ uxIndex ] = '\0';
 800334a:	54ca      	strb	r2, [r1, r3]
}
 800334c:	b005      	add	sp, #20
 800334e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 8003352:	f04f 0900 	mov.w	r9, #0
		if( ( uxIndex + uxNeeded ) > uxSize )
 8003356:	f10c 0804 	add.w	r8, ip, #4
 800335a:	eba8 0809 	sub.w	r8, r8, r9
 800335e:	f1b8 0f10 	cmp.w	r8, #16
 8003362:	d9db      	bls.n	800331c <FreeRTOS_inet_ntoa+0x6c>
			pcResult = NULL;
 8003364:	2000      	movs	r0, #0
}
 8003366:	b005      	add	sp, #20
 8003368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800336c:	cccccccd 	.word	0xcccccccd

08003370 <FreeRTOS_inet_ntop>:
	if( uxSize < 16U )
 8003370:	2b0f      	cmp	r3, #15
 8003372:	d901      	bls.n	8003378 <FreeRTOS_inet_ntop+0x8>
 8003374:	2802      	cmp	r0, #2
 8003376:	d001      	beq.n	800337c <FreeRTOS_inet_ntop+0xc>
			pcResult = NULL;
 8003378:	2000      	movs	r0, #0
}
 800337a:	4770      	bx	lr
		( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 800337c:	468c      	mov	ip, r1
		( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 800337e:	4611      	mov	r1, r2
{
 8003380:	b508      	push	{r3, lr}
		( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 8003382:	f8dc 0000 	ldr.w	r0, [ip]
 8003386:	f7ff ff93 	bl	80032b0 <FreeRTOS_inet_ntoa>
		pcReturn = pcDestination;
 800338a:	4608      	mov	r0, r1
}
 800338c:	bd08      	pop	{r3, pc}
 800338e:	bf00      	nop

08003390 <vSocketWakeUpUser>:
{
 8003390:	b510      	push	{r4, lr}
 8003392:	4604      	mov	r4, r0
			if( pxSocket->pxUserSemaphore != NULL )
 8003394:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003396:	b120      	cbz	r0, 80033a2 <vSocketWakeUpUser+0x12>
				( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 8003398:	2300      	movs	r3, #0
 800339a:	461a      	mov	r2, r3
 800339c:	4619      	mov	r1, r3
 800339e:	f005 f9d7 	bl	8008750 <xQueueGenericSend>
			if( pxSocket->pxSocketSet != NULL )
 80033a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
				EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 80033a4:	6823      	ldr	r3, [r4, #0]
			if( pxSocket->pxSocketSet != NULL )
 80033a6:	b122      	cbz	r2, 80033b2 <vSocketWakeUpUser+0x22>
				if( xSelectBits != 0UL )
 80033a8:	f413 6f70 	tst.w	r3, #3840	@ 0xf00
				EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 80033ac:	f3c3 2103 	ubfx	r1, r3, #8, #4
				if( xSelectBits != 0UL )
 80033b0:	d10d      	bne.n	80033ce <vSocketWakeUpUser+0x3e>
			pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 80033b2:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
	if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 80033b6:	6860      	ldr	r0, [r4, #4]
			pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 80033b8:	6021      	str	r1, [r4, #0]
	if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 80033ba:	b101      	cbz	r1, 80033be <vSocketWakeUpUser+0x2e>
 80033bc:	b910      	cbnz	r0, 80033c4 <vSocketWakeUpUser+0x34>
	pxSocket->xEventBits = 0UL;
 80033be:	2300      	movs	r3, #0
 80033c0:	6023      	str	r3, [r4, #0]
}
 80033c2:	bd10      	pop	{r4, pc}
		( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 80033c4:	f005 f802 	bl	80083cc <xEventGroupSetBits>
	pxSocket->xEventBits = 0UL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	6023      	str	r3, [r4, #0]
}
 80033cc:	bd10      	pop	{r4, pc}
					pxSocket->xSocketBits |= xSelectBits;
 80033ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
					( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 80033d0:	6810      	ldr	r0, [r2, #0]
					pxSocket->xSocketBits |= xSelectBits;
 80033d2:	430b      	orrs	r3, r1
 80033d4:	6363      	str	r3, [r4, #52]	@ 0x34
					( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 80033d6:	f004 fff9 	bl	80083cc <xEventGroupSetBits>
			pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	e7e9      	b.n	80033b2 <vSocketWakeUpUser+0x22>
 80033de:	bf00      	nop

080033e0 <FreeRTOS_connect>:
		if( pxAddress == NULL )
 80033e0:	2900      	cmp	r1, #0
 80033e2:	d07a      	beq.n	80034da <FreeRTOS_connect+0xfa>
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 80033e4:	1e43      	subs	r3, r0, #1
 80033e6:	3303      	adds	r3, #3
	{
 80033e8:	b530      	push	{r4, r5, lr}
 80033ea:	4604      	mov	r4, r0
 80033ec:	b087      	sub	sp, #28
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 80033ee:	d903      	bls.n	80033f8 <FreeRTOS_connect+0x18>
 80033f0:	f06f 0008 	mvn.w	r0, #8
	}
 80033f4:	b007      	add	sp, #28
 80033f6:	bd30      	pop	{r4, r5, pc}
	else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 80033f8:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
 80033fc:	2b06      	cmp	r3, #6
 80033fe:	d1f7      	bne.n	80033f0 <FreeRTOS_connect+0x10>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
		}
		else
		{
			if( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED )
 8003400:	f890 3053 	ldrb.w	r3, [r0, #83]	@ 0x53
			{
				if( pxSocket->u.xTCP.ucTCPState < ( uint8_t ) eCLOSE_WAIT )
 8003404:	1f5a      	subs	r2, r3, #5
 8003406:	2a02      	cmp	r2, #2
 8003408:	d959      	bls.n	80034be <FreeRTOS_connect+0xde>
		else if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800340a:	6982      	ldr	r2, [r0, #24]
 800340c:	460d      	mov	r5, r1
 800340e:	2a00      	cmp	r2, #0
 8003410:	d058      	beq.n	80034c4 <FreeRTOS_connect+0xe4>
		switch( eState )
 8003412:	2b02      	cmp	r3, #2
 8003414:	d005      	beq.n	8003422 <FreeRTOS_connect+0x42>
 8003416:	f013 03f7 	ands.w	r3, r3, #247	@ 0xf7
 800341a:	d006      	beq.n	800342a <FreeRTOS_connect+0x4a>
						xResult = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800341c:	f06f 000a 	mvn.w	r0, #10
 8003420:	e7e8      	b.n	80033f4 <FreeRTOS_connect+0x14>
		switch( eState )
 8003422:	f06f 0076 	mvn.w	r0, #118	@ 0x76
	}
 8003426:	b007      	add	sp, #28
 8003428:	bd30      	pop	{r4, r5, pc}
				pxSocket->u.xTCP.bits.bConnPrepared = pdFALSE;
 800342a:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
				pxSocket->u.xTCP.ucRepCount = 0U;
 800342e:	f884 3052 	strb.w	r3, [r4, #82]	@ 0x52
				pxSocket->u.xTCP.bits.bConnPrepared = pdFALSE;
 8003432:	f363 02c3 	bfi	r2, r3, #3, #1
				FreeRTOS_debug_printf( ( "FreeRTOS_connect: %u to %lxip:%u\n",
 8003436:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
 8003438:	4829      	ldr	r0, [pc, #164]	@ (80034e0 <FreeRTOS_connect+0x100>)
				pxSocket->u.xTCP.bits.bConnPrepared = pdFALSE;
 800343a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
				FreeRTOS_debug_printf( ( "FreeRTOS_connect: %u to %lxip:%u\n",
 800343e:	886b      	ldrh	r3, [r5, #2]
 8003440:	686a      	ldr	r2, [r5, #4]
 8003442:	ba5b      	rev16	r3, r3
 8003444:	ba12      	rev	r2, r2
 8003446:	b29b      	uxth	r3, r3
 8003448:	f009 fcf8 	bl	800ce3c <lUDPLoggingPrintf>
				pxSocket->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxAddress->sin_port );
 800344c:	886b      	ldrh	r3, [r5, #2]
				vTCPStateChange( pxSocket, eCONNECT_SYN );
 800344e:	2102      	movs	r1, #2
 8003450:	4620      	mov	r0, r4
				pxSocket->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxAddress->sin_port );
 8003452:	ba5b      	rev16	r3, r3
 8003454:	87a3      	strh	r3, [r4, #60]	@ 0x3c
				pxSocket->u.xTCP.ulRemoteIP = FreeRTOS_ntohl( pxAddress->sin_addr );
 8003456:	686b      	ldr	r3, [r5, #4]
 8003458:	ba1b      	rev	r3, r3
 800345a:	63a3      	str	r3, [r4, #56]	@ 0x38
				vTCPStateChange( pxSocket, eCONNECT_SYN );
 800345c:	f000 ff4e 	bl	80042fc <vTCPStateChange>
				pxSocket->u.xTCP.usTimeout = 1U;
 8003460:	2301      	movs	r3, #1
				if( xSendEventToIPTask( eTCPTimerEvent ) != pdPASS )
 8003462:	2006      	movs	r0, #6
				pxSocket->u.xTCP.usTimeout = 1U;
 8003464:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
				if( xSendEventToIPTask( eTCPTimerEvent ) != pdPASS )
 8003468:	f7fe fe2a 	bl	80020c0 <xSendEventToIPTask>
 800346c:	2801      	cmp	r0, #1
 800346e:	d131      	bne.n	80034d4 <FreeRTOS_connect+0xf4>
					xRemainingTime = pxSocket->xReceiveBlockTime;
 8003470:	69e3      	ldr	r3, [r4, #28]
 8003472:	9303      	str	r3, [sp, #12]
					if( xRemainingTime == ( TickType_t ) 0 )
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0d1      	beq.n	800341c <FreeRTOS_connect+0x3c>
					vTaskSetTimeOutState( &xTimeOut );
 8003478:	a804      	add	r0, sp, #16
 800347a:	f006 f897 	bl	80095ac <vTaskSetTimeOutState>
 800347e:	e00a      	b.n	8003496 <FreeRTOS_connect+0xb6>
				if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 8003480:	f006 f8bc 	bl	80095fc <xTaskCheckForTimeOut>
				( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_CONNECT, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
 8003484:	2201      	movs	r2, #1
 8003486:	2108      	movs	r1, #8
				if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 8003488:	4603      	mov	r3, r0
 800348a:	b9a8      	cbnz	r0, 80034b8 <FreeRTOS_connect+0xd8>
				( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_CONNECT, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
 800348c:	9d03      	ldr	r5, [sp, #12]
 800348e:	6860      	ldr	r0, [r4, #4]
 8003490:	9500      	str	r5, [sp, #0]
 8003492:	f004 feed 	bl	8008270 <xEventGroupWaitBits>
		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8003496:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
				if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800349a:	a903      	add	r1, sp, #12
 800349c:	a804      	add	r0, sp, #16
		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800349e:	2b06      	cmp	r3, #6
 80034a0:	d107      	bne.n	80034b2 <FreeRTOS_connect+0xd2>
				if( pxSocket->u.xTCP.ucTCPState < ( uint8_t ) eCLOSE_WAIT )
 80034a2:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 80034a6:	3b05      	subs	r3, #5
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d8e9      	bhi.n	8003480 <FreeRTOS_connect+0xa0>
					xResult = 0;
 80034ac:	2000      	movs	r0, #0
	}
 80034ae:	b007      	add	sp, #28
 80034b0:	bd30      	pop	{r4, r5, pc}
			xResult = -pdFREERTOS_ERRNO_EINVAL;
 80034b2:	f06f 0015 	mvn.w	r0, #21
 80034b6:	e79d      	b.n	80033f4 <FreeRTOS_connect+0x14>
					xResult = -pdFREERTOS_ERRNO_ETIMEDOUT;
 80034b8:	f06f 0073 	mvn.w	r0, #115	@ 0x73
		return xResult;
 80034bc:	e79a      	b.n	80033f4 <FreeRTOS_connect+0x14>
			xResult = -pdFREERTOS_ERRNO_EISCONN;
 80034be:	f06f 007e 	mvn.w	r0, #126	@ 0x7e
 80034c2:	e797      	b.n	80033f4 <FreeRTOS_connect+0x14>
			xResult = FreeRTOS_bind( pxSocket, NULL, 0U );
 80034c4:	4611      	mov	r1, r2
 80034c6:	f7ff fb3b 	bl	8002b40 <FreeRTOS_bind>
		if( xResult == 0 )
 80034ca:	2800      	cmp	r0, #0
 80034cc:	d192      	bne.n	80033f4 <FreeRTOS_connect+0x14>
		eIPTCPState_t eState = ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState );
 80034ce:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 80034d2:	e79e      	b.n	8003412 <FreeRTOS_connect+0x32>
					xResult = -pdFREERTOS_ERRNO_ECANCELED;
 80034d4:	f06f 008b 	mvn.w	r0, #139	@ 0x8b
 80034d8:	e78c      	b.n	80033f4 <FreeRTOS_connect+0x14>
			xResult = -pdFREERTOS_ERRNO_EINVAL;
 80034da:	f06f 0015 	mvn.w	r0, #21
	}
 80034de:	4770      	bx	lr
 80034e0:	0800f20c 	.word	0x0800f20c

080034e4 <FreeRTOS_recv>:
	{
 80034e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034e8:	461e      	mov	r6, r3
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 80034ea:	1e43      	subs	r3, r0, #1
	{
 80034ec:	b086      	sub	sp, #24
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 80034ee:	3303      	adds	r3, #3
 80034f0:	d806      	bhi.n	8003500 <FreeRTOS_recv+0x1c>
	else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 80034f2:	6983      	ldr	r3, [r0, #24]
 80034f4:	4605      	mov	r5, r0
 80034f6:	b11b      	cbz	r3, 8003500 <FreeRTOS_recv+0x1c>
	else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 80034f8:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
 80034fc:	2b06      	cmp	r3, #6
 80034fe:	d004      	beq.n	800350a <FreeRTOS_recv+0x26>
			xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 8003500:	f06f 0015 	mvn.w	r0, #21
	}
 8003504:	b006      	add	sp, #24
 8003506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		else if( ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) != 0U ) &&
 800350a:	460f      	mov	r7, r1
 800350c:	4690      	mov	r8, r2
 800350e:	b909      	cbnz	r1, 8003514 <FreeRTOS_recv+0x30>
 8003510:	07f2      	lsls	r2, r6, #31
 8003512:	d4f5      	bmi.n	8003500 <FreeRTOS_recv+0x1c>
			if( pxSocket->u.xTCP.rxStream != NULL )
 8003514:	f8d5 e074 	ldr.w	lr, [r5, #116]	@ 0x74
 8003518:	f1be 0f00 	cmp.w	lr, #0
 800351c:	d00c      	beq.n	8003538 <FreeRTOS_recv+0x54>
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800351e:	f8de 2010 	ldr.w	r2, [lr, #16]
        size_t uxHead = pxBuffer->uxHead;
 8003522:	f8de 3008 	ldr.w	r3, [lr, #8]
        size_t uxTail = pxBuffer->uxTail;
 8003526:	f8de 0000 	ldr.w	r0, [lr]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800352a:	4413      	add	r3, r2
 800352c:	1a18      	subs	r0, r3, r0
        if( uxCount >= pxBuffer->LENGTH )
 800352e:	4282      	cmp	r2, r0
            uxCount -= pxBuffer->LENGTH;
 8003530:	bf98      	it	ls
 8003532:	1a80      	subls	r0, r0, r2
			while( xByteCount == 0 )
 8003534:	2800      	cmp	r0, #0
 8003536:	d139      	bne.n	80035ac <FreeRTOS_recv+0xc8>
				switch( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) )
 8003538:	f895 3053 	ldrb.w	r3, [r5, #83]	@ 0x53
 800353c:	2b00      	cmp	r3, #0
 800353e:	d07e      	beq.n	800363e <FreeRTOS_recv+0x15a>
 8003540:	3b08      	subs	r3, #8
 8003542:	2b01      	cmp	r3, #1
 8003544:	d97b      	bls.n	800363e <FreeRTOS_recv+0x15a>
					xRemainingTime = pxSocket->xReceiveBlockTime;
 8003546:	69eb      	ldr	r3, [r5, #28]
 8003548:	9303      	str	r3, [sp, #12]
					if( xRemainingTime == ( TickType_t ) 0 )
 800354a:	2b00      	cmp	r3, #0
 800354c:	d042      	beq.n	80035d4 <FreeRTOS_recv+0xf0>
					if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800354e:	06f3      	lsls	r3, r6, #27
 8003550:	d440      	bmi.n	80035d4 <FreeRTOS_recv+0xf0>
					vTaskSetTimeOutState( &xTimeOut );
 8003552:	a804      	add	r0, sp, #16
 8003554:	f006 f82a 	bl	80095ac <vTaskSetTimeOutState>
 8003558:	e007      	b.n	800356a <FreeRTOS_recv+0x86>
				switch( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) )
 800355a:	f895 3053 	ldrb.w	r3, [r5, #83]	@ 0x53
 800355e:	f1a3 0208 	sub.w	r2, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d06b      	beq.n	800363e <FreeRTOS_recv+0x15a>
 8003566:	2a01      	cmp	r2, #1
 8003568:	d969      	bls.n	800363e <FreeRTOS_recv+0x15a>
				if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800356a:	a903      	add	r1, sp, #12
 800356c:	a804      	add	r0, sp, #16
 800356e:	f006 f845 	bl	80095fc <xTaskCheckForTimeOut>
				xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup,
 8003572:	2201      	movs	r2, #1
 8003574:	2161      	movs	r1, #97	@ 0x61
				if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 8003576:	4603      	mov	r3, r0
 8003578:	bb60      	cbnz	r0, 80035d4 <FreeRTOS_recv+0xf0>
				xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup,
 800357a:	9c03      	ldr	r4, [sp, #12]
 800357c:	9400      	str	r4, [sp, #0]
 800357e:	6868      	ldr	r0, [r5, #4]
 8003580:	f004 fe76 	bl	8008270 <xEventGroupWaitBits>
				if( pxSocket->u.xTCP.rxStream != NULL )
 8003584:	f8d5 e074 	ldr.w	lr, [r5, #116]	@ 0x74
 8003588:	f1be 0f00 	cmp.w	lr, #0
 800358c:	d0e5      	beq.n	800355a <FreeRTOS_recv+0x76>
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800358e:	f8de 3010 	ldr.w	r3, [lr, #16]
        size_t uxHead = pxBuffer->uxHead;
 8003592:	f8de 4008 	ldr.w	r4, [lr, #8]
        size_t uxTail = pxBuffer->uxTail;
 8003596:	f8de 0000 	ldr.w	r0, [lr]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800359a:	eb04 0c03 	add.w	ip, r4, r3
 800359e:	ebac 0000 	sub.w	r0, ip, r0
        if( uxCount >= pxBuffer->LENGTH )
 80035a2:	4283      	cmp	r3, r0
            uxCount -= pxBuffer->LENGTH;
 80035a4:	bf98      	it	ls
 80035a6:	1ac0      	subls	r0, r0, r3
			while( xByteCount == 0 )
 80035a8:	2800      	cmp	r0, #0
 80035aa:	d0d6      	beq.n	800355a <FreeRTOS_recv+0x76>
			if( xByteCount > 0 )
 80035ac:	2800      	cmp	r0, #0
 80035ae:	dda9      	ble.n	8003504 <FreeRTOS_recv+0x20>
				if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) == 0U )
 80035b0:	f016 0101 	ands.w	r1, r6, #1
 80035b4:	d12d      	bne.n	8003612 <FreeRTOS_recv+0x12e>
					BaseType_t xIsPeek = ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_PEEK ) != 0U ) ? 1L : 0L;
 80035b6:	f3c6 0680 	ubfx	r6, r6, #2, #1
								 uxStreamBufferGet( pxSocket->u.xTCP.rxStream,
 80035ba:	4643      	mov	r3, r8
 80035bc:	463a      	mov	r2, r7
 80035be:	4670      	mov	r0, lr
 80035c0:	9600      	str	r6, [sp, #0]
 80035c2:	f000 fc4f 	bl	8003e64 <uxStreamBufferGet>
					if( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED )
 80035c6:	f995 3040 	ldrsb.w	r3, [r5, #64]	@ 0x40
								 uxStreamBufferGet( pxSocket->u.xTCP.rxStream,
 80035ca:	4604      	mov	r4, r0
					if( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED )
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	db03      	blt.n	80035d8 <FreeRTOS_recv+0xf4>
					xByteCount = ( BaseType_t )
 80035d0:	4620      	mov	r0, r4
 80035d2:	e797      	b.n	8003504 <FreeRTOS_recv+0x20>
							xByteCount = -pdFREERTOS_ERRNO_ENOTCONN;
 80035d4:	2000      	movs	r0, #0
 80035d6:	e795      	b.n	8003504 <FreeRTOS_recv+0x20>
						size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 80035d8:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
        size_t uxFront = pxBuffer->uxFront;
 80035da:	68d1      	ldr	r1, [r2, #12]
        size_t uxTail = pxBuffer->uxTail;
 80035dc:	6813      	ldr	r3, [r2, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 80035de:	6912      	ldr	r2, [r2, #16]
 80035e0:	4413      	add	r3, r2
 80035e2:	3b01      	subs	r3, #1
 80035e4:	1a5b      	subs	r3, r3, r1
        if( uxCount >= pxBuffer->LENGTH )
 80035e6:	429a      	cmp	r2, r3
            uxCount -= pxBuffer->LENGTH;
 80035e8:	bf98      	it	ls
 80035ea:	1a9b      	subls	r3, r3, r2
						if( uxFrontSpace >= pxSocket->u.xTCP.uxEnoughSpace )
 80035ec:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d8ee      	bhi.n	80035d0 <FreeRTOS_recv+0xec>
							pxSocket->u.xTCP.bits.bLowWater = pdFALSE;
 80035f2:	f8b5 3040 	ldrh.w	r3, [r5, #64]	@ 0x40
							pxSocket->u.xTCP.usTimeout = 1U; /* because bLowWater is cleared. */
 80035f6:	2201      	movs	r2, #1
							( void ) xSendEventToIPTask( eTCPTimerEvent );
 80035f8:	2006      	movs	r0, #6
							pxSocket->u.xTCP.bits.bLowWater = pdFALSE;
 80035fa:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
							pxSocket->u.xTCP.usTimeout = 1U; /* because bLowWater is cleared. */
 80035fe:	f8a5 2048 	strh.w	r2, [r5, #72]	@ 0x48
							pxSocket->u.xTCP.bits.bLowWater = pdFALSE;
 8003602:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003606:	f8a5 3040 	strh.w	r3, [r5, #64]	@ 0x40
							( void ) xSendEventToIPTask( eTCPTimerEvent );
 800360a:	f7fe fd59 	bl	80020c0 <xSendEventToIPTask>
					xByteCount = ( BaseType_t )
 800360e:	4620      	mov	r0, r4
 8003610:	e778      	b.n	8003504 <FreeRTOS_recv+0x20>
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003612:	f8de 0010 	ldr.w	r0, [lr, #16]
                                                   uint8_t ** ppucData )
    {
        size_t uxNextTail = pxBuffer->uxTail;
        size_t uxSize = uxStreamBufferGetSize( pxBuffer );

        *ppucData = pxBuffer->ucArray + uxNextTail;
 8003616:	f10e 0e14 	add.w	lr, lr, #20
        size_t uxNextTail = pxBuffer->uxTail;
 800361a:	f85e 3c14 	ldr.w	r3, [lr, #-20]
        size_t uxHead = pxBuffer->uxHead;
 800361e:	f85e 2c0c 	ldr.w	r2, [lr, #-12]
        size_t uxTail = pxBuffer->uxTail;
 8003622:	f85e 1c14 	ldr.w	r1, [lr, #-20]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003626:	4402      	add	r2, r0
 8003628:	1a52      	subs	r2, r2, r1
        if( uxCount >= pxBuffer->LENGTH )
 800362a:	4290      	cmp	r0, r2
            uxCount -= pxBuffer->LENGTH;
 800362c:	bf98      	it	ls
 800362e:	1a12      	subls	r2, r2, r0

        return FreeRTOS_min_uint32( uxSize, pxBuffer->LENGTH - uxNextTail );
 8003630:	1ac0      	subs	r0, r0, r3
        *ppucData = pxBuffer->ucArray + uxNextTail;
 8003632:	4473      	add	r3, lr
            return ( a <= b ) ? a : b;
 8003634:	4290      	cmp	r0, r2
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	bf28      	it	cs
 800363a:	4610      	movcs	r0, r2
 800363c:	e762      	b.n	8003504 <FreeRTOS_recv+0x20>
						if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800363e:	f895 3042 	ldrb.w	r3, [r5, #66]	@ 0x42
							xByteCount = -pdFREERTOS_ERRNO_ENOMEM;
 8003642:	f013 0f08 	tst.w	r3, #8
 8003646:	bf0c      	ite	eq
 8003648:	f06f 007f 	mvneq.w	r0, #127	@ 0x7f
 800364c:	f06f 000b 	mvnne.w	r0, #11
 8003650:	e758      	b.n	8003504 <FreeRTOS_recv+0x20>
 8003652:	bf00      	nop

08003654 <FreeRTOS_get_tx_head>:
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 8003654:	1e42      	subs	r2, r0, #1
		*pxLength = 0;
 8003656:	2300      	movs	r3, #0
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 8003658:	3203      	adds	r2, #3
		*pxLength = 0;
 800365a:	600b      	str	r3, [r1, #0]
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 800365c:	d803      	bhi.n	8003666 <FreeRTOS_get_tx_head+0x12>
	else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800365e:	f890 2027 	ldrb.w	r2, [r0, #39]	@ 0x27
 8003662:	2a06      	cmp	r2, #6
 8003664:	d001      	beq.n	800366a <FreeRTOS_get_tx_head+0x16>
		uint8_t * pucReturn = NULL;
 8003666:	4618      	mov	r0, r3
		return pucReturn;
 8003668:	4770      	bx	lr
			pxBuffer = pxSocket->u.xTCP.txStream;
 800366a:	6f80      	ldr	r0, [r0, #120]	@ 0x78
			if( pxBuffer != NULL )
 800366c:	b1b0      	cbz	r0, 800369c <FreeRTOS_get_tx_head+0x48>
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800366e:	6902      	ldr	r2, [r0, #16]
	{
 8003670:	b410      	push	{r4}
        size_t uxHead = pxBuffer->uxHead;
 8003672:	6884      	ldr	r4, [r0, #8]
        size_t uxTail = pxBuffer->uxTail;
 8003674:	6803      	ldr	r3, [r0, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8003676:	4413      	add	r3, r2
 8003678:	3b01      	subs	r3, #1
 800367a:	1b1b      	subs	r3, r3, r4
				BaseType_t xRemain = ( BaseType_t ) pxBuffer->LENGTH - ( BaseType_t ) pxBuffer->uxHead;
 800367c:	6884      	ldr	r4, [r0, #8]
        if( uxCount >= pxBuffer->LENGTH )
 800367e:	429a      	cmp	r2, r3
            uxCount -= pxBuffer->LENGTH;
 8003680:	bf98      	it	ls
 8003682:	1a9b      	subls	r3, r3, r2
 8003684:	1b12      	subs	r2, r2, r4
				pucReturn = &( pxBuffer->ucArray[ pxBuffer->uxHead ] );
 8003686:	6884      	ldr	r4, [r0, #8]
        }

        static portINLINE BaseType_t FreeRTOS_min_BaseType( BaseType_t a,
                                                            BaseType_t b )
        {
            return ( a <= b ) ? a : b;
 8003688:	429a      	cmp	r2, r3
 800368a:	bfa8      	it	ge
 800368c:	461a      	movge	r2, r3
 800368e:	f104 0314 	add.w	r3, r4, #20
	}
 8003692:	f85d 4b04 	ldr.w	r4, [sp], #4
				pucReturn = &( pxBuffer->ucArray[ pxBuffer->uxHead ] );
 8003696:	4418      	add	r0, r3
				*pxLength = FreeRTOS_min_BaseType( xSpace, xRemain );
 8003698:	600a      	str	r2, [r1, #0]
	}
 800369a:	4770      	bx	lr
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop

080036a0 <FreeRTOS_send>:
	{
 80036a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a4:	b089      	sub	sp, #36	@ 0x24
 80036a6:	9303      	str	r3, [sp, #12]
		if( pvBuffer != NULL )
 80036a8:	b119      	cbz	r1, 80036b2 <FreeRTOS_send+0x12>
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 80036aa:	1e43      	subs	r3, r0, #1
 80036ac:	4604      	mov	r4, r0
 80036ae:	3303      	adds	r3, #3
 80036b0:	d905      	bls.n	80036be <FreeRTOS_send+0x1e>
		BaseType_t xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 80036b2:	f06f 0b15 	mvn.w	fp, #21
	}
 80036b6:	4658      	mov	r0, fp
 80036b8:	b009      	add	sp, #36	@ 0x24
 80036ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 80036be:	6983      	ldr	r3, [r0, #24]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f6      	beq.n	80036b2 <FreeRTOS_send+0x12>
	else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 80036c4:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
 80036c8:	2b06      	cmp	r3, #6
 80036ca:	d1f2      	bne.n	80036b2 <FreeRTOS_send+0x12>
		else if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 80036cc:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80036d0:	0718      	lsls	r0, r3, #28
 80036d2:	f100 80c3 	bmi.w	800385c <FreeRTOS_send+0x1bc>
		else if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSED ) ||
 80036d6:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 80036da:	4691      	mov	r9, r2
 80036dc:	f1a3 0208 	sub.w	r2, r3, #8
				 ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSE_WAIT ) ||
 80036e0:	2a01      	cmp	r2, #1
 80036e2:	d90a      	bls.n	80036fa <FreeRTOS_send+0x5a>
 80036e4:	b14b      	cbz	r3, 80036fa <FreeRTOS_send+0x5a>
		else if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 80036e6:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
		else if( uxDataLength == 0UL )
 80036ea:	065a      	lsls	r2, r3, #25
 80036ec:	d402      	bmi.n	80036f4 <FreeRTOS_send+0x54>
 80036ee:	f1b9 0f00 	cmp.w	r9, #0
 80036f2:	d108      	bne.n	8003706 <FreeRTOS_send+0x66>
			xResult = 0;
 80036f4:	f04f 0b00 	mov.w	fp, #0
		return xByteCount;
 80036f8:	e7dd      	b.n	80036b6 <FreeRTOS_send+0x16>
			xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 80036fa:	f06f 0b7f 	mvn.w	fp, #127	@ 0x7f
	}
 80036fe:	4658      	mov	r0, fp
 8003700:	b009      	add	sp, #36	@ 0x24
 8003702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if( pxSocket->u.xTCP.txStream == NULL )
 8003706:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8003708:	460f      	mov	r7, r1
 800370a:	2800      	cmp	r0, #0
 800370c:	f000 809e 	beq.w	800384c <FreeRTOS_send+0x1ac>
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8003710:	6902      	ldr	r2, [r0, #16]
			xBytesLeft = ( BaseType_t ) uxDataLength;
 8003712:	46cb      	mov	fp, r9
        size_t uxHead = pxBuffer->uxHead;
 8003714:	6881      	ldr	r1, [r0, #8]
        size_t uxTail = pxBuffer->uxTail;
 8003716:	6803      	ldr	r3, [r0, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8003718:	4413      	add	r3, r2
 800371a:	3b01      	subs	r3, #1
 800371c:	1a5b      	subs	r3, r3, r1
        if( uxCount >= pxBuffer->LENGTH )
 800371e:	429a      	cmp	r2, r3
            uxCount -= pxBuffer->LENGTH;
 8003720:	bf98      	it	ls
 8003722:	1a9b      	subls	r3, r3, r2
			while( xBytesLeft > 0 )
 8003724:	f1b9 0f00 	cmp.w	r9, #0
			xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 8003728:	461a      	mov	r2, r3
			while( xBytesLeft > 0 )
 800372a:	dd2d      	ble.n	8003788 <FreeRTOS_send+0xe8>
			xBytesLeft = ( BaseType_t ) uxDataLength;
 800372c:	464d      	mov	r5, r9
		BaseType_t xTimed = pdFALSE;
 800372e:	f04f 0800 	mov.w	r8, #0
					pxSocket->u.xTCP.usTimeout = 1U;
 8003732:	f04f 0a01 	mov.w	sl, #1
				if( xByteCount > 0 )
 8003736:	2a00      	cmp	r2, #0
 8003738:	dd16      	ble.n	8003768 <FreeRTOS_send+0xc8>
					xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0UL, pucSource, ( size_t ) xByteCount );
 800373a:	4295      	cmp	r5, r2
					if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) && ( xByteCount == xBytesLeft ) )
 800373c:	f894 1040 	ldrb.w	r1, [r4, #64]	@ 0x40
					xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0UL, pucSource, ( size_t ) xByteCount );
 8003740:	462e      	mov	r6, r5
 8003742:	bfa8      	it	ge
 8003744:	4616      	movge	r6, r2
					if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) && ( xByteCount == xBytesLeft ) )
 8003746:	f011 0110 	ands.w	r1, r1, #16
 800374a:	d158      	bne.n	80037fe <FreeRTOS_send+0x15e>
					xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0UL, pucSource, ( size_t ) xByteCount );
 800374c:	4633      	mov	r3, r6
 800374e:	463a      	mov	r2, r7
 8003750:	f000 fb1c 	bl	8003d8c <uxStreamBufferAdd>
 8003754:	4606      	mov	r6, r0
					pxSocket->u.xTCP.usTimeout = 1U;
 8003756:	f8a4 a048 	strh.w	sl, [r4, #72]	@ 0x48
					if( xIsCallingFromIPTask() == pdFALSE )
 800375a:	f7fe fb9b 	bl	8001e94 <xIsCallingFromIPTask>
 800375e:	2800      	cmp	r0, #0
 8003760:	d05b      	beq.n	800381a <FreeRTOS_send+0x17a>
					if( xBytesLeft == 0 )
 8003762:	1bad      	subs	r5, r5, r6
 8003764:	d0a7      	beq.n	80036b6 <FreeRTOS_send+0x16>
					pucSource = &( pucSource[ xByteCount ] );
 8003766:	4437      	add	r7, r6
				if( xTimed == pdFALSE )
 8003768:	f1b8 0f00 	cmp.w	r8, #0
 800376c:	d11b      	bne.n	80037a6 <FreeRTOS_send+0x106>
					xRemainingTime = pxSocket->xSendBlockTime;
 800376e:	6a23      	ldr	r3, [r4, #32]
 8003770:	9305      	str	r3, [sp, #20]
							if( xIsCallingFromIPTask() != pdFALSE )
 8003772:	f7fe fb8f 	bl	8001e94 <xIsCallingFromIPTask>
 8003776:	2800      	cmp	r0, #0
 8003778:	d038      	beq.n	80037ec <FreeRTOS_send+0x14c>
			xByteCount = ( ( BaseType_t ) uxDataLength ) - xBytesLeft;
 800377a:	eba9 0b05 	sub.w	fp, r9, r5
								xRemainingTime = ( TickType_t ) 0;
 800377e:	f8cd 8014 	str.w	r8, [sp, #20]
			if( xByteCount == 0 )
 8003782:	f1bb 0f00 	cmp.w	fp, #0
 8003786:	d196      	bne.n	80036b6 <FreeRTOS_send+0x16>
				if( pxSocket->u.xTCP.ucTCPState > ( uint8_t ) eESTABLISHED )
 8003788:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 800378c:	2b05      	cmp	r3, #5
 800378e:	d8b4      	bhi.n	80036fa <FreeRTOS_send+0x5a>
					if( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 8003790:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
 8003792:	2917      	cmp	r1, #23
 8003794:	d004      	beq.n	80037a0 <FreeRTOS_send+0x100>
						FreeRTOS_debug_printf( ( "FreeRTOS_send: %u -> %lxip:%d: no space\n",
 8003796:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8003798:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800379a:	4832      	ldr	r0, [pc, #200]	@ (8003864 <FreeRTOS_send+0x1c4>)
 800379c:	f009 fb4e 	bl	800ce3c <lUDPLoggingPrintf>
					xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOSPC;
 80037a0:	f06f 0b1b 	mvn.w	fp, #27
 80037a4:	e787      	b.n	80036b6 <FreeRTOS_send+0x16>
					if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 80037a6:	a905      	add	r1, sp, #20
 80037a8:	a806      	add	r0, sp, #24
 80037aa:	f005 ff27 	bl	80095fc <xTaskCheckForTimeOut>
 80037ae:	2800      	cmp	r0, #0
 80037b0:	d149      	bne.n	8003846 <FreeRTOS_send+0x1a6>
				( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_SEND | ( EventBits_t ) eSOCKET_CLOSED,
 80037b2:	9e05      	ldr	r6, [sp, #20]
 80037b4:	2300      	movs	r3, #0
 80037b6:	2201      	movs	r2, #1
 80037b8:	2122      	movs	r1, #34	@ 0x22
 80037ba:	6860      	ldr	r0, [r4, #4]
 80037bc:	f04f 0801 	mov.w	r8, #1
 80037c0:	9600      	str	r6, [sp, #0]
 80037c2:	f004 fd55 	bl	8008270 <xEventGroupWaitBits>
				xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 80037c6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 80037c8:	6902      	ldr	r2, [r0, #16]
        size_t uxHead = pxBuffer->uxHead;
 80037ca:	6881      	ldr	r1, [r0, #8]
        size_t uxTail = pxBuffer->uxTail;
 80037cc:	6803      	ldr	r3, [r0, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 80037ce:	4413      	add	r3, r2
 80037d0:	3b01      	subs	r3, #1
 80037d2:	1a5b      	subs	r3, r3, r1
        if( uxCount >= pxBuffer->LENGTH )
 80037d4:	429a      	cmp	r2, r3
            uxCount -= pxBuffer->LENGTH;
 80037d6:	bf98      	it	ls
 80037d8:	1a9b      	subls	r3, r3, r2
			while( xBytesLeft > 0 )
 80037da:	2d00      	cmp	r5, #0
				xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 80037dc:	461a      	mov	r2, r3
			while( xBytesLeft > 0 )
 80037de:	dcaa      	bgt.n	8003736 <FreeRTOS_send+0x96>
			xByteCount = ( ( BaseType_t ) uxDataLength ) - xBytesLeft;
 80037e0:	eba9 0b05 	sub.w	fp, r9, r5
	}
 80037e4:	4658      	mov	r0, fp
 80037e6:	b009      	add	sp, #36	@ 0x24
 80037e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if( xRemainingTime == ( TickType_t ) 0 )
 80037ec:	9b05      	ldr	r3, [sp, #20]
 80037ee:	b353      	cbz	r3, 8003846 <FreeRTOS_send+0x1a6>
					if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 80037f0:	9b03      	ldr	r3, [sp, #12]
 80037f2:	06db      	lsls	r3, r3, #27
 80037f4:	d427      	bmi.n	8003846 <FreeRTOS_send+0x1a6>
					vTaskSetTimeOutState( &xTimeOut );
 80037f6:	a806      	add	r0, sp, #24
 80037f8:	f005 fed8 	bl	80095ac <vTaskSetTimeOutState>
 80037fc:	e7d9      	b.n	80037b2 <FreeRTOS_send+0x112>
					if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) && ( xByteCount == xBytesLeft ) )
 80037fe:	4295      	cmp	r5, r2
 8003800:	dd0f      	ble.n	8003822 <FreeRTOS_send+0x182>
					xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0UL, pucSource, ( size_t ) xByteCount );
 8003802:	4633      	mov	r3, r6
 8003804:	463a      	mov	r2, r7
 8003806:	2100      	movs	r1, #0
 8003808:	f000 fac0 	bl	8003d8c <uxStreamBufferAdd>
					pxSocket->u.xTCP.usTimeout = 1U;
 800380c:	f8a4 a048 	strh.w	sl, [r4, #72]	@ 0x48
					xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0UL, pucSource, ( size_t ) xByteCount );
 8003810:	4606      	mov	r6, r0
					if( xIsCallingFromIPTask() == pdFALSE )
 8003812:	f7fe fb3f 	bl	8001e94 <xIsCallingFromIPTask>
 8003816:	2800      	cmp	r0, #0
 8003818:	d1a3      	bne.n	8003762 <FreeRTOS_send+0xc2>
						( void ) xSendEventToIPTask( eTCPTimerEvent );
 800381a:	2006      	movs	r0, #6
 800381c:	f7fe fc50 	bl	80020c0 <xSendEventToIPTask>
 8003820:	e79f      	b.n	8003762 <FreeRTOS_send+0xc2>
						vTaskSuspendAll();
 8003822:	f005 fc05 	bl	8009030 <vTaskSuspendAll>
						pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE;
 8003826:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
					xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0UL, pucSource, ( size_t ) xByteCount );
 800382a:	4633      	mov	r3, r6
 800382c:	2100      	movs	r1, #0
						pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE;
 800382e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
					xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0UL, pucSource, ( size_t ) xByteCount );
 8003832:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
						pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE;
 8003834:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
					xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0UL, pucSource, ( size_t ) xByteCount );
 8003838:	463a      	mov	r2, r7
 800383a:	f000 faa7 	bl	8003d8c <uxStreamBufferAdd>
 800383e:	4606      	mov	r6, r0
						( void ) xTaskResumeAll();
 8003840:	f005 fcd4 	bl	80091ec <xTaskResumeAll>
 8003844:	e787      	b.n	8003756 <FreeRTOS_send+0xb6>
			xByteCount = ( ( BaseType_t ) uxDataLength ) - xBytesLeft;
 8003846:	eba9 0b05 	sub.w	fp, r9, r5
 800384a:	e79a      	b.n	8003782 <FreeRTOS_send+0xe2>
			( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 800384c:	2100      	movs	r1, #0
 800384e:	4620      	mov	r0, r4
 8003850:	f7ff f812 	bl	8002878 <prvTCPCreateStream>
			if( pxSocket->u.xTCP.txStream == NULL )
 8003854:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8003856:	2800      	cmp	r0, #0
 8003858:	f47f af5a 	bne.w	8003710 <FreeRTOS_send+0x70>
			xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800385c:	f06f 0b0b 	mvn.w	fp, #11
 8003860:	e729      	b.n	80036b6 <FreeRTOS_send+0x16>
 8003862:	bf00      	nop
 8003864:	0800f230 	.word	0x0800f230

08003868 <FreeRTOS_shutdown>:
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 8003868:	1e42      	subs	r2, r0, #1
 800386a:	3203      	adds	r2, #3
 800386c:	d80a      	bhi.n	8003884 <FreeRTOS_shutdown+0x1c>
	else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800386e:	6982      	ldr	r2, [r0, #24]
	{
 8003870:	b508      	push	{r3, lr}
 8003872:	4603      	mov	r3, r0
	else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 8003874:	b11a      	cbz	r2, 800387e <FreeRTOS_shutdown+0x16>
	else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 8003876:	f890 0027 	ldrb.w	r0, [r0, #39]	@ 0x27
 800387a:	2806      	cmp	r0, #6
 800387c:	d005      	beq.n	800388a <FreeRTOS_shutdown+0x22>
			xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800387e:	f06f 005e 	mvn.w	r0, #94	@ 0x5e
	}
 8003882:	bd08      	pop	{r3, pc}
			xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 8003884:	f06f 005e 	mvn.w	r0, #94	@ 0x5e
	}
 8003888:	4770      	bx	lr
		else if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eESTABLISHED )
 800388a:	f893 2053 	ldrb.w	r2, [r3, #83]	@ 0x53
 800388e:	2a05      	cmp	r2, #5
 8003890:	d1f5      	bne.n	800387e <FreeRTOS_shutdown+0x16>
			pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
 8003892:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
			pxSocket->u.xTCP.usTimeout = 1U;
 8003896:	2101      	movs	r1, #1
			pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
 8003898:	f042 0220 	orr.w	r2, r2, #32
			pxSocket->u.xTCP.usTimeout = 1U;
 800389c:	f8a3 1048 	strh.w	r1, [r3, #72]	@ 0x48
			pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			( void ) xSendEventToIPTask( eTCPTimerEvent );
 80038a4:	f7fe fc0c 	bl	80020c0 <xSendEventToIPTask>
			xResult = 0;
 80038a8:	2000      	movs	r0, #0
	}
 80038aa:	bd08      	pop	{r3, pc}

080038ac <xTCPTimerCheck>:
	{
 80038ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038b0:	4607      	mov	r7, r0
		TickType_t xNow = xTaskGetTickCount();
 80038b2:	f005 fbc5 	bl	8009040 <xTaskGetTickCount>
		TickType_t xDelta = xNow - xLastTime;
 80038b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003928 <xTCPTimerCheck+0x7c>)
		while( pxIterator != pxEnd )
 80038b8:	f44f 797a 	mov.w	r9, #1000	@ 0x3e8
		const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 80038bc:	4b1b      	ldr	r3, [pc, #108]	@ (800392c <xTCPTimerCheck+0x80>)
		TickType_t xDelta = xNow - xLastTime;
 80038be:	6816      	ldr	r6, [r2, #0]
		const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 80038c0:	68dc      	ldr	r4, [r3, #12]
		while( pxIterator != pxEnd )
 80038c2:	f103 0a08 	add.w	sl, r3, #8
		TickType_t xDelta = xNow - xLastTime;
 80038c6:	1b86      	subs	r6, r0, r6
		xLastTime = xNow;
 80038c8:	6010      	str	r0, [r2, #0]
 80038ca:	2e01      	cmp	r6, #1
 80038cc:	bf38      	it	cc
 80038ce:	2601      	movcc	r6, #1
		while( pxIterator != pxEnd )
 80038d0:	4554      	cmp	r4, sl
 80038d2:	d022      	beq.n	800391a <xTCPTimerCheck+0x6e>
				pxSocket->u.xTCP.usTimeout = 0U;
 80038d4:	f04f 0800 	mov.w	r8, #0
 80038d8:	e00e      	b.n	80038f8 <xTCPTimerCheck+0x4c>
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 80038da:	1b9b      	subs	r3, r3, r6
 80038dc:	f8a5 3048 	strh.w	r3, [r5, #72]	@ 0x48
			if( pxSocket->xEventBits != 0U )
 80038e0:	682b      	ldr	r3, [r5, #0]
 80038e2:	b10b      	cbz	r3, 80038e8 <xTCPTimerCheck+0x3c>
				if( xWillSleep != pdFALSE )
 80038e4:	b9e7      	cbnz	r7, 8003920 <xTCPTimerCheck+0x74>
					xShortest = ( TickType_t ) 0;
 80038e6:	46b9      	mov	r9, r7
			if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 80038e8:	f8b5 3048 	ldrh.w	r3, [r5, #72]	@ 0x48
 80038ec:	b113      	cbz	r3, 80038f4 <xTCPTimerCheck+0x48>
 80038ee:	4599      	cmp	r9, r3
 80038f0:	bf28      	it	cs
 80038f2:	4699      	movcs	r9, r3
		while( pxIterator != pxEnd )
 80038f4:	4554      	cmp	r4, sl
 80038f6:	d010      	beq.n	800391a <xTCPTimerCheck+0x6e>
			pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 80038f8:	68e5      	ldr	r5, [r4, #12]
			pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 80038fa:	6864      	ldr	r4, [r4, #4]
			if( pxSocket->u.xTCP.usTimeout == 0U )
 80038fc:	f8b5 3048 	ldrh.w	r3, [r5, #72]	@ 0x48
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f7      	beq.n	80038f4 <xTCPTimerCheck+0x48>
			if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 8003904:	42b3      	cmp	r3, r6
 8003906:	d8e8      	bhi.n	80038da <xTCPTimerCheck+0x2e>
				xRc = xTCPSocketCheck( pxSocket );
 8003908:	4628      	mov	r0, r5
				pxSocket->u.xTCP.usTimeout = 0U;
 800390a:	f8a5 8048 	strh.w	r8, [r5, #72]	@ 0x48
				xRc = xTCPSocketCheck( pxSocket );
 800390e:	f001 f831 	bl	8004974 <xTCPSocketCheck>
				if( xRc < 0 )
 8003912:	2800      	cmp	r0, #0
 8003914:	dae4      	bge.n	80038e0 <xTCPTimerCheck+0x34>
		while( pxIterator != pxEnd )
 8003916:	4554      	cmp	r4, sl
 8003918:	d1ee      	bne.n	80038f8 <xTCPTimerCheck+0x4c>
	}
 800391a:	4648      	mov	r0, r9
 800391c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vSocketWakeUpUser( pxSocket );
 8003920:	4628      	mov	r0, r5
 8003922:	f7ff fd35 	bl	8003390 <vSocketWakeUpUser>
 8003926:	e7df      	b.n	80038e8 <xTCPTimerCheck+0x3c>
 8003928:	20000364 	.word	0x20000364
 800392c:	20000368 	.word	0x20000368

08003930 <pxTCPSocketLookup>:
		for( pxIterator = listGET_NEXT( pxEnd );
 8003930:	4811      	ldr	r0, [pc, #68]	@ (8003978 <pxTCPSocketLookup+0x48>)
	{
 8003932:	b530      	push	{r4, r5, lr}
			 pxIterator != pxEnd;
 8003934:	f100 0c08 	add.w	ip, r0, #8
		for( pxIterator = listGET_NEXT( pxEnd );
 8003938:	68c4      	ldr	r4, [r0, #12]
			 pxIterator != pxEnd;
 800393a:	4564      	cmp	r4, ip
 800393c:	d019      	beq.n	8003972 <pxTCPSocketLookup+0x42>
			if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800393e:	fa1f fe81 	uxth.w	lr, r1
		FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 8003942:	2000      	movs	r0, #0
				else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 8003944:	b29d      	uxth	r5, r3
 8003946:	e002      	b.n	800394e <pxTCPSocketLookup+0x1e>
			 pxIterator = listGET_NEXT( pxIterator ) )
 8003948:	6864      	ldr	r4, [r4, #4]
			 pxIterator != pxEnd;
 800394a:	4564      	cmp	r4, ip
 800394c:	d00e      	beq.n	800396c <pxTCPSocketLookup+0x3c>
			FreeRTOS_Socket_t * pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800394e:	68e3      	ldr	r3, [r4, #12]
			if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 8003950:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
 8003952:	4571      	cmp	r1, lr
 8003954:	d1f8      	bne.n	8003948 <pxTCPSocketLookup+0x18>
				if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 8003956:	f893 1053 	ldrb.w	r1, [r3, #83]	@ 0x53
 800395a:	2901      	cmp	r1, #1
 800395c:	d007      	beq.n	800396e <pxTCPSocketLookup+0x3e>
				else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 800395e:	8f99      	ldrh	r1, [r3, #60]	@ 0x3c
 8003960:	42a9      	cmp	r1, r5
 8003962:	d1f1      	bne.n	8003948 <pxTCPSocketLookup+0x18>
 8003964:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003966:	4291      	cmp	r1, r2
 8003968:	d1ee      	bne.n	8003948 <pxTCPSocketLookup+0x18>
			FreeRTOS_Socket_t * pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800396a:	4618      	mov	r0, r3
	}
 800396c:	bd30      	pop	{r4, r5, pc}
			FreeRTOS_Socket_t * pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800396e:	4618      	mov	r0, r3
 8003970:	e7ea      	b.n	8003948 <pxTCPSocketLookup+0x18>
		FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 8003972:	2000      	movs	r0, #0
	}
 8003974:	bd30      	pop	{r4, r5, pc}
 8003976:	bf00      	nop
 8003978:	20000368 	.word	0x20000368

0800397c <lTCPAddRxdata>:
	{
 800397c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003980:	461c      	mov	r4, r3
			BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 8003982:	f8d0 30cc 	ldr.w	r3, [r0, #204]	@ 0xcc
	{
 8003986:	b086      	sub	sp, #24
 8003988:	4606      	mov	r6, r0
 800398a:	460f      	mov	r7, r1
		StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 800398c:	6f45      	ldr	r5, [r0, #116]	@ 0x74
			BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 800398e:	2b00      	cmp	r3, #0
 8003990:	d060      	beq.n	8003a54 <lTCPAddRxdata+0xd8>
		if( pxStream == NULL )
 8003992:	2d00      	cmp	r5, #0
 8003994:	f000 8082 	beq.w	8003a9c <lTCPAddRxdata+0x120>
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003998:	6929      	ldr	r1, [r5, #16]
        size_t uxHead = pxBuffer->uxHead;
 800399a:	68ab      	ldr	r3, [r5, #8]
        size_t uxTail = pxBuffer->uxTail;
 800399c:	6828      	ldr	r0, [r5, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800399e:	440b      	add	r3, r1
 80039a0:	1a1b      	subs	r3, r3, r0
        if( uxCount >= pxBuffer->LENGTH )
 80039a2:	4299      	cmp	r1, r3
            uxCount -= pxBuffer->LENGTH;
 80039a4:	bf98      	it	ls
 80039a6:	1a5b      	subls	r3, r3, r1
					if( ( bHasHandler != pdFALSE ) && ( uxStreamBufferGetSize( pxStream ) == 0U ) && ( uxOffset == 0UL ) && ( pcData != NULL ) )
 80039a8:	433b      	orrs	r3, r7
 80039aa:	d04e      	beq.n	8003a4a <lTCPAddRxdata+0xce>
 80039ac:	f04f 0a01 	mov.w	sl, #1
			const uint8_t * pucBuffer = NULL;
 80039b0:	f04f 0900 	mov.w	r9, #0
			xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 80039b4:	4623      	mov	r3, r4
 80039b6:	4639      	mov	r1, r7
 80039b8:	4628      	mov	r0, r5
 80039ba:	f000 f9e7 	bl	8003d8c <uxStreamBufferAdd>
					if( xResult != ( int32_t ) ulByteCount )
 80039be:	42a0      	cmp	r0, r4
			xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 80039c0:	4680      	mov	r8, r0
					if( xResult != ( int32_t ) ulByteCount )
 80039c2:	d017      	beq.n	80039f4 <lTCPAddRxdata+0x78>
						FreeRTOS_debug_printf( ( "lTCPAddRxdata: at %u: %d/%u bytes (tail %u head %u space %u front %u)\n",
 80039c4:	6829      	ldr	r1, [r5, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 80039c6:	692a      	ldr	r2, [r5, #16]
 80039c8:	68a8      	ldr	r0, [r5, #8]
        size_t uxFront = pxBuffer->uxFront;
 80039ca:	f8d5 c00c 	ldr.w	ip, [r5, #12]
        size_t uxTail = pxBuffer->uxTail;
 80039ce:	682b      	ldr	r3, [r5, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 80039d0:	4413      	add	r3, r2
 80039d2:	3b01      	subs	r3, #1
 80039d4:	eba3 030c 	sub.w	r3, r3, ip
        if( uxCount >= pxBuffer->LENGTH )
 80039d8:	429a      	cmp	r2, r3
            uxCount -= pxBuffer->LENGTH;
 80039da:	bf98      	it	ls
 80039dc:	1a9b      	subls	r3, r3, r2
 80039de:	68ea      	ldr	r2, [r5, #12]
 80039e0:	9100      	str	r1, [sp, #0]
 80039e2:	4639      	mov	r1, r7
 80039e4:	9203      	str	r2, [sp, #12]
 80039e6:	4642      	mov	r2, r8
 80039e8:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80039ec:	4623      	mov	r3, r4
 80039ee:	483e      	ldr	r0, [pc, #248]	@ (8003ae8 <lTCPAddRxdata+0x16c>)
 80039f0:	f009 fa24 	bl	800ce3c <lUDPLoggingPrintf>
			if( uxOffset == 0U )
 80039f4:	bb2f      	cbnz	r7, 8003a42 <lTCPAddRxdata+0xc6>
					if( bHasHandler != pdFALSE )
 80039f6:	f1ba 0f00 	cmp.w	sl, #0
 80039fa:	d02f      	beq.n	8003a5c <lTCPAddRxdata+0xe0>
							if( pucBuffer != NULL )
 80039fc:	f1b9 0f00 	cmp.w	r9, #0
 8003a00:	d00d      	beq.n	8003a1e <lTCPAddRxdata+0xa2>
							if( ulCount == 0UL )
 8003a02:	b1f4      	cbz	r4, 8003a42 <lTCPAddRxdata+0xc6>
							( void ) pxSocket->u.xTCP.pxHandleReceive( pxSocket, ucReadPtr, ( size_t ) ulCount );
 8003a04:	4622      	mov	r2, r4
 8003a06:	4649      	mov	r1, r9
 8003a08:	f8d6 30cc 	ldr.w	r3, [r6, #204]	@ 0xcc
 8003a0c:	4630      	mov	r0, r6
 8003a0e:	4798      	blx	r3
							( void ) uxStreamBufferGet( pxStream, 0UL, NULL, ( size_t ) ulCount, pdFALSE );
 8003a10:	2200      	movs	r2, #0
 8003a12:	4623      	mov	r3, r4
 8003a14:	4628      	mov	r0, r5
 8003a16:	4611      	mov	r1, r2
 8003a18:	9200      	str	r2, [sp, #0]
 8003a1a:	f000 fa23 	bl	8003e64 <uxStreamBufferGet>
        size_t uxNextTail = pxBuffer->uxTail;
 8003a1e:	682a      	ldr	r2, [r5, #0]
        *ppucData = pxBuffer->ucArray + uxNextTail;
 8003a20:	f105 0914 	add.w	r9, r5, #20
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003a24:	692c      	ldr	r4, [r5, #16]
        size_t uxHead = pxBuffer->uxHead;
 8003a26:	68ab      	ldr	r3, [r5, #8]
        *ppucData = pxBuffer->ucArray + uxNextTail;
 8003a28:	4491      	add	r9, r2
        size_t uxTail = pxBuffer->uxTail;
 8003a2a:	6829      	ldr	r1, [r5, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003a2c:	4423      	add	r3, r4
 8003a2e:	1a5b      	subs	r3, r3, r1
        if( uxCount >= pxBuffer->LENGTH )
 8003a30:	429c      	cmp	r4, r3
            uxCount -= pxBuffer->LENGTH;
 8003a32:	bf98      	it	ls
 8003a34:	1b1b      	subls	r3, r3, r4
        return FreeRTOS_min_uint32( uxSize, pxBuffer->LENGTH - uxNextTail );
 8003a36:	1aa4      	subs	r4, r4, r2
            return ( a <= b ) ? a : b;
 8003a38:	429c      	cmp	r4, r3
 8003a3a:	bf28      	it	cs
 8003a3c:	461c      	movcs	r4, r3
							if( ulCount == 0UL )
 8003a3e:	2c00      	cmp	r4, #0
 8003a40:	d1e0      	bne.n	8003a04 <lTCPAddRxdata+0x88>
	}
 8003a42:	4640      	mov	r0, r8
 8003a44:	b006      	add	sp, #24
 8003a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a4a:	4691      	mov	r9, r2
 8003a4c:	f04f 0a01 	mov.w	sl, #1
						pcData = NULL;
 8003a50:	461a      	mov	r2, r3
 8003a52:	e7af      	b.n	80039b4 <lTCPAddRxdata+0x38>
		if( pxStream == NULL )
 8003a54:	b375      	cbz	r5, 8003ab4 <lTCPAddRxdata+0x138>
			BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 8003a56:	469a      	mov	sl, r3
			const uint8_t * pucBuffer = NULL;
 8003a58:	4699      	mov	r9, r3
 8003a5a:	e7ab      	b.n	80039b4 <lTCPAddRxdata+0x38>
					if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 8003a5c:	f996 3040 	ldrsb.w	r3, [r6, #64]	@ 0x40
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	db0c      	blt.n	8003a7e <lTCPAddRxdata+0x102>
						size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 8003a64:	6f72      	ldr	r2, [r6, #116]	@ 0x74
        size_t uxFront = pxBuffer->uxFront;
 8003a66:	68d1      	ldr	r1, [r2, #12]
        size_t uxTail = pxBuffer->uxTail;
 8003a68:	6813      	ldr	r3, [r2, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8003a6a:	6912      	ldr	r2, [r2, #16]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	1a5b      	subs	r3, r3, r1
        if( uxCount >= pxBuffer->LENGTH )
 8003a72:	429a      	cmp	r2, r3
            uxCount -= pxBuffer->LENGTH;
 8003a74:	bf98      	it	ls
 8003a76:	1a9b      	subls	r3, r3, r2
						if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 8003a78:	6e72      	ldr	r2, [r6, #100]	@ 0x64
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d227      	bcs.n	8003ace <lTCPAddRxdata+0x152>
					pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 8003a7e:	6833      	ldr	r3, [r6, #0]
							if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 8003a80:	6b32      	ldr	r2, [r6, #48]	@ 0x30
					pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 8003a82:	f043 0101 	orr.w	r1, r3, #1
							if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 8003a86:	07d2      	lsls	r2, r2, #31
					pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 8003a88:	6031      	str	r1, [r6, #0]
							if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 8003a8a:	d5da      	bpl.n	8003a42 <lTCPAddRxdata+0xc6>
								pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 8003a8c:	f240 1201 	movw	r2, #257	@ 0x101
	}
 8003a90:	4640      	mov	r0, r8
								pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 8003a92:	431a      	orrs	r2, r3
 8003a94:	6032      	str	r2, [r6, #0]
	}
 8003a96:	b006      	add	sp, #24
 8003a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	9204      	str	r2, [sp, #16]
 8003aa0:	f7fe feea 	bl	8002878 <prvTCPCreateStream>
			if( pxStream == NULL )
 8003aa4:	9a04      	ldr	r2, [sp, #16]
 8003aa6:	4605      	mov	r5, r0
 8003aa8:	2800      	cmp	r0, #0
 8003aaa:	f47f af75 	bne.w	8003998 <lTCPAddRxdata+0x1c>
				xResult = -1;
 8003aae:	f04f 38ff 	mov.w	r8, #4294967295
 8003ab2:	e7c6      	b.n	8003a42 <lTCPAddRxdata+0xc6>
			pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003aba:	f7fe fedd 	bl	8002878 <prvTCPCreateStream>
			if( pxStream == NULL )
 8003abe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	d0f3      	beq.n	8003aae <lTCPAddRxdata+0x132>
			const uint8_t * pucBuffer = NULL;
 8003ac6:	46a9      	mov	r9, r5
			if( pxStream == NULL )
 8003ac8:	469a      	mov	sl, r3
			pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 8003aca:	4605      	mov	r5, r0
 8003acc:	e772      	b.n	80039b4 <lTCPAddRxdata+0x38>
							pxSocket->u.xTCP.bits.bLowWater = pdTRUE;
 8003ace:	f8b6 3040 	ldrh.w	r3, [r6, #64]	@ 0x40
							pxSocket->u.xTCP.usTimeout = 1U;
 8003ad2:	2201      	movs	r2, #1
							( void ) xSendEventToIPTask( eTCPTimerEvent );
 8003ad4:	2006      	movs	r0, #6
							pxSocket->u.xTCP.bits.bLowWater = pdTRUE;
 8003ad6:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
							pxSocket->u.xTCP.usTimeout = 1U;
 8003ada:	f8a6 2048 	strh.w	r2, [r6, #72]	@ 0x48
							pxSocket->u.xTCP.bits.bLowWater = pdTRUE;
 8003ade:	f8a6 3040 	strh.w	r3, [r6, #64]	@ 0x40
							( void ) xSendEventToIPTask( eTCPTimerEvent );
 8003ae2:	f7fe faed 	bl	80020c0 <xSendEventToIPTask>
 8003ae6:	e7ca      	b.n	8003a7e <lTCPAddRxdata+0x102>
 8003ae8:	0800f25c 	.word	0x0800f25c

08003aec <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
	void vTCPNetStat( void )
	{
 8003aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const ListItem_t * pxIterator;
		BaseType_t count = 0;
		size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
		size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();

		if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 8003af0:	4c43      	ldr	r4, [pc, #268]	@ (8003c00 <vTCPNetStat+0x114>)
	{
 8003af2:	b08f      	sub	sp, #60	@ 0x3c
		size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 8003af4:	f002 ff72 	bl	80069dc <uxGetMinimumFreeNetworkBuffers>
 8003af8:	4605      	mov	r5, r0
		size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 8003afa:	f002 ff75 	bl	80069e8 <uxGetNumberOfFreeNetworkBuffers>
		if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 8003afe:	68a3      	ldr	r3, [r4, #8]
 8003b00:	3301      	adds	r3, #1
 8003b02:	d005      	beq.n	8003b10 <vTCPNetStat+0x24>
		{
			FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 8003b04:	483f      	ldr	r0, [pc, #252]	@ (8003c04 <vTCPNetStat+0x118>)
							   ( UBaseType_t ) count,
							   ( UBaseType_t ) uxMinimum,
							   ( UBaseType_t ) uxCurrent,
							   ( BaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
		}
	}
 8003b06:	b00f      	add	sp, #60	@ 0x3c
 8003b08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 8003b0c:	f009 b996 	b.w	800ce3c <lUDPLoggingPrintf>
 8003b10:	4680      	mov	r8, r0
			FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );
 8003b12:	483d      	ldr	r0, [pc, #244]	@ (8003c08 <vTCPNetStat+0x11c>)
 8003b14:	f009 f992 	bl	800ce3c <lUDPLoggingPrintf>
			for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8003b18:	f8d4 900c 	ldr.w	r9, [r4, #12]
				 pxIterator != pxEndTCP;
 8003b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c0c <vTCPNetStat+0x120>)
		BaseType_t count = 0;
 8003b1e:	2600      	movs	r6, #0
				 pxIterator != pxEndTCP;
 8003b20:	4599      	cmp	r9, r3
 8003b22:	d04e      	beq.n	8003bc2 <vTCPNetStat+0xd6>
				FreeRTOS_printf( ( "TCP %5d %-16lxip:%5d %d/%d %-13.13s %6lu %6u%s\n",
 8003b24:	464f      	mov	r7, r9
 8003b26:	46b1      	mov	r9, r6
 8003b28:	e9cd 5808 	strd	r5, r8, [sp, #32]
 8003b2c:	e029      	b.n	8003b82 <vTCPNetStat+0x96>
 8003b2e:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 8003b30:	4610      	mov	r0, r2
 8003b32:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8003b34:	3e00      	subs	r6, #0
 8003b36:	f8b4 a024 	ldrh.w	sl, [r4, #36]	@ 0x24
 8003b3a:	f8b4 803c 	ldrh.w	r8, [r4, #60]	@ 0x3c
 8003b3e:	bf18      	it	ne
 8003b40:	2601      	movne	r6, #1
 8003b42:	f1b2 0b00 	subs.w	fp, r2, #0
 8003b46:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003b48:	bf18      	it	ne
 8003b4a:	f04f 0b01 	movne.w	fp, #1
 8003b4e:	9207      	str	r2, [sp, #28]
 8003b50:	f001 ffc6 	bl	8005ae0 <FreeRTOS_GetTCPStateName>
 8003b54:	ab0a      	add	r3, sp, #40	@ 0x28
 8003b56:	9a07      	ldr	r2, [sp, #28]
 8003b58:	9305      	str	r3, [sp, #20]
 8003b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8003c10 <vTCPNetStat+0x124>)
 8003b5c:	f8b4 1048 	ldrh.w	r1, [r4, #72]	@ 0x48
 8003b60:	429d      	cmp	r5, r3
 8003b62:	9600      	str	r6, [sp, #0]
 8003b64:	bf28      	it	cs
 8003b66:	461d      	movcs	r5, r3
 8003b68:	4643      	mov	r3, r8
 8003b6a:	e9cd b001 	strd	fp, r0, [sp, #4]
 8003b6e:	e9cd 5103 	strd	r5, r1, [sp, #12]
 8003b72:	4828      	ldr	r0, [pc, #160]	@ (8003c14 <vTCPNetStat+0x128>)
 8003b74:	4651      	mov	r1, sl
 8003b76:	f009 f961 	bl	800ce3c <lUDPLoggingPrintf>
				 pxIterator = listGET_NEXT( pxIterator ) )
 8003b7a:	687f      	ldr	r7, [r7, #4]
				 pxIterator != pxEndTCP;
 8003b7c:	4b23      	ldr	r3, [pc, #140]	@ (8003c0c <vTCPNetStat+0x120>)
 8003b7e:	429f      	cmp	r7, r3
 8003b80:	d01c      	beq.n	8003bbc <vTCPNetStat+0xd0>
				const FreeRTOS_Socket_t * pxSocket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8003b82:	68fc      	ldr	r4, [r7, #12]
					TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8003b84:	f005 fa5c 	bl	8009040 <xTaskGetTickCount>
				count++;
 8003b88:	f109 0901 	add.w	r9, r9, #1
					TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8003b8c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
				if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 8003b8e:	f894 2053 	ldrb.w	r2, [r4, #83]	@ 0x53
					TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8003b92:	1ac5      	subs	r5, r0, r3
				char ucChildText[ 16 ] = "";
 8003b94:	2300      	movs	r3, #0
				if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 8003b96:	2a01      	cmp	r2, #1
				char ucChildText[ 16 ] = "";
 8003b98:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8003b9c:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
				if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 8003ba0:	d1c5      	bne.n	8003b2e <vTCPNetStat+0x42>
					const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %u/%u",
 8003ba2:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8003ba6:	2110      	movs	r1, #16
 8003ba8:	f8b4 304e 	ldrh.w	r3, [r4, #78]	@ 0x4e
 8003bac:	a80a      	add	r0, sp, #40	@ 0x28
 8003bae:	9200      	str	r2, [sp, #0]
 8003bb0:	4a19      	ldr	r2, [pc, #100]	@ (8003c18 <vTCPNetStat+0x12c>)
 8003bb2:	f009 fee5 	bl	800d980 <snprintf>
				FreeRTOS_printf( ( "TCP %5d %-16lxip:%5d %d/%d %-13.13s %6lu %6u%s\n",
 8003bb6:	f894 2053 	ldrb.w	r2, [r4, #83]	@ 0x53
 8003bba:	e7b8      	b.n	8003b2e <vTCPNetStat+0x42>
 8003bbc:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
 8003bc0:	464e      	mov	r6, r9
			for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 8003bc2:	4f16      	ldr	r7, [pc, #88]	@ (8003c1c <vTCPNetStat+0x130>)
 8003bc4:	68fc      	ldr	r4, [r7, #12]
				 pxIterator != pxEndUDP;
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	42bc      	cmp	r4, r7
 8003bca:	d00d      	beq.n	8003be8 <vTCPNetStat+0xfc>
				FreeRTOS_printf( ( "UDP Port %5u\n",
 8003bcc:	f8df 9054 	ldr.w	r9, [pc, #84]	@ 8003c24 <vTCPNetStat+0x138>
 8003bd0:	6823      	ldr	r3, [r4, #0]
 8003bd2:	4648      	mov	r0, r9
				count++;
 8003bd4:	3601      	adds	r6, #1
				FreeRTOS_printf( ( "UDP Port %5u\n",
 8003bd6:	0a19      	lsrs	r1, r3, #8
 8003bd8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8003bdc:	b289      	uxth	r1, r1
 8003bde:	f009 f92d 	bl	800ce3c <lUDPLoggingPrintf>
				 pxIterator = listGET_NEXT( pxIterator ) )
 8003be2:	6864      	ldr	r4, [r4, #4]
				 pxIterator != pxEndUDP;
 8003be4:	42bc      	cmp	r4, r7
 8003be6:	d1f3      	bne.n	8003bd0 <vTCPNetStat+0xe4>
			FreeRTOS_printf( ( "FreeRTOS_netstat: %lu sockets %lu < %lu < %ld buffers free\n",
 8003be8:	2440      	movs	r4, #64	@ 0x40
 8003bea:	4643      	mov	r3, r8
 8003bec:	462a      	mov	r2, r5
 8003bee:	4631      	mov	r1, r6
 8003bf0:	9400      	str	r4, [sp, #0]
 8003bf2:	480b      	ldr	r0, [pc, #44]	@ (8003c20 <vTCPNetStat+0x134>)
 8003bf4:	f009 f922 	bl	800ce3c <lUDPLoggingPrintf>
	}
 8003bf8:	b00f      	add	sp, #60	@ 0x3c
 8003bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000368 	.word	0x20000368
 8003c04:	0800f2a4 	.word	0x0800f2a4
 8003c08:	0800f2c0 	.word	0x0800f2c0
 8003c0c:	20000370 	.word	0x20000370
 8003c10:	000f423f 	.word	0x000f423f
 8003c14:	0800f310 	.word	0x0800f310
 8003c18:	0800f308 	.word	0x0800f308
 8003c1c:	2000037c 	.word	0x2000037c
 8003c20:	0800f350 	.word	0x0800f350
 8003c24:	0800f340 	.word	0x0800f340

08003c28 <vSocketSelect>:
				{
					pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
				}
			#endif /* ipconfigUSE_TCP == 1 */

			for( pxIterator = listGET_NEXT( pxEnd );
 8003c28:	4a56      	ldr	r2, [pc, #344]	@ (8003d84 <vSocketSelect+0x15c>)
 8003c2a:	68d3      	ldr	r3, [r2, #12]
				 pxIterator != pxEnd;
 8003c2c:	3208      	adds	r2, #8
 8003c2e:	4293      	cmp	r3, r2
	{
 8003c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c34:	4604      	mov	r4, r0
		EventBits_t xGroupBits = 0;
 8003c36:	f04f 0500 	mov.w	r5, #0
				 pxIterator != pxEnd;
 8003c3a:	d01c      	beq.n	8003c76 <vSocketSelect+0x4e>
				pxEnd = listGET_END_MARKER( &xBoundUDPSocketsList );
 8003c3c:	4696      	mov	lr, r2
		for( xRound = 0; xRound <= xLastRound; xRound++ )
 8003c3e:	462f      	mov	r7, r5
 8003c40:	e002      	b.n	8003c48 <vSocketSelect+0x20>
				 pxIterator = listGET_NEXT( pxIterator ) )
 8003c42:	685b      	ldr	r3, [r3, #4]
				 pxIterator != pxEnd;
 8003c44:	459e      	cmp	lr, r3
 8003c46:	d015      	beq.n	8003c74 <vSocketSelect+0x4c>
			{
				FreeRTOS_Socket_t * pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8003c48:	68da      	ldr	r2, [r3, #12]

				if( pxSocket->pxSocketSet != pxSocketSet )
 8003c4a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003c4c:	42a1      	cmp	r1, r4
 8003c4e:	d1f8      	bne.n	8003c42 <vSocketSelect+0x1a>
				}

				xSocketBits = 0;

				#if ( ipconfigUSE_TCP == 1 )
					if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8003c50:	f892 c027 	ldrb.w	ip, [r2, #39]	@ 0x27
								bAccepted = pdTRUE;
							}
						}

						/* Is the set owner interested in READ events? */
						if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 8003c54:	6b10      	ldr	r0, [r2, #48]	@ 0x30
					if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8003c56:	f1bc 0f06 	cmp.w	ip, #6
						if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 8003c5a:	f000 0101 	and.w	r1, r0, #1
					if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8003c5e:	d021      	beq.n	8003ca4 <vSocketSelect+0x7c>
					}
					else
				#endif /* ipconfigUSE_TCP == 1 */
				{
					/* Select events for UDP are simpler. */
					if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 8003c60:	b121      	cbz	r1, 8003c6c <vSocketSelect+0x44>
						( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 8003c62:	6b91      	ldr	r1, [r2, #56]	@ 0x38
					if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 8003c64:	3900      	subs	r1, #0
 8003c66:	bf18      	it	ne
 8003c68:	2101      	movne	r1, #1
				 * by FreeRTOS_FD_ISSSET() */
				pxSocket->xSocketBits = xSocketBits;

				/* The ORed value will be used to set the bits in the event
				 * group. */
				xGroupBits |= xSocketBits;
 8003c6a:	430d      	orrs	r5, r1
				 pxIterator = listGET_NEXT( pxIterator ) )
 8003c6c:	685b      	ldr	r3, [r3, #4]
				pxSocket->xSocketBits = xSocketBits;
 8003c6e:	6351      	str	r1, [r2, #52]	@ 0x34
				 pxIterator != pxEnd;
 8003c70:	459e      	cmp	lr, r3
 8003c72:	d1e9      	bne.n	8003c48 <vSocketSelect+0x20>
		for( xRound = 0; xRound <= xLastRound; xRound++ )
 8003c74:	b937      	cbnz	r7, 8003c84 <vSocketSelect+0x5c>
			for( pxIterator = listGET_NEXT( pxEnd );
 8003c76:	4a44      	ldr	r2, [pc, #272]	@ (8003d88 <vSocketSelect+0x160>)
 8003c78:	2701      	movs	r7, #1
 8003c7a:	68d3      	ldr	r3, [r2, #12]
					pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 8003c7c:	f102 0e08 	add.w	lr, r2, #8
				 pxIterator != pxEnd;
 8003c80:	4573      	cmp	r3, lr
 8003c82:	d1e1      	bne.n	8003c48 <vSocketSelect+0x20>
			} /* for( pxIterator ... ) */
		}     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

		xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 8003c84:	2100      	movs	r1, #0
 8003c86:	6820      	ldr	r0, [r4, #0]
 8003c88:	f004 fb80 	bl	800838c <xEventGroupClearBits>

		/* Now set the necessary bits. */
		xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 8003c8c:	ea20 0005 	bic.w	r0, r0, r5
				 * and cleared in FreeRTOS_select(). */
				xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
			}
		#endif /* ipconfigSUPPORT_SIGNALS */

		if( xBitsToClear != 0U )
 8003c90:	f010 010f 	ands.w	r1, r0, #15
 8003c94:	d14e      	bne.n	8003d34 <vSocketSelect+0x10c>
		{
			( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
		}

		/* Now include eSELECT_CALL_IP to wakeup the caller. */
		( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 8003c96:	f045 0110 	orr.w	r1, r5, #16
 8003c9a:	6820      	ldr	r0, [r4, #0]
	}
 8003c9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 8003ca0:	f004 bb94 	b.w	80083cc <xEventGroupSetBits>
						if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 8003ca4:	f892 c040 	ldrb.w	ip, [r2, #64]	@ 0x40
							if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 8003ca8:	f00c 0606 	and.w	r6, ip, #6
						if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 8003cac:	b161      	cbz	r1, 8003cc8 <vSocketSelect+0xa0>
							if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 8003cae:	f892 8053 	ldrb.w	r8, [r2, #83]	@ 0x53
 8003cb2:	f1b8 0f01 	cmp.w	r8, #1
 8003cb6:	d023      	beq.n	8003d00 <vSocketSelect+0xd8>
							else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8003cb8:	f00c 0c0a 	and.w	ip, ip, #10
 8003cbc:	f1bc 0f0a 	cmp.w	ip, #10
 8003cc0:	d002      	beq.n	8003cc8 <vSocketSelect+0xa0>
							else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 8003cc2:	2e00      	cmp	r6, #0
 8003cc4:	d040      	beq.n	8003d48 <vSocketSelect+0x120>
				xSocketBits = 0;
 8003cc6:	2100      	movs	r1, #0
						if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8003cc8:	f010 0f04 	tst.w	r0, #4
 8003ccc:	d006      	beq.n	8003cdc <vSocketSelect+0xb4>
							if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSE_WAIT ) || ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSED ) )
 8003cce:	f892 c053 	ldrb.w	ip, [r2, #83]	@ 0x53
 8003cd2:	f01c 0ff7 	tst.w	ip, #247	@ 0xf7
								xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 8003cd6:	bf08      	it	eq
 8003cd8:	f041 0104 	orreq.w	r1, r1, #4
						if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 8003cdc:	0780      	lsls	r0, r0, #30
 8003cde:	d5c4      	bpl.n	8003c6a <vSocketSelect+0x42>
							if( bAccepted != 0 )
 8003ce0:	b1b6      	cbz	r6, 8003d10 <vSocketSelect+0xe8>
								if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 8003ce2:	f892 0041 	ldrb.w	r0, [r2, #65]	@ 0x41
 8003ce6:	0706      	lsls	r6, r0, #28
 8003ce8:	d5bf      	bpl.n	8003c6a <vSocketSelect+0x42>
 8003cea:	f892 6053 	ldrb.w	r6, [r2, #83]	@ 0x53
 8003cee:	2e04      	cmp	r6, #4
 8003cf0:	d9bb      	bls.n	8003c6a <vSocketSelect+0x42>
									( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 8003cf2:	06c6      	lsls	r6, r0, #27
 8003cf4:	d4b9      	bmi.n	8003c6a <vSocketSelect+0x42>
									pxSocket->u.xTCP.bits.bConnPassed = pdTRUE;
 8003cf6:	f040 0010 	orr.w	r0, r0, #16
 8003cfa:	f882 0041 	strb.w	r0, [r2, #65]	@ 0x41
							if( bMatch != pdFALSE )
 8003cfe:	e015      	b.n	8003d2c <vSocketSelect+0x104>
								if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8003d00:	6d51      	ldr	r1, [r2, #84]	@ 0x54
 8003d02:	2900      	cmp	r1, #0
 8003d04:	d0ea      	beq.n	8003cdc <vSocketSelect+0xb4>
 8003d06:	f891 1040 	ldrb.w	r1, [r1, #64]	@ 0x40
 8003d0a:	f3c1 0140 	ubfx	r1, r1, #1, #1
 8003d0e:	e7e5      	b.n	8003cdc <vSocketSelect+0xb4>
			if( pxSocket->u.xTCP.txStream != NULL )
 8003d10:	6f90      	ldr	r0, [r2, #120]	@ 0x78
 8003d12:	b390      	cbz	r0, 8003d7a <vSocketSelect+0x152>
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8003d14:	6906      	ldr	r6, [r0, #16]
        size_t uxHead = pxBuffer->uxHead;
 8003d16:	f8d0 c008 	ldr.w	ip, [r0, #8]
        size_t uxTail = pxBuffer->uxTail;
 8003d1a:	6800      	ldr	r0, [r0, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8003d1c:	4430      	add	r0, r6
 8003d1e:	3801      	subs	r0, #1
 8003d20:	eba0 000c 	sub.w	r0, r0, ip
        if( uxCount >= pxBuffer->LENGTH )
 8003d24:	4286      	cmp	r6, r0
 8003d26:	d926      	bls.n	8003d76 <vSocketSelect+0x14e>
								if( FreeRTOS_tx_space( pxSocket ) > 0 )
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	ddda      	ble.n	8003ce2 <vSocketSelect+0xba>
								xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 8003d2c:	f041 0102 	orr.w	r1, r1, #2
				xGroupBits |= xSocketBits;
 8003d30:	430d      	orrs	r5, r1
 8003d32:	e79b      	b.n	8003c6c <vSocketSelect+0x44>
			( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 8003d34:	6820      	ldr	r0, [r4, #0]
 8003d36:	f004 fb29 	bl	800838c <xEventGroupClearBits>
		( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 8003d3a:	f045 0110 	orr.w	r1, r5, #16
 8003d3e:	6820      	ldr	r0, [r4, #0]
	}
 8003d40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 8003d44:	f004 bb42 	b.w	80083cc <xEventGroupSetBits>
		else if( pxSocket->u.xTCP.rxStream != NULL )
 8003d48:	f8d2 c074 	ldr.w	ip, [r2, #116]	@ 0x74
 8003d4c:	f1bc 0f00 	cmp.w	ip, #0
 8003d50:	d015      	beq.n	8003d7e <vSocketSelect+0x156>
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003d52:	f8dc 8010 	ldr.w	r8, [ip, #16]
        size_t uxHead = pxBuffer->uxHead;
 8003d56:	f8dc 1008 	ldr.w	r1, [ip, #8]
        size_t uxTail = pxBuffer->uxTail;
 8003d5a:	f8dc c000 	ldr.w	ip, [ip]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003d5e:	4441      	add	r1, r8
 8003d60:	eba1 010c 	sub.w	r1, r1, ip
        if( uxCount >= pxBuffer->LENGTH )
 8003d64:	4588      	cmp	r8, r1
            uxCount -= pxBuffer->LENGTH;
 8003d66:	bf98      	it	ls
 8003d68:	eba1 0108 	subls.w	r1, r1, r8
							else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 8003d6c:	2900      	cmp	r1, #0
 8003d6e:	bfd4      	ite	le
 8003d70:	2100      	movle	r1, #0
 8003d72:	2101      	movgt	r1, #1
 8003d74:	e7a8      	b.n	8003cc8 <vSocketSelect+0xa0>
            uxCount -= pxBuffer->LENGTH;
 8003d76:	1b80      	subs	r0, r0, r6
        return uxCount;
 8003d78:	e7d6      	b.n	8003d28 <vSocketSelect+0x100>
				xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 8003d7a:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8003d7c:	e7d4      	b.n	8003d28 <vSocketSelect+0x100>
				xSocketBits = 0;
 8003d7e:	4631      	mov	r1, r6
 8003d80:	e7a2      	b.n	8003cc8 <vSocketSelect+0xa0>
 8003d82:	bf00      	nop
 8003d84:	2000037c 	.word	0x2000037c
 8003d88:	20000368 	.word	0x20000368

08003d8c <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * pxBuffer,
						  size_t uxOffset,
						  const uint8_t * pucData,
						  size_t uxByteCount )
{
 8003d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8003d90:	6906      	ldr	r6, [r0, #16]
 8003d92:	4617      	mov	r7, r2
        size_t uxHead = pxBuffer->uxHead;
 8003d94:	6882      	ldr	r2, [r0, #8]
 8003d96:	4605      	mov	r5, r0
        size_t uxTail = pxBuffer->uxTail;
 8003d98:	6804      	ldr	r4, [r0, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8003d9a:	eb04 0c06 	add.w	ip, r4, r6
 8003d9e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003da2:	ebac 0c02 	sub.w	ip, ip, r2
        if( uxCount >= pxBuffer->LENGTH )
 8003da6:	4566      	cmp	r6, ip
            uxCount -= pxBuffer->LENGTH;
 8003da8:	bf98      	it	ls
 8003daa:	ebac 0c06 	subls.w	ip, ip, r6
	size_t uxCount = uxByteCount;

	uxSpace = uxStreamBufferGetSpace( pxBuffer );

	/* If uxOffset > 0, items can be placed in front of uxHead */
	if( uxSpace > uxOffset )
 8003dae:	4561      	cmp	r1, ip
 8003db0:	d221      	bcs.n	8003df6 <uxStreamBufferAdd+0x6a>
	{
		uxSpace -= uxOffset;
 8003db2:	ebac 0401 	sub.w	r4, ip, r1
 8003db6:	429c      	cmp	r4, r3
 8003db8:	bf28      	it	cs
 8003dba:	461c      	movcs	r4, r3

	/* The number of bytes that can be written is the minimum of the number of
	 * bytes requested and the number available. */
	uxCount = FreeRTOS_min_uint32( uxSpace, uxCount );

	if( uxCount != 0U )
 8003dbc:	b1e4      	cbz	r4, 8003df8 <uxStreamBufferAdd+0x6c>
	{
		uxNextHead = pxBuffer->uxHead;
 8003dbe:	f8d0 8008 	ldr.w	r8, [r0, #8]

		if( uxOffset != 0U )
 8003dc2:	b1e1      	cbz	r1, 8003dfe <uxStreamBufferAdd+0x72>
		{
			/* ( uxOffset > 0 ) means: write in front if the uxHead marker */
			uxNextHead += uxOffset;
 8003dc4:	4488      	add	r8, r1

			if( uxNextHead >= pxBuffer->LENGTH )
 8003dc6:	45b0      	cmp	r8, r6
 8003dc8:	d240      	bcs.n	8003e4c <uxStreamBufferAdd+0xc0>
			{
				uxNextHead -= pxBuffer->LENGTH;
			}
		}

		if( pucData != NULL )
 8003dca:	b37f      	cbz	r7, 8003e2c <uxStreamBufferAdd+0xa0>
		{
			/* Calculate the number of bytes that can be added in the first
			* write - which may be less than the total number of bytes that need
			* to be added if the buffer will wrap back to the beginning. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
 8003dcc:	eba6 0608 	sub.w	r6, r6, r8

			/* Write as many bytes as can be written in the first write. */
			( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 8003dd0:	f108 0014 	add.w	r0, r8, #20
 8003dd4:	4639      	mov	r1, r7
 8003dd6:	42a6      	cmp	r6, r4
 8003dd8:	4428      	add	r0, r5
 8003dda:	bf28      	it	cs
 8003ddc:	4626      	movcs	r6, r4
 8003dde:	4632      	mov	r2, r6
 8003de0:	f009 f9ee 	bl	800d1c0 <memcpy>

			/* If the number of bytes written was less than the number that
			 * could be written in the first write... */
			if( uxCount > uxFirst )
 8003de4:	42b4      	cmp	r4, r6
 8003de6:	d921      	bls.n	8003e2c <uxStreamBufferAdd+0xa0>
			{
				/* ...then write the remaining bytes to the start of the
				 * buffer. */
				( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 8003de8:	19b9      	adds	r1, r7, r6
 8003dea:	1ba2      	subs	r2, r4, r6
 8003dec:	f105 0014 	add.w	r0, r5, #20
 8003df0:	f009 f9e6 	bl	800d1c0 <memcpy>
			}
		}

		if( uxOffset == 0U )
 8003df4:	e01a      	b.n	8003e2c <uxStreamBufferAdd+0xa0>
 8003df6:	2400      	movs	r4, #0
			pxBuffer->uxFront = uxNextHead;
		}
	}

	return uxCount;
}
 8003df8:	4620      	mov	r0, r4
 8003dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if( pucData != NULL )
 8003dfe:	b177      	cbz	r7, 8003e1e <uxStreamBufferAdd+0x92>
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
 8003e00:	eba6 0608 	sub.w	r6, r6, r8
			( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 8003e04:	f108 0014 	add.w	r0, r8, #20
 8003e08:	4639      	mov	r1, r7
 8003e0a:	42a6      	cmp	r6, r4
 8003e0c:	4428      	add	r0, r5
 8003e0e:	bf28      	it	cs
 8003e10:	4626      	movcs	r6, r4
 8003e12:	4632      	mov	r2, r6
 8003e14:	f009 f9d4 	bl	800d1c0 <memcpy>
			if( uxCount > uxFirst )
 8003e18:	42b4      	cmp	r4, r6
 8003e1a:	d81c      	bhi.n	8003e56 <uxStreamBufferAdd+0xca>
			if( uxNextHead >= pxBuffer->LENGTH )
 8003e1c:	692e      	ldr	r6, [r5, #16]
			uxNextHead += uxCount;
 8003e1e:	44a0      	add	r8, r4
			if( uxNextHead >= pxBuffer->LENGTH )
 8003e20:	4546      	cmp	r6, r8
				uxNextHead -= pxBuffer->LENGTH;
 8003e22:	bf98      	it	ls
 8003e24:	eba8 0806 	subls.w	r8, r8, r6
			pxBuffer->uxHead = uxNextHead;
 8003e28:	f8c5 8008 	str.w	r8, [r5, #8]
		if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 8003e2c:	68ea      	ldr	r2, [r5, #12]
        size_t uxTail = pxBuffer->uxTail;
 8003e2e:	682b      	ldr	r3, [r5, #0]
        if( ( ( ( uxLeft < uxTail ) ? 1U : 0U ) ^ ( ( uxRight < uxTail ) ? 1U : 0U ) ) != 0U )
 8003e30:	4598      	cmp	r8, r3
 8003e32:	d206      	bcs.n	8003e42 <uxStreamBufferAdd+0xb6>
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d306      	bcc.n	8003e46 <uxStreamBufferAdd+0xba>
}
 8003e38:	4620      	mov	r0, r4
			pxBuffer->uxFront = uxNextHead;
 8003e3a:	f8c5 800c 	str.w	r8, [r5, #12]
}
 8003e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d3d8      	bcc.n	8003df8 <uxStreamBufferAdd+0x6c>
            if( uxLeft <= uxRight )
 8003e46:	4542      	cmp	r2, r8
 8003e48:	d8d6      	bhi.n	8003df8 <uxStreamBufferAdd+0x6c>
 8003e4a:	e7f5      	b.n	8003e38 <uxStreamBufferAdd+0xac>
				uxNextHead -= pxBuffer->LENGTH;
 8003e4c:	eba8 0806 	sub.w	r8, r8, r6
		if( pucData != NULL )
 8003e50:	2f00      	cmp	r7, #0
 8003e52:	d1bb      	bne.n	8003dcc <uxStreamBufferAdd+0x40>
 8003e54:	e7ea      	b.n	8003e2c <uxStreamBufferAdd+0xa0>
				( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 8003e56:	19b9      	adds	r1, r7, r6
 8003e58:	1ba2      	subs	r2, r4, r6
 8003e5a:	f105 0014 	add.w	r0, r5, #20
 8003e5e:	f009 f9af 	bl	800d1c0 <memcpy>
 8003e62:	e7db      	b.n	8003e1c <uxStreamBufferAdd+0x90>

08003e64 <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * pxBuffer,
						  size_t uxOffset,
						  uint8_t * pucData,
						  size_t uxMaxCount,
						  BaseType_t xPeek )
{
 8003e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e68:	460e      	mov	r6, r1
        size_t uxHead = pxBuffer->uxHead;
 8003e6a:	6884      	ldr	r4, [r0, #8]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003e6c:	6901      	ldr	r1, [r0, #16]
 8003e6e:	4617      	mov	r7, r2
        size_t uxTail = pxBuffer->uxTail;
 8003e70:	6802      	ldr	r2, [r0, #0]
 8003e72:	4605      	mov	r5, r0
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003e74:	eb04 0c01 	add.w	ip, r4, r1
 8003e78:	ebac 0c02 	sub.w	ip, ip, r2
        if( uxCount >= pxBuffer->LENGTH )
 8003e7c:	4561      	cmp	r1, ip
            uxCount -= pxBuffer->LENGTH;
 8003e7e:	bf98      	it	ls
 8003e80:	ebac 0c01 	subls.w	ip, ip, r1
	size_t uxSize, uxCount, uxFirst, uxNextTail;

	/* How much data is available? */
	uxSize = uxStreamBufferGetSize( pxBuffer );

	if( uxSize > uxOffset )
 8003e84:	4566      	cmp	r6, ip
 8003e86:	d229      	bcs.n	8003edc <uxStreamBufferGet+0x78>
	{
		uxSize -= uxOffset;
 8003e88:	ebac 0406 	sub.w	r4, ip, r6
 8003e8c:	429c      	cmp	r4, r3
 8003e8e:	bf28      	it	cs
 8003e90:	461c      	movcs	r4, r3
	}

	/* Use the minimum of the wanted bytes and the available bytes. */
	uxCount = FreeRTOS_min_uint32( uxSize, uxMaxCount );

	if( uxCount > 0U )
 8003e92:	b304      	cbz	r4, 8003ed6 <uxStreamBufferGet+0x72>
	{
		uxNextTail = pxBuffer->uxTail;
 8003e94:	f8d0 9000 	ldr.w	r9, [r0]

		if( uxOffset != 0U )
 8003e98:	b326      	cbz	r6, 8003ee4 <uxStreamBufferGet+0x80>
		{
			uxNextTail += uxOffset;
 8003e9a:	44b1      	add	r9, r6

			if( uxNextTail >= pxBuffer->LENGTH )
 8003e9c:	4589      	cmp	r9, r1
 8003e9e:	d324      	bcc.n	8003eea <uxStreamBufferGet+0x86>
			{
				uxNextTail -= pxBuffer->LENGTH;
			}
		}

		if( pucData != NULL )
 8003ea0:	b1cf      	cbz	r7, 8003ed6 <uxStreamBufferGet+0x72>
				uxNextTail -= pxBuffer->LENGTH;
 8003ea2:	eba9 0901 	sub.w	r9, r9, r1
		{
			/* Calculate the number of bytes that can be read - which may be
			 * less than the number wanted if the data wraps around to the start of
			 * the buffer. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextTail, uxCount );
 8003ea6:	eba1 0809 	sub.w	r8, r1, r9

			/* Obtain the number of bytes it is possible to obtain in the first
			 * read. */
			( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 8003eaa:	f109 0114 	add.w	r1, r9, #20
 8003eae:	4638      	mov	r0, r7
 8003eb0:	45a0      	cmp	r8, r4
 8003eb2:	4429      	add	r1, r5
 8003eb4:	bf28      	it	cs
 8003eb6:	46a0      	movcs	r8, r4
 8003eb8:	4642      	mov	r2, r8
 8003eba:	f009 f981 	bl	800d1c0 <memcpy>

			/* If the total number of wanted bytes is greater than the number
			 * that could be read in the first read... */
			if( uxCount > uxFirst )
 8003ebe:	4544      	cmp	r4, r8
 8003ec0:	d816      	bhi.n	8003ef0 <uxStreamBufferGet+0x8c>
				/*...then read the remaining bytes from the start of the buffer. */
				( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
			}
		}

		if( ( xPeek == pdFALSE ) && ( uxOffset == 0UL ) )
 8003ec2:	9b08      	ldr	r3, [sp, #32]
 8003ec4:	431e      	orrs	r6, r3
 8003ec6:	d106      	bne.n	8003ed6 <uxStreamBufferGet+0x72>
		{
			/* Move the tail pointer to effectively remove the data read from
			 * the buffer. */
			uxNextTail += uxCount;
 8003ec8:	eb04 0309 	add.w	r3, r4, r9

			if( uxNextTail >= pxBuffer->LENGTH )
 8003ecc:	692a      	ldr	r2, [r5, #16]
 8003ece:	429a      	cmp	r2, r3
			{
				uxNextTail -= pxBuffer->LENGTH;
 8003ed0:	bf98      	it	ls
 8003ed2:	1a9b      	subls	r3, r3, r2
			}

			pxBuffer->uxTail = uxNextTail;
 8003ed4:	602b      	str	r3, [r5, #0]
		}
	}

	return uxCount;
}
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003edc:	2400      	movs	r4, #0
 8003ede:	4620      	mov	r0, r4
 8003ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if( pucData != NULL )
 8003ee4:	2f00      	cmp	r7, #0
 8003ee6:	d1de      	bne.n	8003ea6 <uxStreamBufferGet+0x42>
 8003ee8:	e7eb      	b.n	8003ec2 <uxStreamBufferGet+0x5e>
 8003eea:	2f00      	cmp	r7, #0
 8003eec:	d1db      	bne.n	8003ea6 <uxStreamBufferGet+0x42>
 8003eee:	e7f2      	b.n	8003ed6 <uxStreamBufferGet+0x72>
				( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 8003ef0:	eb07 0008 	add.w	r0, r7, r8
 8003ef4:	eba4 0208 	sub.w	r2, r4, r8
 8003ef8:	f105 0114 	add.w	r1, r5, #20
 8003efc:	f009 f960 	bl	800d1c0 <memcpy>
 8003f00:	e7df      	b.n	8003ec2 <uxStreamBufferGet+0x5e>
 8003f02:	bf00      	nop

08003f04 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket: The socket whose MSS is to be set.
 */
	static void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
	{
 8003f04:	b538      	push	{r3, r4, r5, lr}
		uint32_t ulMSS = ipconfigTCP_MSS;

		if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) != 0UL )
 8003f06:	4a0d      	ldr	r2, [pc, #52]	@ (8003f3c <prvSocketSetMSS+0x38>)
	{
 8003f08:	4604      	mov	r4, r0
		if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) != 0UL )
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f40 <prvSocketSetMSS+0x3c>)
 8003f0c:	2500      	movs	r5, #0
 8003f0e:	6950      	ldr	r0, [r2, #20]
 8003f10:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003f12:	6859      	ldr	r1, [r3, #4]
 8003f14:	ba13      	rev	r3, r2
 8003f16:	4043      	eors	r3, r0
			/* Data for this peer will pass through a router, and maybe through
			 * the internet.  Limit the MSS to 1400 bytes or less. */
			ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
		}

		FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );
 8003f18:	480a      	ldr	r0, [pc, #40]	@ (8003f44 <prvSocketSetMSS+0x40>)
		if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) != 0UL )
 8003f1a:	420b      	tst	r3, r1
 8003f1c:	bf0c      	ite	eq
 8003f1e:	f240 53b4 	movweq	r3, #1460	@ 0x5b4
 8003f22:	f44f 63af 	movne.w	r3, #1400	@ 0x578
 8003f26:	f363 050f 	bfi	r5, r3, #0, #16
			ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f363 451f 	bfi	r5, r3, #16, #16
		FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );
 8003f30:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8003f32:	f008 ff83 	bl	800ce3c <lUDPLoggingPrintf>

		pxSocket->u.xTCP.usInitMSS = ( uint16_t ) ulMSS;
		pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
 8003f36:	f8c4 504a 	str.w	r5, [r4, #74]	@ 0x4a
	}
 8003f3a:	bd38      	pop	{r3, r4, r5, pc}
 8003f3c:	20000014 	.word	0x20000014
 8003f40:	20000348 	.word	0x20000348
 8003f44:	0800f38c 	.word	0x0800f38c

08003f48 <prvSetSynAckOptions>:
		uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
 8003f48:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
		pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 8003f4c:	f240 4302 	movw	r3, #1026	@ 0x402
	{
 8003f50:	b570      	push	{r4, r5, r6, lr}
		pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 8003f52:	828b      	strh	r3, [r1, #20]
		pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 8003f54:	0a13      	lsrs	r3, r2, #8
	{
 8003f56:	460d      	mov	r5, r1
		pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 8003f58:	75ca      	strb	r2, [r1, #23]
		pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 8003f5a:	758b      	strb	r3, [r1, #22]
	{
 8003f5c:	4606      	mov	r6, r0
			uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 8003f5e:	f8d0 10dc 	ldr.w	r1, [r0, #220]	@ 0xdc
 8003f62:	fb02 f301 	mul.w	r3, r2, r1
			while( uxWinSize > 0xffffUL )
 8003f66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f6a:	d31b      	bcc.n	8003fa4 <prvSetSynAckOptions+0x5c>
			ucFactor = 0U;
 8003f6c:	2400      	movs	r4, #0
				uxWinSize >>= 1;
 8003f6e:	085b      	lsrs	r3, r3, #1
				ucFactor++;
 8003f70:	3401      	adds	r4, #1
			while( uxWinSize > 0xffffUL )
 8003f72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
				ucFactor++;
 8003f76:	b2e4      	uxtb	r4, r4
			while( uxWinSize > 0xffffUL )
 8003f78:	d2f9      	bcs.n	8003f6e <prvSetSynAckOptions+0x26>
			FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
 8003f7a:	4623      	mov	r3, r4
 8003f7c:	480b      	ldr	r0, [pc, #44]	@ (8003fac <prvSetSynAckOptions+0x64>)
 8003f7e:	f008 ff5d 	bl	800ce3c <lUDPLoggingPrintf>
				pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 8003f82:	2203      	movs	r2, #3
				pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 8003f84:	f886 40c9 	strb.w	r4, [r6, #201]	@ 0xc9
				pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 8003f88:	2301      	movs	r3, #1
				pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 8003f8a:	f240 3001 	movw	r0, #769	@ 0x301
				pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 8003f8e:	2104      	movs	r1, #4
				pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 8003f90:	76aa      	strb	r2, [r5, #26]
				pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 8003f92:	2202      	movs	r2, #2
				pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 8003f94:	8328      	strh	r0, [r5, #24]
	}
 8003f96:	200c      	movs	r0, #12
				pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 8003f98:	76ec      	strb	r4, [r5, #27]
				pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 8003f9a:	772b      	strb	r3, [r5, #28]
				pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 8003f9c:	776b      	strb	r3, [r5, #29]
				pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 8003f9e:	77a9      	strb	r1, [r5, #30]
				pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 8003fa0:	77ea      	strb	r2, [r5, #31]
	}
 8003fa2:	bd70      	pop	{r4, r5, r6, pc}
			while( uxWinSize > 0xffffUL )
 8003fa4:	2300      	movs	r3, #0
			ucFactor = 0U;
 8003fa6:	461c      	mov	r4, r3
 8003fa8:	e7e8      	b.n	8003f7c <prvSetSynAckOptions+0x34>
 8003faa:	bf00      	nop
 8003fac:	0800f3b8 	.word	0x0800f3b8

08003fb0 <prvTCPAddTxData>:
		lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 8003fb0:	6f82      	ldr	r2, [r0, #120]	@ 0x78
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003fb2:	6913      	ldr	r3, [r2, #16]
        size_t uxHead = pxBuffer->uxHead;
 8003fb4:	6891      	ldr	r1, [r2, #8]
	{
 8003fb6:	b510      	push	{r4, lr}
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003fb8:	4419      	add	r1, r3
 8003fba:	4604      	mov	r4, r0
        size_t uxMid = pxBuffer->uxMid;
 8003fbc:	6850      	ldr	r0, [r2, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003fbe:	1a09      	subs	r1, r1, r0
        if( uxCount >= pxBuffer->LENGTH )
 8003fc0:	428b      	cmp	r3, r1
            uxCount -= pxBuffer->LENGTH;
 8003fc2:	bf98      	it	ls
 8003fc4:	1ac9      	subls	r1, r1, r3
		if( lLength > 0 )
 8003fc6:	2900      	cmp	r1, #0
 8003fc8:	dc00      	bgt.n	8003fcc <prvTCPAddTxData+0x1c>
	}
 8003fca:	bd10      	pop	{r4, pc}
									  ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 8003fcc:	6852      	ldr	r2, [r2, #4]
			lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8003fce:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 8003fd2:	f002 f943 	bl	800625c <lTCPWindowTxAdd>
			if( lCount > 0 )
 8003fd6:	2800      	cmp	r0, #0
 8003fd8:	ddf7      	ble.n	8003fca <prvTCPAddTxData+0x1a>
				vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 8003fda:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
        size_t uxHead = pxBuffer->uxHead;
 8003fdc:	689a      	ldr	r2, [r3, #8]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003fde:	6919      	ldr	r1, [r3, #16]
        size_t uxMid = pxBuffer->uxMid;
 8003fe0:	685c      	ldr	r4, [r3, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8003fe2:	440a      	add	r2, r1
 8003fe4:	1b12      	subs	r2, r2, r4
        pxBuffer->uxMid += uxMoveCount;
 8003fe6:	685c      	ldr	r4, [r3, #4]
        if( uxCount >= pxBuffer->LENGTH )
 8003fe8:	4291      	cmp	r1, r2
            uxCount -= pxBuffer->LENGTH;
 8003fea:	bf98      	it	ls
 8003fec:	1a52      	subls	r2, r2, r1
        pxBuffer->uxMid += uxMoveCount;
 8003fee:	4290      	cmp	r0, r2
 8003ff0:	bf94      	ite	ls
 8003ff2:	1824      	addls	r4, r4, r0
 8003ff4:	18a4      	addhi	r4, r4, r2
 8003ff6:	605c      	str	r4, [r3, #4]
        if( pxBuffer->uxMid >= pxBuffer->LENGTH )
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	4291      	cmp	r1, r2
 8003ffc:	d8e5      	bhi.n	8003fca <prvTCPAddTxData+0x1a>
            pxBuffer->uxMid -= pxBuffer->LENGTH;
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	1a52      	subs	r2, r2, r1
 8004002:	605a      	str	r2, [r3, #4]
	}
 8004004:	bd10      	pop	{r4, pc}
 8004006:	bf00      	nop

08004008 <prvTCPReturnPacket>:
	{
 8004008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800400c:	4606      	mov	r6, r0
 800400e:	b08a      	sub	sp, #40	@ 0x28
 8004010:	4617      	mov	r7, r2
		if( pxNetworkBuffer == NULL )
 8004012:	2900      	cmp	r1, #0
 8004014:	f000 80b3 	beq.w	800417e <prvTCPReturnPacket+0x176>
				if( xDoRelease == pdFALSE )
 8004018:	460d      	mov	r5, r1
 800401a:	b93b      	cbnz	r3, 800402c <prvTCPReturnPacket+0x24>
					pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 800401c:	4628      	mov	r0, r5
 800401e:	69c9      	ldr	r1, [r1, #28]
 8004020:	f7fd ff66 	bl	8001ef0 <pxDuplicateNetworkBufferWithDescriptor>
					if( pxNetworkBuffer == NULL )
 8004024:	4605      	mov	r5, r0
 8004026:	2800      	cmp	r0, #0
 8004028:	f000 80b7 	beq.w	800419a <prvTCPReturnPacket+0x192>
			pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 800402c:	ea4f 2817 	mov.w	r8, r7, lsr #8
			pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8004030:	69ac      	ldr	r4, [r5, #24]
			pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 8004032:	ea48 2807 	orr.w	r8, r8, r7, lsl #8
 8004036:	fa1f f888 	uxth.w	r8, r8
			if( pxSocket != NULL )
 800403a:	2e00      	cmp	r6, #0
 800403c:	f000 80b3 	beq.w	80041a6 <prvTCPReturnPacket+0x19e>
				if( pxSocket->u.xTCP.rxStream != NULL )
 8004040:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 80bd 	beq.w	80041c2 <prvTCPReturnPacket+0x1ba>
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8004048:	691a      	ldr	r2, [r3, #16]
        size_t uxFront = pxBuffer->uxFront;
 800404a:	68d9      	ldr	r1, [r3, #12]
        size_t uxTail = pxBuffer->uxTail;
 800404c:	681b      	ldr	r3, [r3, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800404e:	4413      	add	r3, r2
 8004050:	3b01      	subs	r3, #1
 8004052:	1a5b      	subs	r3, r3, r1
        if( uxCount >= pxBuffer->LENGTH )
 8004054:	429a      	cmp	r2, r3
 8004056:	d800      	bhi.n	800405a <prvTCPReturnPacket+0x52>
            uxCount -= pxBuffer->LENGTH;
 8004058:	1a9b      	subs	r3, r3, r2
				if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 800405a:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800405c:	4a5b      	ldr	r2, [pc, #364]	@ (80041cc <prvTCPReturnPacket+0x1c4>)
 800405e:	400a      	ands	r2, r1
				ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 8004060:	f8d6 10e8 	ldr.w	r1, [r6, #232]	@ 0xe8
				if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 8004064:	2a00      	cmp	r2, #0
 8004066:	f040 8088 	bne.w	800417a <prvTCPReturnPacket+0x172>
 800406a:	4299      	cmp	r1, r3
 800406c:	bf28      	it	cs
 800406e:	4619      	movcs	r1, r3
				if( ( ulSpace < pxSocket->u.xTCP.usCurMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usCurMSS ) )
 8004070:	f8b6 204a 	ldrh.w	r2, [r6, #74]	@ 0x4a
 8004074:	429a      	cmp	r2, r3
 8004076:	f200 80a6 	bhi.w	80041c6 <prvTCPReturnPacket+0x1be>
 800407a:	428a      	cmp	r2, r1
 800407c:	f240 80a3 	bls.w	80041c6 <prvTCPReturnPacket+0x1be>
						ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 8004080:	f896 30c9 	ldrb.w	r3, [r6, #201]	@ 0xc9
				if( ulWinSize > 0xfffcUL )
 8004084:	f64f 71fc 	movw	r1, #65532	@ 0xfffc
						ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 8004088:	fa22 f303 	lsr.w	r3, r2, r3
				if( ulWinSize > 0xfffcUL )
 800408c:	428b      	cmp	r3, r1
 800408e:	bf28      	it	cs
 8004090:	460b      	movcs	r3, r1
						pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1UL;
 8004092:	f8d6 1110 	ldr.w	r1, [r6, #272]	@ 0x110
				pxTCPPacket->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 8004096:	ba5b      	rev16	r3, r3
 8004098:	8623      	strh	r3, [r4, #48]	@ 0x30
				pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 800409a:	f8d6 30f4 	ldr.w	r3, [r6, #244]	@ 0xf4
 800409e:	4413      	add	r3, r2
 80040a0:	6473      	str	r3, [r6, #68]	@ 0x44
				pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 80040a2:	f896 3041 	ldrb.w	r3, [r6, #65]	@ 0x41
 80040a6:	f36f 0300 	bfc	r3, #0, #1
					if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 80040aa:	0798      	lsls	r0, r3, #30
 80040ac:	b2da      	uxtb	r2, r3
				pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 80040ae:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
					if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 80040b2:	d547      	bpl.n	8004144 <prvTCPReturnPacket+0x13c>
						pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 80040b4:	f022 0206 	bic.w	r2, r2, #6
						pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1UL;
 80040b8:	3901      	subs	r1, #1
						pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 80040ba:	f042 0204 	orr.w	r2, r2, #4
 80040be:	ba09      	rev	r1, r1
 80040c0:	f886 2041 	strb.w	r2, [r6, #65]	@ 0x41
						pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 80040c4:	f8c4 1026 	str.w	r1, [r4, #38]	@ 0x26
				pxTCPPacket->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 80040c8:	f8d6 30f4 	ldr.w	r3, [r6, #244]	@ 0xf4
			if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ) )
 80040cc:	4a40      	ldr	r2, [pc, #256]	@ (80041d0 <prvTCPReturnPacket+0x1c8>)
 80040ce:	ba1b      	rev	r3, r3
			pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 80040d0:	f8a4 8010 	strh.w	r8, [r4, #16]
				pxTCPPacket->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 80040d4:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
			pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 80040d8:	2380      	movs	r3, #128	@ 0x80
 80040da:	75a3      	strb	r3, [r4, #22]
			if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ) )
 80040dc:	6953      	ldr	r3, [r2, #20]
 80040de:	b90b      	cbnz	r3, 80040e4 <prvTCPReturnPacket+0xdc>
				ulSourceAddress = pxIPHeader->ulDestinationIPAddress;
 80040e0:	f8d4 301e 	ldr.w	r3, [r4, #30]
			pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80040e4:	f8d4 101a 	ldr.w	r1, [r4, #26]
			pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 80040e8:	370e      	adds	r7, #14
 80040ea:	483a      	ldr	r0, [pc, #232]	@ (80041d4 <prvTCPReturnPacket+0x1cc>)
			vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 80040ec:	8c66      	ldrh	r6, [r4, #34]	@ 0x22
			pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 80040ee:	f8c4 301a 	str.w	r3, [r4, #26]
			pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80040f2:	f8c4 101e 	str.w	r1, [r4, #30]
			vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 80040f6:	8803      	ldrh	r3, [r0, #0]
 80040f8:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
 80040fa:	84a6      	strh	r6, [r4, #36]	@ 0x24
			pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 80040fc:	ba5e      	rev16	r6, r3
			vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 80040fe:	8461      	strh	r1, [r4, #34]	@ 0x22
			usPacketIdentifier++;
 8004100:	3301      	adds	r3, #1
			pxIPHeader->usFragmentOffset = 0U;
 8004102:	2100      	movs	r1, #0
			pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8004104:	8266      	strh	r6, [r4, #18]
			usPacketIdentifier++;
 8004106:	8003      	strh	r3, [r0, #0]
			pxIPHeader->usFragmentOffset = 0U;
 8004108:	7521      	strb	r1, [r4, #20]
 800410a:	7561      	strb	r1, [r4, #21]
			pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 800410c:	61ef      	str	r7, [r5, #28]
			( void ) memcpy( ( void * ) ( &( pxEthernetHeader->xDestinationAddress ) ),
 800410e:	f8d4 3006 	ldr.w	r3, [r4, #6]
 8004112:	6023      	str	r3, [r4, #0]
 8004114:	8963      	ldrh	r3, [r4, #10]
 8004116:	80a3      	strh	r3, [r4, #4]
			( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8004118:	6810      	ldr	r0, [r2, #0]
 800411a:	f8c4 0006 	str.w	r0, [r4, #6]
 800411e:	8893      	ldrh	r3, [r2, #4]
 8004120:	8163      	strh	r3, [r4, #10]
					if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8004122:	69eb      	ldr	r3, [r5, #28]
 8004124:	2b3b      	cmp	r3, #59	@ 0x3b
 8004126:	d906      	bls.n	8004136 <prvTCPReturnPacket+0x12e>
			( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xDoRelease );
 8004128:	2101      	movs	r1, #1
 800412a:	4628      	mov	r0, r5
 800412c:	f003 f976 	bl	800741c <xNetworkInterfaceOutput>
	}
 8004130:	b00a      	add	sp, #40	@ 0x28
 8004132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
							pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8004136:	69aa      	ldr	r2, [r5, #24]
 8004138:	54d1      	strb	r1, [r2, r3]
						for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800413a:	3301      	adds	r3, #1
 800413c:	2b3c      	cmp	r3, #60	@ 0x3c
 800413e:	d1fa      	bne.n	8004136 <prvTCPReturnPacket+0x12e>
						pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8004140:	61eb      	str	r3, [r5, #28]
 8004142:	e7f1      	b.n	8004128 <prvTCPReturnPacket+0x120>
					pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 8004144:	ba0b      	rev	r3, r1
					if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 8004146:	f894 002f 	ldrb.w	r0, [r4, #47]	@ 0x2f
					pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 800414a:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
					if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 800414e:	07c3      	lsls	r3, r0, #31
 8004150:	d5ba      	bpl.n	80040c8 <prvTCPReturnPacket+0xc0>
						uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + ipSIZE_OF_IPv4_HEADER ) );
 8004152:	f1a7 0228 	sub.w	r2, r7, #40	@ 0x28
						if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 8004156:	f8d6 3108 	ldr.w	r3, [r6, #264]	@ 0x108
 800415a:	eb02 0c01 	add.w	ip, r2, r1
 800415e:	459c      	cmp	ip, r3
 8004160:	d0b2      	beq.n	80040c8 <prvTCPReturnPacket+0xc0>
							pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 8004162:	f020 0001 	bic.w	r0, r0, #1
 8004166:	f884 002f 	strb.w	r0, [r4, #47]	@ 0x2f
							FreeRTOS_debug_printf( ( "Suppress FIN for %lu + %lu < %lu\n",
 800416a:	f8d6 0100 	ldr.w	r0, [r6, #256]	@ 0x100
 800416e:	1a1b      	subs	r3, r3, r0
 8004170:	1a09      	subs	r1, r1, r0
 8004172:	4819      	ldr	r0, [pc, #100]	@ (80041d8 <prvTCPReturnPacket+0x1d0>)
 8004174:	f008 fe62 	bl	800ce3c <lUDPLoggingPrintf>
 8004178:	e7a6      	b.n	80040c8 <prvTCPReturnPacket+0xc0>
					ulSpace = 0U;
 800417a:	2100      	movs	r1, #0
 800417c:	e778      	b.n	8004070 <prvTCPReturnPacket+0x68>
			pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800417e:	2346      	movs	r3, #70	@ 0x46
			pxNetworkBuffer = &xTempBuffer;
 8004180:	ad01      	add	r5, sp, #4
			pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8004182:	f100 0282 	add.w	r2, r0, #130	@ 0x82
			pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8004186:	4619      	mov	r1, r3
					pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8004188:	4628      	mov	r0, r5
			pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800418a:	e9cd 2307 	strd	r2, r3, [sp, #28]
					pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 800418e:	f7fd feaf 	bl	8001ef0 <pxDuplicateNetworkBufferWithDescriptor>
					if( pxNetworkBuffer == NULL )
 8004192:	4605      	mov	r5, r0
 8004194:	2800      	cmp	r0, #0
 8004196:	f47f af49 	bne.w	800402c <prvTCPReturnPacket+0x24>
						FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 800419a:	4810      	ldr	r0, [pc, #64]	@ (80041dc <prvTCPReturnPacket+0x1d4>)
 800419c:	f008 fe4e 	bl	800ce3c <lUDPLoggingPrintf>
	}
 80041a0:	b00a      	add	sp, #40	@ 0x28
 80041a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 80041a6:	f8d4 3026 	ldr.w	r3, [r4, #38]	@ 0x26
 80041aa:	f8d4 202a 	ldr.w	r2, [r4, #42]	@ 0x2a
 80041ae:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
			pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 80041b2:	2380      	movs	r3, #128	@ 0x80
				vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 80041b4:	f8c4 2026 	str.w	r2, [r4, #38]	@ 0x26
			pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 80041b8:	f8a4 8010 	strh.w	r8, [r4, #16]
 80041bc:	4a04      	ldr	r2, [pc, #16]	@ (80041d0 <prvTCPReturnPacket+0x1c8>)
			pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 80041be:	75a3      	strb	r3, [r4, #22]
			if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ) )
 80041c0:	e78e      	b.n	80040e0 <prvTCPReturnPacket+0xd8>
					ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 80041c2:	6ef3      	ldr	r3, [r6, #108]	@ 0x6c
 80041c4:	e749      	b.n	800405a <prvTCPReturnPacket+0x52>
 80041c6:	460a      	mov	r2, r1
 80041c8:	e75a      	b.n	8004080 <prvTCPReturnPacket+0x78>
 80041ca:	bf00      	nop
 80041cc:	00040080 	.word	0x00040080
 80041d0:	20000014 	.word	0x20000014
 80041d4:	2000035c 	.word	0x2000035c
 80041d8:	0800f414 	.word	0x0800f414
 80041dc:	0800f3ec 	.word	0x0800f3ec

080041e0 <prvTCPCreateWindow>:
		if( xTCPWindowLoggingLevel != 0 )
 80041e0:	4b14      	ldr	r3, [pc, #80]	@ (8004234 <prvTCPCreateWindow+0x54>)
 80041e2:	681b      	ldr	r3, [r3, #0]
	{
 80041e4:	b530      	push	{r4, r5, lr}
 80041e6:	4604      	mov	r4, r0
 80041e8:	b083      	sub	sp, #12
		if( xTCPWindowLoggingLevel != 0 )
 80041ea:	b9ab      	cbnz	r3, 8004218 <prvTCPCreateWindow+0x38>
		vTCPWindowCreate(
 80041ec:	f8b4 504c 	ldrh.w	r5, [r4, #76]	@ 0x4c
			ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
 80041f0:	f240 53b4 	movw	r3, #1460	@ 0x5b4
		vTCPWindowCreate(
 80041f4:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
			ipconfigTCP_MSS * pxSocket->u.xTCP.uxRxWinSize,
 80041f8:	e9d4 1237 	ldrd	r1, r2, [r4, #220]	@ 0xdc
		vTCPWindowCreate(
 80041fc:	9501      	str	r5, [sp, #4]
 80041fe:	f8d4 5110 	ldr.w	r5, [r4, #272]	@ 0x110
 8004202:	fb03 f202 	mul.w	r2, r3, r2
 8004206:	fb03 f101 	mul.w	r1, r3, r1
 800420a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 800420e:	9500      	str	r5, [sp, #0]
 8004210:	f001 fe58 	bl	8005ec4 <vTCPWindowCreate>
	}
 8004214:	b003      	add	sp, #12
 8004216:	bd30      	pop	{r4, r5, pc}
			FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %u Water %u <= %u <= %u\n",
 8004218:	f8d0 10dc 	ldr.w	r1, [r0, #220]	@ 0xdc
 800421c:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 8004220:	e9d4 321a 	ldrd	r3, r2, [r4, #104]	@ 0x68
 8004224:	fb00 f101 	mul.w	r1, r0, r1
 8004228:	4803      	ldr	r0, [pc, #12]	@ (8004238 <prvTCPCreateWindow+0x58>)
 800422a:	9200      	str	r2, [sp, #0]
 800422c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800422e:	f008 fe05 	bl	800ce3c <lUDPLoggingPrintf>
 8004232:	e7db      	b.n	80041ec <prvTCPCreateWindow+0xc>
 8004234:	2000039c 	.word	0x2000039c
 8004238:	0800f438 	.word	0x0800f438

0800423c <prvTCPNextTimeout>:
		if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800423c:	f890 3053 	ldrb.w	r3, [r0, #83]	@ 0x53
	{
 8004240:	b530      	push	{r4, r5, lr}
		if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 8004242:	2b02      	cmp	r3, #2
	{
 8004244:	b085      	sub	sp, #20
		TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8004246:	f644 6520 	movw	r5, #20000	@ 0x4e20
	{
 800424a:	4604      	mov	r4, r0
		TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800424c:	9503      	str	r5, [sp, #12]
		if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800424e:	d019      	beq.n	8004284 <prvTCPNextTimeout+0x48>
		else if( pxSocket->u.xTCP.usTimeout == 0U )
 8004250:	f8b0 0048 	ldrh.w	r0, [r0, #72]	@ 0x48
 8004254:	b108      	cbz	r0, 800425a <prvTCPNextTimeout+0x1e>
	}
 8004256:	b005      	add	sp, #20
 8004258:	bd30      	pop	{r4, r5, pc}
			BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 800425a:	aa03      	add	r2, sp, #12
 800425c:	f8d4 10d8 	ldr.w	r1, [r4, #216]	@ 0xd8
 8004260:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 8004264:	f002 f8b2 	bl	80063cc <xTCPWindowTxHasData>
			if( ulDelayMs == 0U )
 8004268:	9b03      	ldr	r3, [sp, #12]
 800426a:	b393      	cbz	r3, 80042d2 <prvTCPNextTimeout+0x96>
			pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 800426c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004270:	fb02 f303 	mul.w	r3, r2, r3
 8004274:	4293      	cmp	r3, r2
 8004276:	d237      	bcs.n	80042e8 <prvTCPNextTimeout+0xac>
 8004278:	2001      	movs	r0, #1
 800427a:	4602      	mov	r2, r0
 800427c:	f8a4 2048 	strh.w	r2, [r4, #72]	@ 0x48
	}
 8004280:	b005      	add	sp, #20
 8004282:	bd30      	pop	{r4, r5, pc}
			if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 8004284:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
				if( pxSocket->u.xTCP.ucRepCount < 3U )
 8004288:	f890 3052 	ldrb.w	r3, [r0, #82]	@ 0x52
			if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 800428c:	0712      	lsls	r2, r2, #28
 800428e:	d419      	bmi.n	80042c4 <prvTCPNextTimeout+0x88>
 8004290:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
			FreeRTOS_debug_printf( ( "Connect[%lxip:%u]: next timeout %u: %lu ms\n",
 8004294:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 8004296:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
					ulDelayMs = 11000UL;
 8004298:	9003      	str	r0, [sp, #12]
			FreeRTOS_debug_printf( ( "Connect[%lxip:%u]: next timeout %u: %lu ms\n",
 800429a:	9000      	str	r0, [sp, #0]
 800429c:	4815      	ldr	r0, [pc, #84]	@ (80042f4 <prvTCPNextTimeout+0xb8>)
 800429e:	f008 fdcd 	bl	800ce3c <lUDPLoggingPrintf>
			pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 80042a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80042a6:	9803      	ldr	r0, [sp, #12]
 80042a8:	fb03 f000 	mul.w	r0, r3, r0
 80042ac:	4298      	cmp	r0, r3
 80042ae:	d315      	bcc.n	80042dc <prvTCPNextTimeout+0xa0>
 80042b0:	4b11      	ldr	r3, [pc, #68]	@ (80042f8 <prvTCPNextTimeout+0xbc>)
 80042b2:	fba3 3000 	umull	r3, r0, r3, r0
 80042b6:	f3c0 138f 	ubfx	r3, r0, #6, #16
 80042ba:	4618      	mov	r0, r3
 80042bc:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
	}
 80042c0:	b005      	add	sp, #20
 80042c2:	bd30      	pop	{r4, r5, pc}
				if( pxSocket->u.xTCP.ucRepCount < 3U )
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d80c      	bhi.n	80042e2 <prvTCPNextTimeout+0xa6>
					ulDelayMs = ( 3000UL << ( pxSocket->u.xTCP.ucRepCount - 1U ) );
 80042c8:	1e5a      	subs	r2, r3, #1
 80042ca:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80042ce:	4090      	lsls	r0, r2
 80042d0:	e7e0      	b.n	8004294 <prvTCPNextTimeout+0x58>
				if( xResult != ( BaseType_t ) 0 )
 80042d2:	2800      	cmp	r0, #0
 80042d4:	d1d0      	bne.n	8004278 <prvTCPNextTimeout+0x3c>
 80042d6:	4628      	mov	r0, r5
 80042d8:	462a      	mov	r2, r5
 80042da:	e7cf      	b.n	800427c <prvTCPNextTimeout+0x40>
 80042dc:	2001      	movs	r0, #1
			pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 80042de:	4603      	mov	r3, r0
 80042e0:	e7ec      	b.n	80042bc <prvTCPNextTimeout+0x80>
 80042e2:	f642 20f8 	movw	r0, #11000	@ 0x2af8
 80042e6:	e7d5      	b.n	8004294 <prvTCPNextTimeout+0x58>
			pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 80042e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	4610      	mov	r0, r2
 80042f0:	e7c4      	b.n	800427c <prvTCPNextTimeout+0x40>
 80042f2:	bf00      	nop
 80042f4:	0800f470 	.word	0x0800f470
 80042f8:	10624dd3 	.word	0x10624dd3

080042fc <vTCPStateChange>:
	{
 80042fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		BaseType_t bAfter = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );                    /* Is it connected now ? */
 8004300:	2908      	cmp	r1, #8
 8004302:	bf18      	it	ne
 8004304:	2904      	cmpne	r1, #4
		BaseType_t bBefore = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.ucTCPState ) ); /* Was it connected ? */
 8004306:	f890 8053 	ldrb.w	r8, [r0, #83]	@ 0x53
	{
 800430a:	b083      	sub	sp, #12
 800430c:	4604      	mov	r4, r0
		BaseType_t bAfter = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );                    /* Is it connected now ? */
 800430e:	bf8c      	ite	hi
 8004310:	2301      	movhi	r3, #1
 8004312:	2300      	movls	r3, #0
		BaseType_t bBefore = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.ucTCPState ) ); /* Was it connected ? */
 8004314:	f1b8 0f04 	cmp.w	r8, #4
	{
 8004318:	460d      	mov	r5, r1
		BaseType_t bBefore = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.ucTCPState ) ); /* Was it connected ? */
 800431a:	d93f      	bls.n	800439c <vTCPStateChange+0xa0>
 800431c:	f1b8 0f08 	cmp.w	r8, #8
 8004320:	d03c      	beq.n	800439c <vTCPStateChange+0xa0>
		BaseType_t bAfter = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );                    /* Is it connected now ? */
 8004322:	2b00      	cmp	r3, #0
 8004324:	d046      	beq.n	80043b4 <vTCPStateChange+0xb8>
 8004326:	f04f 0901 	mov.w	r9, #1
		pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 800432a:	f884 5053 	strb.w	r5, [r4, #83]	@ 0x53
				pxSocket->u.xTCP.ucKeepRepCount = 0U;
 800432e:	2700      	movs	r7, #0
				pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 8004330:	f004 fe86 	bl	8009040 <xTaskGetTickCount>
				pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8004334:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
				pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 8004338:	6620      	str	r0, [r4, #96]	@ 0x60
				pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800433a:	f023 0306 	bic.w	r3, r3, #6
				pxSocket->u.xTCP.ucKeepRepCount = 0U;
 800433e:	f884 7058 	strb.w	r7, [r4, #88]	@ 0x58
				pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8004342:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
				pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8004346:	f004 fe7b 	bl	8009040 <xTaskGetTickCount>
				if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 800434a:	4b86      	ldr	r3, [pc, #536]	@ (8004564 <vTCPStateChange+0x268>)
				pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 800434c:	65e0      	str	r0, [r4, #92]	@ 0x5c
				if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	42bb      	cmp	r3, r7
 8004352:	db6b      	blt.n	800442c <vTCPStateChange+0x130>
 8004354:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
 8004356:	2917      	cmp	r1, #23
 8004358:	d068      	beq.n	800442c <vTCPStateChange+0x130>
				"eTIME_WAIT",
				"eUNKNOWN",
			};
			BaseType_t xIndex = ( BaseType_t ) ulState;

			if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 800435a:	f1b8 0f0c 	cmp.w	r8, #12
				if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 800435e:	463e      	mov	r6, r7
					FreeRTOS_debug_printf( ( "Socket %d -> %lxip:%u State %s->%s\n",
 8004360:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004362:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
			if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 8004364:	d85f      	bhi.n	8004426 <vTCPStateChange+0x12a>
				/* The last item is called 'eUNKNOWN' */
				xIndex = ARRAY_SIZE( pcStateNames );
				xIndex--;
			}

			return pcStateNames[ xIndex ];
 8004366:	4880      	ldr	r0, [pc, #512]	@ (8004568 <vTCPStateChange+0x26c>)
 8004368:	f850 4028 	ldr.w	r4, [r0, r8, lsl #2]
			if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 800436c:	2d0c      	cmp	r5, #12
					FreeRTOS_debug_printf( ( "Socket %d -> %lxip:%u State %s->%s\n",
 800436e:	9400      	str	r4, [sp, #0]
			if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 8004370:	bf28      	it	cs
 8004372:	250c      	movcs	r5, #12
					FreeRTOS_debug_printf( ( "Socket %d -> %lxip:%u State %s->%s\n",
 8004374:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8004378:	9001      	str	r0, [sp, #4]
 800437a:	487c      	ldr	r0, [pc, #496]	@ (800456c <vTCPStateChange+0x270>)
 800437c:	f008 fd5e 	bl	800ce3c <lUDPLoggingPrintf>
				if( xConnected != NULL )
 8004380:	b127      	cbz	r7, 800438c <vTCPStateChange+0x90>
					xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
 8004382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004386:	4649      	mov	r1, r9
 8004388:	4638      	mov	r0, r7
 800438a:	4798      	blx	r3
		if( xParent != NULL )
 800438c:	2e00      	cmp	r6, #0
 800438e:	d04d      	beq.n	800442c <vTCPStateChange+0x130>
			vSocketWakeUpUser( xParent );
 8004390:	4630      	mov	r0, r6
	}
 8004392:	b003      	add	sp, #12
 8004394:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			vSocketWakeUpUser( xParent );
 8004398:	f7fe bffa 	b.w	8003390 <vSocketWakeUpUser>
		BaseType_t bAfter = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );                    /* Is it connected now ? */
 800439c:	2b00      	cmp	r3, #0
 800439e:	d148      	bne.n	8004432 <vTCPStateChange+0x136>
			if( ( ( BaseType_t ) eTCPState ) == ( ( BaseType_t ) eCLOSED ) )
 80043a0:	b92d      	cbnz	r5, 80043ae <vTCPStateChange+0xb2>
				if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 80043a2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80043a6:	f013 0f06 	tst.w	r3, #6
 80043aa:	f040 8088 	bne.w	80044be <vTCPStateChange+0x1c2>
		BaseType_t bAfter = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );                    /* Is it connected now ? */
 80043ae:	f04f 0900 	mov.w	r9, #0
 80043b2:	e7ba      	b.n	800432a <vTCPStateChange+0x2e>
				pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 80043b4:	6803      	ldr	r3, [r0, #0]
						if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 80043b6:	6b01      	ldr	r1, [r0, #48]	@ 0x30
				pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 80043b8:	f043 0220 	orr.w	r2, r3, #32
						if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 80043bc:	074e      	lsls	r6, r1, #29
				pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 80043be:	6002      	str	r2, [r0, #0]
					if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 80043c0:	f8d0 20d4 	ldr.w	r2, [r0, #212]	@ 0xd4
						if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 80043c4:	d463      	bmi.n	800448e <vTCPStateChange+0x192>
					if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 80043c6:	2a00      	cmp	r2, #0
 80043c8:	f000 80a4 	beq.w	8004514 <vTCPStateChange+0x218>
			if( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == 0 )
 80043cc:	4642      	mov	r2, r8
 80043ce:	4627      	mov	r7, r4
		BaseType_t bAfter = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );                    /* Is it connected now ? */
 80043d0:	f04f 0900 	mov.w	r9, #0
		switch( xStatus )
 80043d4:	2a0b      	cmp	r2, #11
 80043d6:	f04f 0600 	mov.w	r6, #0
 80043da:	d807      	bhi.n	80043ec <vTCPStateChange+0xf0>
 80043dc:	f640 3381 	movw	r3, #2945	@ 0xb81
 80043e0:	40d3      	lsrs	r3, r2
 80043e2:	07da      	lsls	r2, r3, #31
 80043e4:	d502      	bpl.n	80043ec <vTCPStateChange+0xf0>
				pxSocket->u.xTCP.usTimeout = 0U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
		pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 80043ec:	f884 5053 	strb.w	r5, [r4, #83]	@ 0x53
				pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 80043f0:	f004 fe26 	bl	8009040 <xTaskGetTickCount>
				pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 80043f4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
				pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 80043f8:	6620      	str	r0, [r4, #96]	@ 0x60
				pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 80043fa:	f023 0306 	bic.w	r3, r3, #6
 80043fe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
				pxSocket->u.xTCP.ucKeepRepCount = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
				pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8004408:	f004 fe1a 	bl	8009040 <xTaskGetTickCount>
				if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 800440c:	4b55      	ldr	r3, [pc, #340]	@ (8004564 <vTCPStateChange+0x268>)
				pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 800440e:	65e0      	str	r0, [r4, #92]	@ 0x5c
				if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	dbb4      	blt.n	8004380 <vTCPStateChange+0x84>
 8004416:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
 8004418:	2917      	cmp	r1, #23
 800441a:	d0b1      	beq.n	8004380 <vTCPStateChange+0x84>
			if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 800441c:	f1b8 0f0c 	cmp.w	r8, #12
					FreeRTOS_debug_printf( ( "Socket %d -> %lxip:%u State %s->%s\n",
 8004420:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004422:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
			if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 8004424:	d99f      	bls.n	8004366 <vTCPStateChange+0x6a>
 8004426:	4c52      	ldr	r4, [pc, #328]	@ (8004570 <vTCPStateChange+0x274>)
 8004428:	484f      	ldr	r0, [pc, #316]	@ (8004568 <vTCPStateChange+0x26c>)
 800442a:	e79f      	b.n	800436c <vTCPStateChange+0x70>
	}
 800442c:	b003      	add	sp, #12
 800442e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8004432:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004436:	f013 0104 	ands.w	r1, r3, #4
 800443a:	d02c      	beq.n	8004496 <vTCPStateChange+0x19a>
					if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800443c:	0718      	lsls	r0, r3, #28
						xParent = pxSocket->u.xTCP.pxPeerSocket;
 800443e:	6d66      	ldr	r6, [r4, #84]	@ 0x54
					if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8004440:	d460      	bmi.n	8004504 <vTCPStateChange+0x208>
						configASSERT( xParent != NULL );
 8004442:	2e00      	cmp	r6, #0
 8004444:	d073      	beq.n	800452e <vTCPStateChange+0x232>
						if( xParent->u.xTCP.pxPeerSocket == NULL )
 8004446:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8004448:	2b00      	cmp	r3, #0
 800444a:	d068      	beq.n	800451e <vTCPStateChange+0x222>
						xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 800444c:	6833      	ldr	r3, [r6, #0]
								if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 800444e:	6b32      	ldr	r2, [r6, #48]	@ 0x30
						xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8004450:	f043 0104 	orr.w	r1, r3, #4
 8004454:	6031      	str	r1, [r6, #0]
								if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 8004456:	07d1      	lsls	r1, r2, #31
 8004458:	d502      	bpl.n	8004460 <vTCPStateChange+0x164>
									xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 800445a:	f443 7382 	orr.w	r3, r3, #260	@ 0x104
 800445e:	6033      	str	r3, [r6, #0]
								if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 8004460:	f8d6 30d4 	ldr.w	r3, [r6, #212]	@ 0xd4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d039      	beq.n	80044dc <vTCPStateChange+0x1e0>
									( xParent->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) )
 8004468:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
								if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 800446c:	f013 0308 	ands.w	r3, r3, #8
 8004470:	d134      	bne.n	80044dc <vTCPStateChange+0x1e0>
					pxSocket->u.xTCP.pxPeerSocket = NULL;
 8004472:	6563      	str	r3, [r4, #84]	@ 0x54
					pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 8004474:	4642      	mov	r2, r8
 8004476:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800447a:	4637      	mov	r7, r6
 800447c:	f04f 0901 	mov.w	r9, #1
 8004480:	f023 0306 	bic.w	r3, r3, #6
 8004484:	f043 0302 	orr.w	r3, r3, #2
 8004488:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		switch( xStatus )
 800448c:	e7a6      	b.n	80043dc <vTCPStateChange+0xe0>
							pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 800448e:	f443 6384 	orr.w	r3, r3, #1056	@ 0x420
 8004492:	6003      	str	r3, [r0, #0]
 8004494:	e797      	b.n	80043c6 <vTCPStateChange+0xca>
					pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 8004496:	6823      	ldr	r3, [r4, #0]
							if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 8004498:	6b26      	ldr	r6, [r4, #48]	@ 0x30
					pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 800449a:	f043 0208 	orr.w	r2, r3, #8
					if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 800449e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	@ 0xd4
							if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 80044a2:	f016 0602 	ands.w	r6, r6, #2
					pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 80044a6:	6022      	str	r2, [r4, #0]
							if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 80044a8:	d02e      	beq.n	8004508 <vTCPStateChange+0x20c>
								pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 80044aa:	f443 7302 	orr.w	r3, r3, #520	@ 0x208
 80044ae:	6023      	str	r3, [r4, #0]
					if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 80044b0:	b3b8      	cbz	r0, 8004522 <vTCPStateChange+0x226>
 80044b2:	4642      	mov	r2, r8
		FreeRTOS_Socket_t * xParent = NULL;
 80044b4:	460e      	mov	r6, r1
					if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 80044b6:	4627      	mov	r7, r4
 80044b8:	f04f 0901 	mov.w	r9, #1
 80044bc:	e78e      	b.n	80043dc <vTCPStateChange+0xe0>
					FreeRTOS_debug_printf( ( "vTCPStateChange: Closing socket\n" ) );
 80044be:	482d      	ldr	r0, [pc, #180]	@ (8004574 <vTCPStateChange+0x278>)
 80044c0:	f008 fcbc 	bl	800ce3c <lUDPLoggingPrintf>
					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 80044c4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80044c8:	071b      	lsls	r3, r3, #28
 80044ca:	f53f af70 	bmi.w	80043ae <vTCPStateChange+0xb2>
						FreeRTOS_debug_printf( ( "Closing a socket to avoid getting an orphan. \n" ) );
 80044ce:	482a      	ldr	r0, [pc, #168]	@ (8004578 <vTCPStateChange+0x27c>)
 80044d0:	f008 fcb4 	bl	800ce3c <lUDPLoggingPrintf>
						FreeRTOS_closesocket( pxSocket );
 80044d4:	4620      	mov	r0, r4
 80044d6:	f7fe fcab 	bl	8002e30 <FreeRTOS_closesocket>
 80044da:	e768      	b.n	80043ae <vTCPStateChange+0xb2>
					pxSocket->u.xTCP.pxPeerSocket = NULL;
 80044dc:	2300      	movs	r3, #0
					if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 80044de:	4642      	mov	r2, r8
 80044e0:	f04f 0901 	mov.w	r9, #1
					pxSocket->u.xTCP.pxPeerSocket = NULL;
 80044e4:	6563      	str	r3, [r4, #84]	@ 0x54
					pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 80044e6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80044ea:	f023 0306 	bic.w	r3, r3, #6
 80044ee:	f043 0302 	orr.w	r3, r3, #2
 80044f2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
					if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 80044f6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	bf14      	ite	ne
 80044fe:	4627      	movne	r7, r4
 8004500:	2700      	moveq	r7, #0
 8004502:	e76b      	b.n	80043dc <vTCPStateChange+0xe0>
 8004504:	4626      	mov	r6, r4
 8004506:	e79e      	b.n	8004446 <vTCPStateChange+0x14a>
 8004508:	b158      	cbz	r0, 8004522 <vTCPStateChange+0x226>
 800450a:	4642      	mov	r2, r8
 800450c:	4627      	mov	r7, r4
 800450e:	f04f 0901 	mov.w	r9, #1
 8004512:	e763      	b.n	80043dc <vTCPStateChange+0xe0>
		BaseType_t bAfter = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );                    /* Is it connected now ? */
 8004514:	f04f 0900 	mov.w	r9, #0
			if( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == 0 )
 8004518:	4642      	mov	r2, r8
			FreeRTOS_Socket_t * xConnected = NULL;
 800451a:	464f      	mov	r7, r9
 800451c:	e75a      	b.n	80043d4 <vTCPStateChange+0xd8>
							xParent->u.xTCP.pxPeerSocket = pxSocket;
 800451e:	6574      	str	r4, [r6, #84]	@ 0x54
 8004520:	e794      	b.n	800444c <vTCPStateChange+0x150>
		FreeRTOS_Socket_t * xParent = NULL;
 8004522:	2600      	movs	r6, #0
 8004524:	4642      	mov	r2, r8
 8004526:	f04f 0901 	mov.w	r9, #1
			FreeRTOS_Socket_t * xConnected = NULL;
 800452a:	4637      	mov	r7, r6
 800452c:	e756      	b.n	80043dc <vTCPStateChange+0xe0>
						configASSERT( xParent != NULL );
 800452e:	f240 61dd 	movw	r1, #1757	@ 0x6dd
 8004532:	4812      	ldr	r0, [pc, #72]	@ (800457c <vTCPStateChange+0x280>)
 8004534:	f7fc fc8e 	bl	8000e54 <vAssertCalled>
					pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 8004538:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
					if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 800453c:	f8d4 70d4 	ldr.w	r7, [r4, #212]	@ 0xd4
					pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 8004540:	f023 0306 	bic.w	r3, r3, #6
			if( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == 0 )
 8004544:	f894 2053 	ldrb.w	r2, [r4, #83]	@ 0x53
					pxSocket->u.xTCP.pxPeerSocket = NULL;
 8004548:	6566      	str	r6, [r4, #84]	@ 0x54
					pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 800454a:	f043 0302 	orr.w	r3, r3, #2
 800454e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
					if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 8004552:	b11f      	cbz	r7, 800455c <vTCPStateChange+0x260>
			if( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == 0 )
 8004554:	4627      	mov	r7, r4
 8004556:	f04f 0901 	mov.w	r9, #1
 800455a:	e73b      	b.n	80043d4 <vTCPStateChange+0xd8>
 800455c:	f04f 0901 	mov.w	r9, #1
 8004560:	e738      	b.n	80043d4 <vTCPStateChange+0xd8>
 8004562:	bf00      	nop
 8004564:	2000039c 	.word	0x2000039c
 8004568:	0800fb98 	.word	0x0800fb98
 800456c:	0800f534 	.word	0x0800f534
 8004570:	0800f49c 	.word	0x0800f49c
 8004574:	0800f4e0 	.word	0x0800f4e0
 8004578:	0800f504 	.word	0x0800f504
 800457c:	0800f4a8 	.word	0x0800f4a8

08004580 <prvTCPPrepareSend.constprop.0>:
		if( ( *ppxNetworkBuffer ) != NULL )
 8004580:	680b      	ldr	r3, [r1, #0]
	static int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
 8004582:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004586:	460e      	mov	r6, r1
 8004588:	b087      	sub	sp, #28
 800458a:	4604      	mov	r4, r0
		if( ( *ppxNetworkBuffer ) != NULL )
 800458c:	2b00      	cmp	r3, #0
 800458e:	d047      	beq.n	8004620 <prvTCPPrepareSend.constprop.0+0xa0>
			pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 8004590:	699b      	ldr	r3, [r3, #24]
		pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 8004592:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
		pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8004596:	f103 0722 	add.w	r7, r3, #34	@ 0x22
		pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800459a:	f104 08e4 	add.w	r8, r4, #228	@ 0xe4
		pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 800459e:	f042 0210 	orr.w	r2, r2, #16
 80045a2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		lStreamPos = 0;
 80045a6:	2200      	movs	r2, #0
		if( pxSocket->u.xTCP.txStream != NULL )
 80045a8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
		lStreamPos = 0;
 80045aa:	9205      	str	r2, [sp, #20]
		if( pxSocket->u.xTCP.txStream != NULL )
 80045ac:	b11b      	cbz	r3, 80045b6 <prvTCPPrepareSend.constprop.0+0x36>
			if( pxSocket->u.xTCP.usCurMSS > 1U )
 80045ae:	f8b4 304a 	ldrh.w	r3, [r4, #74]	@ 0x4a
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d815      	bhi.n	80045e2 <prvTCPPrepareSend.constprop.0+0x62>
		if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) )
 80045b6:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 80045ba:	2b05      	cmp	r3, #5
 80045bc:	d042      	beq.n	8004644 <prvTCPPrepareSend.constprop.0+0xc4>
			( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 80045be:	f894 5041 	ldrb.w	r5, [r4, #65]	@ 0x41
 80045c2:	f015 0503 	ands.w	r5, r5, #3
 80045c6:	d008      	beq.n	80045da <prvTCPPrepareSend.constprop.0+0x5a>
			pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 80045c8:	7b7b      	ldrb	r3, [r7, #13]
			pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 80045ca:	2250      	movs	r2, #80	@ 0x50
			pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 80045cc:	2528      	movs	r5, #40	@ 0x28
			pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 80045ce:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
			pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 80045d2:	733a      	strb	r2, [r7, #12]
			pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 80045d4:	f043 0310 	orr.w	r3, r3, #16
 80045d8:	737b      	strb	r3, [r7, #13]
	}
 80045da:	4628      	mov	r0, r5
 80045dc:	b007      	add	sp, #28
 80045de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 80045e2:	aa05      	add	r2, sp, #20
 80045e4:	f8d4 10d8 	ldr.w	r1, [r4, #216]	@ 0xd8
 80045e8:	4640      	mov	r0, r8
 80045ea:	f001 ff21 	bl	8006430 <ulTCPWindowTxGet>
			if( lDataLen > 0 )
 80045ee:	2800      	cmp	r0, #0
				lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 80045f0:	4681      	mov	r9, r0
 80045f2:	4605      	mov	r5, r0
			if( lDataLen > 0 )
 80045f4:	dc17      	bgt.n	8004626 <prvTCPPrepareSend.constprop.0+0xa6>
		if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) )
 80045f6:	d0de      	beq.n	80045b6 <prvTCPPrepareSend.constprop.0+0x36>
			( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 80045f8:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80045fc:	079b      	lsls	r3, r3, #30
 80045fe:	d0ec      	beq.n	80045da <prvTCPPrepareSend.constprop.0+0x5a>
			pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 8004600:	7b7b      	ldrb	r3, [r7, #13]
			pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 8004602:	2250      	movs	r2, #80	@ 0x50
			pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 8004604:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
			pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 8004608:	733a      	strb	r2, [r7, #12]
			pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 800460a:	f043 0210 	orr.w	r2, r3, #16
 800460e:	737a      	strb	r2, [r7, #13]
			lDataLen += ( int32_t ) uxIntermediateResult;
 8004610:	3528      	adds	r5, #40	@ 0x28
				pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 8004612:	f043 0318 	orr.w	r3, r3, #24
	}
 8004616:	4628      	mov	r0, r5
				pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 8004618:	737b      	strb	r3, [r7, #13]
	}
 800461a:	b007      	add	sp, #28
 800461c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8004620:	f100 0382 	add.w	r3, r0, #130	@ 0x82
 8004624:	e7b5      	b.n	8004592 <prvTCPPrepareSend.constprop.0+0x12>
		if( xBufferAllocFixedSize != pdFALSE )
 8004626:	4b8b      	ldr	r3, [pc, #556]	@ (8004854 <prvTCPPrepareSend.constprop.0+0x2d4>)
				pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 8004628:	f8d6 a000 	ldr.w	sl, [r6]
		if( xBufferAllocFixedSize != pdFALSE )
 800462c:	6819      	ldr	r1, [r3, #0]
 800462e:	2900      	cmp	r1, #0
 8004630:	d072      	beq.n	8004718 <prvTCPPrepareSend.constprop.0+0x198>
			if( pxNetworkBuffer == NULL )
 8004632:	f1ba 0f00 	cmp.w	sl, #0
 8004636:	f000 80c4 	beq.w	80047c2 <prvTCPPrepareSend.constprop.0+0x242>
			uxNeeded = ipNUMERIC_CAST( size_t, ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + lDataLen;
 800463a:	f100 0236 	add.w	r2, r0, #54	@ 0x36
			pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 800463e:	f8ca 201c 	str.w	r2, [sl, #28]
				if( pxNewBuffer != NULL )
 8004642:	e08a      	b.n	800475a <prvTCPPrepareSend.constprop.0+0x1da>
		lDataLen = 0;
 8004644:	2500      	movs	r5, #0
			if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8004646:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800464a:	0699      	lsls	r1, r3, #26
 800464c:	d444      	bmi.n	80046d8 <prvTCPPrepareSend.constprop.0+0x158>
					if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 800464e:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 8004652:	2b03      	cmp	r3, #3
 8004654:	d834      	bhi.n	80046c0 <prvTCPPrepareSend.constprop.0+0x140>
					if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 8004656:	b145      	cbz	r5, 800466a <prvTCPPrepareSend.constprop.0+0xea>
			pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 8004658:	7b7b      	ldrb	r3, [r7, #13]
 800465a:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
			pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 800465e:	2150      	movs	r1, #80	@ 0x50
			pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 8004660:	f043 0210 	orr.w	r2, r3, #16
			pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 8004664:	7339      	strb	r1, [r7, #12]
			pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 8004666:	737a      	strb	r2, [r7, #13]
			if( lDataLen != 0L )
 8004668:	e7d2      	b.n	8004610 <prvTCPPrepareSend.constprop.0+0x90>
					if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 800466a:	f894 5041 	ldrb.w	r5, [r4, #65]	@ 0x41
 800466e:	07ea      	lsls	r2, r5, #31
 8004670:	d4a7      	bmi.n	80045c2 <prvTCPPrepareSend.constprop.0+0x42>
						TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8004672:	f004 fce5 	bl	8009040 <xTaskGetTickCount>
 8004676:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
						if( pxSocket->u.xTCP.ucKeepRepCount != ( uint8_t ) 0U )
 8004678:	f894 1058 	ldrb.w	r1, [r4, #88]	@ 0x58
						xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 800467c:	f644 6220 	movw	r2, #20000	@ 0x4e20
						TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8004680:	1ac0      	subs	r0, r0, r3
						xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 8004682:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8004686:	2900      	cmp	r1, #0
 8004688:	bf08      	it	eq
 800468a:	4613      	moveq	r3, r2
						if( xAge > xMax )
 800468c:	4298      	cmp	r0, r3
 800468e:	d996      	bls.n	80045be <prvTCPPrepareSend.constprop.0+0x3e>
							pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8004690:	f004 fcd6 	bl	8009040 <xTaskGetTickCount>
							if( xTCPWindowLoggingLevel != 0 )
 8004694:	4b70      	ldr	r3, [pc, #448]	@ (8004858 <prvTCPPrepareSend.constprop.0+0x2d8>)
							pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8004696:	65e0      	str	r0, [r4, #92]	@ 0x5c
							if( xTCPWindowLoggingLevel != 0 )
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	f040 80d2 	bne.w	8004844 <prvTCPPrepareSend.constprop.0+0x2c4>
							pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 80046a0:	f894 5041 	ldrb.w	r5, [r4, #65]	@ 0x41
							pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 80046a4:	f640 12c4 	movw	r2, #2500	@ 0x9c4
							pxSocket->u.xTCP.ucKeepRepCount++;
 80046a8:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
							pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 80046ac:	f045 0502 	orr.w	r5, r5, #2
							pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 80046b0:	f8a4 2048 	strh.w	r2, [r4, #72]	@ 0x48
							pxSocket->u.xTCP.ucKeepRepCount++;
 80046b4:	3301      	adds	r3, #1
							pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 80046b6:	f884 5041 	strb.w	r5, [r4, #65]	@ 0x41
							pxSocket->u.xTCP.ucKeepRepCount++;
 80046ba:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
		if( ( lDataLen > 0 ) ||
 80046be:	e780      	b.n	80045c2 <prvTCPPrepareSend.constprop.0+0x42>
						FreeRTOS_debug_printf( ( "keep-alive: giving up %lxip:%u\n",
 80046c0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
						lDataLen = -1;
 80046c2:	f04f 35ff 	mov.w	r5, #4294967295
						FreeRTOS_debug_printf( ( "keep-alive: giving up %lxip:%u\n",
 80046c6:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 80046c8:	4864      	ldr	r0, [pc, #400]	@ (800485c <prvTCPPrepareSend.constprop.0+0x2dc>)
 80046ca:	f008 fbb7 	bl	800ce3c <lUDPLoggingPrintf>
						vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80046ce:	2108      	movs	r1, #8
 80046d0:	4620      	mov	r0, r4
 80046d2:	f7ff fe13 	bl	80042fc <vTCPStateChange>
		if( ( lDataLen > 0 ) ||
 80046d6:	e78f      	b.n	80045f8 <prvTCPPrepareSend.constprop.0+0x78>
				( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 80046d8:	4640      	mov	r0, r8
 80046da:	f001 fe71 	bl	80063c0 <xTCPWindowTxDone>
			if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 80046de:	2800      	cmp	r0, #0
 80046e0:	d0b5      	beq.n	800464e <prvTCPPrepareSend.constprop.0+0xce>
				pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 80046e2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
				vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 80046e6:	4620      	mov	r0, r4
				pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 80046e8:	7b7a      	ldrb	r2, [r7, #13]
				pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 80046ea:	f894 1040 	ldrb.w	r1, [r4, #64]	@ 0x40
				pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 80046ee:	f023 0341 	bic.w	r3, r3, #65	@ 0x41
				pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 80046f2:	f042 0201 	orr.w	r2, r2, #1
				pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 80046f6:	f36f 1145 	bfc	r1, #5, #1
				pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 80046fa:	f043 0341 	orr.w	r3, r3, #65	@ 0x41
				pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 80046fe:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
				vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 8004702:	2106      	movs	r1, #6
				pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8004704:	737a      	strb	r2, [r7, #13]
				pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8004706:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
				pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800470a:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 800470e:	f8c4 3108 	str.w	r3, [r4, #264]	@ 0x108
				vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 8004712:	f7ff fdf3 	bl	80042fc <vTCPStateChange>
 8004716:	e79a      	b.n	800464e <prvTCPPrepareSend.constprop.0+0xce>
			uxNeeded = ipNUMERIC_CAST( size_t, ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + lDataLen;
 8004718:	f100 0236 	add.w	r2, r0, #54	@ 0x36
			if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 800471c:	2a46      	cmp	r2, #70	@ 0x46
 800471e:	4693      	mov	fp, r2
 8004720:	bf38      	it	cc
 8004722:	f04f 0b46 	movcc.w	fp, #70	@ 0x46
			if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 8004726:	f1ba 0f00 	cmp.w	sl, #0
 800472a:	d04c      	beq.n	80047c6 <prvTCPPrepareSend.constprop.0+0x246>
 800472c:	f8da 301c 	ldr.w	r3, [sl, #28]
 8004730:	459b      	cmp	fp, r3
 8004732:	d984      	bls.n	800463e <prvTCPPrepareSend.constprop.0+0xbe>
			pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 8004734:	4658      	mov	r0, fp
 8004736:	f002 f8ef 	bl	8006918 <pxGetNetworkBufferWithDescriptor>
			if( pxReturn != NULL )
 800473a:	4603      	mov	r3, r0
 800473c:	2800      	cmp	r0, #0
 800473e:	d048      	beq.n	80047d2 <prvTCPPrepareSend.constprop.0+0x252>
				pxReturn->xDataLength = uxNeeded;
 8004740:	f8c3 b01c 	str.w	fp, [r3, #28]
					( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8004744:	6998      	ldr	r0, [r3, #24]
 8004746:	9303      	str	r3, [sp, #12]
 8004748:	e9da 1206 	ldrd	r1, r2, [sl, #24]
 800474c:	f008 fd38 	bl	800d1c0 <memcpy>
					vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8004750:	4650      	mov	r0, sl
 8004752:	f002 f91d 	bl	8006990 <vReleaseNetworkBufferAndDescriptor>
			pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 8004756:	9b03      	ldr	r3, [sp, #12]
 8004758:	469a      	mov	sl, r3
					*ppxNetworkBuffer = pxNewBuffer;
 800475a:	f8c6 a000 	str.w	sl, [r6]
					uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 800475e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8004760:	9b05      	ldr	r3, [sp, #20]
 8004762:	6901      	ldr	r1, [r0, #16]
					pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 8004764:	f8da 6018 	ldr.w	r6, [sl, #24]
 8004768:	440b      	add	r3, r1
					uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 800476a:	f8d0 a000 	ldr.w	sl, [r0]
					pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 800476e:	f106 0236 	add.w	r2, r6, #54	@ 0x36
					pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8004772:	f106 0722 	add.w	r7, r6, #34	@ 0x22
 8004776:	eba3 0a0a 	sub.w	sl, r3, sl
					ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 800477a:	2301      	movs	r3, #1
        if( uxCount >= pxBuffer->LENGTH )
 800477c:	4551      	cmp	r1, sl
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	464b      	mov	r3, r9
            uxCount -= pxBuffer->LENGTH;
 8004782:	bf98      	it	ls
 8004784:	ebaa 0a01 	subls.w	sl, sl, r1
 8004788:	4651      	mov	r1, sl
 800478a:	f7ff fb6b 	bl	8003e64 <uxStreamBufferGet>
							if( ulDataGot != ( uint32_t ) lDataLen )
 800478e:	4581      	cmp	r9, r0
					ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 8004790:	4683      	mov	fp, r0
							if( ulDataGot != ( uint32_t ) lDataLen )
 8004792:	d007      	beq.n	80047a4 <prvTCPPrepareSend.constprop.0+0x224>
								FreeRTOS_debug_printf( ( "uxStreamBufferGet: pos %d offs %u only %u != %d\n",
 8004794:	4603      	mov	r3, r0
 8004796:	4652      	mov	r2, sl
 8004798:	9905      	ldr	r1, [sp, #20]
 800479a:	4831      	ldr	r0, [pc, #196]	@ (8004860 <prvTCPPrepareSend.constprop.0+0x2e0>)
 800479c:	f8cd 9000 	str.w	r9, [sp]
 80047a0:	f008 fb4c 	bl	800ce3c <lUDPLoggingPrintf>
					if( ( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) )
 80047a4:	f244 0340 	movw	r3, #16448	@ 0x4040
 80047a8:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b40      	cmp	r3, #64	@ 0x40
 80047b0:	d012      	beq.n	80047d8 <prvTCPPrepareSend.constprop.0+0x258>
		if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) )
 80047b2:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 80047b6:	2b05      	cmp	r3, #5
 80047b8:	f43f af45 	beq.w	8004646 <prvTCPPrepareSend.constprop.0+0xc6>
			pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 80047bc:	f896 302f 	ldrb.w	r3, [r6, #47]	@ 0x2f
 80047c0:	e74b      	b.n	800465a <prvTCPPrepareSend.constprop.0+0xda>
			uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 80047c2:	f240 5bf2 	movw	fp, #1522	@ 0x5f2
			pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 80047c6:	2100      	movs	r1, #0
 80047c8:	4658      	mov	r0, fp
 80047ca:	f002 f8a5 	bl	8006918 <pxGetNetworkBufferWithDescriptor>
			if( pxReturn != NULL )
 80047ce:	4682      	mov	sl, r0
 80047d0:	bb70      	cbnz	r0, 8004830 <prvTCPPrepareSend.constprop.0+0x2b0>
					lDataLen = -1;
 80047d2:	f04f 35ff 	mov.w	r5, #4294967295
 80047d6:	e70f      	b.n	80045f8 <prvTCPPrepareSend.constprop.0+0x78>
						ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 80047d8:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 80047da:	9905      	ldr	r1, [sp, #20]
 80047dc:	6910      	ldr	r0, [r2, #16]
 80047de:	6893      	ldr	r3, [r2, #8]
 80047e0:	4403      	add	r3, r0
 80047e2:	1a5b      	subs	r3, r3, r1
        if( uxCount >= pxBuffer->LENGTH )
 80047e4:	4298      	cmp	r0, r3
            uxCount -= pxBuffer->LENGTH;
 80047e6:	bf98      	it	ls
 80047e8:	1a1b      	subls	r3, r3, r0
						if( ulDistance == ulDataGot )
 80047ea:	459b      	cmp	fp, r3
 80047ec:	d1e1      	bne.n	80047b2 <prvTCPPrepareSend.constprop.0+0x232>
									size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
 80047ee:	6890      	ldr	r0, [r2, #8]
									size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
 80047f0:	6851      	ldr	r1, [r2, #4]
									size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
 80047f2:	6813      	ldr	r3, [r2, #0]
									FreeRTOS_debug_printf( ( "CheckClose %u <= %u (%u <= %u <= %u)\n",
 80047f4:	465a      	mov	r2, fp
 80047f6:	e9cd 1000 	strd	r1, r0, [sp]
 80047fa:	4659      	mov	r1, fp
 80047fc:	4819      	ldr	r0, [pc, #100]	@ (8004864 <prvTCPPrepareSend.constprop.0+0x2e4>)
 80047fe:	f008 fb1d 	bl	800ce3c <lUDPLoggingPrintf>
							pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8004802:	f896 302f 	ldrb.w	r3, [r6, #47]	@ 0x2f
							pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 8004806:	f8d4 2110 	ldr.w	r2, [r4, #272]	@ 0x110
							pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 800480a:	f043 0301 	orr.w	r3, r3, #1
							pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 800480e:	444a      	add	r2, r9
							pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8004810:	f886 302f 	strb.w	r3, [r6, #47]	@ 0x2f
							pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 8004814:	f8c4 2108 	str.w	r2, [r4, #264]	@ 0x108
							pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8004818:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800481c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004820:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
		if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) )
 8004824:	f894 2053 	ldrb.w	r2, [r4, #83]	@ 0x53
 8004828:	2a05      	cmp	r2, #5
 800482a:	f47f af16 	bne.w	800465a <prvTCPPrepareSend.constprop.0+0xda>
 800482e:	e70a      	b.n	8004646 <prvTCPPrepareSend.constprop.0+0xc6>
					( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8004830:	2246      	movs	r2, #70	@ 0x46
 8004832:	f104 0182 	add.w	r1, r4, #130	@ 0x82
 8004836:	f8da 0018 	ldr.w	r0, [sl, #24]
				pxReturn->xDataLength = uxNeeded;
 800483a:	f8ca b01c 	str.w	fp, [sl, #28]
					( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800483e:	f008 fcbf 	bl	800d1c0 <memcpy>
				if( pxNewBuffer != NULL )
 8004842:	e78a      	b.n	800475a <prvTCPPrepareSend.constprop.0+0x1da>
								FreeRTOS_debug_printf( ( "keep-alive: %lxip:%u count %u\n",
 8004844:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 8004848:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 800484a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800484c:	4806      	ldr	r0, [pc, #24]	@ (8004868 <prvTCPPrepareSend.constprop.0+0x2e8>)
 800484e:	f008 faf5 	bl	800ce3c <lUDPLoggingPrintf>
 8004852:	e725      	b.n	80046a0 <prvTCPPrepareSend.constprop.0+0x120>
 8004854:	08010254 	.word	0x08010254
 8004858:	2000039c 	.word	0x2000039c
 800485c:	0800f5b4 	.word	0x0800f5b4
 8004860:	0800f558 	.word	0x0800f558
 8004864:	0800f58c 	.word	0x0800f58c
 8004868:	0800f5d4 	.word	0x0800f5d4

0800486c <prvTCPHandleFin.isra.0>:
	static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
 800486c:	b5f0      	push	{r4, r5, r6, r7, lr}
		if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 800486e:	f891 302f 	ldrb.w	r3, [r1, #47]	@ 0x2f
	static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
 8004872:	b083      	sub	sp, #12
 8004874:	f8d1 702a 	ldr.w	r7, [r1, #42]	@ 0x2a
 8004878:	460d      	mov	r5, r1
		if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 800487a:	07de      	lsls	r6, r3, #31
	static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
 800487c:	4604      	mov	r4, r0
		uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 800487e:	ba3f      	rev	r7, r7
		if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 8004880:	d504      	bpl.n	800488c <prvTCPHandleFin.isra.0+0x20>
			pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 8004882:	f8d0 30f8 	ldr.w	r3, [r0, #248]	@ 0xf8
 8004886:	3301      	adds	r3, #1
 8004888:	f8c0 30f4 	str.w	r3, [r0, #244]	@ 0xf4
		if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800488c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8004890:	0658      	lsls	r0, r3, #25
 8004892:	d43c      	bmi.n	800490e <prvTCPHandleFin.isra.0+0xa2>
			pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8004894:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
			pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8004898:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
			pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800489c:	f8c4 2108 	str.w	r2, [r4, #264]	@ 0x108
			pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 80048a0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
		if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 80048a4:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 80048a8:	07d9      	lsls	r1, r3, #31
 80048aa:	d53f      	bpl.n	800492c <prvTCPHandleFin.isra.0+0xc0>
			if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 80048ac:	f994 1041 	ldrsb.w	r1, [r4, #65]	@ 0x41
			pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 80048b0:	3201      	adds	r2, #1
			if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 80048b2:	2900      	cmp	r1, #0
			pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 80048b4:	f8c4 2104 	str.w	r2, [r4, #260]	@ 0x104
			if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 80048b8:	db10      	blt.n	80048dc <prvTCPHandleFin.isra.0+0x70>
				pxTCPHeader->ucTCPFlags = 0U;
 80048ba:	2600      	movs	r6, #0
 80048bc:	f885 602f 	strb.w	r6, [r5, #47]	@ 0x2f
			ucIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength;
 80048c0:	f894 3120 	ldrb.w	r3, [r4, #288]	@ 0x120
		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80048c4:	f8c4 2110 	str.w	r2, [r4, #272]	@ 0x110
		pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 80048c8:	3314      	adds	r3, #20
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	f885 302e 	strb.w	r3, [r5, #46]	@ 0x2e
		if( xTCPWindowLoggingLevel != 0 )
 80048d0:	4b26      	ldr	r3, [pc, #152]	@ (800496c <prvTCPHandleFin.isra.0+0x100>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	bbc3      	cbnz	r3, 8004948 <prvTCPHandleFin.isra.0+0xdc>
	}
 80048d6:	4630      	mov	r0, r6
 80048d8:	b003      	add	sp, #12
 80048da:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 80048dc:	f083 0302 	eor.w	r3, r3, #2
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80048e0:	2108      	movs	r1, #8
 80048e2:	4620      	mov	r0, r4
				if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 80048e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	f885 302f 	strb.w	r3, [r5, #47]	@ 0x2f
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80048ee:	f7ff fd05 	bl	80042fc <vTCPStateChange>
		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80048f2:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
		if( pxTCPHeader->ucTCPFlags != 0U )
 80048f6:	f895 602f 	ldrb.w	r6, [r5, #47]	@ 0x2f
			ucIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength;
 80048fa:	f894 3120 	ldrb.w	r3, [r4, #288]	@ 0x120
		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80048fe:	f8c4 2110 	str.w	r2, [r4, #272]	@ 0x110
		if( pxTCPHeader->ucTCPFlags != 0U )
 8004902:	2e00      	cmp	r6, #0
 8004904:	d0e0      	beq.n	80048c8 <prvTCPHandleFin.isra.0+0x5c>
			ucIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength;
 8004906:	f103 0628 	add.w	r6, r3, #40	@ 0x28
			xSendLength = ( BaseType_t ) ucIntermediateResult;
 800490a:	b2f6      	uxtb	r6, r6
 800490c:	e7dc      	b.n	80048c8 <prvTCPHandleFin.isra.0+0x5c>
			if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1UL ) )
 800490e:	f8d4 2108 	ldr.w	r2, [r4, #264]	@ 0x108
 8004912:	1c53      	adds	r3, r2, #1
 8004914:	429f      	cmp	r7, r3
 8004916:	d1c5      	bne.n	80048a4 <prvTCPHandleFin.isra.0+0x38>
				pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 8004918:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
		if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 8004924:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8004928:	07d9      	lsls	r1, r3, #31
 800492a:	d4bf      	bmi.n	80048ac <prvTCPHandleFin.isra.0+0x40>
			pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 800492c:	2311      	movs	r3, #17
			pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800492e:	f8c4 2104 	str.w	r2, [r4, #260]	@ 0x104
			vTCPStateChange( pxSocket, eLAST_ACK );
 8004932:	210a      	movs	r1, #10
 8004934:	4620      	mov	r0, r4
			pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 8004936:	f885 302f 	strb.w	r3, [r5, #47]	@ 0x2f
			vTCPStateChange( pxSocket, eLAST_ACK );
 800493a:	f7ff fcdf 	bl	80042fc <vTCPStateChange>
		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800493e:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
		if( pxTCPHeader->ucTCPFlags != 0U )
 8004942:	f895 602f 	ldrb.w	r6, [r5, #47]	@ 0x2f
 8004946:	e7d8      	b.n	80048fa <prvTCPHandleFin.isra.0+0x8e>
			FreeRTOS_debug_printf( ( "TCP: send FIN+ACK (ack %lu, cur/nxt %lu/%lu) ourSeqNr %lu | Rx %lu\n",
 8004948:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 800494c:	1ad2      	subs	r2, r2, r3
 800494e:	1af9      	subs	r1, r7, r3
 8004950:	9200      	str	r2, [sp, #0]
 8004952:	e9d4 503c 	ldrd	r5, r0, [r4, #240]	@ 0xf0
 8004956:	1b40      	subs	r0, r0, r5
 8004958:	9001      	str	r0, [sp, #4]
 800495a:	f8d4 0118 	ldr.w	r0, [r4, #280]	@ 0x118
 800495e:	1ac3      	subs	r3, r0, r3
 8004960:	4803      	ldr	r0, [pc, #12]	@ (8004970 <prvTCPHandleFin.isra.0+0x104>)
 8004962:	f008 fa6b 	bl	800ce3c <lUDPLoggingPrintf>
	}
 8004966:	4630      	mov	r0, r6
 8004968:	b003      	add	sp, #12
 800496a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800496c:	2000039c 	.word	0x2000039c
 8004970:	0800f5f4 	.word	0x0800f5f4

08004974 <xTCPSocketCheck>:
		if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 8004974:	f890 3053 	ldrb.w	r3, [r0, #83]	@ 0x53
 8004978:	2b04      	cmp	r3, #4
	{
 800497a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800497c:	4604      	mov	r4, r0
 800497e:	b08b      	sub	sp, #44	@ 0x2c
		if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 8004980:	d904      	bls.n	800498c <xTCPSocketCheck+0x18>
 8004982:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8004984:	2b00      	cmp	r3, #0
 8004986:	d055      	beq.n	8004a34 <xTCPSocketCheck+0xc0>
			prvTCPAddTxData( pxSocket );
 8004988:	f7ff fb12 	bl	8003fb0 <prvTCPAddTxData>
				if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800498c:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800498e:	b1d0      	cbz	r0, 80049c6 <xTCPSocketCheck+0x52>
					if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 8004990:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004994:	069d      	lsls	r5, r3, #26
 8004996:	d412      	bmi.n	80049be <xTCPSocketCheck+0x4a>
						if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCLOSED )
 8004998:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 800499c:	2b00      	cmp	r3, #0
 800499e:	d150      	bne.n	8004a42 <xTCPSocketCheck+0xce>
						if( prvTCPNextTimeout( pxSocket ) > 1U )
 80049a0:	4620      	mov	r0, r4
 80049a2:	f7ff fc4b 	bl	800423c <prvTCPNextTimeout>
 80049a6:	2801      	cmp	r0, #1
					if( pxSocket->u.xTCP.pxAckMessage != NULL )
 80049a8:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
						if( prvTCPNextTimeout( pxSocket ) > 1U )
 80049aa:	d907      	bls.n	80049bc <xTCPSocketCheck+0x48>
					if( pxSocket->u.xTCP.pxAckMessage != NULL )
 80049ac:	b118      	cbz	r0, 80049b6 <xTCPSocketCheck+0x42>
						vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 80049ae:	f001 ffef 	bl	8006990 <vReleaseNetworkBufferAndDescriptor>
						pxSocket->u.xTCP.pxAckMessage = NULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	67e3      	str	r3, [r4, #124]	@ 0x7c
		BaseType_t xResult = 0;
 80049b6:	2000      	movs	r0, #0
	}
 80049b8:	b00b      	add	sp, #44	@ 0x2c
 80049ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( pxSocket->u.xTCP.pxAckMessage != NULL )
 80049bc:	b118      	cbz	r0, 80049c6 <xTCPSocketCheck+0x52>
						vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 80049be:	f001 ffe7 	bl	8006990 <vReleaseNetworkBufferAndDescriptor>
						pxSocket->u.xTCP.pxAckMessage = NULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	67e3      	str	r3, [r4, #124]	@ 0x7c
			if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) ||
 80049c6:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d85c      	bhi.n	8004a88 <xTCPSocketCheck+0x114>
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d05c      	beq.n	8004a8c <xTCPSocketCheck+0x118>
			( void ) prvTCPNextTimeout( pxSocket );
 80049d2:	4620      	mov	r0, r4
 80049d4:	f7ff fc32 	bl	800423c <prvTCPNextTimeout>
			eIPTCPState_t eState = ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState );
 80049d8:	f894 2053 	ldrb.w	r2, [r4, #83]	@ 0x53
			switch( eState )
 80049dc:	2a08      	cmp	r2, #8
 80049de:	d804      	bhi.n	80049ea <xTCPSocketCheck+0x76>
 80049e0:	f240 1323 	movw	r3, #291	@ 0x123
 80049e4:	40d3      	lsrs	r3, r2
 80049e6:	07d8      	lsls	r0, r3, #31
 80049e8:	d4e5      	bmi.n	80049b6 <xTCPSocketCheck+0x42>
				TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 80049ea:	f004 fb29 	bl	8009040 <xTaskGetTickCount>
 80049ee:	6e22      	ldr	r2, [r4, #96]	@ 0x60
				if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 80049f0:	f247 5330 	movw	r3, #30000	@ 0x7530
				TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 80049f4:	1a80      	subs	r0, r0, r2
				if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 80049f6:	4298      	cmp	r0, r3
 80049f8:	d943      	bls.n	8004a82 <xTCPSocketCheck+0x10e>
			if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 80049fa:	f894 1053 	ldrb.w	r1, [r4, #83]	@ 0x53
			return pcStateNames[ xIndex ];
 80049fe:	4886      	ldr	r0, [pc, #536]	@ (8004c18 <xTCPSocketCheck+0x2a4>)
			if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 8004a00:	290c      	cmp	r1, #12
							FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %lxip:%u status %s\n",
 8004a02:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8004a04:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
			if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 8004a06:	bf28      	it	cs
 8004a08:	210c      	movcs	r1, #12
							FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %lxip:%u status %s\n",
 8004a0a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8004a0e:	4883      	ldr	r0, [pc, #524]	@ (8004c1c <xTCPSocketCheck+0x2a8>)
 8004a10:	9100      	str	r1, [sp, #0]
 8004a12:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
 8004a14:	f008 fa12 	bl	800ce3c <lUDPLoggingPrintf>
					vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8004a18:	2108      	movs	r1, #8
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	f7ff fc6e 	bl	80042fc <vTCPStateChange>
					if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8004a20:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004a24:	0759      	lsls	r1, r3, #29
 8004a26:	d52c      	bpl.n	8004a82 <xTCPSocketCheck+0x10e>
						if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 8004a28:	071a      	lsls	r2, r3, #28
 8004a2a:	f140 80f1 	bpl.w	8004c10 <xTCPSocketCheck+0x29c>
						xResult = -1;
 8004a2e:	f04f 30ff 	mov.w	r0, #4294967295
		return xResult;
 8004a32:	e027      	b.n	8004a84 <xTCPSocketCheck+0x110>
				if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8004a34:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8004a36:	2800      	cmp	r0, #0
 8004a38:	d061      	beq.n	8004afe <xTCPSocketCheck+0x18a>
					if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 8004a3a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004a3e:	069b      	lsls	r3, r3, #26
 8004a40:	d4bd      	bmi.n	80049be <xTCPSocketCheck+0x4a>
							if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 8004a42:	4b77      	ldr	r3, [pc, #476]	@ (8004c20 <xTCPSocketCheck+0x2ac>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	dd12      	ble.n	8004a70 <xTCPSocketCheck+0xfc>
 8004a4a:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
 8004a4c:	2917      	cmp	r1, #23
 8004a4e:	d00f      	beq.n	8004a70 <xTCPSocketCheck+0xfc>
								FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %lu SEQ %lu (len %u)\n",
 8004a50:	f8d4 0110 	ldr.w	r0, [r4, #272]	@ 0x110
 8004a54:	e9d4 323c 	ldrd	r3, r2, [r4, #240]	@ 0xf0
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2228      	movs	r2, #40	@ 0x28
 8004a5c:	9201      	str	r2, [sp, #4]
 8004a5e:	f8d4 2100 	ldr.w	r2, [r4, #256]	@ 0x100
 8004a62:	1a80      	subs	r0, r0, r2
 8004a64:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 8004a66:	9000      	str	r0, [sp, #0]
 8004a68:	486e      	ldr	r0, [pc, #440]	@ (8004c24 <xTCPSocketCheck+0x2b0>)
 8004a6a:	f008 f9e7 	bl	800ce3c <lUDPLoggingPrintf>
 8004a6e:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
							prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER, ipconfigZERO_COPY_TX_DRIVER );
 8004a70:	2301      	movs	r3, #1
 8004a72:	4601      	mov	r1, r0
 8004a74:	2228      	movs	r2, #40	@ 0x28
 8004a76:	4620      	mov	r0, r4
 8004a78:	f7ff fac6 	bl	8004008 <prvTCPReturnPacket>
									pxSocket->u.xTCP.pxAckMessage = NULL;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8004a80:	e78e      	b.n	80049a0 <xTCPSocketCheck+0x2c>
					xResult = pdTRUE;
 8004a82:	2001      	movs	r0, #1
	}
 8004a84:	b00b      	add	sp, #44	@ 0x2c
 8004a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCONNECT_SYN )
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d138      	bne.n	8004afe <xTCPSocketCheck+0x18a>
			if( pxSocket->u.xTCP.ucRepCount >= 3U )
 8004a8c:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	f200 80b3 	bhi.w	8004bfc <xTCPSocketCheck+0x288>
			else if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) || ( prvTCPPrepareConnect( pxSocket ) == pdTRUE ) )
 8004a96:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8004a9a:	f013 0508 	ands.w	r5, r3, #8
 8004a9e:	f040 8096 	bne.w	8004bce <xTCPSocketCheck+0x25a>
				( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8004aa2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
		eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 8004aa4:	a807      	add	r0, sp, #28
 8004aa6:	a908      	add	r1, sp, #32
				( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8004aa8:	9508      	str	r5, [sp, #32]
 8004aaa:	ba1b      	rev	r3, r3
 8004aac:	f8ad 5024 	strh.w	r5, [sp, #36]	@ 0x24
		ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 8004ab0:	9307      	str	r3, [sp, #28]
		eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 8004ab2:	f7fc fdb9 	bl	8001628 <eARPGetCacheEntry>
		switch( eReturned )
 8004ab6:	2801      	cmp	r0, #1
		eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 8004ab8:	4603      	mov	r3, r0
		switch( eReturned )
 8004aba:	d03a      	beq.n	8004b32 <xTCPSocketCheck+0x1be>
				pxSocket->u.xTCP.ucRepCount++;
 8004abc:	f894 1052 	ldrb.w	r1, [r4, #82]	@ 0x52
				FreeRTOS_debug_printf( ( "ARP for %lxip (using %lxip): rc=%d %02X:%02X:%02X %02X:%02X:%02X\n",
 8004ac0:	f89d 0025 	ldrb.w	r0, [sp, #37]	@ 0x25
				pxSocket->u.xTCP.ucRepCount++;
 8004ac4:	3101      	adds	r1, #1
 8004ac6:	9a07      	ldr	r2, [sp, #28]
				FreeRTOS_debug_printf( ( "ARP for %lxip (using %lxip): rc=%d %02X:%02X:%02X %02X:%02X:%02X\n",
 8004ac8:	9005      	str	r0, [sp, #20]
 8004aca:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8004ace:	ba12      	rev	r2, r2
				pxSocket->u.xTCP.ucRepCount++;
 8004ad0:	f884 1052 	strb.w	r1, [r4, #82]	@ 0x52
				FreeRTOS_debug_printf( ( "ARP for %lxip (using %lxip): rc=%d %02X:%02X:%02X %02X:%02X:%02X\n",
 8004ad4:	f89d 1022 	ldrb.w	r1, [sp, #34]	@ 0x22
 8004ad8:	9004      	str	r0, [sp, #16]
 8004ada:	f89d 0023 	ldrb.w	r0, [sp, #35]	@ 0x23
 8004ade:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8004ae2:	f89d 0021 	ldrb.w	r0, [sp, #33]	@ 0x21
 8004ae6:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8004aea:	e9cd 1000 	strd	r1, r0, [sp]
 8004aee:	484e      	ldr	r0, [pc, #312]	@ (8004c28 <xTCPSocketCheck+0x2b4>)
 8004af0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004af2:	f008 f9a3 	bl	800ce3c <lUDPLoggingPrintf>
				FreeRTOS_OutputARPRequest( ulRemoteIP );
 8004af6:	9807      	ldr	r0, [sp, #28]
 8004af8:	f7fc fe50 	bl	800179c <FreeRTOS_OutputARPRequest>
		return xReturn;
 8004afc:	e769      	b.n	80049d2 <xTCPSocketCheck+0x5e>
			pxNetworkBuffer = NULL;
 8004afe:	2600      	movs	r6, #0
 8004b00:	2508      	movs	r5, #8
 8004b02:	9608      	str	r6, [sp, #32]
			xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8004b04:	a908      	add	r1, sp, #32
 8004b06:	4620      	mov	r0, r4
 8004b08:	f7ff fd3a 	bl	8004580 <prvTCPPrepareSend.constprop.0>
			if( xSendLength <= 0 )
 8004b0c:	1e02      	subs	r2, r0, #0
			prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8004b0e:	f04f 0301 	mov.w	r3, #1
			if( xSendLength <= 0 )
 8004b12:	dd07      	ble.n	8004b24 <xTCPSocketCheck+0x1b0>
			prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8004b14:	9908      	ldr	r1, [sp, #32]
 8004b16:	4620      	mov	r0, r4
 8004b18:	f7ff fa76 	bl	8004008 <prvTCPReturnPacket>
		for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8004b1c:	3d01      	subs	r5, #1
					*ppxNetworkBuffer = NULL;
 8004b1e:	9608      	str	r6, [sp, #32]
		for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8004b20:	d1f0      	bne.n	8004b04 <xTCPSocketCheck+0x190>
 8004b22:	e756      	b.n	80049d2 <xTCPSocketCheck+0x5e>
			prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8004b24:	9808      	ldr	r0, [sp, #32]
			if( pxNetworkBuffer != NULL )
 8004b26:	2800      	cmp	r0, #0
 8004b28:	f43f af53 	beq.w	80049d2 <xTCPSocketCheck+0x5e>
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8004b2c:	f001 ff30 	bl	8006990 <vReleaseNetworkBufferAndDescriptor>
 8004b30:	e74f      	b.n	80049d2 <xTCPSocketCheck+0x5e>
			ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
 8004b32:	4f3e      	ldr	r7, [pc, #248]	@ (8004c2c <xTCPSocketCheck+0x2b8>)
 8004b34:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8004b36:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004b38:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
 8004b3a:	6978      	ldr	r0, [r7, #20]
 8004b3c:	f7fc f9ae 	bl	8000e9c <ulApplicationGetNextSequenceNumber>
			if( ulInitialSequenceNumber == 0UL )
 8004b40:	4606      	mov	r6, r0
 8004b42:	2800      	cmp	r0, #0
 8004b44:	f43f af45 	beq.w	80049d2 <xTCPSocketCheck+0x5e>
			pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8004b48:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
			( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8004b4c:	2246      	movs	r2, #70	@ 0x46
 8004b4e:	4629      	mov	r1, r5
 8004b50:	f104 0082 	add.w	r0, r4, #130	@ 0x82
			pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8004b54:	f043 0308 	orr.w	r3, r3, #8
			pxSocket->u.xTCP.ucRepCount = 0U;
 8004b58:	f884 5052 	strb.w	r5, [r4, #82]	@ 0x52
			pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8004b5c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
			( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8004b60:	f008 fc02 	bl	800d368 <memset>
			( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8004b64:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
			pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8004b68:	6978      	ldr	r0, [r7, #20]
			pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8004b6a:	2108      	movs	r1, #8
			( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8004b6c:	f8a4 308c 	strh.w	r3, [r4, #140]	@ 0x8c
			pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8004b70:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8004b72:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 8004b74:	ba1b      	rev	r3, r3
			pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8004b76:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0
			pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8004b7a:	f884 108e 	strb.w	r1, [r4, #142]	@ 0x8e
			pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 8004b7e:	f44f 7014 	mov.w	r0, #592	@ 0x250
			pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 8004b82:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
			pxIPHeader->ucVersionHeaderLength = 0x45U;
 8004b86:	2145      	movs	r1, #69	@ 0x45
			pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8004b88:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
			pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8004b8a:	ba52      	rev16	r2, r2
			pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 8004b8c:	f8a4 00b0 	strh.w	r0, [r4, #176]	@ 0xb0
			pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8004b90:	ba5b      	rev16	r3, r3
			( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8004b92:	9808      	ldr	r0, [sp, #32]
			pxIPHeader->ucVersionHeaderLength = 0x45U;
 8004b94:	f884 1090 	strb.w	r1, [r4, #144]	@ 0x90
			pxIPHeader->usLength = FreeRTOS_htons( usLength );
 8004b98:	2138      	movs	r1, #56	@ 0x38
			pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8004b9a:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
			pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8004b9e:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
			( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8004ba2:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
			prvSocketSetMSS( pxSocket );
 8004ba6:	4620      	mov	r0, r4
			pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8004ba8:	f8c4 6110 	str.w	r6, [r4, #272]	@ 0x110
			pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8004bac:	f884 508f 	strb.w	r5, [r4, #143]	@ 0x8f
			pxIPHeader->usLength = FreeRTOS_htons( usLength );
 8004bb0:	f884 5092 	strb.w	r5, [r4, #146]	@ 0x92
			pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8004bb4:	f8a4 20a4 	strh.w	r2, [r4, #164]	@ 0xa4
			pxIPHeader->usLength = FreeRTOS_htons( usLength );
 8004bb8:	f884 1093 	strb.w	r1, [r4, #147]	@ 0x93
			pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0UL;
 8004bbc:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
			pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8004bc0:	f8a4 3098 	strh.w	r3, [r4, #152]	@ 0x98
			prvSocketSetMSS( pxSocket );
 8004bc4:	f7ff f99e 	bl	8003f04 <prvSocketSetMSS>
			prvTCPCreateWindow( pxSocket );
 8004bc8:	4620      	mov	r0, r4
 8004bca:	f7ff fb09 	bl	80041e0 <prvTCPCreateWindow>
				uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 8004bce:	f104 01a4 	add.w	r1, r4, #164	@ 0xa4
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f7ff f9b8 	bl	8003f48 <prvSetSynAckOptions>
				pxSocket->u.xTCP.ucRepCount++;
 8004bd8:	f894 1052 	ldrb.w	r1, [r4, #82]	@ 0x52
				pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8004bdc:	f100 0514 	add.w	r5, r0, #20
				prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8004be0:	2300      	movs	r3, #0
				pxSocket->u.xTCP.ucRepCount++;
 8004be2:	3101      	adds	r1, #1
				prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8004be4:	f100 0228 	add.w	r2, r0, #40	@ 0x28
				pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8004be8:	00ad      	lsls	r5, r5, #2
				prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8004bea:	4620      	mov	r0, r4
				pxSocket->u.xTCP.ucRepCount++;
 8004bec:	f884 1052 	strb.w	r1, [r4, #82]	@ 0x52
				prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8004bf0:	4619      	mov	r1, r3
				pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8004bf2:	f884 50b0 	strb.w	r5, [r4, #176]	@ 0xb0
				prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8004bf6:	f7ff fa07 	bl	8004008 <prvTCPReturnPacket>
		return lResult;
 8004bfa:	e6ea      	b.n	80049d2 <xTCPSocketCheck+0x5e>
				FreeRTOS_debug_printf( ( "Connect: giving up %lxip:%u\n",
 8004bfc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004bfe:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 8004c00:	480b      	ldr	r0, [pc, #44]	@ (8004c30 <xTCPSocketCheck+0x2bc>)
 8004c02:	f008 f91b 	bl	800ce3c <lUDPLoggingPrintf>
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8004c06:	2108      	movs	r1, #8
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f7ff fb77 	bl	80042fc <vTCPStateChange>
 8004c0e:	e6e0      	b.n	80049d2 <xTCPSocketCheck+0x5e>
							( void ) FreeRTOS_closesocket( pxSocket );
 8004c10:	4620      	mov	r0, r4
 8004c12:	f7fe f90d 	bl	8002e30 <FreeRTOS_closesocket>
 8004c16:	e70a      	b.n	8004a2e <xTCPSocketCheck+0xba>
 8004c18:	0800fb98 	.word	0x0800fb98
 8004c1c:	0800f6c8 	.word	0x0800f6c8
 8004c20:	2000039c 	.word	0x2000039c
 8004c24:	0800f638 	.word	0x0800f638
 8004c28:	0800f684 	.word	0x0800f684
 8004c2c:	20000014 	.word	0x20000014
 8004c30:	0800f664 	.word	0x0800f664

08004c34 <xProcessReceivedTCPPacket>:
	{
 8004c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if( pxNetworkBuffer->xDataLength < ( ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER ) )
 8004c38:	69c3      	ldr	r3, [r0, #28]
	{
 8004c3a:	b093      	sub	sp, #76	@ 0x4c
		const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 8004c3c:	6984      	ldr	r4, [r0, #24]
		if( pxNetworkBuffer->xDataLength < ( ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER ) )
 8004c3e:	2b35      	cmp	r3, #53	@ 0x35
		NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8004c40:	900f      	str	r0, [sp, #60]	@ 0x3c
		uint16_t ucTCPFlags = pxProtocolHeaders->xTCPHeader.ucTCPFlags;
 8004c42:	f8d4 202a 	ldr.w	r2, [r4, #42]	@ 0x2a
 8004c46:	f894 a02f 	ldrb.w	sl, [r4, #47]	@ 0x2f
		uint16_t xLocalPort = FreeRTOS_htons( pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8004c4a:	8ca7      	ldrh	r7, [r4, #36]	@ 0x24
		uint16_t xRemotePort = FreeRTOS_htons( pxProtocolHeaders->xTCPHeader.usSourcePort );
 8004c4c:	8c66      	ldrh	r6, [r4, #34]	@ 0x22
		uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8004c4e:	f8d4 9026 	ldr.w	r9, [r4, #38]	@ 0x26
		uint32_t ulAckNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulAckNr );
 8004c52:	9208      	str	r2, [sp, #32]
		if( pxNetworkBuffer->xDataLength < ( ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER ) )
 8004c54:	d803      	bhi.n	8004c5e <xProcessReceivedTCPPacket+0x2a>
			xResult = pdFAIL;
 8004c56:	2000      	movs	r0, #0
	}
 8004c58:	b013      	add	sp, #76	@ 0x4c
 8004c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c5e:	f8d4 801a 	ldr.w	r8, [r4, #26]
 8004c62:	ba7f      	rev16	r7, r7
 8004c64:	ba76      	rev16	r6, r6
 8004c66:	4605      	mov	r5, r0
 8004c68:	fa98 f388 	rev.w	r3, r8
 8004c6c:	f8d4 001e 	ldr.w	r0, [r4, #30]
 8004c70:	b2bf      	uxth	r7, r7
 8004c72:	b2b6      	uxth	r6, r6
			ulRemoteIP = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 8004c74:	461a      	mov	r2, r3
 8004c76:	9309      	str	r3, [sp, #36]	@ 0x24
			pxSocket = ( FreeRTOS_Socket_t * ) pxTCPSocketLookup( ulLocalIP, xLocalPort, ulRemoteIP, xRemotePort );
 8004c78:	ba00      	rev	r0, r0
 8004c7a:	4633      	mov	r3, r6
 8004c7c:	4639      	mov	r1, r7
 8004c7e:	f7fe fe57 	bl	8003930 <pxTCPSocketLookup>
			if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == pdFALSE ) )
 8004c82:	4683      	mov	fp, r0
 8004c84:	2800      	cmp	r0, #0
 8004c86:	d074      	beq.n	8004d72 <xProcessReceivedTCPPacket+0x13e>
 8004c88:	f890 8053 	ldrb.w	r8, [r0, #83]	@ 0x53
		switch( xStatus )
 8004c8c:	f1b8 0f0b 	cmp.w	r8, #11
 8004c90:	f200 8088 	bhi.w	8004da4 <xProcessReceivedTCPPacket+0x170>
 8004c94:	f640 3381 	movw	r3, #2945	@ 0xb81
 8004c98:	fa23 f308 	lsr.w	r3, r3, r8
 8004c9c:	f013 0301 	ands.w	r3, r3, #1
 8004ca0:	d167      	bne.n	8004d72 <xProcessReceivedTCPPacket+0x13e>
				if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 8004ca2:	f1b8 0f01 	cmp.w	r8, #1
				pxSocket->u.xTCP.ucRepCount = 0U;
 8004ca6:	f880 3052 	strb.w	r3, [r0, #82]	@ 0x52
				if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 8004caa:	d17e      	bne.n	8004daa <xProcessReceivedTCPPacket+0x176>
					if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 8004cac:	f00a 091f 	and.w	r9, sl, #31
 8004cb0:	f1b9 0f02 	cmp.w	r9, #2
 8004cb4:	f000 81a3 	beq.w	8004ffe <xProcessReceivedTCPPacket+0x3ca>
			( void ) snprintf( retString,
 8004cb8:	f01a 0f01 	tst.w	sl, #1
 8004cbc:	4ac1      	ldr	r2, [pc, #772]	@ (8004fc4 <xProcessReceivedTCPPacket+0x390>)
 8004cbe:	f04f 010a 	mov.w	r1, #10
 8004cc2:	48c1      	ldr	r0, [pc, #772]	@ (8004fc8 <xProcessReceivedTCPPacket+0x394>)
 8004cc4:	bf14      	ite	ne
 8004cc6:	2346      	movne	r3, #70	@ 0x46
 8004cc8:	232e      	moveq	r3, #46	@ 0x2e
 8004cca:	f01a 0f02 	tst.w	sl, #2
 8004cce:	bf14      	ite	ne
 8004cd0:	2453      	movne	r4, #83	@ 0x53
 8004cd2:	242e      	moveq	r4, #46	@ 0x2e
 8004cd4:	9400      	str	r4, [sp, #0]
 8004cd6:	f01a 0404 	ands.w	r4, sl, #4
 8004cda:	bf14      	ite	ne
 8004cdc:	f04f 0c52 	movne.w	ip, #82	@ 0x52
 8004ce0:	f04f 0c2e 	moveq.w	ip, #46	@ 0x2e
 8004ce4:	f01a 0f08 	tst.w	sl, #8
 8004ce8:	f8cd c004 	str.w	ip, [sp, #4]
 8004cec:	bf14      	ite	ne
 8004cee:	f04f 0c50 	movne.w	ip, #80	@ 0x50
 8004cf2:	f04f 0c2e 	moveq.w	ip, #46	@ 0x2e
 8004cf6:	f01a 0f10 	tst.w	sl, #16
 8004cfa:	f8cd c008 	str.w	ip, [sp, #8]
 8004cfe:	bf14      	ite	ne
 8004d00:	f04f 0c41 	movne.w	ip, #65	@ 0x41
 8004d04:	f04f 0c2e 	moveq.w	ip, #46	@ 0x2e
 8004d08:	f01a 0f20 	tst.w	sl, #32
 8004d0c:	f8cd c00c 	str.w	ip, [sp, #12]
 8004d10:	bf14      	ite	ne
 8004d12:	f04f 0c55 	movne.w	ip, #85	@ 0x55
 8004d16:	f04f 0c2e 	moveq.w	ip, #46	@ 0x2e
 8004d1a:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8004d1e:	f8cd c010 	str.w	ip, [sp, #16]
 8004d22:	bf14      	ite	ne
 8004d24:	f04f 0c45 	movne.w	ip, #69	@ 0x45
 8004d28:	f04f 0c2e 	moveq.w	ip, #46	@ 0x2e
 8004d2c:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 8004d30:	f8cd c014 	str.w	ip, [sp, #20]
 8004d34:	bf0c      	ite	eq
 8004d36:	f04f 0c2e 	moveq.w	ip, #46	@ 0x2e
 8004d3a:	f04f 0c43 	movne.w	ip, #67	@ 0x43
 8004d3e:	f8cd c018 	str.w	ip, [sp, #24]
 8004d42:	f008 fe1d 	bl	800d980 <snprintf>
								FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s (0x%02x) from %lxip:%u to port %u\n",
 8004d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d48:	4652      	mov	r2, sl
 8004d4a:	499f      	ldr	r1, [pc, #636]	@ (8004fc8 <xProcessReceivedTCPPacket+0x394>)
 8004d4c:	489f      	ldr	r0, [pc, #636]	@ (8004fcc <xProcessReceivedTCPPacket+0x398>)
 8004d4e:	9701      	str	r7, [sp, #4]
 8004d50:	9600      	str	r6, [sp, #0]
 8004d52:	f008 f873 	bl	800ce3c <lUDPLoggingPrintf>
						if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 8004d56:	2c00      	cmp	r4, #0
 8004d58:	f47f af7d 	bne.w	8004c56 <xProcessReceivedTCPPacket+0x22>
				TCPPacket_t * pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8004d5c:	69aa      	ldr	r2, [r5, #24]
				pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8004d5e:	f241 4650 	movw	r6, #5200	@ 0x1450
				prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 8004d62:	4623      	mov	r3, r4
 8004d64:	4629      	mov	r1, r5
				pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8004d66:	85d6      	strh	r6, [r2, #46]	@ 0x2e
				prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 8004d68:	4620      	mov	r0, r4
 8004d6a:	2228      	movs	r2, #40	@ 0x28
 8004d6c:	f7ff f94c 	bl	8004008 <prvTCPReturnPacket>
		return pdFAIL;
 8004d70:	e771      	b.n	8004c56 <xProcessReceivedTCPPacket+0x22>
				FreeRTOS_debug_printf( ( "TCP: No active socket on port %d (%lxip:%d)\n", xLocalPort, ulRemoteIP, xRemotePort ) );
 8004d72:	4633      	mov	r3, r6
 8004d74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d76:	4639      	mov	r1, r7
 8004d78:	4895      	ldr	r0, [pc, #596]	@ (8004fd0 <xProcessReceivedTCPPacket+0x39c>)
 8004d7a:	f008 f85f 	bl	800ce3c <lUDPLoggingPrintf>
				if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8004d7e:	f00a 031f 	and.w	r3, sl, #31
 8004d82:	2b10      	cmp	r3, #16
 8004d84:	f43f af67 	beq.w	8004c56 <xProcessReceivedTCPPacket+0x22>
 8004d88:	f01a 0304 	ands.w	r3, sl, #4
 8004d8c:	f47f af63 	bne.w	8004c56 <xProcessReceivedTCPPacket+0x22>
				TCPPacket_t * pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8004d90:	69aa      	ldr	r2, [r5, #24]
				pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8004d92:	f241 4450 	movw	r4, #5200	@ 0x1450
 8004d96:	85d4      	strh	r4, [r2, #46]	@ 0x2e
				prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 8004d98:	4629      	mov	r1, r5
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	2228      	movs	r2, #40	@ 0x28
 8004d9e:	f7ff f933 	bl	8004008 <prvTCPReturnPacket>
						if( pxSocket == NULL )
 8004da2:	e758      	b.n	8004c56 <xProcessReceivedTCPPacket+0x22>
				pxSocket->u.xTCP.ucRepCount = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	f880 3052 	strb.w	r3, [r0, #82]	@ 0x52
					if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 8004daa:	f01a 0f04 	tst.w	sl, #4
 8004dae:	f040 8261 	bne.w	8005274 <xProcessReceivedTCPPacket+0x640>
					else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) )
 8004db2:	f00a 031f 	and.w	r3, sl, #31
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d108      	bne.n	8004dcc <xProcessReceivedTCPPacket+0x198>
 8004dba:	f1b8 0f04 	cmp.w	r8, #4
 8004dbe:	d905      	bls.n	8004dcc <xProcessReceivedTCPPacket+0x198>
						FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %lxip:%u\n", ulRemoteIP, xRemotePort ) );
 8004dc0:	4632      	mov	r2, r6
 8004dc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004dc4:	4883      	ldr	r0, [pc, #524]	@ (8004fd4 <xProcessReceivedTCPPacket+0x3a0>)
 8004dc6:	f008 f839 	bl	800ce3c <lUDPLoggingPrintf>
			if( xResult != pdFAIL )
 8004dca:	e744      	b.n	8004c56 <xProcessReceivedTCPPacket+0x22>
										 ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ uxOffset ] ) ),
 8004dcc:	69ab      	ldr	r3, [r5, #24]
						( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 8004dce:	f8d3 2022 	ldr.w	r2, [r3, #34]	@ 0x22
 8004dd2:	f8d3 6026 	ldr.w	r6, [r3, #38]	@ 0x26
 8004dd6:	f8d3 002a 	ldr.w	r0, [r3, #42]	@ 0x2a
 8004dda:	f8d3 102e 	ldr.w	r1, [r3, #46]	@ 0x2e
 8004dde:	f8cb 20a4 	str.w	r2, [fp, #164]	@ 0xa4
 8004de2:	f8cb 60a8 	str.w	r6, [fp, #168]	@ 0xa8
 8004de6:	f8cb 00ac 	str.w	r0, [fp, #172]	@ 0xac
 8004dea:	f8cb 10b0 	str.w	r1, [fp, #176]	@ 0xb0
 8004dee:	f8d3 2032 	ldr.w	r2, [r3, #50]	@ 0x32
 8004df2:	f8cb 20b4 	str.w	r2, [fp, #180]	@ 0xb4
				pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 8004df6:	f004 f923 	bl	8009040 <xTaskGetTickCount>
				pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8004dfa:	f89b 3041 	ldrb.w	r3, [fp, #65]	@ 0x41
				pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 8004dfe:	f8cb 0060 	str.w	r0, [fp, #96]	@ 0x60
				pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8004e02:	f023 0306 	bic.w	r3, r3, #6
 8004e06:	f88b 3041 	strb.w	r3, [fp, #65]	@ 0x41
				pxSocket->u.xTCP.ucKeepRepCount = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f88b 3058 	strb.w	r3, [fp, #88]	@ 0x58
				pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8004e10:	f004 f916 	bl	8009040 <xTaskGetTickCount>
				if( ( pxProtocolHeaders->xTCPHeader.ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 8004e14:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
		const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 8004e18:	69ae      	ldr	r6, [r5, #24]
				if( ( pxProtocolHeaders->xTCPHeader.ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 8004e1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
				pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8004e1e:	f8cb 005c 	str.w	r0, [fp, #92]	@ 0x5c
				if( ( pxProtocolHeaders->xTCPHeader.ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 8004e22:	2b50      	cmp	r3, #80	@ 0x50
 8004e24:	f200 808b 	bhi.w	8004f3e <xProcessReceivedTCPPacket+0x30a>
 8004e28:	f10b 03e4 	add.w	r3, fp, #228	@ 0xe4
 8004e2c:	9308      	str	r3, [sp, #32]
		if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 8004e2e:	f896 302e 	ldrb.w	r3, [r6, #46]	@ 0x2e
				pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 8004e32:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
						if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 8004e34:	f01a 0f02 	tst.w	sl, #2
				pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 8004e38:	ba52      	rev16	r2, r2
 8004e3a:	b292      	uxth	r2, r2
 8004e3c:	f8cb 20d8 	str.w	r2, [fp, #216]	@ 0xd8
						if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 8004e40:	d104      	bne.n	8004e4c <xProcessReceivedTCPPacket+0x218>
								( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8004e42:	f89b 10ca 	ldrb.w	r1, [fp, #202]	@ 0xca
 8004e46:	408a      	lsls	r2, r1
							pxSocket->u.xTCP.ulWindowSize =
 8004e48:	f8cb 20d8 	str.w	r2, [fp, #216]	@ 0xd8
		lLength = ( int32_t ) usLength;
 8004e4c:	8a32      	ldrh	r2, [r6, #16]
		ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 8004e4e:	089b      	lsrs	r3, r3, #2
		lReceiveLength = ipNUMERIC_CAST( int32_t, pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 8004e50:	69ec      	ldr	r4, [r5, #28]
		lLength = ( int32_t ) usLength;
 8004e52:	ba52      	rev16	r2, r2
		ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 8004e54:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
		lReceiveLength = ipNUMERIC_CAST( int32_t, pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 8004e58:	3c0e      	subs	r4, #14
		uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8004e5a:	f896 802f 	ldrb.w	r8, [r6, #47]	@ 0x2f
		lLength = ( int32_t ) usLength;
 8004e5e:	b292      	uxth	r2, r2
		*ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 8004e60:	f103 0a22 	add.w	sl, r3, #34	@ 0x22
		if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 8004e64:	3314      	adds	r3, #20
 8004e66:	f8d6 7026 	ldr.w	r7, [r6, #38]	@ 0x26
 8004e6a:	4294      	cmp	r4, r2
		*ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 8004e6c:	44b2      	add	sl, r6
 8004e6e:	ba3f      	rev	r7, r7
		if( lReceiveLength > lLength )
 8004e70:	bfa8      	it	ge
 8004e72:	4614      	movge	r4, r2
		if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 8004e74:	429c      	cmp	r4, r3
			lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 8004e76:	bfcc      	ite	gt
 8004e78:	1ae4      	subgt	r4, r4, r3
			lReceiveLength = 0;
 8004e7a:	2400      	movle	r4, #0
		if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 8004e7c:	f018 0f20 	tst.w	r8, #32
 8004e80:	d007      	beq.n	8004e92 <xProcessReceivedTCPPacket+0x25e>
			lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 8004e82:	8eb3      	ldrh	r3, [r6, #52]	@ 0x34
 8004e84:	ba5b      	rev16	r3, r3
 8004e86:	b29b      	uxth	r3, r3
			lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 8004e88:	42a3      	cmp	r3, r4
			*ppucRecvData += lUrgentLength;
 8004e8a:	449a      	add	sl, r3
			lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 8004e8c:	bfd4      	ite	le
 8004e8e:	1ae4      	suble	r4, r4, r3
 8004e90:	1b24      	subgt	r4, r4, r4
		if( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED )
 8004e92:	f89b 0053 	ldrb.w	r0, [fp, #83]	@ 0x53
		if( ( ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber ) ) > 0L )
 8004e96:	eb07 0904 	add.w	r9, r7, r4
 8004e9a:	f8db 30fc 	ldr.w	r3, [fp, #252]	@ 0xfc
		if( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED )
 8004e9e:	2804      	cmp	r0, #4
 8004ea0:	4602      	mov	r2, r0
		if( ( ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber ) ) > 0L )
 8004ea2:	eba9 0303 	sub.w	r3, r9, r3
		if( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED )
 8004ea6:	f240 81d5 	bls.w	8005254 <xProcessReceivedTCPPacket+0x620>
			if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 8004eaa:	f107 0c01 	add.w	ip, r7, #1
 8004eae:	f8db 10f4 	ldr.w	r1, [fp, #244]	@ 0xf4
 8004eb2:	4561      	cmp	r1, ip
 8004eb4:	d105      	bne.n	8004ec2 <xProcessReceivedTCPPacket+0x28e>
				pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8004eb6:	f89b 1041 	ldrb.w	r1, [fp, #65]	@ 0x41
 8004eba:	f041 0101 	orr.w	r1, r1, #1
 8004ebe:	f88b 1041 	strb.w	r1, [fp, #65]	@ 0x41
		if( ( ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber ) ) > 0L )
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f340 8265 	ble.w	8005392 <xProcessReceivedTCPPacket+0x75e>
		if( ( ulReceiveLength > 0U ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eSYN_RECEIVED ) )
 8004ec8:	2803      	cmp	r0, #3
			pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8004eca:	f8cb 90fc 	str.w	r9, [fp, #252]	@ 0xfc
		if( ( ulReceiveLength > 0U ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eSYN_RECEIVED ) )
 8004ece:	d902      	bls.n	8004ed6 <xProcessReceivedTCPPacket+0x2a2>
 8004ed0:	2c00      	cmp	r4, #0
 8004ed2:	f040 8211 	bne.w	80052f8 <xProcessReceivedTCPPacket+0x6c4>
			pxTCPWindow->ucOptionLength = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	46b2      	mov	sl, r6
 8004eda:	f88b 3120 	strb.w	r3, [fp, #288]	@ 0x120
		if( ( pxSocket->u.xTCP.ucTCPState >= ( EventBits_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 8004ede:	2804      	cmp	r0, #4
 8004ee0:	f240 835e 	bls.w	80055a0 <xProcessReceivedTCPPacket+0x96c>
 8004ee4:	f89b 3040 	ldrb.w	r3, [fp, #64]	@ 0x40
 8004ee8:	f013 0201 	ands.w	r2, r3, #1
 8004eec:	f040 832a 	bne.w	8005544 <xProcessReceivedTCPPacket+0x910>
		UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 8004ef0:	9209      	str	r2, [sp, #36]	@ 0x24
			if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 8004ef2:	f018 0f01 	tst.w	r8, #1
 8004ef6:	d013      	beq.n	8004f20 <xProcessReceivedTCPPacket+0x2ec>
 8004ef8:	f99b 3041 	ldrsb.w	r3, [fp, #65]	@ 0x41
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	db0f      	blt.n	8004f20 <xProcessReceivedTCPPacket+0x2ec>
				pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 8004f00:	f89b 3041 	ldrb.w	r3, [fp, #65]	@ 0x41
				pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8004f04:	f8cb 90f8 	str.w	r9, [fp, #248]	@ 0xf8
				pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 8004f08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f0c:	f88b 3041 	strb.w	r3, [fp, #65]	@ 0x41
				if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8004f10:	065b      	lsls	r3, r3, #25
 8004f12:	d405      	bmi.n	8004f20 <xProcessReceivedTCPPacket+0x2ec>
					pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 8004f14:	f89b 3042 	ldrb.w	r3, [fp, #66]	@ 0x42
 8004f18:	f043 0302 	orr.w	r3, r3, #2
 8004f1c:	f88b 3042 	strb.w	r3, [fp, #66]	@ 0x42
			switch( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) )
 8004f20:	1e83      	subs	r3, r0, #2
 8004f22:	2b08      	cmp	r3, #8
 8004f24:	f200 8136 	bhi.w	8005194 <xProcessReceivedTCPPacket+0x560>
 8004f28:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004f2c:	017000a5 	.word	0x017000a5
 8004f30:	013600a5 	.word	0x013600a5
 8004f34:	00560056 	.word	0x00560056
 8004f38:	01340134 	.word	0x01340134
 8004f3c:	0056      	.short	0x0056
		if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 8004f3e:	f896 302e 	ldrb.w	r3, [r6, #46]	@ 0x2e
 8004f42:	2b50      	cmp	r3, #80	@ 0x50
 8004f44:	f240 81c7 	bls.w	80052d6 <xProcessReceivedTCPPacket+0x6a2>
			if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 8004f48:	69ea      	ldr	r2, [r5, #28]
 8004f4a:	2a36      	cmp	r2, #54	@ 0x36
 8004f4c:	f240 81c3 	bls.w	80052d6 <xProcessReceivedTCPPacket+0x6a2>
			ucLength = ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 8004f50:	0919      	lsrs	r1, r3, #4
					( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) ) )
 8004f52:	3a36      	subs	r2, #54	@ 0x36
			ucLength = ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 8004f54:	3905      	subs	r1, #5
 8004f56:	0089      	lsls	r1, r1, #2
 8004f58:	fa5f f881 	uxtb.w	r8, r1
				if( ( pxNetworkBuffer->xDataLength > uxOptionOffset ) &&
 8004f5c:	4590      	cmp	r8, r2
 8004f5e:	f200 81ba 	bhi.w	80052d6 <xProcessReceivedTCPPacket+0x6a2>
					if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 8004f62:	f896 202f 	ldrb.w	r2, [r6, #47]	@ 0x2f
 8004f66:	f002 0202 	and.w	r2, r2, #2
 8004f6a:	9209      	str	r2, [sp, #36]	@ 0x24
						if( uxOptionsLength == 0U )
 8004f6c:	f1b8 0f00 	cmp.w	r8, #0
 8004f70:	f000 81b1 	beq.w	80052d6 <xProcessReceivedTCPPacket+0x6a2>
 8004f74:	f10b 03e4 	add.w	r3, fp, #228	@ 0xe4
		pucPtr = pxTCPHeader->ucOptdata;
 8004f78:	f106 0936 	add.w	r9, r6, #54	@ 0x36
 8004f7c:	9308      	str	r3, [sp, #32]
 8004f7e:	e019      	b.n	8004fb4 <xProcessReceivedTCPPacket+0x380>
		else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 8004f80:	2a01      	cmp	r2, #1
 8004f82:	f000 8349 	beq.w	8005618 <xProcessReceivedTCPPacket+0x9e4>
		else if( uxRemainingOptionsBytes < 2U )
 8004f86:	f1b8 0f01 	cmp.w	r8, #1
 8004f8a:	d017      	beq.n	8004fbc <xProcessReceivedTCPPacket+0x388>
			else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 8004f8c:	2a03      	cmp	r2, #3
 8004f8e:	f000 841c 	beq.w	80057ca <xProcessReceivedTCPPacket+0xb96>
		else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 8004f92:	2a02      	cmp	r2, #2
 8004f94:	f000 8480 	beq.w	8005898 <xProcessReceivedTCPPacket+0xc64>
			ucLen = pucPtr[ 1 ];
 8004f98:	f899 1001 	ldrb.w	r1, [r9, #1]
			if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 8004f9c:	2901      	cmp	r1, #1
 8004f9e:	d90d      	bls.n	8004fbc <xProcessReceivedTCPPacket+0x388>
 8004fa0:	4541      	cmp	r1, r8
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	d80a      	bhi.n	8004fbc <xProcessReceivedTCPPacket+0x388>
						if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 8004fa6:	2a05      	cmp	r2, #5
 8004fa8:	f000 8510 	beq.w	80059cc <xProcessReceivedTCPPacket+0xd98>
						if( uxOptionsLength == 0U )
 8004fac:	ebb8 0803 	subs.w	r8, r8, r3
						pucPtr = &( pucPtr[ uxResult ] );
 8004fb0:	4499      	add	r9, r3
						if( uxOptionsLength == 0U )
 8004fb2:	d003      	beq.n	8004fbc <xProcessReceivedTCPPacket+0x388>
		if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 8004fb4:	f899 2000 	ldrb.w	r2, [r9]
 8004fb8:	2a00      	cmp	r2, #0
 8004fba:	d1e1      	bne.n	8004f80 <xProcessReceivedTCPPacket+0x34c>
		ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 8004fbc:	69ae      	ldr	r6, [r5, #24]
		ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 8004fbe:	f896 302e 	ldrb.w	r3, [r6, #46]	@ 0x2e
 8004fc2:	e736      	b.n	8004e32 <xProcessReceivedTCPPacket+0x1fe>
 8004fc4:	0800f760 	.word	0x0800f760
 8004fc8:	20000390 	.word	0x20000390
 8004fcc:	0800f774 	.word	0x0800f774
 8004fd0:	0800f730 	.word	0x0800f730
 8004fd4:	0800f884 	.word	0x0800f884
					xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 8004fd8:	69a9      	ldr	r1, [r5, #24]
 8004fda:	4658      	mov	r0, fp
 8004fdc:	f7ff fc46 	bl	800486c <prvTCPHandleFin.isra.0>
				if( pxNetworkBuffer != NULL )
 8004fe0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
					xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 8004fe2:	4680      	mov	r8, r0
		if( xSendLength > 0 )
 8004fe4:	f1b8 0f00 	cmp.w	r8, #0
 8004fe8:	f300 8131 	bgt.w	800524e <xProcessReceivedTCPPacket+0x61a>
				if( pxNetworkBuffer != NULL )
 8004fec:	b115      	cbz	r5, 8004ff4 <xProcessReceivedTCPPacket+0x3c0>
					vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f001 fcce 	bl	8006990 <vReleaseNetworkBufferAndDescriptor>
				( void ) prvTCPNextTimeout( pxSocket );
 8004ff4:	4658      	mov	r0, fp
 8004ff6:	f7ff f921 	bl	800423c <prvTCPNextTimeout>
				xResult = pdPASS;
 8004ffa:	2001      	movs	r0, #1
		return xResult;
 8004ffc:	e62c      	b.n	8004c58 <xProcessReceivedTCPPacket+0x24>
		const TCPPacket_t * pxTCPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8004ffe:	69af      	ldr	r7, [r5, #24]
		ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
 8005000:	8c81      	ldrh	r1, [r0, #36]	@ 0x24
 8005002:	48b7      	ldr	r0, [pc, #732]	@ (80052e0 <xProcessReceivedTCPPacket+0x6ac>)
 8005004:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005006:	f8d7 201a 	ldr.w	r2, [r7, #26]
 800500a:	6940      	ldr	r0, [r0, #20]
 800500c:	f7fb ff46 	bl	8000e9c <ulApplicationGetNextSequenceNumber>
		if( ulInitialSequenceNumber != 0UL )
 8005010:	4606      	mov	r6, r0
 8005012:	2800      	cmp	r0, #0
 8005014:	f43f ae1f 	beq.w	8004c56 <xProcessReceivedTCPPacket+0x22>
			if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8005018:	f89b 3040 	ldrb.w	r3, [fp, #64]	@ 0x40
 800501c:	f013 0208 	ands.w	r2, r3, #8
 8005020:	9208      	str	r2, [sp, #32]
 8005022:	f000 8226 	beq.w	8005472 <xProcessReceivedTCPPacket+0x83e>
				pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8005026:	f043 0304 	orr.w	r3, r3, #4
				pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 800502a:	f8cb b054 	str.w	fp, [fp, #84]	@ 0x54
				pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800502e:	f88b 3040 	strb.w	r3, [fp, #64]	@ 0x40
			pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 8005032:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
			prvSocketSetMSS( pxReturn );
 8005034:	4658      	mov	r0, fp
			const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 8005036:	69aa      	ldr	r2, [r5, #24]
			pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 8005038:	ba5b      	rev16	r3, r3
 800503a:	f8d2 2026 	ldr.w	r2, [r2, #38]	@ 0x26
 800503e:	f8ab 303c 	strh.w	r3, [fp, #60]	@ 0x3c
			pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 8005042:	f8d7 301a 	ldr.w	r3, [r7, #26]
 8005046:	ba12      	rev	r2, r2
			pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8005048:	f8cb 6110 	str.w	r6, [fp, #272]	@ 0x110
 800504c:	ba1b      	rev	r3, r3
			pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 800504e:	f8cb 20f4 	str.w	r2, [fp, #244]	@ 0xf4
			pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 8005052:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
			prvSocketSetMSS( pxReturn );
 8005056:	f7fe ff55 	bl	8003f04 <prvSocketSetMSS>
			prvTCPCreateWindow( pxReturn );
 800505a:	4658      	mov	r0, fp
 800505c:	f7ff f8c0 	bl	80041e0 <prvTCPCreateWindow>
			vTCPStateChange( pxReturn, eSYN_FIRST );
 8005060:	4658      	mov	r0, fp
 8005062:	2103      	movs	r1, #3
 8005064:	f7ff f94a 	bl	80042fc <vTCPStateChange>
			( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8005068:	2246      	movs	r2, #70	@ 0x46
 800506a:	69a9      	ldr	r1, [r5, #24]
 800506c:	f10b 0082 	add.w	r0, fp, #130	@ 0x82
 8005070:	f008 f8a6 	bl	800d1c0 <memcpy>
						if( pxSocket == NULL )
 8005074:	e6bf      	b.n	8004df6 <xProcessReceivedTCPPacket+0x1c2>
 8005076:	69af      	ldr	r7, [r5, #24]
		if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 8005078:	2802      	cmp	r0, #2
				if( pxNetworkBuffer != NULL )
 800507a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
		uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800507c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
		uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8005080:	f8d7 6026 	ldr.w	r6, [r7, #38]	@ 0x26
		if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 8005084:	f003 0217 	and.w	r2, r3, #23
 8005088:	ba36      	rev	r6, r6
		if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800508a:	f040 81d4 	bne.w	8005436 <xProcessReceivedTCPPacket+0x802>
		if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 800508e:	2a12      	cmp	r2, #18
 8005090:	f000 83cd 	beq.w	800582e <xProcessReceivedTCPPacket+0xbfa>
 8005094:	2212      	movs	r2, #18
			FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X Queued %d, %d\n",
 8005096:	4993      	ldr	r1, [pc, #588]	@ (80052e4 <xProcessReceivedTCPPacket+0x6b0>)
 8005098:	f89b 0040 	ldrb.w	r0, [fp, #64]	@ 0x40
 800509c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80050a0:	9001      	str	r0, [sp, #4]
 80050a2:	f89b 0040 	ldrb.w	r0, [fp, #64]	@ 0x40
 80050a6:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80050aa:	9000      	str	r0, [sp, #0]
 80050ac:	488e      	ldr	r0, [pc, #568]	@ (80052e8 <xProcessReceivedTCPPacket+0x6b4>)
 80050ae:	f007 fec5 	bl	800ce3c <lUDPLoggingPrintf>
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80050b2:	2108      	movs	r1, #8
 80050b4:	4658      	mov	r0, fp
 80050b6:	f7ff f921 	bl	80042fc <vTCPStateChange>
			if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 80050ba:	f89b 3040 	ldrb.w	r3, [fp, #64]	@ 0x40
 80050be:	0719      	lsls	r1, r3, #28
 80050c0:	d403      	bmi.n	80050ca <xProcessReceivedTCPPacket+0x496>
				if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 80050c2:	f013 0f06 	tst.w	r3, #6
 80050c6:	f040 83e3 	bne.w	8005890 <xProcessReceivedTCPPacket+0xc5c>
			pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 80050ca:	f8d7 302a 	ldr.w	r3, [r7, #42]	@ 0x2a
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80050ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050d0:	ba1b      	rev	r3, r3
			pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 80050d2:	f8cb 60f4 	str.w	r6, [fp, #244]	@ 0xf4
			uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80050d6:	f102 0828 	add.w	r8, r2, #40	@ 0x28
			pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 80050da:	f8cb 3110 	str.w	r3, [fp, #272]	@ 0x110
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80050de:	f102 0314 	add.w	r3, r2, #20
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
			pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 80050e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80050ec:	f043 0304 	orr.w	r3, r3, #4
 80050f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 80050f4:	f8db 3044 	ldr.w	r3, [fp, #68]	@ 0x44
		const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 80050f8:	69aa      	ldr	r2, [r5, #24]
		ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 80050fa:	1b9e      	subs	r6, r3, r6
						lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usCurMSS );
 80050fc:	f8bb 304a 	ldrh.w	r3, [fp, #74]	@ 0x4a
					if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8005100:	f8db 007c 	ldr.w	r0, [fp, #124]	@ 0x7c
				if( ( ulReceiveLength > 0U ) &&                                                   /* Data was sent to this socket. */
 8005104:	ebb6 0f43 	cmp.w	r6, r3, lsl #1
 8005108:	db08      	blt.n	800511c <xProcessReceivedTCPPacket+0x4e8>
 800510a:	b13c      	cbz	r4, 800511c <xProcessReceivedTCPPacket+0x4e8>
					( lRxSpace >= lMinLength ) &&                                                 /* There is Rx space for more data. */
 800510c:	f89b 1041 	ldrb.w	r1, [fp, #65]	@ 0x41
					( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&                     /* Not in a closure phase. */
 8005110:	0649      	lsls	r1, r1, #25
 8005112:	d403      	bmi.n	800511c <xProcessReceivedTCPPacket+0x4e8>
 8005114:	f1b8 0f28 	cmp.w	r8, #40	@ 0x28
 8005118:	f000 834f 	beq.w	80057ba <xProcessReceivedTCPPacket+0xb86>
 800511c:	4647      	mov	r7, r8
 800511e:	ae0f      	add	r6, sp, #60	@ 0x3c
				else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8005120:	b130      	cbz	r0, 8005130 <xProcessReceivedTCPPacket+0x4fc>
					if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8005122:	42a8      	cmp	r0, r5
 8005124:	d001      	beq.n	800512a <xProcessReceivedTCPPacket+0x4f6>
						vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8005126:	f001 fc33 	bl	8006990 <vReleaseNetworkBufferAndDescriptor>
					pxSocket->u.xTCP.pxAckMessage = NULL;
 800512a:	2300      	movs	r3, #0
 800512c:	f8cb 307c 	str.w	r3, [fp, #124]	@ 0x7c
			if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8005130:	4b6e      	ldr	r3, [pc, #440]	@ (80052ec <xProcessReceivedTCPPacket+0x6b8>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b01      	cmp	r3, #1
 8005136:	dd13      	ble.n	8005160 <xProcessReceivedTCPPacket+0x52c>
 8005138:	f8bb 1024 	ldrh.w	r1, [fp, #36]	@ 0x24
 800513c:	2917      	cmp	r1, #23
 800513e:	d00f      	beq.n	8005160 <xProcessReceivedTCPPacket+0x52c>
				FreeRTOS_debug_printf( ( "Send[%u->%u] imm ACK %lu SEQ %lu (len %lu)\n",
 8005140:	e9db 323c 	ldrd	r3, r2, [fp, #240]	@ 0xf0
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	f8bb 203c 	ldrh.w	r2, [fp, #60]	@ 0x3c
 800514a:	f8cd 8004 	str.w	r8, [sp, #4]
 800514e:	f8db 0110 	ldr.w	r0, [fp, #272]	@ 0x110
 8005152:	f8db 4100 	ldr.w	r4, [fp, #256]	@ 0x100
 8005156:	1b00      	subs	r0, r0, r4
 8005158:	9000      	str	r0, [sp, #0]
 800515a:	4865      	ldr	r0, [pc, #404]	@ (80052f0 <xProcessReceivedTCPPacket+0x6bc>)
 800515c:	f007 fe6e 	bl	800ce3c <lUDPLoggingPrintf>
			prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8005160:	4629      	mov	r1, r5
					*ppxNetworkBuffer = NULL;
 8005162:	2500      	movs	r5, #0
			prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8005164:	2301      	movs	r3, #1
 8005166:	463a      	mov	r2, r7
 8005168:	4658      	mov	r0, fp
					*ppxNetworkBuffer = NULL;
 800516a:	2408      	movs	r4, #8
			prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800516c:	f7fe ff4c 	bl	8004008 <prvTCPReturnPacket>
					*ppxNetworkBuffer = NULL;
 8005170:	950f      	str	r5, [sp, #60]	@ 0x3c
		for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8005172:	e007      	b.n	8005184 <xProcessReceivedTCPPacket+0x550>
			prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8005174:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005176:	4658      	mov	r0, fp
 8005178:	f7fe ff46 	bl	8004008 <prvTCPReturnPacket>
		for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800517c:	3c01      	subs	r4, #1
					*ppxNetworkBuffer = NULL;
 800517e:	950f      	str	r5, [sp, #60]	@ 0x3c
		for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8005180:	f43f af38 	beq.w	8004ff4 <xProcessReceivedTCPPacket+0x3c0>
			xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8005184:	4631      	mov	r1, r6
 8005186:	4658      	mov	r0, fp
 8005188:	f7ff f9fa 	bl	8004580 <prvTCPPrepareSend.constprop.0>
			if( xSendLength <= 0 )
 800518c:	1e02      	subs	r2, r0, #0
			prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800518e:	f04f 0301 	mov.w	r3, #1
			if( xSendLength <= 0 )
 8005192:	dcef      	bgt.n	8005174 <xProcessReceivedTCPPacket+0x540>
				if( pxNetworkBuffer != NULL )
 8005194:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8005196:	e729      	b.n	8004fec <xProcessReceivedTCPPacket+0x3b8>
		ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 8005198:	69ae      	ldr	r6, [r5, #24]
					( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800519a:	f89b 20ca 	ldrb.w	r2, [fp, #202]	@ 0xca
		pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 800519e:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
		uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80051a0:	f896 702f 	ldrb.w	r7, [r6, #47]	@ 0x2f
		pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 80051a4:	ba5b      	rev16	r3, r3
 80051a6:	f8d6 8026 	ldr.w	r8, [r6, #38]	@ 0x26
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	fa98 f888 	rev.w	r8, r8
					( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 80051b0:	4093      	lsls	r3, r2
		if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) != 0U )
 80051b2:	06fa      	lsls	r2, r7, #27
				pxSocket->u.xTCP.ulWindowSize =
 80051b4:	f8cb 30d8 	str.w	r3, [fp, #216]	@ 0xd8
		if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) != 0U )
 80051b8:	f100 81fd 	bmi.w	80055b6 <xProcessReceivedTCPPacket+0x982>
		if( pxSocket->u.xTCP.txStream != NULL )
 80051bc:	f8db 3078 	ldr.w	r3, [fp, #120]	@ 0x78
 80051c0:	b113      	cbz	r3, 80051c8 <xProcessReceivedTCPPacket+0x594>
			prvTCPAddTxData( pxSocket );
 80051c2:	4658      	mov	r0, fp
 80051c4:	f7fe fef4 	bl	8003fb0 <prvTCPAddTxData>
		if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 80051c8:	f89b 2041 	ldrb.w	r2, [fp, #65]	@ 0x41
 80051cc:	f007 0701 	and.w	r7, r7, #1
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80051d0:	f8db 1104 	ldr.w	r1, [fp, #260]	@ 0x104
		if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 80051d4:	f002 0320 	and.w	r3, r2, #32
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80051d8:	f8cb 1110 	str.w	r1, [fp, #272]	@ 0x110
		if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 80051dc:	433b      	orrs	r3, r7
 80051de:	f000 8107 	beq.w	80053f0 <xProcessReceivedTCPPacket+0x7bc>
			if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 80051e2:	0657      	lsls	r7, r2, #25
 80051e4:	f140 826e 	bpl.w	80056c4 <xProcessReceivedTCPPacket+0xa90>
			if( xTCPWindowLoggingLevel > 0 )
 80051e8:	4b40      	ldr	r3, [pc, #256]	@ (80052ec <xProcessReceivedTCPPacket+0x6b8>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f300 8286 	bgt.w	80056fe <xProcessReceivedTCPPacket+0xaca>
				pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 80051f2:	f89b 3041 	ldrb.w	r3, [fp, #65]	@ 0x41
				xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 80051f6:	4658      	mov	r0, fp
				pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 80051f8:	f043 0320 	orr.w	r3, r3, #32
 80051fc:	f88b 3041 	strb.w	r3, [fp, #65]	@ 0x41
				xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 8005200:	69a9      	ldr	r1, [r5, #24]
 8005202:	f7ff fb33 	bl	800486c <prvTCPHandleFin.isra.0>
				if( pxNetworkBuffer != NULL )
 8005206:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
				xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 8005208:	4680      	mov	r8, r0
		if( xMayClose == pdFALSE )
 800520a:	e6eb      	b.n	8004fe4 <xProcessReceivedTCPPacket+0x3b0>
					uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 800520c:	f106 0122 	add.w	r1, r6, #34	@ 0x22
 8005210:	4658      	mov	r0, fp
 8005212:	f7fe fe99 	bl	8003f48 <prvSetSynAckOptions>
					pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 8005216:	2312      	movs	r3, #18
					uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8005218:	f100 0828 	add.w	r8, r0, #40	@ 0x28
					vTCPStateChange( pxSocket, eSYN_RECEIVED );
 800521c:	2104      	movs	r1, #4
					pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 800521e:	f886 302f 	strb.w	r3, [r6, #47]	@ 0x2f
					pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8005222:	f100 0314 	add.w	r3, r0, #20
					vTCPStateChange( pxSocket, eSYN_RECEIVED );
 8005226:	4658      	mov	r0, fp
					pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1UL;
 8005228:	3701      	adds	r7, #1
					pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	f886 302e 	strb.w	r3, [r6, #46]	@ 0x2e
					vTCPStateChange( pxSocket, eSYN_RECEIVED );
 8005230:	f7ff f864 	bl	80042fc <vTCPStateChange>
					pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL;
 8005234:	f8db 3100 	ldr.w	r3, [fp, #256]	@ 0x100
				if( pxNetworkBuffer != NULL )
 8005238:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
					pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL;
 800523a:	3301      	adds	r3, #1
					pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1UL;
 800523c:	f8cb 70fc 	str.w	r7, [fp, #252]	@ 0xfc
					pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1UL;
 8005240:	f8cb 70f4 	str.w	r7, [fp, #244]	@ 0xf4
					pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL;
 8005244:	f8cb 3118 	str.w	r3, [fp, #280]	@ 0x118
					pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL; /* because we send a TCP_SYN. */
 8005248:	f8cb 3104 	str.w	r3, [fp, #260]	@ 0x104
					break;
 800524c:	e6ca      	b.n	8004fe4 <xProcessReceivedTCPPacket+0x3b0>
		ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 800524e:	f8db 60f4 	ldr.w	r6, [fp, #244]	@ 0xf4
 8005252:	e74f      	b.n	80050f4 <xProcessReceivedTCPPacket+0x4c0>
		if( ( ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber ) ) > 0L )
 8005254:	2b00      	cmp	r3, #0
 8005256:	f73f ae37 	bgt.w	8004ec8 <xProcessReceivedTCPPacket+0x294>
		if( ( ulReceiveLength > 0U ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eSYN_RECEIVED ) )
 800525a:	2803      	cmp	r0, #3
 800525c:	d901      	bls.n	8005262 <xProcessReceivedTCPPacket+0x62e>
 800525e:	2c00      	cmp	r4, #0
 8005260:	d14a      	bne.n	80052f8 <xProcessReceivedTCPPacket+0x6c4>
			pxTCPWindow->ucOptionLength = 0U;
 8005262:	2300      	movs	r3, #0
 8005264:	f88b 3120 	strb.w	r3, [fp, #288]	@ 0x120
		UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 8005268:	9309      	str	r3, [sp, #36]	@ 0x24
			if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 800526a:	2a04      	cmp	r2, #4
 800526c:	d027      	beq.n	80052be <xProcessReceivedTCPPacket+0x68a>
 800526e:	f89b 0053 	ldrb.w	r0, [fp, #83]	@ 0x53
 8005272:	e63e      	b.n	8004ef2 <xProcessReceivedTCPPacket+0x2be>
						FreeRTOS_debug_printf( ( "TCP: RST received from %lxip:%u for %u\n", ulRemoteIP, xRemotePort, xLocalPort ) );
 8005274:	463b      	mov	r3, r7
 8005276:	4632      	mov	r2, r6
 8005278:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800527a:	481e      	ldr	r0, [pc, #120]	@ (80052f4 <xProcessReceivedTCPPacket+0x6c0>)
 800527c:	f007 fdde 	bl	800ce3c <lUDPLoggingPrintf>
						if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 8005280:	f89b 3053 	ldrb.w	r3, [fp, #83]	@ 0x53
 8005284:	2b02      	cmp	r3, #2
 8005286:	f000 808b 	beq.w	80053a0 <xProcessReceivedTCPPacket+0x76c>
 800528a:	fa99 f989 	rev.w	r9, r9
							if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 800528e:	f8db 30f4 	ldr.w	r3, [fp, #244]	@ 0xf4
 8005292:	454b      	cmp	r3, r9
 8005294:	f000 808d 	beq.w	80053b2 <xProcessReceivedTCPPacket+0x77e>
							else if( ( ulSequenceNumber > pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) &&
 8005298:	f4bf acdd 	bcs.w	8004c56 <xProcessReceivedTCPPacket+0x22>
									 ( ulSequenceNumber < ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 800529c:	f8db 20e8 	ldr.w	r2, [fp, #232]	@ 0xe8
 80052a0:	4413      	add	r3, r2
							else if( ( ulSequenceNumber > pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) &&
 80052a2:	454b      	cmp	r3, r9
 80052a4:	f67f acd7 	bls.w	8004c56 <xProcessReceivedTCPPacket+0x22>
				TCPPacket_t * pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 80052a8:	69a8      	ldr	r0, [r5, #24]
				pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 80052aa:	f241 0450 	movw	r4, #4176	@ 0x1050
				prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 80052ae:	2300      	movs	r3, #0
				pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 80052b0:	85c4      	strh	r4, [r0, #46]	@ 0x2e
				prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 80052b2:	2228      	movs	r2, #40	@ 0x28
 80052b4:	4629      	mov	r1, r5
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7fe fea6 	bl	8004008 <prvTCPReturnPacket>
		return pdFAIL;
 80052bc:	e4cb      	b.n	8004c56 <xProcessReceivedTCPPacket+0x22>
			if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 80052be:	f008 031f 	and.w	r3, r8, #31
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	f000 816f 	beq.w	80055a6 <xProcessReceivedTCPPacket+0x972>
			if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 80052c8:	f018 0f01 	tst.w	r8, #1
 80052cc:	f000 80ab 	beq.w	8005426 <xProcessReceivedTCPPacket+0x7f2>
 80052d0:	f89b 0053 	ldrb.w	r0, [fp, #83]	@ 0x53
 80052d4:	e610      	b.n	8004ef8 <xProcessReceivedTCPPacket+0x2c4>
 80052d6:	f10b 02e4 	add.w	r2, fp, #228	@ 0xe4
 80052da:	9208      	str	r2, [sp, #32]
 80052dc:	e5a9      	b.n	8004e32 <xProcessReceivedTCPPacket+0x1fe>
 80052de:	bf00      	nop
 80052e0:	20000014 	.word	0x20000014
 80052e4:	0800f710 	.word	0x0800f710
 80052e8:	0800f984 	.word	0x0800f984
 80052ec:	2000039c 	.word	0x2000039c
 80052f0:	0800fa8c 	.word	0x0800fa8c
 80052f4:	0800f85c 	.word	0x0800f85c
			if( pxSocket->u.xTCP.rxStream != NULL )
 80052f8:	f8db 3074 	ldr.w	r3, [fp, #116]	@ 0x74
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 8146 	beq.w	800558e <xProcessReceivedTCPPacket+0x95a>
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8005302:	691a      	ldr	r2, [r3, #16]
        size_t uxHead = pxBuffer->uxHead;
 8005304:	6899      	ldr	r1, [r3, #8]
        size_t uxTail = pxBuffer->uxTail;
 8005306:	681b      	ldr	r3, [r3, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8005308:	4413      	add	r3, r2
 800530a:	3b01      	subs	r3, #1
 800530c:	1a5b      	subs	r3, r3, r1
        if( uxCount >= pxBuffer->LENGTH )
 800530e:	429a      	cmp	r2, r3
 8005310:	d800      	bhi.n	8005314 <xProcessReceivedTCPPacket+0x6e0>
            uxCount -= pxBuffer->LENGTH;
 8005312:	1a9b      	subs	r3, r3, r2
			lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulReceiveLength, ulSpace );
 8005314:	4639      	mov	r1, r7
 8005316:	4622      	mov	r2, r4
 8005318:	9808      	ldr	r0, [sp, #32]
 800531a:	f000 fe85 	bl	8006028 <lTCPWindowRxCheck>
			if( lOffset >= 0 )
 800531e:	1e01      	subs	r1, r0, #0
 8005320:	f280 808f 	bge.w	8005442 <xProcessReceivedTCPPacket+0x80e>
					if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 8005324:	f8db 3114 	ldr.w	r3, [fp, #276]	@ 0x114
 8005328:	2b00      	cmp	r3, #0
 800532a:	f040 8127 	bne.w	800557c <xProcessReceivedTCPPacket+0x948>
		UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 800532e:	f89b 3120 	ldrb.w	r3, [fp, #288]	@ 0x120
 8005332:	f8d5 a018 	ldr.w	sl, [r5, #24]
 8005336:	9309      	str	r3, [sp, #36]	@ 0x24
			if( uxOptionsLength != 0U )
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 83c5 	beq.w	8005ac8 <xProcessReceivedTCPPacket+0xe94>
				if( xTCPWindowLoggingLevel >= 0 )
 800533e:	4ab7      	ldr	r2, [pc, #732]	@ (800561c <xProcessReceivedTCPPacket+0x9e8>)
 8005340:	6812      	ldr	r2, [r2, #0]
 8005342:	2a00      	cmp	r2, #0
 8005344:	db15      	blt.n	8005372 <xProcessReceivedTCPPacket+0x73e>
					FreeRTOS_debug_printf( ( "SACK[%d,%d]: optlen %lu sending %lu - %lu\n",
 8005346:	f8db 2168 	ldr.w	r2, [fp, #360]	@ 0x168
 800534a:	f8db 116c 	ldr.w	r1, [fp, #364]	@ 0x16c
 800534e:	f8db 00f0 	ldr.w	r0, [fp, #240]	@ 0xf0
 8005352:	ba12      	rev	r2, r2
 8005354:	ba09      	rev	r1, r1
 8005356:	930a      	str	r3, [sp, #40]	@ 0x28
 8005358:	eba1 0c00 	sub.w	ip, r1, r0
 800535c:	1a10      	subs	r0, r2, r0
 800535e:	f8bb 1024 	ldrh.w	r1, [fp, #36]	@ 0x24
 8005362:	f8bb 203c 	ldrh.w	r2, [fp, #60]	@ 0x3c
 8005366:	e9cd 0c00 	strd	r0, ip, [sp]
 800536a:	48ad      	ldr	r0, [pc, #692]	@ (8005620 <xProcessReceivedTCPPacket+0x9ec>)
 800536c:	f007 fd66 	bl	800ce3c <lUDPLoggingPrintf>
 8005370:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
				( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 8005372:	461a      	mov	r2, r3
 8005374:	f50b 71b2 	add.w	r1, fp, #356	@ 0x164
 8005378:	f10a 0036 	add.w	r0, sl, #54	@ 0x36
 800537c:	930a      	str	r3, [sp, #40]	@ 0x28
 800537e:	f007 ff1f 	bl	800d1c0 <memcpy>
				pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8005382:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005384:	3314      	adds	r3, #20
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	f88a 302e 	strb.w	r3, [sl, #46]	@ 0x2e
			if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 800538c:	f89b 2053 	ldrb.w	r2, [fp, #83]	@ 0x53
 8005390:	e76b      	b.n	800526a <xProcessReceivedTCPPacket+0x636>
		if( ( ulReceiveLength > 0U ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eSYN_RECEIVED ) )
 8005392:	2c00      	cmp	r4, #0
 8005394:	d1b0      	bne.n	80052f8 <xProcessReceivedTCPPacket+0x6c4>
			pxTCPWindow->ucOptionLength = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	46b2      	mov	sl, r6
 800539a:	f88b 3120 	strb.w	r3, [fp, #288]	@ 0x120
 800539e:	e5a1      	b.n	8004ee4 <xProcessReceivedTCPPacket+0x2b0>
							if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1UL ) )
 80053a0:	f8db 3110 	ldr.w	r3, [fp, #272]	@ 0x110
 80053a4:	9a08      	ldr	r2, [sp, #32]
 80053a6:	3301      	adds	r3, #1
 80053a8:	fa92 fa82 	rev.w	sl, r2
 80053ac:	4553      	cmp	r3, sl
 80053ae:	f47f ac52 	bne.w	8004c56 <xProcessReceivedTCPPacket+0x22>
								vTCPStateChange( pxSocket, eCLOSED );
 80053b2:	2100      	movs	r1, #0
 80053b4:	4658      	mov	r0, fp
 80053b6:	f7fe ffa1 	bl	80042fc <vTCPStateChange>
 80053ba:	e44c      	b.n	8004c56 <xProcessReceivedTCPPacket+0x22>
					FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %lu tx done %ld\n",
 80053bc:	463b      	mov	r3, r7
 80053be:	f8bb 203c 	ldrh.w	r2, [fp, #60]	@ 0x3c
 80053c2:	f8bb 1024 	ldrh.w	r1, [fp, #36]	@ 0x24
 80053c6:	9000      	str	r0, [sp, #0]
 80053c8:	4896      	ldr	r0, [pc, #600]	@ (8005624 <xProcessReceivedTCPPacket+0x9f0>)
 80053ca:	f007 fd37 	bl	800ce3c <lUDPLoggingPrintf>
			if( xTCPWindowLoggingLevel > 0 )
 80053ce:	4b93      	ldr	r3, [pc, #588]	@ (800561c <xProcessReceivedTCPPacket+0x9e8>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	dd0c      	ble.n	80053f0 <xProcessReceivedTCPPacket+0x7bc>
				FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %ld (Rx %lu Len %ld, Tx %lu)\n",
 80053d6:	2100      	movs	r1, #0
 80053d8:	4893      	ldr	r0, [pc, #588]	@ (8005628 <xProcessReceivedTCPPacket+0x9f4>)
 80053da:	e9db 2340 	ldrd	r2, r3, [fp, #256]	@ 0x100
 80053de:	1a9b      	subs	r3, r3, r2
 80053e0:	f8db 20f0 	ldr.w	r2, [fp, #240]	@ 0xf0
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	eba8 0202 	sub.w	r2, r8, r2
 80053ea:	4623      	mov	r3, r4
 80053ec:	f007 fd26 	bl	800ce3c <lUDPLoggingPrintf>
			pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 80053f0:	2310      	movs	r3, #16
 80053f2:	f886 302f 	strb.w	r3, [r6, #47]	@ 0x2f
			if( ulReceiveLength != 0U )
 80053f6:	2c00      	cmp	r4, #0
 80053f8:	f000 80cc 	beq.w	8005594 <xProcessReceivedTCPPacket+0x960>
				uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80053fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
				pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80053fe:	f102 0314 	add.w	r3, r2, #20
				uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8005402:	f102 0828 	add.w	r8, r2, #40	@ 0x28
				pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8005406:	009b      	lsls	r3, r3, #2
				xSendLength = ( BaseType_t ) uxIntermediateResult;
 8005408:	4647      	mov	r7, r8
				pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800540a:	f886 302e 	strb.w	r3, [r6, #46]	@ 0x2e
				if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800540e:	f89b 3041 	ldrb.w	r3, [fp, #65]	@ 0x41
 8005412:	0658      	lsls	r0, r3, #25
 8005414:	f100 81c6 	bmi.w	80057a4 <xProcessReceivedTCPPacket+0xb70>
			if( uxOptionsLength == 0U )
 8005418:	2a00      	cmp	r2, #0
 800541a:	f000 81ee 	beq.w	80057fa <xProcessReceivedTCPPacket+0xbc6>
				if( pxNetworkBuffer != NULL )
 800541e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
		ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8005420:	f8db 60f4 	ldr.w	r6, [fp, #244]	@ 0xf4
 8005424:	e666      	b.n	80050f4 <xProcessReceivedTCPPacket+0x4c0>
					xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 8005426:	69af      	ldr	r7, [r5, #24]
		uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8005428:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
		uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800542c:	f8d7 6026 	ldr.w	r6, [r7, #38]	@ 0x26
		if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 8005430:	f003 0217 	and.w	r2, r3, #23
 8005434:	ba36      	rev	r6, r6
 8005436:	2a10      	cmp	r2, #16
 8005438:	f000 8106 	beq.w	8005648 <xProcessReceivedTCPPacket+0xa14>
 800543c:	2210      	movs	r2, #16
			FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X Queued %d, %d\n",
 800543e:	497b      	ldr	r1, [pc, #492]	@ (800562c <xProcessReceivedTCPPacket+0x9f8>)
 8005440:	e62a      	b.n	8005098 <xProcessReceivedTCPPacket+0x464>
				lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRecvData, ulReceiveLength );
 8005442:	4652      	mov	r2, sl
 8005444:	4623      	mov	r3, r4
 8005446:	4658      	mov	r0, fp
 8005448:	f7fe fa98 	bl	800397c <lTCPAddRxdata>
				if( lStored != ( int32_t ) ulReceiveLength )
 800544c:	4284      	cmp	r4, r0
 800544e:	f43f af69 	beq.w	8005324 <xProcessReceivedTCPPacket+0x6f0>
					FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %ld / %lu bytes? ?\n", lStored, ulReceiveLength ) );
 8005452:	4622      	mov	r2, r4
 8005454:	4601      	mov	r1, r0
 8005456:	4876      	ldr	r0, [pc, #472]	@ (8005630 <xProcessReceivedTCPPacket+0x9fc>)
 8005458:	f007 fcf0 	bl	800ce3c <lUDPLoggingPrintf>
				TCPPacket_t * pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800545c:	69aa      	ldr	r2, [r5, #24]
				pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 800545e:	f241 4150 	movw	r1, #5200	@ 0x1450
				prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 8005462:	2300      	movs	r3, #0
				pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8005464:	85d1      	strh	r1, [r2, #46]	@ 0x2e
				prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 8005466:	4618      	mov	r0, r3
 8005468:	2228      	movs	r2, #40	@ 0x28
 800546a:	4629      	mov	r1, r5
 800546c:	f7fe fdcc 	bl	8004008 <prvTCPReturnPacket>
		return xSendLength;
 8005470:	e5bd      	b.n	8004fee <xProcessReceivedTCPPacket+0x3ba>
				if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 8005472:	f8bb 204e 	ldrh.w	r2, [fp, #78]	@ 0x4e
 8005476:	f8bb 3050 	ldrh.w	r3, [fp, #80]	@ 0x50
 800547a:	429a      	cmp	r2, r3
 800547c:	f080 8169 	bcs.w	8005752 <xProcessReceivedTCPPacket+0xb1e>
													  FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 8005480:	4648      	mov	r0, r9
 8005482:	4641      	mov	r1, r8
 8005484:	2206      	movs	r2, #6
 8005486:	f7fd fa63 	bl	8002950 <FreeRTOS_socket>
					if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 800548a:	1e43      	subs	r3, r0, #1
													  FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 800548c:	4681      	mov	r9, r0
					if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 800548e:	3303      	adds	r3, #3
 8005490:	f200 8222 	bhi.w	80058d8 <xProcessReceivedTCPPacket+0xca4>
		pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 8005494:	e9db 2307 	ldrd	r2, r3, [fp, #28]
 8005498:	e9c0 2307 	strd	r2, r3, [r0, #28]
		pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 800549c:	f89b 3026 	ldrb.w	r3, [fp, #38]	@ 0x26
 80054a0:	f880 3026 	strb.w	r3, [r0, #38]	@ 0x26
		pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 80054a4:	e9db 0119 	ldrd	r0, r1, [fp, #100]	@ 0x64
 80054a8:	e9db 231b 	ldrd	r2, r3, [fp, #108]	@ 0x6c
 80054ac:	e9c9 0119 	strd	r0, r1, [r9, #100]	@ 0x64
 80054b0:	e9c9 231b 	strd	r2, r3, [r9, #108]	@ 0x6c
		pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 80054b4:	e9db 2337 	ldrd	r2, r3, [fp, #220]	@ 0xdc
 80054b8:	e9c9 2337 	strd	r2, r3, [r9, #220]	@ 0xdc
				pxNewSocket->pxUserSemaphore = pxSocket->pxUserSemaphore;
 80054bc:	f8db 3028 	ldr.w	r3, [fp, #40]	@ 0x28
 80054c0:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
				pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
 80054c4:	f8db 30d4 	ldr.w	r3, [fp, #212]	@ 0xd4
 80054c8:	e9db 1233 	ldrd	r1, r2, [fp, #204]	@ 0xcc
 80054cc:	f8c9 30d4 	str.w	r3, [r9, #212]	@ 0xd4
				if( pxSocket->pxSocketSet != NULL )
 80054d0:	f8db 302c 	ldr.w	r3, [fp, #44]	@ 0x2c
				pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
 80054d4:	e9c9 1233 	strd	r1, r2, [r9, #204]	@ 0xcc
				if( pxSocket->pxSocketSet != NULL )
 80054d8:	b13b      	cbz	r3, 80054ea <xProcessReceivedTCPPacket+0x8b6>
					pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 80054da:	f8c9 302c 	str.w	r3, [r9, #44]	@ 0x2c
					pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 80054de:	f8db 3030 	ldr.w	r3, [fp, #48]	@ 0x30
 80054e2:	f043 0305 	orr.w	r3, r3, #5
 80054e6:	f8c9 3030 	str.w	r3, [r9, #48]	@ 0x30
		xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 80054ea:	4b52      	ldr	r3, [pc, #328]	@ (8005634 <xProcessReceivedTCPPacket+0xa00>)
 80054ec:	f8bb 1024 	ldrh.w	r1, [fp, #36]	@ 0x24
 80054f0:	695b      	ldr	r3, [r3, #20]
		FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s\n",
 80054f2:	f8df c150 	ldr.w	ip, [pc, #336]	@ 8005644 <xProcessReceivedTCPPacket+0xa10>
		xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 80054f6:	9311      	str	r3, [sp, #68]	@ 0x44
				pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 80054f8:	f899 3040 	ldrb.w	r3, [r9, #64]	@ 0x40
		FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s\n",
 80054fc:	484e      	ldr	r0, [pc, #312]	@ (8005638 <xProcessReceivedTCPPacket+0xa04>)
				pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 80054fe:	f043 0304 	orr.w	r3, r3, #4
				pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 8005502:	f8c9 b054 	str.w	fp, [r9, #84]	@ 0x54
				pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8005506:	f889 3040 	strb.w	r3, [r9, #64]	@ 0x40
		pxSocket->u.xTCP.usChildCount++;
 800550a:	f8bb 204e 	ldrh.w	r2, [fp, #78]	@ 0x4e
		FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s\n",
 800550e:	f8bb 3050 	ldrh.w	r3, [fp, #80]	@ 0x50
		pxSocket->u.xTCP.usChildCount++;
 8005512:	3201      	adds	r2, #1
 8005514:	b292      	uxth	r2, r2
		FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s\n",
 8005516:	2a01      	cmp	r2, #1
 8005518:	bf18      	it	ne
 800551a:	4660      	movne	r0, ip
		pxSocket->u.xTCP.usChildCount++;
 800551c:	f8ab 204e 	strh.w	r2, [fp, #78]	@ 0x4e
		FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s\n",
 8005520:	9000      	str	r0, [sp, #0]
		xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 8005522:	ba48      	rev16	r0, r1
 8005524:	f8ad 0042 	strh.w	r0, [sp, #66]	@ 0x42
		FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s\n",
 8005528:	4844      	ldr	r0, [pc, #272]	@ (800563c <xProcessReceivedTCPPacket+0xa08>)
 800552a:	f007 fc87 	bl	800ce3c <lUDPLoggingPrintf>
		if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 800552e:	2301      	movs	r3, #1
 8005530:	2208      	movs	r2, #8
 8005532:	a910      	add	r1, sp, #64	@ 0x40
 8005534:	4648      	mov	r0, r9
 8005536:	f7fd fbc7 	bl	8002cc8 <vSocketBind>
 800553a:	2800      	cmp	r0, #0
 800553c:	f040 81e2 	bne.w	8005904 <xProcessReceivedTCPPacket+0xcd0>
		if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 8005540:	46cb      	mov	fp, r9
 8005542:	e576      	b.n	8005032 <xProcessReceivedTCPPacket+0x3fe>
			pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 8005544:	f36f 0300 	bfc	r3, #0, #1
 8005548:	f88b 3040 	strb.w	r3, [fp, #64]	@ 0x40
			if( xTCPWindowLoggingLevel >= 0 )
 800554c:	4b33      	ldr	r3, [pc, #204]	@ (800561c <xProcessReceivedTCPPacket+0x9e8>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	f280 810f 	bge.w	8005774 <xProcessReceivedTCPPacket+0xb40>
			pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 8005556:	f240 4302 	movw	r3, #1026	@ 0x402
 800555a:	f8aa 3036 	strh.w	r3, [sl, #54]	@ 0x36
			pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 800555e:	f8bb 304a 	ldrh.w	r3, [fp, #74]	@ 0x4a
			pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffU );
 8005562:	f88a 3039 	strb.w	r3, [sl, #57]	@ 0x39
			pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 8005566:	0a1b      	lsrs	r3, r3, #8
 8005568:	f88a 3038 	strb.w	r3, [sl, #56]	@ 0x38
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800556c:	2360      	movs	r3, #96	@ 0x60
 800556e:	f88a 302e 	strb.w	r3, [sl, #46]	@ 0x2e
			uxOptionsLength = 4U;
 8005572:	2304      	movs	r3, #4
 8005574:	f89b 0053 	ldrb.w	r0, [fp, #83]	@ 0x53
 8005578:	9309      	str	r3, [sp, #36]	@ 0x24
 800557a:	e4ba      	b.n	8004ef2 <xProcessReceivedTCPPacket+0x2be>
						( void ) lTCPAddRxdata( pxSocket, 0UL, NULL, pxTCPWindow->ulUserDataLength );
 800557c:	2200      	movs	r2, #0
 800557e:	4658      	mov	r0, fp
 8005580:	4611      	mov	r1, r2
 8005582:	f7fe f9fb 	bl	800397c <lTCPAddRxdata>
						pxTCPWindow->ulUserDataLength = 0;
 8005586:	2300      	movs	r3, #0
 8005588:	f8cb 3114 	str.w	r3, [fp, #276]	@ 0x114
		return xResult;
 800558c:	e6cf      	b.n	800532e <xProcessReceivedTCPPacket+0x6fa>
				ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800558e:	f8db 306c 	ldr.w	r3, [fp, #108]	@ 0x6c
 8005592:	e6bf      	b.n	8005314 <xProcessReceivedTCPPacket+0x6e0>
			if( uxOptionsLength == 0U )
 8005594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 813b 	beq.w	8005812 <xProcessReceivedTCPPacket+0xbde>
				if( pxNetworkBuffer != NULL )
 800559c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800559e:	e526      	b.n	8004fee <xProcessReceivedTCPPacket+0x3ba>
		UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 80055a0:	2300      	movs	r3, #0
 80055a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80055a4:	e661      	b.n	800526a <xProcessReceivedTCPPacket+0x636>
				FreeRTOS_debug_printf( ( "eSYN_RECEIVED: ACK expected, not SYN: peer missed our SYN+ACK\n" ) );
 80055a6:	4826      	ldr	r0, [pc, #152]	@ (8005640 <xProcessReceivedTCPPacket+0xa0c>)
 80055a8:	f007 fc48 	bl	800ce3c <lUDPLoggingPrintf>
				vTCPStateChange( pxSocket, eSYN_FIRST );
 80055ac:	2103      	movs	r1, #3
 80055ae:	4658      	mov	r0, fp
 80055b0:	f7fe fea4 	bl	80042fc <vTCPStateChange>
 80055b4:	e65b      	b.n	800526e <xProcessReceivedTCPPacket+0x63a>
			ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 80055b6:	f8d6 102a 	ldr.w	r1, [r6, #42]	@ 0x2a
 80055ba:	9808      	ldr	r0, [sp, #32]
 80055bc:	ba09      	rev	r1, r1
 80055be:	f001 f815 	bl	80065ec <ulTCPWindowTxAck>
			if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 80055c2:	f8db 3078 	ldr.w	r3, [fp, #120]	@ 0x78
 80055c6:	4681      	mov	r9, r0
 80055c8:	2800      	cmp	r0, #0
 80055ca:	f43f adf9 	beq.w	80051c0 <xProcessReceivedTCPPacket+0x58c>
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f43f adfa 	beq.w	80051c8 <xProcessReceivedTCPPacket+0x594>
				if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 80055d4:	2200      	movs	r2, #0
 80055d6:	4618      	mov	r0, r3
 80055d8:	464b      	mov	r3, r9
 80055da:	4611      	mov	r1, r2
 80055dc:	9200      	str	r2, [sp, #0]
 80055de:	f7fe fc41 	bl	8003e64 <uxStreamBufferGet>
 80055e2:	2800      	cmp	r0, #0
 80055e4:	f43f adea 	beq.w	80051bc <xProcessReceivedTCPPacket+0x588>
					pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 80055e8:	f8db 2000 	ldr.w	r2, [fp]
							if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 80055ec:	f8db 3030 	ldr.w	r3, [fp, #48]	@ 0x30
					pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 80055f0:	f042 0102 	orr.w	r1, r2, #2
							if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 80055f4:	079b      	lsls	r3, r3, #30
					pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 80055f6:	f8cb 1000 	str.w	r1, [fp]
							if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 80055fa:	d504      	bpl.n	8005606 <xProcessReceivedTCPPacket+0x9d2>
								pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 80055fc:	f240 2302 	movw	r3, #514	@ 0x202
 8005600:	4313      	orrs	r3, r2
 8005602:	f8cb 3000 	str.w	r3, [fp]
							if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8005606:	f8db 30d0 	ldr.w	r3, [fp, #208]	@ 0xd0
 800560a:	2b00      	cmp	r3, #0
 800560c:	f43f add6 	beq.w	80051bc <xProcessReceivedTCPPacket+0x588>
								pxSocket->u.xTCP.pxHandleSent( ( Socket_t ) pxSocket, ulCount );
 8005610:	4649      	mov	r1, r9
 8005612:	4658      	mov	r0, fp
 8005614:	4798      	blx	r3
 8005616:	e5d1      	b.n	80051bc <xProcessReceivedTCPPacket+0x588>
			uxIndex = 1U;
 8005618:	4613      	mov	r3, r2
 800561a:	e4c7      	b.n	8004fac <xProcessReceivedTCPPacket+0x378>
 800561c:	2000039c 	.word	0x2000039c
 8005620:	0800f904 	.word	0x0800f904
 8005624:	0800f9e8 	.word	0x0800f9e8
 8005628:	0800fab8 	.word	0x0800fab8
 800562c:	0800f700 	.word	0x0800f700
 8005630:	0800f8d8 	.word	0x0800f8d8
 8005634:	20000014 	.word	0x20000014
 8005638:	0800eb4c 	.word	0x0800eb4c
 800563c:	0800f80c 	.word	0x0800f80c
 8005640:	0800f944 	.word	0x0800f944
 8005644:	0800f098 	.word	0x0800f098
			pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 8005648:	f8bb e03c 	ldrh.w	lr, [fp, #60]	@ 0x3c
			pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 800564c:	f8bb 2024 	ldrh.w	r2, [fp, #36]	@ 0x24
					FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
 8005650:	f89b 1042 	ldrb.w	r1, [fp, #66]	@ 0x42
 8005654:	f89b 0053 	ldrb.w	r0, [fp, #83]	@ 0x53
			pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8005658:	f8db c100 	ldr.w	ip, [fp, #256]	@ 0x100
					FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
 800565c:	f3c1 1800 	ubfx	r8, r1, #4, #1
 8005660:	f8db 3038 	ldr.w	r3, [fp, #56]	@ 0x38
			pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 8005664:	f8ab e19e 	strh.w	lr, [fp, #414]	@ 0x19e
			pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 8005668:	f8ab 219c 	strh.w	r2, [fp, #412]	@ 0x19c
			else if( ulReceiveLength == 0U )
 800566c:	2c00      	cmp	r4, #0
 800566e:	d154      	bne.n	800571a <xProcessReceivedTCPPacket+0xae6>
				pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8005670:	f8cb 60f4 	str.w	r6, [fp, #244]	@ 0xf4
			pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8005674:	f10c 0601 	add.w	r6, ip, #1
					FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
 8005678:	f3c1 1100 	ubfx	r1, r1, #4, #1
			pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 800567c:	f8cb 6110 	str.w	r6, [fp, #272]	@ 0x110
					FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
 8005680:	9101      	str	r1, [sp, #4]
 8005682:	4ec4      	ldr	r6, [pc, #784]	@ (8005994 <xProcessReceivedTCPPacket+0xd60>)
 8005684:	49c4      	ldr	r1, [pc, #784]	@ (8005998 <xProcessReceivedTCPPacket+0xd64>)
 8005686:	f8cd e000 	str.w	lr, [sp]
 800568a:	2802      	cmp	r0, #2
 800568c:	bf08      	it	eq
 800568e:	4631      	moveq	r1, r6
 8005690:	48c2      	ldr	r0, [pc, #776]	@ (800599c <xProcessReceivedTCPPacket+0xd68>)
 8005692:	f007 fbd3 	bl	800ce3c <lUDPLoggingPrintf>
			if( ( pxSocket->u.xTCP.ucTCPState == ( EventBits_t ) eCONNECT_SYN ) || ( ulReceiveLength != 0UL ) )
 8005696:	f89b 3053 	ldrb.w	r3, [fp, #83]	@ 0x53
 800569a:	2b02      	cmp	r3, #2
 800569c:	d04d      	beq.n	800573a <xProcessReceivedTCPPacket+0xb06>
 800569e:	f1b4 0800 	subs.w	r8, r4, #0
 80056a2:	bf18      	it	ne
 80056a4:	f04f 0801 	movne.w	r8, #1
 80056a8:	2c00      	cmp	r4, #0
 80056aa:	d146      	bne.n	800573a <xProcessReceivedTCPPacket+0xb06>
					if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 80056ac:	f89b 3042 	ldrb.w	r3, [fp, #66]	@ 0x42
			vTCPStateChange( pxSocket, eESTABLISHED );
 80056b0:	2105      	movs	r1, #5
 80056b2:	4658      	mov	r0, fp
					if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 80056b4:	f013 0310 	ands.w	r3, r3, #16
						pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 80056b8:	bf08      	it	eq
 80056ba:	f8ab 30c9 	strheq.w	r3, [fp, #201]	@ 0xc9
			vTCPStateChange( pxSocket, eESTABLISHED );
 80056be:	f7fe fe1d 	bl	80042fc <vTCPStateChange>
 80056c2:	e48f      	b.n	8004fe4 <xProcessReceivedTCPPacket+0x3b0>
				bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 80056c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056c8:	4648      	mov	r0, r9
 80056ca:	f000 fb9b 	bl	8005e04 <xTCPWindowRxEmpty>
 80056ce:	4607      	mov	r7, r0
				bTxDone = xTCPWindowTxDone( pxTCPWindow );
 80056d0:	4648      	mov	r0, r9
 80056d2:	f000 fe75 	bl	80063c0 <xTCPWindowTxDone>
				if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 80056d6:	2f00      	cmp	r7, #0
 80056d8:	f43f ae70 	beq.w	80053bc <xProcessReceivedTCPPacket+0x788>
 80056dc:	2800      	cmp	r0, #0
 80056de:	f43f ae6d 	beq.w	80053bc <xProcessReceivedTCPPacket+0x788>
					ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 80056e2:	f8db 20f4 	ldr.w	r2, [fp, #244]	@ 0xf4
 80056e6:	1aa1      	subs	r1, r4, r2
 80056e8:	4441      	add	r1, r8
					if( lDistance > 1 )
 80056ea:	2901      	cmp	r1, #1
 80056ec:	f300 80fb 	bgt.w	80058e6 <xProcessReceivedTCPPacket+0xcb2>
			if( xTCPWindowLoggingLevel > 0 )
 80056f0:	4bab      	ldr	r3, [pc, #684]	@ (80059a0 <xProcessReceivedTCPPacket+0xd6c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f77f ad7c 	ble.w	80051f2 <xProcessReceivedTCPPacket+0x5be>
				FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %ld (Rx %lu Len %ld, Tx %lu)\n",
 80056fa:	f8db 1104 	ldr.w	r1, [fp, #260]	@ 0x104
 80056fe:	f8db 3100 	ldr.w	r3, [fp, #256]	@ 0x100
 8005702:	f8db 20f0 	ldr.w	r2, [fp, #240]	@ 0xf0
 8005706:	1ac9      	subs	r1, r1, r3
 8005708:	48a6      	ldr	r0, [pc, #664]	@ (80059a4 <xProcessReceivedTCPPacket+0xd70>)
 800570a:	eba8 0202 	sub.w	r2, r8, r2
 800570e:	4623      	mov	r3, r4
 8005710:	9100      	str	r1, [sp, #0]
 8005712:	2101      	movs	r1, #1
 8005714:	f007 fb92 	bl	800ce3c <lUDPLoggingPrintf>
			if( xMayClose != pdFALSE )
 8005718:	e56b      	b.n	80051f2 <xProcessReceivedTCPPacket+0x5be>
			pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 800571a:	f10c 0601 	add.w	r6, ip, #1
					FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
 800571e:	2802      	cmp	r0, #2
			pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8005720:	f8cb 6110 	str.w	r6, [fp, #272]	@ 0x110
					FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
 8005724:	f000 812e 	beq.w	8005984 <xProcessReceivedTCPPacket+0xd50>
 8005728:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800572c:	489b      	ldr	r0, [pc, #620]	@ (800599c <xProcessReceivedTCPPacket+0xd68>)
 800572e:	f8cd e000 	str.w	lr, [sp]
 8005732:	9101      	str	r1, [sp, #4]
 8005734:	4998      	ldr	r1, [pc, #608]	@ (8005998 <xProcessReceivedTCPPacket+0xd64>)
 8005736:	f007 fb81 	bl	800ce3c <lUDPLoggingPrintf>
				pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800573a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800573c:	f102 0314 	add.w	r3, r2, #20
				uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8005740:	f102 0828 	add.w	r8, r2, #40	@ 0x28
				pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800574a:	2310      	movs	r3, #16
 800574c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8005750:	e7ac      	b.n	80056ac <xProcessReceivedTCPPacket+0xa78>
					FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 8005752:	4c95      	ldr	r4, [pc, #596]	@ (80059a8 <xProcessReceivedTCPPacket+0xd74>)
 8005754:	4895      	ldr	r0, [pc, #596]	@ (80059ac <xProcessReceivedTCPPacket+0xd78>)
 8005756:	f8bb 1024 	ldrh.w	r1, [fp, #36]	@ 0x24
 800575a:	2a01      	cmp	r2, #1
 800575c:	bf18      	it	ne
 800575e:	4620      	movne	r0, r4
				pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8005760:	f241 4450 	movw	r4, #5200	@ 0x1450
					FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 8005764:	9000      	str	r0, [sp, #0]
 8005766:	4892      	ldr	r0, [pc, #584]	@ (80059b0 <xProcessReceivedTCPPacket+0xd7c>)
 8005768:	f007 fb68 	bl	800ce3c <lUDPLoggingPrintf>
				TCPPacket_t * pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800576c:	69aa      	ldr	r2, [r5, #24]
				prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 800576e:	9b08      	ldr	r3, [sp, #32]
 8005770:	f7ff bb11 	b.w	8004d96 <xProcessReceivedTCPPacket+0x162>
				FreeRTOS_debug_printf( ( "MSS: sending %d\n", pxSocket->u.xTCP.usCurMSS ) );
 8005774:	f8bb 104a 	ldrh.w	r1, [fp, #74]	@ 0x4a
 8005778:	488e      	ldr	r0, [pc, #568]	@ (80059b4 <xProcessReceivedTCPPacket+0xd80>)
 800577a:	f007 fb5f 	bl	800ce3c <lUDPLoggingPrintf>
			pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 800577e:	f240 4302 	movw	r3, #1026	@ 0x402
			if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 8005782:	f89b 2053 	ldrb.w	r2, [fp, #83]	@ 0x53
			pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 8005786:	f8aa 3036 	strh.w	r3, [sl, #54]	@ 0x36
			pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 800578a:	f8bb 304a 	ldrh.w	r3, [fp, #74]	@ 0x4a
			pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffU );
 800578e:	f88a 3039 	strb.w	r3, [sl, #57]	@ 0x39
			pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 8005792:	0a1b      	lsrs	r3, r3, #8
 8005794:	f88a 3038 	strb.w	r3, [sl, #56]	@ 0x38
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8005798:	2360      	movs	r3, #96	@ 0x60
 800579a:	f88a 302e 	strb.w	r3, [sl, #46]	@ 0x2e
			uxOptionsLength = 4U;
 800579e:	2304      	movs	r3, #4
 80057a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80057a2:	e562      	b.n	800526a <xProcessReceivedTCPPacket+0x636>
					pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 80057a4:	f8db 3108 	ldr.w	r3, [fp, #264]	@ 0x108
 80057a8:	f8cb 3104 	str.w	r3, [fp, #260]	@ 0x104
			if( uxOptionsLength == 0U )
 80057ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057ae:	b323      	cbz	r3, 80057fa <xProcessReceivedTCPPacket+0xbc6>
		const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 80057b0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
				if( ( ulReceiveLength > 0U ) &&                                                   /* Data was sent to this socket. */
 80057b2:	ae0f      	add	r6, sp, #60	@ 0x3c
 80057b4:	f8db 007c 	ldr.w	r0, [fp, #124]	@ 0x7c
 80057b8:	e4b2      	b.n	8005120 <xProcessReceivedTCPPacket+0x4ec>
					( xSendLength == uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) && /* No Tx data or options to be sent. */
 80057ba:	f89b 1053 	ldrb.w	r1, [fp, #83]	@ 0x53
 80057be:	2905      	cmp	r1, #5
 80057c0:	f000 80a8 	beq.w	8005914 <xProcessReceivedTCPPacket+0xce0>
 80057c4:	f04f 0828 	mov.w	r8, #40	@ 0x28
 80057c8:	e4a8      	b.n	800511c <xProcessReceivedTCPPacket+0x4e8>
				if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 80057ca:	f1b8 0f02 	cmp.w	r8, #2
 80057ce:	f43f abf5 	beq.w	8004fbc <xProcessReceivedTCPPacket+0x388>
 80057d2:	f899 3001 	ldrb.w	r3, [r9, #1]
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	f47f abf0 	bne.w	8004fbc <xProcessReceivedTCPPacket+0x388>
					if( xHasSYNFlag != 0 )
 80057dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057de:	b14b      	cbz	r3, 80057f4 <xProcessReceivedTCPPacket+0xbc0>
						pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 80057e0:	f89b 3042 	ldrb.w	r3, [fp, #66]	@ 0x42
						pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 80057e4:	f899 2002 	ldrb.w	r2, [r9, #2]
						pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 80057e8:	f043 0310 	orr.w	r3, r3, #16
						pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 80057ec:	f88b 20ca 	strb.w	r2, [fp, #202]	@ 0xca
						pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 80057f0:	f88b 3042 	strb.w	r3, [fp, #66]	@ 0x42
					uxIndex = tcpTCP_OPT_WSOPT_LEN;
 80057f4:	2303      	movs	r3, #3
 80057f6:	f7ff bbd9 	b.w	8004fac <xProcessReceivedTCPPacket+0x378>
				lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 80057fa:	a90f      	add	r1, sp, #60	@ 0x3c
 80057fc:	4658      	mov	r0, fp
 80057fe:	f7fe febf 	bl	8004580 <prvTCPPrepareSend.constprop.0>
				if( lSendResult > 0 )
 8005802:	2800      	cmp	r0, #0
		const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 8005804:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
		ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8005806:	f8db 60f4 	ldr.w	r6, [fp, #244]	@ 0xf4
				if( lSendResult > 0 )
 800580a:	f77f ac73 	ble.w	80050f4 <xProcessReceivedTCPPacket+0x4c0>
				lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800580e:	4680      	mov	r8, r0
 8005810:	e470      	b.n	80050f4 <xProcessReceivedTCPPacket+0x4c0>
 8005812:	ae0f      	add	r6, sp, #60	@ 0x3c
 8005814:	4658      	mov	r0, fp
 8005816:	4631      	mov	r1, r6
 8005818:	f7fe feb2 	bl	8004580 <prvTCPPrepareSend.constprop.0>
				if( lSendResult > 0 )
 800581c:	f1b0 0800 	subs.w	r8, r0, #0
		const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 8005820:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
				if( lSendResult > 0 )
 8005822:	f77f abe3 	ble.w	8004fec <xProcessReceivedTCPPacket+0x3b8>
			prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8005826:	4647      	mov	r7, r8
 8005828:	f8db 007c 	ldr.w	r0, [fp, #124]	@ 0x7c
 800582c:	e478      	b.n	8005120 <xProcessReceivedTCPPacket+0x4ec>
			pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 800582e:	f8bb 303c 	ldrh.w	r3, [fp, #60]	@ 0x3c
				vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8005832:	4631      	mov	r1, r6
 8005834:	9808      	ldr	r0, [sp, #32]
				pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 8005836:	3601      	adds	r6, #1
			pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 8005838:	f8ab 319e 	strh.w	r3, [fp, #414]	@ 0x19e
			pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 800583c:	f8bb 3024 	ldrh.w	r3, [fp, #36]	@ 0x24
				vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8005840:	f8db 2110 	ldr.w	r2, [fp, #272]	@ 0x110
			pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 8005844:	f8ab 319c 	strh.w	r3, [fp, #412]	@ 0x19c
				pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8005848:	2310      	movs	r3, #16
 800584a:	f88b 30b1 	strb.w	r3, [fp, #177]	@ 0xb1
				pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 800584e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8005852:	f8bb 304a 	ldrh.w	r3, [fp, #74]	@ 0x4a
 8005856:	f000 fbc3 	bl	8005fe0 <vTCPWindowInit>
				pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 800585a:	f8db 3104 	ldr.w	r3, [fp, #260]	@ 0x104
					FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
 800585e:	f8bb 2024 	ldrh.w	r2, [fp, #36]	@ 0x24
				pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 8005862:	3301      	adds	r3, #1
					FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
 8005864:	f8bb e03c 	ldrh.w	lr, [fp, #60]	@ 0x3c
 8005868:	f89b 0053 	ldrb.w	r0, [fp, #83]	@ 0x53
				pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 800586c:	f8cb 3104 	str.w	r3, [fp, #260]	@ 0x104
				pxTCPWindow->ulNextTxSequenceNumber++;
 8005870:	f8db 3118 	ldr.w	r3, [fp, #280]	@ 0x118
 8005874:	f8db c100 	ldr.w	ip, [fp, #256]	@ 0x100
 8005878:	3301      	adds	r3, #1
 800587a:	f89b 1042 	ldrb.w	r1, [fp, #66]	@ 0x42
				pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 800587e:	f8cb 60fc 	str.w	r6, [fp, #252]	@ 0xfc
				pxTCPWindow->ulNextTxSequenceNumber++;
 8005882:	f8cb 3118 	str.w	r3, [fp, #280]	@ 0x118
				pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8005886:	f8cb 60f4 	str.w	r6, [fp, #244]	@ 0xf4
				pxTCPWindow->ulNextTxSequenceNumber++;
 800588a:	f8db 3038 	ldr.w	r3, [fp, #56]	@ 0x38
 800588e:	e6f1      	b.n	8005674 <xProcessReceivedTCPPacket+0xa40>
					FreeRTOS_closesocket( pxSocket );
 8005890:	4658      	mov	r0, fp
 8005892:	f7fd facd 	bl	8002e30 <FreeRTOS_closesocket>
 8005896:	e418      	b.n	80050ca <xProcessReceivedTCPPacket+0x496>
			if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 8005898:	f1b8 0f03 	cmp.w	r8, #3
 800589c:	f67f ab8e 	bls.w	8004fbc <xProcessReceivedTCPPacket+0x388>
 80058a0:	f899 3001 	ldrb.w	r3, [r9, #1]
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	f47f ab89 	bne.w	8004fbc <xProcessReceivedTCPPacket+0x388>
				uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 80058aa:	f8b9 6002 	ldrh.w	r6, [r9, #2]
				if( pxSocket->u.xTCP.usInitMSS != uxNewMSS )
 80058ae:	f8bb 104c 	ldrh.w	r1, [fp, #76]	@ 0x4c
 80058b2:	ba76      	rev16	r6, r6
 80058b4:	b2b6      	uxth	r6, r6
 80058b6:	428e      	cmp	r6, r1
 80058b8:	d008      	beq.n	80058cc <xProcessReceivedTCPPacket+0xc98>
					if( uxNewMSS == 0U )
 80058ba:	2e00      	cmp	r6, #0
 80058bc:	f43f ab7e 	beq.w	8004fbc <xProcessReceivedTCPPacket+0x388>
						FreeRTOS_debug_printf( ( "MSS change %u -> %lu\n", pxSocket->u.xTCP.usInitMSS, uxNewMSS ) );
 80058c0:	4632      	mov	r2, r6
 80058c2:	483d      	ldr	r0, [pc, #244]	@ (80059b8 <xProcessReceivedTCPPacket+0xd84>)
 80058c4:	f007 faba 	bl	800ce3c <lUDPLoggingPrintf>
				if( xReturn == pdFALSE )
 80058c8:	f8bb 104c 	ldrh.w	r1, [fp, #76]	@ 0x4c
					if( pxSocket->u.xTCP.usInitMSS > uxNewMSS )
 80058cc:	42b1      	cmp	r1, r6
 80058ce:	f200 80df 	bhi.w	8005a90 <xProcessReceivedTCPPacket+0xe5c>
					uxIndex = tcpTCP_OPT_MSS_LEN;
 80058d2:	2304      	movs	r3, #4
 80058d4:	f7ff bb6a 	b.w	8004fac <xProcessReceivedTCPPacket+0x378>
						FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 80058d8:	4838      	ldr	r0, [pc, #224]	@ (80059bc <xProcessReceivedTCPPacket+0xd88>)
				pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 80058da:	f241 4450 	movw	r4, #5200	@ 0x1450
						FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 80058de:	f007 faad 	bl	800ce3c <lUDPLoggingPrintf>
				TCPPacket_t * pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 80058e2:	69a8      	ldr	r0, [r5, #24]
				pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 80058e4:	e4e3      	b.n	80052ae <xProcessReceivedTCPPacket+0x67a>
						FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %ld (cur %lu high %lu)\n",
 80058e6:	f8db 30f0 	ldr.w	r3, [fp, #240]	@ 0xf0
 80058ea:	f8db 00fc 	ldr.w	r0, [fp, #252]	@ 0xfc
 80058ee:	1ad2      	subs	r2, r2, r3
 80058f0:	1ac3      	subs	r3, r0, r3
 80058f2:	4833      	ldr	r0, [pc, #204]	@ (80059c0 <xProcessReceivedTCPPacket+0xd8c>)
 80058f4:	f007 faa2 	bl	800ce3c <lUDPLoggingPrintf>
			if( xTCPWindowLoggingLevel > 0 )
 80058f8:	4b29      	ldr	r3, [pc, #164]	@ (80059a0 <xProcessReceivedTCPPacket+0xd6c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f77f ad77 	ble.w	80053f0 <xProcessReceivedTCPPacket+0x7bc>
 8005902:	e568      	b.n	80053d6 <xProcessReceivedTCPPacket+0x7a2>
			FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
 8005904:	482f      	ldr	r0, [pc, #188]	@ (80059c4 <xProcessReceivedTCPPacket+0xd90>)
 8005906:	f007 fa99 	bl	800ce3c <lUDPLoggingPrintf>
			( void ) FreeRTOS_closesocket( pxNewSocket );
 800590a:	4648      	mov	r0, r9
 800590c:	f7fd fa90 	bl	8002e30 <FreeRTOS_closesocket>
						if( pxSocket == NULL )
 8005910:	f7ff b9a1 	b.w	8004c56 <xProcessReceivedTCPPacket+0x22>
					( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) &&                /* Connection established. */
 8005914:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 8005918:	2a10      	cmp	r2, #16
 800591a:	f47f af53 	bne.w	80057c4 <xProcessReceivedTCPPacket+0xb90>
					if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800591e:	4285      	cmp	r5, r0
 8005920:	d006      	beq.n	8005930 <xProcessReceivedTCPPacket+0xcfc>
						if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8005922:	b118      	cbz	r0, 800592c <xProcessReceivedTCPPacket+0xcf8>
							vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8005924:	f001 f834 	bl	8006990 <vReleaseNetworkBufferAndDescriptor>
 8005928:	f8bb 304a 	ldrh.w	r3, [fp, #74]	@ 0x4a
						pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 800592c:	f8cb 507c 	str.w	r5, [fp, #124]	@ 0x7c
					if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||            /* Received a small message. */
 8005930:	429c      	cmp	r4, r3
 8005932:	f0c0 80a6 	bcc.w	8005a82 <xProcessReceivedTCPPacket+0xe4e>
						pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 8005936:	ebb6 0f43 	cmp.w	r6, r3, lsl #1
 800593a:	bfac      	ite	ge
 800593c:	2014      	movge	r0, #20
 800593e:	2002      	movlt	r0, #2
					if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8005940:	4b17      	ldr	r3, [pc, #92]	@ (80059a0 <xProcessReceivedTCPPacket+0xd6c>)
 8005942:	f8ab 0048 	strh.w	r0, [fp, #72]	@ 0x48
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b01      	cmp	r3, #1
 800594a:	f77f ab53 	ble.w	8004ff4 <xProcessReceivedTCPPacket+0x3c0>
 800594e:	f8bb 1024 	ldrh.w	r1, [fp, #36]	@ 0x24
 8005952:	2917      	cmp	r1, #23
 8005954:	f43f ab4e 	beq.w	8004ff4 <xProcessReceivedTCPPacket+0x3c0>
						FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %lu SEQ %lu (len %lu) tmout %u d %lu\n",
 8005958:	f8db 20f4 	ldr.w	r2, [fp, #244]	@ 0xf4
 800595c:	2428      	movs	r4, #40	@ 0x28
 800595e:	f8db 30f0 	ldr.w	r3, [fp, #240]	@ 0xf0
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	f8bb 203c 	ldrh.w	r2, [fp, #60]	@ 0x3c
 8005968:	9401      	str	r4, [sp, #4]
 800596a:	e9cd 0602 	strd	r0, r6, [sp, #8]
 800596e:	f8db 0110 	ldr.w	r0, [fp, #272]	@ 0x110
 8005972:	f8db 4100 	ldr.w	r4, [fp, #256]	@ 0x100
 8005976:	1b00      	subs	r0, r0, r4
 8005978:	9000      	str	r0, [sp, #0]
 800597a:	4813      	ldr	r0, [pc, #76]	@ (80059c8 <xProcessReceivedTCPPacket+0xd94>)
 800597c:	f007 fa5e 	bl	800ce3c <lUDPLoggingPrintf>
				if( pxNetworkBuffer != NULL )
 8005980:	f7ff bb38 	b.w	8004ff4 <xProcessReceivedTCPPacket+0x3c0>
					FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
 8005984:	4903      	ldr	r1, [pc, #12]	@ (8005994 <xProcessReceivedTCPPacket+0xd60>)
 8005986:	4805      	ldr	r0, [pc, #20]	@ (800599c <xProcessReceivedTCPPacket+0xd68>)
 8005988:	e9cd e800 	strd	lr, r8, [sp]
 800598c:	f007 fa56 	bl	800ce3c <lUDPLoggingPrintf>
			if( ( pxSocket->u.xTCP.ucTCPState == ( EventBits_t ) eCONNECT_SYN ) || ( ulReceiveLength != 0UL ) )
 8005990:	e6d3      	b.n	800573a <xProcessReceivedTCPPacket+0xb06>
 8005992:	bf00      	nop
 8005994:	0800f720 	.word	0x0800f720
 8005998:	0800f728 	.word	0x0800f728
 800599c:	0800f9b8 	.word	0x0800f9b8
 80059a0:	2000039c 	.word	0x2000039c
 80059a4:	0800fab8 	.word	0x0800fab8
 80059a8:	0800f098 	.word	0x0800f098
 80059ac:	0800eb4c 	.word	0x0800eb4c
 80059b0:	0800f7bc 	.word	0x0800f7bc
 80059b4:	0800f930 	.word	0x0800f930
 80059b8:	0800f8a8 	.word	0x0800f8a8
 80059bc:	0800f7ec 	.word	0x0800f7ec
 80059c0:	0800fa18 	.word	0x0800fa18
 80059c4:	0800f838 	.word	0x0800f838
 80059c8:	0800fa50 	.word	0x0800fa50
							ucLen -= 2U;
 80059cc:	1e8b      	subs	r3, r1, #2
 80059ce:	b2db      	uxtb	r3, r3
							while( ucLen >= ( uint8_t ) 8U )
 80059d0:	2b07      	cmp	r3, #7
 80059d2:	d958      	bls.n	8005a86 <xProcessReceivedTCPPacket+0xe52>
 80059d4:	f1a1 030a 	sub.w	r3, r1, #10
 80059d8:	f109 020a 	add.w	r2, r9, #10
 80059dc:	f109 0602 	add.w	r6, r9, #2
 80059e0:	f003 0cf8 	and.w	ip, r3, #248	@ 0xf8
 80059e4:	fa5f fe83 	uxtb.w	lr, r3
 80059e8:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80059ec:	4462      	add	r2, ip
							pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 80059ee:	461f      	mov	r7, r3
 80059f0:	920a      	str	r2, [sp, #40]	@ 0x28
 80059f2:	e9cd 4a0b 	strd	r4, sl, [sp, #44]	@ 0x2c
 80059f6:	4674      	mov	r4, lr
 80059f8:	46e2      	mov	sl, ip
 80059fa:	e002      	b.n	8005a02 <xProcessReceivedTCPPacket+0xdce>
							while( ucLen >= ( uint8_t ) 8U )
 80059fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059fe:	429e      	cmp	r6, r3
 8005a00:	d030      	beq.n	8005a64 <xProcessReceivedTCPPacket+0xe30>
			uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 8005a02:	6831      	ldr	r1, [r6, #0]
							while( ucLen >= ( uint8_t ) 8U )
 8005a04:	3608      	adds	r6, #8
 8005a06:	f856 2c04 	ldr.w	r2, [r6, #-4]
			uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 8005a0a:	ba09      	rev	r1, r1
 8005a0c:	9808      	ldr	r0, [sp, #32]
 8005a0e:	ba12      	rev	r2, r2
 8005a10:	f000 fdf6 	bl	8006600 <ulTCPWindowTxSack>
			if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 8005a14:	f8db 2078 	ldr.w	r2, [fp, #120]	@ 0x78
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	d0ee      	beq.n	80059fc <xProcessReceivedTCPPacket+0xdc8>
 8005a1e:	2a00      	cmp	r2, #0
 8005a20:	d0ec      	beq.n	80059fc <xProcessReceivedTCPPacket+0xdc8>
				( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 8005a22:	4610      	mov	r0, r2
 8005a24:	2200      	movs	r2, #0
 8005a26:	930d      	str	r3, [sp, #52]	@ 0x34
 8005a28:	4611      	mov	r1, r2
 8005a2a:	9200      	str	r2, [sp, #0]
 8005a2c:	f7fe fa1a 	bl	8003e64 <uxStreamBufferGet>
							pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
 8005a30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a32:	4658      	mov	r0, fp
 8005a34:	4619      	mov	r1, r3
				pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8005a36:	f8db 3000 	ldr.w	r3, [fp]
 8005a3a:	f043 0202 	orr.w	r2, r3, #2
							pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8005a3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
				pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8005a42:	f8cb 2000 	str.w	r2, [fp]
							pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8005a46:	f043 0302 	orr.w	r3, r3, #2
						if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 8005a4a:	f8db 2030 	ldr.w	r2, [fp, #48]	@ 0x30
 8005a4e:	f012 0f02 	tst.w	r2, #2
							pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8005a52:	bf18      	it	ne
 8005a54:	f8cb 3000 	strne.w	r3, [fp]
						if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8005a58:	f8db 30d0 	ldr.w	r3, [fp, #208]	@ 0xd0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0cd      	beq.n	80059fc <xProcessReceivedTCPPacket+0xdc8>
							pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
 8005a60:	4798      	blx	r3
 8005a62:	e7cb      	b.n	80059fc <xProcessReceivedTCPPacket+0xdc8>
								ucLen -= 8U;
 8005a64:	46a6      	mov	lr, r4
 8005a66:	ebc7 1347 	rsb	r3, r7, r7, lsl #5
 8005a6a:	46d4      	mov	ip, sl
 8005a6c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005a6e:	eb0e 03c3 	add.w	r3, lr, r3, lsl #3
 8005a72:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
								uxIndex += 8U;
 8005a76:	f10c 0c0a 	add.w	ip, ip, #10
								ucLen -= 8U;
 8005a7a:	b2db      	uxtb	r3, r3
				uxIndex += ( size_t ) ucLen;
 8005a7c:	4463      	add	r3, ip
						if( uxResult == 0UL )
 8005a7e:	f7ff ba95 	b.w	8004fac <xProcessReceivedTCPPacket+0x378>
						pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 8005a82:	2002      	movs	r0, #2
 8005a84:	e75c      	b.n	8005940 <xProcessReceivedTCPPacket+0xd0c>
							uxIndex += 2U;
 8005a86:	f04f 0c02 	mov.w	ip, #2
				uxIndex += ( size_t ) ucLen;
 8005a8a:	4463      	add	r3, ip
						if( uxResult == 0UL )
 8005a8c:	f7ff ba8e 	b.w	8004fac <xProcessReceivedTCPPacket+0x378>
						pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 8005a90:	f89b 3040 	ldrb.w	r3, [fp, #64]	@ 0x40
						if( pxSocket->u.xTCP.usCurMSS > uxNewMSS )
 8005a94:	f8bb 104a 	ldrh.w	r1, [fp, #74]	@ 0x4a
						pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 8005a98:	f043 0301 	orr.w	r3, r3, #1
						if( pxSocket->u.xTCP.usCurMSS > uxNewMSS )
 8005a9c:	428e      	cmp	r6, r1
						pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 8005a9e:	f88b 3040 	strb.w	r3, [fp, #64]	@ 0x40
						if( pxSocket->u.xTCP.usCurMSS > uxNewMSS )
 8005aa2:	d316      	bcc.n	8005ad2 <xProcessReceivedTCPPacket+0xe9e>
						pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 8005aa4:	f8db 30e8 	ldr.w	r3, [fp, #232]	@ 0xe8
 8005aa8:	fbb3 f3f6 	udiv	r3, r3, r6
 8005aac:	fb06 f303 	mul.w	r3, r6, r3
 8005ab0:	f8cb 30e8 	str.w	r3, [fp, #232]	@ 0xe8
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f366 030f 	bfi	r3, r6, #0, #16
 8005aba:	f366 431f 	bfi	r3, r6, #16, #16
						pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 8005abe:	f8cb 31a0 	str.w	r3, [fp, #416]	@ 0x1a0
						pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 8005ac2:	f8cb 304a 	str.w	r3, [fp, #74]	@ 0x4a
						if( uxResult == 0UL )
 8005ac6:	e704      	b.n	80058d2 <xProcessReceivedTCPPacket+0xc9e>
		if( ( pxSocket->u.xTCP.ucTCPState >= ( EventBits_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 8005ac8:	f89b 0053 	ldrb.w	r0, [fp, #83]	@ 0x53
 8005acc:	4602      	mov	r2, r0
 8005ace:	f7ff ba06 	b.w	8004ede <xProcessReceivedTCPPacket+0x2aa>
							FreeRTOS_debug_printf( ( "Change mss %d => %lu\n", pxSocket->u.xTCP.usCurMSS, uxNewMSS ) );
 8005ad2:	4632      	mov	r2, r6
 8005ad4:	4801      	ldr	r0, [pc, #4]	@ (8005adc <xProcessReceivedTCPPacket+0xea8>)
 8005ad6:	f007 f9b1 	bl	800ce3c <lUDPLoggingPrintf>
							pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 8005ada:	e7e3      	b.n	8005aa4 <xProcessReceivedTCPPacket+0xe70>
 8005adc:	0800f8c0 	.word	0x0800f8c0

08005ae0 <FreeRTOS_GetTCPStateName>:
			if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 8005ae0:	280c      	cmp	r0, #12
 8005ae2:	d803      	bhi.n	8005aec <FreeRTOS_GetTCPStateName+0xc>
			return pcStateNames[ xIndex ];
 8005ae4:	4b02      	ldr	r3, [pc, #8]	@ (8005af0 <FreeRTOS_GetTCPStateName+0x10>)
 8005ae6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005aea:	4770      	bx	lr
 8005aec:	4801      	ldr	r0, [pc, #4]	@ (8005af4 <FreeRTOS_GetTCPStateName+0x14>)
		}
 8005aee:	4770      	bx	lr
 8005af0:	0800fb98 	.word	0x0800fb98
 8005af4:	0800f49c 	.word	0x0800f49c

08005af8 <xTCPCheckNewClient>:
		BaseType_t xResult = pdFALSE;
		const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );

		/* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
		 * who has access. */
		for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8005af8:	4a12      	ldr	r2, [pc, #72]	@ (8005b44 <xTCPCheckNewClient+0x4c>)
 8005afa:	8c81      	ldrh	r1, [r0, #36]	@ 0x24
			 pxIterator != pxEndTCP;
 8005afc:	f102 0c08 	add.w	ip, r2, #8
	{
 8005b00:	b538      	push	{r3, r4, r5, lr}
		for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8005b02:	68d3      	ldr	r3, [r2, #12]
			 pxIterator != pxEndTCP;
 8005b04:	4563      	cmp	r3, ip
 8005b06:	d01a      	beq.n	8005b3e <xTCPCheckNewClient+0x46>
 8005b08:	fa91 fe91 	rev16.w	lr, r1
 8005b0c:	4605      	mov	r5, r0
 8005b0e:	fa1f fe8e 	uxth.w	lr, lr
 8005b12:	e002      	b.n	8005b1a <xTCPCheckNewClient+0x22>
			 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8005b14:	685b      	ldr	r3, [r3, #4]
			 pxIterator != pxEndTCP;
 8005b16:	4563      	cmp	r3, ip
 8005b18:	d011      	beq.n	8005b3e <xTCPCheckNewClient+0x46>
		{
			if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	4572      	cmp	r2, lr
 8005b1e:	d1f9      	bne.n	8005b14 <xTCPCheckNewClient+0x1c>
			{
				pxFound = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8005b20:	68da      	ldr	r2, [r3, #12]

				if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8005b22:	f892 4027 	ldrb.w	r4, [r2, #39]	@ 0x27
 8005b26:	2c06      	cmp	r4, #6
 8005b28:	d1f4      	bne.n	8005b14 <xTCPCheckNewClient+0x1c>
 8005b2a:	f892 0040 	ldrb.w	r0, [r2, #64]	@ 0x40
 8005b2e:	0780      	lsls	r0, r0, #30
 8005b30:	d5f0      	bpl.n	8005b14 <xTCPCheckNewClient+0x1c>
				{
					pxSocket->u.xTCP.pxPeerSocket = pxFound;
 8005b32:	656a      	str	r2, [r5, #84]	@ 0x54
					FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
 8005b34:	4804      	ldr	r0, [pc, #16]	@ (8005b48 <xTCPCheckNewClient+0x50>)
 8005b36:	f007 f981 	bl	800ce3c <lUDPLoggingPrintf>
					xResult = pdTRUE;
 8005b3a:	2001      	movs	r0, #1
				}
			}
		}

		return xResult;
	}
 8005b3c:	bd38      	pop	{r3, r4, r5, pc}
		BaseType_t xResult = pdFALSE;
 8005b3e:	2000      	movs	r0, #0
	}
 8005b40:	bd38      	pop	{r3, r4, r5, pc}
 8005b42:	bf00      	nop
 8005b44:	20000368 	.word	0x20000368
 8005b48:	0800faf4 	.word	0x0800faf4

08005b4c <prvTCPWindowTxHasSpace>:
		{
			const ListItem_t * pxItem;
			TCPSegment_t * pxReturn;

			/* Returns the head of a queue but it won't be detached. */
			if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8005b4c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005b4e:	b193      	cbz	r3, 8005b76 <prvTCPWindowTxHasSpace+0x2a>
				pxReturn = NULL;
			}
			else
			{
				pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
				pxReturn = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 8005b50:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005b52:	68db      	ldr	r3, [r3, #12]
			/* This function will look if there is new transmission data.  It will
			 * return true if there is data to be sent. */

			pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );

			if( pxSegment == NULL )
 8005b54:	b17b      	cbz	r3, 8005b76 <prvTCPWindowTxHasSpace+0x2a>
			}
			else
			{
				/* How much data is outstanding, i.e. how much data has been sent
				 * but not yet acknowledged ? */
				if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 8005b56:	6a82      	ldr	r2, [r0, #40]	@ 0x28

				/* Subtract this from the peer's space. */
				ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );

				/* See if the next segment may be sent. */
				if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 8005b58:	689b      	ldr	r3, [r3, #8]
		{
 8005b5a:	b430      	push	{r4, r5}
				if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 8005b5c:	6a04      	ldr	r4, [r0, #32]
 8005b5e:	42a2      	cmp	r2, r4
 8005b60:	d30f      	bcc.n	8005b82 <prvTCPWindowTxHasSpace+0x36>

				/* If 'xHasSpace', it looks like the peer has at least space for 1
				 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
				 * limitation of the transmission window (in case of many resends it
				 * may be decreased). */
				if( ( ulTxOutstanding != 0UL ) && ( pxWindow->xSize.ulTxWindowLength < ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 8005b62:	1b12      	subs	r2, r2, r4
 8005b64:	d009      	beq.n	8005b7a <prvTCPWindowTxHasSpace+0x2e>
 8005b66:	18d4      	adds	r4, r2, r3
 8005b68:	6885      	ldr	r5, [r0, #8]
 8005b6a:	42a5      	cmp	r5, r4
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	d204      	bcs.n	8005b7a <prvTCPWindowTxHasSpace+0x2e>
				xHasSpace = pdFALSE;
 8005b70:	2000      	movs	r0, #0
					xHasSpace = pdFALSE;
				}
			}

			return xHasSpace;
		}
 8005b72:	bc30      	pop	{r4, r5}
 8005b74:	4770      	bx	lr
				xHasSpace = pdFALSE;
 8005b76:	4618      	mov	r0, r3
		}
 8005b78:	4770      	bx	lr
				ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 8005b7a:	428a      	cmp	r2, r1
 8005b7c:	bf94      	ite	ls
 8005b7e:	1a89      	subls	r1, r1, r2
 8005b80:	1a49      	subhi	r1, r1, r1
				if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 8005b82:	4299      	cmp	r1, r3
		}
 8005b84:	bc30      	pop	{r4, r5}
				if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 8005b86:	bf34      	ite	cc
 8005b88:	2000      	movcc	r0, #0
 8005b8a:	2001      	movcs	r0, #1
		}
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop

08005b90 <vTCPWindowFree>:
		{
 8005b90:	b538      	push	{r3, r4, r5, lr}
			if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 8005b92:	6a83      	ldr	r3, [r0, #40]	@ 0x28
		{
 8005b94:	4604      	mov	r4, r0
			if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 8005b96:	b113      	cbz	r3, 8005b9e <vTCPWindowFree+0xe>
				( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 8005b98:	3018      	adds	r0, #24
 8005b9a:	f002 fcbd 	bl	8008518 <uxListRemove>
			pxSegment->ulSequenceNumber = 0UL;
 8005b9e:	2300      	movs	r3, #0
			if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 8005ba0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
				( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8005ba2:	f104 052c 	add.w	r5, r4, #44	@ 0x2c
			pxSegment->ulSequenceNumber = 0UL;
 8005ba6:	6023      	str	r3, [r4, #0]
			pxSegment->lDataLength = 0L;
 8005ba8:	60a3      	str	r3, [r4, #8]
			pxSegment->u.ulFlags = 0UL;
 8005baa:	6163      	str	r3, [r4, #20]
			if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 8005bac:	b112      	cbz	r2, 8005bb4 <vTCPWindowFree+0x24>
				( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f002 fcb2 	bl	8008518 <uxListRemove>
		pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 8005bb4:	4b07      	ldr	r3, [pc, #28]	@ (8005bd4 <vTCPWindowFree+0x44>)
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	f1a3 0108 	sub.w	r1, r3, #8
 8005bbc:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
		pxWhere->pxPrevious->pxNext = pxNewListItem;
 8005bc0:	6055      	str	r5, [r2, #4]
		( pxList->uxNumberOfItems )++;
 8005bc2:	f853 2c08 	ldr.w	r2, [r3, #-8]
		pxWhere->pxPrevious = pxNewListItem;
 8005bc6:	609d      	str	r5, [r3, #8]
		( pxList->uxNumberOfItems )++;
 8005bc8:	3201      	adds	r2, #1
		listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8005bca:	63e1      	str	r1, [r4, #60]	@ 0x3c
		( pxList->uxNumberOfItems )++;
 8005bcc:	f843 2c08 	str.w	r2, [r3, #-8]
		}
 8005bd0:	bd38      	pop	{r3, r4, r5, pc}
 8005bd2:	bf00      	nop
 8005bd4:	200003a8 	.word	0x200003a8

08005bd8 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
		static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
												uint32_t ulFirst,
												uint32_t ulLast )
		{
 8005bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			uint32_t ulBytesConfirmed = 0U;
			uint32_t ulSequenceNumber = ulFirst, ulDataLength;
			const ListItem_t * pxIterator;
			const ListItem_t * pxEnd = listGET_END_MARKER( &pxWindow->xTxSegments );
 8005bdc:	f100 0998 	add.w	r9, r0, #152	@ 0x98
			 * RTO is Retransmit timeout
			 *
			 * A Smoothed RTT will increase quickly, but it is conservative when
			 * becoming smaller. */

			pxIterator = listGET_NEXT( pxEnd );
 8005be0:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
		{
 8005be4:	b089      	sub	sp, #36	@ 0x24

			while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8005be6:	45a1      	cmp	r9, r4
 8005be8:	d02a      	beq.n	8005c40 <prvTCPWindowTxCheckAck+0x68>
 8005bea:	f102 3aff 	add.w	sl, r2, #4294967295
 8005bee:	4616      	mov	r6, r2
			if( ( ( b - ( a + 1UL ) ) & 0x80000000UL ) == 0UL )
 8005bf0:	ebaa 0301 	sub.w	r3, sl, r1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	db23      	blt.n	8005c40 <prvTCPWindowTxCheckAck+0x68>
 8005bf8:	4605      	mov	r5, r0
			uint32_t ulSequenceNumber = ulFirst, ulDataLength;
 8005bfa:	460b      	mov	r3, r1
			uint32_t ulBytesConfirmed = 0U;
 8005bfc:	f04f 0800 	mov.w	r8, #0
 8005c00:	9106      	str	r1, [sp, #24]
			{
				xDoUnlink = pdFALSE;
				pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8005c02:	68e7      	ldr	r7, [r4, #12]

				/* Move to the next item because the current item might get
				 * removed. */
				pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8005c04:	6864      	ldr	r4, [r4, #4]

				/* Continue if this segment does not fall within the ACK'd range. */
				if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 8005c06:	683a      	ldr	r2, [r7, #0]
			if( ( ( a - ( b + 1UL ) ) & 0x80000000UL ) == 0UL )
 8005c08:	43d1      	mvns	r1, r2
 8005c0a:	42d9      	cmn	r1, r3
 8005c0c:	d409      	bmi.n	8005c22 <prvTCPWindowTxCheckAck+0x4a>
			while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8005c0e:	45a1      	cmp	r9, r4
 8005c10:	d003      	beq.n	8005c1a <prvTCPWindowTxCheckAck+0x42>
			if( ( ( b - ( a + 1UL ) ) & 0x80000000UL ) == 0UL )
 8005c12:	ebaa 0203 	sub.w	r2, sl, r3
 8005c16:	2a00      	cmp	r2, #0
 8005c18:	daf3      	bge.n	8005c02 <prvTCPWindowTxCheckAck+0x2a>

				ulSequenceNumber += ulDataLength;
			}

			return ulBytesConfirmed;
		}
 8005c1a:	4640      	mov	r0, r8
 8005c1c:	b009      	add	sp, #36	@ 0x24
 8005c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d1f9      	bne.n	8005c1a <prvTCPWindowTxCheckAck+0x42>
				ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	4611      	mov	r1, r2
 8005c2a:	9205      	str	r2, [sp, #20]
				if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8005c2c:	7dba      	ldrb	r2, [r7, #22]
					if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 8005c2e:	eb01 0b03 	add.w	fp, r1, r3
				if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8005c32:	0791      	lsls	r1, r2, #30
 8005c34:	d50a      	bpl.n	8005c4c <prvTCPWindowTxCheckAck+0x74>
				if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8005c36:	6a2a      	ldr	r2, [r5, #32]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d034      	beq.n	8005ca6 <prvTCPWindowTxCheckAck+0xce>
				ulSequenceNumber += ulDataLength;
 8005c3c:	465b      	mov	r3, fp
 8005c3e:	e7e6      	b.n	8005c0e <prvTCPWindowTxCheckAck+0x36>
			uint32_t ulBytesConfirmed = 0U;
 8005c40:	f04f 0800 	mov.w	r8, #0
		}
 8005c44:	4640      	mov	r0, r8
 8005c46:	b009      	add	sp, #36	@ 0x24
 8005c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( ( ( a - ( b + 1UL ) ) & 0x80000000UL ) == 0UL )
 8005c4c:	ebab 0106 	sub.w	r1, fp, r6
 8005c50:	2901      	cmp	r1, #1
 8005c52:	d414      	bmi.n	8005c7e <prvTCPWindowTxCheckAck+0xa6>
								uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 8005c54:	69ea      	ldr	r2, [r5, #28]
								FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %lu - %lu Partial sequence number %lu - %lu\n",
 8005c56:	4832      	ldr	r0, [pc, #200]	@ (8005d20 <prvTCPWindowTxCheckAck+0x148>)
								uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 8005c58:	1a99      	subs	r1, r3, r2
								FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %lu - %lu Partial sequence number %lu - %lu\n",
 8005c5a:	1ab6      	subs	r6, r6, r2
 8005c5c:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8005c60:	9a05      	ldr	r2, [sp, #20]
 8005c62:	9600      	str	r6, [sp, #0]
 8005c64:	440a      	add	r2, r1
 8005c66:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8005c6a:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	@ 0xb8
 8005c6e:	f8b5 10ba 	ldrh.w	r1, [r5, #186]	@ 0xba
 8005c72:	f007 f8e3 	bl	800ce3c <lUDPLoggingPrintf>
		}
 8005c76:	4640      	mov	r0, r8
 8005c78:	b009      	add	sp, #36	@ 0x24
 8005c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					pxSegment->u.bits.bAcked = pdTRUE;
 8005c7e:	f042 0202 	orr.w	r2, r2, #2
 8005c82:	75ba      	strb	r2, [r7, #22]
					if( ( pxSegment->u.bits.ucTransmitCount == 1U ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 8005c84:	7d3a      	ldrb	r2, [r7, #20]
 8005c86:	2a01      	cmp	r2, #1
 8005c88:	d029      	beq.n	8005cde <prvTCPWindowTxCheckAck+0x106>
				if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8005c8a:	6a2a      	ldr	r2, [r5, #32]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d00a      	beq.n	8005ca6 <prvTCPWindowTxCheckAck+0xce>
				if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 8005c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0d2      	beq.n	8005c3c <prvTCPWindowTxCheckAck+0x64>
					( void ) uxListRemove( &pxSegment->xQueueItem );
 8005c96:	f107 0018 	add.w	r0, r7, #24
 8005c9a:	f002 fc3d 	bl	8008518 <uxListRemove>
				ulSequenceNumber += ulDataLength;
 8005c9e:	465b      	mov	r3, fp
 8005ca0:	e7b5      	b.n	8005c0e <prvTCPWindowTxCheckAck+0x36>
				if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d1f4      	bne.n	8005c90 <prvTCPWindowTxCheckAck+0xb8>
					if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8005ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8005d24 <prvTCPWindowTxCheckAck+0x14c>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	dd03      	ble.n	8005cb6 <prvTCPWindowTxCheckAck+0xde>
 8005cae:	f8b5 30b8 	ldrh.w	r3, [r5, #184]	@ 0xb8
 8005cb2:	2b17      	cmp	r3, #23
 8005cb4:	d108      	bne.n	8005cc8 <prvTCPWindowTxCheckAck+0xf0>
					pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8005cb6:	9b05      	ldr	r3, [sp, #20]
					vTCPWindowFree( pxSegment );
 8005cb8:	4638      	mov	r0, r7
					pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8005cba:	441a      	add	r2, r3
					ulBytesConfirmed += ulDataLength;
 8005cbc:	4498      	add	r8, r3
					pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8005cbe:	622a      	str	r2, [r5, #32]
					vTCPWindowFree( pxSegment );
 8005cc0:	f7ff ff66 	bl	8005b90 <vTCPWindowFree>
				ulSequenceNumber += ulDataLength;
 8005cc4:	465b      	mov	r3, fp
 8005cc6:	e7a2      	b.n	8005c0e <prvTCPWindowTxCheckAck+0x36>
						FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck: %lu - %lu Ready sequence number %lu\n",
 8005cc8:	69e9      	ldr	r1, [r5, #28]
 8005cca:	9806      	ldr	r0, [sp, #24]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	1a72      	subs	r2, r6, r1
 8005cd0:	1a5b      	subs	r3, r3, r1
 8005cd2:	1a41      	subs	r1, r0, r1
 8005cd4:	4814      	ldr	r0, [pc, #80]	@ (8005d28 <prvTCPWindowTxCheckAck+0x150>)
 8005cd6:	f007 f8b1 	bl	800ce3c <lUDPLoggingPrintf>
 8005cda:	6a2a      	ldr	r2, [r5, #32]
 8005cdc:	e7eb      	b.n	8005cb6 <prvTCPWindowTxCheckAck+0xde>
					if( ( pxSegment->u.bits.ucTransmitCount == 1U ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 8005cde:	455e      	cmp	r6, fp
 8005ce0:	d1d3      	bne.n	8005c8a <prvTCPWindowTxCheckAck+0xb2>
		return( ( xTaskGetTickCount() - ( ( TickType_t ) pxTimer->ulBorn ) ) * portTICK_PERIOD_MS );
 8005ce2:	9307      	str	r3, [sp, #28]
 8005ce4:	f003 f9ac 	bl	8009040 <xTaskGetTickCount>
 8005ce8:	693a      	ldr	r2, [r7, #16]
						if( pxWindow->lSRTT >= mS )
 8005cea:	9b07      	ldr	r3, [sp, #28]
		return( ( xTaskGetTickCount() - ( ( TickType_t ) pxTimer->ulBorn ) ) * portTICK_PERIOD_MS );
 8005cec:	1a81      	subs	r1, r0, r2
						if( pxWindow->lSRTT >= mS )
 8005cee:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8005cf0:	428a      	cmp	r2, r1
 8005cf2:	db0e      	blt.n	8005d12 <prvTCPWindowTxCheckAck+0x13a>
							pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8005cf4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8005cf8:	1851      	adds	r1, r2, r1
 8005cfa:	bf48      	it	mi
 8005cfc:	3107      	addmi	r1, #7
 8005cfe:	10c9      	asrs	r1, r1, #3
						if( pxWindow->lSRTT < winSRTT_CAP_mS )
 8005d00:	2931      	cmp	r1, #49	@ 0x31
				if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8005d02:	6a2a      	ldr	r2, [r5, #32]
 8005d04:	63a9      	str	r1, [r5, #56]	@ 0x38
						if( pxWindow->lSRTT < winSRTT_CAP_mS )
 8005d06:	dccc      	bgt.n	8005ca2 <prvTCPWindowTxCheckAck+0xca>
							pxWindow->lSRTT = winSRTT_CAP_mS;
 8005d08:	2132      	movs	r1, #50	@ 0x32
				if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8005d0a:	4293      	cmp	r3, r2
							pxWindow->lSRTT = winSRTT_CAP_mS;
 8005d0c:	63a9      	str	r1, [r5, #56]	@ 0x38
				if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8005d0e:	d1bf      	bne.n	8005c90 <prvTCPWindowTxCheckAck+0xb8>
 8005d10:	e7c9      	b.n	8005ca6 <prvTCPWindowTxCheckAck+0xce>
							pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 8005d12:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005d16:	1851      	adds	r1, r2, r1
 8005d18:	bf48      	it	mi
 8005d1a:	3103      	addmi	r1, #3
 8005d1c:	1089      	asrs	r1, r1, #2
 8005d1e:	e7ef      	b.n	8005d00 <prvTCPWindowTxCheckAck+0x128>
 8005d20:	0800fbcc 	.word	0x0800fbcc
 8005d24:	2000039c 	.word	0x2000039c
 8005d28:	0800fc18 	.word	0x0800fc18

08005d2c <xTCPWindowNew>:
		{
 8005d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 8005d30:	f8df a0cc 	ldr.w	sl, [pc, #204]	@ 8005e00 <xTCPWindowNew+0xd4>
		{
 8005d34:	461e      	mov	r6, r3
			if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 8005d36:	f8da 4000 	ldr.w	r4, [sl]
 8005d3a:	2c00      	cmp	r4, #0
 8005d3c:	d049      	beq.n	8005dd2 <xTCPWindowNew+0xa6>
				pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 8005d3e:	f8da 700c 	ldr.w	r7, [sl, #12]
				pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 8005d42:	4605      	mov	r5, r0
 8005d44:	4689      	mov	r9, r1
 8005d46:	4690      	mov	r8, r2
 8005d48:	68fc      	ldr	r4, [r7, #12]
				configASSERT( pxSegment != NULL );
 8005d4a:	2c00      	cmp	r4, #0
 8005d4c:	d04b      	beq.n	8005de6 <xTCPWindowNew+0xba>
				( void ) uxListRemove( pxItem );
 8005d4e:	4638      	mov	r0, r7
 8005d50:	f002 fbe2 	bl	8008518 <uxListRemove>
				if( xIsForRx != 0 )
 8005d54:	bb46      	cbnz	r6, 8005da8 <xTCPWindowNew+0x7c>
		( pxList->uxNumberOfItems )++;
 8005d56:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
			vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8005d5a:	f105 0190 	add.w	r1, r5, #144	@ 0x90
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8005d5e:	f8d5 20a0 	ldr.w	r2, [r5, #160]	@ 0xa0
			vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8005d62:	f105 0098 	add.w	r0, r5, #152	@ 0x98
		( pxList->uxNumberOfItems )++;
 8005d66:	3301      	adds	r3, #1
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8005d68:	60ba      	str	r2, [r7, #8]
		pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 8005d6a:	6078      	str	r0, [r7, #4]
		pxWhere->pxPrevious->pxNext = pxNewListItem;
 8005d6c:	6057      	str	r7, [r2, #4]
		pxWhere->pxPrevious = pxNewListItem;
 8005d6e:	f8c5 70a0 	str.w	r7, [r5, #160]	@ 0xa0
		listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8005d72:	6139      	str	r1, [r7, #16]
		( pxList->uxNumberOfItems )++;
 8005d74:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
		pxTimer->ulBorn = xTaskGetTickCount();
 8005d78:	f003 f962 	bl	8009040 <xTaskGetTickCount>
				pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8005d7c:	f04f 0300 	mov.w	r3, #0
						if( xLowestLength > xLength )
 8005d80:	4a1c      	ldr	r2, [pc, #112]	@ (8005df4 <xTCPWindowNew+0xc8>)
				pxSegment->u.ulFlags = 0;
 8005d82:	2100      	movs	r1, #0
		pxTimer->ulBorn = xTaskGetTickCount();
 8005d84:	6120      	str	r0, [r4, #16]
				pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8005d86:	f366 0382 	bfi	r3, r6, #2, #1
		}
 8005d8a:	4620      	mov	r0, r4
				pxSegment->u.ulFlags = 0;
 8005d8c:	6161      	str	r1, [r4, #20]
				pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8005d8e:	75a3      	strb	r3, [r4, #22]
						UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 8005d90:	f8da 3000 	ldr.w	r3, [sl]
						if( xLowestLength > xLength )
 8005d94:	6811      	ldr	r1, [r2, #0]
				pxSegment->ulSequenceNumber = ulSequenceNumber;
 8005d96:	f8c4 9000 	str.w	r9, [r4]
						if( xLowestLength > xLength )
 8005d9a:	4299      	cmp	r1, r3
				pxSegment->lMaxLength = lCount;
 8005d9c:	e9c4 8801 	strd	r8, r8, [r4, #4]
							xLowestLength = xLength;
 8005da0:	bf88      	it	hi
 8005da2:	6013      	strhi	r3, [r2, #0]
		}
 8005da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		( pxList->uxNumberOfItems )++;
 8005da8:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
			vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8005dac:	f105 01a4 	add.w	r1, r5, #164	@ 0xa4
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8005db0:	f8d5 20b4 	ldr.w	r2, [r5, #180]	@ 0xb4
			vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8005db4:	f105 00ac 	add.w	r0, r5, #172	@ 0xac
		( pxList->uxNumberOfItems )++;
 8005db8:	3301      	adds	r3, #1
				pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8005dba:	2601      	movs	r6, #1
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8005dbc:	60ba      	str	r2, [r7, #8]
		pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 8005dbe:	6078      	str	r0, [r7, #4]
		pxWhere->pxPrevious->pxNext = pxNewListItem;
 8005dc0:	6057      	str	r7, [r2, #4]
		pxWhere->pxPrevious = pxNewListItem;
 8005dc2:	f8c5 70b4 	str.w	r7, [r5, #180]	@ 0xb4
		listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8005dc6:	6139      	str	r1, [r7, #16]
		( pxList->uxNumberOfItems )++;
 8005dc8:	f8c5 30a4 	str.w	r3, [r5, #164]	@ 0xa4
		pxTimer->ulBorn = xTaskGetTickCount();
 8005dcc:	f003 f938 	bl	8009040 <xTaskGetTickCount>
				pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8005dd0:	e7d4      	b.n	8005d7c <xTCPWindowNew+0x50>
				FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	4808      	ldr	r0, [pc, #32]	@ (8005df8 <xTCPWindowNew+0xcc>)
 8005dd6:	bf0c      	ite	eq
 8005dd8:	2154      	moveq	r1, #84	@ 0x54
 8005dda:	2152      	movne	r1, #82	@ 0x52
 8005ddc:	f007 f82e 	bl	800ce3c <lUDPLoggingPrintf>
		}
 8005de0:	4620      	mov	r0, r4
 8005de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				configASSERT( pxSegment != NULL );
 8005de6:	f240 2136 	movw	r1, #566	@ 0x236
 8005dea:	4804      	ldr	r0, [pc, #16]	@ (8005dfc <xTCPWindowNew+0xd0>)
 8005dec:	f7fb f832 	bl	8000e54 <vAssertCalled>
 8005df0:	e7ad      	b.n	8005d4e <xTCPWindowNew+0x22>
 8005df2:	bf00      	nop
 8005df4:	20000010 	.word	0x20000010
 8005df8:	0800fc58 	.word	0x0800fc58
 8005dfc:	0800fc88 	.word	0x0800fc88
 8005e00:	200003a0 	.word	0x200003a0

08005e04 <xTCPWindowRxEmpty>:
		{
 8005e04:	b508      	push	{r3, lr}
			if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 8005e06:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8005e0a:	b10b      	cbz	r3, 8005e10 <xTCPWindowRxEmpty+0xc>
				xReturn = pdFALSE;
 8005e0c:	2000      	movs	r0, #0
		}
 8005e0e:	bd08      	pop	{r3, pc}
			else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 8005e10:	6903      	ldr	r3, [r0, #16]
 8005e12:	6982      	ldr	r2, [r0, #24]
		if( ( ( a - b ) & 0x80000000UL ) == 0UL )
 8005e14:	1a99      	subs	r1, r3, r2
 8005e16:	2900      	cmp	r1, #0
 8005e18:	db01      	blt.n	8005e1e <xTCPWindowRxEmpty+0x1a>
				xReturn = pdTRUE;
 8005e1a:	2001      	movs	r0, #1
		}
 8005e1c:	bd08      	pop	{r3, pc}
				FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %lu highest %lu (empty)\n",
 8005e1e:	68c1      	ldr	r1, [r0, #12]
 8005e20:	4802      	ldr	r0, [pc, #8]	@ (8005e2c <xTCPWindowRxEmpty+0x28>)
 8005e22:	1a52      	subs	r2, r2, r1
 8005e24:	1a59      	subs	r1, r3, r1
 8005e26:	f007 f809 	bl	800ce3c <lUDPLoggingPrintf>
				xReturn = pdFALSE;
 8005e2a:	e7ef      	b.n	8005e0c <xTCPWindowRxEmpty+0x8>
 8005e2c:	0800fcc0 	.word	0x0800fcc0

08005e30 <vTCPWindowDestroy>:
		{
 8005e30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
				if( listLIST_IS_INITIALISED( pxSegments ) )
 8005e34:	f8d0 3098 	ldr.w	r3, [r0, #152]	@ 0x98
		{
 8005e38:	4682      	mov	sl, r0
				if( listLIST_IS_INITIALISED( pxSegments ) )
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	d037      	beq.n	8005eae <vTCPWindowDestroy+0x7e>
 8005e3e:	f8da 30ac 	ldr.w	r3, [sl, #172]	@ 0xac
 8005e42:	3301      	adds	r3, #1
 8005e44:	d001      	beq.n	8005e4a <vTCPWindowDestroy+0x1a>
		}
 8005e46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8005e4a:	f8da 30a4 	ldr.w	r3, [sl, #164]	@ 0xa4
					pxSegments = &( pxWindow->xRxSegments );
 8005e4e:	f10a 0ba4 	add.w	fp, sl, #164	@ 0xa4
					while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8005e52:	f04f 0901 	mov.w	r9, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0f5      	beq.n	8005e46 <vTCPWindowDestroy+0x16>
 8005e5a:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 8005ec0 <vTCPWindowDestroy+0x90>
			pxSegment->ulSequenceNumber = 0UL;
 8005e5e:	2700      	movs	r7, #0
 8005e60:	f1a8 0508 	sub.w	r5, r8, #8
						pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 8005e64:	f8db 300c 	ldr.w	r3, [fp, #12]
 8005e68:	68dc      	ldr	r4, [r3, #12]
			if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 8005e6a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
				( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 8005e6c:	f104 0018 	add.w	r0, r4, #24
				( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8005e70:	f104 062c 	add.w	r6, r4, #44	@ 0x2c
			if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 8005e74:	b10b      	cbz	r3, 8005e7a <vTCPWindowDestroy+0x4a>
				( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 8005e76:	f002 fb4f 	bl	8008518 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 8005e7a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
				( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8005e7c:	4630      	mov	r0, r6
			pxSegment->ulSequenceNumber = 0UL;
 8005e7e:	6027      	str	r7, [r4, #0]
			pxSegment->lDataLength = 0L;
 8005e80:	60a7      	str	r7, [r4, #8]
			pxSegment->u.ulFlags = 0UL;
 8005e82:	6167      	str	r7, [r4, #20]
			if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 8005e84:	b10b      	cbz	r3, 8005e8a <vTCPWindowDestroy+0x5a>
				( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8005e86:	f002 fb47 	bl	8008518 <uxListRemove>
		( pxList->uxNumberOfItems )++;
 8005e8a:	682b      	ldr	r3, [r5, #0]
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8005e8c:	692a      	ldr	r2, [r5, #16]
		( pxList->uxNumberOfItems )++;
 8005e8e:	3301      	adds	r3, #1
		pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 8005e90:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8005e94:	6362      	str	r2, [r4, #52]	@ 0x34
		( pxList->uxNumberOfItems )++;
 8005e96:	602b      	str	r3, [r5, #0]
					while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8005e98:	f8db 3000 	ldr.w	r3, [fp]
		pxWhere->pxPrevious->pxNext = pxNewListItem;
 8005e9c:	6056      	str	r6, [r2, #4]
		pxWhere->pxPrevious = pxNewListItem;
 8005e9e:	612e      	str	r6, [r5, #16]
		listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8005ea0:	63e5      	str	r5, [r4, #60]	@ 0x3c
					while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1de      	bne.n	8005e64 <vTCPWindowDestroy+0x34>
			for( xRound = 0; xRound < 2; xRound++ )
 8005ea6:	f1b9 0f00 	cmp.w	r9, #0
 8005eaa:	d0c8      	beq.n	8005e3e <vTCPWindowDestroy+0xe>
 8005eac:	e7cb      	b.n	8005e46 <vTCPWindowDestroy+0x16>
					while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8005eae:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
					pxSegments = &( pxWindow->xTxSegments );
 8005eb2:	f100 0b90 	add.w	fp, r0, #144	@ 0x90
					while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0c1      	beq.n	8005e3e <vTCPWindowDestroy+0xe>
			for( xRound = 0; xRound < 2; xRound++ )
 8005eba:	f04f 0900 	mov.w	r9, #0
 8005ebe:	e7cc      	b.n	8005e5a <vTCPWindowDestroy+0x2a>
 8005ec0:	200003a8 	.word	0x200003a8

08005ec4 <vTCPWindowCreate>:
	{
 8005ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				if( xTCPSegments == NULL )
 8005ec8:	4d40      	ldr	r5, [pc, #256]	@ (8005fcc <vTCPWindowCreate+0x108>)
	{
 8005eca:	b083      	sub	sp, #12
 8005ecc:	4688      	mov	r8, r1
 8005ece:	4607      	mov	r7, r0
				if( xTCPSegments == NULL )
 8005ed0:	6829      	ldr	r1, [r5, #0]
	{
 8005ed2:	4692      	mov	sl, r2
 8005ed4:	469b      	mov	fp, r3
 8005ed6:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
				if( xTCPSegments == NULL )
 8005eda:	2900      	cmp	r1, #0
 8005edc:	d045      	beq.n	8005f6a <vTCPWindowCreate+0xa6>
				vListInitialise( &( pxWindow->xTxSegments ) );
 8005ede:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8005ee2:	f002 fae3 	bl	80084ac <vListInitialise>
				vListInitialise( &( pxWindow->xRxSegments ) );
 8005ee6:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8005eea:	f002 fadf 	bl	80084ac <vListInitialise>
				vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 8005eee:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8005ef2:	f002 fadb 	bl	80084ac <vListInitialise>
				vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 8005ef6:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8005efa:	f002 fad7 	bl	80084ac <vListInitialise>
				vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 8005efe:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8005f02:	f002 fad3 	bl	80084ac <vListInitialise>
		if( xTCPWindowLoggingLevel != 0 )
 8005f06:	4a32      	ldr	r2, [pc, #200]	@ (8005fd0 <vTCPWindowCreate+0x10c>)
 8005f08:	6812      	ldr	r2, [r2, #0]
 8005f0a:	bb42      	cbnz	r2, 8005f5e <vTCPWindowCreate+0x9a>
		pxWindow->u.ulFlags = 0UL;
 8005f0c:	2201      	movs	r2, #1
		if( ulMSS != 0UL )
 8005f0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
		pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 8005f10:	e9c7 8a01 	strd	r8, sl, [r7, #4]
		pxWindow->u.ulFlags = 0UL;
 8005f14:	603a      	str	r2, [r7, #0]
		if( ulMSS != 0UL )
 8005f16:	b193      	cbz	r3, 8005f3e <vTCPWindowCreate+0x7a>
			if( pxWindow->usMSSInit != 0U )
 8005f18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f1c:	b10a      	cbz	r2, 8005f22 <vTCPWindowCreate+0x5e>
				pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 8005f1e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
			if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 8005f22:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	@ 0xbc
 8005f26:	b112      	cbz	r2, 8005f2e <vTCPWindowCreate+0x6a>
 8005f28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d207      	bcs.n	8005f3e <vTCPWindowCreate+0x7a>
				pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 8005f2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f30:	fbb8 f8f3 	udiv	r8, r8, r3
 8005f34:	fb03 f208 	mul.w	r2, r3, r8
				pxWindow->usMSS = ( uint16_t ) ulMSS;
 8005f38:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
				pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 8005f3c:	607a      	str	r2, [r7, #4]
		pxWindow->lSRTT = l500ms;
 8005f3e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
		pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 8005f42:	f8c7 b018 	str.w	fp, [r7, #24]
		pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 8005f46:	f8c7 9034 	str.w	r9, [r7, #52]	@ 0x34
		pxWindow->lSRTT = l500ms;
 8005f4a:	63ba      	str	r2, [r7, #56]	@ 0x38
		pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 8005f4c:	e9c7 bb03 	strd	fp, fp, [r7, #12]
		pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 8005f50:	e9c7 9907 	strd	r9, r9, [r7, #28]
		pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 8005f54:	e9c7 990a 	strd	r9, r9, [r7, #40]	@ 0x28
	}
 8005f58:	b003      	add	sp, #12
 8005f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			FreeRTOS_debug_printf( ( "vTCPWindowCreate: for WinLen = Rx/Tx: %lu/%lu\n",
 8005f5e:	4652      	mov	r2, sl
 8005f60:	4641      	mov	r1, r8
 8005f62:	481c      	ldr	r0, [pc, #112]	@ (8005fd4 <vTCPWindowCreate+0x110>)
 8005f64:	f006 ff6a 	bl	800ce3c <lUDPLoggingPrintf>
 8005f68:	e7d0      	b.n	8005f0c <vTCPWindowCreate+0x48>
			vListInitialise( &xSegmentList );
 8005f6a:	4e1b      	ldr	r6, [pc, #108]	@ (8005fd8 <vTCPWindowCreate+0x114>)
 8005f6c:	9101      	str	r1, [sp, #4]
 8005f6e:	4630      	mov	r0, r6
 8005f70:	f002 fa9c 	bl	80084ac <vListInitialise>
			xTCPSegments = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 8005f74:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005f78:	f003 ffae 	bl	8009ed8 <pvPortMalloc>
			if( xTCPSegments == NULL )
 8005f7c:	9901      	ldr	r1, [sp, #4]
			xTCPSegments = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 8005f7e:	4604      	mov	r4, r0
 8005f80:	6028      	str	r0, [r5, #0]
			if( xTCPSegments == NULL )
 8005f82:	b1e8      	cbz	r0, 8005fc0 <vTCPWindowCreate+0xfc>
				( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 8005f84:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005f88:	f007 f9ee 	bl	800d368 <memset>
				for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8005f8c:	f241 012c 	movw	r1, #4140	@ 0x102c
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8005f90:	6935      	ldr	r5, [r6, #16]
 8005f92:	f106 0008 	add.w	r0, r6, #8
 8005f96:	4421      	add	r1, r4
 8005f98:	342c      	adds	r4, #44	@ 0x2c
					listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8005f9a:	f1a4 022c 	sub.w	r2, r4, #44	@ 0x2c
		pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 8005f9e:	6060      	str	r0, [r4, #4]
					listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8005fa0:	60e2      	str	r2, [r4, #12]
					listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8005fa2:	f844 2c08 	str.w	r2, [r4, #-8]
		( pxList->uxNumberOfItems )++;
 8005fa6:	6832      	ldr	r2, [r6, #0]
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8005fa8:	60a5      	str	r5, [r4, #8]
		pxWhere->pxPrevious->pxNext = pxNewListItem;
 8005faa:	606c      	str	r4, [r5, #4]
		pxWhere->pxPrevious = pxNewListItem;
 8005fac:	4625      	mov	r5, r4
 8005fae:	6134      	str	r4, [r6, #16]
				for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8005fb0:	3440      	adds	r4, #64	@ 0x40
		listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8005fb2:	f844 6c30 	str.w	r6, [r4, #-48]
		( pxList->uxNumberOfItems )++;
 8005fb6:	3201      	adds	r2, #1
				for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8005fb8:	428c      	cmp	r4, r1
		( pxList->uxNumberOfItems )++;
 8005fba:	6032      	str	r2, [r6, #0]
				for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8005fbc:	d1ed      	bne.n	8005f9a <vTCPWindowCreate+0xd6>
 8005fbe:	e78e      	b.n	8005ede <vTCPWindowCreate+0x1a>
				FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
 8005fc0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005fc4:	4805      	ldr	r0, [pc, #20]	@ (8005fdc <vTCPWindowCreate+0x118>)
 8005fc6:	f006 ff39 	bl	800ce3c <lUDPLoggingPrintf>
				xReturn = pdFAIL;
 8005fca:	e788      	b.n	8005ede <vTCPWindowCreate+0x1a>
 8005fcc:	200003b4 	.word	0x200003b4
 8005fd0:	2000039c 	.word	0x2000039c
 8005fd4:	0800fd14 	.word	0x0800fd14
 8005fd8:	200003a0 	.word	0x200003a0
 8005fdc:	0800fcf0 	.word	0x0800fcf0

08005fe0 <vTCPWindowInit>:
	{
 8005fe0:	b410      	push	{r4}
		pxWindow->u.ulFlags = 0UL;
 8005fe2:	2401      	movs	r4, #1
 8005fe4:	6004      	str	r4, [r0, #0]
		if( ulMSS != 0UL )
 8005fe6:	b18b      	cbz	r3, 800600c <vTCPWindowInit+0x2c>
			if( pxWindow->usMSSInit != 0U )
 8005fe8:	f8b0 40be 	ldrh.w	r4, [r0, #190]	@ 0xbe
 8005fec:	b10c      	cbz	r4, 8005ff2 <vTCPWindowInit+0x12>
				pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 8005fee:	f8a0 30be 	strh.w	r3, [r0, #190]	@ 0xbe
			if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 8005ff2:	f8b0 40bc 	ldrh.w	r4, [r0, #188]	@ 0xbc
 8005ff6:	b10c      	cbz	r4, 8005ffc <vTCPWindowInit+0x1c>
 8005ff8:	429c      	cmp	r4, r3
 8005ffa:	d907      	bls.n	800600c <vTCPWindowInit+0x2c>
				pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 8005ffc:	6844      	ldr	r4, [r0, #4]
				pxWindow->usMSS = ( uint16_t ) ulMSS;
 8005ffe:	f8a0 30bc 	strh.w	r3, [r0, #188]	@ 0xbc
				pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 8006002:	fbb4 fcf3 	udiv	ip, r4, r3
 8006006:	fb03 f30c 	mul.w	r3, r3, ip
 800600a:	6043      	str	r3, [r0, #4]
		pxWindow->lSRTT = l500ms;
 800600c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
	}
 8006010:	f85d 4b04 	ldr.w	r4, [sp], #4
		pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 8006014:	6181      	str	r1, [r0, #24]
		pxWindow->lSRTT = l500ms;
 8006016:	6383      	str	r3, [r0, #56]	@ 0x38
		pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 8006018:	6342      	str	r2, [r0, #52]	@ 0x34
		pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 800601a:	e9c0 1103 	strd	r1, r1, [r0, #12]
		pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 800601e:	e9c0 2207 	strd	r2, r2, [r0, #28]
		pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 8006022:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
	}
 8006026:	4770      	bx	lr

08006028 <lTCPWindowRxCheck>:
		{
 8006028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602c:	460e      	mov	r6, r1
			pxWindow->ucOptionLength = 0U;
 800602e:	2100      	movs	r1, #0
		{
 8006030:	4607      	mov	r7, r0
 8006032:	b085      	sub	sp, #20
			pxWindow->ucOptionLength = 0U;
 8006034:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
		{
 8006038:	4690      	mov	r8, r2
			ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 800603a:	f8d7 9010 	ldr.w	r9, [r7, #16]
			pxWindow->ulUserDataLength = 0UL;
 800603e:	6301      	str	r1, [r0, #48]	@ 0x30
			if( ulCurrentSequenceNumber == ulSequenceNumber )
 8006040:	45b1      	cmp	r9, r6
 8006042:	d064      	beq.n	800610e <lTCPWindowRxCheck+0xe6>
			else if( ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 8006044:	1c71      	adds	r1, r6, #1
 8006046:	4549      	cmp	r1, r9
 8006048:	d037      	beq.n	80060ba <lTCPWindowRxCheck+0x92>
				ulLast = ulSequenceNumber + ulLength;
 800604a:	18b4      	adds	r4, r6, r2
				ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 800604c:	eba4 0109 	sub.w	r1, r4, r9
				if( lDistance <= 0 )
 8006050:	2900      	cmp	r1, #0
 8006052:	dd32      	ble.n	80060ba <lTCPWindowRxCheck+0x92>
				else if( lDistance > ( int32_t ) ulSpace )
 8006054:	428b      	cmp	r3, r1
 8006056:	f2c0 80ed 	blt.w	8006234 <lTCPWindowRxCheck+0x20c>
			for( pxIterator = listGET_NEXT( pxEnd );
 800605a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
			const ListItem_t * pxEnd = listGET_END_MARKER( &pxWindow->xRxSegments );
 800605e:	f107 05ac 	add.w	r5, r7, #172	@ 0xac
				 pxIterator != pxEnd;
 8006062:	42a8      	cmp	r0, r5
 8006064:	d00c      	beq.n	8006080 <lTCPWindowRxCheck+0x58>
			for( pxIterator = listGET_NEXT( pxEnd );
 8006066:	4603      	mov	r3, r0
 8006068:	e002      	b.n	8006070 <lTCPWindowRxCheck+0x48>
				 pxIterator = listGET_NEXT( pxIterator ) )
 800606a:	685b      	ldr	r3, [r3, #4]
				 pxIterator != pxEnd;
 800606c:	42ab      	cmp	r3, r5
 800606e:	d007      	beq.n	8006080 <lTCPWindowRxCheck+0x58>
				pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8006070:	68da      	ldr	r2, [r3, #12]
				if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 8006072:	6811      	ldr	r1, [r2, #0]
 8006074:	428c      	cmp	r4, r1
 8006076:	d1f8      	bne.n	800606a <lTCPWindowRxCheck+0x42>
						ulLast += ( uint32_t ) pxFound->lDataLength;
 8006078:	6893      	ldr	r3, [r2, #8]
				 pxIterator != pxEnd;
 800607a:	42a8      	cmp	r0, r5
						ulLast += ( uint32_t ) pxFound->lDataLength;
 800607c:	441c      	add	r4, r3
				 pxIterator != pxEnd;
 800607e:	d1f2      	bne.n	8006066 <lTCPWindowRxCheck+0x3e>
					if( xTCPWindowLoggingLevel >= 1 )
 8006080:	f8df a1c0 	ldr.w	sl, [pc, #448]	@ 8006244 <lTCPWindowRxCheck+0x21c>
 8006084:	f8da 3000 	ldr.w	r3, [sl]
 8006088:	2b00      	cmp	r3, #0
 800608a:	dc2c      	bgt.n	80060e6 <lTCPWindowRxCheck+0xbe>
					pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 800608c:	4b6b      	ldr	r3, [pc, #428]	@ (800623c <lTCPWindowRxCheck+0x214>)
 800608e:	ba24      	rev	r4, r4
				 pxIterator != pxEnd;
 8006090:	42a8      	cmp	r0, r5
					pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 8006092:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
					pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 8006096:	ba33      	rev	r3, r6
					pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 8006098:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
					pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 800609c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
					pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 80060a0:	f04f 030c 	mov.w	r3, #12
 80060a4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
				 pxIterator != pxEnd;
 80060a8:	d103      	bne.n	80060b2 <lTCPWindowRxCheck+0x8a>
 80060aa:	e009      	b.n	80060c0 <lTCPWindowRxCheck+0x98>
				 pxIterator = listGET_NEXT( pxIterator ) )
 80060ac:	6840      	ldr	r0, [r0, #4]
				 pxIterator != pxEnd;
 80060ae:	42a8      	cmp	r0, r5
 80060b0:	d006      	beq.n	80060c0 <lTCPWindowRxCheck+0x98>
				if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 80060b2:	68c3      	ldr	r3, [r0, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	429e      	cmp	r6, r3
 80060b8:	d1f8      	bne.n	80060ac <lTCPWindowRxCheck+0x84>
				lReturn = -1;
 80060ba:	f04f 30ff 	mov.w	r0, #4294967295
 80060be:	e00f      	b.n	80060e0 <lTCPWindowRxCheck+0xb8>
						pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 80060c0:	4642      	mov	r2, r8
 80060c2:	2301      	movs	r3, #1
 80060c4:	4631      	mov	r1, r6
 80060c6:	4638      	mov	r0, r7
 80060c8:	f7ff fe30 	bl	8005d2c <xTCPWindowNew>
						if( pxFound == NULL )
 80060cc:	2800      	cmp	r0, #0
 80060ce:	f000 80a8 	beq.w	8006222 <lTCPWindowRxCheck+0x1fa>
							if( xTCPWindowLoggingLevel != 0 )
 80060d2:	f8da 3000 	ldr.w	r3, [sl]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f040 8082 	bne.w	80061e0 <lTCPWindowRxCheck+0x1b8>
							ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 80060dc:	eba6 0009 	sub.w	r0, r6, r9
		}
 80060e0:	b005      	add	sp, #20
 80060e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: seqnr %u exp %u (dist %d) SACK to %u\n",
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	eba6 0209 	sub.w	r2, r6, r9
 80060ec:	4854      	ldr	r0, [pc, #336]	@ (8006240 <lTCPWindowRxCheck+0x218>)
 80060ee:	9201      	str	r2, [sp, #4]
 80060f0:	1ae2      	subs	r2, r4, r3
 80060f2:	9202      	str	r2, [sp, #8]
 80060f4:	eba9 0203 	sub.w	r2, r9, r3
 80060f8:	1af3      	subs	r3, r6, r3
 80060fa:	9200      	str	r2, [sp, #0]
 80060fc:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8006100:	f8b7 10ba 	ldrh.w	r1, [r7, #186]	@ 0xba
 8006104:	f006 fe9a 	bl	800ce3c <lUDPLoggingPrintf>
			for( pxIterator = listGET_NEXT( pxEnd );
 8006108:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800610c:	e7be      	b.n	800608c <lTCPWindowRxCheck+0x64>
				if( ulLength > ulSpace )
 800610e:	429a      	cmp	r2, r3
 8006110:	f200 808a 	bhi.w	8006228 <lTCPWindowRxCheck+0x200>
					if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 8006114:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
					ulCurrentSequenceNumber += ulLength;
 8006118:	eb06 0a02 	add.w	sl, r6, r2
					if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 800611c:	2b00      	cmp	r3, #0
 800611e:	d059      	beq.n	80061d4 <lTCPWindowRxCheck+0x1ac>
			const ListItem_t * pxEnd = listGET_END_MARKER( &pxWindow->xRxSegments );
 8006120:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
			for( pxIterator = listGET_NEXT( pxEnd );
 8006124:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006128:	f10a 39ff 	add.w	r9, sl, #4294967295
				FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %lu (+%ld=%lu) found %lu (+%ld=%lu)\n",
 800612c:	f8df b128 	ldr.w	fp, [pc, #296]	@ 8006258 <lTCPWindowRxCheck+0x230>
				 pxIterator != pxEnd;
 8006130:	42a2      	cmp	r2, r4
 8006132:	d033      	beq.n	800619c <lTCPWindowRxCheck+0x174>
			for( pxIterator = listGET_NEXT( pxEnd );
 8006134:	4611      	mov	r1, r2
			TCPSegment_t * pxBest = NULL;
 8006136:	2500      	movs	r5, #0
				pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8006138:	f8d1 c00c 	ldr.w	ip, [r1, #12]
				if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800613c:	f8dc 3000 	ldr.w	r3, [ip]
			if( ( ( b - ( a + 1UL ) ) & 0x80000000UL ) == 0UL )
 8006140:	eba9 0e03 	sub.w	lr, r9, r3
		if( ( ( a - b ) & 0x80000000UL ) == 0UL )
 8006144:	1b98      	subs	r0, r3, r6
			if( ( ( b - ( a + 1UL ) ) & 0x80000000UL ) == 0UL )
 8006146:	43db      	mvns	r3, r3
 8006148:	ea5e 0000 	orrs.w	r0, lr, r0
 800614c:	d405      	bmi.n	800615a <lTCPWindowRxCheck+0x132>
					if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 800614e:	2d00      	cmp	r5, #0
 8006150:	d053      	beq.n	80061fa <lTCPWindowRxCheck+0x1d2>
			if( ( ( b - ( a + 1UL ) ) & 0x80000000UL ) == 0UL )
 8006152:	6828      	ldr	r0, [r5, #0]
 8006154:	42c3      	cmn	r3, r0
 8006156:	bf58      	it	pl
 8006158:	4665      	movpl	r5, ip
				 pxIterator = listGET_NEXT( pxIterator ) )
 800615a:	6849      	ldr	r1, [r1, #4]
				 pxIterator != pxEnd;
 800615c:	42a1      	cmp	r1, r4
 800615e:	d1eb      	bne.n	8006138 <lTCPWindowRxCheck+0x110>
			if( ( pxBest != NULL ) &&
 8006160:	b1e5      	cbz	r5, 800619c <lTCPWindowRxCheck+0x174>
				( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 8006162:	682b      	ldr	r3, [r5, #0]
 8006164:	68a9      	ldr	r1, [r5, #8]
			if( ( pxBest != NULL ) &&
 8006166:	429e      	cmp	r6, r3
 8006168:	d101      	bne.n	800616e <lTCPWindowRxCheck+0x146>
				( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 800616a:	4588      	cmp	r8, r1
 800616c:	d00f      	beq.n	800618e <lTCPWindowRxCheck+0x166>
				FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %lu (+%ld=%lu) found %lu (+%ld=%lu)\n",
 800616e:	9102      	str	r1, [sp, #8]
 8006170:	4658      	mov	r0, fp
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	1a9b      	subs	r3, r3, r2
 8006176:	4419      	add	r1, r3
 8006178:	9301      	str	r3, [sp, #4]
 800617a:	ebaa 0302 	sub.w	r3, sl, r2
 800617e:	1ab2      	subs	r2, r6, r2
 8006180:	9103      	str	r1, [sp, #12]
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	4643      	mov	r3, r8
 8006186:	f8b7 10ba 	ldrh.w	r1, [r7, #186]	@ 0xba
 800618a:	f006 fe57 	bl	800ce3c <lUDPLoggingPrintf>
								vTCPWindowFree( pxFound );
 800618e:	4628      	mov	r0, r5
 8006190:	f7ff fcfe 	bl	8005b90 <vTCPWindowFree>
			for( pxIterator = listGET_NEXT( pxEnd );
 8006194:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
				 pxIterator != pxEnd;
 8006198:	42a2      	cmp	r2, r4
 800619a:	d1cb      	bne.n	8006134 <lTCPWindowRxCheck+0x10c>
 800619c:	4655      	mov	r5, sl
				 pxIterator != pxEnd;
 800619e:	4294      	cmp	r4, r2
 80061a0:	d103      	bne.n	80061aa <lTCPWindowRxCheck+0x182>
 80061a2:	e00d      	b.n	80061c0 <lTCPWindowRxCheck+0x198>
				 pxIterator = listGET_NEXT( pxIterator ) )
 80061a4:	6852      	ldr	r2, [r2, #4]
				 pxIterator != pxEnd;
 80061a6:	42a2      	cmp	r2, r4
 80061a8:	d00a      	beq.n	80061c0 <lTCPWindowRxCheck+0x198>
				pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 80061aa:	68d0      	ldr	r0, [r2, #12]
				if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 80061ac:	6803      	ldr	r3, [r0, #0]
 80061ae:	429d      	cmp	r5, r3
 80061b0:	d1f8      	bne.n	80061a4 <lTCPWindowRxCheck+0x17c>
							ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 80061b2:	6883      	ldr	r3, [r0, #8]
 80061b4:	441d      	add	r5, r3
							vTCPWindowFree( pxFound );
 80061b6:	f7ff fceb 	bl	8005b90 <vTCPWindowFree>
			for( pxIterator = listGET_NEXT( pxEnd );
 80061ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
							pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 80061be:	e7ee      	b.n	800619e <lTCPWindowRxCheck+0x176>
						if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 80061c0:	4555      	cmp	r5, sl
 80061c2:	d007      	beq.n	80061d4 <lTCPWindowRxCheck+0x1ac>
							if( xTCPWindowLoggingLevel >= 1 )
 80061c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006244 <lTCPWindowRxCheck+0x21c>)
							pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 80061c6:	eba5 030a 	sub.w	r3, r5, sl
							if( xTCPWindowLoggingLevel >= 1 )
 80061ca:	6812      	ldr	r2, [r2, #0]
							pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 80061cc:	633b      	str	r3, [r7, #48]	@ 0x30
							if( xTCPWindowLoggingLevel >= 1 )
 80061ce:	2a00      	cmp	r2, #0
 80061d0:	dc15      	bgt.n	80061fe <lTCPWindowRxCheck+0x1d6>
				 pxIterator != pxEnd;
 80061d2:	46aa      	mov	sl, r5
					lReturn = 0;
 80061d4:	2000      	movs	r0, #0
					pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 80061d6:	f8c7 a010 	str.w	sl, [r7, #16]
		}
 80061da:	b005      	add	sp, #20
 80061dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
								FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: seqnr %lu (cnt %lu)\n",
 80061e0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4818      	ldr	r0, [pc, #96]	@ (8006248 <lTCPWindowRxCheck+0x220>)
 80061e8:	9200      	str	r2, [sp, #0]
 80061ea:	1af3      	subs	r3, r6, r3
 80061ec:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 80061f0:	f8b7 10ba 	ldrh.w	r1, [r7, #186]	@ 0xba
 80061f4:	f006 fe22 	bl	800ce3c <lUDPLoggingPrintf>
 80061f8:	e770      	b.n	80060dc <lTCPWindowRxCheck+0xb4>
 80061fa:	4665      	mov	r5, ip
 80061fc:	e7ad      	b.n	800615a <lTCPWindowRxCheck+0x132>
								FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: retran %lu (Found %lu bytes at %lu cnt %ld)\n",
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8006206:	ebaa 0103 	sub.w	r1, sl, r3
 800620a:	1af3      	subs	r3, r6, r3
				 pxIterator != pxEnd;
 800620c:	46aa      	mov	sl, r5
								FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: retran %lu (Found %lu bytes at %lu cnt %ld)\n",
 800620e:	9101      	str	r1, [sp, #4]
 8006210:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8006214:	f8b7 10ba 	ldrh.w	r1, [r7, #186]	@ 0xba
 8006218:	9002      	str	r0, [sp, #8]
 800621a:	480c      	ldr	r0, [pc, #48]	@ (800624c <lTCPWindowRxCheck+0x224>)
 800621c:	f006 fe0e 	bl	800ce3c <lUDPLoggingPrintf>
 8006220:	e7d8      	b.n	80061d4 <lTCPWindowRxCheck+0x1ac>
							pxWindow->ucOptionLength = 0U;
 8006222:	f887 003c 	strb.w	r0, [r7, #60]	@ 0x3c
							lReturn = -1;
 8006226:	e748      	b.n	80060ba <lTCPWindowRxCheck+0x92>
					FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu bytes, due to lack of space (%lu)\n", ulLength, ulSpace ) );
 8006228:	461a      	mov	r2, r3
 800622a:	4641      	mov	r1, r8
 800622c:	4808      	ldr	r0, [pc, #32]	@ (8006250 <lTCPWindowRxCheck+0x228>)
 800622e:	f006 fe05 	bl	800ce3c <lUDPLoggingPrintf>
					lReturn = -1;
 8006232:	e742      	b.n	80060ba <lTCPWindowRxCheck+0x92>
					FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu+%lu bytes, due to lack of space (%lu)\n", lDistance, ulLength, ulSpace ) );
 8006234:	4807      	ldr	r0, [pc, #28]	@ (8006254 <lTCPWindowRxCheck+0x22c>)
 8006236:	f006 fe01 	bl	800ce3c <lUDPLoggingPrintf>
					lReturn = -1;
 800623a:	e73e      	b.n	80060ba <lTCPWindowRxCheck+0x92>
 800623c:	0a050101 	.word	0x0a050101
 8006240:	0800fe60 	.word	0x0800fe60
 8006244:	2000039c 	.word	0x2000039c
 8006248:	0800fea0 	.word	0x0800fea0
 800624c:	0800fdd0 	.word	0x0800fdd0
 8006250:	0800fd44 	.word	0x0800fd44
 8006254:	0800fe18 	.word	0x0800fe18
 8006258:	0800fd88 	.word	0x0800fd88

0800625c <lTCPWindowTxAdd>:
		{
 800625c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006260:	b085      	sub	sp, #20
 8006262:	460e      	mov	r6, r1
			int32_t lBytesLeft = ( int32_t ) ulLength, lToWrite;
 8006264:	460d      	mov	r5, r1
		{
 8006266:	4604      	mov	r4, r0
 8006268:	9103      	str	r1, [sp, #12]
 800626a:	4617      	mov	r7, r2
			TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 800626c:	6fc1      	ldr	r1, [r0, #124]	@ 0x7c
		{
 800626e:	469b      	mov	fp, r3
			if( pxSegment != NULL )
 8006270:	b119      	cbz	r1, 800627a <lTCPWindowTxAdd+0x1e>
				if( pxSegment->lDataLength < pxSegment->lMaxLength )
 8006272:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
 8006276:	4293      	cmp	r3, r2
 8006278:	db5d      	blt.n	8006336 <lTCPWindowTxAdd+0xda>
			int32_t lDone = 0;
 800627a:	f04f 0800 	mov.w	r8, #0
			while( lBytesLeft > 0 )
 800627e:	2d00      	cmp	r5, #0
 8006280:	dc04      	bgt.n	800628c <lTCPWindowTxAdd+0x30>
 8006282:	e050      	b.n	8006326 <lTCPWindowTxAdd+0xca>
						if( ( xTCPWindowLoggingLevel >= 3 ) ||
 8006284:	d053      	beq.n	800632e <lTCPWindowTxAdd+0xd2>
			while( lBytesLeft > 0 )
 8006286:	2d00      	cmp	r5, #0
 8006288:	4637      	mov	r7, r6
 800628a:	dd4c      	ble.n	8006326 <lTCPWindowTxAdd+0xca>
				pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 800628c:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	@ 0xbc
 8006290:	2300      	movs	r3, #0
 8006292:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006294:	4620      	mov	r0, r4
			vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8006296:	f104 0954 	add.w	r9, r4, #84	@ 0x54
 800629a:	f104 0a5c 	add.w	sl, r4, #92	@ 0x5c
				pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 800629e:	f7ff fd45 	bl	8005d2c <xTCPWindowNew>
				if( pxSegment != NULL )
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d069      	beq.n	800637a <lTCPWindowTxAdd+0x11e>
					lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 80062a6:	6842      	ldr	r2, [r0, #4]
			if( lReturn >= lMax )
 80062a8:	4659      	mov	r1, fp
					pxSegment->lStreamPos = lBufferIndex;
 80062aa:	60c7      	str	r7, [r0, #12]
					vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 80062ac:	f100 0c18 	add.w	ip, r0, #24
            return ( a <= b ) ? a : b;
 80062b0:	42aa      	cmp	r2, r5
 80062b2:	4613      	mov	r3, r2
 80062b4:	bfa8      	it	ge
 80062b6:	462b      	movge	r3, r5
			lReturn = lPosition + lCount;
 80062b8:	19de      	adds	r6, r3, r7
					pxSegment->lDataLength = lToWrite;
 80062ba:	6083      	str	r3, [r0, #8]
					lBytesLeft -= lToWrite;
 80062bc:	1aed      	subs	r5, r5, r3
					lDone += lToWrite;
 80062be:	4498      	add	r8, r3
			if( lReturn >= lMax )
 80062c0:	45b3      	cmp	fp, r6
				lReturn -= lMax;
 80062c2:	bfd8      	it	le
 80062c4:	1a76      	suble	r6, r6, r1
						pxWindow->pxHeadSegment = pxSegment;
 80062c6:	429a      	cmp	r2, r3
 80062c8:	bfcc      	ite	gt
 80062ca:	4686      	movgt	lr, r0
 80062cc:	f04f 0e00 	movle.w	lr, #0
					pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 80062d0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
		( pxList->uxNumberOfItems )++;
 80062d2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
					pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 80062d4:	189a      	adds	r2, r3, r2
		( pxList->uxNumberOfItems )++;
 80062d6:	3101      	adds	r1, #1
					pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 80062d8:	6362      	str	r2, [r4, #52]	@ 0x34
		pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 80062da:	f8c0 a01c 	str.w	sl, [r0, #28]
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 80062de:	f8d4 a064 	ldr.w	sl, [r4, #100]	@ 0x64
 80062e2:	f8c0 a020 	str.w	sl, [r0, #32]
		pxWhere->pxPrevious->pxNext = pxNewListItem;
 80062e6:	f8ca c004 	str.w	ip, [sl, #4]
		pxWhere->pxPrevious = pxNewListItem;
 80062ea:	f8c4 c064 	str.w	ip, [r4, #100]	@ 0x64
		listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 80062ee:	f8c0 9028 	str.w	r9, [r0, #40]	@ 0x28
		( pxList->uxNumberOfItems )++;
 80062f2:	6561      	str	r1, [r4, #84]	@ 0x54
					if( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 80062f4:	f8b4 10b8 	ldrh.w	r1, [r4, #184]	@ 0xb8
 80062f8:	f8c4 e07c 	str.w	lr, [r4, #124]	@ 0x7c
 80062fc:	2917      	cmp	r1, #23
 80062fe:	d0c2      	beq.n	8006286 <lTCPWindowTxAdd+0x2a>
						if( ( xTCPWindowLoggingLevel >= 3 ) ||
 8006300:	492b      	ldr	r1, [pc, #172]	@ (80063b0 <lTCPWindowTxAdd+0x154>)
 8006302:	6809      	ldr	r1, [r1, #0]
 8006304:	2902      	cmp	r1, #2
 8006306:	ddbd      	ble.n	8006284 <lTCPWindowTxAdd+0x28>
							FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: New %4ld bytes for seqNr %lu len %4lu (nxt %lu) pos %lu\n",
 8006308:	69e1      	ldr	r1, [r4, #28]
 800630a:	f8d0 c000 	ldr.w	ip, [r0]
 800630e:	1a50      	subs	r0, r2, r1
 8006310:	9701      	str	r7, [sp, #4]
 8006312:	ebac 0201 	sub.w	r2, ip, r1
 8006316:	9903      	ldr	r1, [sp, #12]
 8006318:	9000      	str	r0, [sp, #0]
 800631a:	4637      	mov	r7, r6
 800631c:	4825      	ldr	r0, [pc, #148]	@ (80063b4 <lTCPWindowTxAdd+0x158>)
 800631e:	f006 fd8d 	bl	800ce3c <lUDPLoggingPrintf>
			while( lBytesLeft > 0 )
 8006322:	2d00      	cmp	r5, #0
 8006324:	dcb2      	bgt.n	800628c <lTCPWindowTxAdd+0x30>
		}
 8006326:	4640      	mov	r0, r8
 8006328:	b005      	add	sp, #20
 800632a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							( ( xTCPWindowLoggingLevel >= 2 ) && ( pxWindow->pxHeadSegment != NULL ) ) )
 800632e:	f1be 0f00 	cmp.w	lr, #0
 8006332:	d1e9      	bne.n	8006308 <lTCPWindowTxAdd+0xac>
 8006334:	e7a7      	b.n	8006286 <lTCPWindowTxAdd+0x2a>
					if( ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength != 0 ) )
 8006336:	7d88      	ldrb	r0, [r1, #22]
 8006338:	07c0      	lsls	r0, r0, #31
 800633a:	d49e      	bmi.n	800627a <lTCPWindowTxAdd+0x1e>
 800633c:	2b00      	cmp	r3, #0
 800633e:	d09c      	beq.n	800627a <lTCPWindowTxAdd+0x1e>
						lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 8006340:	eba2 0803 	sub.w	r8, r2, r3
 8006344:	45b0      	cmp	r8, r6
 8006346:	bfa8      	it	ge
 8006348:	46b0      	movge	r8, r6
						pxSegment->lDataLength += lToWrite;
 800634a:	4443      	add	r3, r8
						if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 800634c:	429a      	cmp	r2, r3
						pxSegment->lDataLength += lToWrite;
 800634e:	608b      	str	r3, [r1, #8]
						if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 8006350:	dd1e      	ble.n	8006390 <lTCPWindowTxAdd+0x134>
						if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 8006352:	4a17      	ldr	r2, [pc, #92]	@ (80063b0 <lTCPWindowTxAdd+0x154>)
						pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8006354:	6b60      	ldr	r0, [r4, #52]	@ 0x34
						if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 8006356:	6812      	ldr	r2, [r2, #0]
						pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8006358:	4440      	add	r0, r8
						lBytesLeft -= lToWrite;
 800635a:	9d03      	ldr	r5, [sp, #12]
						if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 800635c:	2a01      	cmp	r2, #1
						lBytesLeft -= lToWrite;
 800635e:	eba5 0508 	sub.w	r5, r5, r8
						pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8006362:	6360      	str	r0, [r4, #52]	@ 0x34
						if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 8006364:	dd03      	ble.n	800636e <lTCPWindowTxAdd+0x112>
 8006366:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	@ 0xb8
 800636a:	2a17      	cmp	r2, #23
 800636c:	d113      	bne.n	8006396 <lTCPWindowTxAdd+0x13a>
			lReturn = lPosition + lCount;
 800636e:	4447      	add	r7, r8
			if( lReturn >= lMax )
 8006370:	465b      	mov	r3, fp
 8006372:	45bb      	cmp	fp, r7
 8006374:	dc83      	bgt.n	800627e <lTCPWindowTxAdd+0x22>
				lReturn -= lMax;
 8006376:	1aff      	subs	r7, r7, r3
 8006378:	e781      	b.n	800627e <lTCPWindowTxAdd+0x22>
					if( lDone != 0 )
 800637a:	f1b8 0f00 	cmp.w	r8, #0
 800637e:	d0d2      	beq.n	8006326 <lTCPWindowTxAdd+0xca>
						FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %ld bytes)\n", lBytesLeft ) );
 8006380:	4629      	mov	r1, r5
 8006382:	480d      	ldr	r0, [pc, #52]	@ (80063b8 <lTCPWindowTxAdd+0x15c>)
 8006384:	f006 fd5a 	bl	800ce3c <lUDPLoggingPrintf>
		}
 8006388:	4640      	mov	r0, r8
 800638a:	b005      	add	sp, #20
 800638c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							pxWindow->pxHeadSegment = NULL;
 8006390:	2200      	movs	r2, #0
 8006392:	67e2      	str	r2, [r4, #124]	@ 0x7c
 8006394:	e7dd      	b.n	8006352 <lTCPWindowTxAdd+0xf6>
							FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Add %4lu bytes for seqNr %lu len %4lu (nxt %lu) pos %lu\n",
 8006396:	69e6      	ldr	r6, [r4, #28]
 8006398:	680a      	ldr	r2, [r1, #0]
 800639a:	1b80      	subs	r0, r0, r6
 800639c:	68c9      	ldr	r1, [r1, #12]
 800639e:	1b92      	subs	r2, r2, r6
 80063a0:	e9cd 0100 	strd	r0, r1, [sp]
 80063a4:	9903      	ldr	r1, [sp, #12]
 80063a6:	4805      	ldr	r0, [pc, #20]	@ (80063bc <lTCPWindowTxAdd+0x160>)
 80063a8:	f006 fd48 	bl	800ce3c <lUDPLoggingPrintf>
 80063ac:	e7df      	b.n	800636e <lTCPWindowTxAdd+0x112>
 80063ae:	bf00      	nop
 80063b0:	2000039c 	.word	0x2000039c
 80063b4:	0800ff1c 	.word	0x0800ff1c
 80063b8:	0800ff68 	.word	0x0800ff68
 80063bc:	0800fed0 	.word	0x0800fed0

080063c0 <xTCPWindowTxDone>:
			return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 80063c0:	f8d0 0090 	ldr.w	r0, [r0, #144]	@ 0x90
		}
 80063c4:	fab0 f080 	clz	r0, r0
 80063c8:	0940      	lsrs	r0, r0, #5
 80063ca:	4770      	bx	lr

080063cc <xTCPWindowTxHasData>:
			*pulDelay = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	6013      	str	r3, [r2, #0]
			if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 80063d0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80063d2:	b10b      	cbz	r3, 80063d8 <xTCPWindowTxHasData+0xc>
				xReturn = pdTRUE;
 80063d4:	2001      	movs	r0, #1
		}
 80063d6:	4770      	bx	lr
			if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 80063d8:	6e83      	ldr	r3, [r0, #104]	@ 0x68
		{
 80063da:	b570      	push	{r4, r5, r6, lr}
 80063dc:	4604      	mov	r4, r0
			if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 80063de:	b18b      	cbz	r3, 8006404 <xTCPWindowTxHasData+0x38>
				pxReturn = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 80063e0:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 80063e2:	68de      	ldr	r6, [r3, #12]
				if( pxSegment != NULL )
 80063e4:	b176      	cbz	r6, 8006404 <xTCPWindowTxHasData+0x38>
 80063e6:	4615      	mov	r5, r2
		return( ( xTaskGetTickCount() - ( ( TickType_t ) pxTimer->ulBorn ) ) * portTICK_PERIOD_MS );
 80063e8:	f002 fe2a 	bl	8009040 <xTaskGetTickCount>
					ulMaxAge = ( 1UL << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 80063ec:	7d31      	ldrb	r1, [r6, #20]
		return( ( xTaskGetTickCount() - ( ( TickType_t ) pxTimer->ulBorn ) ) * portTICK_PERIOD_MS );
 80063ee:	6932      	ldr	r2, [r6, #16]
					ulMaxAge = ( 1UL << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 80063f0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80063f2:	408b      	lsls	r3, r1
		return( ( xTaskGetTickCount() - ( ( TickType_t ) pxTimer->ulBorn ) ) * portTICK_PERIOD_MS );
 80063f4:	1a81      	subs	r1, r0, r2
					if( ulMaxAge > ulAge )
 80063f6:	428b      	cmp	r3, r1
 80063f8:	d902      	bls.n	8006400 <xTCPWindowTxHasData+0x34>
						*pulDelay = ulMaxAge - ulAge;
 80063fa:	4413      	add	r3, r2
 80063fc:	1a1b      	subs	r3, r3, r0
 80063fe:	602b      	str	r3, [r5, #0]
				xReturn = pdTRUE;
 8006400:	2001      	movs	r0, #1
		}
 8006402:	bd70      	pop	{r4, r5, r6, pc}
			if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8006404:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006406:	b183      	cbz	r3, 800642a <xTCPWindowTxHasData+0x5e>
				pxReturn = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 8006408:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800640a:	68dd      	ldr	r5, [r3, #12]
					if( pxSegment == NULL )
 800640c:	b16d      	cbz	r5, 800642a <xTCPWindowTxHasData+0x5e>
					else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800640e:	4620      	mov	r0, r4
 8006410:	f7ff fb9c 	bl	8005b4c <prvTCPWindowTxHasSpace>
 8006414:	b148      	cbz	r0, 800642a <xTCPWindowTxHasData+0x5e>
					else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8006416:	7823      	ldrb	r3, [r4, #0]
 8006418:	079b      	lsls	r3, r3, #30
 800641a:	d5f1      	bpl.n	8006400 <xTCPWindowTxHasData+0x34>
 800641c:	e9d5 3001 	ldrd	r3, r0, [r5, #4]
 8006420:	4298      	cmp	r0, r3
 8006422:	bfb4      	ite	lt
 8006424:	2000      	movlt	r0, #0
 8006426:	2001      	movge	r0, #1
		}
 8006428:	bd70      	pop	{r4, r5, r6, pc}
						xReturn = pdFALSE;
 800642a:	2000      	movs	r0, #0
		}
 800642c:	bd70      	pop	{r4, r5, r6, pc}
 800642e:	bf00      	nop

08006430 <ulTCPWindowTxGet>:
			if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8006430:	6c03      	ldr	r3, [r0, #64]	@ 0x40
		{
 8006432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006436:	4604      	mov	r4, r0
 8006438:	b082      	sub	sp, #8
 800643a:	460f      	mov	r7, r1
 800643c:	4616      	mov	r6, r2
			if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800643e:	2b00      	cmp	r3, #0
 8006440:	d047      	beq.n	80064d2 <ulTCPWindowTxGet+0xa2>
				pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8006442:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
				pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 8006444:	68c5      	ldr	r5, [r0, #12]
				( void ) uxListRemove( pxItem );
 8006446:	f002 f867 	bl	8008518 <uxListRemove>
			pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 800644a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800644c:	62e3      	str	r3, [r4, #44]	@ 0x2c
			if( pxSegment == NULL )
 800644e:	2d00      	cmp	r5, #0
 8006450:	d041      	beq.n	80064d6 <ulTCPWindowTxGet+0xa6>
				if( xTCPWindowLoggingLevel != 0 )
 8006452:	4b60      	ldr	r3, [pc, #384]	@ (80065d4 <ulTCPWindowTxGet+0x1a4>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	bb5b      	cbnz	r3, 80064b0 <ulTCPWindowTxGet+0x80>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 8006458:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800645a:	b123      	cbz	r3, 8006466 <ulTCPWindowTxGet+0x36>
 800645c:	f240 61da 	movw	r1, #1754	@ 0x6da
 8006460:	485d      	ldr	r0, [pc, #372]	@ (80065d8 <ulTCPWindowTxGet+0x1a8>)
 8006462:	f7fa fcf7 	bl	8000e54 <vAssertCalled>
		( pxList->uxNumberOfItems )++;
 8006466:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
				vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 8006468:	f105 0118 	add.w	r1, r5, #24
				( pxSegment->u.bits.ucTransmitCount )++;
 800646c:	7d2b      	ldrb	r3, [r5, #20]
			vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800646e:	f104 0068 	add.w	r0, r4, #104	@ 0x68
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8006472:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
		( pxList->uxNumberOfItems )++;
 8006474:	3201      	adds	r2, #1
				( pxSegment->u.bits.ucTransmitCount )++;
 8006476:	3301      	adds	r3, #1
			vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8006478:	f104 0c70 	add.w	ip, r4, #112	@ 0x70
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 800647c:	622f      	str	r7, [r5, #32]
		pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 800647e:	f8c5 c01c 	str.w	ip, [r5, #28]
				( pxSegment->u.bits.ucTransmitCount )++;
 8006482:	b2db      	uxtb	r3, r3
		pxWhere->pxPrevious->pxNext = pxNewListItem;
 8006484:	6079      	str	r1, [r7, #4]
		pxWhere->pxPrevious = pxNewListItem;
 8006486:	67a1      	str	r1, [r4, #120]	@ 0x78
				if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 8006488:	2b04      	cmp	r3, #4
		listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 800648a:	62a8      	str	r0, [r5, #40]	@ 0x28
		( pxList->uxNumberOfItems )++;
 800648c:	66a2      	str	r2, [r4, #104]	@ 0x68
				pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 800648e:	7daa      	ldrb	r2, [r5, #22]
				( pxSegment->u.bits.ucTransmitCount )++;
 8006490:	752b      	strb	r3, [r5, #20]
				pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 8006492:	f042 0201 	orr.w	r2, r2, #1
 8006496:	75aa      	strb	r2, [r5, #22]
				if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 8006498:	d05b      	beq.n	8006552 <ulTCPWindowTxGet+0x122>
		pxTimer->ulBorn = xTaskGetTickCount();
 800649a:	f002 fdd1 	bl	8009040 <xTaskGetTickCount>
				pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 800649e:	682b      	ldr	r3, [r5, #0]
		pxTimer->ulBorn = xTaskGetTickCount();
 80064a0:	6128      	str	r0, [r5, #16]
				pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 80064a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
				*plPosition = pxSegment->lStreamPos;
 80064a4:	68eb      	ldr	r3, [r5, #12]
 80064a6:	6033      	str	r3, [r6, #0]
				ulReturn = ( uint32_t ) pxSegment->lDataLength;
 80064a8:	68a8      	ldr	r0, [r5, #8]
		}
 80064aa:	b002      	add	sp, #8
 80064ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: PrioQueue %ld bytes for sequence number %lu (ws %lu)\n",
 80064b0:	68ab      	ldr	r3, [r5, #8]
 80064b2:	9701      	str	r7, [sp, #4]
 80064b4:	69e1      	ldr	r1, [r4, #28]
 80064b6:	682a      	ldr	r2, [r5, #0]
 80064b8:	4848      	ldr	r0, [pc, #288]	@ (80065dc <ulTCPWindowTxGet+0x1ac>)
 80064ba:	1a52      	subs	r2, r2, r1
 80064bc:	9200      	str	r2, [sp, #0]
 80064be:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	@ 0xb8
 80064c2:	f8b4 10ba 	ldrh.w	r1, [r4, #186]	@ 0xba
 80064c6:	f006 fcb9 	bl	800ce3c <lUDPLoggingPrintf>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 80064ca:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1c5      	bne.n	800645c <ulTCPWindowTxGet+0x2c>
 80064d0:	e7c9      	b.n	8006466 <ulTCPWindowTxGet+0x36>
			pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 80064d2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80064d4:	62c3      	str	r3, [r0, #44]	@ 0x2c
			if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 80064d6:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80064d8:	b34b      	cbz	r3, 800652e <ulTCPWindowTxGet+0xfe>
				pxReturn = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 80064da:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80064dc:	68dd      	ldr	r5, [r3, #12]
				if( pxSegment != NULL )
 80064de:	b335      	cbz	r5, 800652e <ulTCPWindowTxGet+0xfe>
					ulMaxTime = ( 1UL << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 80064e0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80064e2:	7d2a      	ldrb	r2, [r5, #20]
 80064e4:	fa03 f802 	lsl.w	r8, r3, r2
		return( ( xTaskGetTickCount() - ( ( TickType_t ) pxTimer->ulBorn ) ) * portTICK_PERIOD_MS );
 80064e8:	f002 fdaa 	bl	8009040 <xTaskGetTickCount>
 80064ec:	692b      	ldr	r3, [r5, #16]
 80064ee:	1ac0      	subs	r0, r0, r3
					if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 80064f0:	4580      	cmp	r8, r0
 80064f2:	d21c      	bcs.n	800652e <ulTCPWindowTxGet+0xfe>
			if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 80064f4:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d06a      	beq.n	80065d0 <ulTCPWindowTxGet+0x1a0>
				pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 80064fa:	6f60      	ldr	r0, [r4, #116]	@ 0x74
				pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 80064fc:	68c5      	ldr	r5, [r0, #12]
				( void ) uxListRemove( pxItem );
 80064fe:	f002 f80b 	bl	8008518 <uxListRemove>
						if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8006502:	4b34      	ldr	r3, [pc, #208]	@ (80065d4 <ulTCPWindowTxGet+0x1a4>)
						pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 8006504:	2200      	movs	r2, #0
						if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8006506:	681b      	ldr	r3, [r3, #0]
						pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 8006508:	756a      	strb	r2, [r5, #21]
						if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0a4      	beq.n	8006458 <ulTCPWindowTxGet+0x28>
 800650e:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	@ 0xb8
 8006512:	2a17      	cmp	r2, #23
 8006514:	d0a0      	beq.n	8006458 <ulTCPWindowTxGet+0x28>
							FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: WaitQueue %ld bytes for sequence number %lu (%lX)\n",
 8006516:	6828      	ldr	r0, [r5, #0]
 8006518:	69e3      	ldr	r3, [r4, #28]
 800651a:	1ac1      	subs	r1, r0, r3
 800651c:	68ab      	ldr	r3, [r5, #8]
 800651e:	e9cd 1000 	strd	r1, r0, [sp]
 8006522:	482f      	ldr	r0, [pc, #188]	@ (80065e0 <ulTCPWindowTxGet+0x1b0>)
 8006524:	f8b4 10ba 	ldrh.w	r1, [r4, #186]	@ 0xba
 8006528:	f006 fc88 	bl	800ce3c <lUDPLoggingPrintf>
				if( pxSegment == NULL )
 800652c:	e794      	b.n	8006458 <ulTCPWindowTxGet+0x28>
			if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800652e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006530:	b15b      	cbz	r3, 800654a <ulTCPWindowTxGet+0x11a>
				pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8006532:	f8d4 8060 	ldr.w	r8, [r4, #96]	@ 0x60
				pxReturn = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 8006536:	f8d8 500c 	ldr.w	r5, [r8, #12]
					if( pxSegment == NULL )
 800653a:	b135      	cbz	r5, 800654a <ulTCPWindowTxGet+0x11a>
					else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800653c:	7823      	ldrb	r3, [r4, #0]
 800653e:	079b      	lsls	r3, r3, #30
 8006540:	d51b      	bpl.n	800657a <ulTCPWindowTxGet+0x14a>
 8006542:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 8006546:	429a      	cmp	r2, r3
 8006548:	da17      	bge.n	800657a <ulTCPWindowTxGet+0x14a>
				pxSegment = NULL;
 800654a:	2000      	movs	r0, #0
		}
 800654c:	b002      	add	sp, #8
 800654e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) )
 8006552:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	@ 0xbc
 8006556:	68a3      	ldr	r3, [r4, #8]
 8006558:	0051      	lsls	r1, r2, #1
 800655a:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800655e:	d99c      	bls.n	800649a <ulTCPWindowTxGet+0x6a>
						FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %d]: Change Tx window: %lu -> %u\n",
 8006560:	9100      	str	r1, [sp, #0]
 8006562:	4820      	ldr	r0, [pc, #128]	@ (80065e4 <ulTCPWindowTxGet+0x1b4>)
 8006564:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	@ 0xb8
 8006568:	f8b4 10ba 	ldrh.w	r1, [r4, #186]	@ 0xba
 800656c:	f006 fc66 	bl	800ce3c <lUDPLoggingPrintf>
						pxWindow->xSize.ulTxWindowLength = ( 2UL * pxWindow->usMSS );
 8006570:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	@ 0xbc
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	60a3      	str	r3, [r4, #8]
 8006578:	e78f      	b.n	800649a <ulTCPWindowTxGet+0x6a>
					else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800657a:	4639      	mov	r1, r7
 800657c:	4620      	mov	r0, r4
 800657e:	f7ff fae5 	bl	8005b4c <prvTCPWindowTxHasSpace>
 8006582:	2800      	cmp	r0, #0
 8006584:	d0e1      	beq.n	800654a <ulTCPWindowTxGet+0x11a>
			if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8006586:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006588:	b1eb      	cbz	r3, 80065c6 <ulTCPWindowTxGet+0x196>
				( void ) uxListRemove( pxItem );
 800658a:	4640      	mov	r0, r8
 800658c:	f001 ffc4 	bl	8008518 <uxListRemove>
						if( pxWindow->pxHeadSegment == pxSegment )
 8006590:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8006592:	42ab      	cmp	r3, r5
 8006594:	d019      	beq.n	80065ca <ulTCPWindowTxGet+0x19a>
						if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8006596:	4a0f      	ldr	r2, [pc, #60]	@ (80065d4 <ulTCPWindowTxGet+0x1a4>)
						pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 8006598:	6829      	ldr	r1, [r5, #0]
 800659a:	68ab      	ldr	r3, [r5, #8]
						if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800659c:	6812      	ldr	r2, [r2, #0]
						pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 800659e:	1858      	adds	r0, r3, r1
						if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 80065a0:	2a01      	cmp	r2, #1
						pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 80065a2:	62a0      	str	r0, [r4, #40]	@ 0x28
						if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 80065a4:	f77f af58 	ble.w	8006458 <ulTCPWindowTxGet+0x28>
 80065a8:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	@ 0xb8
 80065ac:	2a17      	cmp	r2, #23
 80065ae:	f43f af53 	beq.w	8006458 <ulTCPWindowTxGet+0x28>
							FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: XmitQueue %ld bytes for sequence number %lu (ws %lu)\n",
 80065b2:	9701      	str	r7, [sp, #4]
 80065b4:	69e0      	ldr	r0, [r4, #28]
 80065b6:	1a09      	subs	r1, r1, r0
 80065b8:	480b      	ldr	r0, [pc, #44]	@ (80065e8 <ulTCPWindowTxGet+0x1b8>)
 80065ba:	9100      	str	r1, [sp, #0]
 80065bc:	f8b4 10ba 	ldrh.w	r1, [r4, #186]	@ 0xba
 80065c0:	f006 fc3c 	bl	800ce3c <lUDPLoggingPrintf>
			if( ulReturn != 0UL )
 80065c4:	e748      	b.n	8006458 <ulTCPWindowTxGet+0x28>
				pxSegment = NULL;
 80065c6:	461d      	mov	r5, r3
 80065c8:	e7e2      	b.n	8006590 <ulTCPWindowTxGet+0x160>
							pxWindow->pxHeadSegment = NULL;
 80065ca:	2300      	movs	r3, #0
 80065cc:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80065ce:	e7e2      	b.n	8006596 <ulTCPWindowTxGet+0x166>
						pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 80065d0:	755b      	strb	r3, [r3, #21]
 80065d2:	deff      	udf	#255	@ 0xff
 80065d4:	2000039c 	.word	0x2000039c
 80065d8:	0800fc88 	.word	0x0800fc88
 80065dc:	08010040 	.word	0x08010040
 80065e0:	0800ffa4 	.word	0x0800ffa4
 80065e4:	08010090 	.word	0x08010090
 80065e8:	0800fff0 	.word	0x0800fff0

080065ec <ulTCPWindowTxAck>:
		{
			uint32_t ulFirstSequence, ulReturn;

			/* Receive a normal ACK. */

			ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 80065ec:	6a03      	ldr	r3, [r0, #32]
		{
 80065ee:	460a      	mov	r2, r1
			if( ( ( b - a ) & 0x80000000UL ) == 0UL )
 80065f0:	1a59      	subs	r1, r3, r1
 80065f2:	2900      	cmp	r1, #0
 80065f4:	db01      	blt.n	80065fa <ulTCPWindowTxAck+0xe>
			{
				ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
			}

			return ulReturn;
		}
 80065f6:	2000      	movs	r0, #0
 80065f8:	4770      	bx	lr
				ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 80065fa:	4619      	mov	r1, r3
 80065fc:	f7ff baec 	b.w	8005bd8 <prvTCPWindowTxCheckAck>

08006600 <ulTCPWindowTxSack>:
 *         the head position.
 */
		uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
									uint32_t ulFirst,
									uint32_t ulLast )
		{
 8006600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			uint32_t ulAckCount;
			uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 8006604:	6a03      	ldr	r3, [r0, #32]
		{
 8006606:	b087      	sub	sp, #28
 8006608:	4606      	mov	r6, r0
 800660a:	4689      	mov	r9, r1
 800660c:	9205      	str	r2, [sp, #20]
			pxEnd = listGET_END_MARKER( &( pxWindow->xWaitQueue ) );
 800660e:	f106 0770 	add.w	r7, r6, #112	@ 0x70
			uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 8006612:	9304      	str	r3, [sp, #16]

			/* Receive a SACK option. */
			ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8006614:	f7ff fae0 	bl	8005bd8 <prvTCPWindowTxCheckAck>
			pxIterator = listGET_NEXT( pxEnd );
 8006618:	6f74      	ldr	r4, [r6, #116]	@ 0x74
			ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 800661a:	4682      	mov	sl, r0
			while( pxIterator != pxEnd )
 800661c:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 80066e0 <ulTCPWindowTxSack+0xe0>
 8006620:	42a7      	cmp	r7, r4
 8006622:	d016      	beq.n	8006652 <ulTCPWindowTxSack+0x52>
			if( ( ( b - ( a + 1UL ) ) & 0x80000000UL ) == 0UL )
 8006624:	f109 3bff 	add.w	fp, r9, #4294967295
				pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8006628:	68e5      	ldr	r5, [r4, #12]
							if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800662a:	f8d8 0000 	ldr.w	r0, [r8]
				if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 800662e:	7dab      	ldrb	r3, [r5, #22]
				pxIterator = listGET_NEXT( pxIterator );
 8006630:	6864      	ldr	r4, [r4, #4]
				if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8006632:	f013 0302 	ands.w	r3, r3, #2
 8006636:	d10a      	bne.n	800664e <ulTCPWindowTxSack+0x4e>
					if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 8006638:	6829      	ldr	r1, [r5, #0]
			if( ( ( b - ( a + 1UL ) ) & 0x80000000UL ) == 0UL )
 800663a:	ebab 0201 	sub.w	r2, fp, r1
 800663e:	2a00      	cmp	r2, #0
 8006640:	db05      	blt.n	800664e <ulTCPWindowTxSack+0x4e>
						pxSegment->u.bits.ucDupAckCount++;
 8006642:	7d6a      	ldrb	r2, [r5, #21]
 8006644:	3201      	adds	r2, #1
 8006646:	b2d2      	uxtb	r2, r2
						if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 8006648:	2a03      	cmp	r2, #3
						pxSegment->u.bits.ucDupAckCount++;
 800664a:	756a      	strb	r2, [r5, #21]
						if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 800664c:	d01f      	beq.n	800668e <ulTCPWindowTxSack+0x8e>
			while( pxIterator != pxEnd )
 800664e:	42a7      	cmp	r7, r4
 8006650:	d1ea      	bne.n	8006628 <ulTCPWindowTxSack+0x28>
			( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );

			if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 8006652:	f8d8 3000 	ldr.w	r3, [r8]
 8006656:	2b00      	cmp	r3, #0
 8006658:	dd15      	ble.n	8006686 <ulTCPWindowTxSack+0x86>
			if( ( ( a - ( b + 1UL ) ) & 0x80000000UL ) == 0UL )
 800665a:	9b04      	ldr	r3, [sp, #16]
 800665c:	ea6f 0b03 	mvn.w	fp, r3
 8006660:	eb1b 0f09 	cmn.w	fp, r9
 8006664:	d40f      	bmi.n	8006686 <ulTCPWindowTxSack+0x86>
			{
				FreeRTOS_debug_printf( ( "ulTCPWindowTxSack[%u,%u]: from %lu to %lu (ack = %lu)\n",
 8006666:	69f0      	ldr	r0, [r6, #28]
 8006668:	9b05      	ldr	r3, [sp, #20]
 800666a:	1a1b      	subs	r3, r3, r0
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	eba9 0300 	sub.w	r3, r9, r0
 8006672:	6a31      	ldr	r1, [r6, #32]
 8006674:	f8b6 20b8 	ldrh.w	r2, [r6, #184]	@ 0xb8
 8006678:	1a08      	subs	r0, r1, r0
 800667a:	f8b6 10ba 	ldrh.w	r1, [r6, #186]	@ 0xba
 800667e:	9001      	str	r0, [sp, #4]
 8006680:	4815      	ldr	r0, [pc, #84]	@ (80066d8 <ulTCPWindowTxSack+0xd8>)
 8006682:	f006 fbdb 	bl	800ce3c <lUDPLoggingPrintf>
										 pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
				FreeRTOS_flush_logging();
			}

			return ulAckCount;
		}
 8006686:	4650      	mov	r0, sl
 8006688:	b007      	add	sp, #28
 800668a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800668e:	2800      	cmp	r0, #0
							pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 8006690:	752b      	strb	r3, [r5, #20]
							if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8006692:	db0a      	blt.n	80066aa <ulTCPWindowTxSack+0xaa>
 8006694:	f8b6 30b8 	ldrh.w	r3, [r6, #184]	@ 0xb8
 8006698:	2b17      	cmp	r3, #23
 800669a:	d006      	beq.n	80066aa <ulTCPWindowTxSack+0xaa>
								FreeRTOS_debug_printf( ( "prvTCPWindowFastRetransmit: Requeue sequence number %lu < %lu\n",
 800669c:	69f2      	ldr	r2, [r6, #28]
 800669e:	480f      	ldr	r0, [pc, #60]	@ (80066dc <ulTCPWindowTxSack+0xdc>)
 80066a0:	1a89      	subs	r1, r1, r2
 80066a2:	eba9 0202 	sub.w	r2, r9, r2
 80066a6:	f006 fbc9 	bl	800ce3c <lUDPLoggingPrintf>
							( void ) uxListRemove( &pxSegment->xQueueItem );
 80066aa:	f105 0118 	add.w	r1, r5, #24
 80066ae:	4608      	mov	r0, r1
 80066b0:	9103      	str	r1, [sp, #12]
 80066b2:	f001 ff31 	bl	8008518 <uxListRemove>
		( pxList->uxNumberOfItems )++;
 80066b6:	6c33      	ldr	r3, [r6, #64]	@ 0x40
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 80066b8:	6d30      	ldr	r0, [r6, #80]	@ 0x50
			vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 80066ba:	f106 0240 	add.w	r2, r6, #64	@ 0x40
		pxWhere->pxPrevious->pxNext = pxNewListItem;
 80066be:	9903      	ldr	r1, [sp, #12]
		( pxList->uxNumberOfItems )++;
 80066c0:	3301      	adds	r3, #1
			vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 80066c2:	f106 0c48 	add.w	ip, r6, #72	@ 0x48
		pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 80066c6:	6228      	str	r0, [r5, #32]
		pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 80066c8:	f8c5 c01c 	str.w	ip, [r5, #28]
		pxWhere->pxPrevious->pxNext = pxNewListItem;
 80066cc:	6041      	str	r1, [r0, #4]
		pxWhere->pxPrevious = pxNewListItem;
 80066ce:	6531      	str	r1, [r6, #80]	@ 0x50
		listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 80066d0:	62aa      	str	r2, [r5, #40]	@ 0x28
		( pxList->uxNumberOfItems )++;
 80066d2:	6433      	str	r3, [r6, #64]	@ 0x40
							ulCount++;
 80066d4:	e7bb      	b.n	800664e <ulTCPWindowTxSack+0x4e>
 80066d6:	bf00      	nop
 80066d8:	08010108 	.word	0x08010108
 80066dc:	080100c8 	.word	0x080100c8
 80066e0:	2000039c 	.word	0x2000039c

080066e4 <vProcessGeneratedUDPPacket>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer: The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80066e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066e6:	4604      	mov	r4, r0
 80066e8:	b083      	sub	sp, #12
	UDPPacket_t * pxUDPPacket;
	IPHeader_t * pxIPHeader;
	eARPLookupResult_t eReturned;
	uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 80066ea:	e9d4 3605 	ldrd	r3, r6, [r4, #20]
	{
		uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
	}

	/* Determine the ARP cache status for the requested IP address. */
	eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 80066ee:	a801      	add	r0, sp, #4
			uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
 80066f0:	69e5      	ldr	r5, [r4, #28]
	eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 80066f2:	4631      	mov	r1, r6
	uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 80066f4:	9301      	str	r3, [sp, #4]
	eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 80066f6:	f7fa ff97 	bl	8001628 <eARPGetCacheEntry>

	if( eReturned != eCantSendPacket )
 80066fa:	2802      	cmp	r0, #2
 80066fc:	d003      	beq.n	8006706 <vProcessGeneratedUDPPacket+0x22>
	{
		if( eReturned == eARPCacheHit )
 80066fe:	2801      	cmp	r0, #1
 8006700:	d006      	beq.n	8006710 <vProcessGeneratedUDPPacket+0x2c>
						pxUDPPacket->xUDPHeader.usChecksum = 0U;
					}
				}
			#endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
		}
		else if( eReturned == eARPCacheMiss )
 8006702:	2800      	cmp	r0, #0
 8006704:	d043      	beq.n	800678e <vProcessGeneratedUDPPacket+0xaa>
	}
	else
	{
		/* The packet can't be sent (DHCP not completed?).  Just drop the
		 * packet. */
		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8006706:	4620      	mov	r0, r4
 8006708:	f000 f942 	bl	8006990 <vReleaseNetworkBufferAndDescriptor>
	}
}
 800670c:	b003      	add	sp, #12
 800670e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
 8006710:	3d2a      	subs	r5, #42	@ 0x2a
				if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8006712:	8c22      	ldrh	r2, [r4, #32]
				pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 8006714:	b2ad      	uxth	r5, r5
				if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8006716:	b15a      	cbz	r2, 8006730 <vProcessGeneratedUDPPacket+0x4c>
				pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 8006718:	f105 0308 	add.w	r3, r5, #8
				pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 800671c:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
				pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 800671e:	84b2      	strh	r2, [r6, #36]	@ 0x24
				pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 8006720:	ba5b      	rev16	r3, r3
				pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8006722:	8471      	strh	r1, [r6, #34]	@ 0x22
				pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 8006724:	84f3      	strh	r3, [r6, #38]	@ 0x26
				pxUDPHeader->usChecksum = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	f886 3028 	strb.w	r3, [r6, #40]	@ 0x28
 800672c:	f886 3029 	strb.w	r3, [r6, #41]	@ 0x29
			( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartUDPPacketHeader ) );
 8006730:	4f1d      	ldr	r7, [pc, #116]	@ (80067a8 <vProcessGeneratedUDPPacket+0xc4>)
					pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
 8006732:	351c      	adds	r5, #28
			pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 8006734:	f8d4 c018 	ldr.w	ip, [r4, #24]
					pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
 8006738:	b2ad      	uxth	r5, r5
			( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartUDPPacketHeader ) );
 800673a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800673c:	f8cc 0006 	str.w	r0, [ip, #6]
 8006740:	f8cc 100a 	str.w	r1, [ip, #10]
 8006744:	f8cc 200e 	str.w	r2, [ip, #14]
 8006748:	f8cc 3012 	str.w	r3, [ip, #18]
 800674c:	cf03      	ldmia	r7!, {r0, r1}
 800674e:	f8cc 0016 	str.w	r0, [ip, #22]
 8006752:	f8cc 101a 	str.w	r1, [ip, #26]
				if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8006756:	8c23      	ldrh	r3, [r4, #32]
 8006758:	b90b      	cbnz	r3, 800675e <vProcessGeneratedUDPPacket+0x7a>
					pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 800675a:	2301      	movs	r3, #1
 800675c:	75f3      	strb	r3, [r6, #23]
			pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
 800675e:	6963      	ldr	r3, [r4, #20]
			pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8006760:	ba6d      	rev16	r5, r5
					if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
 8006762:	4a12      	ldr	r2, [pc, #72]	@ (80067ac <vProcessGeneratedUDPPacket+0xc8>)
			pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8006764:	8235      	strh	r5, [r6, #16]
					if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
 8006766:	4293      	cmp	r3, r2
			pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
 8006768:	f8c6 301e 	str.w	r3, [r6, #30]
					if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
 800676c:	d018      	beq.n	80067a0 <vProcessGeneratedUDPPacket+0xbc>
				if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800676e:	69e3      	ldr	r3, [r4, #28]
 8006770:	2b3b      	cmp	r3, #59	@ 0x3b
 8006772:	d806      	bhi.n	8006782 <vProcessGeneratedUDPPacket+0x9e>
						pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8006774:	2100      	movs	r1, #0
 8006776:	69a2      	ldr	r2, [r4, #24]
 8006778:	54d1      	strb	r1, [r2, r3]
					for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800677a:	3301      	adds	r3, #1
 800677c:	2b3c      	cmp	r3, #60	@ 0x3c
 800677e:	d1fa      	bne.n	8006776 <vProcessGeneratedUDPPacket+0x92>
					pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8006780:	61e3      	str	r3, [r4, #28]
		( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 8006782:	2101      	movs	r1, #1
 8006784:	4620      	mov	r0, r4
 8006786:	f000 fe49 	bl	800741c <xNetworkInterfaceOutput>
}
 800678a:	b003      	add	sp, #12
 800678c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			vARPRefreshCacheEntry( NULL, ulIPAddress );
 800678e:	9901      	ldr	r1, [sp, #4]
 8006790:	f7fa fe4e 	bl	8001430 <vARPRefreshCacheEntry>
			pxNetworkBuffer->ulIPAddress = ulIPAddress;
 8006794:	9b01      	ldr	r3, [sp, #4]
			vARPGenerateRequestPacket( pxNetworkBuffer );
 8006796:	4620      	mov	r0, r4
			pxNetworkBuffer->ulIPAddress = ulIPAddress;
 8006798:	6163      	str	r3, [r4, #20]
			vARPGenerateRequestPacket( pxNetworkBuffer );
 800679a:	f7fa ffbb 	bl	8001714 <vARPGenerateRequestPacket>
 800679e:	e7e6      	b.n	800676e <vProcessGeneratedUDPPacket+0x8a>
						pxIPHeader->ucTimeToLive = 0x01;
 80067a0:	2301      	movs	r3, #1
 80067a2:	75b3      	strb	r3, [r6, #22]
 80067a4:	e7e3      	b.n	800676e <vProcessGeneratedUDPPacket+0x8a>
 80067a6:	bf00      	nop
 80067a8:	20000014 	.word	0x20000014
 80067ac:	fc0000e0 	.word	0xfc0000e0

080067b0 <xProcessReceivedUDPPacket>:
 *
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
									  uint16_t usPort )
{
 80067b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BaseType_t xReturn = pdPASS;
	FreeRTOS_Socket_t * pxSocket;

	configASSERT( pxNetworkBuffer != NULL );
 80067b4:	4604      	mov	r4, r0
{
 80067b6:	b086      	sub	sp, #24
 80067b8:	460e      	mov	r6, r1
	configASSERT( pxNetworkBuffer != NULL );
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d06a      	beq.n	8006894 <xProcessReceivedUDPPacket+0xe4>
	configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 80067be:	69a7      	ldr	r7, [r4, #24]
 80067c0:	2f00      	cmp	r7, #0
 80067c2:	d060      	beq.n	8006886 <xProcessReceivedUDPPacket+0xd6>

	/* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */
	const UDPPacket_t * pxUDPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );

	/* Caller must check for minimum packet size. */
	pxSocket = pxUDPSocketLookup( usPort );
 80067c4:	4630      	mov	r0, r6
 80067c6:	f7fc fd51 	bl	800326c <pxUDPSocketLookup>

	if( pxSocket != NULL )
 80067ca:	4605      	mov	r5, r0
 80067cc:	2800      	cmp	r0, #0
 80067ce:	d043      	beq.n	8006858 <xProcessReceivedUDPPacket+0xa8>
	{
		/* When refreshing the ARP cache with received UDP packets we must be
		 * careful;  hundreds of broadcast messages may pass and if we're not
		 * handling them, no use to fill the ARP cache with those IP addresses. */
		vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 80067d0:	f8d7 101a 	ldr.w	r1, [r7, #26]
 80067d4:	1db8      	adds	r0, r7, #6
 80067d6:	f7fa fe2b 	bl	8001430 <vARPRefreshCacheEntry>

		#if ( ipconfigUSE_CALLBACKS == 1 )
			{
				/* Did the owner of this socket register a reception handler ? */
				if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 80067da:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80067de:	f1b8 0f00 	cmp.w	r8, #0
 80067e2:	d017      	beq.n	8006814 <xProcessReceivedUDPPacket+0x64>
				{
					struct freertos_sockaddr xSourceAddress, destinationAddress;
					void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
					FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
					xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 80067e4:	8c23      	ldrh	r3, [r4, #32]
					xSourceAddress.sin_addr = pxNetworkBuffer->ulIPAddress;
					destinationAddress.sin_port = usPort;
					destinationAddress.sin_addr = pxUDPPacket->xIPHeader.ulDestinationIPAddress;

					/* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
					if( xHandler( ( Socket_t ) pxSocket,
 80067e6:	4628      	mov	r0, r5
					destinationAddress.sin_port = usPort;
 80067e8:	f8ad 6012 	strh.w	r6, [sp, #18]
					xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 80067ec:	f8ad 300a 	strh.w	r3, [sp, #10]
					xSourceAddress.sin_addr = pxNetworkBuffer->ulIPAddress;
 80067f0:	6963      	ldr	r3, [r4, #20]
								  ( void * ) pcData,
								  ( size_t ) ( pxNetworkBuffer->xDataLength - ipUDP_PAYLOAD_OFFSET_IPv4 ),
 80067f2:	69e2      	ldr	r2, [r4, #28]
					xSourceAddress.sin_addr = pxNetworkBuffer->ulIPAddress;
 80067f4:	9303      	str	r3, [sp, #12]
					destinationAddress.sin_addr = pxUDPPacket->xIPHeader.ulDestinationIPAddress;
 80067f6:	f8d7 301e 	ldr.w	r3, [r7, #30]
					if( xHandler( ( Socket_t ) pxSocket,
 80067fa:	3a2a      	subs	r2, #42	@ 0x2a
					void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 80067fc:	69a1      	ldr	r1, [r4, #24]
					destinationAddress.sin_addr = pxUDPPacket->xIPHeader.ulDestinationIPAddress;
 80067fe:	9305      	str	r3, [sp, #20]
					if( xHandler( ( Socket_t ) pxSocket,
 8006800:	ab04      	add	r3, sp, #16
 8006802:	312a      	adds	r1, #42	@ 0x2a
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	ab02      	add	r3, sp, #8
 8006808:	47c0      	blx	r8
 800680a:	b118      	cbz	r0, 8006814 <xProcessReceivedUDPPacket+0x64>
				xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
			}
			else
		#endif /* ipconfigUSE_NBNS */
		{
			xReturn = pdFAIL;
 800680c:	2000      	movs	r0, #0
		}
	}

	return xReturn;
}
 800680e:	b006      	add	sp, #24
 8006810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			vTaskSuspendAll();
 8006814:	f002 fc0c 	bl	8009030 <vTaskSuspendAll>
				taskENTER_CRITICAL();
 8006818:	f003 fa0c 	bl	8009c34 <vPortEnterCritical>
					vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 800681c:	4621      	mov	r1, r4
 800681e:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 8006822:	f001 fe53 	bl	80084cc <vListInsertEnd>
				taskEXIT_CRITICAL();
 8006826:	f003 fa27 	bl	8009c78 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800682a:	f002 fcdf 	bl	80091ec <xTaskResumeAll>
			if( pxSocket->xEventGroup != NULL )
 800682e:	6868      	ldr	r0, [r5, #4]
 8006830:	b110      	cbz	r0, 8006838 <xProcessReceivedUDPPacket+0x88>
				( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8006832:	2101      	movs	r1, #1
 8006834:	f001 fdca 	bl	80083cc <xEventGroupSetBits>
					if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 8006838:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800683a:	b113      	cbz	r3, 8006842 <xProcessReceivedUDPPacket+0x92>
 800683c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800683e:	07d2      	lsls	r2, r2, #31
 8006840:	d41c      	bmi.n	800687c <xProcessReceivedUDPPacket+0xcc>
					if( pxSocket->pxUserSemaphore != NULL )
 8006842:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8006844:	b120      	cbz	r0, 8006850 <xProcessReceivedUDPPacket+0xa0>
						( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 8006846:	2300      	movs	r3, #0
 8006848:	461a      	mov	r2, r3
 800684a:	4619      	mov	r1, r3
 800684c:	f001 ff80 	bl	8008750 <xQueueGenericSend>
{
 8006850:	2001      	movs	r0, #1
}
 8006852:	b006      	add	sp, #24
 8006854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8006858:	f64e 3314 	movw	r3, #60180	@ 0xeb14
 800685c:	429e      	cmp	r6, r3
 800685e:	d002      	beq.n	8006866 <xProcessReceivedUDPPacket+0xb6>
 8006860:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006862:	429a      	cmp	r2, r3
 8006864:	d1d2      	bne.n	800680c <xProcessReceivedUDPPacket+0x5c>
				vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 8006866:	1db8      	adds	r0, r7, #6
 8006868:	f8d7 101a 	ldr.w	r1, [r7, #26]
 800686c:	f7fa fde0 	bl	8001430 <vARPRefreshCacheEntry>
				xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8006870:	4620      	mov	r0, r4
}
 8006872:	b006      	add	sp, #24
 8006874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8006878:	f7fb bad0 	b.w	8001e1c <ulDNSHandlePacket>
						( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 800687c:	2101      	movs	r1, #1
 800687e:	6818      	ldr	r0, [r3, #0]
 8006880:	f001 fda4 	bl	80083cc <xEventGroupSetBits>
 8006884:	e7dd      	b.n	8006842 <xProcessReceivedUDPPacket+0x92>
	configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8006886:	f44f 7193 	mov.w	r1, #294	@ 0x126
 800688a:	4805      	ldr	r0, [pc, #20]	@ (80068a0 <xProcessReceivedUDPPacket+0xf0>)
 800688c:	f7fa fae2 	bl	8000e54 <vAssertCalled>
	const UDPPacket_t * pxUDPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8006890:	69a7      	ldr	r7, [r4, #24]
 8006892:	e797      	b.n	80067c4 <xProcessReceivedUDPPacket+0x14>
	configASSERT( pxNetworkBuffer != NULL );
 8006894:	f240 1125 	movw	r1, #293	@ 0x125
 8006898:	4801      	ldr	r0, [pc, #4]	@ (80068a0 <xProcessReceivedUDPPacket+0xf0>)
 800689a:	f7fa fadb 	bl	8000e54 <vAssertCalled>
 800689e:	e78e      	b.n	80067be <xProcessReceivedUDPPacket+0xe>
 80068a0:	08010140 	.word	0x08010140

080068a4 <xNetworkBuffersInitialise>:
	/*-----------------------------------------------------------*/

#endif /* ipconfigTCP_IP_SANITY */

BaseType_t xNetworkBuffersInitialise( void )
{
 80068a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn, x;

	/* Only initialise the buffers and their associated kernel objects if they
	have not been initialised before. */
	if( xNetworkBufferSemaphore == NULL )
 80068a6:	4f17      	ldr	r7, [pc, #92]	@ (8006904 <xNetworkBuffersInitialise+0x60>)
 80068a8:	6838      	ldr	r0, [r7, #0]
 80068aa:	b118      	cbz	r0, 80068b4 <xNetworkBuffersInitialise+0x10>
	{
		xReturn = pdPASS;
	}

	return xReturn;
}
 80068ac:	3800      	subs	r0, #0
 80068ae:	bf18      	it	ne
 80068b0:	2001      	movne	r0, #1
 80068b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xNetworkBufferSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 80068b4:	2140      	movs	r1, #64	@ 0x40
 80068b6:	4608      	mov	r0, r1
 80068b8:	f001 ff2c 	bl	8008714 <xQueueCreateCountingSemaphore>
 80068bc:	6038      	str	r0, [r7, #0]
		configASSERT( xNetworkBufferSemaphore != NULL );
 80068be:	b1c8      	cbz	r0, 80068f4 <xNetworkBuffersInitialise+0x50>
			vListInitialise( &xFreeBuffersList );
 80068c0:	4c11      	ldr	r4, [pc, #68]	@ (8006908 <xNetworkBuffersInitialise+0x64>)
 80068c2:	4812      	ldr	r0, [pc, #72]	@ (800690c <xNetworkBuffersInitialise+0x68>)
 80068c4:	f001 fdf2 	bl	80084ac <vListInitialise>
			vNetworkInterfaceAllocateRAMToBuffers( xNetworkBuffers );
 80068c8:	4620      	mov	r0, r4
 80068ca:	f504 6610 	add.w	r6, r4, #2304	@ 0x900
				vListInsert( &xFreeBuffersList, &( xNetworkBuffers[ x ].xBufferListItem ) );
 80068ce:	4d0f      	ldr	r5, [pc, #60]	@ (800690c <xNetworkBuffersInitialise+0x68>)
			vNetworkInterfaceAllocateRAMToBuffers( xNetworkBuffers );
 80068d0:	f000 fe66 	bl	80075a0 <vNetworkInterfaceAllocateRAMToBuffers>
				vListInitialiseItem( &( xNetworkBuffers[ x ].xBufferListItem ) );
 80068d4:	4620      	mov	r0, r4
 80068d6:	f001 fdf5 	bl	80084c4 <vListInitialiseItem>
				vListInsert( &xFreeBuffersList, &( xNetworkBuffers[ x ].xBufferListItem ) );
 80068da:	4621      	mov	r1, r4
				listSET_LIST_ITEM_OWNER( &( xNetworkBuffers[ x ].xBufferListItem ), &xNetworkBuffers[ x ] );
 80068dc:	60e4      	str	r4, [r4, #12]
			for( x = 0; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 80068de:	3424      	adds	r4, #36	@ 0x24
				vListInsert( &xFreeBuffersList, &( xNetworkBuffers[ x ].xBufferListItem ) );
 80068e0:	4628      	mov	r0, r5
 80068e2:	f001 fe01 	bl	80084e8 <vListInsert>
			for( x = 0; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 80068e6:	42a6      	cmp	r6, r4
 80068e8:	d1f4      	bne.n	80068d4 <xNetworkBuffersInitialise+0x30>
			uxMinimumFreeNetworkBuffers = ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 80068ea:	4b09      	ldr	r3, [pc, #36]	@ (8006910 <xNetworkBuffersInitialise+0x6c>)
 80068ec:	2240      	movs	r2, #64	@ 0x40
	if( xNetworkBufferSemaphore == NULL )
 80068ee:	6838      	ldr	r0, [r7, #0]
			uxMinimumFreeNetworkBuffers = ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	e7db      	b.n	80068ac <xNetworkBuffersInitialise+0x8>
		configASSERT( xNetworkBufferSemaphore != NULL );
 80068f4:	4807      	ldr	r0, [pc, #28]	@ (8006914 <xNetworkBuffersInitialise+0x70>)
 80068f6:	21af      	movs	r1, #175	@ 0xaf
 80068f8:	f7fa faac 	bl	8000e54 <vAssertCalled>
		if( xNetworkBufferSemaphore != NULL )
 80068fc:	6838      	ldr	r0, [r7, #0]
 80068fe:	2800      	cmp	r0, #0
 8006900:	d0d4      	beq.n	80068ac <xNetworkBuffersInitialise+0x8>
 8006902:	e7dd      	b.n	80068c0 <xNetworkBuffersInitialise+0x1c>
 8006904:	200003b8 	.word	0x200003b8
 8006908:	200003bc 	.word	0x200003bc
 800690c:	20000cc0 	.word	0x20000cc0
 8006910:	20000cbc 	.word	0x20000cbc
 8006914:	08010178 	.word	0x08010178

08006918 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes, TickType_t xBlockTimeTicks )
{
 8006918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* The current implementation only has a single size memory block, so
	the requested size parameter is not used (yet). */
	( void ) xRequestedSizeBytes;

	if( xNetworkBufferSemaphore != NULL )
 800691a:	4b18      	ldr	r3, [pc, #96]	@ (800697c <pxGetNetworkBufferWithDescriptor+0x64>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	b30b      	cbz	r3, 8006964 <pxGetNetworkBufferWithDescriptor+0x4c>
 8006920:	4606      	mov	r6, r0
	{
		/* If there is a semaphore available, there is a network buffer
		available. */
		if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 8006922:	4618      	mov	r0, r3
 8006924:	f002 f8a0 	bl	8008a68 <xQueueSemaphoreTake>
 8006928:	2801      	cmp	r0, #1
 800692a:	4604      	mov	r4, r0
 800692c:	d115      	bne.n	800695a <pxGetNetworkBufferWithDescriptor+0x42>
		{
			/* Protect the structure as it is accessed from tasks and
			interrupts. */
			ipconfigBUFFER_ALLOC_LOCK();
 800692e:	f003 f981 	bl	8009c34 <vPortEnterCritical>
			{
				pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 8006932:	4b13      	ldr	r3, [pc, #76]	@ (8006980 <pxGetNetworkBufferWithDescriptor+0x68>)
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	68d5      	ldr	r5, [r2, #12]

				if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 8006938:	692f      	ldr	r7, [r5, #16]
 800693a:	429f      	cmp	r7, r3
 800693c:	d115      	bne.n	800696a <pxGetNetworkBufferWithDescriptor+0x52>
					listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxReturn->xBufferListItem ) ) )
				{
					( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 800693e:	4628      	mov	r0, r5
 8006940:	f001 fdea 	bl	8008518 <uxListRemove>
				else
				{
					xInvalid = pdTRUE;
				}
			}
			ipconfigBUFFER_ALLOC_UNLOCK();
 8006944:	f003 f998 	bl	8009c78 <vPortExitCritical>
				/* Reading UBaseType_t, no critical section needed. */
				uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );

				/* For stats, latch the lowest number of network buffers since
				booting. */
				if( uxMinimumFreeNetworkBuffers > uxCount )
 8006948:	4b0e      	ldr	r3, [pc, #56]	@ (8006984 <pxGetNetworkBufferWithDescriptor+0x6c>)
				uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 800694a:	683a      	ldr	r2, [r7, #0]
				if( uxMinimumFreeNetworkBuffers > uxCount )
 800694c:	6819      	ldr	r1, [r3, #0]
 800694e:	4291      	cmp	r1, r2
 8006950:	d900      	bls.n	8006954 <pxGetNetworkBufferWithDescriptor+0x3c>
				{
					uxMinimumFreeNetworkBuffers = uxCount;
 8006952:	601a      	str	r2, [r3, #0]
			iptraceFAILED_TO_OBTAIN_NETWORK_BUFFER();
		}
	}

	return pxReturn;
}
 8006954:	4628      	mov	r0, r5
				pxReturn->xDataLength = xRequestedSizeBytes;
 8006956:	61ee      	str	r6, [r5, #28]
}
 8006958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			iptraceFAILED_TO_OBTAIN_NETWORK_BUFFER();
 800695a:	f240 1121 	movw	r1, #289	@ 0x121
 800695e:	480a      	ldr	r0, [pc, #40]	@ (8006988 <pxGetNetworkBufferWithDescriptor+0x70>)
 8006960:	f7fa fa78 	bl	8000e54 <vAssertCalled>
NetworkBufferDescriptor_t *pxReturn = NULL;
 8006964:	2500      	movs	r5, #0
}
 8006966:	4628      	mov	r0, r5
 8006968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ipconfigBUFFER_ALLOC_UNLOCK();
 800696a:	f003 f985 	bl	8009c78 <vPortExitCritical>
				FreeRTOS_debug_printf( ( "pxGetNetworkBufferWithDescriptor: INVALID BUFFER: %p (valid %lu)\n",
 800696e:	4622      	mov	r2, r4
 8006970:	4629      	mov	r1, r5
 8006972:	4806      	ldr	r0, [pc, #24]	@ (800698c <pxGetNetworkBufferWithDescriptor+0x74>)
 8006974:	f006 fa62 	bl	800ce3c <lUDPLoggingPrintf>
				pxReturn = NULL;
 8006978:	e7f4      	b.n	8006964 <pxGetNetworkBufferWithDescriptor+0x4c>
 800697a:	bf00      	nop
 800697c:	200003b8 	.word	0x200003b8
 8006980:	20000cc0 	.word	0x20000cc0
 8006984:	20000cbc 	.word	0x20000cbc
 8006988:	08010178 	.word	0x08010178
 800698c:	080101cc 	.word	0x080101cc

08006990 <vReleaseNetworkBufferAndDescriptor>:
	return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8006990:	b570      	push	{r4, r5, r6, lr}
 8006992:	4604      	mov	r4, r0
	}
	else
	{
		/* Ensure the buffer is returned to the list of free buffers before the
		counting semaphore is 'given' to say a buffer is available. */
		ipconfigBUFFER_ALLOC_LOCK();
 8006994:	f003 f94e 	bl	8009c34 <vPortEnterCritical>
		{
			{
				xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8006998:	480d      	ldr	r0, [pc, #52]	@ (80069d0 <vReleaseNetworkBufferAndDescriptor+0x40>)
 800699a:	6925      	ldr	r5, [r4, #16]
 800699c:	4285      	cmp	r5, r0
 800699e:	d00d      	beq.n	80069bc <vReleaseNetworkBufferAndDescriptor+0x2c>

				if( xListItemAlreadyInFreeList == pdFALSE )
				{
					vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 80069a0:	4621      	mov	r1, r4
 80069a2:	f001 fd93 	bl	80084cc <vListInsertEnd>
				}
			}
		}
		ipconfigBUFFER_ALLOC_UNLOCK();
 80069a6:	f003 f967 	bl	8009c78 <vPortExitCritical>
			FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: %p ALREADY RELEASED (now %lu)\n",
				pxNetworkBuffer, uxGetNumberOfFreeNetworkBuffers( ) ) );
		}
		else
		{
			( void ) xSemaphoreGive( xNetworkBufferSemaphore );
 80069aa:	2300      	movs	r3, #0
 80069ac:	4809      	ldr	r0, [pc, #36]	@ (80069d4 <vReleaseNetworkBufferAndDescriptor+0x44>)
 80069ae:	461a      	mov	r2, r3
 80069b0:	4619      	mov	r1, r3
 80069b2:	6800      	ldr	r0, [r0, #0]
			prvShowWarnings();
		}
		iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
	}
}
 80069b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			( void ) xSemaphoreGive( xNetworkBufferSemaphore );
 80069b8:	f001 beca 	b.w	8008750 <xQueueGenericSend>
		ipconfigBUFFER_ALLOC_UNLOCK();
 80069bc:	f003 f95c 	bl	8009c78 <vPortExitCritical>
}
/*-----------------------------------------------------------*/

UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
	return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 80069c0:	682a      	ldr	r2, [r5, #0]
			FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: %p ALREADY RELEASED (now %lu)\n",
 80069c2:	4621      	mov	r1, r4
 80069c4:	4804      	ldr	r0, [pc, #16]	@ (80069d8 <vReleaseNetworkBufferAndDescriptor+0x48>)
}
 80069c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: %p ALREADY RELEASED (now %lu)\n",
 80069ca:	f006 ba37 	b.w	800ce3c <lUDPLoggingPrintf>
 80069ce:	bf00      	nop
 80069d0:	20000cc0 	.word	0x20000cc0
 80069d4:	200003b8 	.word	0x200003b8
 80069d8:	08010210 	.word	0x08010210

080069dc <uxGetMinimumFreeNetworkBuffers>:
	return uxMinimumFreeNetworkBuffers;
 80069dc:	4b01      	ldr	r3, [pc, #4]	@ (80069e4 <uxGetMinimumFreeNetworkBuffers+0x8>)
}
 80069de:	6818      	ldr	r0, [r3, #0]
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	20000cbc 	.word	0x20000cbc

080069e8 <uxGetNumberOfFreeNetworkBuffers>:
	return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 80069e8:	4b01      	ldr	r3, [pc, #4]	@ (80069f0 <uxGetNumberOfFreeNetworkBuffers+0x8>)
 80069ea:	6818      	ldr	r0, [r3, #0]
}
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	20000cc0 	.word	0x20000cc0

080069f4 <vPhyInitialise>:
}
/*-----------------------------------------------------------*/

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t *pxPhyObject, xApplicationPhyReadHook_t fnPhyRead, xApplicationPhyWriteHook_t fnPhyWrite )
{
 80069f4:	b570      	push	{r4, r5, r6, lr}
 80069f6:	460e      	mov	r6, r1
 80069f8:	4604      	mov	r4, r0
 80069fa:	4615      	mov	r5, r2
	memset( ( void * )pxPhyObject, 0, sizeof( *pxPhyObject ) );
 80069fc:	2100      	movs	r1, #0
 80069fe:	2238      	movs	r2, #56	@ 0x38
 8006a00:	3008      	adds	r0, #8
 8006a02:	f006 fcb1 	bl	800d368 <memset>

	pxPhyObject->fnPhyRead = fnPhyRead;
	pxPhyObject->fnPhyWrite = fnPhyWrite;
 8006a06:	e9c4 6500 	strd	r6, r5, [r4]
}
 8006a0a:	bd70      	pop	{r4, r5, r6, pc}

08006a0c <xPhyDiscover>:
/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t *pxPhyObject )
{
BaseType_t xPhyAddress;

	pxPhyObject->xPortCount = 0;
 8006a0c:	2300      	movs	r3, #0
{
 8006a0e:	b570      	push	{r4, r5, r6, lr}
	{
	uint32_t ulLowerID;

		pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
		/* A valid PHY id can not be all zeros or all ones. */
		if( ( ulLowerID != ( uint16_t ) ~0U )  && ( ulLowerID != ( uint16_t ) 0U ) )
 8006a10:	f64f 76ff 	movw	r6, #65535	@ 0xffff
{
 8006a14:	b082      	sub	sp, #8
 8006a16:	4605      	mov	r5, r0
	for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8006a18:	461c      	mov	r4, r3
	pxPhyObject->xPortCount = 0;
 8006a1a:	6283      	str	r3, [r0, #40]	@ 0x28
		pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 8006a1c:	466a      	mov	r2, sp
 8006a1e:	2103      	movs	r1, #3
 8006a20:	682b      	ldr	r3, [r5, #0]
 8006a22:	4620      	mov	r0, r4
 8006a24:	4798      	blx	r3
		if( ( ulLowerID != ( uint16_t ) ~0U )  && ( ulLowerID != ( uint16_t ) 0U ) )
 8006a26:	9b00      	ldr	r3, [sp, #0]
		{
		uint32_t ulUpperID;
		uint32_t ulPhyID;

			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 8006a28:	4620      	mov	r0, r4
 8006a2a:	aa01      	add	r2, sp, #4
		if( ( ulLowerID != ( uint16_t ) ~0U )  && ( ulLowerID != ( uint16_t ) 0U ) )
 8006a2c:	42b3      	cmp	r3, r6
			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 8006a2e:	f04f 0102 	mov.w	r1, #2
		if( ( ulLowerID != ( uint16_t ) ~0U )  && ( ulLowerID != ( uint16_t ) 0U ) )
 8006a32:	d015      	beq.n	8006a60 <xPhyDiscover+0x54>
 8006a34:	b1a3      	cbz	r3, 8006a60 <xPhyDiscover+0x54>
			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 8006a36:	682b      	ldr	r3, [r5, #0]
 8006a38:	4798      	blx	r3
			ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0 );

			pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = xPhyAddress;
 8006a3a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
			ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0 );
 8006a3c:	9800      	ldr	r0, [sp, #0]
 8006a3e:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
			pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = xPhyAddress;
 8006a42:	eb05 0c03 	add.w	ip, r5, r3
			ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0 );
 8006a46:	9901      	ldr	r1, [sp, #4]
 8006a48:	4002      	ands	r2, r0
			pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 8006a4a:	1c98      	adds	r0, r3, #2

			pxPhyObject->xPortCount++;
 8006a4c:	3301      	adds	r3, #1
			pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = xPhyAddress;
 8006a4e:	f88c 4018 	strb.w	r4, [ip, #24]
			ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0 );
 8006a52:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

			/* See if there is more storage space. */
			if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 8006a56:	2b04      	cmp	r3, #4
			pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 8006a58:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
			pxPhyObject->xPortCount++;
 8006a5c:	62ab      	str	r3, [r5, #40]	@ 0x28
			if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 8006a5e:	d007      	beq.n	8006a70 <xPhyDiscover+0x64>
	for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8006a60:	3401      	adds	r4, #1
 8006a62:	2c20      	cmp	r4, #32
 8006a64:	d1da      	bne.n	8006a1c <xPhyDiscover+0x10>
			{
				break;
			}
		}
	}
	if( pxPhyObject->xPortCount > 0 )
 8006a66:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	dc01      	bgt.n	8006a70 <xPhyDiscover+0x64>
	{
		FreeRTOS_printf( ( "PHY ID %lX\n", pxPhyObject->ulPhyIDs[ 0 ] ) );
	}

	return pxPhyObject->xPortCount;
}
 8006a6c:	b002      	add	sp, #8
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}
		FreeRTOS_printf( ( "PHY ID %lX\n", pxPhyObject->ulPhyIDs[ 0 ] ) );
 8006a70:	68a9      	ldr	r1, [r5, #8]
 8006a72:	4803      	ldr	r0, [pc, #12]	@ (8006a80 <xPhyDiscover+0x74>)
 8006a74:	f006 f9e2 	bl	800ce3c <lUDPLoggingPrintf>
	return pxPhyObject->xPortCount;
 8006a78:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
}
 8006a7a:	b002      	add	sp, #8
 8006a7c:	bd70      	pop	{r4, r5, r6, pc}
 8006a7e:	bf00      	nop
 8006a80:	08010258 	.word	0x08010258

08006a84 <xPhyConfigure>:
BaseType_t xPhyConfigure( EthernetPhy_t *pxPhyObject, const PhyProperties_t *pxPhyProperties )
{
uint32_t ulConfig, ulAdvertise;
BaseType_t xPhyIndex;

	if( pxPhyObject->xPortCount < 1 )
 8006a84:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006a86:	2b00      	cmp	r3, #0
{
 8006a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a8c:	b087      	sub	sp, #28
	if( pxPhyObject->xPortCount < 1 )
 8006a8e:	f340 810e 	ble.w	8006cae <xPhyConfigure+0x22a>
	/* The expected ID for the 'LAN8742A'  is 0x0007c130. */
	/* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
	/* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
	if( ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_AUTO ) )
 8006a92:	780a      	ldrb	r2, [r1, #0]
 8006a94:	4688      	mov	r8, r1
 8006a96:	4604      	mov	r4, r0
 8006a98:	7889      	ldrb	r1, [r1, #2]
 8006a9a:	2a03      	cmp	r2, #3
 8006a9c:	f000 80eb 	beq.w	8006c76 <xPhyConfigure+0x1f2>
			else
			{
				ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
			}
		}
		else if( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_AUTO )
 8006aa0:	2903      	cmp	r1, #3
 8006aa2:	f000 80f1 	beq.w	8006c88 <xPhyConfigure+0x204>
			else
			{
				ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
			}
		}
		else if( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_100 )
 8006aa6:	2a02      	cmp	r2, #2
 8006aa8:	f000 80f6 	beq.w	8006c98 <xPhyConfigure+0x214>
		}
		else
		{
			if( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_FULL )
			{
				ulAdvertise |= phyADVERTISE_10FULL;
 8006aac:	2902      	cmp	r1, #2
 8006aae:	bf14      	ite	ne
 8006ab0:	2221      	movne	r2, #33	@ 0x21
 8006ab2:	2241      	moveq	r2, #65	@ 0x41
 8006ab4:	9201      	str	r2, [sp, #4]
			}
		}
	}

	/* Send a reset command to a set of PHY-ports. */
	xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 8006ab6:	2601      	movs	r6, #1
 8006ab8:	f104 0917 	add.w	r9, r4, #23
 8006abc:	409e      	lsls	r6, r3
 8006abe:	464f      	mov	r7, r9
 8006ac0:	3e01      	subs	r6, #1
	BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8006ac2:	463d      	mov	r5, r7
 8006ac4:	f817 af01 	ldrb.w	sl, [r7, #1]!
		pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8006ac8:	aa02      	add	r2, sp, #8
 8006aca:	2100      	movs	r1, #0
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	4650      	mov	r0, sl
 8006ad0:	4798      	blx	r3
		pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8006ad2:	9a02      	ldr	r2, [sp, #8]
	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006ad4:	3d16      	subs	r5, #22
		pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8006ad6:	6863      	ldr	r3, [r4, #4]
 8006ad8:	4650      	mov	r0, sl
 8006ada:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ade:	2100      	movs	r1, #0
	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006ae0:	1b2d      	subs	r5, r5, r4
		pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8006ae2:	4798      	blx	r3
	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006ae4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006ae6:	42ab      	cmp	r3, r5
 8006ae8:	dceb      	bgt.n	8006ac2 <xPhyConfigure+0x3e>
	xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8006aea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
	ulDoneMask = 0UL;
 8006aee:	2500      	movs	r5, #0
				FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", (int)xPhyIndex ) );
 8006af0:	f8df a1d8 	ldr.w	sl, [pc, #472]	@ 8006ccc <xPhyConfigure+0x248>
				ulDoneMask |= ( 1UL << xPhyIndex );
 8006af4:	2701      	movs	r7, #1
	vTaskSetTimeOutState( &xTimer );
 8006af6:	a804      	add	r0, sp, #16
	xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8006af8:	9303      	str	r3, [sp, #12]
	vTaskSetTimeOutState( &xTimer );
 8006afa:	f002 fd57 	bl	80095ac <vTaskSetTimeOutState>
 8006afe:	9600      	str	r6, [sp, #0]
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006b00:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	dd10      	ble.n	8006b28 <xPhyConfigure+0xa4>
 8006b06:	46a3      	mov	fp, r4
			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8006b08:	6823      	ldr	r3, [r4, #0]
 8006b0a:	aa02      	add	r2, sp, #8
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	f89b 0018 	ldrb.w	r0, [fp, #24]
 8006b12:	4798      	blx	r3
			if( ( ulConfig & phyBMCR_RESET ) == 0 )
 8006b14:	9b02      	ldr	r3, [sp, #8]
 8006b16:	041b      	lsls	r3, r3, #16
 8006b18:	d512      	bpl.n	8006b40 <xPhyConfigure+0xbc>
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006b1a:	f10b 0b01 	add.w	fp, fp, #1
 8006b1e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006b20:	ebab 0204 	sub.w	r2, fp, r4
 8006b24:	4293      	cmp	r3, r2
 8006b26:	dcef      	bgt.n	8006b08 <xPhyConfigure+0x84>
		if( ulDoneMask == ulPhyMask )
 8006b28:	9a00      	ldr	r2, [sp, #0]
 8006b2a:	42aa      	cmp	r2, r5
 8006b2c:	d017      	beq.n	8006b5e <xPhyConfigure+0xda>
		if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8006b2e:	a903      	add	r1, sp, #12
 8006b30:	a804      	add	r0, sp, #16
 8006b32:	f002 fd63 	bl	80095fc <xTaskCheckForTimeOut>
 8006b36:	b968      	cbnz	r0, 8006b54 <xPhyConfigure+0xd0>
		vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8006b38:	2032      	movs	r0, #50	@ 0x32
 8006b3a:	f002 fbed 	bl	8009318 <vTaskDelay>
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006b3e:	e7df      	b.n	8006b00 <xPhyConfigure+0x7c>
 8006b40:	ebab 0604 	sub.w	r6, fp, r4
				FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", (int)xPhyIndex ) );
 8006b44:	4650      	mov	r0, sl
 8006b46:	4631      	mov	r1, r6
 8006b48:	f006 f978 	bl	800ce3c <lUDPLoggingPrintf>
				ulDoneMask |= ( 1UL << xPhyIndex );
 8006b4c:	fa07 f106 	lsl.w	r1, r7, r6
 8006b50:	430d      	orrs	r5, r1
 8006b52:	e7e2      	b.n	8006b1a <xPhyConfigure+0x96>
			FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02lX )\n", ulDoneMask ) );
 8006b54:	4629      	mov	r1, r5
 8006b56:	4859      	ldr	r0, [pc, #356]	@ (8006cbc <xPhyConfigure+0x238>)
 8006b58:	f006 f970 	bl	800ce3c <lUDPLoggingPrintf>
			break;
 8006b5c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	dd1b      	ble.n	8006b9a <xPhyConfigure+0x116>
 8006b62:	2700      	movs	r7, #0
		BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8006b64:	f104 0b18 	add.w	fp, r4, #24
 8006b68:	46ca      	mov	sl, r9
		if( ( ulDoneMask & ( 1UL << xPhyIndex ) ) == 0UL )
 8006b6a:	fa25 f607 	lsr.w	r6, r5, r7
			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8006b6e:	aa02      	add	r2, sp, #8
		if( ( ulDoneMask & ( 1UL << xPhyIndex ) ) == 0UL )
 8006b70:	f016 0601 	ands.w	r6, r6, #1
			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8006b74:	4631      	mov	r1, r6
		if( ( ulDoneMask & ( 1UL << xPhyIndex ) ) == 0UL )
 8006b76:	d10c      	bne.n	8006b92 <xPhyConfigure+0x10e>
		BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8006b78:	f81b 9007 	ldrb.w	r9, [fp, r7]
			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	4648      	mov	r0, r9
 8006b80:	4798      	blx	r3
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 8006b82:	9a02      	ldr	r2, [sp, #8]
 8006b84:	6863      	ldr	r3, [r4, #4]
 8006b86:	4631      	mov	r1, r6
 8006b88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b8c:	4648      	mov	r0, r9
 8006b8e:	4798      	blx	r3
 8006b90:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006b92:	3701      	adds	r7, #1
 8006b94:	429f      	cmp	r7, r3
 8006b96:	dbe8      	blt.n	8006b6a <xPhyConfigure+0xe6>
 8006b98:	46d1      	mov	r9, sl
	vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8006b9a:	2032      	movs	r0, #50	@ 0x32
 8006b9c:	f002 fbbc 	bl	8009318 <vTaskDelay>

	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006ba0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	dd59      	ble.n	8006c5a <xPhyConfigure+0x1d6>
 8006ba6:	1d27      	adds	r7, r4, #4
	switch( ulPhyID )
 8006ba8:	f8df b124 	ldr.w	fp, [pc, #292]	@ 8006cd0 <xPhyConfigure+0x24c>
 8006bac:	e016      	b.n	8006bdc <xPhyConfigure+0x158>

		if( ( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_AUTO ) )
		{
			ulConfig |= phyBMCR_FULL_DUPLEX;
		}
		else if( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_HALF )
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d103      	bne.n	8006bba <xPhyConfigure+0x136>
		{
			ulConfig &= ~phyBMCR_FULL_DUPLEX;
 8006bb2:	9b03      	ldr	r3, [sp, #12]
 8006bb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bb8:	9303      	str	r3, [sp, #12]
	switch( ulPhyID )
 8006bba:	455e      	cmp	r6, fp
 8006bbc:	d036      	beq.n	8006c2c <xPhyConfigure+0x1a8>
 8006bbe:	4b40      	ldr	r3, [pc, #256]	@ (8006cc0 <xPhyConfigure+0x23c>)
 8006bc0:	429e      	cmp	r6, r3
 8006bc2:	d033      	beq.n	8006c2c <xPhyConfigure+0x1a8>
	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006bc4:	f1aa 0a16 	sub.w	sl, sl, #22
			}
			/* update PHY Control Register. */
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
		}

		FreeRTOS_printf( ( "+TCP: advertise: %04lX config %04lX\n", ulAdvertise, ulConfig ) );
 8006bc8:	9a03      	ldr	r2, [sp, #12]
 8006bca:	9901      	ldr	r1, [sp, #4]
 8006bcc:	483d      	ldr	r0, [pc, #244]	@ (8006cc4 <xPhyConfigure+0x240>)
	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006bce:	ebaa 0a04 	sub.w	sl, sl, r4
		FreeRTOS_printf( ( "+TCP: advertise: %04lX config %04lX\n", ulAdvertise, ulConfig ) );
 8006bd2:	f006 f933 	bl	800ce3c <lUDPLoggingPrintf>
	for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8006bd6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006bd8:	459a      	cmp	sl, r3
 8006bda:	da3e      	bge.n	8006c5a <xPhyConfigure+0x1d6>
	BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8006bdc:	46ca      	mov	sl, r9
 8006bde:	f819 5f01 	ldrb.w	r5, [r9, #1]!
		pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 8006be2:	9a01      	ldr	r2, [sp, #4]
 8006be4:	2104      	movs	r1, #4
 8006be6:	6863      	ldr	r3, [r4, #4]
 8006be8:	4628      	mov	r0, r5
	uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8006bea:	f857 6f04 	ldr.w	r6, [r7, #4]!
		pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 8006bee:	4798      	blx	r3
		pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	aa03      	add	r2, sp, #12
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	4798      	blx	r3
		ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 8006bfa:	9b03      	ldr	r3, [sp, #12]
		if( ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_AUTO ) )
 8006bfc:	f898 2000 	ldrb.w	r2, [r8]
		ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 8006c00:	f423 5304 	bic.w	r3, r3, #8448	@ 0x2100
		if( ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_AUTO ) )
 8006c04:	3a02      	subs	r2, #2
		ulConfig |= phyBMCR_AN_ENABLE;
 8006c06:	f443 5180 	orr.w	r1, r3, #4096	@ 0x1000
		if( ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_AUTO ) )
 8006c0a:	2a01      	cmp	r2, #1
		ulConfig |= phyBMCR_AN_ENABLE;
 8006c0c:	9103      	str	r1, [sp, #12]
		if( ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_AUTO ) )
 8006c0e:	d802      	bhi.n	8006c16 <xPhyConfigure+0x192>
			ulConfig |= phyBMCR_SPEED_100;
 8006c10:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8006c14:	9303      	str	r3, [sp, #12]
		if( ( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_AUTO ) )
 8006c16:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006c1a:	1e9a      	subs	r2, r3, #2
 8006c1c:	2a01      	cmp	r2, #1
 8006c1e:	d8c6      	bhi.n	8006bae <xPhyConfigure+0x12a>
			ulConfig |= phyBMCR_FULL_DUPLEX;
 8006c20:	9b03      	ldr	r3, [sp, #12]
	switch( ulPhyID )
 8006c22:	455e      	cmp	r6, fp
			ulConfig |= phyBMCR_FULL_DUPLEX;
 8006c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c28:	9303      	str	r3, [sp, #12]
	switch( ulPhyID )
 8006c2a:	d1c8      	bne.n	8006bbe <xPhyConfigure+0x13a>
			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	aa04      	add	r2, sp, #16
 8006c30:	2119      	movs	r1, #25
 8006c32:	4628      	mov	r0, r5
 8006c34:	4798      	blx	r3
			ulPhyControl &= ~( PHYCR_MDIX_EN|PHYCR_MDIX_FORCE );
 8006c36:	9a04      	ldr	r2, [sp, #16]
			if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 8006c38:	f898 3001 	ldrb.w	r3, [r8, #1]
			ulPhyControl &= ~( PHYCR_MDIX_EN|PHYCR_MDIX_FORCE );
 8006c3c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
			if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 8006c40:	2b03      	cmp	r3, #3
			ulPhyControl &= ~( PHYCR_MDIX_EN|PHYCR_MDIX_FORCE );
 8006c42:	9204      	str	r2, [sp, #16]
			if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 8006c44:	d013      	beq.n	8006c6e <xPhyConfigure+0x1ea>
			else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d002      	beq.n	8006c50 <xPhyConfigure+0x1cc>
				ulPhyControl |= PHYCR_MDIX_FORCE;
 8006c4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c4e:	9204      	str	r2, [sp, #16]
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 8006c50:	4628      	mov	r0, r5
 8006c52:	6863      	ldr	r3, [r4, #4]
 8006c54:	2119      	movs	r1, #25
 8006c56:	4798      	blx	r3
 8006c58:	e7b4      	b.n	8006bc4 <xPhyConfigure+0x140>
	}

	/* Keep these values for later use. */
	pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 8006c5a:	9b03      	ldr	r3, [sp, #12]
	pxPhyObject->ulACRValue = ulAdvertise;

	return 0;
 8006c5c:	2000      	movs	r0, #0
	pxPhyObject->ulACRValue = ulAdvertise;
 8006c5e:	9a01      	ldr	r2, [sp, #4]
	pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 8006c60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
	pxPhyObject->ulACRValue = ulAdvertise;
 8006c64:	6322      	str	r2, [r4, #48]	@ 0x30
	pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 8006c66:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 8006c68:	b007      	add	sp, #28
 8006c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ulPhyControl |= PHYCR_MDIX_EN;
 8006c6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c72:	9204      	str	r2, [sp, #16]
 8006c74:	e7ec      	b.n	8006c50 <xPhyConfigure+0x1cc>
	if( ( pxPhyProperties->ucSpeed == ( uint8_t )PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t )PHY_DUPLEX_AUTO ) )
 8006c76:	2903      	cmp	r1, #3
 8006c78:	d015      	beq.n	8006ca6 <xPhyConfigure+0x222>
				ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 8006c7a:	2902      	cmp	r1, #2
 8006c7c:	f240 1241 	movw	r2, #321	@ 0x141
 8006c80:	bf18      	it	ne
 8006c82:	22a1      	movne	r2, #161	@ 0xa1
 8006c84:	9201      	str	r2, [sp, #4]
 8006c86:	e716      	b.n	8006ab6 <xPhyConfigure+0x32>
				ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 8006c88:	2a01      	cmp	r2, #1
 8006c8a:	f240 1181 	movw	r1, #385	@ 0x181
 8006c8e:	bf0c      	ite	eq
 8006c90:	2261      	moveq	r2, #97	@ 0x61
 8006c92:	460a      	movne	r2, r1
 8006c94:	9201      	str	r2, [sp, #4]
 8006c96:	e70e      	b.n	8006ab6 <xPhyConfigure+0x32>
				ulAdvertise |= phyADVERTISE_100FULL;
 8006c98:	2902      	cmp	r1, #2
 8006c9a:	f240 1201 	movw	r2, #257	@ 0x101
 8006c9e:	bf18      	it	ne
 8006ca0:	2281      	movne	r2, #129	@ 0x81
 8006ca2:	9201      	str	r2, [sp, #4]
 8006ca4:	e707      	b.n	8006ab6 <xPhyConfigure+0x32>
		ulAdvertise = phyADVERTISE_ALL;
 8006ca6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8006caa:	9201      	str	r2, [sp, #4]
 8006cac:	e703      	b.n	8006ab6 <xPhyConfigure+0x32>
		FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
 8006cae:	4806      	ldr	r0, [pc, #24]	@ (8006cc8 <xPhyConfigure+0x244>)
 8006cb0:	f006 f8c4 	bl	800ce3c <lUDPLoggingPrintf>
		return -1;
 8006cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb8:	e7d6      	b.n	8006c68 <xPhyConfigure+0x1e4>
 8006cba:	bf00      	nop
 8006cbc:	080102ac 	.word	0x080102ac
 8006cc0:	20005c90 	.word	0x20005c90
 8006cc4:	080102e4 	.word	0x080102e4
 8006cc8:	08010264 	.word	0x08010264
 8006ccc:	08010288 	.word	0x08010288
 8006cd0:	0007c130 	.word	0x0007c130

08006cd4 <xPhyStartAutoNegotiation>:
uint32_t xPhyIndex, ulDoneMask, ulBitMask;
uint32_t ulPHYLinkStatus, ulRegValue;
TickType_t xRemainingTime;
TimeOut_t xTimer;

	if( ulPhyMask == ( uint32_t ) 0U )
 8006cd4:	2900      	cmp	r1, #0
 8006cd6:	d04f      	beq.n	8006d78 <xPhyStartAutoNegotiation+0xa4>
	{
		return 0;
	}
	for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8006cd8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8006cda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cde:	4604      	mov	r4, r0
 8006ce0:	b089      	sub	sp, #36	@ 0x24
 8006ce2:	4688      	mov	r8, r1
	for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8006ce4:	b1bb      	cbz	r3, 8006d16 <xPhyStartAutoNegotiation+0x42>
 8006ce6:	2500      	movs	r5, #0
	{
		if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
		{
		BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8006ce8:	f100 0618 	add.w	r6, r0, #24
		if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 8006cec:	fa28 f205 	lsr.w	r2, r8, r5

			/* Enable Auto-Negotiation. */
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue);
 8006cf0:	2104      	movs	r1, #4
		if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 8006cf2:	07d0      	lsls	r0, r2, #31
 8006cf4:	d50c      	bpl.n	8006d10 <xPhyStartAutoNegotiation+0x3c>
		BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8006cf6:	5d77      	ldrb	r7, [r6, r5]
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue);
 8006cf8:	6863      	ldr	r3, [r4, #4]
 8006cfa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8006cfc:	4638      	mov	r0, r7
 8006cfe:	4798      	blx	r3
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 8006d00:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006d02:	6863      	ldr	r3, [r4, #4]
 8006d04:	4638      	mov	r0, r7
 8006d06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	4798      	blx	r3
 8006d0e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
	for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8006d10:	3501      	adds	r5, #1
 8006d12:	42ab      	cmp	r3, r5
 8006d14:	d8ea      	bhi.n	8006cec <xPhyStartAutoNegotiation+0x18>
		}
	}
	xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 8006d16:	f06f 0917 	mvn.w	r9, #23
 8006d1a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
	vTaskSetTimeOutState( &xTimer );
	ulDoneMask = 0;
 8006d1e:	2500      	movs	r5, #0
	vTaskSetTimeOutState( &xTimer );
 8006d20:	a806      	add	r0, sp, #24
 8006d22:	eba9 0904 	sub.w	r9, r9, r4
	xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 8006d26:	9304      	str	r3, [sp, #16]
	vTaskSetTimeOutState( &xTimer );
 8006d28:	f002 fc40 	bl	80095ac <vTaskSetTimeOutState>
	/* Wait until the auto-negotiation will be completed */
	for( ;; )
	{
		ulBitMask = ( uint32_t ) 1U;
		for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006d2c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006d2e:	b1c3      	cbz	r3, 8006d62 <xPhyStartAutoNegotiation+0x8e>
 8006d30:	f104 0718 	add.w	r7, r4, #24
		ulBitMask = ( uint32_t ) 1U;
 8006d34:	2601      	movs	r6, #1
		{
			if( ( ulPhyMask & ulBitMask ) != 0lu )
 8006d36:	ea18 0f06 	tst.w	r8, r6
 8006d3a:	d00c      	beq.n	8006d56 <xPhyStartAutoNegotiation+0x82>
			{
				if( ( ulDoneMask & ulBitMask ) == 0lu )
 8006d3c:	422e      	tst	r6, r5
				{
				BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];

					pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8006d3e:	aa03      	add	r2, sp, #12
 8006d40:	f04f 0101 	mov.w	r1, #1
				if( ( ulDoneMask & ulBitMask ) == 0lu )
 8006d44:	d107      	bne.n	8006d56 <xPhyStartAutoNegotiation+0x82>
					pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	7838      	ldrb	r0, [r7, #0]
 8006d4a:	4798      	blx	r3
					if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 8006d4c:	9b03      	ldr	r3, [sp, #12]
 8006d4e:	0699      	lsls	r1, r3, #26
 8006d50:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
					{
						ulDoneMask |= ulBitMask;
 8006d52:	bf48      	it	mi
 8006d54:	4335      	orrmi	r5, r6
		for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006d56:	3701      	adds	r7, #1
 8006d58:	0076      	lsls	r6, r6, #1
 8006d5a:	eb09 0207 	add.w	r2, r9, r7
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d8e9      	bhi.n	8006d36 <xPhyStartAutoNegotiation+0x62>
					}
				}
			}
		}
		if( ulPhyMask == ulDoneMask )
 8006d62:	4545      	cmp	r5, r8
 8006d64:	d011      	beq.n	8006d8a <xPhyStartAutoNegotiation+0xb6>
		{
			break;
		}
		if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8006d66:	a904      	add	r1, sp, #16
 8006d68:	a806      	add	r0, sp, #24
 8006d6a:	f002 fc47 	bl	80095fc <xTaskCheckForTimeOut>
 8006d6e:	b928      	cbnz	r0, 8006d7c <xPhyStartAutoNegotiation+0xa8>
		{
			FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMCR_RESET timed out ( done 0x%02lX )\n", ulDoneMask ) );
			break;
		}
		vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8006d70:	2032      	movs	r0, #50	@ 0x32
 8006d72:	f002 fad1 	bl	8009318 <vTaskDelay>
		ulBitMask = ( uint32_t ) 1U;
 8006d76:	e7d9      	b.n	8006d2c <xPhyStartAutoNegotiation+0x58>
			}
		}
	}	/* if( ulDoneMask != ( uint32_t) 0U ) */

	return 0;
}
 8006d78:	2000      	movs	r0, #0
 8006d7a:	4770      	bx	lr
			FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMCR_RESET timed out ( done 0x%02lX )\n", ulDoneMask ) );
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	4850      	ldr	r0, [pc, #320]	@ (8006ec0 <xPhyStartAutoNegotiation+0x1ec>)
 8006d80:	f006 f85c 	bl	800ce3c <lUDPLoggingPrintf>
	if( ulDoneMask != ( uint32_t ) 0U )
 8006d84:	2d00      	cmp	r5, #0
 8006d86:	d06b      	beq.n	8006e60 <xPhyStartAutoNegotiation+0x18c>
 8006d88:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
		pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 8006d8a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8006d8c:	ea22 0205 	bic.w	r2, r2, r5
 8006d90:	6362      	str	r2, [r4, #52]	@ 0x34
		for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d064      	beq.n	8006e60 <xPhyStartAutoNegotiation+0x18c>
		ulBitMask = ( uint32_t ) 1U;
 8006d96:	2701      	movs	r7, #1
		for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006d98:	2600      	movs	r6, #0
			if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 8006d9a:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 8006ed8 <xPhyStartAutoNegotiation+0x204>
	switch( ulPhyID )
 8006d9e:	46aa      	mov	sl, r5
 8006da0:	f8df b138 	ldr.w	fp, [pc, #312]	@ 8006edc <xPhyStartAutoNegotiation+0x208>
			if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 8006da4:	ea1a 0f07 	tst.w	sl, r7
 8006da8:	d056      	beq.n	8006e58 <xPhyStartAutoNegotiation+0x184>
		BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8006daa:	f104 0318 	add.w	r3, r4, #24
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 8006dae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006db0:	2100      	movs	r1, #0
		BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8006db2:	5d9d      	ldrb	r5, [r3, r6]
		uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8006db4:	f104 0308 	add.w	r3, r4, #8
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 8006db8:	4628      	mov	r0, r5
		uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8006dba:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
			pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 8006dbe:	6863      	ldr	r3, [r4, #4]
 8006dc0:	4798      	blx	r3
			pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue);
 8006dc2:	6823      	ldr	r3, [r4, #0]
 8006dc4:	aa03      	add	r2, sp, #12
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	4628      	mov	r0, r5
 8006dca:	4798      	blx	r3
			if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0 )
 8006dcc:	9b03      	ldr	r3, [sp, #12]
 8006dce:	075a      	lsls	r2, r3, #29
 8006dd0:	d502      	bpl.n	8006dd8 <xPhyStartAutoNegotiation+0x104>
				pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8006dd2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006dd4:	433b      	orrs	r3, r7
 8006dd6:	6363      	str	r3, [r4, #52]	@ 0x34
			if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 8006dd8:	45c8      	cmp	r8, r9
				pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus);
 8006dda:	6823      	ldr	r3, [r4, #0]
			if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 8006ddc:	d044      	beq.n	8006e68 <xPhyStartAutoNegotiation+0x194>
	switch( ulPhyID )
 8006dde:	45d8      	cmp	r8, fp
 8006de0:	d015      	beq.n	8006e0e <xPhyStartAutoNegotiation+0x13a>
 8006de2:	4a38      	ldr	r2, [pc, #224]	@ (8006ec4 <xPhyStartAutoNegotiation+0x1f0>)
 8006de4:	4590      	cmp	r8, r2
 8006de6:	d012      	beq.n	8006e0e <xPhyStartAutoNegotiation+0x13a>
				pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus);
 8006de8:	211f      	movs	r1, #31
 8006dea:	4628      	mov	r0, r5
 8006dec:	aa05      	add	r2, sp, #20
 8006dee:	4798      	blx	r3
				ulRegValue = 0;
 8006df0:	2300      	movs	r3, #0
 8006df2:	9303      	str	r3, [sp, #12]
				if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 8006df4:	9b05      	ldr	r3, [sp, #20]
 8006df6:	f013 0110 	ands.w	r1, r3, #16
 8006dfa:	d050      	beq.n	8006e9e <xPhyStartAutoNegotiation+0x1ca>
				if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 8006dfc:	f003 030c 	and.w	r3, r3, #12
 8006e00:	2b04      	cmp	r3, #4
 8006e02:	d057      	beq.n	8006eb4 <xPhyStartAutoNegotiation+0x1e0>
					ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8006e04:	2104      	movs	r1, #4
			FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 8006e06:	4a30      	ldr	r2, [pc, #192]	@ (8006ec8 <xPhyStartAutoNegotiation+0x1f4>)
					ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8006e08:	9103      	str	r1, [sp, #12]
			FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 8006e0a:	2364      	movs	r3, #100	@ 0x64
 8006e0c:	e010      	b.n	8006e30 <xPhyStartAutoNegotiation+0x15c>
				pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue);
 8006e0e:	2110      	movs	r1, #16
 8006e10:	aa03      	add	r2, sp, #12
 8006e12:	4628      	mov	r0, r5
 8006e14:	4798      	blx	r3
			FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 8006e16:	9903      	ldr	r1, [sp, #12]
 8006e18:	f001 0504 	and.w	r5, r1, #4
 8006e1c:	4a2a      	ldr	r2, [pc, #168]	@ (8006ec8 <xPhyStartAutoNegotiation+0x1f4>)
 8006e1e:	482b      	ldr	r0, [pc, #172]	@ (8006ecc <xPhyStartAutoNegotiation+0x1f8>)
 8006e20:	f001 0302 	and.w	r3, r1, #2
 8006e24:	2d00      	cmp	r5, #0
 8006e26:	bf08      	it	eq
 8006e28:	4602      	moveq	r2, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d0ed      	beq.n	8006e0a <xPhyStartAutoNegotiation+0x136>
 8006e2e:	230a      	movs	r3, #10
 8006e30:	4827      	ldr	r0, [pc, #156]	@ (8006ed0 <xPhyStartAutoNegotiation+0x1fc>)
 8006e32:	9000      	str	r0, [sp, #0]
 8006e34:	4827      	ldr	r0, [pc, #156]	@ (8006ed4 <xPhyStartAutoNegotiation+0x200>)
 8006e36:	f006 f801 	bl	800ce3c <lUDPLoggingPrintf>
			if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 8006e3a:	9b03      	ldr	r3, [sp, #12]
				pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 8006e3c:	f013 0f04 	tst.w	r3, #4
 8006e40:	bf0c      	ite	eq
 8006e42:	2201      	moveq	r2, #1
 8006e44:	2202      	movne	r2, #2
			if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 8006e46:	079b      	lsls	r3, r3, #30
 8006e48:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
				pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 8006e4c:	bf4c      	ite	mi
 8006e4e:	2301      	movmi	r3, #1
				pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 8006e50:	2302      	movpl	r3, #2
 8006e52:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8006e56:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
		for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006e58:	3601      	adds	r6, #1
 8006e5a:	007f      	lsls	r7, r7, #1
 8006e5c:	42b3      	cmp	r3, r6
 8006e5e:	d8a1      	bhi.n	8006da4 <xPhyStartAutoNegotiation+0xd0>
}
 8006e60:	2000      	movs	r0, #0
 8006e62:	b009      	add	sp, #36	@ 0x24
 8006e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus);
 8006e68:	aa05      	add	r2, sp, #20
 8006e6a:	211e      	movs	r1, #30
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	4798      	blx	r3
				switch( ulControlStatus & 0x07 )
 8006e70:	9b05      	ldr	r3, [sp, #20]
					ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8006e72:	9903      	ldr	r1, [sp, #12]
				switch( ulControlStatus & 0x07 )
 8006e74:	f003 0203 	and.w	r2, r3, #3
 8006e78:	f003 0307 	and.w	r3, r3, #7
 8006e7c:	2a01      	cmp	r2, #1
				switch( ulControlStatus & 0x07 )
 8006e7e:	f1a3 0305 	sub.w	r3, r3, #5
					ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8006e82:	bf04      	itt	eq
 8006e84:	f041 0102 	orreq.w	r1, r1, #2
 8006e88:	9103      	streq	r1, [sp, #12]
				switch( ulControlStatus & 0x07 )
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d8c4      	bhi.n	8006e18 <xPhyStartAutoNegotiation+0x144>
					ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8006e8e:	f041 0204 	orr.w	r2, r1, #4
 8006e92:	f001 0302 	and.w	r3, r1, #2
 8006e96:	9203      	str	r2, [sp, #12]
			FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 8006e98:	4611      	mov	r1, r2
 8006e9a:	4a0b      	ldr	r2, [pc, #44]	@ (8006ec8 <xPhyStartAutoNegotiation+0x1f4>)
 8006e9c:	e7c5      	b.n	8006e2a <xPhyStartAutoNegotiation+0x156>
				if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 8006e9e:	f003 030c 	and.w	r3, r3, #12
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	d001      	beq.n	8006eaa <xPhyStartAutoNegotiation+0x1d6>
			FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 8006ea6:	4a09      	ldr	r2, [pc, #36]	@ (8006ecc <xPhyStartAutoNegotiation+0x1f8>)
 8006ea8:	e7af      	b.n	8006e0a <xPhyStartAutoNegotiation+0x136>
					ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8006eaa:	2102      	movs	r1, #2
			FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 8006eac:	4a07      	ldr	r2, [pc, #28]	@ (8006ecc <xPhyStartAutoNegotiation+0x1f8>)
 8006eae:	230a      	movs	r3, #10
					ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8006eb0:	9103      	str	r1, [sp, #12]
			FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 8006eb2:	e7bd      	b.n	8006e30 <xPhyStartAutoNegotiation+0x15c>
					ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8006eb4:	2106      	movs	r1, #6
			FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 8006eb6:	4a04      	ldr	r2, [pc, #16]	@ (8006ec8 <xPhyStartAutoNegotiation+0x1f4>)
 8006eb8:	230a      	movs	r3, #10
					ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8006eba:	9103      	str	r1, [sp, #12]
			FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 8006ebc:	e7b8      	b.n	8006e30 <xPhyStartAutoNegotiation+0x15c>
 8006ebe:	bf00      	nop
 8006ec0:	0801031c 	.word	0x0801031c
 8006ec4:	2000a250 	.word	0x2000a250
 8006ec8:	0801030c 	.word	0x0801030c
 8006ecc:	08010314 	.word	0x08010314
 8006ed0:	08010394 	.word	0x08010394
 8006ed4:	08010360 	.word	0x08010360
 8006ed8:	00221560 	.word	0x00221560
 8006edc:	20005c90 	.word	0x20005c90

08006ee0 <xPhyCheckLinkStatus>:
{
uint32_t ulStatus, ulBitMask = 1U;
BaseType_t xPhyIndex;
BaseType_t xNeedCheck = pdFALSE;

	if( xHadReception > 0 )
 8006ee0:	2900      	cmp	r1, #0
{
 8006ee2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	b082      	sub	sp, #8
	{
		/* A packet was received. No need to check for the PHY status now,
		but set a timer to check it later on. */
		vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8006eea:	f100 081c 	add.w	r8, r0, #28
	if( xHadReception > 0 )
 8006eee:	dd24      	ble.n	8006f3a <xPhyCheckLinkStatus+0x5a>
		vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	f002 fb5b 	bl	80095ac <vTaskSetTimeOutState>
		pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006ef6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
		pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8006ef8:	f643 2298 	movw	r2, #15000	@ 0x3a98
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006efc:	2b00      	cmp	r3, #0
		pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8006efe:	6262      	str	r2, [r4, #36]	@ 0x24
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006f00:	dd4d      	ble.n	8006f9e <xPhyCheckLinkStatus+0xbe>
BaseType_t xNeedCheck = pdFALSE;
 8006f02:	2700      	movs	r7, #0
uint32_t ulStatus, ulBitMask = 1U;
 8006f04:	2501      	movs	r5, #1
		{
			if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
			{
				pxPhyObject->ulLinkStatusMask |= ulBitMask;
				FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
 8006f06:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8006fe4 <xPhyCheckLinkStatus+0x104>
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006f0a:	463e      	mov	r6, r7
 8006f0c:	e003      	b.n	8006f16 <xPhyCheckLinkStatus+0x36>
 8006f0e:	42b3      	cmp	r3, r6
 8006f10:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8006f14:	dd0d      	ble.n	8006f32 <xPhyCheckLinkStatus+0x52>
			if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 8006f16:	6b61      	ldr	r1, [r4, #52]	@ 0x34
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006f18:	3601      	adds	r6, #1
			if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 8006f1a:	4229      	tst	r1, r5
 8006f1c:	d1f7      	bne.n	8006f0e <xPhyCheckLinkStatus+0x2e>
				pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8006f1e:	4329      	orrs	r1, r5
				FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
 8006f20:	4640      	mov	r0, r8
				xNeedCheck = pdTRUE;
 8006f22:	2701      	movs	r7, #1
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006f24:	006d      	lsls	r5, r5, #1
				pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8006f26:	6361      	str	r1, [r4, #52]	@ 0x34
				FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
 8006f28:	f005 ff88 	bl	800ce3c <lUDPLoggingPrintf>
				xNeedCheck = pdTRUE;
 8006f2c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006f2e:	42b3      	cmp	r3, r6
 8006f30:	dcf1      	bgt.n	8006f16 <xPhyCheckLinkStatus+0x36>
			/* The link status is low, polling may be done more frequently. */
			pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
		}
	}
	return xNeedCheck;
}
 8006f32:	4638      	mov	r0, r7
 8006f34:	b002      	add	sp, #8
 8006f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 8006f3a:	f100 0124 	add.w	r1, r0, #36	@ 0x24
 8006f3e:	4640      	mov	r0, r8
 8006f40:	f002 fb5c 	bl	80095fc <xTaskCheckForTimeOut>
 8006f44:	b358      	cbz	r0, 8006f9e <xPhyCheckLinkStatus+0xbe>
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006f46:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	dd3f      	ble.n	8006fcc <xPhyCheckLinkStatus+0xec>
 8006f4c:	f104 0a17 	add.w	sl, r4, #23
BaseType_t xNeedCheck = pdFALSE;
 8006f50:	2700      	movs	r7, #0
uint32_t ulStatus, ulBitMask = 1U;
 8006f52:	2601      	movs	r6, #1
					FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
 8006f54:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8006fe4 <xPhyCheckLinkStatus+0x104>
		BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8006f58:	4655      	mov	r5, sl
			if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 8006f5a:	aa01      	add	r2, sp, #4
 8006f5c:	2101      	movs	r1, #1
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
 8006f64:	4798      	blx	r3
 8006f66:	b990      	cbnz	r0, 8006f8e <xPhyCheckLinkStatus+0xae>
				if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 8006f68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f6a:	9b01      	ldr	r3, [sp, #4]
 8006f6c:	4231      	tst	r1, r6
 8006f6e:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8006f72:	f003 0304 	and.w	r3, r3, #4
 8006f76:	bf14      	ite	ne
 8006f78:	2001      	movne	r0, #1
 8006f7a:	2000      	moveq	r0, #0
 8006f7c:	4290      	cmp	r0, r2
 8006f7e:	d006      	beq.n	8006f8e <xPhyCheckLinkStatus+0xae>
					if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 8006f80:	b30b      	cbz	r3, 8006fc6 <xPhyCheckLinkStatus+0xe6>
						pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8006f82:	4331      	orrs	r1, r6
					FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
 8006f84:	4648      	mov	r0, r9
 8006f86:	6361      	str	r1, [r4, #52]	@ 0x34
					xNeedCheck = pdTRUE;
 8006f88:	2701      	movs	r7, #1
					FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
 8006f8a:	f005 ff57 	bl	800ce3c <lUDPLoggingPrintf>
		for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8006f8e:	3d16      	subs	r5, #22
 8006f90:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006f92:	0072      	lsls	r2, r6, #1
 8006f94:	1b2d      	subs	r5, r5, r4
 8006f96:	42ab      	cmp	r3, r5
 8006f98:	dd06      	ble.n	8006fa8 <xPhyCheckLinkStatus+0xc8>
 8006f9a:	4616      	mov	r6, r2
 8006f9c:	e7dc      	b.n	8006f58 <xPhyCheckLinkStatus+0x78>
BaseType_t xNeedCheck = pdFALSE;
 8006f9e:	2700      	movs	r7, #0
}
 8006fa0:	4638      	mov	r0, r7
 8006fa2:	b002      	add	sp, #8
 8006fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8006fa8:	4640      	mov	r0, r8
 8006faa:	f002 faff 	bl	80095ac <vTaskSetTimeOutState>
		if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 8006fae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006fb0:	401e      	ands	r6, r3
 8006fb2:	f036 4300 	bics.w	r3, r6, #2147483648	@ 0x80000000
 8006fb6:	d00d      	beq.n	8006fd4 <xPhyCheckLinkStatus+0xf4>
			pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8006fb8:	f643 2398 	movw	r3, #15000	@ 0x3a98
}
 8006fbc:	4638      	mov	r0, r7
			pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8006fbe:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8006fc0:	b002      	add	sp, #8
 8006fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 8006fc6:	ea21 0106 	bic.w	r1, r1, r6
 8006fca:	e7db      	b.n	8006f84 <xPhyCheckLinkStatus+0xa4>
		vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8006fcc:	4640      	mov	r0, r8
BaseType_t xNeedCheck = pdFALSE;
 8006fce:	2700      	movs	r7, #0
		vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8006fd0:	f002 faec 	bl	80095ac <vTaskSetTimeOutState>
			pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 8006fd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 8006fd8:	4638      	mov	r0, r7
			pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 8006fda:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8006fdc:	b002      	add	sp, #8
 8006fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe2:	bf00      	nop
 8006fe4:	0801039c 	.word	0x0801039c

08006fe8 <prvNetworkInterfaceInput>:
    }
}
/*-----------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInput( void )
{
 8006fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    BaseType_t xReturn = 0;
 8006fec:	2700      	movs	r7, #0
{
 8006fee:	b086      	sub	sp, #24
        NetworkBufferDescriptor_t * pxReceivedBuffer = NULL;
        ETH_BufferTypeDef data_buffer;
        size_t uxDataLength;
        size_t uxLength;

        uxDataLength = HAL_ETH_GetRxData( &( xEthHandle ), &( data_buffer ) );
 8006ff0:	4e25      	ldr	r6, [pc, #148]	@ (8007088 <prvNetworkInterfaceInput+0xa0>)
                    #endif
                }

                if( pxReceivedBuffer == NULL )
                {
                    FreeRTOS_printf( ( "Strange: no descriptor received\n" ) );
 8006ff2:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800708c <prvNetworkInterfaceInput+0xa4>
        uxDataLength = HAL_ETH_GetRxData( &( xEthHandle ), &( data_buffer ) );
 8006ff6:	a903      	add	r1, sp, #12
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	f000 fd45 	bl	8007a88 <HAL_ETH_GetRxData>
        if( uxDataLength == 0U )
 8006ffe:	4604      	mov	r4, r0
 8007000:	b308      	cbz	r0, 8007046 <prvNetworkInterfaceInput+0x5e>
                if( data_buffer.buffer != NULL )
 8007002:	9803      	ldr	r0, [sp, #12]
        xReturn++;
 8007004:	3701      	adds	r7, #1
                if( data_buffer.buffer != NULL )
 8007006:	b310      	cbz	r0, 800704e <prvNetworkInterfaceInput+0x66>
                    pxReceivedBuffer = pxPacketBuffer_to_NetworkBuffer( data_buffer.buffer );
 8007008:	f7fa ff88 	bl	8001f1c <pxPacketBuffer_to_NetworkBuffer>
                if( pxReceivedBuffer == NULL )
 800700c:	4605      	mov	r5, r0
 800700e:	b1f0      	cbz	r0, 800704e <prvNetworkInterfaceInput+0x66>
                /* Reserve the length of the packet that was just received. */
                uxLength = uxDataLength;
            }
        #endif /* if ( ipconfigZERO_COPY_RX_DRIVER != 0 ) */

        pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxLength, 0u );
 8007010:	2100      	movs	r1, #0
 8007012:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8007016:	f7ff fc7f 	bl	8006918 <pxGetNetworkBufferWithDescriptor>
            iptraceETHERNET_RX_EVENT_LOST();
        }

        #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
            {
                if( pxBufferDescriptor == NULL )
 800701a:	b330      	cbz	r0, 800706a <prvNetworkInterfaceInput+0x82>
                pucBuffer = pxBufferDescriptor->pucEthernetBuffer;
            }

            /* Assign an RX buffer to the descriptor, so that
             * a next packet can be received. */
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 800701c:	6981      	ldr	r1, [r0, #24]
 800701e:	4630      	mov	r0, r6
                    pxReceivedBuffer->xDataLength = uxDataLength;
 8007020:	61ec      	str	r4, [r5, #28]
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 8007022:	f000 fd61 	bl	8007ae8 <HAL_ETH_BuildRxDescriptors>

        if( pxReceivedBuffer != NULL )
        {
            BaseType_t xDoRelease = pdFALSE;

            if( eConsiderFrameForProcessing( pxReceivedBuffer->pucEthernetBuffer ) != eProcessBuffer )
 8007026:	69a8      	ldr	r0, [r5, #24]
 8007028:	f7fb f900 	bl	800222c <eConsiderFrameForProcessing>
 800702c:	2801      	cmp	r0, #1
 800702e:	4603      	mov	r3, r0
 8007030:	d020      	beq.n	8007074 <prvNetworkInterfaceInput+0x8c>
                }
            }

            if( xDoRelease != pdFALSE )
            {
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
 8007032:	4628      	mov	r0, r5
 8007034:	f7ff fcac 	bl	8006990 <vReleaseNetworkBufferAndDescriptor>
        uxDataLength = HAL_ETH_GetRxData( &( xEthHandle ), &( data_buffer ) );
 8007038:	a903      	add	r1, sp, #12
 800703a:	4630      	mov	r0, r6
 800703c:	f000 fd24 	bl	8007a88 <HAL_ETH_GetRxData>
        if( uxDataLength == 0U )
 8007040:	4604      	mov	r4, r0
 8007042:	2800      	cmp	r0, #0
 8007044:	d1dd      	bne.n	8007002 <prvNetworkInterfaceInput+0x1a>
            }
        }
    }

    return xReturn;
}
 8007046:	4638      	mov	r0, r7
 8007048:	b006      	add	sp, #24
 800704a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    FreeRTOS_printf( ( "Strange: no descriptor received\n" ) );
 800704e:	4640      	mov	r0, r8
 8007050:	f005 fef4 	bl	800ce3c <lUDPLoggingPrintf>
        pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxLength, 0u );
 8007054:	2100      	movs	r1, #0
 8007056:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 800705a:	f7ff fc5d 	bl	8006918 <pxGetNetworkBufferWithDescriptor>
                if( pxBufferDescriptor == NULL )
 800705e:	b120      	cbz	r0, 800706a <prvNetworkInterfaceInput+0x82>
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 8007060:	6981      	ldr	r1, [r0, #24]
 8007062:	4630      	mov	r0, r6
 8007064:	f000 fd40 	bl	8007ae8 <HAL_ETH_BuildRxDescriptors>
        if( pxReceivedBuffer != NULL )
 8007068:	e7c5      	b.n	8006ff6 <prvNetworkInterfaceInput+0xe>
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 800706a:	2100      	movs	r1, #0
 800706c:	4630      	mov	r0, r6
 800706e:	f000 fd3b 	bl	8007ae8 <HAL_ETH_BuildRxDescriptors>
        if( pxReceivedBuffer != NULL )
 8007072:	e7c0      	b.n	8006ff6 <prvNetworkInterfaceInput+0xe>
                if( xSendEventStructToIPTask( &( xRxEvent ), 0 ) != pdFALSE )
 8007074:	2100      	movs	r1, #0
 8007076:	a801      	add	r0, sp, #4
                IPStackEvent_t xRxEvent =
 8007078:	f88d 3004 	strb.w	r3, [sp, #4]
 800707c:	9502      	str	r5, [sp, #8]
                if( xSendEventStructToIPTask( &( xRxEvent ), 0 ) != pdFALSE )
 800707e:	f7fb f855 	bl	800212c <xSendEventStructToIPTask>
 8007082:	2800      	cmp	r0, #0
 8007084:	d1b7      	bne.n	8006ff6 <prvNetworkInterfaceInput+0xe>
 8007086:	e7d4      	b.n	8007032 <prvNetworkInterfaceInput+0x4a>
 8007088:	20000d4c 	.word	0x20000d4c
 800708c:	080103c4 	.word	0x080103c4

08007090 <ETH_PHY_IO_WriteReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_WriteReg( uint32_t ulDevAddr,
                                    uint32_t ulRegAddr,
                                    uint32_t pulRegVal )
{
 8007090:	4684      	mov	ip, r0
    int32_t iResult = -1;

    if( HAL_ETH_WritePHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 8007092:	4806      	ldr	r0, [pc, #24]	@ (80070ac <ETH_PHY_IO_WriteReg+0x1c>)
{
 8007094:	b508      	push	{r3, lr}
 8007096:	4613      	mov	r3, r2
    if( HAL_ETH_WritePHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 8007098:	460a      	mov	r2, r1
 800709a:	4661      	mov	r1, ip
 800709c:	f000 fe42 	bl	8007d24 <HAL_ETH_WritePHYRegister>
 80070a0:	3800      	subs	r0, #0
 80070a2:	bf18      	it	ne
 80070a4:	2001      	movne	r0, #1
    {
        iResult = 0;
    }

    return iResult;
}
 80070a6:	4240      	negs	r0, r0
 80070a8:	bd08      	pop	{r3, pc}
 80070aa:	bf00      	nop
 80070ac:	20000d4c 	.word	0x20000d4c

080070b0 <ETH_PHY_IO_ReadReg>:
{
 80070b0:	4684      	mov	ip, r0
    if( HAL_ETH_ReadPHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 80070b2:	4806      	ldr	r0, [pc, #24]	@ (80070cc <ETH_PHY_IO_ReadReg+0x1c>)
{
 80070b4:	b508      	push	{r3, lr}
 80070b6:	4613      	mov	r3, r2
    if( HAL_ETH_ReadPHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 80070b8:	460a      	mov	r2, r1
 80070ba:	4661      	mov	r1, ip
 80070bc:	f000 fe04 	bl	8007cc8 <HAL_ETH_ReadPHYRegister>
 80070c0:	3800      	subs	r0, #0
 80070c2:	bf18      	it	ne
 80070c4:	2001      	movne	r0, #1
}
 80070c6:	4240      	negs	r0, r0
 80070c8:	bd08      	pop	{r3, pc}
 80070ca:	bf00      	nop
 80070cc:	20000d4c 	.word	0x20000d4c

080070d0 <prvEthernetUpdateConfig>:
{
 80070d0:	b570      	push	{r4, r5, r6, lr}
 80070d2:	4605      	mov	r5, r0
    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
 80070d4:	4c1b      	ldr	r4, [pc, #108]	@ (8007144 <prvEthernetUpdateConfig+0x74>)
{
 80070d6:	b09a      	sub	sp, #104	@ 0x68
    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
 80070d8:	481b      	ldr	r0, [pc, #108]	@ (8007148 <prvEthernetUpdateConfig+0x78>)
 80070da:	462a      	mov	r2, r5
 80070dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070de:	f005 fead 	bl	800ce3c <lUDPLoggingPrintf>
    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 80070e2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80070e4:	431d      	orrs	r5, r3
 80070e6:	d026      	beq.n	8007136 <prvEthernetUpdateConfig+0x66>
        xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &( xPhyObject ) ) );
 80070e8:	2601      	movs	r6, #1
 80070ea:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80070ec:	4620      	mov	r0, r4
 80070ee:	fa06 f101 	lsl.w	r1, r6, r1
 80070f2:	3901      	subs	r1, #1
 80070f4:	f7ff fdee 	bl	8006cd4 <xPhyStartAutoNegotiation>
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 80070f8:	f894 503e 	ldrb.w	r5, [r4, #62]	@ 0x3e
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 80070fc:	f894 403c 	ldrb.w	r4, [r4, #60]	@ 0x3c
        HAL_ETH_GetMACConfig( &( xEthHandle ), &( MACConf ) );
 8007100:	a901      	add	r1, sp, #4
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 8007102:	f1a5 0502 	sub.w	r5, r5, #2
        HAL_ETH_GetMACConfig( &( xEthHandle ), &( MACConf ) );
 8007106:	4811      	ldr	r0, [pc, #68]	@ (800714c <prvEthernetUpdateConfig+0x7c>)
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 8007108:	1ba4      	subs	r4, r4, r6
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 800710a:	fab5 f585 	clz	r5, r5
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 800710e:	bf18      	it	ne
 8007110:	2401      	movne	r4, #1
        HAL_ETH_GetMACConfig( &( xEthHandle ), &( MACConf ) );
 8007112:	f000 fe39 	bl	8007d88 <HAL_ETH_GetMACConfig>
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 8007116:	096d      	lsrs	r5, r5, #5
        HAL_ETH_SetMACConfig( &( xEthHandle ), &( MACConf ) );
 8007118:	a901      	add	r1, sp, #4
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 800711a:	03a4      	lsls	r4, r4, #14
        HAL_ETH_SetMACConfig( &( xEthHandle ), &( MACConf ) );
 800711c:	480b      	ldr	r0, [pc, #44]	@ (800714c <prvEthernetUpdateConfig+0x7c>)
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 800711e:	036d      	lsls	r5, r5, #13
        MACConf.Speed = speed;
 8007120:	e9cd 4506 	strd	r4, r5, [sp, #24]
        HAL_ETH_SetMACConfig( &( xEthHandle ), &( MACConf ) );
 8007124:	f000 fefa 	bl	8007f1c <HAL_ETH_SetMACConfig>
        HAL_ETH_Start_IT( &( xEthHandle ) );
 8007128:	4808      	ldr	r0, [pc, #32]	@ (800714c <prvEthernetUpdateConfig+0x7c>)
                MACConf.ChecksumOffload = ENABLE;
 800712a:	f88d 6008 	strb.w	r6, [sp, #8]
        HAL_ETH_Start_IT( &( xEthHandle ) );
 800712e:	f000 fbb1 	bl	8007894 <HAL_ETH_Start_IT>
}
 8007132:	b01a      	add	sp, #104	@ 0x68
 8007134:	bd70      	pop	{r4, r5, r6, pc}
        HAL_ETH_Stop_IT( &( xEthHandle ) );
 8007136:	4805      	ldr	r0, [pc, #20]	@ (800714c <prvEthernetUpdateConfig+0x7c>)
}
 8007138:	b01a      	add	sp, #104	@ 0x68
 800713a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HAL_ETH_Stop_IT( &( xEthHandle ) );
 800713e:	f000 bbef 	b.w	8007920 <HAL_ETH_Stop_IT>
 8007142:	bf00      	nop
 8007144:	20000cd4 	.word	0x20000cd4
 8007148:	080103e8 	.word	0x080103e8
 800714c:	20000d4c 	.word	0x20000d4c

08007150 <prvEMACHandlerTask>:
    return xCount;
}
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void * pvParameters )
{
 8007150:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007154:	4e47      	ldr	r6, [pc, #284]	@ (8007274 <prvEMACHandlerTask+0x124>)
/* When sending a packet, all descriptors in the transmission channel may
 * be occupied.  In stat case, the program will wait (block) for the counting
 * semaphore. */
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100UL );
    size_t uxTXDescriptorsUsed = 0U;
    size_t uxRXDescriptorsUsed = ETH_RX_DESC_CNT;
 8007156:	f04f 0804 	mov.w	r8, #4
    size_t uxTXDescriptorsUsed = 0U;
 800715a:	2700      	movs	r7, #0
 800715c:	f8df a134 	ldr.w	sl, [pc, #308]	@ 8007294 <prvEMACHandlerTask+0x144>
 8007160:	4d45      	ldr	r5, [pc, #276]	@ (8007278 <prvEMACHandlerTask+0x128>)
 8007162:	f1a6 093c 	sub.w	r9, r6, #60	@ 0x3c
 8007166:	f8df b118 	ldr.w	fp, [pc, #280]	@ 8007280 <prvEMACHandlerTask+0x130>
                size_t uxOwnCount;

                /* Call a function that monitors resources: the amount of free network
                 * buffers and the amount of free space on the heap.  See FreeRTOS_IP.c
                 * for more detailed comments. */
                vPrintResourceStats();
 800716a:	f7fb fb27 	bl	80027bc <vPrintResourceStats>

                /* Some more statistics: number of free descriptors. */
                uxUsed = ETH_TX_DESC_CNT - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 800716e:	f8da 0000 	ldr.w	r0, [sl]
 8007172:	f001 fd49 	bl	8008c08 <uxQueueMessagesWaiting>
 8007176:	f1c0 0104 	rsb	r1, r0, #4

                if( uxTXDescriptorsUsed < uxUsed )
 800717a:	428f      	cmp	r7, r1
 800717c:	d328      	bcc.n	80071d0 <prvEMACHandlerTask+0x80>
    for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 800717e:	4b3f      	ldr	r3, [pc, #252]	@ (800727c <prvEMACHandlerTask+0x12c>)
    BaseType_t xCount = 0;
 8007180:	2100      	movs	r1, #0
        __IO const ETH_DMADescTypeDef * dmarxdesc =
 8007182:	f853 2f04 	ldr.w	r2, [r3, #4]!
        if( ( dmarxdesc->DESC3 & ETH_DMARXNDESCWBF_OWN ) != 0U )
 8007186:	68d2      	ldr	r2, [r2, #12]
 8007188:	2a00      	cmp	r2, #0
            xCount++;
 800718a:	bfb8      	it	lt
 800718c:	3101      	addlt	r1, #1
    for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 800718e:	429e      	cmp	r6, r3
 8007190:	d1f7      	bne.n	8007182 <prvEMACHandlerTask+0x32>
                                       ETH_TX_DESC_CNT ) );
                }

                uxOwnCount = uxGetOwnCount( &( xEthHandle ) );

                if( uxRXDescriptorsUsed > uxOwnCount )
 8007192:	4588      	cmp	r8, r1
 8007194:	d85b      	bhi.n	800724e <prvEMACHandlerTask+0xfe>
                                       ETH_RX_DESC_CNT ) );
                }
            }
        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

        ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 8007196:	2100      	movs	r1, #0
 8007198:	2264      	movs	r2, #100	@ 0x64
 800719a:	4608      	mov	r0, r1
 800719c:	f002 fb90 	bl	80098c0 <ulTaskGenericNotifyTake>

        /* Wait for the Ethernet MAC interrupt to indicate that another packet
         * has been received. */
        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0U )
 80071a0:	682c      	ldr	r4, [r5, #0]
 80071a2:	f014 0401 	ands.w	r4, r4, #1
 80071a6:	d146      	bne.n	8007236 <prvEMACHandlerTask+0xe6>
        /* When a packet has been transmitted, the descriptor must be
         * prepared for a next transmission.
         * When using zero-copy, the network buffer must be released
         * ( i.e. returned to the pool of network buffers ). */

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0U )
 80071a8:	682b      	ldr	r3, [r5, #0]
 80071aa:	079a      	lsls	r2, r3, #30
 80071ac:	d428      	bmi.n	8007200 <prvEMACHandlerTask+0xb0>
                xSemaphoreGive( xTransmissionMutex );
            }
        }

        /* Some error has occurred, possibly an overflow or an underflow. */
        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0U )
 80071ae:	682b      	ldr	r3, [r5, #0]
 80071b0:	075b      	lsls	r3, r3, #29
 80071b2:	d413      	bmi.n	80071dc <prvEMACHandlerTask+0x8c>
            /* Enable all interrupts */
            HAL_ETH_Start_IT( &( xEthHandle ) );
            xResult += prvNetworkInterfaceInput();
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != pdFALSE )
 80071b4:	4621      	mov	r1, r4
 80071b6:	4832      	ldr	r0, [pc, #200]	@ (8007280 <prvEMACHandlerTask+0x130>)
 80071b8:	f7ff fe92 	bl	8006ee0 <xPhyCheckLinkStatus>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d0d4      	beq.n	800716a <prvEMACHandlerTask+0x1a>
    if( xPhyObject.ulLinkStatusMask != 0U )
 80071c0:	f8db 4034 	ldr.w	r4, [fp, #52]	@ 0x34
 80071c4:	2c00      	cmp	r4, #0
 80071c6:	d048      	beq.n	800725a <prvEMACHandlerTask+0x10a>
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
            }
            else
            {
                /* Something has changed to a Link Status, need re-check. */
                prvEthernetUpdateConfig( pdFALSE );
 80071c8:	2000      	movs	r0, #0
 80071ca:	f7ff ff81 	bl	80070d0 <prvEthernetUpdateConfig>
 80071ce:	e7cc      	b.n	800716a <prvEMACHandlerTask+0x1a>
                    FreeRTOS_printf( ( "TX descriptors %u/%u\n",
 80071d0:	2204      	movs	r2, #4
 80071d2:	482c      	ldr	r0, [pc, #176]	@ (8007284 <prvEMACHandlerTask+0x134>)
 80071d4:	460f      	mov	r7, r1
 80071d6:	f005 fe31 	bl	800ce3c <lUDPLoggingPrintf>
 80071da:	e7d0      	b.n	800717e <prvEMACHandlerTask+0x2e>
    portENTER_CRITICAL();
 80071dc:	f002 fd2a 	bl	8009c34 <vPortEnterCritical>
    *( pulValue ) &= ~( ulValue );
 80071e0:	682b      	ldr	r3, [r5, #0]
 80071e2:	f023 0304 	bic.w	r3, r3, #4
 80071e6:	602b      	str	r3, [r5, #0]
    portEXIT_CRITICAL();
 80071e8:	f002 fd46 	bl	8009c78 <vPortExitCritical>
            xEthHandle.gState = HAL_ETH_STATE_READY;
 80071ec:	2310      	movs	r3, #16
            HAL_ETH_Start_IT( &( xEthHandle ) );
 80071ee:	4648      	mov	r0, r9
            xEthHandle.gState = HAL_ETH_STATE_READY;
 80071f0:	f8c9 3058 	str.w	r3, [r9, #88]	@ 0x58
            HAL_ETH_Start_IT( &( xEthHandle ) );
 80071f4:	f000 fb4e 	bl	8007894 <HAL_ETH_Start_IT>
            xResult += prvNetworkInterfaceInput();
 80071f8:	f7ff fef6 	bl	8006fe8 <prvNetworkInterfaceInput>
 80071fc:	4404      	add	r4, r0
 80071fe:	e7d9      	b.n	80071b4 <prvEMACHandlerTask+0x64>
    portENTER_CRITICAL();
 8007200:	f002 fd18 	bl	8009c34 <vPortEnterCritical>
    *( pulValue ) &= ~( ulValue );
 8007204:	682b      	ldr	r3, [r5, #0]
 8007206:	f023 0302 	bic.w	r3, r3, #2
 800720a:	602b      	str	r3, [r5, #0]
    portEXIT_CRITICAL();
 800720c:	f002 fd34 	bl	8009c78 <vPortExitCritical>
            if( xSemaphoreTake( xTransmissionMutex, 10000U ) != pdFAIL )
 8007210:	4b1d      	ldr	r3, [pc, #116]	@ (8007288 <prvEMACHandlerTask+0x138>)
 8007212:	f242 7110 	movw	r1, #10000	@ 0x2710
 8007216:	6818      	ldr	r0, [r3, #0]
 8007218:	f001 fc26 	bl	8008a68 <xQueueSemaphoreTake>
 800721c:	2800      	cmp	r0, #0
 800721e:	d0c6      	beq.n	80071ae <prvEMACHandlerTask+0x5e>
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8007220:	4648      	mov	r0, r9
 8007222:	f000 ffe5 	bl	80081f0 <ETH_Clear_Tx_Descriptors>
                xSemaphoreGive( xTransmissionMutex );
 8007226:	2300      	movs	r3, #0
 8007228:	4817      	ldr	r0, [pc, #92]	@ (8007288 <prvEMACHandlerTask+0x138>)
 800722a:	461a      	mov	r2, r3
 800722c:	4619      	mov	r1, r3
 800722e:	6800      	ldr	r0, [r0, #0]
 8007230:	f001 fa8e 	bl	8008750 <xQueueGenericSend>
 8007234:	e7bb      	b.n	80071ae <prvEMACHandlerTask+0x5e>
    portENTER_CRITICAL();
 8007236:	f002 fcfd 	bl	8009c34 <vPortEnterCritical>
    *( pulValue ) &= ~( ulValue );
 800723a:	682b      	ldr	r3, [r5, #0]
 800723c:	f023 0301 	bic.w	r3, r3, #1
 8007240:	602b      	str	r3, [r5, #0]
    portEXIT_CRITICAL();
 8007242:	f002 fd19 	bl	8009c78 <vPortExitCritical>
            xResult = prvNetworkInterfaceInput();
 8007246:	f7ff fecf 	bl	8006fe8 <prvNetworkInterfaceInput>
 800724a:	4604      	mov	r4, r0
 800724c:	e7ac      	b.n	80071a8 <prvEMACHandlerTask+0x58>
                    FreeRTOS_printf( ( "RX descriptors %u/%u\n",
 800724e:	2204      	movs	r2, #4
 8007250:	480e      	ldr	r0, [pc, #56]	@ (800728c <prvEMACHandlerTask+0x13c>)
 8007252:	4688      	mov	r8, r1
 8007254:	f005 fdf2 	bl	800ce3c <lUDPLoggingPrintf>
 8007258:	e79d      	b.n	8007196 <prvEMACHandlerTask+0x46>
                HAL_ETH_Stop_IT( &( xEthHandle ) );
 800725a:	4648      	mov	r0, r9
 800725c:	f000 fb60 	bl	8007920 <HAL_ETH_Stop_IT>
                memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8007260:	2260      	movs	r2, #96	@ 0x60
 8007262:	4621      	mov	r1, r4
 8007264:	480a      	ldr	r0, [pc, #40]	@ (8007290 <prvEMACHandlerTask+0x140>)
 8007266:	f006 f87f 	bl	800d368 <memset>
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 800726a:	4648      	mov	r0, r9
 800726c:	f000 ffc0 	bl	80081f0 <ETH_Clear_Tx_Descriptors>
 8007270:	e77b      	b.n	800716a <prvEMACHandlerTask+0x1a>
 8007272:	bf00      	nop
 8007274:	20000d88 	.word	0x20000d88
 8007278:	20000dcc 	.word	0x20000dcc
 800727c:	20000d78 	.word	0x20000d78
 8007280:	20000cd4 	.word	0x20000cd4
 8007284:	0801041c 	.word	0x0801041c
 8007288:	20000dc0 	.word	0x20000dc0
 800728c:	08010434 	.word	0x08010434
 8007290:	24058000 	.word	0x24058000
 8007294:	20000dc4 	.word	0x20000dc4

08007298 <xNetworkInterfaceInitialise>:
{
 8007298:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( xMacInitStatus == eMACInit )
 800729a:	4e4b      	ldr	r6, [pc, #300]	@ (80073c8 <xNetworkInterfaceInitialise+0x130>)
{
 800729c:	b083      	sub	sp, #12
    if( xMacInitStatus == eMACInit )
 800729e:	7834      	ldrb	r4, [r6, #0]
 80072a0:	2c00      	cmp	r4, #0
 80072a2:	d05e      	beq.n	8007362 <xNetworkInterfaceInitialise+0xca>
    if( xMacInitStatus == eMACPass )
 80072a4:	2c01      	cmp	r4, #1
 80072a6:	d052      	beq.n	800734e <xNetworkInterfaceInitialise+0xb6>
    BaseType_t xResult = pdFAIL;
 80072a8:	2000      	movs	r0, #0
}
 80072aa:	b003      	add	sp, #12
 80072ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
            memset( &( xTxConfig ), 0, sizeof( ETH_TxPacketConfig ) );
 80072ae:	4b47      	ldr	r3, [pc, #284]	@ (80073cc <xNetworkInterfaceInitialise+0x134>)
 80072b0:	4601      	mov	r1, r0
 80072b2:	2230      	movs	r2, #48	@ 0x30
 80072b4:	4618      	mov	r0, r3
 80072b6:	f006 f857 	bl	800d368 <memset>
            xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TX_DESC_CNT, ( UBaseType_t ) ETH_TX_DESC_CNT );
 80072ba:	2104      	movs	r1, #4
            memset( &( xTxConfig ), 0, sizeof( ETH_TxPacketConfig ) );
 80072bc:	4603      	mov	r3, r0
                    xTxConfig.Attributes |= ETH_TX_PACKETS_FEATURES_CSUM;
 80072be:	2021      	movs	r0, #33	@ 0x21
                    xTxConfig.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80072c0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
                    xTxConfig.Attributes |= ETH_TX_PACKETS_FEATURES_CSUM;
 80072c4:	f843 0c04 	str.w	r0, [r3, #-4]
            xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TX_DESC_CNT, ( UBaseType_t ) ETH_TX_DESC_CNT );
 80072c8:	4608      	mov	r0, r1
                    xTxConfig.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80072ca:	611a      	str	r2, [r3, #16]
            xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TX_DESC_CNT, ( UBaseType_t ) ETH_TX_DESC_CNT );
 80072cc:	f001 fa22 	bl	8008714 <xQueueCreateCountingSemaphore>
 80072d0:	4b3f      	ldr	r3, [pc, #252]	@ (80073d0 <xNetworkInterfaceInitialise+0x138>)
 80072d2:	6018      	str	r0, [r3, #0]
            configASSERT( xTXDescriptorSemaphore );
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d071      	beq.n	80073bc <xNetworkInterfaceInitialise+0x124>
            xTransmissionMutex = xSemaphoreCreateMutex();
 80072d8:	2001      	movs	r0, #1
 80072da:	f001 faf9 	bl	80088d0 <xQueueCreateMutex>
 80072de:	4b3d      	ldr	r3, [pc, #244]	@ (80073d4 <xNetworkInterfaceInitialise+0x13c>)
 80072e0:	6018      	str	r0, [r3, #0]
            configASSERT( xTransmissionMutex );
 80072e2:	2800      	cmp	r0, #0
 80072e4:	d064      	beq.n	80073b0 <xNetworkInterfaceInitialise+0x118>
{
 80072e6:	2400      	movs	r4, #0
                HAL_ETH_DescAssignMemory( &( xEthHandle ), uxIndex, pucBuffer, NULL );
 80072e8:	4d3b      	ldr	r5, [pc, #236]	@ (80073d8 <xNetworkInterfaceInitialise+0x140>)
    pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxSize, uxBlockTimeTicks );
 80072ea:	210a      	movs	r1, #10
 80072ec:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 80072f0:	f7ff fb12 	bl	8006918 <pxGetNetworkBufferWithDescriptor>
    if( pxBufferDescriptor != NULL )
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d054      	beq.n	80073a2 <xNetworkInterfaceInitialise+0x10a>
        pucReturn = pxBufferDescriptor->pucEthernetBuffer;
 80072f8:	6982      	ldr	r2, [r0, #24]
                        configASSERT( pucBuffer != NULL );
 80072fa:	2a00      	cmp	r2, #0
 80072fc:	d051      	beq.n	80073a2 <xNetworkInterfaceInitialise+0x10a>
                HAL_ETH_DescAssignMemory( &( xEthHandle ), uxIndex, pucBuffer, NULL );
 80072fe:	4621      	mov	r1, r4
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 8007300:	3401      	adds	r4, #1
                HAL_ETH_DescAssignMemory( &( xEthHandle ), uxIndex, pucBuffer, NULL );
 8007302:	2300      	movs	r3, #0
 8007304:	4628      	mov	r0, r5
 8007306:	f000 faa5 	bl	8007854 <HAL_ETH_DescAssignMemory>
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 800730a:	2c04      	cmp	r4, #4
 800730c:	d1ed      	bne.n	80072ea <xNetworkInterfaceInitialise+0x52>
            HAL_ETH_SetMDIOClockRange( &( xEthHandle ) );
 800730e:	4832      	ldr	r0, [pc, #200]	@ (80073d8 <xNetworkInterfaceInitialise+0x140>)
 8007310:	f000 fe12 	bl	8007f38 <HAL_ETH_SetMDIOClockRange>
    vPhyInitialise( &( xPhyObject ),
 8007314:	4a31      	ldr	r2, [pc, #196]	@ (80073dc <xNetworkInterfaceInitialise+0x144>)
 8007316:	4932      	ldr	r1, [pc, #200]	@ (80073e0 <xNetworkInterfaceInitialise+0x148>)
 8007318:	4832      	ldr	r0, [pc, #200]	@ (80073e4 <xNetworkInterfaceInitialise+0x14c>)
 800731a:	f7ff fb6b 	bl	80069f4 <vPhyInitialise>
    xPhyDiscover( &( xPhyObject ) );
 800731e:	4831      	ldr	r0, [pc, #196]	@ (80073e4 <xNetworkInterfaceInitialise+0x14c>)
 8007320:	f7ff fb74 	bl	8006a0c <xPhyDiscover>
    xPhyConfigure( &( xPhyObject ), &( xPHYProperties ) );
 8007324:	4930      	ldr	r1, [pc, #192]	@ (80073e8 <xNetworkInterfaceInitialise+0x150>)
 8007326:	482f      	ldr	r0, [pc, #188]	@ (80073e4 <xNetworkInterfaceInitialise+0x14c>)
 8007328:	f7ff fbac 	bl	8006a84 <xPhyConfigure>
            prvEthernetUpdateConfig( pdTRUE );
 800732c:	2001      	movs	r0, #1
 800732e:	f7ff fecf 	bl	80070d0 <prvEthernetUpdateConfig>
            if( xTaskCreate( prvEMACHandlerTask, niEMAC_HANDLER_TASK_NAME, niEMAC_HANDLER_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &( xEMACTaskHandle ) ) == pdPASS )
 8007332:	482e      	ldr	r0, [pc, #184]	@ (80073ec <xNetworkInterfaceInitialise+0x154>)
 8007334:	2105      	movs	r1, #5
 8007336:	2300      	movs	r3, #0
 8007338:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800733c:	e9cd 1000 	strd	r1, r0, [sp]
 8007340:	492b      	ldr	r1, [pc, #172]	@ (80073f0 <xNetworkInterfaceInitialise+0x158>)
 8007342:	482c      	ldr	r0, [pc, #176]	@ (80073f4 <xNetworkInterfaceInitialise+0x15c>)
 8007344:	f001 fd4a 	bl	8008ddc <xTaskCreate>
 8007348:	2801      	cmp	r0, #1
 800734a:	d127      	bne.n	800739c <xNetworkInterfaceInitialise+0x104>
                xMacInitStatus = eMACPass;
 800734c:	7030      	strb	r0, [r6, #0]
        if( xPhyObject.ulLinkStatusMask != 0uL )
 800734e:	4b25      	ldr	r3, [pc, #148]	@ (80073e4 <xNetworkInterfaceInitialise+0x14c>)
 8007350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007352:	2b00      	cmp	r3, #0
 8007354:	d0a8      	beq.n	80072a8 <xNetworkInterfaceInitialise+0x10>
            FreeRTOS_printf( ( "Link Status is high\n" ) );
 8007356:	4828      	ldr	r0, [pc, #160]	@ (80073f8 <xNetworkInterfaceInitialise+0x160>)
 8007358:	f005 fd70 	bl	800ce3c <lUDPLoggingPrintf>
            xResult = pdPASS;
 800735c:	2001      	movs	r0, #1
}
 800735e:	b003      	add	sp, #12
 8007360:	bdf0      	pop	{r4, r5, r6, r7, pc}
        xEthHandle.Instance = ETH;
 8007362:	4d1d      	ldr	r5, [pc, #116]	@ (80073d8 <xNetworkInterfaceInitialise+0x140>)
 8007364:	4b25      	ldr	r3, [pc, #148]	@ (80073fc <xNetworkInterfaceInitialise+0x164>)
        xEthHandle.Init.RxDesc = DMARxDscrTab;
 8007366:	4f26      	ldr	r7, [pc, #152]	@ (8007400 <xNetworkInterfaceInitialise+0x168>)
        xEthHandle.Instance = ETH;
 8007368:	602b      	str	r3, [r5, #0]
        xEthHandle.Init.MACAddr = ( uint8_t * ) FreeRTOS_GetMACAddress();
 800736a:	f7fb fa7b 	bl	8002864 <FreeRTOS_GetMACAddress>
        xEthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800736e:	2301      	movs	r3, #1
        xEthHandle.Init.MACAddr = ( uint8_t * ) FreeRTOS_GetMACAddress();
 8007370:	6068      	str	r0, [r5, #4]
        xEthHandle.Init.TxDesc = DMATxDscrTab;
 8007372:	4824      	ldr	r0, [pc, #144]	@ (8007404 <xNetworkInterfaceInitialise+0x16c>)
        memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8007374:	2260      	movs	r2, #96	@ 0x60
        xEthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007376:	722b      	strb	r3, [r5, #8]
        xEthHandle.Init.RxBuffLen = ( ETH_RX_BUF_SIZE - ipBUFFER_PADDING ) & ~( ( uint32_t ) 3U );
 8007378:	f240 53f4 	movw	r3, #1524	@ 0x5f4
        memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 800737c:	4621      	mov	r1, r4
        xEthHandle.Init.RxDesc = DMARxDscrTab;
 800737e:	612f      	str	r7, [r5, #16]
        xEthHandle.Init.RxBuffLen = ( ETH_RX_BUF_SIZE - ipBUFFER_PADDING ) & ~( ( uint32_t ) 3U );
 8007380:	616b      	str	r3, [r5, #20]
        xEthHandle.Init.TxDesc = DMATxDscrTab;
 8007382:	60e8      	str	r0, [r5, #12]
        memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8007384:	f005 fff0 	bl	800d368 <memset>
        memset( &( DMARxDscrTab ), '\0', sizeof( DMARxDscrTab ) );
 8007388:	2260      	movs	r2, #96	@ 0x60
 800738a:	4621      	mov	r1, r4
 800738c:	4638      	mov	r0, r7
 800738e:	f005 ffeb 	bl	800d368 <memset>
        xHalEthInitStatus = HAL_ETH_Init( &( xEthHandle ) );
 8007392:	4628      	mov	r0, r5
 8007394:	f000 fe12 	bl	8007fbc <HAL_ETH_Init>
        if( xHalEthInitStatus == HAL_OK )
 8007398:	2800      	cmp	r0, #0
 800739a:	d088      	beq.n	80072ae <xNetworkInterfaceInitialise+0x16>
                xMacInitStatus = eMACFailed;
 800739c:	2302      	movs	r3, #2
 800739e:	7033      	strb	r3, [r6, #0]
 80073a0:	e782      	b.n	80072a8 <xNetworkInterfaceInitialise+0x10>
                        configASSERT( pucBuffer != NULL );
 80073a2:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80073a6:	4818      	ldr	r0, [pc, #96]	@ (8007408 <xNetworkInterfaceInitialise+0x170>)
 80073a8:	f7f9 fd54 	bl	8000e54 <vAssertCalled>
 80073ac:	2200      	movs	r2, #0
 80073ae:	e7a6      	b.n	80072fe <xNetworkInterfaceInitialise+0x66>
            configASSERT( xTransmissionMutex );
 80073b0:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80073b4:	4814      	ldr	r0, [pc, #80]	@ (8007408 <xNetworkInterfaceInitialise+0x170>)
 80073b6:	f7f9 fd4d 	bl	8000e54 <vAssertCalled>
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 80073ba:	e794      	b.n	80072e6 <xNetworkInterfaceInitialise+0x4e>
            configASSERT( xTXDescriptorSemaphore );
 80073bc:	f240 1101 	movw	r1, #257	@ 0x101
 80073c0:	4811      	ldr	r0, [pc, #68]	@ (8007408 <xNetworkInterfaceInitialise+0x170>)
 80073c2:	f7f9 fd47 	bl	8000e54 <vAssertCalled>
 80073c6:	e787      	b.n	80072d8 <xNetworkInterfaceInitialise+0x40>
 80073c8:	20000dc8 	.word	0x20000dc8
 80073cc:	20000d1c 	.word	0x20000d1c
 80073d0:	20000dc4 	.word	0x20000dc4
 80073d4:	20000dc0 	.word	0x20000dc0
 80073d8:	20000d4c 	.word	0x20000d4c
 80073dc:	08007091 	.word	0x08007091
 80073e0:	080070b1 	.word	0x080070b1
 80073e4:	20000cd4 	.word	0x20000cd4
 80073e8:	08010504 	.word	0x08010504
 80073ec:	20000d14 	.word	0x20000d14
 80073f0:	080104a8 	.word	0x080104a8
 80073f4:	08007151 	.word	0x08007151
 80073f8:	080104b4 	.word	0x080104b4
 80073fc:	40028000 	.word	0x40028000
 8007400:	24058060 	.word	0x24058060
 8007404:	24058000 	.word	0x24058000
 8007408:	0801044c 	.word	0x0801044c

0800740c <xGetPhyLinkStatus>:
    if( xPhyObject.ulLinkStatusMask != 0U )
 800740c:	4b02      	ldr	r3, [pc, #8]	@ (8007418 <xGetPhyLinkStatus+0xc>)
 800740e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
}
 8007410:	3800      	subs	r0, #0
 8007412:	bf18      	it	ne
 8007414:	2001      	movne	r0, #1
 8007416:	4770      	bx	lr
 8007418:	20000cd4 	.word	0x20000cd4

0800741c <xNetworkInterfaceOutput>:
    if( xPhyObject.ulLinkStatusMask != 0U )
 800741c:	4b23      	ldr	r3, [pc, #140]	@ (80074ac <xNetworkInterfaceOutput+0x90>)
 800741e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
{
 8007420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007424:	4605      	mov	r5, r0
 8007426:	b084      	sub	sp, #16
 8007428:	460c      	mov	r4, r1
    if( xPhyObject.ulLinkStatusMask != 0U )
 800742a:	b1a3      	cbz	r3, 8007456 <xNetworkInterfaceOutput+0x3a>
            pucTXBuffer = pxDescriptor->pucEthernetBuffer;
 800742c:	6986      	ldr	r6, [r0, #24]
            configASSERT( xReleaseAfterSend != pdFALSE );
 800742e:	b1e1      	cbz	r1, 800746a <xNetworkInterfaceOutput+0x4e>
            .len    = pxDescriptor->xDataLength,
 8007430:	69eb      	ldr	r3, [r5, #28]
        ETH_BufferTypeDef xTransmitBuffer =
 8007432:	2700      	movs	r7, #0
        if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 8007434:	4a1e      	ldr	r2, [pc, #120]	@ (80074b0 <xNetworkInterfaceOutput+0x94>)
 8007436:	2164      	movs	r1, #100	@ 0x64
        ETH_BufferTypeDef xTransmitBuffer =
 8007438:	9703      	str	r7, [sp, #12]
        if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 800743a:	6810      	ldr	r0, [r2, #0]
        ETH_BufferTypeDef xTransmitBuffer =
 800743c:	e9cd 6301 	strd	r6, r3, [sp, #4]
        xTxConfig.Length = pxDescriptor->xDataLength;
 8007440:	4e1c      	ldr	r6, [pc, #112]	@ (80074b4 <xNetworkInterfaceOutput+0x98>)
 8007442:	6073      	str	r3, [r6, #4]
        xTxConfig.TxBuffer = &( xTransmitBuffer );
 8007444:	ab01      	add	r3, sp, #4
 8007446:	60b3      	str	r3, [r6, #8]
        if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 8007448:	f001 fb0e 	bl	8008a68 <xQueueSemaphoreTake>
 800744c:	2801      	cmp	r0, #1
 800744e:	d012      	beq.n	8007476 <xNetworkInterfaceOutput+0x5a>
            FreeRTOS_printf( ( "emacps_send_message: Time-out waiting for TX buffer\n" ) );
 8007450:	4819      	ldr	r0, [pc, #100]	@ (80074b8 <xNetworkInterfaceOutput+0x9c>)
 8007452:	f005 fcf3 	bl	800ce3c <lUDPLoggingPrintf>
    if( xReleaseAfterSend != pdFALSE )
 8007456:	b924      	cbnz	r4, 8007462 <xNetworkInterfaceOutput+0x46>
{
 8007458:	2400      	movs	r4, #0
}
 800745a:	4620      	mov	r0, r4
 800745c:	b004      	add	sp, #16
 800745e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 8007462:	4628      	mov	r0, r5
 8007464:	f7ff fa94 	bl	8006990 <vReleaseNetworkBufferAndDescriptor>
 8007468:	e7f6      	b.n	8007458 <xNetworkInterfaceOutput+0x3c>
            configASSERT( xReleaseAfterSend != pdFALSE );
 800746a:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800746e:	4813      	ldr	r0, [pc, #76]	@ (80074bc <xNetworkInterfaceOutput+0xa0>)
 8007470:	f7f9 fcf0 	bl	8000e54 <vAssertCalled>
 8007474:	e7dc      	b.n	8007430 <xNetworkInterfaceOutput+0x14>
  __ASM volatile ("dsb 0xF":::"memory");
 8007476:	f3bf 8f4f 	dsb	sy
            if( xSemaphoreTake( xTransmissionMutex, xBlockTimeTicks ) != pdFAIL )
 800747a:	f8df 8048 	ldr.w	r8, [pc, #72]	@ 80074c4 <xNetworkInterfaceOutput+0xa8>
 800747e:	2164      	movs	r1, #100	@ 0x64
 8007480:	f8d8 0000 	ldr.w	r0, [r8]
 8007484:	f001 faf0 	bl	8008a68 <xQueueSemaphoreTake>
 8007488:	2800      	cmp	r0, #0
 800748a:	d0e4      	beq.n	8007456 <xNetworkInterfaceOutput+0x3a>
                if( HAL_ETH_Transmit_IT( &( xEthHandle ), &( xTxConfig ) ) == HAL_OK )
 800748c:	4631      	mov	r1, r6
 800748e:	480c      	ldr	r0, [pc, #48]	@ (80074c0 <xNetworkInterfaceOutput+0xa4>)
 8007490:	f000 fa88 	bl	80079a4 <HAL_ETH_Transmit_IT>
 8007494:	fab0 f480 	clz	r4, r0
                xSemaphoreGive( xTransmissionMutex );
 8007498:	463b      	mov	r3, r7
 800749a:	463a      	mov	r2, r7
 800749c:	4639      	mov	r1, r7
 800749e:	f8d8 0000 	ldr.w	r0, [r8]
                if( HAL_ETH_Transmit_IT( &( xEthHandle ), &( xTxConfig ) ) == HAL_OK )
 80074a2:	0964      	lsrs	r4, r4, #5
                xSemaphoreGive( xTransmissionMutex );
 80074a4:	f001 f954 	bl	8008750 <xQueueGenericSend>
    if( xReleaseAfterSend != pdFALSE )
 80074a8:	e7d7      	b.n	800745a <xNetworkInterfaceOutput+0x3e>
 80074aa:	bf00      	nop
 80074ac:	20000cd4 	.word	0x20000cd4
 80074b0:	20000dc4 	.word	0x20000dc4
 80074b4:	20000d18 	.word	0x20000d18
 80074b8:	080104cc 	.word	0x080104cc
 80074bc:	0801044c 	.word	0x0801044c
 80074c0:	20000d4c 	.word	0x20000d4c
 80074c4:	20000dc0 	.word	0x20000dc0

080074c8 <ETH_IRQHandler>:
    HAL_ETH_IRQHandler( &( xEthHandle ) );
 80074c8:	4801      	ldr	r0, [pc, #4]	@ (80074d0 <ETH_IRQHandler+0x8>)
 80074ca:	f000 bb5b 	b.w	8007b84 <HAL_ETH_IRQHandler>
 80074ce:	bf00      	nop
 80074d0:	20000d4c 	.word	0x20000d4c

080074d4 <HAL_ETH_TxCpltCallback>:
    ulISREvents |= ulFlags;
 80074d4:	4a0e      	ldr	r2, [pc, #56]	@ (8007510 <HAL_ETH_TxCpltCallback+0x3c>)
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80074d6:	2100      	movs	r1, #0
    if( xEMACTaskHandle != NULL )
 80074d8:	480e      	ldr	r0, [pc, #56]	@ (8007514 <HAL_ETH_TxCpltCallback+0x40>)
    ulISREvents |= ulFlags;
 80074da:	6813      	ldr	r3, [r2, #0]
    if( xEMACTaskHandle != NULL )
 80074dc:	6800      	ldr	r0, [r0, #0]
    ulISREvents |= ulFlags;
 80074de:	f043 0302 	orr.w	r3, r3, #2
{
 80074e2:	b500      	push	{lr}
 80074e4:	b083      	sub	sp, #12
    ulISREvents |= ulFlags;
 80074e6:	6013      	str	r3, [r2, #0]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80074e8:	9101      	str	r1, [sp, #4]
    if( xEMACTaskHandle != NULL )
 80074ea:	b170      	cbz	r0, 800750a <HAL_ETH_TxCpltCallback+0x36>
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &( xHigherPriorityTaskWoken ) );
 80074ec:	aa01      	add	r2, sp, #4
 80074ee:	f002 fac3 	bl	8009a78 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80074f2:	9b01      	ldr	r3, [sp, #4]
 80074f4:	b14b      	cbz	r3, 800750a <HAL_ETH_TxCpltCallback+0x36>
 80074f6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80074fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	f3bf 8f6f 	isb	sy
}
 800750a:	b003      	add	sp, #12
 800750c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007510:	20000dcc 	.word	0x20000dcc
 8007514:	20000d14 	.word	0x20000d14

08007518 <HAL_ETH_RxCpltCallback>:
    ulISREvents |= ulFlags;
 8007518:	4a0e      	ldr	r2, [pc, #56]	@ (8007554 <HAL_ETH_RxCpltCallback+0x3c>)
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800751a:	2100      	movs	r1, #0
    if( xEMACTaskHandle != NULL )
 800751c:	480e      	ldr	r0, [pc, #56]	@ (8007558 <HAL_ETH_RxCpltCallback+0x40>)
    ulISREvents |= ulFlags;
 800751e:	6813      	ldr	r3, [r2, #0]
    if( xEMACTaskHandle != NULL )
 8007520:	6800      	ldr	r0, [r0, #0]
    ulISREvents |= ulFlags;
 8007522:	f043 0301 	orr.w	r3, r3, #1
{
 8007526:	b500      	push	{lr}
 8007528:	b083      	sub	sp, #12
    ulISREvents |= ulFlags;
 800752a:	6013      	str	r3, [r2, #0]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800752c:	9101      	str	r1, [sp, #4]
    if( xEMACTaskHandle != NULL )
 800752e:	b170      	cbz	r0, 800754e <HAL_ETH_RxCpltCallback+0x36>
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &( xHigherPriorityTaskWoken ) );
 8007530:	aa01      	add	r2, sp, #4
 8007532:	f002 faa1 	bl	8009a78 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8007536:	9b01      	ldr	r3, [sp, #4]
 8007538:	b14b      	cbz	r3, 800754e <HAL_ETH_RxCpltCallback+0x36>
 800753a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800753e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007542:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007546:	f3bf 8f4f 	dsb	sy
 800754a:	f3bf 8f6f 	isb	sy
}
 800754e:	b003      	add	sp, #12
 8007550:	f85d fb04 	ldr.w	pc, [sp], #4
 8007554:	20000dcc 	.word	0x20000dcc
 8007558:	20000d14 	.word	0x20000d14

0800755c <HAL_ETH_DMAErrorCallback>:
    ulISREvents |= ulFlags;
 800755c:	4a0e      	ldr	r2, [pc, #56]	@ (8007598 <HAL_ETH_DMAErrorCallback+0x3c>)
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800755e:	2100      	movs	r1, #0
    if( xEMACTaskHandle != NULL )
 8007560:	480e      	ldr	r0, [pc, #56]	@ (800759c <HAL_ETH_DMAErrorCallback+0x40>)
    ulISREvents |= ulFlags;
 8007562:	6813      	ldr	r3, [r2, #0]
    if( xEMACTaskHandle != NULL )
 8007564:	6800      	ldr	r0, [r0, #0]
    ulISREvents |= ulFlags;
 8007566:	f043 0304 	orr.w	r3, r3, #4
{
 800756a:	b500      	push	{lr}
 800756c:	b083      	sub	sp, #12
    ulISREvents |= ulFlags;
 800756e:	6013      	str	r3, [r2, #0]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007570:	9101      	str	r1, [sp, #4]
    if( xEMACTaskHandle != NULL )
 8007572:	b170      	cbz	r0, 8007592 <HAL_ETH_DMAErrorCallback+0x36>
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &( xHigherPriorityTaskWoken ) );
 8007574:	aa01      	add	r2, sp, #4
 8007576:	f002 fa7f 	bl	8009a78 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800757a:	9b01      	ldr	r3, [sp, #4]
 800757c:	b14b      	cbz	r3, 8007592 <HAL_ETH_DMAErrorCallback+0x36>
 800757e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007586:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	f3bf 8f6f 	isb	sy
}
 8007592:	b003      	add	sp, #12
 8007594:	f85d fb04 	ldr.w	pc, [sp], #4
 8007598:	20000dcc 	.word	0x20000dcc
 800759c:	20000d14 	.word	0x20000d14

080075a0 <vNetworkInterfaceAllocateRAMToBuffers>:
    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 80075a0:	4b05      	ldr	r3, [pc, #20]	@ (80075b8 <vNetworkInterfaceAllocateRAMToBuffers+0x18>)
 80075a2:	f503 32c0 	add.w	r2, r3, #98304	@ 0x18000
        pxNetworkBuffers[ ul ].pucEthernetBuffer = ucRAMBuffer + ipBUFFER_PADDING;
 80075a6:	6183      	str	r3, [r0, #24]
        *( ( unsigned * ) ucRAMBuffer ) = ( unsigned ) ( &( pxNetworkBuffers[ ul ] ) );
 80075a8:	f843 0c0a 	str.w	r0, [r3, #-10]
    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 80075ac:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80075b0:	3024      	adds	r0, #36	@ 0x24
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d1f7      	bne.n	80075a6 <vNetworkInterfaceAllocateRAMToBuffers+0x6>
}
 80075b6:	4770      	bx	lr
 80075b8:	2404000a 	.word	0x2404000a

080075bc <ETH_SetMACConfig>:
 * @{
 */

        static void ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                      ETH_MACConfigTypeDef * macconf )
        {
 80075bc:	b430      	push	{r4, r5}
                          macconf->BackOffLimit |
                          ( ( uint32_t ) macconf->DeferralCheck << 4 ) |
                          macconf->PreambleLength );

            /* Write to MACCR */
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 80075be:	688b      	ldr	r3, [r1, #8]
 80075c0:	680d      	ldr	r5, [r1, #0]
 80075c2:	694c      	ldr	r4, [r1, #20]
 80075c4:	432b      	orrs	r3, r5
 80075c6:	6802      	ldr	r2, [r0, #0]
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 80075c8:	f891 c011 	ldrb.w	ip, [r1, #17]
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 80075cc:	4323      	orrs	r3, r4
 80075ce:	698c      	ldr	r4, [r1, #24]
 80075d0:	6810      	ldr	r0, [r2, #0]
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 80075d2:	fabc fc8c 	clz	ip, ip
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 80075d6:	4323      	orrs	r3, r4
 80075d8:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 80075da:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
                          ( ( uint32_t ) ( ( macconf->CRCCheckingRxPackets == DISABLE ) ? 1U : 0U ) << 16 ) |
                          macconf->GiantPacketSizeLimit );

            /* Write to MACECR */
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 80075de:	4d52      	ldr	r5, [pc, #328]	@ (8007728 <ETH_SetMACConfig+0x16c>)
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 80075e0:	4323      	orrs	r3, r4
 80075e2:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 80075e4:	4323      	orrs	r3, r4
 80075e6:	4c51      	ldr	r4, [pc, #324]	@ (800772c <ETH_SetMACConfig+0x170>)
 80075e8:	4020      	ands	r0, r4
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 80075ea:	790c      	ldrb	r4, [r1, #4]
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 80075ec:	4303      	orrs	r3, r0
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 80075ee:	7b48      	ldrb	r0, [r1, #13]
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 80075f0:	ea43 63c4 	orr.w	r3, r3, r4, lsl #27
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 80075f4:	7b0c      	ldrb	r4, [r1, #12]
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 80075f6:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 80075fa:	7b8c      	ldrb	r4, [r1, #14]
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 80075fc:	ea43 5380 	orr.w	r3, r3, r0, lsl #22
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 8007600:	7bc8      	ldrb	r0, [r1, #15]
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8007602:	ea43 5344 	orr.w	r3, r3, r4, lsl #21
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 8007606:	7c8c      	ldrb	r4, [r1, #18]
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8007608:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 800760c:	7f08      	ldrb	r0, [r1, #28]
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 800760e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8007612:	7f4c      	ldrb	r4, [r1, #29]
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8007614:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 8007618:	7fc8      	ldrb	r0, [r1, #31]
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 800761a:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
                          ( ( uint32_t ) macconf->DeferralCheck << 4 ) |
 800761e:	f891 4028 	ldrb.w	r4, [r1, #40]	@ 0x28
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8007622:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 8007626:	7c08      	ldrb	r0, [r1, #16]
 8007628:	fab0 f080 	clz	r0, r0
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 800762c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8007630:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 8007632:	0940      	lsrs	r0, r0, #5
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8007634:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8007638:	7f88      	ldrb	r0, [r1, #30]
 800763a:	fab0 f080 	clz	r0, r0
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 800763e:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8007642:	0940      	lsrs	r0, r0, #5
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8007644:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 8007648:	f891 0020 	ldrb.w	r0, [r1, #32]
 800764c:	fab0 f080 	clz	r0, r0
 8007650:	0940      	lsrs	r0, r0, #5
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8007652:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 8007656:	6b48      	ldr	r0, [r1, #52]	@ 0x34
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8007658:	6013      	str	r3, [r2, #0]
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 800765a:	6853      	ldr	r3, [r2, #4]
 800765c:	402b      	ands	r3, r5
                          macconf->PauseLowThreshold |
                          ( ( uint32_t ) ( ( macconf->ZeroQuantaPause == DISABLE ) ? 1U : 0U ) << 7 ) |
                          ( macconf->PauseTime << 16 ) );

            /* Write to MACTFCR */
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 800765e:	f64f 750d 	movw	r5, #65293	@ 0xff0d
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 8007662:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8007666:	f891 4038 	ldrb.w	r4, [r1, #56]	@ 0x38
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 800766a:	4303      	orrs	r3, r0
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 800766c:	f891 0030 	ldrb.w	r0, [r1, #48]	@ 0x30
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 8007670:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8007674:	f891 4031 	ldrb.w	r4, [r1, #49]	@ 0x31
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 8007678:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
                          ( ( uint32_t ) ( ( macconf->CRCCheckingRxPackets == DISABLE ) ? 1U : 0U ) << 16 ) |
 800767c:	f891 0032 	ldrb.w	r0, [r1, #50]	@ 0x32
 8007680:	fab0 f080 	clz	r0, r0
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 8007684:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
                          ( ( uint32_t ) ( ( macconf->CRCCheckingRxPackets == DISABLE ) ? 1U : 0U ) << 16 ) |
 8007688:	0940      	lsrs	r0, r0, #5
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 800768a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 800768e:	4828      	ldr	r0, [pc, #160]	@ (8007730 <ETH_SetMACConfig+0x174>)
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 8007690:	6053      	str	r3, [r2, #4]
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 8007692:	68d3      	ldr	r3, [r2, #12]
                          ( macconf->PauseTime << 16 ) );
 8007694:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 8007696:	4018      	ands	r0, r3
 8007698:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
 800769a:	4318      	orrs	r0, r3
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 800769c:	f891 3040 	ldrb.w	r3, [r1, #64]	@ 0x40
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 80076a0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80076a4:	60d0      	str	r0, [r2, #12]
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 80076a6:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80076a8:	6d08      	ldr	r0, [r1, #80]	@ 0x50
 80076aa:	402b      	ands	r3, r5
 80076ac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 80076b0:	f891 4054 	ldrb.w	r4, [r1, #84]	@ 0x54
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 80076b4:	4303      	orrs	r3, r0
                          ( ( uint32_t ) ( ( macconf->ZeroQuantaPause == DISABLE ) ? 1U : 0U ) << 7 ) |
 80076b6:	f891 004c 	ldrb.w	r0, [r1, #76]	@ 0x4c
 80076ba:	fab0 f080 	clz	r0, r0
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 80076be:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
                          ( ( uint32_t ) ( ( macconf->ZeroQuantaPause == DISABLE ) ? 1U : 0U ) << 7 ) |
 80076c2:	0940      	lsrs	r0, r0, #5
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 80076c4:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
                          ( ( uint32_t ) macconf->ForwardRxErrorPacket << 4 ) |
                          ( ( uint32_t ) macconf->ForwardRxUndersizedGoodPacket << 3 ) );

            /* Write to MTLRQOMR */
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 80076c8:	e9d1 5416 	ldrd	r5, r4, [r1, #88]	@ 0x58
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 80076cc:	6713      	str	r3, [r2, #112]	@ 0x70
            MODIFY_REG( heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval );
 80076ce:	f8d2 0090 	ldr.w	r0, [r2, #144]	@ 0x90
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 80076d2:	f891 3056 	ldrb.w	r3, [r1, #86]	@ 0x56
            MODIFY_REG( heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval );
 80076d6:	f020 0003 	bic.w	r0, r0, #3
 80076da:	4303      	orrs	r3, r0
                          ( ( uint32_t ) macconf->UnicastPausePacketDetect << 1 ) );
 80076dc:	f891 0055 	ldrb.w	r0, [r1, #85]	@ 0x55
            MODIFY_REG( heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval );
 80076e0:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 80076e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            MODIFY_REG( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode );
 80076e8:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	@ 0xd00
 80076ec:	f023 0372 	bic.w	r3, r3, #114	@ 0x72
 80076f0:	432b      	orrs	r3, r5
 80076f2:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 80076f6:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	@ 0xd30
                          ( ( uint32_t ) macconf->ForwardRxErrorPacket << 4 ) |
 80076fa:	f891 0061 	ldrb.w	r0, [r1, #97]	@ 0x61
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 80076fe:	f023 037b 	bic.w	r3, r3, #123	@ 0x7b
                          ( ( uint32_t ) macconf->ForwardRxUndersizedGoodPacket << 3 ) );
 8007702:	f891 c062 	ldrb.w	ip, [r1, #98]	@ 0x62
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 8007706:	4323      	orrs	r3, r4
 8007708:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 800770c:	f891 0060 	ldrb.w	r0, [r1, #96]	@ 0x60
 8007710:	fab0 f180 	clz	r1, r0
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 8007714:	ea43 03cc 	orr.w	r3, r3, ip, lsl #3
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 8007718:	0949      	lsrs	r1, r1, #5
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 800771a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
        }
 800771e:	bc30      	pop	{r4, r5}
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 8007720:	f8c2 3d30 	str.w	r3, [r2, #3376]	@ 0xd30
        }
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	c0f88000 	.word	0xc0f88000
 800772c:	00048083 	.word	0x00048083
 8007730:	fffffef0 	.word	0xfffffef0

08007734 <ETH_SetDMAConfig>:
                                      ETH_DMAConfigTypeDef * dmaconf )
        {
            uint32_t dmaregval;

            /*------------------------ DMAMR Configuration --------------------*/
            MODIFY_REG( heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration );
 8007734:	6803      	ldr	r3, [r0, #0]
 8007736:	4a1e      	ldr	r2, [pc, #120]	@ (80077b0 <ETH_SetDMAConfig+0x7c>)
 8007738:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800773c:	6808      	ldr	r0, [r1, #0]
        {
 800773e:	b410      	push	{r4}
            MODIFY_REG( heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration );
 8007740:	681c      	ldr	r4, [r3, #0]
 8007742:	4022      	ands	r2, r4
 8007744:	4302      	orrs	r2, r0
 8007746:	601a      	str	r2, [r3, #0]

            /*------------------------ DMASBMR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
                          dmaconf->BurstMode |
                          ( ( uint32_t ) dmaconf->RebuildINCRxBurst << 15 ) );
 8007748:	7b0a      	ldrb	r2, [r1, #12]
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 800774a:	790c      	ldrb	r4, [r1, #4]
                          ( ( uint32_t ) dmaconf->RebuildINCRxBurst << 15 ) );
 800774c:	03d2      	lsls	r2, r2, #15

            MODIFY_REG( heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval );
 800774e:	6858      	ldr	r0, [r3, #4]
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 8007750:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8007754:	688c      	ldr	r4, [r1, #8]
 8007756:	4322      	orrs	r2, r4
            MODIFY_REG( heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval );
 8007758:	4c16      	ldr	r4, [pc, #88]	@ (80077b4 <ETH_SetDMAConfig+0x80>)
 800775a:	4004      	ands	r4, r0

            /*------------------------ DMACCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 800775c:	6a08      	ldr	r0, [r1, #32]
            MODIFY_REG( heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval );
 800775e:	4322      	orrs	r2, r4
 8007760:	605a      	str	r2, [r3, #4]
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 8007762:	7b4a      	ldrb	r2, [r1, #13]
                          dmaconf->MaximumSegmentSize );

            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval );
 8007764:	f8d3 4100 	ldr.w	r4, [r3, #256]	@ 0x100
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 8007768:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval );
 800776c:	4812      	ldr	r0, [pc, #72]	@ (80077b8 <ETH_SetDMAConfig+0x84>)
 800776e:	4020      	ands	r0, r4
 8007770:	4302      	orrs	r2, r0
 8007772:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

            /*------------------------ DMACTCR Configuration --------------------*/
            dmaregval = ( dmaconf->TxDMABurstLength |
                          ( ( uint32_t ) dmaconf->SecondPacketOperate << 4 ) |
                          ( ( uint32_t ) dmaconf->TCPSegmentation << 12 ) );
 8007776:	7f4a      	ldrb	r2, [r1, #29]
                          ( ( uint32_t ) dmaconf->SecondPacketOperate << 4 ) |
 8007778:	7d0c      	ldrb	r4, [r1, #20]
                          ( ( uint32_t ) dmaconf->TCPSegmentation << 12 ) );
 800777a:	0312      	lsls	r2, r2, #12

            MODIFY_REG( heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval );
 800777c:	f8d3 0104 	ldr.w	r0, [r3, #260]	@ 0x104
            dmaregval = ( dmaconf->TxDMABurstLength |
 8007780:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8007784:	690c      	ldr	r4, [r1, #16]
 8007786:	4322      	orrs	r2, r4
            MODIFY_REG( heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval );
 8007788:	4c0c      	ldr	r4, [pc, #48]	@ (80077bc <ETH_SetDMAConfig+0x88>)
 800778a:	4004      	ands	r4, r0

            /*------------------------ DMACRCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 800778c:	6988      	ldr	r0, [r1, #24]
            MODIFY_REG( heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval );
 800778e:	4322      	orrs	r2, r4
 8007790:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
                          dmaconf->RxDMABurstLength );

            /* Write to DMACRCR */
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 8007794:	f8d3 4108 	ldr.w	r4, [r3, #264]	@ 0x108
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 8007798:	7f0a      	ldrb	r2, [r1, #28]
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 800779a:	4909      	ldr	r1, [pc, #36]	@ (80077c0 <ETH_SetDMAConfig+0x8c>)
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 800779c:	ea40 72c2 	orr.w	r2, r0, r2, lsl #31
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 80077a0:	4021      	ands	r1, r4
        }
 80077a2:	f85d 4b04 	ldr.w	r4, [sp], #4
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 80077a6:	430a      	orrs	r2, r1
 80077a8:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
        }
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	ffff87fd 	.word	0xffff87fd
 80077b4:	ffff2ffe 	.word	0xffff2ffe
 80077b8:	fffec000 	.word	0xfffec000
 80077bc:	ffc0efef 	.word	0xffc0efef
 80077c0:	7fc0ffff 	.word	0x7fc0ffff

080077c4 <ETH_Prepare_Tx_Descriptors>:
 * @retval Status
 */
        static uint32_t ETH_Prepare_Tx_Descriptors( ETH_HandleTypeDef * heth,
                                                    ETH_TxPacketConfig * pTxConfig,
                                                    uint32_t ItMode )
        {
 80077c4:	b4f0      	push	{r4, r5, r6, r7}
            ETH_TxDescListTypeDef * dmatxdesclist = &heth->TxDescList;
            uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
            uint32_t DESC3;
            ETH_DMADescTypeDef * dmatxdesc = ( ETH_DMADescTypeDef * ) dmatxdesclist->TxDesc[ firstdescidx ];
 80077c6:	6a84      	ldr	r4, [r0, #40]	@ 0x28
            ETH_BufferTypeDef * txbuffer = pTxConfig->TxBuffer;

            /* FreeRTOS+TCP doesn't support linked buffers. */
            txbuffer->next = NULL;
 80077c8:	2500      	movs	r5, #0
            ETH_BufferTypeDef * txbuffer = pTxConfig->TxBuffer;
 80077ca:	688b      	ldr	r3, [r1, #8]
            ETH_DMADescTypeDef * dmatxdesc = ( ETH_DMADescTypeDef * ) dmatxdesclist->TxDesc[ firstdescidx ];
 80077cc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80077d0:	6980      	ldr	r0, [r0, #24]
            txbuffer->next = NULL;
 80077d2:	609d      	str	r5, [r3, #8]
            DESC3 = READ_REG( dmatxdesc->DESC3 );
 80077d4:	68c4      	ldr	r4, [r0, #12]

            /* Current TX Descriptor Owned by DMA: cannot be used by the application  */
            if( READ_BIT( DESC3, ETH_DMATXNDESCWBF_OWN ) != 0U )
 80077d6:	42ac      	cmp	r4, r5
 80077d8:	db32      	blt.n	8007840 <ETH_Prepare_Tx_Descriptors+0x7c>
            /***************************************************************************/
            /*****************    Normal descriptors configuration     *****************/
            /***************************************************************************/

            /* Set header or buffer 1 address */
            WRITE_REG( dmatxdesc->DESC0, ( uint32_t ) txbuffer->buffer );
 80077da:	681e      	ldr	r6, [r3, #0]
 80077dc:	6006      	str	r6, [r0, #0]
            /* Set header or buffer 1 Length */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len );
 80077de:	685e      	ldr	r6, [r3, #4]
 80077e0:	6887      	ldr	r7, [r0, #8]
 80077e2:	4b19      	ldr	r3, [pc, #100]	@ (8007848 <ETH_Prepare_Tx_Descriptors+0x84>)
 80077e4:	403b      	ands	r3, r7
 80077e6:	4333      	orrs	r3, r6
 80077e8:	6083      	str	r3, [r0, #8]

            WRITE_REG( dmatxdesc->DESC1, 0x0 );
 80077ea:	6045      	str	r5, [r0, #4]
            /* Set buffer 2 Length to zero */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U );
 80077ec:	4b17      	ldr	r3, [pc, #92]	@ (800784c <ETH_Prepare_Tx_Descriptors+0x88>)
 80077ee:	6885      	ldr	r5, [r0, #8]
 80077f0:	402b      	ands	r3, r5
 80077f2:	6083      	str	r3, [r0, #8]

            MODIFY_REG( DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length );
 80077f4:	4b16      	ldr	r3, [pc, #88]	@ (8007850 <ETH_Prepare_Tx_Descriptors+0x8c>)
 80077f6:	4023      	ands	r3, r4
 80077f8:	684c      	ldr	r4, [r1, #4]
 80077fa:	4323      	orrs	r3, r4

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM ) != 0U )
 80077fc:	680c      	ldr	r4, [r1, #0]
 80077fe:	07e5      	lsls	r5, r4, #31
 8007800:	d503      	bpl.n	800780a <ETH_Prepare_Tx_Descriptors+0x46>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl );
 8007802:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8007806:	694d      	ldr	r5, [r1, #20]
 8007808:	432b      	orrs	r3, r5
            }

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD ) != 0U )
 800780a:	06a4      	lsls	r4, r4, #26
 800780c:	d503      	bpl.n	8007816 <ETH_Prepare_Tx_Descriptors+0x52>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl );
 800780e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8007812:	6909      	ldr	r1, [r1, #16]
 8007814:	430b      	orrs	r3, r1

            /* Mark it as First and the last Descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_FD | ETH_DMATXNDESCRF_LD );

            /* Mark it as NORMAL descriptor */
            CLEAR_BIT( DESC3, ETH_DMATXNDESCRF_CTXT );
 8007816:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000

            /* set OWN bit of FIRST descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_OWN );
 800781a:	f043 4330 	orr.w	r3, r3, #2952790016	@ 0xb0000000

            if( ItMode != ( ( uint32_t ) RESET ) )
 800781e:	b952      	cbnz	r2, 8007836 <ETH_Prepare_Tx_Descriptors+0x72>
                SET_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
            }
            else
            {
                /* Clear Interrupt on competition bit */
                CLEAR_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 8007820:	6882      	ldr	r2, [r0, #8]
 8007822:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007826:	6082      	str	r2, [r0, #8]
            }

            WRITE_REG( dmatxdesc->DESC3, DESC3 );
 8007828:	60c3      	str	r3, [r0, #12]

            /* Read back the value. */
            if( READ_REG( dmatxdesc->DESC3 ) )
 800782a:	68c3      	ldr	r3, [r0, #12]
 800782c:	f3bf 8f4f 	dsb	sy
            }

            __DSB();

            /* Return function status */
            return HAL_ETH_ERROR_NONE;
 8007830:	2000      	movs	r0, #0
        }
 8007832:	bcf0      	pop	{r4, r5, r6, r7}
 8007834:	4770      	bx	lr
                SET_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 8007836:	6882      	ldr	r2, [r0, #8]
 8007838:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800783c:	6082      	str	r2, [r0, #8]
 800783e:	e7f3      	b.n	8007828 <ETH_Prepare_Tx_Descriptors+0x64>
                return HAL_ETH_ERROR_BUSY;
 8007840:	2002      	movs	r0, #2
        }
 8007842:	bcf0      	pop	{r4, r5, r6, r7}
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	ffffc000 	.word	0xffffc000
 800784c:	c000ffff 	.word	0xc000ffff
 8007850:	ffff8000 	.word	0xffff8000

08007854 <HAL_ETH_DescAssignMemory>:
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ Index ];
 8007854:	f101 030c 	add.w	r3, r1, #12
        {
 8007858:	4684      	mov	ip, r0
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ Index ];
 800785a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
            if( ( pBuffer1 == NULL ) || ( Index >= ( uint32_t ) ETH_RX_DESC_CNT ) )
 800785e:	b19a      	cbz	r2, 8007888 <HAL_ETH_DescAssignMemory+0x34>
 8007860:	2903      	cmp	r1, #3
 8007862:	bf94      	ite	ls
 8007864:	2000      	movls	r0, #0
 8007866:	2001      	movhi	r0, #1
 8007868:	b970      	cbnz	r0, 8007888 <HAL_ETH_DescAssignMemory+0x34>
        {
 800786a:	b410      	push	{r4}
            WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pBuffer1 );
 800786c:	601a      	str	r2, [r3, #0]
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V );
 800786e:	68dc      	ldr	r4, [r3, #12]
            WRITE_REG( dmarxdesc->BackupAddr0, ( uint32_t ) pBuffer1 );
 8007870:	611a      	str	r2, [r3, #16]
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V );
 8007872:	f044 7480 	orr.w	r4, r4, #16777216	@ 0x1000000
 8007876:	60dc      	str	r4, [r3, #12]
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN );
 8007878:	68da      	ldr	r2, [r3, #12]
        }
 800787a:	f85d 4b04 	ldr.w	r4, [sp], #4
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN );
 800787e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007882:	60da      	str	r2, [r3, #12]
            ( void ) dmarxdesc->DESC3;
 8007884:	68db      	ldr	r3, [r3, #12]
        }
 8007886:	4770      	bx	lr
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8007888:	2301      	movs	r3, #1
                return HAL_ERROR;
 800788a:	4618      	mov	r0, r3
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800788c:	f8cc 3060 	str.w	r3, [ip, #96]	@ 0x60
        }
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop

08007894 <HAL_ETH_Start_IT>:
            if( heth->gState == HAL_ETH_STATE_READY )
 8007894:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8007896:	2a10      	cmp	r2, #16
 8007898:	d001      	beq.n	800789e <HAL_ETH_Start_IT+0xa>
                return HAL_ERROR;
 800789a:	2001      	movs	r0, #1
        }
 800789c:	4770      	bx	lr
                heth->gState = HAL_ETH_STATE_BUSY;
 800789e:	2223      	movs	r2, #35	@ 0x23
 80078a0:	4603      	mov	r3, r0
 80078a2:	f100 012c 	add.w	r1, r0, #44	@ 0x2c
 80078a6:	f100 0c3c 	add.w	ip, r0, #60	@ 0x3c
        {
 80078aa:	b470      	push	{r4, r5, r6}
                heth->gState = HAL_ETH_STATE_BUSY;
 80078ac:	6582      	str	r2, [r0, #88]	@ 0x58
                    dma_rx_desc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ desc_index ];
 80078ae:	f851 0f04 	ldr.w	r0, [r1, #4]!
                    SET_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCRF_IOC );
 80078b2:	68c2      	ldr	r2, [r0, #12]
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 80078b4:	4561      	cmp	r1, ip
                    SET_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCRF_IOC );
 80078b6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80078ba:	60c2      	str	r2, [r0, #12]
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 80078bc:	d1f7      	bne.n	80078ae <HAL_ETH_Start_IT+0x1a>
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 80078be:	681a      	ldr	r2, [r3, #0]
                heth->RxDescList.ItMode = 1U;
 80078c0:	2401      	movs	r4, #1
                __HAL_ETH_DMA_ENABLE_IT( heth,
 80078c2:	f24d 0141 	movw	r1, #53313	@ 0xd041
                heth->gState = HAL_ETH_STATE_READY;
 80078c6:	2510      	movs	r5, #16
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 80078c8:	6810      	ldr	r0, [r2, #0]
                heth->RxState = HAL_ETH_STATE_BUSY_RX;
 80078ca:	2622      	movs	r6, #34	@ 0x22
                heth->RxDescList.ItMode = 1U;
 80078cc:	651c      	str	r4, [r3, #80]	@ 0x50
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 80078ce:	f040 0002 	orr.w	r0, r0, #2
 80078d2:	6010      	str	r0, [r2, #0]
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 80078d4:	6810      	ldr	r0, [r2, #0]
 80078d6:	4320      	orrs	r0, r4
 80078d8:	6010      	str	r0, [r2, #0]
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 80078da:	f8d2 0d00 	ldr.w	r0, [r2, #3328]	@ 0xd00
 80078de:	4320      	orrs	r0, r4
 80078e0:	f8c2 0d00 	str.w	r0, [r2, #3328]	@ 0xd00
                SET_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 80078e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
                return HAL_OK;
 80078e8:	2000      	movs	r0, #0
                SET_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 80078ea:	f8d2 4104 	ldr.w	r4, [r2, #260]	@ 0x104
 80078ee:	f044 0401 	orr.w	r4, r4, #1
 80078f2:	f8c2 4104 	str.w	r4, [r2, #260]	@ 0x104
                SET_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 80078f6:	f8d2 4108 	ldr.w	r4, [r2, #264]	@ 0x108
 80078fa:	f044 0401 	orr.w	r4, r4, #1
 80078fe:	f8c2 4108 	str.w	r4, [r2, #264]	@ 0x108
                heth->Instance->DMACSR |= ( ETH_DMACSR_TPS | ETH_DMACSR_RPS );
 8007902:	f8d2 4160 	ldr.w	r4, [r2, #352]	@ 0x160
 8007906:	f444 7481 	orr.w	r4, r4, #258	@ 0x102
 800790a:	f8c2 4160 	str.w	r4, [r2, #352]	@ 0x160
                __HAL_ETH_DMA_ENABLE_IT( heth,
 800790e:	f8d2 4134 	ldr.w	r4, [r2, #308]	@ 0x134
 8007912:	4321      	orrs	r1, r4
 8007914:	f8c2 1134 	str.w	r1, [r2, #308]	@ 0x134
                heth->gState = HAL_ETH_STATE_READY;
 8007918:	659d      	str	r5, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_BUSY_RX;
 800791a:	65de      	str	r6, [r3, #92]	@ 0x5c
        }
 800791c:	bc70      	pop	{r4, r5, r6}
 800791e:	4770      	bx	lr

08007920 <HAL_ETH_Stop_IT>:
            if( heth->gState != HAL_ETH_STATE_RESET )
 8007920:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8007922:	2b00      	cmp	r3, #0
 8007924:	d03a      	beq.n	800799c <HAL_ETH_Stop_IT+0x7c>
                __HAL_ETH_DMA_DISABLE_IT( heth, ( ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE |
 8007926:	4602      	mov	r2, r0
 8007928:	4601      	mov	r1, r0
                heth->gState = HAL_ETH_STATE_BUSY;
 800792a:	2023      	movs	r0, #35	@ 0x23
                __HAL_ETH_DMA_DISABLE_IT( heth, ( ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE |
 800792c:	f852 3b2c 	ldr.w	r3, [r2], #44
 8007930:	f101 0c3c 	add.w	ip, r1, #60	@ 0x3c
        {
 8007934:	b430      	push	{r4, r5}
                heth->gState = HAL_ETH_STATE_BUSY;
 8007936:	6588      	str	r0, [r1, #88]	@ 0x58
                __HAL_ETH_DMA_DISABLE_IT( heth, ( ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE |
 8007938:	f503 5080 	add.w	r0, r3, #4096	@ 0x1000
 800793c:	4c18      	ldr	r4, [pc, #96]	@ (80079a0 <HAL_ETH_Stop_IT+0x80>)
 800793e:	f8d0 5134 	ldr.w	r5, [r0, #308]	@ 0x134
 8007942:	402c      	ands	r4, r5
 8007944:	f8c0 4134 	str.w	r4, [r0, #308]	@ 0x134
                CLEAR_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 8007948:	f8d0 4104 	ldr.w	r4, [r0, #260]	@ 0x104
 800794c:	f024 0401 	bic.w	r4, r4, #1
 8007950:	f8c0 4104 	str.w	r4, [r0, #260]	@ 0x104
                CLEAR_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8007954:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
 8007958:	f024 0401 	bic.w	r4, r4, #1
 800795c:	f8c0 4108 	str.w	r4, [r0, #264]	@ 0x108
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 8007960:	6818      	ldr	r0, [r3, #0]
 8007962:	f020 0001 	bic.w	r0, r0, #1
 8007966:	6018      	str	r0, [r3, #0]
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 8007968:	f8d3 0d00 	ldr.w	r0, [r3, #3328]	@ 0xd00
 800796c:	f040 0001 	orr.w	r0, r0, #1
 8007970:	f8c3 0d00 	str.w	r0, [r3, #3328]	@ 0xd00
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8007974:	6818      	ldr	r0, [r3, #0]
 8007976:	f020 0002 	bic.w	r0, r0, #2
 800797a:	6018      	str	r0, [r3, #0]
                    dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ descindex ];
 800797c:	f852 0f04 	ldr.w	r0, [r2, #4]!
                    CLEAR_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC );
 8007980:	68c3      	ldr	r3, [r0, #12]
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8007982:	4562      	cmp	r2, ip
                    CLEAR_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC );
 8007984:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007988:	60c3      	str	r3, [r0, #12]
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 800798a:	d1f7      	bne.n	800797c <HAL_ETH_Stop_IT+0x5c>
                heth->RxDescList.ItMode = 0U;
 800798c:	2200      	movs	r2, #0
                heth->gState = HAL_ETH_STATE_READY;
 800798e:	2310      	movs	r3, #16
                return HAL_OK;
 8007990:	4610      	mov	r0, r2
                heth->gState = HAL_ETH_STATE_READY;
 8007992:	658b      	str	r3, [r1, #88]	@ 0x58
                heth->RxDescList.ItMode = 0U;
 8007994:	650a      	str	r2, [r1, #80]	@ 0x50
                heth->RxState = HAL_ETH_STATE_READY;
 8007996:	65cb      	str	r3, [r1, #92]	@ 0x5c
        }
 8007998:	bc30      	pop	{r4, r5}
 800799a:	4770      	bx	lr
                return HAL_ERROR;
 800799c:	2001      	movs	r0, #1
        }
 800799e:	4770      	bx	lr
 80079a0:	ffff2fbe 	.word	0xffff2fbe

080079a4 <HAL_ETH_Transmit_IT>:
        {
 80079a4:	b510      	push	{r4, lr}
 80079a6:	4604      	mov	r4, r0
            if( pTxConfig == NULL )
 80079a8:	b321      	cbz	r1, 80079f4 <HAL_ETH_Transmit_IT+0x50>
            if( heth->gState == HAL_ETH_STATE_READY )
 80079aa:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80079ac:	2b10      	cmp	r3, #16
 80079ae:	d001      	beq.n	80079b4 <HAL_ETH_Transmit_IT+0x10>
                return HAL_ERROR;
 80079b0:	2001      	movs	r0, #1
        }
 80079b2:	bd10      	pop	{r4, pc}
                if( ETH_Prepare_Tx_Descriptors( heth, pTxConfig, 1 ) != HAL_ETH_ERROR_NONE )
 80079b4:	2201      	movs	r2, #1
 80079b6:	f7ff ff05 	bl	80077c4 <ETH_Prepare_Tx_Descriptors>
 80079ba:	b120      	cbz	r0, 80079c6 <HAL_ETH_Transmit_IT+0x22>
                    heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80079bc:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80079be:	f043 0302 	orr.w	r3, r3, #2
 80079c2:	6623      	str	r3, [r4, #96]	@ 0x60
                    return HAL_ERROR;
 80079c4:	e7f4      	b.n	80079b0 <HAL_ETH_Transmit_IT+0xc>
                INCR_TX_DESC_INDEX( heth->TxDescList.CurTxDesc, 1U );
 80079c6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80079c8:	1c53      	adds	r3, r2, #1
 80079ca:	2b03      	cmp	r3, #3
 80079cc:	bf88      	it	hi
 80079ce:	1ed3      	subhi	r3, r2, #3
                WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) ( heth->TxDescList.TxDesc[ heth->TxDescList.CurTxDesc ] ) );
 80079d0:	6822      	ldr	r2, [r4, #0]
 80079d2:	1d99      	adds	r1, r3, #6
                INCR_TX_DESC_INDEX( heth->TxDescList.CurTxDesc, 1U );
 80079d4:	62a3      	str	r3, [r4, #40]	@ 0x28
                WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) ( heth->TxDescList.TxDesc[ heth->TxDescList.CurTxDesc ] ) );
 80079d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80079da:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 80079de:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
 80079e2:	f3bf 8f4f 	dsb	sy
                ( void ) heth->Instance->DMACTDTPR;
 80079e6:	6823      	ldr	r3, [r4, #0]
                return HAL_OK;
 80079e8:	2000      	movs	r0, #0
                ( void ) heth->Instance->DMACTDTPR;
 80079ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079ee:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
        }
 80079f2:	bd10      	pop	{r4, pc}
                heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80079f4:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80079f6:	f043 0301 	orr.w	r3, r3, #1
 80079fa:	6603      	str	r3, [r0, #96]	@ 0x60
                return HAL_ERROR;
 80079fc:	e7d8      	b.n	80079b0 <HAL_ETH_Transmit_IT+0xc>
 80079fe:	bf00      	nop

08007a00 <HAL_ETH_IsRxDataAvailable>:
        {
 8007a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            uint32_t desc_index = dmarxdesclist->CurRxDesc;
 8007a04:	f8d0 9040 	ldr.w	r9, [r0, #64]	@ 0x40
            uint32_t desc_scan_count = 0;
 8007a08:	2400      	movs	r4, #0
                configASSERT( ( ( ulDesc3 & ETH_DMATXNDESCWBF_FD ) != 0U ) && ( ( ulDesc3 & ETH_DMATXNDESCWBF_LD ) != 0U ) );
 8007a0a:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 8007a84 <HAL_ETH_IsRxDataAvailable+0x84>
        {
 8007a0e:	4607      	mov	r7, r0
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8007a10:	eb00 0389 	add.w	r3, r0, r9, lsl #2
 8007a14:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 8007a16:	2c04      	cmp	r4, #4
 8007a18:	68f3      	ldr	r3, [r6, #12]
                desc_scan_count++;
 8007a1a:	f104 0401 	add.w	r4, r4, #1
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 8007a1e:	d02b      	beq.n	8007a78 <HAL_ETH_IsRxDataAvailable+0x78>
 8007a20:	2b00      	cmp	r3, #0
                configASSERT( ( ( ulDesc3 & ETH_DMATXNDESCWBF_FD ) != 0U ) && ( ( ulDesc3 & ETH_DMATXNDESCWBF_LD ) != 0U ) );
 8007a22:	f44f 6193 	mov.w	r1, #1176	@ 0x498
 8007a26:	4640      	mov	r0, r8
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 8007a28:	db26      	blt.n	8007a78 <HAL_ETH_IsRxDataAvailable+0x78>
                uint32_t ulDesc3 = dmarxdesc->DESC3;
 8007a2a:	68f5      	ldr	r5, [r6, #12]
                configASSERT( ( ( ulDesc3 & ETH_DMATXNDESCWBF_FD ) != 0U ) && ( ( ulDesc3 & ETH_DMATXNDESCWBF_LD ) != 0U ) );
 8007a2c:	f005 5340 	and.w	r3, r5, #805306368	@ 0x30000000
 8007a30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a34:	d001      	beq.n	8007a3a <HAL_ETH_IsRxDataAvailable+0x3a>
 8007a36:	f7f9 fa0d 	bl	8000e54 <vAssertCalled>
                if( READ_BIT( ulDesc3, ETH_DMARXNDESCWBF_LD ) != ( uint32_t ) RESET )
 8007a3a:	00ea      	lsls	r2, r5, #3
 8007a3c:	d5eb      	bpl.n	8007a16 <HAL_ETH_IsRxDataAvailable+0x16>
                    INCR_RX_DESC_INDEX( desc_index, 1U );
 8007a3e:	f109 0201 	add.w	r2, r9, #1
 8007a42:	2a03      	cmp	r2, #3
 8007a44:	bf88      	it	hi
 8007a46:	f1a9 0203 	subhi.w	r2, r9, #3
                    dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8007a4a:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8007a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                    if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET )
 8007a50:	68d9      	ldr	r1, [r3, #12]
 8007a52:	2900      	cmp	r1, #0
 8007a54:	db09      	blt.n	8007a6a <HAL_ETH_IsRxDataAvailable+0x6a>
                        if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_CTXT ) != ( uint32_t ) RESET )
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	005b      	lsls	r3, r3, #1
 8007a5a:	d506      	bpl.n	8007a6a <HAL_ETH_IsRxDataAvailable+0x6a>
                            dmarxdesclist->AppContextDesc = 1;
 8007a5c:	2101      	movs	r1, #1
                            INCR_RX_DESC_INDEX( desc_index, 1U );
 8007a5e:	1853      	adds	r3, r2, r1
                            dmarxdesclist->AppContextDesc = 1;
 8007a60:	64f9      	str	r1, [r7, #76]	@ 0x4c
                            INCR_RX_DESC_INDEX( desc_index, 1U );
 8007a62:	2b03      	cmp	r3, #3
 8007a64:	bf8c      	ite	hi
 8007a66:	3a03      	subhi	r2, #3
 8007a68:	461a      	movls	r2, r3
                    return 1;
 8007a6a:	2301      	movs	r3, #1
                    dmarxdesclist->FirstAppDesc = first_app_desc_index;
 8007a6c:	e9c7 2910 	strd	r2, r9, [r7, #64]	@ 0x40
                    return 1;
 8007a70:	4618      	mov	r0, r3
                    dmarxdesclist->AppDescNbr = app_desc_count;
 8007a72:	64bb      	str	r3, [r7, #72]	@ 0x48
        }
 8007a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a78:	2300      	movs	r3, #0
            return 0;
 8007a7a:	4618      	mov	r0, r3
                    dmarxdesclist->AppDescNbr = app_desc_count;
 8007a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
        }
 8007a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a82:	bf00      	nop
 8007a84:	08010508 	.word	0x08010508

08007a88 <HAL_ETH_GetRxData>:
        {
 8007a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8a:	4605      	mov	r5, r0
            configASSERT( RxBuffer != NULL );
 8007a8c:	460e      	mov	r6, r1
 8007a8e:	b319      	cbz	r1, 8007ad8 <HAL_ETH_GetRxData+0x50>
            if( HAL_ETH_IsRxDataAvailable( heth ) == 0U )
 8007a90:	4628      	mov	r0, r5
 8007a92:	f7ff ffb5 	bl	8007a00 <HAL_ETH_IsRxDataAvailable>
 8007a96:	4604      	mov	r4, r0
 8007a98:	b178      	cbz	r0, 8007aba <HAL_ETH_GetRxData+0x32>
            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 8007a9a:	e9d5 3211 	ldrd	r3, r2, [r5, #68]	@ 0x44
            dma_rx_desc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8007a9e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 8007aa2:	2a01      	cmp	r2, #1
            dma_rx_desc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8007aa4:	6b1f      	ldr	r7, [r3, #48]	@ 0x30
            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 8007aa6:	d10a      	bne.n	8007abe <HAL_ETH_GetRxData+0x36>
            packet_length = READ_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCWBF_PL );
 8007aa8:	68fc      	ldr	r4, [r7, #12]
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 8007aaa:	696b      	ldr	r3, [r5, #20]
            packet_length = READ_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCWBF_PL );
 8007aac:	f3c4 040e 	ubfx	r4, r4, #0, #15
            RxBuffer->buffer = ( uint8_t * ) dma_rx_desc->BackupAddr0;
 8007ab0:	693a      	ldr	r2, [r7, #16]
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 8007ab2:	42a3      	cmp	r3, r4
            RxBuffer->len = packet_length;
 8007ab4:	e9c6 2400 	strd	r2, r4, [r6]
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 8007ab8:	d307      	bcc.n	8007aca <HAL_ETH_GetRxData+0x42>
        }
 8007aba:	4620      	mov	r0, r4
 8007abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 8007abe:	f240 512d 	movw	r1, #1325	@ 0x52d
 8007ac2:	4808      	ldr	r0, [pc, #32]	@ (8007ae4 <HAL_ETH_GetRxData+0x5c>)
 8007ac4:	f7f9 f9c6 	bl	8000e54 <vAssertCalled>
 8007ac8:	e7ee      	b.n	8007aa8 <HAL_ETH_GetRxData+0x20>
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 8007aca:	f240 5136 	movw	r1, #1334	@ 0x536
 8007ace:	4805      	ldr	r0, [pc, #20]	@ (8007ae4 <HAL_ETH_GetRxData+0x5c>)
 8007ad0:	f7f9 f9c0 	bl	8000e54 <vAssertCalled>
        }
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            configASSERT( RxBuffer != NULL );
 8007ad8:	f240 5122 	movw	r1, #1314	@ 0x522
 8007adc:	4801      	ldr	r0, [pc, #4]	@ (8007ae4 <HAL_ETH_GetRxData+0x5c>)
 8007ade:	f7f9 f9b9 	bl	8000e54 <vAssertCalled>
 8007ae2:	e7d5      	b.n	8007a90 <HAL_ETH_GetRxData+0x8>
 8007ae4:	08010508 	.word	0x08010508

08007ae8 <HAL_ETH_BuildRxDescriptors>:
        {
 8007ae8:	b570      	push	{r4, r5, r6, lr}
            uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8007aea:	6c86      	ldr	r6, [r0, #72]	@ 0x48
            if( dmarxdesclist->AppDescNbr == 0U )
 8007aec:	2e00      	cmp	r6, #0
 8007aee:	d03f      	beq.n	8007b70 <HAL_ETH_BuildRxDescriptors+0x88>
            if( dmarxdesclist->AppContextDesc != 0U )
 8007af0:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8007af2:	4684      	mov	ip, r0
 8007af4:	b3a3      	cbz	r3, 8007b60 <HAL_ETH_BuildRxDescriptors+0x78>
            uint32_t desc_index = dmarxdesclist->FirstAppDesc;
 8007af6:	f8dc 2044 	ldr.w	r2, [ip, #68]	@ 0x44
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8007afa:	2000      	movs	r0, #0
            __IO ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8007afc:	eb0c 0382 	add.w	r3, ip, r2, lsl #2
 8007b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                if( pucNewBuffer != NULL )
 8007b02:	b301      	cbz	r1, 8007b46 <HAL_ETH_BuildRxDescriptors+0x5e>
                    dmarxdesc->BackupAddr0 = ( uint32_t ) pucNewBuffer;
 8007b04:	460d      	mov	r5, r1
 8007b06:	6119      	str	r1, [r3, #16]
                if( dmarxdesclist->ItMode != 0U )
 8007b08:	f8dc 4050 	ldr.w	r4, [ip, #80]	@ 0x50
                WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pucBuffer );
 8007b0c:	601d      	str	r5, [r3, #0]
                if( dmarxdesclist->ItMode != 0U )
 8007b0e:	2c00      	cmp	r4, #0
                DESC3 = READ_REG( dmarxdesc->DESC3 );
 8007b10:	68dd      	ldr	r5, [r3, #12]
                if( dmarxdesclist->ItMode != 0U )
 8007b12:	bf14      	ite	ne
 8007b14:	f04f 4441 	movne.w	r4, #3238002688	@ 0xc1000000
 8007b18:	f04f 4401 	moveq.w	r4, #2164260864	@ 0x81000000
                WRITE_REG( dmarxdesc->DESC3, DESC3 );
 8007b1c:	60dc      	str	r4, [r3, #12]
 8007b1e:	f3bf 8f4f 	dsb	sy
                if( descscan >= ( totalappdescnbr - 1U ) )
 8007b22:	42b0      	cmp	r0, r6
                INCR_RX_DESC_INDEX( desc_index, 1U );
 8007b24:	f102 0e01 	add.w	lr, r2, #1
                ( void ) dmarxdesc->DESC3;
 8007b28:	68dc      	ldr	r4, [r3, #12]
                INCR_RX_DESC_INDEX( desc_index, 1U );
 8007b2a:	f1a2 0203 	sub.w	r2, r2, #3
                if( descscan >= ( totalappdescnbr - 1U ) )
 8007b2e:	d00c      	beq.n	8007b4a <HAL_ETH_BuildRxDescriptors+0x62>
                INCR_RX_DESC_INDEX( desc_index, 1U );
 8007b30:	f1be 0f03 	cmp.w	lr, #3
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8007b34:	f100 0001 	add.w	r0, r0, #1
 8007b38:	bf98      	it	ls
 8007b3a:	4672      	movls	r2, lr
                dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8007b3c:	eb0c 0382 	add.w	r3, ip, r2, lsl #2
 8007b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                if( pucNewBuffer != NULL )
 8007b42:	2900      	cmp	r1, #0
 8007b44:	d1de      	bne.n	8007b04 <HAL_ETH_BuildRxDescriptors+0x1c>
                    pucBuffer = ( uint8_t * ) dmarxdesc->BackupAddr0;
 8007b46:	691d      	ldr	r5, [r3, #16]
 8007b48:	e7de      	b.n	8007b08 <HAL_ETH_BuildRxDescriptors+0x20>
            WRITE_REG( heth->Instance->DMACRDTPR, ( uint32_t ) dmarxdesc );
 8007b4a:	f8dc 1000 	ldr.w	r1, [ip]
            dmarxdesclist->AppDescNbr = 0;
 8007b4e:	2200      	movs	r2, #0
            WRITE_REG( heth->Instance->DMACRDTPR, ( uint32_t ) dmarxdesc );
 8007b50:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
            return HAL_OK;
 8007b54:	4610      	mov	r0, r2
            WRITE_REG( heth->Instance->DMACRDTPR, ( uint32_t ) dmarxdesc );
 8007b56:	f8c1 3128 	str.w	r3, [r1, #296]	@ 0x128
            dmarxdesclist->AppDescNbr = 0;
 8007b5a:	e9cc 2212 	strd	r2, r2, [ip, #72]	@ 0x48
        }
 8007b5e:	bd70      	pop	{r4, r5, r6, pc}
            uint32_t desc_index = dmarxdesclist->FirstAppDesc;
 8007b60:	f8dc 2044 	ldr.w	r2, [ip, #68]	@ 0x44
                if( descscan >= ( totalappdescnbr - 1U ) )
 8007b64:	3e01      	subs	r6, #1
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8007b66:	2000      	movs	r0, #0
            __IO ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8007b68:	eb0c 0382 	add.w	r3, ip, r2, lsl #2
 8007b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8007b6e:	e7c8      	b.n	8007b02 <HAL_ETH_BuildRxDescriptors+0x1a>
                return HAL_ERROR;
 8007b70:	2001      	movs	r0, #1
        }
 8007b72:	bd70      	pop	{r4, r5, r6, pc}

08007b74 <HAL_ETH_MACErrorCallback>:
        __weak void HAL_ETH_MACErrorCallback( ETH_HandleTypeDef * heth )
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop

08007b78 <HAL_ETH_PMTCallback>:
        __weak void HAL_ETH_PMTCallback( ETH_HandleTypeDef * heth )
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop

08007b7c <HAL_ETH_EEECallback>:
        __weak void HAL_ETH_EEECallback( ETH_HandleTypeDef * heth )
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop

08007b80 <HAL_ETH_WakeUpCallback>:
        __weak void HAL_ETH_WakeUpCallback( ETH_HandleTypeDef * heth )
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop

08007b84 <HAL_ETH_IRQHandler>:
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_RI ) )
 8007b84:	6803      	ldr	r3, [r0, #0]
 8007b86:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8007b8a:	f8d2 1160 	ldr.w	r1, [r2, #352]	@ 0x160
 8007b8e:	0649      	lsls	r1, r1, #25
        {
 8007b90:	b510      	push	{r4, lr}
 8007b92:	4604      	mov	r4, r0
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_RI ) )
 8007b94:	d503      	bpl.n	8007b9e <HAL_ETH_IRQHandler+0x1a>
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_RIE ) )
 8007b96:	f8d2 1134 	ldr.w	r1, [r2, #308]	@ 0x134
 8007b9a:	0649      	lsls	r1, r1, #25
 8007b9c:	d47d      	bmi.n	8007c9a <HAL_ETH_IRQHandler+0x116>
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_TI ) )
 8007b9e:	f8d2 1160 	ldr.w	r1, [r2, #352]	@ 0x160
 8007ba2:	07c8      	lsls	r0, r1, #31
 8007ba4:	d503      	bpl.n	8007bae <HAL_ETH_IRQHandler+0x2a>
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_TIE ) )
 8007ba6:	f8d2 1134 	ldr.w	r1, [r2, #308]	@ 0x134
 8007baa:	07c9      	lsls	r1, r1, #31
 8007bac:	d46a      	bmi.n	8007c84 <HAL_ETH_IRQHandler+0x100>
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_AIS ) )
 8007bae:	f8d2 1160 	ldr.w	r1, [r2, #352]	@ 0x160
 8007bb2:	0448      	lsls	r0, r1, #17
 8007bb4:	d503      	bpl.n	8007bbe <HAL_ETH_IRQHandler+0x3a>
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_AIE ) )
 8007bb6:	f8d2 1134 	ldr.w	r1, [r2, #308]	@ 0x134
 8007bba:	0449      	lsls	r1, r1, #17
 8007bbc:	d41d      	bmi.n	8007bfa <HAL_ETH_IRQHandler+0x76>
            if( __HAL_ETH_MAC_GET_IT( heth, ( ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE ) ) )
 8007bbe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007bc2:	f402 42c0 	and.w	r2, r2, #24576	@ 0x6000
 8007bc6:	f5b2 4fc0 	cmp.w	r2, #24576	@ 0x6000
 8007bca:	d032      	beq.n	8007c32 <HAL_ETH_IRQHandler+0xae>
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_PMT_IT ) )
 8007bcc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007bd0:	06d0      	lsls	r0, r2, #27
 8007bd2:	d43d      	bmi.n	8007c50 <HAL_ETH_IRQHandler+0xcc>
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_LPI_IT ) )
 8007bd4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007bd8:	0691      	lsls	r1, r2, #26
 8007bda:	d448      	bmi.n	8007c6e <HAL_ETH_IRQHandler+0xea>
                if( __HAL_ETH_WAKEUP_EXTI_GET_FLAG( ETH_WAKEUP_EXTI_LINE ) != ( uint32_t ) RESET )
 8007bdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007be0:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8007be4:	0252      	lsls	r2, r2, #9
 8007be6:	d400      	bmi.n	8007bea <HAL_ETH_IRQHandler+0x66>
        }
 8007be8:	bd10      	pop	{r4, pc}
                    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG( ETH_WAKEUP_EXTI_LINE );
 8007bea:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
                            HAL_ETH_WakeUpCallback( heth );
 8007bee:	4620      	mov	r0, r4
                    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG( ETH_WAKEUP_EXTI_LINE );
 8007bf0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                            HAL_ETH_WakeUpCallback( heth );
 8007bf4:	f7ff ffc4 	bl	8007b80 <HAL_ETH_WakeUpCallback>
        }
 8007bf8:	bd10      	pop	{r4, pc}
                    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8007bfa:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007bfc:	f043 0308 	orr.w	r3, r3, #8
 8007c00:	6623      	str	r3, [r4, #96]	@ 0x60
                    if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_FBE ) )
 8007c02:	f8d2 3160 	ldr.w	r3, [r2, #352]	@ 0x160
 8007c06:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS ) );
 8007c0a:	f8d2 3160 	ldr.w	r3, [r2, #352]	@ 0x160
                    if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_FBE ) )
 8007c0e:	d14e      	bne.n	8007cae <HAL_ETH_IRQHandler+0x12a>
                        __HAL_ETH_DMA_CLEAR_IT( heth, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8007c10:	f44f 41cd 	mov.w	r1, #26240	@ 0x6680
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8007c14:	400b      	ands	r3, r1
 8007c16:	6663      	str	r3, [r4, #100]	@ 0x64
                        __HAL_ETH_DMA_CLEAR_IT( heth, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8007c18:	f8c2 1160 	str.w	r1, [r2, #352]	@ 0x160
                            HAL_ETH_DMAErrorCallback( heth );
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f7ff fc9d 	bl	800755c <HAL_ETH_DMAErrorCallback>
            if( __HAL_ETH_MAC_GET_IT( heth, ( ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE ) ) )
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007c28:	f402 42c0 	and.w	r2, r2, #24576	@ 0x6000
 8007c2c:	f5b2 4fc0 	cmp.w	r2, #24576	@ 0x6000
 8007c30:	d1cc      	bne.n	8007bcc <HAL_ETH_IRQHandler+0x48>
                heth->MACErrorCode = READ_REG( heth->Instance->MACRXTXSR );
 8007c32:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
        heth->gState = ulState;
 8007c36:	23e0      	movs	r3, #224	@ 0xe0
                        HAL_ETH_MACErrorCallback( heth );
 8007c38:	4620      	mov	r0, r4
                heth->MACErrorCode = READ_REG( heth->Instance->MACRXTXSR );
 8007c3a:	66a2      	str	r2, [r4, #104]	@ 0x68
        heth->gState = ulState;
 8007c3c:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ETH_MACErrorCallback( heth );
 8007c3e:	f7ff ff99 	bl	8007b74 <HAL_ETH_MACErrorCallback>
                heth->MACErrorCode = ( uint32_t ) ( 0x0U );
 8007c42:	2200      	movs	r2, #0
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_PMT_IT ) )
 8007c44:	6823      	ldr	r3, [r4, #0]
                heth->MACErrorCode = ( uint32_t ) ( 0x0U );
 8007c46:	66a2      	str	r2, [r4, #104]	@ 0x68
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_PMT_IT ) )
 8007c48:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007c4c:	06d0      	lsls	r0, r2, #27
 8007c4e:	d5c1      	bpl.n	8007bd4 <HAL_ETH_IRQHandler+0x50>
                heth->MACWakeUpEvent = READ_BIT( heth->Instance->MACPCSR, ( ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD ) );
 8007c50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
                        HAL_ETH_PMTCallback( heth );
 8007c54:	4620      	mov	r0, r4
                heth->MACWakeUpEvent = READ_BIT( heth->Instance->MACPCSR, ( ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD ) );
 8007c56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c5a:	66e3      	str	r3, [r4, #108]	@ 0x6c
                        HAL_ETH_PMTCallback( heth );
 8007c5c:	f7ff ff8c 	bl	8007b78 <HAL_ETH_PMTCallback>
                heth->MACWakeUpEvent = ( uint32_t ) ( 0x0U );
 8007c60:	2200      	movs	r2, #0
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_LPI_IT ) )
 8007c62:	6823      	ldr	r3, [r4, #0]
                heth->MACWakeUpEvent = ( uint32_t ) ( 0x0U );
 8007c64:	66e2      	str	r2, [r4, #108]	@ 0x6c
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_LPI_IT ) )
 8007c66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007c6a:	0691      	lsls	r1, r2, #26
 8007c6c:	d5b6      	bpl.n	8007bdc <HAL_ETH_IRQHandler+0x58>
                heth->MACLPIEvent = READ_BIT( heth->Instance->MACPCSR, 0x0000000FU );
 8007c6e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
                        HAL_ETH_EEECallback( heth );
 8007c72:	4620      	mov	r0, r4
                heth->MACLPIEvent = READ_BIT( heth->Instance->MACPCSR, 0x0000000FU );
 8007c74:	f003 030f 	and.w	r3, r3, #15
 8007c78:	6723      	str	r3, [r4, #112]	@ 0x70
                        HAL_ETH_EEECallback( heth );
 8007c7a:	f7ff ff7f 	bl	8007b7c <HAL_ETH_EEECallback>
                heth->MACLPIEvent = ( uint32_t ) ( 0x0U );
 8007c7e:	2300      	movs	r3, #0
 8007c80:	6723      	str	r3, [r4, #112]	@ 0x70
 8007c82:	e7ab      	b.n	8007bdc <HAL_ETH_IRQHandler+0x58>
                            HAL_ETH_TxCpltCallback( heth );
 8007c84:	4620      	mov	r0, r4
 8007c86:	f7ff fc25 	bl	80074d4 <HAL_ETH_TxCpltCallback>
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_TI | ETH_DMACSR_NIS );
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007c90:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8007c94:	f8c2 1160 	str.w	r1, [r2, #352]	@ 0x160
 8007c98:	e789      	b.n	8007bae <HAL_ETH_IRQHandler+0x2a>
                            HAL_ETH_RxCpltCallback( heth );
 8007c9a:	f7ff fc3d 	bl	8007518 <HAL_ETH_RxCpltCallback>
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_RI | ETH_DMACSR_NIS );
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	f248 0140 	movw	r1, #32832	@ 0x8040
 8007ca4:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8007ca8:	f8c2 1160 	str.w	r1, [r2, #352]	@ 0x160
 8007cac:	e777      	b.n	8007b9e <HAL_ETH_IRQHandler+0x1a>
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS ) );
 8007cae:	f241 1002 	movw	r0, #4354	@ 0x1102
        heth->gState = ulState;
 8007cb2:	21e0      	movs	r1, #224	@ 0xe0
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS ) );
 8007cb4:	4003      	ands	r3, r0
 8007cb6:	6663      	str	r3, [r4, #100]	@ 0x64
                        __HAL_ETH_DMA_DISABLE_IT( heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE );
 8007cb8:	f8d2 3134 	ldr.w	r3, [r2, #308]	@ 0x134
 8007cbc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8007cc0:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
        heth->gState = ulState;
 8007cc4:	65a1      	str	r1, [r4, #88]	@ 0x58
    }
 8007cc6:	e7a9      	b.n	8007c1c <HAL_ETH_IRQHandler+0x98>

08007cc8 <HAL_ETH_ReadPHYRegister>:
        {
 8007cc8:	b570      	push	{r4, r5, r6, lr}
 8007cca:	4604      	mov	r4, r0
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8007ccc:	6800      	ldr	r0, [r0, #0]
        {
 8007cce:	461d      	mov	r5, r3
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8007cd0:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 8007cd4:	07db      	lsls	r3, r3, #31
 8007cd6:	d501      	bpl.n	8007cdc <HAL_ETH_ReadPHYRegister+0x14>
                return HAL_ERROR;
 8007cd8:	2001      	movs	r0, #1
        }
 8007cda:	bd70      	pop	{r4, r5, r6, pc}
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 8007cdc:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8007ce0:	f023 7378 	bic.w	r3, r3, #65011712	@ 0x3e00000
 8007ce4:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8007ce8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007cec:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 8007cf0:	f042 020d 	orr.w	r2, r2, #13
            WRITE_REG( heth->Instance->MACMDIOAR, tmpreg );
 8007cf4:	f8c0 2200 	str.w	r2, [r0, #512]	@ 0x200
            tickstart = HAL_GetTick();
 8007cf8:	f002 fa90 	bl	800a21c <HAL_GetTick>
 8007cfc:	4606      	mov	r6, r0
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8007cfe:	e005      	b.n	8007d0c <HAL_ETH_ReadPHYRegister+0x44>
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 8007d00:	f002 fa8c 	bl	800a21c <HAL_GetTick>
 8007d04:	1b82      	subs	r2, r0, r6
 8007d06:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8007d0a:	d8e5      	bhi.n	8007cd8 <HAL_ETH_ReadPHYRegister+0x10>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8007d0c:	6821      	ldr	r1, [r4, #0]
 8007d0e:	f8d1 2200 	ldr.w	r2, [r1, #512]	@ 0x200
 8007d12:	f012 0201 	ands.w	r2, r2, #1
 8007d16:	d1f3      	bne.n	8007d00 <HAL_ETH_ReadPHYRegister+0x38>
            WRITE_REG( *pRegValue, ( uint16_t ) heth->Instance->MACMDIODR );
 8007d18:	f8d1 3204 	ldr.w	r3, [r1, #516]	@ 0x204
            return HAL_OK;
 8007d1c:	4610      	mov	r0, r2
            WRITE_REG( *pRegValue, ( uint16_t ) heth->Instance->MACMDIODR );
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	602b      	str	r3, [r5, #0]
        }
 8007d22:	bd70      	pop	{r4, r5, r6, pc}

08007d24 <HAL_ETH_WritePHYRegister>:
        {
 8007d24:	b538      	push	{r3, r4, r5, lr}
 8007d26:	4604      	mov	r4, r0
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8007d28:	6800      	ldr	r0, [r0, #0]
 8007d2a:	f8d0 5200 	ldr.w	r5, [r0, #512]	@ 0x200
 8007d2e:	07ed      	lsls	r5, r5, #31
 8007d30:	d501      	bpl.n	8007d36 <HAL_ETH_WritePHYRegister+0x12>
                return HAL_ERROR;
 8007d32:	2001      	movs	r0, #1
        }
 8007d34:	bd38      	pop	{r3, r4, r5, pc}
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 8007d36:	f8d0 0200 	ldr.w	r0, [r0, #512]	@ 0x200
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8007d3a:	b29d      	uxth	r5, r3
 8007d3c:	f020 7378 	bic.w	r3, r0, #65011712	@ 0x3e00000
 8007d40:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
            WRITE_REG( ETH->MACMDIODR, ( uint16_t ) RegValue );
 8007d44:	490f      	ldr	r1, [pc, #60]	@ (8007d84 <HAL_ETH_WritePHYRegister+0x60>)
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8007d46:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
            WRITE_REG( ETH->MACMDIODR, ( uint16_t ) RegValue );
 8007d4a:	f8c1 5204 	str.w	r5, [r1, #516]	@ 0x204
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8007d4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR );
 8007d52:	f023 030c 	bic.w	r3, r3, #12
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 8007d56:	f043 0305 	orr.w	r3, r3, #5
            WRITE_REG( ETH->MACMDIOAR, tmpreg );
 8007d5a:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
            tickstart = HAL_GetTick();
 8007d5e:	f002 fa5d 	bl	800a21c <HAL_GetTick>
 8007d62:	4605      	mov	r5, r0
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8007d64:	e005      	b.n	8007d72 <HAL_ETH_WritePHYRegister+0x4e>
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 8007d66:	f002 fa59 	bl	800a21c <HAL_GetTick>
 8007d6a:	1b43      	subs	r3, r0, r5
 8007d6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d70:	d8df      	bhi.n	8007d32 <HAL_ETH_WritePHYRegister+0xe>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007d78:	f013 0301 	ands.w	r3, r3, #1
 8007d7c:	d1f3      	bne.n	8007d66 <HAL_ETH_WritePHYRegister+0x42>
            return HAL_OK;
 8007d7e:	4618      	mov	r0, r3
        }
 8007d80:	bd38      	pop	{r3, r4, r5, pc}
 8007d82:	bf00      	nop
 8007d84:	40028000 	.word	0x40028000

08007d88 <HAL_ETH_GetMACConfig>:
            if( macconf == NULL )
 8007d88:	2900      	cmp	r1, #0
 8007d8a:	f000 80c4 	beq.w	8007f16 <HAL_ETH_GetMACConfig+0x18e>
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 8007d8e:	6803      	ldr	r3, [r0, #0]
            return HAL_OK;
 8007d90:	2000      	movs	r0, #0
        {
 8007d92:	b410      	push	{r4}
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 8007d94:	681c      	ldr	r4, [r3, #0]
            macconf->DeferralCheck = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DC ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8007d96:	681a      	ldr	r2, [r3, #0]
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 8007d98:	f004 040c 	and.w	r4, r4, #12
            macconf->DeferralCheck = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DC ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8007d9c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8007da0:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
            macconf->BackOffLimit = READ_BIT( heth->Instance->MACCR, ETH_MACCR_BL );
 8007da4:	681a      	ldr	r2, [r3, #0]
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 8007da6:	62cc      	str	r4, [r1, #44]	@ 0x2c
            macconf->BackOffLimit = READ_BIT( heth->Instance->MACCR, ETH_MACCR_BL );
 8007da8:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8007dac:	624a      	str	r2, [r1, #36]	@ 0x24
            macconf->RetryTransmission = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DR ) >> 8 ) == 0U ) ? ENABLE : DISABLE;
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	f482 7280 	eor.w	r2, r2, #256	@ 0x100
 8007db4:	f3c2 2200 	ubfx	r2, r2, #8, #1
 8007db8:	f881 2020 	strb.w	r2, [r1, #32]
            macconf->CarrierSenseDuringTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DCRS ) >> 9 ) > 0U ) ? ENABLE : DISABLE;
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	f3c2 2240 	ubfx	r2, r2, #9, #1
 8007dc2:	77ca      	strb	r2, [r1, #31]
            macconf->ReceiveOwn = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DO ) >> 10 ) == 0U ) ? ENABLE : DISABLE;
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	f482 6280 	eor.w	r2, r2, #1024	@ 0x400
 8007dca:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8007dce:	778a      	strb	r2, [r1, #30]
            macconf->CarrierSenseBeforeTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ECRSFD ) >> 11 ) > 0U ) ? ENABLE : DISABLE;
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	f3c2 22c0 	ubfx	r2, r2, #11, #1
 8007dd6:	774a      	strb	r2, [r1, #29]
            macconf->LoopbackMode = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_LM ) >> 12 ) > 0U ) ? ENABLE : DISABLE;
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8007dde:	770a      	strb	r2, [r1, #28]
            macconf->DuplexMode = READ_BIT( heth->Instance->MACCR, ETH_MACCR_DM );
 8007de0:	681c      	ldr	r4, [r3, #0]
            macconf->Speed = READ_BIT( heth->Instance->MACCR, ETH_MACCR_FES );
 8007de2:	681a      	ldr	r2, [r3, #0]
            macconf->DuplexMode = READ_BIT( heth->Instance->MACCR, ETH_MACCR_DM );
 8007de4:	f404 5400 	and.w	r4, r4, #8192	@ 0x2000
            macconf->Speed = READ_BIT( heth->Instance->MACCR, ETH_MACCR_FES );
 8007de8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8007dec:	e9c1 2405 	strd	r2, r4, [r1, #20]
            macconf->JumboPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JE ) >> 16 ) > 0U ) ? ENABLE : DISABLE;
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8007df6:	748a      	strb	r2, [r1, #18]
            macconf->Jabber = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JD ) >> 17 ) == 0U ) ? ENABLE : DISABLE;
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	f482 3200 	eor.w	r2, r2, #131072	@ 0x20000
 8007dfe:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8007e02:	744a      	strb	r2, [r1, #17]
            macconf->Watchdog = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_WD ) >> 19 ) == 0U ) ? ENABLE : DISABLE;
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007e0a:	f3c2 42c0 	ubfx	r2, r2, #19, #1
 8007e0e:	740a      	strb	r2, [r1, #16]
            macconf->AutomaticPadCRCStrip = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ACS ) >> 20 ) > 0U ) ? ENABLE : DISABLE;
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	f3c2 5200 	ubfx	r2, r2, #20, #1
 8007e16:	73ca      	strb	r2, [r1, #15]
            macconf->CRCStripTypePacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_CST ) >> 21 ) > 0U ) ? ENABLE : DISABLE;
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8007e1e:	738a      	strb	r2, [r1, #14]
            macconf->Support2KPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_S2KP ) >> 22 ) > 0U ) ? ENABLE : DISABLE;
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8007e26:	734a      	strb	r2, [r1, #13]
            macconf->GiantPacketSizeLimitControl = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_GPSLCE ) >> 23 ) > 0U ) ? ENABLE : DISABLE;
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8007e2e:	730a      	strb	r2, [r1, #12]
            macconf->InterPacketGapVal = READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPG );
 8007e30:	681c      	ldr	r4, [r3, #0]
            macconf->ChecksumOffload = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPC ) >> 27 ) > 0U ) ? ENABLE : DISABLE;
 8007e32:	681a      	ldr	r2, [r3, #0]
            macconf->InterPacketGapVal = READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPG );
 8007e34:	f004 64e0 	and.w	r4, r4, #117440512	@ 0x7000000
            macconf->ChecksumOffload = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPC ) >> 27 ) > 0U ) ? ENABLE : DISABLE;
 8007e38:	f3c2 62c0 	ubfx	r2, r2, #27, #1
            macconf->InterPacketGapVal = READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPG );
 8007e3c:	608c      	str	r4, [r1, #8]
            macconf->ChecksumOffload = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPC ) >> 27 ) > 0U ) ? ENABLE : DISABLE;
 8007e3e:	710a      	strb	r2, [r1, #4]
            macconf->SourceAddrControl = READ_BIT( heth->Instance->MACCR, ETH_MACCR_SARC );
 8007e40:	681c      	ldr	r4, [r3, #0]
            macconf->GiantPacketSizeLimit = READ_BIT( heth->Instance->MACECR, ETH_MACECR_GPSL );
 8007e42:	685a      	ldr	r2, [r3, #4]
            macconf->SourceAddrControl = READ_BIT( heth->Instance->MACCR, ETH_MACCR_SARC );
 8007e44:	f004 44e0 	and.w	r4, r4, #1879048192	@ 0x70000000
            macconf->GiantPacketSizeLimit = READ_BIT( heth->Instance->MACECR, ETH_MACECR_GPSL );
 8007e48:	f3c2 020d 	ubfx	r2, r2, #0, #14
            macconf->SourceAddrControl = READ_BIT( heth->Instance->MACCR, ETH_MACCR_SARC );
 8007e4c:	600c      	str	r4, [r1, #0]
            macconf->GiantPacketSizeLimit = READ_BIT( heth->Instance->MACECR, ETH_MACECR_GPSL );
 8007e4e:	634a      	str	r2, [r1, #52]	@ 0x34
            macconf->CRCCheckingRxPackets = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_DCRCC ) >> 16 ) == 0U ) ? ENABLE : DISABLE;
 8007e50:	685a      	ldr	r2, [r3, #4]
 8007e52:	f482 3280 	eor.w	r2, r2, #65536	@ 0x10000
 8007e56:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8007e5a:	f881 2032 	strb.w	r2, [r1, #50]	@ 0x32
            macconf->SlowProtocolDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_SPEN ) >> 17 ) > 0U ) ? ENABLE : DISABLE;
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8007e64:	f881 2031 	strb.w	r2, [r1, #49]	@ 0x31
            macconf->UnicastSlowProtocolPacketDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_USP ) >> 18 ) > 0U ) ? ENABLE : DISABLE;
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	f3c2 4280 	ubfx	r2, r2, #18, #1
 8007e6e:	f881 2030 	strb.w	r2, [r1, #48]	@ 0x30
            macconf->ExtendedInterPacketGap = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPGEN ) >> 24 ) > 0U ) ? ENABLE : DISABLE;
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	f3c2 6200 	ubfx	r2, r2, #24, #1
 8007e78:	f881 2038 	strb.w	r2, [r1, #56]	@ 0x38
            macconf->ExtendedInterPacketGapVal = READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPG ) >> 25;
 8007e7c:	685c      	ldr	r4, [r3, #4]
            macconf->ProgrammableWatchdog = ( ( READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_PWE ) >> 8 ) > 0U ) ? ENABLE : DISABLE;
 8007e7e:	68da      	ldr	r2, [r3, #12]
            macconf->ExtendedInterPacketGapVal = READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPG ) >> 25;
 8007e80:	f3c4 6444 	ubfx	r4, r4, #25, #5
            macconf->ProgrammableWatchdog = ( ( READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_PWE ) >> 8 ) > 0U ) ? ENABLE : DISABLE;
 8007e84:	f3c2 2200 	ubfx	r2, r2, #8, #1
            macconf->ExtendedInterPacketGapVal = READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPG ) >> 25;
 8007e88:	63cc      	str	r4, [r1, #60]	@ 0x3c
            macconf->ProgrammableWatchdog = ( ( READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_PWE ) >> 8 ) > 0U ) ? ENABLE : DISABLE;
 8007e8a:	f881 2040 	strb.w	r2, [r1, #64]	@ 0x40
            macconf->WatchdogTimeout = READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_WTO );
 8007e8e:	68dc      	ldr	r4, [r3, #12]
            macconf->TransmitFlowControl = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_TFE ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8007e90:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
            macconf->WatchdogTimeout = READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_WTO );
 8007e92:	f004 040f 	and.w	r4, r4, #15
            macconf->TransmitFlowControl = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_TFE ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8007e96:	f3c2 0240 	ubfx	r2, r2, #1, #1
            macconf->WatchdogTimeout = READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_WTO );
 8007e9a:	644c      	str	r4, [r1, #68]	@ 0x44
            macconf->TransmitFlowControl = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_TFE ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8007e9c:	f881 2054 	strb.w	r2, [r1, #84]	@ 0x54
            macconf->ZeroQuantaPause = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ ) >> 7 ) == 0U ) ? ENABLE : DISABLE;
 8007ea0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007ea2:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 8007ea6:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8007eaa:	f881 204c 	strb.w	r2, [r1, #76]	@ 0x4c
            macconf->PauseLowThreshold = READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PLT );
 8007eae:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
            macconf->PauseTime = ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PT ) >> 16 );
 8007eb0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
            macconf->PauseLowThreshold = READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PLT );
 8007eb2:	f004 0470 	and.w	r4, r4, #112	@ 0x70
            macconf->PauseTime = ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PT ) >> 16 );
 8007eb6:	0c12      	lsrs	r2, r2, #16
            macconf->PauseLowThreshold = READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PLT );
 8007eb8:	650c      	str	r4, [r1, #80]	@ 0x50
            macconf->PauseTime = ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PT ) >> 16 );
 8007eba:	648a      	str	r2, [r1, #72]	@ 0x48
            macconf->ReceiveFlowControl = ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_RFE ) > 0U ) ? ENABLE : DISABLE;
 8007ebc:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007ec0:	f002 0201 	and.w	r2, r2, #1
 8007ec4:	f881 2056 	strb.w	r2, [r1, #86]	@ 0x56
            macconf->UnicastPausePacketDetect = ( ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_UP ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8007ec8:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007ecc:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8007ed0:	f881 2055 	strb.w	r2, [r1, #85]	@ 0x55
            macconf->TransmitQueueMode = READ_BIT( heth->Instance->MTLTQOMR, ( ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF ) );
 8007ed4:	f8d3 4d00 	ldr.w	r4, [r3, #3328]	@ 0xd00
            macconf->ReceiveQueueMode = READ_BIT( heth->Instance->MTLRQOMR, ( ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF ) );
 8007ed8:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
            macconf->TransmitQueueMode = READ_BIT( heth->Instance->MTLTQOMR, ( ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF ) );
 8007edc:	f004 0472 	and.w	r4, r4, #114	@ 0x72
            macconf->ReceiveQueueMode = READ_BIT( heth->Instance->MTLRQOMR, ( ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF ) );
 8007ee0:	f002 0223 	and.w	r2, r2, #35	@ 0x23
 8007ee4:	e9c1 4216 	strd	r4, r2, [r1, #88]	@ 0x58
            macconf->ForwardRxUndersizedGoodPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP ) >> 3 ) > 0U ) ? ENABLE : DISABLE;
 8007ee8:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
        }
 8007eec:	f85d 4b04 	ldr.w	r4, [sp], #4
            macconf->ForwardRxUndersizedGoodPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP ) >> 3 ) > 0U ) ? ENABLE : DISABLE;
 8007ef0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8007ef4:	f881 2062 	strb.w	r2, [r1, #98]	@ 0x62
            macconf->ForwardRxErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8007ef8:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
 8007efc:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8007f00:	f881 2061 	strb.w	r2, [r1, #97]	@ 0x61
            macconf->DropTCPIPChecksumErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF ) >> 6 ) == 0U ) ? ENABLE : DISABLE;
 8007f04:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8007f08:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 8007f0c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007f10:	f881 3060 	strb.w	r3, [r1, #96]	@ 0x60
        }
 8007f14:	4770      	bx	lr
                return HAL_ERROR;
 8007f16:	2001      	movs	r0, #1
        }
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop

08007f1c <HAL_ETH_SetMACConfig>:
            if( macconf == NULL )
 8007f1c:	b129      	cbz	r1, 8007f2a <HAL_ETH_SetMACConfig+0xe>
        {
 8007f1e:	b508      	push	{r3, lr}
            if( heth->RxState == HAL_ETH_STATE_READY )
 8007f20:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8007f22:	2b10      	cmp	r3, #16
 8007f24:	d003      	beq.n	8007f2e <HAL_ETH_SetMACConfig+0x12>
                return HAL_ERROR;
 8007f26:	2001      	movs	r0, #1
        }
 8007f28:	bd08      	pop	{r3, pc}
                return HAL_ERROR;
 8007f2a:	2001      	movs	r0, #1
        }
 8007f2c:	4770      	bx	lr
                ETH_SetMACConfig( heth, macconf );
 8007f2e:	f7ff fb45 	bl	80075bc <ETH_SetMACConfig>
                return HAL_OK;
 8007f32:	2000      	movs	r0, #0
        }
 8007f34:	bd08      	pop	{r3, pc}
 8007f36:	bf00      	nop

08007f38 <HAL_ETH_SetMDIOClockRange>:
        {
 8007f38:	b538      	push	{r3, r4, r5, lr}
            tmpreg = ( heth->Instance )->MACMDIOAR;
 8007f3a:	6803      	ldr	r3, [r0, #0]
        {
 8007f3c:	4605      	mov	r5, r0
            tmpreg = ( heth->Instance )->MACMDIOAR;
 8007f3e:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
            hclk = HAL_RCC_GetHCLKFreq();
 8007f42:	f003 f85b 	bl	800affc <HAL_RCC_GetHCLKFreq>
            if( ( hclk >= 20000000U ) && ( hclk < 35000000U ) )
 8007f46:	4b15      	ldr	r3, [pc, #84]	@ (8007f9c <HAL_ETH_SetMDIOClockRange+0x64>)
 8007f48:	4a15      	ldr	r2, [pc, #84]	@ (8007fa0 <HAL_ETH_SetMDIOClockRange+0x68>)
            tmpreg &= ~ETH_MACMDIOAR_CR;
 8007f4a:	f424 6470 	bic.w	r4, r4, #3840	@ 0xf00
            if( ( hclk >= 20000000U ) && ( hclk < 35000000U ) )
 8007f4e:	4403      	add	r3, r0
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d205      	bcs.n	8007f60 <HAL_ETH_SetMDIOClockRange+0x28>
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV16;
 8007f54:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 8007f58:	682b      	ldr	r3, [r5, #0]
 8007f5a:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
        }
 8007f5e:	bd38      	pop	{r3, r4, r5, pc}
            else if( ( hclk >= 35000000U ) && ( hclk < 60000000U ) )
 8007f60:	4b10      	ldr	r3, [pc, #64]	@ (8007fa4 <HAL_ETH_SetMDIOClockRange+0x6c>)
 8007f62:	4a11      	ldr	r2, [pc, #68]	@ (8007fa8 <HAL_ETH_SetMDIOClockRange+0x70>)
 8007f64:	4403      	add	r3, r0
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d805      	bhi.n	8007f76 <HAL_ETH_SetMDIOClockRange+0x3e>
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV26;
 8007f6a:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 8007f6e:	682b      	ldr	r3, [r5, #0]
 8007f70:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
        }
 8007f74:	bd38      	pop	{r3, r4, r5, pc}
            else if( ( hclk >= 60000000U ) && ( hclk < 100000000U ) )
 8007f76:	4b0d      	ldr	r3, [pc, #52]	@ (8007fac <HAL_ETH_SetMDIOClockRange+0x74>)
 8007f78:	4a0d      	ldr	r2, [pc, #52]	@ (8007fb0 <HAL_ETH_SetMDIOClockRange+0x78>)
 8007f7a:	4403      	add	r3, r0
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d3eb      	bcc.n	8007f58 <HAL_ETH_SetMDIOClockRange+0x20>
            else if( ( hclk >= 100000000U ) && ( hclk < 150000000U ) )
 8007f80:	4b0c      	ldr	r3, [pc, #48]	@ (8007fb4 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8007f82:	4a0d      	ldr	r2, [pc, #52]	@ (8007fb8 <HAL_ETH_SetMDIOClockRange+0x80>)
 8007f84:	4403      	add	r3, r0
 8007f86:	4293      	cmp	r3, r2
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 8007f88:	682b      	ldr	r3, [r5, #0]
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV62;
 8007f8a:	bf94      	ite	ls
 8007f8c:	f444 7480 	orrls.w	r4, r4, #256	@ 0x100
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV102;
 8007f90:	f444 6480 	orrhi.w	r4, r4, #1024	@ 0x400
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 8007f94:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
        }
 8007f98:	bd38      	pop	{r3, r4, r5, pc}
 8007f9a:	bf00      	nop
 8007f9c:	feced300 	.word	0xfeced300
 8007fa0:	00e4e1c0 	.word	0x00e4e1c0
 8007fa4:	fde9f140 	.word	0xfde9f140
 8007fa8:	017d783f 	.word	0x017d783f
 8007fac:	fc6c7900 	.word	0xfc6c7900
 8007fb0:	02625a00 	.word	0x02625a00
 8007fb4:	fa0a1f00 	.word	0xfa0a1f00
 8007fb8:	02faf07f 	.word	0x02faf07f

08007fbc <HAL_ETH_Init>:
            if( heth == NULL )
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	f000 8108 	beq.w	80081d2 <HAL_ETH_Init+0x216>
                if( heth->gState == HAL_ETH_STATE_RESET )
 8007fc2:	6d83      	ldr	r3, [r0, #88]	@ 0x58
        {
 8007fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fc6:	4605      	mov	r5, r0
 8007fc8:	b0a5      	sub	sp, #148	@ 0x94
                if( heth->gState == HAL_ETH_STATE_RESET )
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f000 80aa 	beq.w	8008124 <HAL_ETH_Init+0x168>
            __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fd0:	4b81      	ldr	r3, [pc, #516]	@ (80081d8 <HAL_ETH_Init+0x21c>)
            heth->gState = HAL_ETH_STATE_BUSY;
 8007fd2:	2223      	movs	r2, #35	@ 0x23
 8007fd4:	65aa      	str	r2, [r5, #88]	@ 0x58
            __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fd6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8007fda:	f042 0202 	orr.w	r2, r2, #2
 8007fde:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8007fe2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
            if( heth->Init.MediaInterface == HAL_ETH_MII_MODE )
 8007fe6:	7a28      	ldrb	r0, [r5, #8]
            __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fe8:	f003 0302 	and.w	r3, r3, #2
 8007fec:	9301      	str	r3, [sp, #4]
 8007fee:	9b01      	ldr	r3, [sp, #4]
            if( heth->Init.MediaInterface == HAL_ETH_MII_MODE )
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	f040 808f 	bne.w	8008114 <HAL_ETH_Init+0x158>
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_RMII );
 8007ff6:	f002 f91d 	bl	800a234 <HAL_SYSCFG_ETHInterfaceSelect>
            SET_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR );
 8007ffa:	682b      	ldr	r3, [r5, #0]
 8007ffc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	f042 0201 	orr.w	r2, r2, #1
 8008006:	601a      	str	r2, [r3, #0]
            tickstart = HAL_GetTick();
 8008008:	f002 f908 	bl	800a21c <HAL_GetTick>
 800800c:	4606      	mov	r6, r0
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 800800e:	e005      	b.n	800801c <HAL_ETH_Init+0x60>
                if( ( ( HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT ) )
 8008010:	f002 f904 	bl	800a21c <HAL_GetTick>
 8008014:	1b80      	subs	r0, r0, r6
 8008016:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 800801a:	d87e      	bhi.n	800811a <HAL_ETH_Init+0x15e>
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 800801c:	682b      	ldr	r3, [r5, #0]
 800801e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008022:	681c      	ldr	r4, [r3, #0]
 8008024:	f014 0401 	ands.w	r4, r4, #1
 8008028:	d1f2      	bne.n	8008010 <HAL_ETH_Init+0x54>
            ETH_MAC_MDIO_ClkConfig( heth );
 800802a:	4628      	mov	r0, r5
            macDefaultConf.ChecksumOffload = ENABLE;
 800802c:	2701      	movs	r7, #1
            ETH_MAC_MDIO_ClkConfig( heth );
 800802e:	f7ff ff83 	bl	8007f38 <HAL_ETH_SetMDIOClockRange>
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 8008032:	f002 ffe3 	bl	800affc <HAL_RCC_GetHCLKFreq>
 8008036:	4b69      	ldr	r3, [pc, #420]	@ (80081dc <HAL_ETH_Init+0x220>)
 8008038:	682e      	ldr	r6, [r5, #0]
            ETH_SetMACConfig( heth, &macDefaultConf );
 800803a:	a90b      	add	r1, sp, #44	@ 0x2c
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 800803c:	fba3 2300 	umull	r2, r3, r3, r0
            ETH_SetMACConfig( heth, &macDefaultConf );
 8008040:	4628      	mov	r0, r5
            macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8008042:	9414      	str	r4, [sp, #80]	@ 0x50
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 8008044:	0c9b      	lsrs	r3, r3, #18
            macDefaultConf.DeferralCheck = DISABLE;
 8008046:	f88d 4054 	strb.w	r4, [sp, #84]	@ 0x54
            macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800804a:	f88d 4064 	strb.w	r4, [sp, #100]	@ 0x64
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 800804e:	3b01      	subs	r3, #1
            macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8008050:	941a      	str	r4, [sp, #104]	@ 0x68
            macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8008052:	f88d 408e 	strb.w	r4, [sp, #142]	@ 0x8e
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 8008056:	f8c6 30dc 	str.w	r3, [r6, #220]	@ 0xdc
            macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800805a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
            macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800805e:	940d      	str	r4, [sp, #52]	@ 0x34
            macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8008060:	9311      	str	r3, [sp, #68]	@ 0x44
            macDefaultConf.GiantPacketSizeLimit = 0x618;
 8008062:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
            macDefaultConf.ChecksumOffload = ENABLE;
 8008066:	f88d 7030 	strb.w	r7, [sp, #48]	@ 0x30
            macDefaultConf.GiantPacketSizeLimit = 0x618;
 800806a:	9318      	str	r3, [sp, #96]	@ 0x60
            macDefaultConf.LoopbackMode = DISABLE;
 800806c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
            macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8008070:	f88d 705e 	strb.w	r7, [sp, #94]	@ 0x5e
            macDefaultConf.LoopbackMode = DISABLE;
 8008074:	9312      	str	r3, [sp, #72]	@ 0x48
            macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8008076:	2320      	movs	r3, #32
            macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8008078:	f8ad 708c 	strh.w	r7, [sp, #140]	@ 0x8c
            macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800807c:	9322      	str	r3, [sp, #136]	@ 0x88
            macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800807e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
            macDefaultConf.JumboPacket = DISABLE;
 8008082:	f88d 403e 	strb.w	r4, [sp, #62]	@ 0x3e
            macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8008086:	930b      	str	r3, [sp, #44]	@ 0x2c
            macDefaultConf.Speed = ETH_SPEED_100M;
 8008088:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
            macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800808c:	941f      	str	r4, [sp, #124]	@ 0x7c
            macDefaultConf.Speed = ETH_SPEED_100M;
 800808e:	9310      	str	r3, [sp, #64]	@ 0x40
            macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8008090:	4b53      	ldr	r3, [pc, #332]	@ (80081e0 <HAL_ETH_Init+0x224>)
            macDefaultConf.PauseTime = 0x0;
 8008092:	941d      	str	r4, [sp, #116]	@ 0x74
            macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8008094:	930e      	str	r3, [sp, #56]	@ 0x38
            macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8008096:	2302      	movs	r3, #2
            macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8008098:	9416      	str	r4, [sp, #88]	@ 0x58
            macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800809a:	9321      	str	r3, [sp, #132]	@ 0x84
            macDefaultConf.Watchdog = ENABLE;
 800809c:	f240 1301 	movw	r3, #257	@ 0x101
            macDefaultConf.ProgrammableWatchdog = DISABLE;
 80080a0:	f88d 406c 	strb.w	r4, [sp, #108]	@ 0x6c
            macDefaultConf.Watchdog = ENABLE;
 80080a4:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
            macDefaultConf.ReceiveFlowControl = DISABLE;
 80080a8:	f88d 4082 	strb.w	r4, [sp, #130]	@ 0x82
            macDefaultConf.RetryTransmission = ENABLE;
 80080ac:	f88d 704c 	strb.w	r7, [sp, #76]	@ 0x4c
            macDefaultConf.TransmitFlowControl = DISABLE;
 80080b0:	f8ad 4080 	strh.w	r4, [sp, #128]	@ 0x80
            macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80080b4:	f8ad 405c 	strh.w	r4, [sp, #92]	@ 0x5c
            macDefaultConf.WatchdogTimeout = ETH_MACWTR_WTO_2KB;
 80080b8:	941c      	str	r4, [sp, #112]	@ 0x70
            macDefaultConf.ZeroQuantaPause = ENABLE;
 80080ba:	f88d 7078 	strb.w	r7, [sp, #120]	@ 0x78
            ETH_SetMACConfig( heth, &macDefaultConf );
 80080be:	f7ff fa7d 	bl	80075bc <ETH_SetMACConfig>
            dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80080c2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
            ETH_SetDMAConfig( heth, &dmaDefaultConf );
 80080c6:	a902      	add	r1, sp, #8
 80080c8:	4628      	mov	r0, r5
            dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80080ca:	f88d 700c 	strb.w	r7, [sp, #12]
            dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80080ce:	9308      	str	r3, [sp, #32]
            dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80080d0:	9306      	str	r3, [sp, #24]
            dmaDefaultConf.MaximumSegmentSize = 536;
 80080d2:	f44f 7306 	mov.w	r3, #536	@ 0x218
            dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80080d6:	9704      	str	r7, [sp, #16]
            dmaDefaultConf.MaximumSegmentSize = 536;
 80080d8:	930a      	str	r3, [sp, #40]	@ 0x28
            dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80080da:	9402      	str	r4, [sp, #8]
            dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80080dc:	f8ad 4014 	strh.w	r4, [sp, #20]
            dmaDefaultConf.SecondPacketOperate = DISABLE;
 80080e0:	f88d 401c 	strb.w	r4, [sp, #28]
            dmaDefaultConf.FlushRxPacket = DISABLE;
 80080e4:	f8ad 4024 	strh.w	r4, [sp, #36]	@ 0x24
            ETH_SetDMAConfig( heth, &dmaDefaultConf );
 80080e8:	f7ff fb24 	bl	8007734 <ETH_SetDMAConfig>
            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT );
 80080ec:	f506 5180 	add.w	r1, r6, #4096	@ 0x1000
 80080f0:	f8d1 3100 	ldr.w	r3, [r1, #256]	@ 0x100
 80080f4:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80080f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80080fc:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
            if( ( heth->Init.RxBuffLen % 0x4U ) != 0x0U )
 8008100:	696b      	ldr	r3, [r5, #20]
 8008102:	f013 0203 	ands.w	r2, r3, #3
 8008106:	d010      	beq.n	800812a <HAL_ETH_Init+0x16e>
        heth->gState = ulState;
 8008108:	23e0      	movs	r3, #224	@ 0xe0
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800810a:	662f      	str	r7, [r5, #96]	@ 0x60
        heth->gState = ulState;
 800810c:	65ab      	str	r3, [r5, #88]	@ 0x58
                return HAL_ERROR;
 800810e:	2001      	movs	r0, #1
        }
 8008110:	b025      	add	sp, #148	@ 0x94
 8008112:	bdf0      	pop	{r4, r5, r6, r7, pc}
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_RMII );
 8008114:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8008118:	e76d      	b.n	8007ff6 <HAL_ETH_Init+0x3a>
                    heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800811a:	2204      	movs	r2, #4
        heth->gState = ulState;
 800811c:	23e0      	movs	r3, #224	@ 0xe0
                    heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800811e:	662a      	str	r2, [r5, #96]	@ 0x60
        heth->gState = ulState;
 8008120:	65ab      	str	r3, [r5, #88]	@ 0x58
                    return HAL_ERROR;
 8008122:	e7f4      	b.n	800810e <HAL_ETH_Init+0x152>
                    HAL_ETH_MspInit( heth );
 8008124:	f7f8 ff4c 	bl	8000fc0 <HAL_ETH_MspInit>
 8008128:	e752      	b.n	8007fd0 <HAL_ETH_Init+0x14>
                MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ( ( heth->Init.RxBuffLen ) << 1 ) );
 800812a:	f8d1 4108 	ldr.w	r4, [r1, #264]	@ 0x108
 800812e:	482d      	ldr	r0, [pc, #180]	@ (80081e4 <HAL_ETH_Init+0x228>)
 8008130:	68ef      	ldr	r7, [r5, #12]
 8008132:	4020      	ands	r0, r4
 8008134:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8008138:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
                dmatxdesc = heth->Init.TxDesc + i;
 800813c:	463b      	mov	r3, r7
                MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ( ( heth->Init.RxBuffLen ) << 1 ) );
 800813e:	f8c1 0108 	str.w	r0, [r1, #264]	@ 0x108
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 8008142:	f105 0014 	add.w	r0, r5, #20
                WRITE_REG( dmatxdesc->DESC0, 0x0 );
 8008146:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmatxdesc->DESC1, 0x0 );
 8008148:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmatxdesc->DESC2, 0x0 );
 800814a:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmatxdesc->DESC3, 0x0 );
 800814c:	60da      	str	r2, [r3, #12]
                WRITE_REG( heth->TxDescList.TxDesc[ i ], ( uint32_t ) dmatxdesc );
 800814e:	f840 3f04 	str.w	r3, [r0, #4]!
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 8008152:	3318      	adds	r3, #24
 8008154:	429c      	cmp	r4, r3
 8008156:	d1f6      	bne.n	8008146 <HAL_ETH_Init+0x18a>
                dmarxdesc = heth->Init.RxDesc + i;
 8008158:	692c      	ldr	r4, [r5, #16]
            WRITE_REG( heth->Instance->DMACTDRLR, ( ETH_TX_DESC_CNT - 1 ) );
 800815a:	2303      	movs	r3, #3
 800815c:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
            heth->TxDescList.TailTxDesc = 0;
 8008160:	e9c5 220a 	strd	r2, r2, [r5, #40]	@ 0x28
            WRITE_REG( heth->Instance->DMACTDRLR, ( ETH_TX_DESC_CNT - 1 ) );
 8008164:	f8c1 312c 	str.w	r3, [r1, #300]	@ 0x12c
                WRITE_REG( dmarxdesc->DESC0, 0x0 );
 8008168:	2200      	movs	r2, #0
            WRITE_REG( heth->Instance->DMACTDLAR, ( uint32_t ) heth->Init.TxDesc );
 800816a:	f8c1 7114 	str.w	r7, [r1, #276]	@ 0x114
                dmarxdesc = heth->Init.RxDesc + i;
 800816e:	4623      	mov	r3, r4
            WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) heth->Init.TxDesc );
 8008170:	f8c1 7120 	str.w	r7, [r1, #288]	@ 0x120
            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 8008174:	f105 073c 	add.w	r7, r5, #60	@ 0x3c
                WRITE_REG( dmarxdesc->DESC0, 0x0 );
 8008178:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmarxdesc->BackupAddr0, 0x0 );
 800817a:	611a      	str	r2, [r3, #16]
                WRITE_REG( dmarxdesc->DESC1, 0x0 );
 800817c:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmarxdesc->BackupAddr1, 0x0 );
 800817e:	615a      	str	r2, [r3, #20]
                WRITE_REG( dmarxdesc->DESC2, 0x0 );
 8008180:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmarxdesc->DESC3, 0x0 );
 8008182:	60da      	str	r2, [r3, #12]
                WRITE_REG( heth->RxDescList.RxDesc[ i ], ( uint32_t ) dmarxdesc );
 8008184:	f840 3f04 	str.w	r3, [r0, #4]!
            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 8008188:	4287      	cmp	r7, r0
 800818a:	f103 0318 	add.w	r3, r3, #24
 800818e:	d1f3      	bne.n	8008178 <HAL_ETH_Init+0x1bc>
            WRITE_REG( heth->Instance->DMACRDRLR, ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) );
 8008190:	2303      	movs	r3, #3
            heth->Instance->MACA0HR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 5 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 4 ] );
 8008192:	6868      	ldr	r0, [r5, #4]
            WRITE_REG( heth->RxDescList.AppDescNbr, 0 );
 8008194:	64aa      	str	r2, [r5, #72]	@ 0x48
            WRITE_REG( heth->RxDescList.FirstAppDesc, 0 );
 8008196:	e9c5 2210 	strd	r2, r2, [r5, #64]	@ 0x40
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 800819a:	e9c5 2213 	strd	r2, r2, [r5, #76]	@ 0x4c
            WRITE_REG( heth->Instance->DMACRDRLR, ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) );
 800819e:	f8c1 3130 	str.w	r3, [r1, #304]	@ 0x130
            WRITE_REG( heth->Instance->DMACRDLAR, ( uint32_t ) heth->Init.RxDesc );
 80081a2:	f8c1 411c 	str.w	r4, [r1, #284]	@ 0x11c
            WRITE_REG( heth->Instance->DMACRDTPR, ( ( uint32_t ) ( heth->Init.RxDesc + ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) ) ) );
 80081a6:	3448      	adds	r4, #72	@ 0x48
 80081a8:	f8c1 4128 	str.w	r4, [r1, #296]	@ 0x128
            heth->Instance->MACA0HR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 5 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 4 ] );
 80081ac:	8883      	ldrh	r3, [r0, #4]
 80081ae:	f8c6 3300 	str.w	r3, [r6, #768]	@ 0x300
            heth->gState = HAL_ETH_STATE_READY;
 80081b2:	2310      	movs	r3, #16
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 80081b4:	6801      	ldr	r1, [r0, #0]
            return HAL_OK;
 80081b6:	2000      	movs	r0, #0
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 80081b8:	f8c6 1304 	str.w	r1, [r6, #772]	@ 0x304
            heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80081bc:	662a      	str	r2, [r5, #96]	@ 0x60
            heth->Instance->MMCRIMR =
 80081be:	490a      	ldr	r1, [pc, #40]	@ (80081e8 <HAL_ETH_Init+0x22c>)
            heth->Instance->MMCTIMR =
 80081c0:	4a0a      	ldr	r2, [pc, #40]	@ (80081ec <HAL_ETH_Init+0x230>)
            heth->gState = HAL_ETH_STATE_READY;
 80081c2:	65ab      	str	r3, [r5, #88]	@ 0x58
            heth->RxState = HAL_ETH_STATE_READY;
 80081c4:	65eb      	str	r3, [r5, #92]	@ 0x5c
            heth->Instance->MMCRIMR =
 80081c6:	f8c6 170c 	str.w	r1, [r6, #1804]	@ 0x70c
            heth->Instance->MMCTIMR =
 80081ca:	f8c6 2710 	str.w	r2, [r6, #1808]	@ 0x710
        }
 80081ce:	b025      	add	sp, #148	@ 0x94
 80081d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return HAL_ERROR;
 80081d2:	2001      	movs	r0, #1
        }
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	58024400 	.word	0x58024400
 80081dc:	431bde83 	.word	0x431bde83
 80081e0:	01010000 	.word	0x01010000
 80081e4:	ffff8001 	.word	0xffff8001
 80081e8:	0c020060 	.word	0x0c020060
 80081ec:	0c20c000 	.word	0x0c20c000

080081f0 <ETH_Clear_Tx_Descriptors>:
        {
 80081f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081f4:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 8008250 <ETH_Clear_Tx_Descriptors+0x60>
                xDMATxDescriptor->DESC0 = ( uint32_t ) 0u;
 80081f8:	f04f 0900 	mov.w	r9, #0
        {
 80081fc:	4607      	mov	r7, r0
            uint32_t ulTailTxDesc = heth->TxDescList.TailTxDesc;
 80081fe:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 8008200:	e01b      	b.n	800823a <ETH_Clear_Tx_Descriptors+0x4a>
                ETH_DMADescTypeDef * xDMATxDescriptor = ( ETH_DMADescTypeDef * ) heth->TxDescList.TxDesc[ ulTailTxDesc ];
 8008202:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
                if( ( xDMATxDescriptor->DESC3 & ETH_DMATXNDESCRF_OWN ) != 0 )
 8008206:	68eb      	ldr	r3, [r5, #12]
 8008208:	2b00      	cmp	r3, #0
 800820a:	db1f      	blt.n	800824c <ETH_Clear_Tx_Descriptors+0x5c>
                        ucPayLoad = ( uint8_t * ) xDMATxDescriptor->DESC0;
 800820c:	6828      	ldr	r0, [r5, #0]
                        if( ucPayLoad == NULL )
 800820e:	b1e8      	cbz	r0, 800824c <ETH_Clear_Tx_Descriptors+0x5c>
                        pxNetworkBuffer = pxPacketBuffer_to_NetworkBuffer( ucPayLoad );
 8008210:	f7f9 fe84 	bl	8001f1c <pxPacketBuffer_to_NetworkBuffer>
                        if( pxNetworkBuffer != NULL )
 8008214:	b108      	cbz	r0, 800821a <ETH_Clear_Tx_Descriptors+0x2a>
                            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8008216:	f7fe fbbb 	bl	8006990 <vReleaseNetworkBufferAndDescriptor>
                INCR_TX_DESC_INDEX( ulTailTxDesc, 1U );
 800821a:	2c03      	cmp	r4, #3
                xDMATxDescriptor->DESC0 = ( uint32_t ) 0u;
 800821c:	f8c5 9000 	str.w	r9, [r5]
                INCR_TX_DESC_INDEX( ulTailTxDesc, 1U );
 8008220:	bf88      	it	hi
 8008222:	1ef4      	subhi	r4, r6, #3
                heth->TxDescList.TailTxDesc = ulTailTxDesc;
 8008224:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8008226:	f3bf 8f4f 	dsb	sy
                xSemaphoreGive( xTXDescriptorSemaphore );
 800822a:	2300      	movs	r3, #0
 800822c:	f8d8 0000 	ldr.w	r0, [r8]
 8008230:	4626      	mov	r6, r4
 8008232:	461a      	mov	r2, r3
 8008234:	4619      	mov	r1, r3
 8008236:	f000 fa8b 	bl	8008750 <xQueueGenericSend>
            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 800823a:	f8d8 0000 	ldr.w	r0, [r8]
                INCR_TX_DESC_INDEX( ulTailTxDesc, 1U );
 800823e:	1c74      	adds	r4, r6, #1
            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 8008240:	f000 fce2 	bl	8008c08 <uxQueueMessagesWaiting>
 8008244:	2804      	cmp	r0, #4
                ETH_DMADescTypeDef * xDMATxDescriptor = ( ETH_DMADescTypeDef * ) heth->TxDescList.TxDesc[ ulTailTxDesc ];
 8008246:	f106 0306 	add.w	r3, r6, #6
            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 800824a:	d1da      	bne.n	8008202 <ETH_Clear_Tx_Descriptors+0x12>
        }
 800824c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008250:	20000dc4 	.word	0x20000dc4

08008254 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008254:	b510      	push	{r4, lr}
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8008256:	201c      	movs	r0, #28
 8008258:	f001 fe3e 	bl	8009ed8 <pvPortMalloc>

		if( pxEventBits != NULL )
 800825c:	4604      	mov	r4, r0
 800825e:	b120      	cbz	r0, 800826a <xEventGroupCreate+0x16>
		{
			pxEventBits->uxEventBits = 0;
 8008260:	2300      	movs	r3, #0
 8008262:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008266:	f000 f921 	bl	80084ac <vListInitialise>
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
	}
 800826a:	4620      	mov	r0, r4
 800826c:	bd10      	pop	{r4, pc}
 800826e:	bf00      	nop

08008270 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8008270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008274:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008278:	460c      	mov	r4, r1
 800827a:	4690      	mov	r8, r2
 800827c:	461f      	mov	r7, r3
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800827e:	4606      	mov	r6, r0
 8008280:	2800      	cmp	r0, #0
 8008282:	d063      	beq.n	800834c <xEventGroupWaitBits+0xdc>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008284:	f1b4 7f80 	cmp.w	r4, #16777216	@ 0x1000000
 8008288:	d254      	bcs.n	8008334 <xEventGroupWaitBits+0xc4>
	configASSERT( uxBitsToWaitFor != 0 );
 800828a:	b924      	cbnz	r4, 8008296 <xEventGroupWaitBits+0x26>
 800828c:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8008290:	483d      	ldr	r0, [pc, #244]	@ (8008388 <xEventGroupWaitBits+0x118>)
 8008292:	f7f8 fddf 	bl	8000e54 <vAssertCalled>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008296:	f001 f9ff 	bl	8009698 <xTaskGetSchedulerState>
 800829a:	b910      	cbnz	r0, 80082a2 <xEventGroupWaitBits+0x32>
 800829c:	f1b9 0f00 	cmp.w	r9, #0
 80082a0:	d136      	bne.n	8008310 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80082a2:	f000 fec5 	bl	8009030 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80082a6:	6835      	ldr	r5, [r6, #0]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 80082a8:	b94f      	cbnz	r7, 80082be <xEventGroupWaitBits+0x4e>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80082aa:	422c      	tst	r4, r5
 80082ac:	d13b      	bne.n	8008326 <xEventGroupWaitBits+0xb6>
		else if( xTicksToWait == ( TickType_t ) 0 )
 80082ae:	f1b9 0f00 	cmp.w	r9, #0
 80082b2:	d145      	bne.n	8008340 <xEventGroupWaitBits+0xd0>
	xAlreadyYielded = xTaskResumeAll();
 80082b4:	f000 ff9a 	bl	80091ec <xTaskResumeAll>
}
 80082b8:	4628      	mov	r0, r5
 80082ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80082be:	ea34 0305 	bics.w	r3, r4, r5
 80082c2:	d030      	beq.n	8008326 <xEventGroupWaitBits+0xb6>
		else if( xTicksToWait == ( TickType_t ) 0 )
 80082c4:	f1b9 0f00 	cmp.w	r9, #0
 80082c8:	d0f4      	beq.n	80082b4 <xEventGroupWaitBits+0x44>
			if( xClearOnExit != pdFALSE )
 80082ca:	f1b8 0100 	subs.w	r1, r8, #0
 80082ce:	bf18      	it	ne
 80082d0:	2101      	movne	r1, #1
 80082d2:	0609      	lsls	r1, r1, #24
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80082d4:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80082d8:	464a      	mov	r2, r9
 80082da:	4321      	orrs	r1, r4
 80082dc:	1d30      	adds	r0, r6, #4
 80082de:	f001 f8ad 	bl	800943c <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 80082e2:	f000 ff83 	bl	80091ec <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80082e6:	b948      	cbnz	r0, 80082fc <xEventGroupWaitBits+0x8c>
			portYIELD_WITHIN_API();
 80082e8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80082ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082f0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 80082fc:	f001 fac8 	bl	8009890 <uxTaskResetEventItemValue>
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8008300:	0183      	lsls	r3, r0, #6
		uxReturn = uxTaskResetEventItemValue();
 8008302:	4605      	mov	r5, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8008304:	d528      	bpl.n	8008358 <xEventGroupWaitBits+0xe8>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008306:	f025 457f 	bic.w	r5, r5, #4278190080	@ 0xff000000
}
 800830a:	4628      	mov	r0, r5
 800830c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008310:	f240 1145 	movw	r1, #325	@ 0x145
 8008314:	481c      	ldr	r0, [pc, #112]	@ (8008388 <xEventGroupWaitBits+0x118>)
 8008316:	f7f8 fd9d 	bl	8000e54 <vAssertCalled>
	vTaskSuspendAll();
 800831a:	f000 fe89 	bl	8009030 <vTaskSuspendAll>
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800831e:	6835      	ldr	r5, [r6, #0]
	if( xWaitForAllBits == pdFALSE )
 8008320:	bb6f      	cbnz	r7, 800837e <xEventGroupWaitBits+0x10e>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8008322:	4225      	tst	r5, r4
 8008324:	d00c      	beq.n	8008340 <xEventGroupWaitBits+0xd0>
			if( xClearOnExit != pdFALSE )
 8008326:	f1b8 0f00 	cmp.w	r8, #0
 800832a:	d0c3      	beq.n	80082b4 <xEventGroupWaitBits+0x44>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800832c:	ea25 0404 	bic.w	r4, r5, r4
 8008330:	6034      	str	r4, [r6, #0]
 8008332:	e7bf      	b.n	80082b4 <xEventGroupWaitBits+0x44>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008334:	f240 1141 	movw	r1, #321	@ 0x141
 8008338:	4813      	ldr	r0, [pc, #76]	@ (8008388 <xEventGroupWaitBits+0x118>)
 800833a:	f7f8 fd8b 	bl	8000e54 <vAssertCalled>
	configASSERT( uxBitsToWaitFor != 0 );
 800833e:	e7aa      	b.n	8008296 <xEventGroupWaitBits+0x26>
			if( xClearOnExit != pdFALSE )
 8008340:	f1b8 0100 	subs.w	r1, r8, #0
 8008344:	bf18      	it	ne
 8008346:	2101      	movne	r1, #1
 8008348:	0609      	lsls	r1, r1, #24
 800834a:	e7c5      	b.n	80082d8 <xEventGroupWaitBits+0x68>
	configASSERT( xEventGroup );
 800834c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8008350:	480d      	ldr	r0, [pc, #52]	@ (8008388 <xEventGroupWaitBits+0x118>)
 8008352:	f7f8 fd7f 	bl	8000e54 <vAssertCalled>
 8008356:	e795      	b.n	8008284 <xEventGroupWaitBits+0x14>
			taskENTER_CRITICAL();
 8008358:	f001 fc6c 	bl	8009c34 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 800835c:	6835      	ldr	r5, [r6, #0]
	if( xWaitForAllBits == pdFALSE )
 800835e:	b957      	cbnz	r7, 8008376 <xEventGroupWaitBits+0x106>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8008360:	422c      	tst	r4, r5
 8008362:	d005      	beq.n	8008370 <xEventGroupWaitBits+0x100>
					if( xClearOnExit != pdFALSE )
 8008364:	f1b8 0f00 	cmp.w	r8, #0
 8008368:	d002      	beq.n	8008370 <xEventGroupWaitBits+0x100>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800836a:	ea25 0404 	bic.w	r4, r5, r4
 800836e:	6034      	str	r4, [r6, #0]
			taskEXIT_CRITICAL();
 8008370:	f001 fc82 	bl	8009c78 <vPortExitCritical>
 8008374:	e7c7      	b.n	8008306 <xEventGroupWaitBits+0x96>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8008376:	ea34 0305 	bics.w	r3, r4, r5
 800837a:	d1f9      	bne.n	8008370 <xEventGroupWaitBits+0x100>
 800837c:	e7f2      	b.n	8008364 <xEventGroupWaitBits+0xf4>
 800837e:	ea34 0305 	bics.w	r3, r4, r5
 8008382:	d1a2      	bne.n	80082ca <xEventGroupWaitBits+0x5a>
 8008384:	e7cf      	b.n	8008326 <xEventGroupWaitBits+0xb6>
 8008386:	bf00      	nop
 8008388:	08010564 	.word	0x08010564

0800838c <xEventGroupClearBits>:
{
 800838c:	b570      	push	{r4, r5, r6, lr}
	configASSERT( xEventGroup );
 800838e:	4605      	mov	r5, r0
{
 8008390:	460c      	mov	r4, r1
	configASSERT( xEventGroup );
 8008392:	b190      	cbz	r0, 80083ba <xEventGroupClearBits+0x2e>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008394:	f1b4 7f80 	cmp.w	r4, #16777216	@ 0x1000000
 8008398:	d209      	bcs.n	80083ae <xEventGroupClearBits+0x22>
	taskENTER_CRITICAL();
 800839a:	f001 fc4b 	bl	8009c34 <vPortEnterCritical>
		uxReturn = pxEventBits->uxEventBits;
 800839e:	682e      	ldr	r6, [r5, #0]
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80083a0:	ea26 0404 	bic.w	r4, r6, r4
 80083a4:	602c      	str	r4, [r5, #0]
	taskEXIT_CRITICAL();
 80083a6:	f001 fc67 	bl	8009c78 <vPortExitCritical>
}
 80083aa:	4630      	mov	r0, r6
 80083ac:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80083ae:	f240 11d5 	movw	r1, #469	@ 0x1d5
 80083b2:	4805      	ldr	r0, [pc, #20]	@ (80083c8 <xEventGroupClearBits+0x3c>)
 80083b4:	f7f8 fd4e 	bl	8000e54 <vAssertCalled>
 80083b8:	e7ef      	b.n	800839a <xEventGroupClearBits+0xe>
	configASSERT( xEventGroup );
 80083ba:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 80083be:	4802      	ldr	r0, [pc, #8]	@ (80083c8 <xEventGroupClearBits+0x3c>)
 80083c0:	f7f8 fd48 	bl	8000e54 <vAssertCalled>
 80083c4:	e7e6      	b.n	8008394 <xEventGroupClearBits+0x8>
 80083c6:	bf00      	nop
 80083c8:	08010564 	.word	0x08010564

080083cc <xEventGroupSetBits>:
{
 80083cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( xEventGroup );
 80083d0:	4607      	mov	r7, r0
{
 80083d2:	460d      	mov	r5, r1
	configASSERT( xEventGroup );
 80083d4:	2800      	cmp	r0, #0
 80083d6:	d037      	beq.n	8008448 <xEventGroupSetBits+0x7c>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80083d8:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
 80083dc:	d22e      	bcs.n	800843c <xEventGroupSetBits+0x70>
	vTaskSuspendAll();
 80083de:	f000 fe27 	bl	8009030 <vTaskSuspendAll>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083e2:	f107 090c 	add.w	r9, r7, #12
		pxEventBits->uxEventBits |= uxBitsToSet;
 80083e6:	683b      	ldr	r3, [r7, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
 80083e8:	693c      	ldr	r4, [r7, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 80083ea:	432b      	orrs	r3, r5
		while( pxListItem != pxListEnd )
 80083ec:	45a1      	cmp	r9, r4
		pxEventBits->uxEventBits |= uxBitsToSet;
 80083ee:	603b      	str	r3, [r7, #0]
		while( pxListItem != pxListEnd )
 80083f0:	d01e      	beq.n	8008430 <xEventGroupSetBits+0x64>
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80083f2:	f04f 0800 	mov.w	r8, #0
 80083f6:	e009      	b.n	800840c <xEventGroupSetBits+0x40>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80083f8:	b136      	cbz	r6, 8008408 <xEventGroupSetBits+0x3c>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80083fa:	01d3      	lsls	r3, r2, #7
					uxBitsToClear |= uxBitsWaitedFor;
 80083fc:	bf48      	it	mi
 80083fe:	ea48 0805 	orrmi.w	r8, r8, r5
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008402:	f001 f88b 	bl	800951c <vTaskRemoveFromUnorderedEventList>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008406:	683b      	ldr	r3, [r7, #0]
		while( pxListItem != pxListEnd )
 8008408:	45a1      	cmp	r9, r4
 800840a:	d00f      	beq.n	800842c <xEventGroupSetBits+0x60>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800840c:	4620      	mov	r0, r4
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800840e:	f043 7100 	orr.w	r1, r3, #33554432	@ 0x2000000
			pxNext = listGET_NEXT( pxListItem );
 8008412:	6864      	ldr	r4, [r4, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008414:	6802      	ldr	r2, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008416:	f022 457f 	bic.w	r5, r2, #4278190080	@ 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800841a:	f012 6f80 	tst.w	r2, #67108864	@ 0x4000000
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800841e:	ea05 0603 	and.w	r6, r5, r3
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8008422:	d0e9      	beq.n	80083f8 <xEventGroupSetBits+0x2c>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008424:	42b5      	cmp	r5, r6
 8008426:	d0e8      	beq.n	80083fa <xEventGroupSetBits+0x2e>
		while( pxListItem != pxListEnd )
 8008428:	45a1      	cmp	r9, r4
 800842a:	d1ef      	bne.n	800840c <xEventGroupSetBits+0x40>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800842c:	ea23 0308 	bic.w	r3, r3, r8
 8008430:	603b      	str	r3, [r7, #0]
	( void ) xTaskResumeAll();
 8008432:	f000 fedb 	bl	80091ec <xTaskResumeAll>
}
 8008436:	6838      	ldr	r0, [r7, #0]
 8008438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800843c:	f240 2113 	movw	r1, #531	@ 0x213
 8008440:	4804      	ldr	r0, [pc, #16]	@ (8008454 <xEventGroupSetBits+0x88>)
 8008442:	f7f8 fd07 	bl	8000e54 <vAssertCalled>
 8008446:	e7ca      	b.n	80083de <xEventGroupSetBits+0x12>
	configASSERT( xEventGroup );
 8008448:	f240 2112 	movw	r1, #530	@ 0x212
 800844c:	4801      	ldr	r0, [pc, #4]	@ (8008454 <xEventGroupSetBits+0x88>)
 800844e:	f7f8 fd01 	bl	8000e54 <vAssertCalled>
 8008452:	e7c1      	b.n	80083d8 <xEventGroupSetBits+0xc>
 8008454:	08010564 	.word	0x08010564

08008458 <vEventGroupDelete>:
{
 8008458:	b570      	push	{r4, r5, r6, lr}
 800845a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800845c:	f000 fde8 	bl	8009030 <vTaskSuspendAll>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8008460:	6863      	ldr	r3, [r4, #4]
 8008462:	b1cb      	cbz	r3, 8008498 <vEventGroupDelete+0x40>
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8008464:	f104 050c 	add.w	r5, r4, #12
 8008468:	4e0f      	ldr	r6, [pc, #60]	@ (80084a8 <vEventGroupDelete+0x50>)
 800846a:	e005      	b.n	8008478 <vEventGroupDelete+0x20>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 800846c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8008470:	f001 f854 	bl	800951c <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8008474:	6863      	ldr	r3, [r4, #4]
 8008476:	b17b      	cbz	r3, 8008498 <vEventGroupDelete+0x40>
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8008478:	6920      	ldr	r0, [r4, #16]
 800847a:	42a8      	cmp	r0, r5
 800847c:	d1f6      	bne.n	800846c <vEventGroupDelete+0x14>
 800847e:	f240 2172 	movw	r1, #626	@ 0x272
 8008482:	4630      	mov	r0, r6
 8008484:	f7f8 fce6 	bl	8000e54 <vAssertCalled>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8008488:	6920      	ldr	r0, [r4, #16]
 800848a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800848e:	f001 f845 	bl	800951c <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8008492:	6863      	ldr	r3, [r4, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1ef      	bne.n	8008478 <vEventGroupDelete+0x20>
			vPortFree( pxEventBits );
 8008498:	4620      	mov	r0, r4
 800849a:	f001 fd89 	bl	8009fb0 <vPortFree>
}
 800849e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	( void ) xTaskResumeAll();
 80084a2:	f000 bea3 	b.w	80091ec <xTaskResumeAll>
 80084a6:	bf00      	nop
 80084a8:	08010564 	.word	0x08010564

080084ac <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084ac:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80084b0:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80084b4:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80084b6:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80084b8:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084ba:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084bc:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop

080084c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80084c4:	2300      	movs	r3, #0
 80084c6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop

080084cc <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80084cc:	6803      	ldr	r3, [r0, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80084ce:	6842      	ldr	r2, [r0, #4]
	( pxList->uxNumberOfItems )++;
 80084d0:	3301      	adds	r3, #1
{
 80084d2:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084d4:	6894      	ldr	r4, [r2, #8]
 80084d6:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084da:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084dc:	6091      	str	r1, [r2, #8]
}
 80084de:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80084e2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80084e4:	6003      	str	r3, [r0, #0]
}
 80084e6:	4770      	bx	lr

080084e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084e8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084ea:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084ec:	1c6b      	adds	r3, r5, #1
 80084ee:	d010      	beq.n	8008512 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80084f0:	f100 0308 	add.w	r3, r0, #8
 80084f4:	461c      	mov	r4, r3
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	42aa      	cmp	r2, r5
 80084fc:	d9fa      	bls.n	80084f4 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80084fe:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8008500:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8008502:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008504:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008506:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008508:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800850a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800850c:	6002      	str	r2, [r0, #0]
}
 800850e:	bc30      	pop	{r4, r5}
 8008510:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8008512:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8008514:	6863      	ldr	r3, [r4, #4]
 8008516:	e7f2      	b.n	80084fe <vListInsert+0x16>

08008518 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008518:	6903      	ldr	r3, [r0, #16]
{
 800851a:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800851c:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800851e:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 8008522:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8008524:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008528:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800852a:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 800852c:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008530:	bf08      	it	eq
 8008532:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8008534:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 8008536:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008538:	3a01      	subs	r2, #1
 800853a:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 800853c:	6818      	ldr	r0, [r3, #0]
}
 800853e:	4770      	bx	lr

08008540 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008540:	b570      	push	{r4, r5, r6, lr}
 8008542:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008544:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8008546:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008548:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800854a:	b92a      	cbnz	r2, 8008558 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800854c:	6806      	ldr	r6, [r0, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800854e:	3501      	adds	r5, #1
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008550:	b34e      	cbz	r6, 80085a6 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8008552:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008554:	63a5      	str	r5, [r4, #56]	@ 0x38

	return xReturn;
}
 8008556:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8008558:	b97e      	cbnz	r6, 800857a <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800855a:	6840      	ldr	r0, [r0, #4]
 800855c:	f004 fe30 	bl	800d1c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008560:	6863      	ldr	r3, [r4, #4]
 8008562:	6c21      	ldr	r1, [r4, #64]	@ 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008564:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008566:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008568:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800856a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800856c:	bf24      	itt	cs
 800856e:	6823      	ldrcs	r3, [r4, #0]
 8008570:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008572:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 8008574:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008576:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8008578:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800857a:	68c0      	ldr	r0, [r0, #12]
 800857c:	f004 fe20 	bl	800d1c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008580:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008582:	68e3      	ldr	r3, [r4, #12]
 8008584:	4251      	negs	r1, r2
 8008586:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008588:	6822      	ldr	r2, [r4, #0]
 800858a:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800858c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800858e:	d202      	bcs.n	8008596 <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008590:	68a3      	ldr	r3, [r4, #8]
 8008592:	440b      	add	r3, r1
 8008594:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008596:	2e02      	cmp	r6, #2
 8008598:	d1eb      	bne.n	8008572 <prvCopyDataToQueue+0x32>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800859a:	2d01      	cmp	r5, #1
BaseType_t xReturn = pdFALSE;
 800859c:	f04f 0000 	mov.w	r0, #0
 80085a0:	bf38      	it	cc
 80085a2:	2501      	movcc	r5, #1
 80085a4:	e7d6      	b.n	8008554 <prvCopyDataToQueue+0x14>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80085a6:	6880      	ldr	r0, [r0, #8]
 80085a8:	f001 f8d0 	bl	800974c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80085ac:	60a6      	str	r6, [r4, #8]
 80085ae:	e7d1      	b.n	8008554 <prvCopyDataToQueue+0x14>

080085b0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80085b0:	b570      	push	{r4, r5, r6, lr}
 80085b2:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80085b4:	f001 fb3e 	bl	8009c34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80085b8:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 80085bc:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085be:	2c00      	cmp	r4, #0
 80085c0:	dd14      	ble.n	80085ec <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085c2:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 80085c6:	e003      	b.n	80085d0 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80085c8:	1e63      	subs	r3, r4, #1
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085ce:	b16a      	cbz	r2, 80085ec <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085d0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085d2:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085d4:	b153      	cbz	r3, 80085ec <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085d6:	f000 ff5b 	bl	8009490 <xTaskRemoveFromEventList>
 80085da:	2800      	cmp	r0, #0
 80085dc:	d0f4      	beq.n	80085c8 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 80085de:	f001 f84f 	bl	8009680 <vTaskMissedYield>
			--cTxLock;
 80085e2:	1e63      	subs	r3, r4, #1
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085e8:	2a00      	cmp	r2, #0
 80085ea:	d1f1      	bne.n	80085d0 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80085ec:	23ff      	movs	r3, #255	@ 0xff
 80085ee:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80085f2:	f001 fb41 	bl	8009c78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80085f6:	f001 fb1d 	bl	8009c34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80085fa:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 80085fe:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008600:	2c00      	cmp	r4, #0
 8008602:	dd14      	ble.n	800862e <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008604:	f105 0610 	add.w	r6, r5, #16
 8008608:	e003      	b.n	8008612 <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800860a:	1e63      	subs	r3, r4, #1
 800860c:	b2da      	uxtb	r2, r3
 800860e:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008610:	b16a      	cbz	r2, 800862e <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008612:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008614:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008616:	b153      	cbz	r3, 800862e <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008618:	f000 ff3a 	bl	8009490 <xTaskRemoveFromEventList>
 800861c:	2800      	cmp	r0, #0
 800861e:	d0f4      	beq.n	800860a <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8008620:	f001 f82e 	bl	8009680 <vTaskMissedYield>
				--cRxLock;
 8008624:	1e63      	subs	r3, r4, #1
 8008626:	b2da      	uxtb	r2, r3
 8008628:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800862a:	2a00      	cmp	r2, #0
 800862c:	d1f1      	bne.n	8008612 <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800862e:	23ff      	movs	r3, #255	@ 0xff
 8008630:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
}
 8008634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8008638:	f001 bb1e 	b.w	8009c78 <vPortExitCritical>

0800863c <xQueueGenericReset>:
{
 800863c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800863e:	4604      	mov	r4, r0
{
 8008640:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008642:	2800      	cmp	r0, #0
 8008644:	d03a      	beq.n	80086bc <xQueueGenericReset+0x80>
	taskENTER_CRITICAL();
 8008646:	f001 faf5 	bl	8009c34 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800864a:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800864c:	2100      	movs	r1, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800864e:	6062      	str	r2, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008650:	63a1      	str	r1, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008652:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	@ 0x3c
 8008656:	fb00 f303 	mul.w	r3, r0, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800865a:	1a18      	subs	r0, r3, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800865c:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800865e:	4402      	add	r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008660:	60a3      	str	r3, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8008662:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008664:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008666:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800866a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800866e:	b9cd      	cbnz	r5, 80086a4 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008670:	6923      	ldr	r3, [r4, #16]
 8008672:	b91b      	cbnz	r3, 800867c <xQueueGenericReset+0x40>
	taskEXIT_CRITICAL();
 8008674:	f001 fb00 	bl	8009c78 <vPortExitCritical>
}
 8008678:	2001      	movs	r0, #1
 800867a:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800867c:	f104 0010 	add.w	r0, r4, #16
 8008680:	f000 ff06 	bl	8009490 <xTaskRemoveFromEventList>
 8008684:	2800      	cmp	r0, #0
 8008686:	d0f5      	beq.n	8008674 <xQueueGenericReset+0x38>
					queueYIELD_IF_USING_PREEMPTION();
 8008688:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800868c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008690:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800869c:	f001 faec 	bl	8009c78 <vPortExitCritical>
}
 80086a0:	2001      	movs	r0, #1
 80086a2:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80086a4:	f104 0010 	add.w	r0, r4, #16
 80086a8:	f7ff ff00 	bl	80084ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80086ac:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80086b0:	f7ff fefc 	bl	80084ac <vListInitialise>
	taskEXIT_CRITICAL();
 80086b4:	f001 fae0 	bl	8009c78 <vPortExitCritical>
}
 80086b8:	2001      	movs	r0, #1
 80086ba:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxQueue );
 80086bc:	f240 1103 	movw	r1, #259	@ 0x103
 80086c0:	4801      	ldr	r0, [pc, #4]	@ (80086c8 <xQueueGenericReset+0x8c>)
 80086c2:	f7f8 fbc7 	bl	8000e54 <vAssertCalled>
 80086c6:	e7be      	b.n	8008646 <xQueueGenericReset+0xa>
 80086c8:	08010590 	.word	0x08010590

080086cc <xQueueGenericCreate>:
	{
 80086cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ce:	460e      	mov	r6, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086d0:	4605      	mov	r5, r0
	{
 80086d2:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086d4:	b1b0      	cbz	r0, 8008704 <xQueueGenericCreate+0x38>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086d6:	fb06 f005 	mul.w	r0, r6, r5
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80086da:	3050      	adds	r0, #80	@ 0x50
 80086dc:	f001 fbfc 	bl	8009ed8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80086e0:	4604      	mov	r4, r0
 80086e2:	b158      	cbz	r0, 80086fc <xQueueGenericCreate+0x30>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80086e4:	b166      	cbz	r6, 8008700 <xQueueGenericCreate+0x34>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086e6:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80086ea:	2101      	movs	r1, #1
 80086ec:	4620      	mov	r0, r4
 80086ee:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80086f0:	e9c4 560f 	strd	r5, r6, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80086f4:	f7ff ffa2 	bl	800863c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80086f8:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 80086fc:	4620      	mov	r0, r4
 80086fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008700:	4603      	mov	r3, r0
 8008702:	e7f2      	b.n	80086ea <xQueueGenericCreate+0x1e>
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008704:	f44f 71bb 	mov.w	r1, #374	@ 0x176
 8008708:	4801      	ldr	r0, [pc, #4]	@ (8008710 <xQueueGenericCreate+0x44>)
 800870a:	f7f8 fba3 	bl	8000e54 <vAssertCalled>
 800870e:	e7e2      	b.n	80086d6 <xQueueGenericCreate+0xa>
 8008710:	08010590 	.word	0x08010590

08008714 <xQueueCreateCountingSemaphore>:
	{
 8008714:	b538      	push	{r3, r4, r5, lr}
		configASSERT( uxMaxCount != 0 );
 8008716:	4604      	mov	r4, r0
	{
 8008718:	460d      	mov	r5, r1
		configASSERT( uxMaxCount != 0 );
 800871a:	b148      	cbz	r0, 8008730 <xQueueCreateCountingSemaphore+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 800871c:	42ac      	cmp	r4, r5
 800871e:	d30e      	bcc.n	800873e <xQueueCreateCountingSemaphore+0x2a>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008720:	2202      	movs	r2, #2
 8008722:	2100      	movs	r1, #0
 8008724:	4620      	mov	r0, r4
 8008726:	f7ff ffd1 	bl	80086cc <xQueueGenericCreate>
		if( xHandle != NULL )
 800872a:	b100      	cbz	r0, 800872e <xQueueCreateCountingSemaphore+0x1a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800872c:	6385      	str	r5, [r0, #56]	@ 0x38
	}
 800872e:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( uxMaxCount != 0 );
 8008730:	f240 21ce 	movw	r1, #718	@ 0x2ce
 8008734:	4805      	ldr	r0, [pc, #20]	@ (800874c <xQueueCreateCountingSemaphore+0x38>)
 8008736:	f7f8 fb8d 	bl	8000e54 <vAssertCalled>
		configASSERT( uxInitialCount <= uxMaxCount );
 800873a:	42ac      	cmp	r4, r5
 800873c:	d2f0      	bcs.n	8008720 <xQueueCreateCountingSemaphore+0xc>
 800873e:	f240 21cf 	movw	r1, #719	@ 0x2cf
 8008742:	4802      	ldr	r0, [pc, #8]	@ (800874c <xQueueCreateCountingSemaphore+0x38>)
 8008744:	f7f8 fb86 	bl	8000e54 <vAssertCalled>
 8008748:	e7ea      	b.n	8008720 <xQueueCreateCountingSemaphore+0xc>
 800874a:	bf00      	nop
 800874c:	08010590 	.word	0x08010590

08008750 <xQueueGenericSend>:
{
 8008750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008754:	b085      	sub	sp, #20
 8008756:	4689      	mov	r9, r1
	configASSERT( pxQueue );
 8008758:	4604      	mov	r4, r0
{
 800875a:	4698      	mov	r8, r3
 800875c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800875e:	2800      	cmp	r0, #0
 8008760:	f000 80a7 	beq.w	80088b2 <xQueueGenericSend+0x162>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008764:	f1b9 0f00 	cmp.w	r9, #0
 8008768:	f000 808d 	beq.w	8008886 <xQueueGenericSend+0x136>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800876c:	f1b8 0f02 	cmp.w	r8, #2
 8008770:	d07f      	beq.n	8008872 <xQueueGenericSend+0x122>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008772:	f000 ff91 	bl	8009698 <xTaskGetSchedulerState>
 8008776:	b918      	cbnz	r0, 8008780 <xQueueGenericSend+0x30>
 8008778:	9b01      	ldr	r3, [sp, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	f040 809f 	bne.w	80088be <xQueueGenericSend+0x16e>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008780:	f1a8 0602 	sub.w	r6, r8, #2
 8008784:	2500      	movs	r5, #0
 8008786:	fab6 f686 	clz	r6, r6
		prvLockQueue( pxQueue );
 800878a:	462f      	mov	r7, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800878c:	0976      	lsrs	r6, r6, #5
 800878e:	e007      	b.n	80087a0 <xQueueGenericSend+0x50>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8008790:	f001 fa72 	bl	8009c78 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8008794:	4620      	mov	r0, r4
 8008796:	f7ff ff0b 	bl	80085b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800879a:	f000 fd27 	bl	80091ec <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800879e:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 80087a0:	f001 fa48 	bl	8009c34 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087a4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80087a6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80087a8:	4282      	cmp	r2, r0
 80087aa:	d343      	bcc.n	8008834 <xQueueGenericSend+0xe4>
 80087ac:	2e00      	cmp	r6, #0
 80087ae:	d141      	bne.n	8008834 <xQueueGenericSend+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 80087b0:	9b01      	ldr	r3, [sp, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d071      	beq.n	800889a <xQueueGenericSend+0x14a>
				else if( xEntryTimeSet == pdFALSE )
 80087b6:	2d00      	cmp	r5, #0
 80087b8:	d038      	beq.n	800882c <xQueueGenericSend+0xdc>
		taskEXIT_CRITICAL();
 80087ba:	f001 fa5d 	bl	8009c78 <vPortExitCritical>
		vTaskSuspendAll();
 80087be:	f000 fc37 	bl	8009030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087c2:	f001 fa37 	bl	8009c34 <vPortEnterCritical>
 80087c6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80087ca:	2bff      	cmp	r3, #255	@ 0xff
 80087cc:	d101      	bne.n	80087d2 <xQueueGenericSend+0x82>
 80087ce:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 80087d2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80087d6:	2bff      	cmp	r3, #255	@ 0xff
 80087d8:	d101      	bne.n	80087de <xQueueGenericSend+0x8e>
 80087da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80087de:	f001 fa4b 	bl	8009c78 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087e2:	a901      	add	r1, sp, #4
 80087e4:	a802      	add	r0, sp, #8
 80087e6:	f000 ff09 	bl	80095fc <xTaskCheckForTimeOut>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d15b      	bne.n	80088a6 <xQueueGenericSend+0x156>
	taskENTER_CRITICAL();
 80087ee:	f001 fa21 	bl	8009c34 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80087f2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80087f4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d1ca      	bne.n	8008790 <xQueueGenericSend+0x40>
	taskEXIT_CRITICAL();
 80087fa:	f001 fa3d 	bl	8009c78 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80087fe:	9901      	ldr	r1, [sp, #4]
 8008800:	f104 0010 	add.w	r0, r4, #16
 8008804:	f000 fe00 	bl	8009408 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008808:	4620      	mov	r0, r4
 800880a:	f7ff fed1 	bl	80085b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800880e:	f000 fced 	bl	80091ec <xTaskResumeAll>
 8008812:	2800      	cmp	r0, #0
 8008814:	d1c3      	bne.n	800879e <xQueueGenericSend+0x4e>
					portYIELD_WITHIN_API();
 8008816:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800881a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800881e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	e7b8      	b.n	800879e <xQueueGenericSend+0x4e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800882c:	a802      	add	r0, sp, #8
 800882e:	f000 fed9 	bl	80095e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008832:	e7c2      	b.n	80087ba <xQueueGenericSend+0x6a>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008834:	4642      	mov	r2, r8
 8008836:	4649      	mov	r1, r9
 8008838:	4620      	mov	r0, r4
 800883a:	f7ff fe81 	bl	8008540 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800883e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008840:	b933      	cbnz	r3, 8008850 <xQueueGenericSend+0x100>
					else if( xYieldRequired != pdFALSE )
 8008842:	b958      	cbnz	r0, 800885c <xQueueGenericSend+0x10c>
				taskEXIT_CRITICAL();
 8008844:	f001 fa18 	bl	8009c78 <vPortExitCritical>
				return pdPASS;
 8008848:	2001      	movs	r0, #1
}
 800884a:	b005      	add	sp, #20
 800884c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008850:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008854:	f000 fe1c 	bl	8009490 <xTaskRemoveFromEventList>
 8008858:	2800      	cmp	r0, #0
 800885a:	d0f3      	beq.n	8008844 <xQueueGenericSend+0xf4>
						queueYIELD_IF_USING_PREEMPTION();
 800885c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008860:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008864:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	e7e8      	b.n	8008844 <xQueueGenericSend+0xf4>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008872:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008874:	2b01      	cmp	r3, #1
 8008876:	f43f af7c 	beq.w	8008772 <xQueueGenericSend+0x22>
 800887a:	f44f 713b 	mov.w	r1, #748	@ 0x2ec
 800887e:	4813      	ldr	r0, [pc, #76]	@ (80088cc <xQueueGenericSend+0x17c>)
 8008880:	f7f8 fae8 	bl	8000e54 <vAssertCalled>
 8008884:	e775      	b.n	8008772 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008886:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008888:	2b00      	cmp	r3, #0
 800888a:	f43f af6f 	beq.w	800876c <xQueueGenericSend+0x1c>
 800888e:	f240 21eb 	movw	r1, #747	@ 0x2eb
 8008892:	480e      	ldr	r0, [pc, #56]	@ (80088cc <xQueueGenericSend+0x17c>)
 8008894:	f7f8 fade 	bl	8000e54 <vAssertCalled>
 8008898:	e768      	b.n	800876c <xQueueGenericSend+0x1c>
					taskEXIT_CRITICAL();
 800889a:	f001 f9ed 	bl	8009c78 <vPortExitCritical>
					return errQUEUE_FULL;
 800889e:	2000      	movs	r0, #0
}
 80088a0:	b005      	add	sp, #20
 80088a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			prvUnlockQueue( pxQueue );
 80088a6:	4620      	mov	r0, r4
 80088a8:	f7ff fe82 	bl	80085b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088ac:	f000 fc9e 	bl	80091ec <xTaskResumeAll>
			return errQUEUE_FULL;
 80088b0:	e7f5      	b.n	800889e <xQueueGenericSend+0x14e>
	configASSERT( pxQueue );
 80088b2:	f240 21ea 	movw	r1, #746	@ 0x2ea
 80088b6:	4805      	ldr	r0, [pc, #20]	@ (80088cc <xQueueGenericSend+0x17c>)
 80088b8:	f7f8 facc 	bl	8000e54 <vAssertCalled>
 80088bc:	e752      	b.n	8008764 <xQueueGenericSend+0x14>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088be:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80088c2:	4802      	ldr	r0, [pc, #8]	@ (80088cc <xQueueGenericSend+0x17c>)
 80088c4:	f7f8 fac6 	bl	8000e54 <vAssertCalled>
 80088c8:	e75a      	b.n	8008780 <xQueueGenericSend+0x30>
 80088ca:	bf00      	nop
 80088cc:	08010590 	.word	0x08010590

080088d0 <xQueueCreateMutex>:
	{
 80088d0:	b570      	push	{r4, r5, r6, lr}
 80088d2:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80088d4:	2050      	movs	r0, #80	@ 0x50
 80088d6:	f001 faff 	bl	8009ed8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80088da:	4604      	mov	r4, r0
 80088dc:	b188      	cbz	r0, 8008902 <xQueueCreateMutex+0x32>
	pxNewQueue->uxLength = uxQueueLength;
 80088de:	2600      	movs	r6, #0
 80088e0:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80088e2:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80088e4:	e9c0 160f 	strd	r1, r6, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80088e8:	f7ff fea8 	bl	800863c <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80088ec:	4633      	mov	r3, r6
 80088ee:	4632      	mov	r2, r6
 80088f0:	4631      	mov	r1, r6
 80088f2:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80088f4:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80088f8:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80088fa:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80088fc:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80088fe:	f7ff ff27 	bl	8008750 <xQueueGenericSend>
	}
 8008902:	4620      	mov	r0, r4
 8008904:	bd70      	pop	{r4, r5, r6, pc}
 8008906:	bf00      	nop

08008908 <xQueueReceive>:
{
 8008908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800890a:	b085      	sub	sp, #20
 800890c:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800890e:	4604      	mov	r4, r0
{
 8008910:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008912:	2800      	cmp	r0, #0
 8008914:	d072      	beq.n	80089fc <xQueueReceive+0xf4>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008916:	2e00      	cmp	r6, #0
 8008918:	d067      	beq.n	80089ea <xQueueReceive+0xe2>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800891a:	f000 febd 	bl	8009698 <xTaskGetSchedulerState>
 800891e:	b910      	cbnz	r0, 8008926 <xQueueReceive+0x1e>
 8008920:	9b01      	ldr	r3, [sp, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d170      	bne.n	8008a08 <xQueueReceive+0x100>
		taskENTER_CRITICAL();
 8008926:	f001 f985 	bl	8009c34 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800892a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800892c:	2d00      	cmp	r5, #0
 800892e:	d171      	bne.n	8008a14 <xQueueReceive+0x10c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008930:	9b01      	ldr	r3, [sp, #4]
 8008932:	b37b      	cbz	r3, 8008994 <xQueueReceive+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008934:	a802      	add	r0, sp, #8
		prvLockQueue( pxQueue );
 8008936:	462f      	mov	r7, r5
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008938:	f000 fe54 	bl	80095e4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800893c:	f001 f99c 	bl	8009c78 <vPortExitCritical>
		vTaskSuspendAll();
 8008940:	f000 fb76 	bl	8009030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008944:	f001 f976 	bl	8009c34 <vPortEnterCritical>
 8008948:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800894c:	2bff      	cmp	r3, #255	@ 0xff
 800894e:	d101      	bne.n	8008954 <xQueueReceive+0x4c>
 8008950:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 8008954:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008958:	2bff      	cmp	r3, #255	@ 0xff
 800895a:	d101      	bne.n	8008960 <xQueueReceive+0x58>
 800895c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008960:	f001 f98a 	bl	8009c78 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008964:	a901      	add	r1, sp, #4
 8008966:	a802      	add	r0, sp, #8
 8008968:	f000 fe48 	bl	80095fc <xTaskCheckForTimeOut>
 800896c:	b9b8      	cbnz	r0, 800899e <xQueueReceive+0x96>
	taskENTER_CRITICAL();
 800896e:	f001 f961 	bl	8009c34 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008972:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008974:	b303      	cbz	r3, 80089b8 <xQueueReceive+0xb0>
	taskEXIT_CRITICAL();
 8008976:	f001 f97f 	bl	8009c78 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800897a:	4620      	mov	r0, r4
 800897c:	f7ff fe18 	bl	80085b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008980:	f000 fc34 	bl	80091ec <xTaskResumeAll>
		taskENTER_CRITICAL();
 8008984:	f001 f956 	bl	8009c34 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008988:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800898a:	2d00      	cmp	r5, #0
 800898c:	d142      	bne.n	8008a14 <xQueueReceive+0x10c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800898e:	9b01      	ldr	r3, [sp, #4]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1d3      	bne.n	800893c <xQueueReceive+0x34>
					taskEXIT_CRITICAL();
 8008994:	f001 f970 	bl	8009c78 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008998:	2000      	movs	r0, #0
}
 800899a:	b005      	add	sp, #20
 800899c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvUnlockQueue( pxQueue );
 800899e:	4620      	mov	r0, r4
 80089a0:	f7ff fe06 	bl	80085b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089a4:	f000 fc22 	bl	80091ec <xTaskResumeAll>
	taskENTER_CRITICAL();
 80089a8:	f001 f944 	bl	8009c34 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80089ac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d0f0      	beq.n	8008994 <xQueueReceive+0x8c>
	taskEXIT_CRITICAL();
 80089b2:	f001 f961 	bl	8009c78 <vPortExitCritical>
 80089b6:	e7e5      	b.n	8008984 <xQueueReceive+0x7c>
 80089b8:	f001 f95e 	bl	8009c78 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80089bc:	9901      	ldr	r1, [sp, #4]
 80089be:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80089c2:	f000 fd21 	bl	8009408 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80089c6:	4620      	mov	r0, r4
 80089c8:	f7ff fdf2 	bl	80085b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80089cc:	f000 fc0e 	bl	80091ec <xTaskResumeAll>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d1d7      	bne.n	8008984 <xQueueReceive+0x7c>
					portYIELD_WITHIN_API();
 80089d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80089d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 80089e8:	e7cc      	b.n	8008984 <xQueueReceive+0x7c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d094      	beq.n	800891a <xQueueReceive+0x12>
 80089f0:	f44f 61a1 	mov.w	r1, #1288	@ 0x508
 80089f4:	481b      	ldr	r0, [pc, #108]	@ (8008a64 <xQueueReceive+0x15c>)
 80089f6:	f7f8 fa2d 	bl	8000e54 <vAssertCalled>
 80089fa:	e78e      	b.n	800891a <xQueueReceive+0x12>
	configASSERT( ( pxQueue ) );
 80089fc:	f240 5104 	movw	r1, #1284	@ 0x504
 8008a00:	4818      	ldr	r0, [pc, #96]	@ (8008a64 <xQueueReceive+0x15c>)
 8008a02:	f7f8 fa27 	bl	8000e54 <vAssertCalled>
 8008a06:	e786      	b.n	8008916 <xQueueReceive+0xe>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a08:	f240 510d 	movw	r1, #1293	@ 0x50d
 8008a0c:	4815      	ldr	r0, [pc, #84]	@ (8008a64 <xQueueReceive+0x15c>)
 8008a0e:	f7f8 fa21 	bl	8000e54 <vAssertCalled>
 8008a12:	e788      	b.n	8008926 <xQueueReceive+0x1e>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a14:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008a16:	b142      	cbz	r2, 8008a2a <xQueueReceive+0x122>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a18:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a1a:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a1c:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a1e:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a20:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a22:	d20b      	bcs.n	8008a3c <xQueueReceive+0x134>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a24:	4630      	mov	r0, r6
 8008a26:	f004 fbcb 	bl	800d1c0 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a2a:	3d01      	subs	r5, #1
 8008a2c:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a2e:	6923      	ldr	r3, [r4, #16]
 8008a30:	b93b      	cbnz	r3, 8008a42 <xQueueReceive+0x13a>
				taskEXIT_CRITICAL();
 8008a32:	f001 f921 	bl	8009c78 <vPortExitCritical>
				return pdPASS;
 8008a36:	2001      	movs	r0, #1
}
 8008a38:	b005      	add	sp, #20
 8008a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008a3c:	6821      	ldr	r1, [r4, #0]
 8008a3e:	60e1      	str	r1, [r4, #12]
 8008a40:	e7f0      	b.n	8008a24 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a42:	f104 0010 	add.w	r0, r4, #16
 8008a46:	f000 fd23 	bl	8009490 <xTaskRemoveFromEventList>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d0f1      	beq.n	8008a32 <xQueueReceive+0x12a>
						queueYIELD_IF_USING_PREEMPTION();
 8008a4e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008a52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a56:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	e7e6      	b.n	8008a32 <xQueueReceive+0x12a>
 8008a64:	08010590 	.word	0x08010590

08008a68 <xQueueSemaphoreTake>:
{
 8008a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a6a:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8008a6c:	4604      	mov	r4, r0
{
 8008a6e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008a70:	2800      	cmp	r0, #0
 8008a72:	f000 809b 	beq.w	8008bac <xQueueSemaphoreTake+0x144>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008a76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d17c      	bne.n	8008b76 <xQueueSemaphoreTake+0x10e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a7c:	f000 fe0c 	bl	8009698 <xTaskGetSchedulerState>
 8008a80:	b918      	cbnz	r0, 8008a8a <xQueueSemaphoreTake+0x22>
 8008a82:	9b01      	ldr	r3, [sp, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f040 8086 	bne.w	8008b96 <xQueueSemaphoreTake+0x12e>
{
 8008a8a:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
 8008a8c:	f001 f8d2 	bl	8009c34 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008a90:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
{
 8008a92:	4635      	mov	r5, r6
		prvLockQueue( pxQueue );
 8008a94:	4637      	mov	r7, r6
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008a96:	bb7b      	cbnz	r3, 8008af8 <xQueueSemaphoreTake+0x90>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a98:	9b01      	ldr	r3, [sp, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f000 8095 	beq.w	8008bca <xQueueSemaphoreTake+0x162>
				else if( xEntryTimeSet == pdFALSE )
 8008aa0:	2d00      	cmp	r5, #0
 8008aa2:	d045      	beq.n	8008b30 <xQueueSemaphoreTake+0xc8>
		taskEXIT_CRITICAL();
 8008aa4:	f001 f8e8 	bl	8009c78 <vPortExitCritical>
		vTaskSuspendAll();
 8008aa8:	f000 fac2 	bl	8009030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008aac:	f001 f8c2 	bl	8009c34 <vPortEnterCritical>
 8008ab0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008ab4:	2bff      	cmp	r3, #255	@ 0xff
 8008ab6:	d101      	bne.n	8008abc <xQueueSemaphoreTake+0x54>
 8008ab8:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 8008abc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008ac0:	2bff      	cmp	r3, #255	@ 0xff
 8008ac2:	d101      	bne.n	8008ac8 <xQueueSemaphoreTake+0x60>
 8008ac4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ac8:	f001 f8d6 	bl	8009c78 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008acc:	a901      	add	r1, sp, #4
 8008ace:	a802      	add	r0, sp, #8
 8008ad0:	f000 fd94 	bl	80095fc <xTaskCheckForTimeOut>
 8008ad4:	b9e8      	cbnz	r0, 8008b12 <xQueueSemaphoreTake+0xaa>
	taskENTER_CRITICAL();
 8008ad6:	f001 f8ad 	bl	8009c34 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ada:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008adc:	b37b      	cbz	r3, 8008b3e <xQueueSemaphoreTake+0xd6>
	taskEXIT_CRITICAL();
 8008ade:	f001 f8cb 	bl	8009c78 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f7ff fd64 	bl	80085b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ae8:	f000 fb80 	bl	80091ec <xTaskResumeAll>
		taskENTER_CRITICAL();
 8008aec:	f001 f8a2 	bl	8009c34 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008af0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
{
 8008af2:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d0cf      	beq.n	8008a98 <xQueueSemaphoreTake+0x30>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008af8:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008afa:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008afc:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008afe:	2a00      	cmp	r2, #0
 8008b00:	d07c      	beq.n	8008bfc <xQueueSemaphoreTake+0x194>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b02:	6923      	ldr	r3, [r4, #16]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d168      	bne.n	8008bda <xQueueSemaphoreTake+0x172>
				taskEXIT_CRITICAL();
 8008b08:	f001 f8b6 	bl	8009c78 <vPortExitCritical>
				return pdPASS;
 8008b0c:	2001      	movs	r0, #1
}
 8008b0e:	b005      	add	sp, #20
 8008b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvUnlockQueue( pxQueue );
 8008b12:	4620      	mov	r0, r4
 8008b14:	f7ff fd4c 	bl	80085b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b18:	f000 fb68 	bl	80091ec <xTaskResumeAll>
	taskENTER_CRITICAL();
 8008b1c:	f001 f88a 	bl	8009c34 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b20:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008b22:	b94b      	cbnz	r3, 8008b38 <xQueueSemaphoreTake+0xd0>
	taskEXIT_CRITICAL();
 8008b24:	f001 f8a8 	bl	8009c78 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8008b28:	bb5e      	cbnz	r6, 8008b82 <xQueueSemaphoreTake+0x11a>
					return errQUEUE_EMPTY;
 8008b2a:	2000      	movs	r0, #0
}
 8008b2c:	b005      	add	sp, #20
 8008b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b30:	a802      	add	r0, sp, #8
 8008b32:	f000 fd57 	bl	80095e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b36:	e7b5      	b.n	8008aa4 <xQueueSemaphoreTake+0x3c>
	taskEXIT_CRITICAL();
 8008b38:	f001 f89e 	bl	8009c78 <vPortExitCritical>
	return xReturn;
 8008b3c:	e7d6      	b.n	8008aec <xQueueSemaphoreTake+0x84>
	taskEXIT_CRITICAL();
 8008b3e:	f001 f89b 	bl	8009c78 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d037      	beq.n	8008bb8 <xQueueSemaphoreTake+0x150>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b48:	9901      	ldr	r1, [sp, #4]
 8008b4a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008b4e:	f000 fc5b 	bl	8009408 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b52:	4620      	mov	r0, r4
 8008b54:	f7ff fd2c 	bl	80085b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b58:	f000 fb48 	bl	80091ec <xTaskResumeAll>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d1c5      	bne.n	8008aec <xQueueSemaphoreTake+0x84>
					portYIELD_WITHIN_API();
 8008b60:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008b64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b68:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	f3bf 8f6f 	isb	sy
 8008b74:	e7ba      	b.n	8008aec <xQueueSemaphoreTake+0x84>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b76:	f240 5199 	movw	r1, #1433	@ 0x599
 8008b7a:	4822      	ldr	r0, [pc, #136]	@ (8008c04 <xQueueSemaphoreTake+0x19c>)
 8008b7c:	f7f8 f96a 	bl	8000e54 <vAssertCalled>
 8008b80:	e77c      	b.n	8008a7c <xQueueSemaphoreTake+0x14>
						taskENTER_CRITICAL();
 8008b82:	f001 f857 	bl	8009c34 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008b86:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008b88:	b959      	cbnz	r1, 8008ba2 <xQueueSemaphoreTake+0x13a>
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008b8a:	68a0      	ldr	r0, [r4, #8]
 8008b8c:	f000 fe28 	bl	80097e0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8008b90:	f001 f872 	bl	8009c78 <vPortExitCritical>
 8008b94:	e7c9      	b.n	8008b2a <xQueueSemaphoreTake+0xc2>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b96:	f240 519e 	movw	r1, #1438	@ 0x59e
 8008b9a:	481a      	ldr	r0, [pc, #104]	@ (8008c04 <xQueueSemaphoreTake+0x19c>)
 8008b9c:	f7f8 f95a 	bl	8000e54 <vAssertCalled>
 8008ba0:	e773      	b.n	8008a8a <xQueueSemaphoreTake+0x22>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008ba2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008ba4:	6819      	ldr	r1, [r3, #0]
 8008ba6:	f1c1 0107 	rsb	r1, r1, #7
 8008baa:	e7ee      	b.n	8008b8a <xQueueSemaphoreTake+0x122>
	configASSERT( ( pxQueue ) );
 8008bac:	f240 5195 	movw	r1, #1429	@ 0x595
 8008bb0:	4814      	ldr	r0, [pc, #80]	@ (8008c04 <xQueueSemaphoreTake+0x19c>)
 8008bb2:	f7f8 f94f 	bl	8000e54 <vAssertCalled>
 8008bb6:	e75e      	b.n	8008a76 <xQueueSemaphoreTake+0xe>
						taskENTER_CRITICAL();
 8008bb8:	f001 f83c 	bl	8009c34 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008bbc:	68a0      	ldr	r0, [r4, #8]
 8008bbe:	f000 fd7b 	bl	80096b8 <xTaskPriorityInherit>
 8008bc2:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8008bc4:	f001 f858 	bl	8009c78 <vPortExitCritical>
 8008bc8:	e7be      	b.n	8008b48 <xQueueSemaphoreTake+0xe0>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008bca:	2e00      	cmp	r6, #0
 8008bcc:	d0e0      	beq.n	8008b90 <xQueueSemaphoreTake+0x128>
 8008bce:	f240 51e5 	movw	r1, #1509	@ 0x5e5
 8008bd2:	480c      	ldr	r0, [pc, #48]	@ (8008c04 <xQueueSemaphoreTake+0x19c>)
 8008bd4:	f7f8 f93e 	bl	8000e54 <vAssertCalled>
					taskEXIT_CRITICAL();
 8008bd8:	e7da      	b.n	8008b90 <xQueueSemaphoreTake+0x128>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bda:	f104 0010 	add.w	r0, r4, #16
 8008bde:	f000 fc57 	bl	8009490 <xTaskRemoveFromEventList>
 8008be2:	2800      	cmp	r0, #0
 8008be4:	d090      	beq.n	8008b08 <xQueueSemaphoreTake+0xa0>
						queueYIELD_IF_USING_PREEMPTION();
 8008be6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008bea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bee:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	e785      	b.n	8008b08 <xQueueSemaphoreTake+0xa0>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008bfc:	f000 fe54 	bl	80098a8 <pvTaskIncrementMutexHeldCount>
 8008c00:	60a0      	str	r0, [r4, #8]
 8008c02:	e77e      	b.n	8008b02 <xQueueSemaphoreTake+0x9a>
 8008c04:	08010590 	.word	0x08010590

08008c08 <uxQueueMessagesWaiting>:
{
 8008c08:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	b130      	cbz	r0, 8008c1c <uxQueueMessagesWaiting+0x14>
	taskENTER_CRITICAL();
 8008c0e:	f001 f811 	bl	8009c34 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008c12:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 8008c14:	f001 f830 	bl	8009c78 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008c18:	4620      	mov	r0, r4
 8008c1a:	bd10      	pop	{r4, pc}
	configASSERT( xQueue );
 8008c1c:	f240 718e 	movw	r1, #1934	@ 0x78e
 8008c20:	4804      	ldr	r0, [pc, #16]	@ (8008c34 <uxQueueMessagesWaiting+0x2c>)
 8008c22:	f7f8 f917 	bl	8000e54 <vAssertCalled>
	taskENTER_CRITICAL();
 8008c26:	f001 f805 	bl	8009c34 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008c2a:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 8008c2c:	f001 f824 	bl	8009c78 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008c30:	4620      	mov	r0, r4
 8008c32:	bd10      	pop	{r4, pc}
 8008c34:	08010590 	.word	0x08010590

08008c38 <uxQueueSpacesAvailable>:
{
 8008c38:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8008c3a:	4604      	mov	r4, r0
 8008c3c:	b140      	cbz	r0, 8008c50 <uxQueueSpacesAvailable+0x18>
	taskENTER_CRITICAL();
 8008c3e:	f000 fff9 	bl	8009c34 <vPortEnterCritical>
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8008c42:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008c44:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8008c46:	1ae4      	subs	r4, r4, r3
	taskEXIT_CRITICAL();
 8008c48:	f001 f816 	bl	8009c78 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	bd10      	pop	{r4, pc}
	configASSERT( pxQueue );
 8008c50:	f240 719f 	movw	r1, #1951	@ 0x79f
 8008c54:	4801      	ldr	r0, [pc, #4]	@ (8008c5c <uxQueueSpacesAvailable+0x24>)
 8008c56:	f7f8 f8fd 	bl	8000e54 <vAssertCalled>
 8008c5a:	e7f0      	b.n	8008c3e <uxQueueSpacesAvailable+0x6>
 8008c5c:	08010590 	.word	0x08010590

08008c60 <vQueueDelete>:
{
 8008c60:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8008c62:	4604      	mov	r4, r0
 8008c64:	b1c8      	cbz	r0, 8008c9a <vQueueDelete+0x3a>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c66:	2300      	movs	r3, #0
 8008c68:	490f      	ldr	r1, [pc, #60]	@ (8008ca8 <vQueueDelete+0x48>)
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008c6a:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8008c6e:	00d8      	lsls	r0, r3, #3
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c70:	3301      	adds	r3, #1
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008c72:	4294      	cmp	r4, r2
 8008c74:	d006      	beq.n	8008c84 <vQueueDelete+0x24>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c76:	2b08      	cmp	r3, #8
 8008c78:	d1f7      	bne.n	8008c6a <vQueueDelete+0xa>
		vPortFree( pxQueue );
 8008c7a:	4620      	mov	r0, r4
}
 8008c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 8008c80:	f001 b996 	b.w	8009fb0 <vPortFree>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008c84:	4909      	ldr	r1, [pc, #36]	@ (8008cac <vQueueDelete+0x4c>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	2300      	movs	r3, #0
 8008c8a:	4408      	add	r0, r1
 8008c8c:	e9c0 2300 	strd	r2, r3, [r0]
		vPortFree( pxQueue );
 8008c90:	4620      	mov	r0, r4
}
 8008c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 8008c96:	f001 b98b 	b.w	8009fb0 <vPortFree>
	configASSERT( pxQueue );
 8008c9a:	f240 71bb 	movw	r1, #1979	@ 0x7bb
 8008c9e:	4804      	ldr	r0, [pc, #16]	@ (8008cb0 <vQueueDelete+0x50>)
 8008ca0:	f7f8 f8d8 	bl	8000e54 <vAssertCalled>
 8008ca4:	e7df      	b.n	8008c66 <vQueueDelete+0x6>
 8008ca6:	bf00      	nop
 8008ca8:	20000dd4 	.word	0x20000dd4
 8008cac:	20000dd0 	.word	0x20000dd0
 8008cb0:	08010590 	.word	0x08010590

08008cb4 <vQueueAddToRegistry>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8008ce0 <vQueueAddToRegistry+0x2c>)
	{
 8008cb8:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008cba:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8008cbe:	eb02 0cc3 	add.w	ip, r2, r3, lsl #3
 8008cc2:	b12c      	cbz	r4, 8008cd0 <vQueueAddToRegistry+0x1c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	2b08      	cmp	r3, #8
 8008cc8:	d1f7      	bne.n	8008cba <vQueueAddToRegistry+0x6>
	}
 8008cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008cd4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008cd8:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	20000dd0 	.word	0x20000dd0

08008ce4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8008d54 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8008ce8:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cea:	4e1b      	ldr	r6, [pc, #108]	@ (8008d58 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8008cec:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8008cee:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cf0:	6833      	ldr	r3, [r6, #0]
 8008cf2:	1d18      	adds	r0, r3, #4
 8008cf4:	f7ff fc10 	bl	8008518 <uxListRemove>
 8008cf8:	b940      	cbnz	r0, 8008d0c <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008cfa:	6833      	ldr	r3, [r6, #0]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	4917      	ldr	r1, [pc, #92]	@ (8008d5c <prvAddCurrentTaskToDelayedList+0x78>)
 8008d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d02:	409a      	lsls	r2, r3
 8008d04:	680b      	ldr	r3, [r1, #0]
 8008d06:	ea23 0302 	bic.w	r3, r3, r2
 8008d0a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d0c:	1c62      	adds	r2, r4, #1
 8008d0e:	d101      	bne.n	8008d14 <prvAddCurrentTaskToDelayedList+0x30>
 8008d10:	07fb      	lsls	r3, r7, #31
 8008d12:	d417      	bmi.n	8008d44 <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d14:	192d      	adds	r5, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d16:	6833      	ldr	r3, [r6, #0]
 8008d18:	605d      	str	r5, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8008d1a:	d307      	bcc.n	8008d2c <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d1c:	4b10      	ldr	r3, [pc, #64]	@ (8008d60 <prvAddCurrentTaskToDelayedList+0x7c>)
 8008d1e:	6818      	ldr	r0, [r3, #0]
 8008d20:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d26:	3104      	adds	r1, #4
 8008d28:	f7ff bbde 	b.w	80084e8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8008d64 <prvAddCurrentTaskToDelayedList+0x80>)
 8008d2e:	6818      	ldr	r0, [r3, #0]
 8008d30:	6831      	ldr	r1, [r6, #0]
 8008d32:	3104      	adds	r1, #4
 8008d34:	f7ff fbd8 	bl	80084e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d38:	4b0b      	ldr	r3, [pc, #44]	@ (8008d68 <prvAddCurrentTaskToDelayedList+0x84>)
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	42aa      	cmp	r2, r5
 8008d3e:	d900      	bls.n	8008d42 <prvAddCurrentTaskToDelayedList+0x5e>
					xNextTaskUnblockTime = xTimeToWake;
 8008d40:	601d      	str	r5, [r3, #0]
}
 8008d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d44:	6831      	ldr	r1, [r6, #0]
 8008d46:	4809      	ldr	r0, [pc, #36]	@ (8008d6c <prvAddCurrentTaskToDelayedList+0x88>)
 8008d48:	3104      	adds	r1, #4
}
 8008d4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d4e:	f7ff bbbd 	b.w	80084cc <vListInsertEnd>
 8008d52:	bf00      	nop
 8008d54:	20000e3c 	.word	0x20000e3c
 8008d58:	20000f40 	.word	0x20000f40
 8008d5c:	20000e38 	.word	0x20000e38
 8008d60:	20000e84 	.word	0x20000e84
 8008d64:	20000e88 	.word	0x20000e88
 8008d68:	20000e20 	.word	0x20000e20
 8008d6c:	20000e44 	.word	0x20000e44

08008d70 <prvIdleTask>:
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	4d16      	ldr	r5, [pc, #88]	@ (8008dcc <prvIdleTask+0x5c>)
				taskYIELD();
 8008d74:	f04f 2ae0 	mov.w	sl, #3758153728	@ 0xe000e000
 8008d78:	4f15      	ldr	r7, [pc, #84]	@ (8008dd0 <prvIdleTask+0x60>)
 8008d7a:	f04f 5980 	mov.w	r9, #268435456	@ 0x10000000
 8008d7e:	4e15      	ldr	r6, [pc, #84]	@ (8008dd4 <prvIdleTask+0x64>)
 8008d80:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 8008dd8 <prvIdleTask+0x68>
 8008d84:	e014      	b.n	8008db0 <prvIdleTask+0x40>
			taskENTER_CRITICAL();
 8008d86:	f000 ff55 	bl	8009c34 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d8e:	1d20      	adds	r0, r4, #4
 8008d90:	f7ff fbc2 	bl	8008518 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d94:	6833      	ldr	r3, [r6, #0]
 8008d96:	3b01      	subs	r3, #1
 8008d98:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d9a:	682b      	ldr	r3, [r5, #0]
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 8008da0:	f000 ff6a 	bl	8009c78 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8008da4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008da6:	f001 f903 	bl	8009fb0 <vPortFree>
			vPortFree( pxTCB );
 8008daa:	4620      	mov	r0, r4
 8008dac:	f001 f900 	bl	8009fb0 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1e7      	bne.n	8008d86 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008db6:	f8d8 3000 	ldr.w	r3, [r8]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d9f8      	bls.n	8008db0 <prvIdleTask+0x40>
				taskYIELD();
 8008dbe:	f8ca 9d04 	str.w	r9, [sl, #3332]	@ 0xd04
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	e7f1      	b.n	8008db0 <prvIdleTask+0x40>
 8008dcc:	20000e58 	.word	0x20000e58
 8008dd0:	20000e5c 	.word	0x20000e5c
 8008dd4:	20000e40 	.word	0x20000e40
 8008dd8:	20000eb4 	.word	0x20000eb4

08008ddc <xTaskCreate>:
	{
 8008ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008de0:	0096      	lsls	r6, r2, #2
	{
 8008de2:	4680      	mov	r8, r0
 8008de4:	460d      	mov	r5, r1
 8008de6:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008de8:	4630      	mov	r0, r6
 8008dea:	f001 f875 	bl	8009ed8 <pvPortMalloc>
			if( pxStack != NULL )
 8008dee:	2800      	cmp	r0, #0
 8008df0:	f000 808e 	beq.w	8008f10 <xTaskCreate+0x134>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008df4:	4607      	mov	r7, r0
 8008df6:	206c      	movs	r0, #108	@ 0x6c
 8008df8:	f001 f86e 	bl	8009ed8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	f000 8083 	beq.w	8008f0a <xTaskCreate+0x12e>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e04:	4632      	mov	r2, r6
					pxNewTCB->pxStack = pxStack;
 8008e06:	6307      	str	r7, [r0, #48]	@ 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e08:	21a5      	movs	r1, #165	@ 0xa5
 8008e0a:	4638      	mov	r0, r7
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e0c:	3e04      	subs	r6, #4
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e0e:	f004 faab 	bl	800d368 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008e14:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e16:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8008e1a:	2d00      	cmp	r5, #0
 8008e1c:	f000 8085 	beq.w	8008f2a <xTaskCreate+0x14e>
 8008e20:	f105 3cff 	add.w	ip, r5, #4294967295
 8008e24:	f105 020f 	add.w	r2, r5, #15
 8008e28:	f104 0333 	add.w	r3, r4, #51	@ 0x33
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e2c:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 8008e30:	f803 5f01 	strb.w	r5, [r3, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8008e34:	b10d      	cbz	r5, 8008e3a <xTaskCreate+0x5e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e36:	4594      	cmp	ip, r2
 8008e38:	d1f8      	bne.n	8008e2c <xTaskCreate+0x50>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e40:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8008e42:	2700      	movs	r7, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e44:	f104 0a04 	add.w	sl, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e48:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8008e4a:	6527      	str	r7, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e4c:	4650      	mov	r0, sl
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e4e:	bf28      	it	cs
 8008e50:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8008e52:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008e54:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e56:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e5a:	f7ff fb33 	bl	80084c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e5e:	f104 0018 	add.w	r0, r4, #24
 8008e62:	f7ff fb2f 	bl	80084c4 <vListInitialiseItem>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e66:	464a      	mov	r2, r9
 8008e68:	4641      	mov	r1, r8
 8008e6a:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e6c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e6e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e70:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8008e72:	6627      	str	r7, [r4, #96]	@ 0x60
		memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
 8008e74:	6567      	str	r7, [r4, #84]	@ 0x54
 8008e76:	65a7      	str	r7, [r4, #88]	@ 0x58
 8008e78:	65e7      	str	r7, [r4, #92]	@ 0x5c
		memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8008e7a:	6667      	str	r7, [r4, #100]	@ 0x64
		memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8008e7c:	f884 7068 	strb.w	r7, [r4, #104]	@ 0x68
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e80:	f000 feac 	bl	8009bdc <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 8008e84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e86:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008e88:	b103      	cbz	r3, 8008e8c <xTaskCreate+0xb0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e8a:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 8008e8c:	f000 fed2 	bl	8009c34 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8008e90:	4a3a      	ldr	r2, [pc, #232]	@ (8008f7c <xTaskCreate+0x1a0>)
		if( pxCurrentTCB == NULL )
 8008e92:	4d3b      	ldr	r5, [pc, #236]	@ (8008f80 <xTaskCreate+0x1a4>)
		uxCurrentNumberOfTasks++;
 8008e94:	6813      	ldr	r3, [r2, #0]
 8008e96:	3301      	adds	r3, #1
 8008e98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e9a:	682b      	ldr	r3, [r5, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d03b      	beq.n	8008f18 <xTaskCreate+0x13c>
			if( xSchedulerRunning == pdFALSE )
 8008ea0:	4e38      	ldr	r6, [pc, #224]	@ (8008f84 <xTaskCreate+0x1a8>)
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ea2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8008ea4:	6833      	ldr	r3, [r6, #0]
 8008ea6:	b923      	cbnz	r3, 8008eb2 <xTaskCreate+0xd6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ea8:	682b      	ldr	r3, [r5, #0]
 8008eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eac:	4283      	cmp	r3, r0
 8008eae:	d800      	bhi.n	8008eb2 <xTaskCreate+0xd6>
					pxCurrentTCB = pxNewTCB;
 8008eb0:	602c      	str	r4, [r5, #0]
 8008eb2:	f8df 80f0 	ldr.w	r8, [pc, #240]	@ 8008fa4 <xTaskCreate+0x1c8>
		uxTaskNumber++;
 8008eb6:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 8008fa8 <xTaskCreate+0x1cc>
		prvAddTaskToReadyList( pxNewTCB );
 8008eba:	2301      	movs	r3, #1
 8008ebc:	4f32      	ldr	r7, [pc, #200]	@ (8008f88 <xTaskCreate+0x1ac>)
 8008ebe:	4651      	mov	r1, sl
		uxTaskNumber++;
 8008ec0:	f8dc 2000 	ldr.w	r2, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 8008ec4:	4083      	lsls	r3, r0
 8008ec6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
		uxTaskNumber++;
 8008eca:	3201      	adds	r2, #1
		prvAddTaskToReadyList( pxNewTCB );
 8008ecc:	eb08 0080 	add.w	r0, r8, r0, lsl #2
		uxTaskNumber++;
 8008ed0:	f8cc 2000 	str.w	r2, [ip]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008ed4:	6462      	str	r2, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	603b      	str	r3, [r7, #0]
 8008edc:	f7ff faf6 	bl	80084cc <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008ee0:	f000 feca 	bl	8009c78 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008ee4:	6833      	ldr	r3, [r6, #0]
 8008ee6:	b173      	cbz	r3, 8008f06 <xTaskCreate+0x12a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ee8:	682a      	ldr	r2, [r5, #0]
 8008eea:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008eec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d209      	bcs.n	8008f06 <xTaskCreate+0x12a>
			taskYIELD_IF_USING_PREEMPTION();
 8008ef2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008ef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008efa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 8008f06:	2001      	movs	r0, #1
		return xReturn;
 8008f08:	e004      	b.n	8008f14 <xTaskCreate+0x138>
					vPortFree( pxStack );
 8008f0a:	4638      	mov	r0, r7
 8008f0c:	f001 f850 	bl	8009fb0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f10:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8008f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			pxCurrentTCB = pxNewTCB;
 8008f18:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f1a:	6813      	ldr	r3, [r2, #0]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d007      	beq.n	8008f30 <xTaskCreate+0x154>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f20:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8008f22:	f8df 8080 	ldr.w	r8, [pc, #128]	@ 8008fa4 <xTaskCreate+0x1c8>
 8008f26:	4e17      	ldr	r6, [pc, #92]	@ (8008f84 <xTaskCreate+0x1a8>)
 8008f28:	e7c5      	b.n	8008eb6 <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f2a:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8008f2e:	e787      	b.n	8008e40 <xTaskCreate+0x64>
 8008f30:	f8df 8070 	ldr.w	r8, [pc, #112]	@ 8008fa4 <xTaskCreate+0x1c8>
 8008f34:	4646      	mov	r6, r8
 8008f36:	f108 078c 	add.w	r7, r8, #140	@ 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f3a:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f3c:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f3e:	f7ff fab5 	bl	80084ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f42:	42be      	cmp	r6, r7
 8008f44:	d1f9      	bne.n	8008f3a <xTaskCreate+0x15e>
	vListInitialise( &xDelayedTaskList1 );
 8008f46:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8008fac <xTaskCreate+0x1d0>
	vListInitialise( &xDelayedTaskList2 );
 8008f4a:	4f10      	ldr	r7, [pc, #64]	@ (8008f8c <xTaskCreate+0x1b0>)
	vListInitialise( &xDelayedTaskList1 );
 8008f4c:	4648      	mov	r0, r9
 8008f4e:	4e0d      	ldr	r6, [pc, #52]	@ (8008f84 <xTaskCreate+0x1a8>)
 8008f50:	f7ff faac 	bl	80084ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f54:	4638      	mov	r0, r7
 8008f56:	f7ff faa9 	bl	80084ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f5a:	480d      	ldr	r0, [pc, #52]	@ (8008f90 <xTaskCreate+0x1b4>)
 8008f5c:	f7ff faa6 	bl	80084ac <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8008f60:	480c      	ldr	r0, [pc, #48]	@ (8008f94 <xTaskCreate+0x1b8>)
 8008f62:	f7ff faa3 	bl	80084ac <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8008f66:	480c      	ldr	r0, [pc, #48]	@ (8008f98 <xTaskCreate+0x1bc>)
 8008f68:	f7ff faa0 	bl	80084ac <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8008f9c <xTaskCreate+0x1c0>)
		prvAddTaskToReadyList( pxNewTCB );
 8008f6e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f70:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f74:	4b0a      	ldr	r3, [pc, #40]	@ (8008fa0 <xTaskCreate+0x1c4>)
 8008f76:	601f      	str	r7, [r3, #0]
}
 8008f78:	e79d      	b.n	8008eb6 <xTaskCreate+0xda>
 8008f7a:	bf00      	nop
 8008f7c:	20000e40 	.word	0x20000e40
 8008f80:	20000f40 	.word	0x20000f40
 8008f84:	20000e34 	.word	0x20000e34
 8008f88:	20000e38 	.word	0x20000e38
 8008f8c:	20000e8c 	.word	0x20000e8c
 8008f90:	20000e70 	.word	0x20000e70
 8008f94:	20000e5c 	.word	0x20000e5c
 8008f98:	20000e44 	.word	0x20000e44
 8008f9c:	20000e88 	.word	0x20000e88
 8008fa0:	20000e84 	.word	0x20000e84
 8008fa4:	20000eb4 	.word	0x20000eb4
 8008fa8:	20000e24 	.word	0x20000e24
 8008fac:	20000ea0 	.word	0x20000ea0

08008fb0 <vTaskStartScheduler>:
{
 8008fb0:	b510      	push	{r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8008fb2:	4818      	ldr	r0, [pc, #96]	@ (8009014 <vTaskStartScheduler+0x64>)
{
 8008fb4:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
 8008fb6:	2400      	movs	r4, #0
 8008fb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008fbc:	9001      	str	r0, [sp, #4]
 8008fbe:	4916      	ldr	r1, [pc, #88]	@ (8009018 <vTaskStartScheduler+0x68>)
 8008fc0:	4623      	mov	r3, r4
 8008fc2:	4816      	ldr	r0, [pc, #88]	@ (800901c <vTaskStartScheduler+0x6c>)
 8008fc4:	9400      	str	r4, [sp, #0]
 8008fc6:	f7ff ff09 	bl	8008ddc <xTaskCreate>
	if( xReturn == pdPASS )
 8008fca:	2801      	cmp	r0, #1
 8008fcc:	d003      	beq.n	8008fd6 <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008fce:	3001      	adds	r0, #1
 8008fd0:	d018      	beq.n	8009004 <vTaskStartScheduler+0x54>
}
 8008fd2:	b002      	add	sp, #8
 8008fd4:	bd10      	pop	{r4, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008fd6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8008fda:	b672      	cpsid	i
 8008fdc:	f383 8811 	msr	BASEPRI, r3
 8008fe0:	f3bf 8f6f 	isb	sy
 8008fe4:	f3bf 8f4f 	dsb	sy
 8008fe8:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8008fea:	4b0d      	ldr	r3, [pc, #52]	@ (8009020 <vTaskStartScheduler+0x70>)
 8008fec:	f04f 31ff 	mov.w	r1, #4294967295
		xSchedulerRunning = pdTRUE;
 8008ff0:	4a0c      	ldr	r2, [pc, #48]	@ (8009024 <vTaskStartScheduler+0x74>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ff2:	6019      	str	r1, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8009028 <vTaskStartScheduler+0x78>)
		xSchedulerRunning = pdTRUE;
 8008ff6:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ff8:	601c      	str	r4, [r3, #0]
}
 8008ffa:	b002      	add	sp, #8
 8008ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8009000:	f000 beac 	b.w	8009d5c <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009004:	f44f 6103 	mov.w	r1, #2096	@ 0x830
 8009008:	4808      	ldr	r0, [pc, #32]	@ (800902c <vTaskStartScheduler+0x7c>)
}
 800900a:	b002      	add	sp, #8
 800900c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009010:	f7f7 bf20 	b.w	8000e54 <vAssertCalled>
 8009014:	20000e1c 	.word	0x20000e1c
 8009018:	080105d8 	.word	0x080105d8
 800901c:	08008d71 	.word	0x08008d71
 8009020:	20000e20 	.word	0x20000e20
 8009024:	20000e34 	.word	0x20000e34
 8009028:	20000e3c 	.word	0x20000e3c
 800902c:	080105b4 	.word	0x080105b4

08009030 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009030:	4a02      	ldr	r2, [pc, #8]	@ (800903c <vTaskSuspendAll+0xc>)
 8009032:	6813      	ldr	r3, [r2, #0]
 8009034:	3301      	adds	r3, #1
 8009036:	6013      	str	r3, [r2, #0]
}
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	20000e18 	.word	0x20000e18

08009040 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009040:	4b01      	ldr	r3, [pc, #4]	@ (8009048 <xTaskGetTickCount+0x8>)
 8009042:	6818      	ldr	r0, [r3, #0]
}
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	20000e3c 	.word	0x20000e3c

0800904c <pcTaskGetName>:
{
 800904c:	b510      	push	{r4, lr}
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800904e:	4604      	mov	r4, r0
 8009050:	b110      	cbz	r0, 8009058 <pcTaskGetName+0xc>
}
 8009052:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8009056:	bd10      	pop	{r4, pc}
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8009058:	4b04      	ldr	r3, [pc, #16]	@ (800906c <pcTaskGetName+0x20>)
 800905a:	681c      	ldr	r4, [r3, #0]
	configASSERT( pxTCB );
 800905c:	2c00      	cmp	r4, #0
 800905e:	d1f8      	bne.n	8009052 <pcTaskGetName+0x6>
 8009060:	f640 1143 	movw	r1, #2371	@ 0x943
 8009064:	4802      	ldr	r0, [pc, #8]	@ (8009070 <pcTaskGetName+0x24>)
 8009066:	f7f7 fef5 	bl	8000e54 <vAssertCalled>
 800906a:	e7f2      	b.n	8009052 <pcTaskGetName+0x6>
 800906c:	20000f40 	.word	0x20000f40
 8009070:	080105b4 	.word	0x080105b4

08009074 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009074:	4b51      	ldr	r3, [pc, #324]	@ (80091bc <xTaskIncrementTick+0x148>)
 8009076:	681b      	ldr	r3, [r3, #0]
{
 8009078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800907c:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800907e:	2b00      	cmp	r3, #0
 8009080:	d149      	bne.n	8009116 <xTaskIncrementTick+0xa2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009082:	4b4f      	ldr	r3, [pc, #316]	@ (80091c0 <xTaskIncrementTick+0x14c>)
 8009084:	681e      	ldr	r6, [r3, #0]
 8009086:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8009088:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800908a:	2e00      	cmp	r6, #0
 800908c:	d04c      	beq.n	8009128 <xTaskIncrementTick+0xb4>
 800908e:	4b4d      	ldr	r3, [pc, #308]	@ (80091c4 <xTaskIncrementTick+0x150>)
 8009090:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009092:	9b01      	ldr	r3, [sp, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	429e      	cmp	r6, r3
 8009098:	d361      	bcc.n	800915e <xTaskIncrementTick+0xea>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800909a:	4d4b      	ldr	r5, [pc, #300]	@ (80091c8 <xTaskIncrementTick+0x154>)
 800909c:	682b      	ldr	r3, [r5, #0]
 800909e:	681c      	ldr	r4, [r3, #0]
 80090a0:	2c00      	cmp	r4, #0
 80090a2:	f000 8082 	beq.w	80091aa <xTaskIncrementTick+0x136>
BaseType_t xSwitchRequired = pdFALSE;
 80090a6:	2400      	movs	r4, #0
 80090a8:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 80091e4 <xTaskIncrementTick+0x170>
 80090ac:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 80091e8 <xTaskIncrementTick+0x174>
					prvAddTaskToReadyList( pxTCB );
 80090b0:	4f46      	ldr	r7, [pc, #280]	@ (80091cc <xTaskIncrementTick+0x158>)
 80090b2:	e022      	b.n	80090fa <xTaskIncrementTick+0x86>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090b4:	f7ff fa30 	bl	8008518 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090b8:	f8db 2028 	ldr.w	r2, [fp, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090bc:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090c0:	b10a      	cbz	r2, 80090c6 <xTaskIncrementTick+0x52>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090c2:	f7ff fa29 	bl	8008518 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090c6:	f8db 002c 	ldr.w	r0, [fp, #44]	@ 0x2c
 80090ca:	2201      	movs	r2, #1
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	4651      	mov	r1, sl
 80090d0:	4082      	lsls	r2, r0
 80090d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80090d6:	431a      	orrs	r2, r3
 80090d8:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80090dc:	603a      	str	r2, [r7, #0]
 80090de:	f7ff f9f5 	bl	80084cc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090e2:	f8d9 2000 	ldr.w	r2, [r9]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090e6:	6828      	ldr	r0, [r5, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090e8:	f8db 102c 	ldr.w	r1, [fp, #44]	@ 0x2c
 80090ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090ee:	6803      	ldr	r3, [r0, #0]
							xSwitchRequired = pdTRUE;
 80090f0:	4291      	cmp	r1, r2
 80090f2:	bf28      	it	cs
 80090f4:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d05b      	beq.n	80091b2 <xTaskIncrementTick+0x13e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090fa:	682b      	ldr	r3, [r5, #0]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009102:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009106:	f10b 0a04 	add.w	sl, fp, #4
					if( xConstTickCount < xItemValue )
 800910a:	4296      	cmp	r6, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800910c:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 800910e:	d2d1      	bcs.n	80090b4 <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
 8009110:	9b01      	ldr	r3, [sp, #4]
 8009112:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009114:	e028      	b.n	8009168 <xTaskIncrementTick+0xf4>
		++xPendedTicks;
 8009116:	4a2e      	ldr	r2, [pc, #184]	@ (80091d0 <xTaskIncrementTick+0x15c>)
BaseType_t xSwitchRequired = pdFALSE;
 8009118:	2400      	movs	r4, #0
		++xPendedTicks;
 800911a:	6813      	ldr	r3, [r2, #0]
}
 800911c:	4620      	mov	r0, r4
		++xPendedTicks;
 800911e:	3301      	adds	r3, #1
 8009120:	6013      	str	r3, [r2, #0]
}
 8009122:	b003      	add	sp, #12
 8009124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8009128:	4d27      	ldr	r5, [pc, #156]	@ (80091c8 <xTaskIncrementTick+0x154>)
 800912a:	682b      	ldr	r3, [r5, #0]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d135      	bne.n	800919e <xTaskIncrementTick+0x12a>
 8009132:	4b28      	ldr	r3, [pc, #160]	@ (80091d4 <xTaskIncrementTick+0x160>)
 8009134:	6829      	ldr	r1, [r5, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	602a      	str	r2, [r5, #0]
 800913a:	4a27      	ldr	r2, [pc, #156]	@ (80091d8 <xTaskIncrementTick+0x164>)
 800913c:	6019      	str	r1, [r3, #0]
 800913e:	6813      	ldr	r3, [r2, #0]
 8009140:	3301      	adds	r3, #1
 8009142:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009144:	682b      	ldr	r3, [r5, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	bb13      	cbnz	r3, 8009190 <xTaskIncrementTick+0x11c>
		xNextTaskUnblockTime = portMAX_DELAY;
 800914a:	4b1e      	ldr	r3, [pc, #120]	@ (80091c4 <xTaskIncrementTick+0x150>)
 800914c:	461a      	mov	r2, r3
 800914e:	9301      	str	r3, [sp, #4]
 8009150:	f04f 33ff 	mov.w	r3, #4294967295
 8009154:	6013      	str	r3, [r2, #0]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009156:	9b01      	ldr	r3, [sp, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	429e      	cmp	r6, r3
 800915c:	d29d      	bcs.n	800909a <xTaskIncrementTick+0x26>
BaseType_t xSwitchRequired = pdFALSE;
 800915e:	2400      	movs	r4, #0
 8009160:	f8df 8080 	ldr.w	r8, [pc, #128]	@ 80091e4 <xTaskIncrementTick+0x170>
 8009164:	f8df 9080 	ldr.w	r9, [pc, #128]	@ 80091e8 <xTaskIncrementTick+0x174>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009168:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 800916c:	491b      	ldr	r1, [pc, #108]	@ (80091dc <xTaskIncrementTick+0x168>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800916e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009170:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 800917a:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 800917c:	2a02      	cmp	r2, #2
 800917e:	bf28      	it	cs
 8009180:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 8009182:	2b00      	cmp	r3, #0
 8009184:	bf18      	it	ne
 8009186:	2401      	movne	r4, #1
}
 8009188:	4620      	mov	r0, r4
 800918a:	b003      	add	sp, #12
 800918c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009190:	682b      	ldr	r3, [r5, #0]
 8009192:	4a0c      	ldr	r2, [pc, #48]	@ (80091c4 <xTaskIncrementTick+0x150>)
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	9201      	str	r2, [sp, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6013      	str	r3, [r2, #0]
}
 800919c:	e779      	b.n	8009092 <xTaskIncrementTick+0x1e>
			taskSWITCH_DELAYED_LISTS();
 800919e:	f640 21af 	movw	r1, #2735	@ 0xaaf
 80091a2:	480f      	ldr	r0, [pc, #60]	@ (80091e0 <xTaskIncrementTick+0x16c>)
 80091a4:	f7f7 fe56 	bl	8000e54 <vAssertCalled>
 80091a8:	e7c3      	b.n	8009132 <xTaskIncrementTick+0xbe>
 80091aa:	f8df 8038 	ldr.w	r8, [pc, #56]	@ 80091e4 <xTaskIncrementTick+0x170>
 80091ae:	f8df 9038 	ldr.w	r9, [pc, #56]	@ 80091e8 <xTaskIncrementTick+0x174>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091b2:	f04f 33ff 	mov.w	r3, #4294967295
 80091b6:	9a01      	ldr	r2, [sp, #4]
 80091b8:	6013      	str	r3, [r2, #0]
					break;
 80091ba:	e7d5      	b.n	8009168 <xTaskIncrementTick+0xf4>
 80091bc:	20000e18 	.word	0x20000e18
 80091c0:	20000e3c 	.word	0x20000e3c
 80091c4:	20000e20 	.word	0x20000e20
 80091c8:	20000e88 	.word	0x20000e88
 80091cc:	20000e38 	.word	0x20000e38
 80091d0:	20000e30 	.word	0x20000e30
 80091d4:	20000e84 	.word	0x20000e84
 80091d8:	20000e28 	.word	0x20000e28
 80091dc:	20000e2c 	.word	0x20000e2c
 80091e0:	080105b4 	.word	0x080105b4
 80091e4:	20000eb4 	.word	0x20000eb4
 80091e8:	20000f40 	.word	0x20000f40

080091ec <xTaskResumeAll>:
{
 80091ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 80091f0:	4c3e      	ldr	r4, [pc, #248]	@ (80092ec <xTaskResumeAll+0x100>)
 80091f2:	6823      	ldr	r3, [r4, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d06a      	beq.n	80092ce <xTaskResumeAll+0xe2>
	taskENTER_CRITICAL();
 80091f8:	f000 fd1c 	bl	8009c34 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	3b01      	subs	r3, #1
 8009200:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009202:	6823      	ldr	r3, [r4, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d15c      	bne.n	80092c2 <xTaskResumeAll+0xd6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009208:	4b39      	ldr	r3, [pc, #228]	@ (80092f0 <xTaskResumeAll+0x104>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d058      	beq.n	80092c2 <xTaskResumeAll+0xd6>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009210:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800930c <xTaskResumeAll+0x120>
 8009214:	f8db 3000 	ldr.w	r3, [fp]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d063      	beq.n	80092e4 <xTaskResumeAll+0xf8>
 800921c:	4d35      	ldr	r5, [pc, #212]	@ (80092f4 <xTaskResumeAll+0x108>)
					prvAddTaskToReadyList( pxTCB );
 800921e:	2601      	movs	r6, #1
 8009220:	f8df 80ec 	ldr.w	r8, [pc, #236]	@ 8009310 <xTaskResumeAll+0x124>
 8009224:	4f34      	ldr	r7, [pc, #208]	@ (80092f8 <xTaskResumeAll+0x10c>)
 8009226:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8009314 <xTaskResumeAll+0x128>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800922a:	f8db 300c 	ldr.w	r3, [fp, #12]
 800922e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009230:	f104 0a04 	add.w	sl, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009234:	f104 0018 	add.w	r0, r4, #24
 8009238:	f7ff f96e 	bl	8008518 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800923c:	4650      	mov	r0, sl
 800923e:	f7ff f96b 	bl	8008518 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009242:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8009244:	682a      	ldr	r2, [r5, #0]
 8009246:	4651      	mov	r1, sl
 8009248:	fa06 f300 	lsl.w	r3, r6, r0
 800924c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009250:	4313      	orrs	r3, r2
 8009252:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8009256:	602b      	str	r3, [r5, #0]
 8009258:	f7ff f938 	bl	80084cc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009262:	429a      	cmp	r2, r3
 8009264:	d301      	bcc.n	800926a <xTaskResumeAll+0x7e>
						xYieldPending = pdTRUE;
 8009266:	f8c9 6000 	str.w	r6, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800926a:	f8db 3000 	ldr.w	r3, [fp]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1db      	bne.n	800922a <xTaskResumeAll+0x3e>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009272:	4b22      	ldr	r3, [pc, #136]	@ (80092fc <xTaskResumeAll+0x110>)
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	6812      	ldr	r2, [r2, #0]
 8009278:	b37a      	cbz	r2, 80092da <xTaskResumeAll+0xee>
		xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	4b20      	ldr	r3, [pc, #128]	@ (8009300 <xTaskResumeAll+0x114>)
 800927e:	68d2      	ldr	r2, [r2, #12]
 8009280:	6812      	ldr	r2, [r2, #0]
 8009282:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009284:	4e1f      	ldr	r6, [pc, #124]	@ (8009304 <xTaskResumeAll+0x118>)
 8009286:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8009288:	b144      	cbz	r4, 800929c <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800928a:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 800928c:	f7ff fef2 	bl	8009074 <xTaskIncrementTick>
 8009290:	b108      	cbz	r0, 8009296 <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 8009292:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009296:	3c01      	subs	r4, #1
 8009298:	d1f8      	bne.n	800928c <xTaskResumeAll+0xa0>
						xPendedTicks = 0;
 800929a:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800929c:	f8d9 3000 	ldr.w	r3, [r9]
 80092a0:	b17b      	cbz	r3, 80092c2 <xTaskResumeAll+0xd6>
					taskYIELD_IF_USING_PREEMPTION();
 80092a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80092a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80092ae:	f3bf 8f4f 	dsb	sy
 80092b2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80092b6:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80092b8:	f000 fcde 	bl	8009c78 <vPortExitCritical>
}
 80092bc:	4620      	mov	r0, r4
 80092be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 80092c2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80092c4:	f000 fcd8 	bl	8009c78 <vPortExitCritical>
}
 80092c8:	4620      	mov	r0, r4
 80092ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	configASSERT( uxSchedulerSuspended );
 80092ce:	f640 019f 	movw	r1, #2207	@ 0x89f
 80092d2:	480d      	ldr	r0, [pc, #52]	@ (8009308 <xTaskResumeAll+0x11c>)
 80092d4:	f7f7 fdbe 	bl	8000e54 <vAssertCalled>
 80092d8:	e78e      	b.n	80091f8 <xTaskResumeAll+0xc>
		xNextTaskUnblockTime = portMAX_DELAY;
 80092da:	4b09      	ldr	r3, [pc, #36]	@ (8009300 <xTaskResumeAll+0x114>)
 80092dc:	f04f 32ff 	mov.w	r2, #4294967295
 80092e0:	601a      	str	r2, [r3, #0]
 80092e2:	e7cf      	b.n	8009284 <xTaskResumeAll+0x98>
 80092e4:	f8df 902c 	ldr.w	r9, [pc, #44]	@ 8009314 <xTaskResumeAll+0x128>
 80092e8:	e7cc      	b.n	8009284 <xTaskResumeAll+0x98>
 80092ea:	bf00      	nop
 80092ec:	20000e18 	.word	0x20000e18
 80092f0:	20000e40 	.word	0x20000e40
 80092f4:	20000e38 	.word	0x20000e38
 80092f8:	20000f40 	.word	0x20000f40
 80092fc:	20000e88 	.word	0x20000e88
 8009300:	20000e20 	.word	0x20000e20
 8009304:	20000e30 	.word	0x20000e30
 8009308:	080105b4 	.word	0x080105b4
 800930c:	20000e70 	.word	0x20000e70
 8009310:	20000eb4 	.word	0x20000eb4
 8009314:	20000e2c 	.word	0x20000e2c

08009318 <vTaskDelay>:
	{
 8009318:	b538      	push	{r3, r4, r5, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800931a:	b168      	cbz	r0, 8009338 <vTaskDelay+0x20>
			configASSERT( uxSchedulerSuspended == 0 );
 800931c:	4d0f      	ldr	r5, [pc, #60]	@ (800935c <vTaskDelay+0x44>)
 800931e:	4604      	mov	r4, r0
 8009320:	682b      	ldr	r3, [r5, #0]
 8009322:	b9a3      	cbnz	r3, 800934e <vTaskDelay+0x36>
	++uxSchedulerSuspended;
 8009324:	682b      	ldr	r3, [r5, #0]
 8009326:	3301      	adds	r3, #1
 8009328:	602b      	str	r3, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800932a:	2100      	movs	r1, #0
 800932c:	4620      	mov	r0, r4
 800932e:	f7ff fcd9 	bl	8008ce4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8009332:	f7ff ff5b 	bl	80091ec <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009336:	b948      	cbnz	r0, 800934c <vTaskDelay+0x34>
			portYIELD_WITHIN_API();
 8009338:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800933c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009340:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	f3bf 8f6f 	isb	sy
	}
 800934c:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800934e:	f240 5141 	movw	r1, #1345	@ 0x541
 8009352:	4803      	ldr	r0, [pc, #12]	@ (8009360 <vTaskDelay+0x48>)
 8009354:	f7f7 fd7e 	bl	8000e54 <vAssertCalled>
 8009358:	e7e4      	b.n	8009324 <vTaskDelay+0xc>
 800935a:	bf00      	nop
 800935c:	20000e18 	.word	0x20000e18
 8009360:	080105b4 	.word	0x080105b4

08009364 <vTaskSwitchContext>:
{
 8009364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009366:	4b20      	ldr	r3, [pc, #128]	@ (80093e8 <vTaskSwitchContext+0x84>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	b11b      	cbz	r3, 8009374 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800936c:	4b1f      	ldr	r3, [pc, #124]	@ (80093ec <vTaskSwitchContext+0x88>)
 800936e:	2201      	movs	r2, #1
 8009370:	601a      	str	r2, [r3, #0]
}
 8009372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xYieldPending = pdFALSE;
 8009374:	4a1d      	ldr	r2, [pc, #116]	@ (80093ec <vTaskSwitchContext+0x88>)
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009376:	4f1e      	ldr	r7, [pc, #120]	@ (80093f0 <vTaskSwitchContext+0x8c>)
		xYieldPending = pdFALSE;
 8009378:	6013      	str	r3, [r2, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800937a:	f7f7 fd69 	bl	8000e50 <ulGetRunTimeCounterValue>
 800937e:	4b1d      	ldr	r3, [pc, #116]	@ (80093f4 <vTaskSwitchContext+0x90>)
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009380:	4a1d      	ldr	r2, [pc, #116]	@ (80093f8 <vTaskSwitchContext+0x94>)
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009382:	6018      	str	r0, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009384:	6814      	ldr	r4, [r2, #0]
 8009386:	6819      	ldr	r1, [r3, #0]
 8009388:	42a1      	cmp	r1, r4
 800938a:	d81c      	bhi.n	80093c6 <vTaskSwitchContext+0x62>
			ulTaskSwitchedInTime = ulTotalRunTime;
 800938c:	6819      	ldr	r1, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800938e:	4b1b      	ldr	r3, [pc, #108]	@ (80093fc <vTaskSwitchContext+0x98>)
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009390:	6011      	str	r1, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009392:	681c      	ldr	r4, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009394:	fab4 f484 	clz	r4, r4
 8009398:	b2e4      	uxtb	r4, r4
 800939a:	4d19      	ldr	r5, [pc, #100]	@ (8009400 <vTaskSwitchContext+0x9c>)
 800939c:	f1c4 041f 	rsb	r4, r4, #31
 80093a0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80093a4:	00a6      	lsls	r6, r4, #2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	58eb      	ldr	r3, [r5, r3]
 80093aa:	b19b      	cbz	r3, 80093d4 <vTaskSwitchContext+0x70>
 80093ac:	1933      	adds	r3, r6, r4
 80093ae:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80093b2:	6853      	ldr	r3, [r2, #4]
 80093b4:	4615      	mov	r5, r2
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	3508      	adds	r5, #8
 80093ba:	42ab      	cmp	r3, r5
 80093bc:	6053      	str	r3, [r2, #4]
 80093be:	d00f      	beq.n	80093e0 <vTaskSwitchContext+0x7c>
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	603b      	str	r3, [r7, #0]
}
 80093c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80093c6:	681d      	ldr	r5, [r3, #0]
 80093c8:	6838      	ldr	r0, [r7, #0]
 80093ca:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 80093cc:	1b09      	subs	r1, r1, r4
 80093ce:	4429      	add	r1, r5
 80093d0:	6601      	str	r1, [r0, #96]	@ 0x60
 80093d2:	e7db      	b.n	800938c <vTaskSwitchContext+0x28>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093d4:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 80093d8:	480a      	ldr	r0, [pc, #40]	@ (8009404 <vTaskSwitchContext+0xa0>)
 80093da:	f7f7 fd3b 	bl	8000e54 <vAssertCalled>
 80093de:	e7e5      	b.n	80093ac <vTaskSwitchContext+0x48>
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	6053      	str	r3, [r2, #4]
 80093e4:	e7ec      	b.n	80093c0 <vTaskSwitchContext+0x5c>
 80093e6:	bf00      	nop
 80093e8:	20000e18 	.word	0x20000e18
 80093ec:	20000e2c 	.word	0x20000e2c
 80093f0:	20000f40 	.word	0x20000f40
 80093f4:	20000e10 	.word	0x20000e10
 80093f8:	20000e14 	.word	0x20000e14
 80093fc:	20000e38 	.word	0x20000e38
 8009400:	20000eb4 	.word	0x20000eb4
 8009404:	080105b4 	.word	0x080105b4

08009408 <vTaskPlaceOnEventList>:
{
 8009408:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
 800940a:	4604      	mov	r4, r0
{
 800940c:	460d      	mov	r5, r1
	configASSERT( pxEventList );
 800940e:	b158      	cbz	r0, 8009428 <vTaskPlaceOnEventList+0x20>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009410:	4b08      	ldr	r3, [pc, #32]	@ (8009434 <vTaskPlaceOnEventList+0x2c>)
 8009412:	4620      	mov	r0, r4
 8009414:	6819      	ldr	r1, [r3, #0]
 8009416:	3118      	adds	r1, #24
 8009418:	f7ff f866 	bl	80084e8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800941c:	4628      	mov	r0, r5
 800941e:	2101      	movs	r1, #1
}
 8009420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009424:	f7ff bc5e 	b.w	8008ce4 <prvAddCurrentTaskToDelayedList>
	configASSERT( pxEventList );
 8009428:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 800942c:	4802      	ldr	r0, [pc, #8]	@ (8009438 <vTaskPlaceOnEventList+0x30>)
 800942e:	f7f7 fd11 	bl	8000e54 <vAssertCalled>
 8009432:	e7ed      	b.n	8009410 <vTaskPlaceOnEventList+0x8>
 8009434:	20000f40 	.word	0x20000f40
 8009438:	080105b4 	.word	0x080105b4

0800943c <vTaskPlaceOnUnorderedEventList>:
{
 800943c:	b570      	push	{r4, r5, r6, lr}
 800943e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8009440:	4605      	mov	r5, r0
{
 8009442:	4616      	mov	r6, r2
	configASSERT( pxEventList );
 8009444:	b1c0      	cbz	r0, 8009478 <vTaskPlaceOnUnorderedEventList+0x3c>
	configASSERT( uxSchedulerSuspended != 0 );
 8009446:	4b0f      	ldr	r3, [pc, #60]	@ (8009484 <vTaskPlaceOnUnorderedEventList+0x48>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	b17b      	cbz	r3, 800946c <vTaskPlaceOnUnorderedEventList+0x30>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800944c:	4b0e      	ldr	r3, [pc, #56]	@ (8009488 <vTaskPlaceOnUnorderedEventList+0x4c>)
 800944e:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009452:	4628      	mov	r0, r5
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009454:	681a      	ldr	r2, [r3, #0]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009456:	6819      	ldr	r1, [r3, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009458:	6194      	str	r4, [r2, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800945a:	3118      	adds	r1, #24
 800945c:	f7ff f836 	bl	80084cc <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009460:	4630      	mov	r0, r6
 8009462:	2101      	movs	r1, #1
}
 8009464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009468:	f7ff bc3c 	b.w	8008ce4 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended != 0 );
 800946c:	f640 4115 	movw	r1, #3093	@ 0xc15
 8009470:	4806      	ldr	r0, [pc, #24]	@ (800948c <vTaskPlaceOnUnorderedEventList+0x50>)
 8009472:	f7f7 fcef 	bl	8000e54 <vAssertCalled>
 8009476:	e7e9      	b.n	800944c <vTaskPlaceOnUnorderedEventList+0x10>
	configASSERT( pxEventList );
 8009478:	f640 4111 	movw	r1, #3089	@ 0xc11
 800947c:	4803      	ldr	r0, [pc, #12]	@ (800948c <vTaskPlaceOnUnorderedEventList+0x50>)
 800947e:	f7f7 fce9 	bl	8000e54 <vAssertCalled>
 8009482:	e7e0      	b.n	8009446 <vTaskPlaceOnUnorderedEventList+0xa>
 8009484:	20000e18 	.word	0x20000e18
 8009488:	20000f40 	.word	0x20000f40
 800948c:	080105b4 	.word	0x080105b4

08009490 <xTaskRemoveFromEventList>:
{
 8009490:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009492:	68c3      	ldr	r3, [r0, #12]
 8009494:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009496:	b364      	cbz	r4, 80094f2 <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009498:	f104 0518 	add.w	r5, r4, #24
 800949c:	4628      	mov	r0, r5
 800949e:	f7ff f83b 	bl	8008518 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094a2:	4b17      	ldr	r3, [pc, #92]	@ (8009500 <xTaskRemoveFromEventList+0x70>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	b9fb      	cbnz	r3, 80094e8 <xTaskRemoveFromEventList+0x58>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094a8:	1d25      	adds	r5, r4, #4
 80094aa:	4628      	mov	r0, r5
 80094ac:	f7ff f834 	bl	8008518 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094b0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80094b2:	4a14      	ldr	r2, [pc, #80]	@ (8009504 <xTaskRemoveFromEventList+0x74>)
 80094b4:	2301      	movs	r3, #1
 80094b6:	4629      	mov	r1, r5
 80094b8:	4083      	lsls	r3, r0
 80094ba:	6815      	ldr	r5, [r2, #0]
 80094bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80094c0:	432b      	orrs	r3, r5
 80094c2:	6013      	str	r3, [r2, #0]
 80094c4:	4b10      	ldr	r3, [pc, #64]	@ (8009508 <xTaskRemoveFromEventList+0x78>)
 80094c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80094ca:	f7fe ffff 	bl	80084cc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094ce:	4b0f      	ldr	r3, [pc, #60]	@ (800950c <xTaskRemoveFromEventList+0x7c>)
 80094d0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d904      	bls.n	80094e4 <xTaskRemoveFromEventList+0x54>
		xYieldPending = pdTRUE;
 80094da:	2301      	movs	r3, #1
 80094dc:	4a0c      	ldr	r2, [pc, #48]	@ (8009510 <xTaskRemoveFromEventList+0x80>)
		xReturn = pdTRUE;
 80094de:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 80094e0:	6013      	str	r3, [r2, #0]
}
 80094e2:	bd38      	pop	{r3, r4, r5, pc}
		xReturn = pdFALSE;
 80094e4:	2000      	movs	r0, #0
}
 80094e6:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80094e8:	4629      	mov	r1, r5
 80094ea:	480a      	ldr	r0, [pc, #40]	@ (8009514 <xTaskRemoveFromEventList+0x84>)
 80094ec:	f7fe ffee 	bl	80084cc <vListInsertEnd>
 80094f0:	e7ed      	b.n	80094ce <xTaskRemoveFromEventList+0x3e>
	configASSERT( pxUnblockedTCB );
 80094f2:	f640 415b 	movw	r1, #3163	@ 0xc5b
 80094f6:	4808      	ldr	r0, [pc, #32]	@ (8009518 <xTaskRemoveFromEventList+0x88>)
 80094f8:	f7f7 fcac 	bl	8000e54 <vAssertCalled>
 80094fc:	e7cc      	b.n	8009498 <xTaskRemoveFromEventList+0x8>
 80094fe:	bf00      	nop
 8009500:	20000e18 	.word	0x20000e18
 8009504:	20000e38 	.word	0x20000e38
 8009508:	20000eb4 	.word	0x20000eb4
 800950c:	20000f40 	.word	0x20000f40
 8009510:	20000e2c 	.word	0x20000e2c
 8009514:	20000e70 	.word	0x20000e70
 8009518:	080105b4 	.word	0x080105b4

0800951c <vTaskRemoveFromUnorderedEventList>:
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800951c:	4b1d      	ldr	r3, [pc, #116]	@ (8009594 <vTaskRemoveFromUnorderedEventList+0x78>)
 800951e:	681b      	ldr	r3, [r3, #0]
{
 8009520:	b570      	push	{r4, r5, r6, lr}
 8009522:	4604      	mov	r4, r0
 8009524:	460d      	mov	r5, r1
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009526:	b323      	cbz	r3, 8009572 <vTaskRemoveFromUnorderedEventList+0x56>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009528:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800952c:	68e6      	ldr	r6, [r4, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800952e:	6025      	str	r5, [r4, #0]
	configASSERT( pxUnblockedTCB );
 8009530:	b356      	cbz	r6, 8009588 <vTaskRemoveFromUnorderedEventList+0x6c>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009532:	1d35      	adds	r5, r6, #4
	( void ) uxListRemove( pxEventListItem );
 8009534:	4620      	mov	r0, r4
 8009536:	f7fe ffef 	bl	8008518 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800953a:	2401      	movs	r4, #1
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800953c:	4628      	mov	r0, r5
 800953e:	f7fe ffeb 	bl	8008518 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009542:	4a15      	ldr	r2, [pc, #84]	@ (8009598 <vTaskRemoveFromUnorderedEventList+0x7c>)
 8009544:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8009546:	4629      	mov	r1, r5
 8009548:	6815      	ldr	r5, [r2, #0]
 800954a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800954e:	fa04 f303 	lsl.w	r3, r4, r3
 8009552:	432b      	orrs	r3, r5
 8009554:	6013      	str	r3, [r2, #0]
 8009556:	4b11      	ldr	r3, [pc, #68]	@ (800959c <vTaskRemoveFromUnorderedEventList+0x80>)
 8009558:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800955c:	f7fe ffb6 	bl	80084cc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009560:	4b0f      	ldr	r3, [pc, #60]	@ (80095a0 <vTaskRemoveFromUnorderedEventList+0x84>)
 8009562:	6af2      	ldr	r2, [r6, #44]	@ 0x2c
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009568:	429a      	cmp	r2, r3
 800956a:	d901      	bls.n	8009570 <vTaskRemoveFromUnorderedEventList+0x54>
		xYieldPending = pdTRUE;
 800956c:	4b0d      	ldr	r3, [pc, #52]	@ (80095a4 <vTaskRemoveFromUnorderedEventList+0x88>)
 800956e:	601c      	str	r4, [r3, #0]
}
 8009570:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009572:	f640 4192 	movw	r1, #3218	@ 0xc92
 8009576:	480c      	ldr	r0, [pc, #48]	@ (80095a8 <vTaskRemoveFromUnorderedEventList+0x8c>)
 8009578:	f7f7 fc6c 	bl	8000e54 <vAssertCalled>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800957c:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009580:	68e6      	ldr	r6, [r4, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009582:	6025      	str	r5, [r4, #0]
	configASSERT( pxUnblockedTCB );
 8009584:	2e00      	cmp	r6, #0
 8009586:	d1d4      	bne.n	8009532 <vTaskRemoveFromUnorderedEventList+0x16>
 8009588:	f640 419a 	movw	r1, #3226	@ 0xc9a
 800958c:	4806      	ldr	r0, [pc, #24]	@ (80095a8 <vTaskRemoveFromUnorderedEventList+0x8c>)
 800958e:	f7f7 fc61 	bl	8000e54 <vAssertCalled>
 8009592:	e7ce      	b.n	8009532 <vTaskRemoveFromUnorderedEventList+0x16>
 8009594:	20000e18 	.word	0x20000e18
 8009598:	20000e38 	.word	0x20000e38
 800959c:	20000eb4 	.word	0x20000eb4
 80095a0:	20000f40 	.word	0x20000f40
 80095a4:	20000e2c 	.word	0x20000e2c
 80095a8:	080105b4 	.word	0x080105b4

080095ac <vTaskSetTimeOutState>:
{
 80095ac:	b510      	push	{r4, lr}
	configASSERT( pxTimeOut );
 80095ae:	4604      	mov	r4, r0
 80095b0:	b158      	cbz	r0, 80095ca <vTaskSetTimeOutState+0x1e>
	taskENTER_CRITICAL();
 80095b2:	f000 fb3f 	bl	8009c34 <vPortEnterCritical>
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80095b6:	4a08      	ldr	r2, [pc, #32]	@ (80095d8 <vTaskSetTimeOutState+0x2c>)
		pxTimeOut->xTimeOnEntering = xTickCount;
 80095b8:	4b08      	ldr	r3, [pc, #32]	@ (80095dc <vTaskSetTimeOutState+0x30>)
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80095ba:	6812      	ldr	r2, [r2, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	e9c4 2300 	strd	r2, r3, [r4]
}
 80095c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	taskEXIT_CRITICAL();
 80095c6:	f000 bb57 	b.w	8009c78 <vPortExitCritical>
	configASSERT( pxTimeOut );
 80095ca:	f640 41be 	movw	r1, #3262	@ 0xcbe
 80095ce:	4804      	ldr	r0, [pc, #16]	@ (80095e0 <vTaskSetTimeOutState+0x34>)
 80095d0:	f7f7 fc40 	bl	8000e54 <vAssertCalled>
 80095d4:	e7ed      	b.n	80095b2 <vTaskSetTimeOutState+0x6>
 80095d6:	bf00      	nop
 80095d8:	20000e28 	.word	0x20000e28
 80095dc:	20000e3c 	.word	0x20000e3c
 80095e0:	080105b4 	.word	0x080105b4

080095e4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80095e4:	4a03      	ldr	r2, [pc, #12]	@ (80095f4 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 80095e6:	4b04      	ldr	r3, [pc, #16]	@ (80095f8 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80095e8:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	e9c0 2300 	strd	r2, r3, [r0]
}
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	20000e28 	.word	0x20000e28
 80095f8:	20000e3c 	.word	0x20000e3c

080095fc <xTaskCheckForTimeOut>:
{
 80095fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80095fe:	4604      	mov	r4, r0
{
 8009600:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8009602:	b348      	cbz	r0, 8009658 <xTaskCheckForTimeOut+0x5c>
	configASSERT( pxTicksToWait );
 8009604:	b37d      	cbz	r5, 8009666 <xTaskCheckForTimeOut+0x6a>
	taskENTER_CRITICAL();
 8009606:	f000 fb15 	bl	8009c34 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 800960a:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800960c:	4a19      	ldr	r2, [pc, #100]	@ (8009674 <xTaskCheckForTimeOut+0x78>)
			if( *pxTicksToWait == portMAX_DELAY )
 800960e:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8009610:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8009612:	d019      	beq.n	8009648 <xTaskCheckForTimeOut+0x4c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009614:	f8df c064 	ldr.w	ip, [pc, #100]	@ 800967c <xTaskCheckForTimeOut+0x80>
 8009618:	6826      	ldr	r6, [r4, #0]
 800961a:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800961e:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009620:	42be      	cmp	r6, r7
 8009622:	d006      	beq.n	8009632 <xTaskCheckForTimeOut+0x36>
 8009624:	4288      	cmp	r0, r1
 8009626:	d804      	bhi.n	8009632 <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 8009628:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800962a:	f000 fb25 	bl	8009c78 <vPortExitCritical>
}
 800962e:	4620      	mov	r0, r4
 8009630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009632:	1a0f      	subs	r7, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009634:	42bb      	cmp	r3, r7
 8009636:	d90c      	bls.n	8009652 <xTaskCheckForTimeOut+0x56>
			*pxTicksToWait -= xElapsedTime;
 8009638:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800963a:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800963e:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8009640:	4403      	add	r3, r0
 8009642:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009644:	e9c4 1200 	strd	r1, r2, [r4]
				xReturn = pdFALSE;
 8009648:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800964a:	f000 fb15 	bl	8009c78 <vPortExitCritical>
}
 800964e:	4620      	mov	r0, r4
 8009650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 8009652:	2300      	movs	r3, #0
 8009654:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8009656:	e7e7      	b.n	8009628 <xTaskCheckForTimeOut+0x2c>
	configASSERT( pxTimeOut );
 8009658:	f640 41d4 	movw	r1, #3284	@ 0xcd4
 800965c:	4806      	ldr	r0, [pc, #24]	@ (8009678 <xTaskCheckForTimeOut+0x7c>)
 800965e:	f7f7 fbf9 	bl	8000e54 <vAssertCalled>
	configASSERT( pxTicksToWait );
 8009662:	2d00      	cmp	r5, #0
 8009664:	d1cf      	bne.n	8009606 <xTaskCheckForTimeOut+0xa>
 8009666:	f640 41d5 	movw	r1, #3285	@ 0xcd5
 800966a:	4803      	ldr	r0, [pc, #12]	@ (8009678 <xTaskCheckForTimeOut+0x7c>)
 800966c:	f7f7 fbf2 	bl	8000e54 <vAssertCalled>
 8009670:	e7c9      	b.n	8009606 <xTaskCheckForTimeOut+0xa>
 8009672:	bf00      	nop
 8009674:	20000e3c 	.word	0x20000e3c
 8009678:	080105b4 	.word	0x080105b4
 800967c:	20000e28 	.word	0x20000e28

08009680 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009680:	4b01      	ldr	r3, [pc, #4]	@ (8009688 <vTaskMissedYield+0x8>)
 8009682:	2201      	movs	r2, #1
 8009684:	601a      	str	r2, [r3, #0]
}
 8009686:	4770      	bx	lr
 8009688:	20000e2c 	.word	0x20000e2c

0800968c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800968c:	4b01      	ldr	r3, [pc, #4]	@ (8009694 <xTaskGetCurrentTaskHandle+0x8>)
 800968e:	6818      	ldr	r0, [r3, #0]
	}
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	20000f40 	.word	0x20000f40

08009698 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009698:	4b05      	ldr	r3, [pc, #20]	@ (80096b0 <xTaskGetSchedulerState+0x18>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	b133      	cbz	r3, 80096ac <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800969e:	4b05      	ldr	r3, [pc, #20]	@ (80096b4 <xTaskGetSchedulerState+0x1c>)
 80096a0:	6818      	ldr	r0, [r3, #0]
 80096a2:	fab0 f080 	clz	r0, r0
 80096a6:	0940      	lsrs	r0, r0, #5
 80096a8:	0040      	lsls	r0, r0, #1
 80096aa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80096ac:	2001      	movs	r0, #1
	}
 80096ae:	4770      	bx	lr
 80096b0:	20000e34 	.word	0x20000e34
 80096b4:	20000e18 	.word	0x20000e18

080096b8 <xTaskPriorityInherit>:
	{
 80096b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80096ba:	4604      	mov	r4, r0
 80096bc:	b1c8      	cbz	r0, 80096f2 <xTaskPriorityInherit+0x3a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80096be:	4d20      	ldr	r5, [pc, #128]	@ (8009740 <xTaskPriorityInherit+0x88>)
 80096c0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80096c2:	682a      	ldr	r2, [r5, #0]
 80096c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d214      	bcs.n	80096f4 <xTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096ca:	6982      	ldr	r2, [r0, #24]
 80096cc:	2a00      	cmp	r2, #0
 80096ce:	db04      	blt.n	80096da <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096d0:	682a      	ldr	r2, [r5, #0]
 80096d2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80096d4:	f1c2 0207 	rsb	r2, r2, #7
 80096d8:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80096da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80096de:	4e19      	ldr	r6, [pc, #100]	@ (8009744 <xTaskPriorityInherit+0x8c>)
 80096e0:	6962      	ldr	r2, [r4, #20]
 80096e2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d00c      	beq.n	8009704 <xTaskPriorityInherit+0x4c>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80096ea:	682b      	ldr	r3, [r5, #0]
 80096ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 80096f0:	2001      	movs	r0, #1
	}
 80096f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80096f4:	682b      	ldr	r3, [r5, #0]
 80096f6:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 80096f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096fa:	4298      	cmp	r0, r3
 80096fc:	bf2c      	ite	cs
 80096fe:	2000      	movcs	r0, #0
 8009700:	2001      	movcc	r0, #1
	}
 8009702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009704:	1d27      	adds	r7, r4, #4
 8009706:	4638      	mov	r0, r7
 8009708:	f7fe ff06 	bl	8008518 <uxListRemove>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800970c:	4a0e      	ldr	r2, [pc, #56]	@ (8009748 <xTaskPriorityInherit+0x90>)
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800970e:	b930      	cbnz	r0, 800971e <xTaskPriorityInherit+0x66>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009710:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009712:	2101      	movs	r1, #1
 8009714:	4099      	lsls	r1, r3
 8009716:	6813      	ldr	r3, [r2, #0]
 8009718:	ea23 0301 	bic.w	r3, r3, r1
 800971c:	6013      	str	r3, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800971e:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009720:	4639      	mov	r1, r7
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009722:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009724:	2301      	movs	r3, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009726:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009728:	4083      	lsls	r3, r0
 800972a:	6814      	ldr	r4, [r2, #0]
 800972c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009730:	4323      	orrs	r3, r4
 8009732:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8009736:	6013      	str	r3, [r2, #0]
 8009738:	f7fe fec8 	bl	80084cc <vListInsertEnd>
 800973c:	e7d8      	b.n	80096f0 <xTaskPriorityInherit+0x38>
 800973e:	bf00      	nop
 8009740:	20000f40 	.word	0x20000f40
 8009744:	20000eb4 	.word	0x20000eb4
 8009748:	20000e38 	.word	0x20000e38

0800974c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800974c:	b1e0      	cbz	r0, 8009788 <xTaskPriorityDisinherit+0x3c>
	{
 800974e:	b538      	push	{r3, r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8009750:	4b1f      	ldr	r3, [pc, #124]	@ (80097d0 <xTaskPriorityDisinherit+0x84>)
 8009752:	4604      	mov	r4, r0
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4283      	cmp	r3, r0
 8009758:	d004      	beq.n	8009764 <xTaskPriorityDisinherit+0x18>
 800975a:	f241 011c 	movw	r1, #4124	@ 0x101c
 800975e:	481d      	ldr	r0, [pc, #116]	@ (80097d4 <xTaskPriorityDisinherit+0x88>)
 8009760:	f7f7 fb78 	bl	8000e54 <vAssertCalled>
			configASSERT( pxTCB->uxMutexesHeld );
 8009764:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009766:	b143      	cbz	r3, 800977a <xTaskPriorityDisinherit+0x2e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009768:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800976a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800976c:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800976e:	6523      	str	r3, [r4, #80]	@ 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009770:	4291      	cmp	r1, r2
 8009772:	d000      	beq.n	8009776 <xTaskPriorityDisinherit+0x2a>
 8009774:	b153      	cbz	r3, 800978c <xTaskPriorityDisinherit+0x40>
	BaseType_t xReturn = pdFALSE;
 8009776:	2000      	movs	r0, #0
	}
 8009778:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB->uxMutexesHeld );
 800977a:	f241 011d 	movw	r1, #4125	@ 0x101d
 800977e:	4815      	ldr	r0, [pc, #84]	@ (80097d4 <xTaskPriorityDisinherit+0x88>)
 8009780:	f7f7 fb68 	bl	8000e54 <vAssertCalled>
			( pxTCB->uxMutexesHeld )--;
 8009784:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009786:	e7ef      	b.n	8009768 <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 8009788:	2000      	movs	r0, #0
	}
 800978a:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800978c:	1d25      	adds	r5, r4, #4
 800978e:	4628      	mov	r0, r5
 8009790:	f7fe fec2 	bl	8008518 <uxListRemove>
						portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009794:	4a10      	ldr	r2, [pc, #64]	@ (80097d8 <xTaskPriorityDisinherit+0x8c>)
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009796:	b930      	cbnz	r0, 80097a6 <xTaskPriorityDisinherit+0x5a>
						portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009798:	2101      	movs	r1, #1
 800979a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800979c:	6813      	ldr	r3, [r2, #0]
 800979e:	4081      	lsls	r1, r0
 80097a0:	ea23 0301 	bic.w	r3, r3, r1
 80097a4:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80097a6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					prvAddTaskToReadyList( pxTCB );
 80097a8:	4629      	mov	r1, r5
 80097aa:	6815      	ldr	r5, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097ac:	f1c3 0007 	rsb	r0, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80097b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097b2:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80097b4:	2401      	movs	r4, #1
 80097b6:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80097ba:	fa04 f303 	lsl.w	r3, r4, r3
 80097be:	432b      	orrs	r3, r5
 80097c0:	6013      	str	r3, [r2, #0]
 80097c2:	4b06      	ldr	r3, [pc, #24]	@ (80097dc <xTaskPriorityDisinherit+0x90>)
 80097c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80097c8:	f7fe fe80 	bl	80084cc <vListInsertEnd>
					xReturn = pdTRUE;
 80097cc:	4620      	mov	r0, r4
	}
 80097ce:	bd38      	pop	{r3, r4, r5, pc}
 80097d0:	20000f40 	.word	0x20000f40
 80097d4:	080105b4 	.word	0x080105b4
 80097d8:	20000e38 	.word	0x20000e38
 80097dc:	20000eb4 	.word	0x20000eb4

080097e0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80097e0:	b1a8      	cbz	r0, 800980e <vTaskPriorityDisinheritAfterTimeout+0x2e>
	{
 80097e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 80097e4:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80097e6:	4604      	mov	r4, r0
 80097e8:	460d      	mov	r5, r1
 80097ea:	b153      	cbz	r3, 8009802 <vTaskPriorityDisinheritAfterTimeout+0x22>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80097ec:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 80097ee:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80097f0:	4295      	cmp	r5, r2
 80097f2:	bf38      	it	cc
 80097f4:	4615      	movcc	r5, r2
 80097f6:	42ab      	cmp	r3, r5
 80097f8:	d002      	beq.n	8009800 <vTaskPriorityDisinheritAfterTimeout+0x20>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80097fa:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80097fc:	2a01      	cmp	r2, #1
 80097fe:	d007      	beq.n	8009810 <vTaskPriorityDisinheritAfterTimeout+0x30>
	}
 8009800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB->uxMutexesHeld );
 8009802:	f241 016b 	movw	r1, #4203	@ 0x106b
 8009806:	481e      	ldr	r0, [pc, #120]	@ (8009880 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8009808:	f7f7 fb24 	bl	8000e54 <vAssertCalled>
 800980c:	e7ee      	b.n	80097ec <vTaskPriorityDisinheritAfterTimeout+0xc>
 800980e:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
 8009810:	4a1c      	ldr	r2, [pc, #112]	@ (8009884 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8009812:	6812      	ldr	r2, [r2, #0]
 8009814:	42a2      	cmp	r2, r4
 8009816:	d023      	beq.n	8009860 <vTaskPriorityDisinheritAfterTimeout+0x80>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009818:	69a2      	ldr	r2, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 800981a:	62e5      	str	r5, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800981c:	2a00      	cmp	r2, #0
 800981e:	db02      	blt.n	8009826 <vTaskPriorityDisinheritAfterTimeout+0x46>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009820:	f1c5 0507 	rsb	r5, r5, #7
 8009824:	61a5      	str	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009826:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800982a:	4d17      	ldr	r5, [pc, #92]	@ (8009888 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 800982c:	6962      	ldr	r2, [r4, #20]
 800982e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009832:	429a      	cmp	r2, r3
 8009834:	d1e4      	bne.n	8009800 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009836:	1d27      	adds	r7, r4, #4
 8009838:	4638      	mov	r0, r7
 800983a:	f7fe fe6d 	bl	8008518 <uxListRemove>
 800983e:	b1b0      	cbz	r0, 800986e <vTaskPriorityDisinheritAfterTimeout+0x8e>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009840:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
						prvAddTaskToReadyList( pxTCB );
 8009842:	2301      	movs	r3, #1
 8009844:	4e11      	ldr	r6, [pc, #68]	@ (800988c <vTaskPriorityDisinheritAfterTimeout+0xac>)
 8009846:	4083      	lsls	r3, r0
 8009848:	6832      	ldr	r2, [r6, #0]
 800984a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800984e:	4639      	mov	r1, r7
 8009850:	4313      	orrs	r3, r2
 8009852:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8009856:	6033      	str	r3, [r6, #0]
	}
 8009858:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 800985c:	f7fe be36 	b.w	80084cc <vListInsertEnd>
					configASSERT( pxTCB != pxCurrentTCB );
 8009860:	f241 0186 	movw	r1, #4230	@ 0x1086
 8009864:	4806      	ldr	r0, [pc, #24]	@ (8009880 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8009866:	f7f7 faf5 	bl	8000e54 <vAssertCalled>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800986a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800986c:	e7d4      	b.n	8009818 <vTaskPriorityDisinheritAfterTimeout+0x38>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800986e:	4e07      	ldr	r6, [pc, #28]	@ (800988c <vTaskPriorityDisinheritAfterTimeout+0xac>)
 8009870:	2301      	movs	r3, #1
 8009872:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8009874:	6832      	ldr	r2, [r6, #0]
 8009876:	4083      	lsls	r3, r0
 8009878:	ea22 0203 	bic.w	r2, r2, r3
 800987c:	6032      	str	r2, [r6, #0]
 800987e:	e7e3      	b.n	8009848 <vTaskPriorityDisinheritAfterTimeout+0x68>
 8009880:	080105b4 	.word	0x080105b4
 8009884:	20000f40 	.word	0x20000f40
 8009888:	20000eb4 	.word	0x20000eb4
 800988c:	20000e38 	.word	0x20000e38

08009890 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8009890:	4b04      	ldr	r3, [pc, #16]	@ (80098a4 <uxTaskResetEventItemValue+0x14>)
 8009892:	6819      	ldr	r1, [r3, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009894:	6818      	ldr	r0, [r3, #0]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800989a:	6988      	ldr	r0, [r1, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800989c:	f1c3 0307 	rsb	r3, r3, #7
 80098a0:	6193      	str	r3, [r2, #24]
}
 80098a2:	4770      	bx	lr
 80098a4:	20000f40 	.word	0x20000f40

080098a8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80098a8:	4b04      	ldr	r3, [pc, #16]	@ (80098bc <pvTaskIncrementMutexHeldCount+0x14>)
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	b11a      	cbz	r2, 80098b6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80098ae:	6819      	ldr	r1, [r3, #0]
 80098b0:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80098b2:	3201      	adds	r2, #1
 80098b4:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 80098b6:	6818      	ldr	r0, [r3, #0]
	}
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	20000f40 	.word	0x20000f40

080098c0 <ulTaskGenericNotifyTake>:
	{
 80098c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098c4:	460f      	mov	r7, r1
		configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80098c6:	4604      	mov	r4, r0
	{
 80098c8:	4690      	mov	r8, r2
		configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80098ca:	bb88      	cbnz	r0, 8009930 <ulTaskGenericNotifyTake+0x70>
			if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 80098cc:	4e22      	ldr	r6, [pc, #136]	@ (8009958 <ulTaskGenericNotifyTake+0x98>)
		taskENTER_CRITICAL();
 80098ce:	f000 f9b1 	bl	8009c34 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 80098d2:	f104 0518 	add.w	r5, r4, #24
 80098d6:	6833      	ldr	r3, [r6, #0]
 80098d8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	b93b      	cbnz	r3, 80098f0 <ulTaskGenericNotifyTake+0x30>
				pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80098e0:	6833      	ldr	r3, [r6, #0]
 80098e2:	2101      	movs	r1, #1
 80098e4:	4423      	add	r3, r4
 80098e6:	f883 1068 	strb.w	r1, [r3, #104]	@ 0x68
				if( xTicksToWait > ( TickType_t ) 0 )
 80098ea:	f1b8 0f00 	cmp.w	r8, #0
 80098ee:	d125      	bne.n	800993c <ulTaskGenericNotifyTake+0x7c>
		taskEXIT_CRITICAL();
 80098f0:	f000 f9c2 	bl	8009c78 <vPortExitCritical>
		taskENTER_CRITICAL();
 80098f4:	f000 f99e 	bl	8009c34 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80098f8:	6833      	ldr	r3, [r6, #0]
 80098fa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80098fe:	00ad      	lsls	r5, r5, #2
 8009900:	f8d3 8004 	ldr.w	r8, [r3, #4]
			if( ulReturn != 0UL )
 8009904:	f1b8 0f00 	cmp.w	r8, #0
 8009908:	d004      	beq.n	8009914 <ulTaskGenericNotifyTake+0x54>
					pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 800990a:	6833      	ldr	r3, [r6, #0]
 800990c:	442b      	add	r3, r5
				if( xClearCountOnExit != pdFALSE )
 800990e:	b15f      	cbz	r7, 8009928 <ulTaskGenericNotifyTake+0x68>
					pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 8009910:	2200      	movs	r2, #0
 8009912:	605a      	str	r2, [r3, #4]
			pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8009914:	6833      	ldr	r3, [r6, #0]
 8009916:	2200      	movs	r2, #0
 8009918:	4423      	add	r3, r4
 800991a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
		taskEXIT_CRITICAL();
 800991e:	f000 f9ab 	bl	8009c78 <vPortExitCritical>
	}
 8009922:	4640      	mov	r0, r8
 8009924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 8009928:	f108 32ff 	add.w	r2, r8, #4294967295
 800992c:	605a      	str	r2, [r3, #4]
 800992e:	e7f1      	b.n	8009914 <ulTaskGenericNotifyTake+0x54>
		configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8009930:	f241 2128 	movw	r1, #4648	@ 0x1228
 8009934:	4809      	ldr	r0, [pc, #36]	@ (800995c <ulTaskGenericNotifyTake+0x9c>)
 8009936:	f7f7 fa8d 	bl	8000e54 <vAssertCalled>
 800993a:	e7c7      	b.n	80098cc <ulTaskGenericNotifyTake+0xc>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800993c:	4640      	mov	r0, r8
 800993e:	f7ff f9d1 	bl	8008ce4 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8009942:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009946:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800994a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800994e:	f3bf 8f4f 	dsb	sy
 8009952:	f3bf 8f6f 	isb	sy
 8009956:	e7cb      	b.n	80098f0 <ulTaskGenericNotifyTake+0x30>
 8009958:	20000f40 	.word	0x20000f40
 800995c:	080105b4 	.word	0x080105b4

08009960 <xTaskGenericNotify>:
	{
 8009960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009964:	9d06      	ldr	r5, [sp, #24]
 8009966:	4606      	mov	r6, r0
 8009968:	4690      	mov	r8, r2
 800996a:	461f      	mov	r7, r3
		configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800996c:	460c      	mov	r4, r1
 800996e:	bb21      	cbnz	r1, 80099ba <xTaskGenericNotify+0x5a>
		configASSERT( xTaskToNotify );
 8009970:	b356      	cbz	r6, 80099c8 <xTaskGenericNotify+0x68>
		taskENTER_CRITICAL();
 8009972:	f000 f95f 	bl	8009c34 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8009976:	b12d      	cbz	r5, 8009984 <xTaskGenericNotify+0x24>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8009978:	f104 0318 	add.w	r3, r4, #24
 800997c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8009984:	1931      	adds	r1, r6, r4
			pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8009986:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8009988:	f891 5068 	ldrb.w	r5, [r1, #104]	@ 0x68
			pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800998c:	f881 3068 	strb.w	r3, [r1, #104]	@ 0x68
			ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8009990:	b2ed      	uxtb	r5, r5
			switch( eAction )
 8009992:	2f04      	cmp	r7, #4
 8009994:	d85a      	bhi.n	8009a4c <xTaskGenericNotify+0xec>
 8009996:	e8df f007 	tbb	[pc, r7]
 800999a:	2108      	.short	0x2108
 800999c:	0353      	.short	0x0353
 800999e:	1d          	.byte	0x1d
 800999f:	00          	.byte	0x00
						pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80099a0:	3418      	adds	r4, #24
 80099a2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80099a6:	f8c4 8004 	str.w	r8, [r4, #4]
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80099aa:	2d01      	cmp	r5, #1
 80099ac:	d01e      	beq.n	80099ec <xTaskGenericNotify+0x8c>
	{
 80099ae:	2401      	movs	r4, #1
		taskEXIT_CRITICAL();
 80099b0:	f000 f962 	bl	8009c78 <vPortExitCritical>
	}
 80099b4:	4620      	mov	r0, r4
 80099b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80099ba:	f241 21ca 	movw	r1, #4810	@ 0x12ca
 80099be:	482a      	ldr	r0, [pc, #168]	@ (8009a68 <xTaskGenericNotify+0x108>)
 80099c0:	f7f7 fa48 	bl	8000e54 <vAssertCalled>
		configASSERT( xTaskToNotify );
 80099c4:	2e00      	cmp	r6, #0
 80099c6:	d1d4      	bne.n	8009972 <xTaskGenericNotify+0x12>
 80099c8:	f241 21cb 	movw	r1, #4811	@ 0x12cb
 80099cc:	4826      	ldr	r0, [pc, #152]	@ (8009a68 <xTaskGenericNotify+0x108>)
 80099ce:	f7f7 fa41 	bl	8000e54 <vAssertCalled>
 80099d2:	e7ce      	b.n	8009972 <xTaskGenericNotify+0x12>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80099d4:	2d02      	cmp	r5, #2
 80099d6:	d1e3      	bne.n	80099a0 <xTaskGenericNotify+0x40>
						xReturn = pdFAIL;
 80099d8:	2400      	movs	r4, #0
 80099da:	e7e9      	b.n	80099b0 <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80099dc:	eb06 0484 	add.w	r4, r6, r4, lsl #2
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80099e0:	2d01      	cmp	r5, #1
					pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80099e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099e4:	ea43 0308 	orr.w	r3, r3, r8
 80099e8:	6663      	str	r3, [r4, #100]	@ 0x64
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80099ea:	d1e0      	bne.n	80099ae <xTaskGenericNotify+0x4e>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099ec:	1d34      	adds	r4, r6, #4
 80099ee:	4620      	mov	r0, r4
 80099f0:	f7fe fd92 	bl	8008518 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80099f4:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 80099f6:	4b1d      	ldr	r3, [pc, #116]	@ (8009a6c <xTaskGenericNotify+0x10c>)
 80099f8:	4621      	mov	r1, r4
 80099fa:	4085      	lsls	r5, r0
 80099fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	4315      	orrs	r5, r2
 8009a04:	601d      	str	r5, [r3, #0]
 8009a06:	4b1a      	ldr	r3, [pc, #104]	@ (8009a70 <xTaskGenericNotify+0x110>)
 8009a08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009a0c:	f7fe fd5e 	bl	80084cc <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009a10:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8009a12:	b123      	cbz	r3, 8009a1e <xTaskGenericNotify+0xbe>
 8009a14:	f241 310b 	movw	r1, #4875	@ 0x130b
 8009a18:	4813      	ldr	r0, [pc, #76]	@ (8009a68 <xTaskGenericNotify+0x108>)
 8009a1a:	f7f7 fa1b 	bl	8000e54 <vAssertCalled>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a1e:	4b15      	ldr	r3, [pc, #84]	@ (8009a74 <xTaskGenericNotify+0x114>)
 8009a20:	6af2      	ldr	r2, [r6, #44]	@ 0x2c
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d9c1      	bls.n	80099ae <xTaskGenericNotify+0x4e>
					taskYIELD_IF_USING_PREEMPTION();
 8009a2a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a32:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009a36:	f3bf 8f4f 	dsb	sy
 8009a3a:	f3bf 8f6f 	isb	sy
 8009a3e:	e7b6      	b.n	80099ae <xTaskGenericNotify+0x4e>
					( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8009a40:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8009a44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a46:	3301      	adds	r3, #1
 8009a48:	6663      	str	r3, [r4, #100]	@ 0x64
					break;
 8009a4a:	e7ae      	b.n	80099aa <xTaskGenericNotify+0x4a>
					configASSERT( pxTCB->ulNotifiedValue[ uxIndexToNotify ] == ~0UL );
 8009a4c:	f104 0318 	add.w	r3, r4, #24
 8009a50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	3301      	adds	r3, #1
 8009a58:	d0a7      	beq.n	80099aa <xTaskGenericNotify+0x4a>
 8009a5a:	f241 21fc 	movw	r1, #4860	@ 0x12fc
 8009a5e:	4802      	ldr	r0, [pc, #8]	@ (8009a68 <xTaskGenericNotify+0x108>)
 8009a60:	f7f7 f9f8 	bl	8000e54 <vAssertCalled>
 8009a64:	e7a1      	b.n	80099aa <xTaskGenericNotify+0x4a>
 8009a66:	bf00      	nop
 8009a68:	080105b4 	.word	0x080105b4
 8009a6c:	20000e38 	.word	0x20000e38
 8009a70:	20000eb4 	.word	0x20000eb4
 8009a74:	20000f40 	.word	0x20000f40

08009a78 <vTaskGenericNotifyGiveFromISR>:
	{
 8009a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7a:	460c      	mov	r4, r1
		configASSERT( xTaskToNotify );
 8009a7c:	4605      	mov	r5, r0
	{
 8009a7e:	4616      	mov	r6, r2
		configASSERT( xTaskToNotify );
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d044      	beq.n	8009b0e <vTaskGenericNotifyGiveFromISR+0x96>
		configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8009a84:	2c00      	cmp	r4, #0
 8009a86:	d13c      	bne.n	8009b02 <vTaskGenericNotifyGiveFromISR+0x8a>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a88:	f000 f9d0 	bl	8009e2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009a8c:	f3ef 8711 	mrs	r7, BASEPRI
 8009a90:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8009a94:	b672      	cpsid	i
 8009a96:	f383 8811 	msr	BASEPRI, r3
 8009a9a:	f3bf 8f6f 	isb	sy
 8009a9e:	f3bf 8f4f 	dsb	sy
 8009aa2:	b662      	cpsie	i
			pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8009aa4:	2102      	movs	r1, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8009aa6:	192b      	adds	r3, r5, r4
 8009aa8:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8009aac:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
			pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8009ab0:	f883 1068 	strb.w	r1, [r3, #104]	@ 0x68
			( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8009ab4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009ab6:	2a01      	cmp	r2, #1
			( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8009ab8:	f103 0301 	add.w	r3, r3, #1
 8009abc:	6663      	str	r3, [r4, #100]	@ 0x64
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009abe:	d002      	beq.n	8009ac6 <vTaskGenericNotifyGiveFromISR+0x4e>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ac0:	f387 8811 	msr	BASEPRI, r7
	}
 8009ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009ac6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8009ac8:	b123      	cbz	r3, 8009ad4 <vTaskGenericNotifyGiveFromISR+0x5c>
 8009aca:	f241 31eb 	movw	r1, #5099	@ 0x13eb
 8009ace:	481d      	ldr	r0, [pc, #116]	@ (8009b44 <vTaskGenericNotifyGiveFromISR+0xcc>)
 8009ad0:	f7f7 f9c0 	bl	8000e54 <vAssertCalled>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8009b48 <vTaskGenericNotifyGiveFromISR+0xd0>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	b1fb      	cbz	r3, 8009b1a <vTaskGenericNotifyGiveFromISR+0xa2>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009ada:	f105 0118 	add.w	r1, r5, #24
 8009ade:	481b      	ldr	r0, [pc, #108]	@ (8009b4c <vTaskGenericNotifyGiveFromISR+0xd4>)
 8009ae0:	f7fe fcf4 	bl	80084cc <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8009b50 <vTaskGenericNotifyGiveFromISR+0xd8>)
 8009ae6:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d9e7      	bls.n	8009ac0 <vTaskGenericNotifyGiveFromISR+0x48>
					if( pxHigherPriorityTaskWoken != NULL )
 8009af0:	b10e      	cbz	r6, 8009af6 <vTaskGenericNotifyGiveFromISR+0x7e>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009af2:	2301      	movs	r3, #1
 8009af4:	6033      	str	r3, [r6, #0]
					xYieldPending = pdTRUE;
 8009af6:	4b17      	ldr	r3, [pc, #92]	@ (8009b54 <vTaskGenericNotifyGiveFromISR+0xdc>)
 8009af8:	2201      	movs	r2, #1
 8009afa:	601a      	str	r2, [r3, #0]
 8009afc:	f387 8811 	msr	BASEPRI, r7
	}
 8009b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8009b02:	f241 31c5 	movw	r1, #5061	@ 0x13c5
 8009b06:	480f      	ldr	r0, [pc, #60]	@ (8009b44 <vTaskGenericNotifyGiveFromISR+0xcc>)
 8009b08:	f7f7 f9a4 	bl	8000e54 <vAssertCalled>
 8009b0c:	e7bc      	b.n	8009a88 <vTaskGenericNotifyGiveFromISR+0x10>
		configASSERT( xTaskToNotify );
 8009b0e:	f241 31c4 	movw	r1, #5060	@ 0x13c4
 8009b12:	480c      	ldr	r0, [pc, #48]	@ (8009b44 <vTaskGenericNotifyGiveFromISR+0xcc>)
 8009b14:	f7f7 f99e 	bl	8000e54 <vAssertCalled>
 8009b18:	e7b4      	b.n	8009a84 <vTaskGenericNotifyGiveFromISR+0xc>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b1a:	1d2c      	adds	r4, r5, #4
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f7fe fcfb 	bl	8008518 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b22:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8009b24:	4a0c      	ldr	r2, [pc, #48]	@ (8009b58 <vTaskGenericNotifyGiveFromISR+0xe0>)
 8009b26:	2301      	movs	r3, #1
 8009b28:	4621      	mov	r1, r4
 8009b2a:	4083      	lsls	r3, r0
 8009b2c:	6814      	ldr	r4, [r2, #0]
 8009b2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009b32:	4323      	orrs	r3, r4
 8009b34:	6013      	str	r3, [r2, #0]
 8009b36:	4b09      	ldr	r3, [pc, #36]	@ (8009b5c <vTaskGenericNotifyGiveFromISR+0xe4>)
 8009b38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009b3c:	f7fe fcc6 	bl	80084cc <vListInsertEnd>
 8009b40:	e7d0      	b.n	8009ae4 <vTaskGenericNotifyGiveFromISR+0x6c>
 8009b42:	bf00      	nop
 8009b44:	080105b4 	.word	0x080105b4
 8009b48:	20000e18 	.word	0x20000e18
 8009b4c:	20000e70 	.word	0x20000e70
 8009b50:	20000f40 	.word	0x20000f40
 8009b54:	20000e2c 	.word	0x20000e2c
 8009b58:	20000e38 	.word	0x20000e38
 8009b5c:	20000eb4 	.word	0x20000eb4

08009b60 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b60:	4808      	ldr	r0, [pc, #32]	@ (8009b84 <prvPortStartFirstTask+0x24>)
 8009b62:	6800      	ldr	r0, [r0, #0]
 8009b64:	6800      	ldr	r0, [r0, #0]
 8009b66:	f380 8808 	msr	MSP, r0
 8009b6a:	f04f 0000 	mov.w	r0, #0
 8009b6e:	f380 8814 	msr	CONTROL, r0
 8009b72:	b662      	cpsie	i
 8009b74:	b661      	cpsie	f
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	f3bf 8f6f 	isb	sy
 8009b7e:	df00      	svc	0
 8009b80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b82:	0000      	.short	0x0000
 8009b84:	e000ed08 	.word	0xe000ed08

08009b88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b88:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009b98 <vPortEnableVFP+0x10>
 8009b8c:	6801      	ldr	r1, [r0, #0]
 8009b8e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009b92:	6001      	str	r1, [r0, #0]
 8009b94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b96:	0000      	.short	0x0000
 8009b98:	e000ed88 	.word	0xe000ed88

08009b9c <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8009b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8009bd4 <prvTaskExitError+0x38>)
volatile uint32_t ulDummy = 0;
 8009b9e:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8009ba0:	681b      	ldr	r3, [r3, #0]
{
 8009ba2:	b500      	push	{lr}
	configASSERT( uxCriticalNesting == ~0UL );
 8009ba4:	3301      	adds	r3, #1
{
 8009ba6:	b083      	sub	sp, #12
volatile uint32_t ulDummy = 0;
 8009ba8:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8009baa:	d003      	beq.n	8009bb4 <prvTaskExitError+0x18>
 8009bac:	21dd      	movs	r1, #221	@ 0xdd
 8009bae:	480a      	ldr	r0, [pc, #40]	@ (8009bd8 <prvTaskExitError+0x3c>)
 8009bb0:	f7f7 f950 	bl	8000e54 <vAssertCalled>
	__asm volatile
 8009bb4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8009bb8:	b672      	cpsid	i
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	b662      	cpsie	i
	while( ulDummy == 0 )
 8009bc8:	9b01      	ldr	r3, [sp, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d0fc      	beq.n	8009bc8 <prvTaskExitError+0x2c>
}
 8009bce:	b003      	add	sp, #12
 8009bd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8009bd4:	2000002c 	.word	0x2000002c
 8009bd8:	080105e0 	.word	0x080105e0

08009bdc <pxPortInitialiseStack>:
{
 8009bdc:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009bde:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009be2:	4809      	ldr	r0, [pc, #36]	@ (8009c08 <pxPortInitialiseStack+0x2c>)
{
 8009be4:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009be6:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009bea:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009bee:	f843 2c20 	str.w	r2, [r3, #-32]
}
 8009bf2:	f1a3 0044 	sub.w	r0, r3, #68	@ 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009bf6:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009bfa:	f06f 0102 	mvn.w	r1, #2
}
 8009bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c02:	f843 1c24 	str.w	r1, [r3, #-36]
}
 8009c06:	4770      	bx	lr
 8009c08:	08009b9d 	.word	0x08009b9d
 8009c0c:	00000000 	.word	0x00000000

08009c10 <SVC_Handler>:
	__asm volatile (
 8009c10:	4b07      	ldr	r3, [pc, #28]	@ (8009c30 <pxCurrentTCBConst2>)
 8009c12:	6819      	ldr	r1, [r3, #0]
 8009c14:	6808      	ldr	r0, [r1, #0]
 8009c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1a:	f380 8809 	msr	PSP, r0
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f04f 0000 	mov.w	r0, #0
 8009c26:	f380 8811 	msr	BASEPRI, r0
 8009c2a:	4770      	bx	lr
 8009c2c:	f3af 8000 	nop.w

08009c30 <pxCurrentTCBConst2>:
 8009c30:	20000f40 	.word	0x20000f40

08009c34 <vPortEnterCritical>:
 8009c34:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8009c38:	b672      	cpsid	i
 8009c3a:	f383 8811 	msr	BASEPRI, r3
 8009c3e:	f3bf 8f6f 	isb	sy
 8009c42:	f3bf 8f4f 	dsb	sy
 8009c46:	b662      	cpsie	i
	uxCriticalNesting++;
 8009c48:	4a09      	ldr	r2, [pc, #36]	@ (8009c70 <vPortEnterCritical+0x3c>)
 8009c4a:	6813      	ldr	r3, [r2, #0]
 8009c4c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8009c4e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8009c50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8009c52:	d000      	beq.n	8009c56 <vPortEnterCritical+0x22>
}
 8009c54:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009c56:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009c5a:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d0f7      	beq.n	8009c54 <vPortEnterCritical+0x20>
 8009c64:	f240 1193 	movw	r1, #403	@ 0x193
 8009c68:	4802      	ldr	r0, [pc, #8]	@ (8009c74 <vPortEnterCritical+0x40>)
 8009c6a:	f7f7 b8f3 	b.w	8000e54 <vAssertCalled>
 8009c6e:	bf00      	nop
 8009c70:	2000002c 	.word	0x2000002c
 8009c74:	080105e0 	.word	0x080105e0

08009c78 <vPortExitCritical>:
{
 8009c78:	b510      	push	{r4, lr}
	configASSERT( uxCriticalNesting );
 8009c7a:	4c08      	ldr	r4, [pc, #32]	@ (8009c9c <vPortExitCritical+0x24>)
 8009c7c:	6823      	ldr	r3, [r4, #0]
 8009c7e:	b12b      	cbz	r3, 8009c8c <vPortExitCritical+0x14>
	uxCriticalNesting--;
 8009c80:	3b01      	subs	r3, #1
 8009c82:	6023      	str	r3, [r4, #0]
	if( uxCriticalNesting == 0 )
 8009c84:	b90b      	cbnz	r3, 8009c8a <vPortExitCritical+0x12>
	__asm volatile
 8009c86:	f383 8811 	msr	BASEPRI, r3
}
 8009c8a:	bd10      	pop	{r4, pc}
	configASSERT( uxCriticalNesting );
 8009c8c:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 8009c90:	4803      	ldr	r0, [pc, #12]	@ (8009ca0 <vPortExitCritical+0x28>)
 8009c92:	f7f7 f8df 	bl	8000e54 <vAssertCalled>
	uxCriticalNesting--;
 8009c96:	6823      	ldr	r3, [r4, #0]
 8009c98:	e7f2      	b.n	8009c80 <vPortExitCritical+0x8>
 8009c9a:	bf00      	nop
 8009c9c:	2000002c 	.word	0x2000002c
 8009ca0:	080105e0 	.word	0x080105e0
	...

08009cb0 <PendSV_Handler>:
	__asm volatile
 8009cb0:	f3ef 8009 	mrs	r0, PSP
 8009cb4:	f3bf 8f6f 	isb	sy
 8009cb8:	4b15      	ldr	r3, [pc, #84]	@ (8009d10 <pxCurrentTCBConst>)
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	f01e 0f10 	tst.w	lr, #16
 8009cc0:	bf08      	it	eq
 8009cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cca:	6010      	str	r0, [r2, #0]
 8009ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009cd0:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8009cd4:	b672      	cpsid	i
 8009cd6:	f380 8811 	msr	BASEPRI, r0
 8009cda:	f3bf 8f4f 	dsb	sy
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	b662      	cpsie	i
 8009ce4:	f7ff fb3e 	bl	8009364 <vTaskSwitchContext>
 8009ce8:	f04f 0000 	mov.w	r0, #0
 8009cec:	f380 8811 	msr	BASEPRI, r0
 8009cf0:	bc09      	pop	{r0, r3}
 8009cf2:	6819      	ldr	r1, [r3, #0]
 8009cf4:	6808      	ldr	r0, [r1, #0]
 8009cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cfa:	f01e 0f10 	tst.w	lr, #16
 8009cfe:	bf08      	it	eq
 8009d00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009d04:	f380 8809 	msr	PSP, r0
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop

08009d10 <pxCurrentTCBConst>:
 8009d10:	20000f40 	.word	0x20000f40

08009d14 <xPortSysTickHandler>:
{
 8009d14:	b508      	push	{r3, lr}
	__asm volatile
 8009d16:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8009d1a:	b672      	cpsid	i
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8009d2a:	f7ff f9a3 	bl	8009074 <xTaskIncrementTick>
 8009d2e:	b128      	cbz	r0, 8009d3c <xPortSysTickHandler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d30:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009d34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d38:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	f383 8811 	msr	BASEPRI, r3
}
 8009d42:	bd08      	pop	{r3, pc}

08009d44 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d44:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009d48:	2200      	movs	r2, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d4a:	f24c 304f 	movw	r0, #49999	@ 0xc34f
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d4e:	2103      	movs	r1, #3
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d50:	611a      	str	r2, [r3, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d52:	619a      	str	r2, [r3, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d54:	6158      	str	r0, [r3, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d56:	6119      	str	r1, [r3, #16]
}
 8009d58:	4770      	bx	lr
 8009d5a:	bf00      	nop

08009d5c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8009e18 <xPortStartScheduler+0xbc>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d5e:	20ff      	movs	r0, #255	@ 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d60:	492e      	ldr	r1, [pc, #184]	@ (8009e1c <xPortStartScheduler+0xc0>)
{
 8009d62:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d64:	781a      	ldrb	r2, [r3, #0]
{
 8009d66:	b083      	sub	sp, #12
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d68:	4d2d      	ldr	r5, [pc, #180]	@ (8009e20 <xPortStartScheduler+0xc4>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d6a:	b2d2      	uxtb	r2, r2
 8009d6c:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d6e:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d70:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d72:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d74:	602a      	str	r2, [r5, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d7c:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d80:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d88:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d8a:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d8c:	d53c      	bpl.n	8009e08 <xPortStartScheduler+0xac>
 8009d8e:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d90:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009d94:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d96:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d98:	005b      	lsls	r3, r3, #1
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009da0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009da4:	061b      	lsls	r3, r3, #24
 8009da6:	d4f3      	bmi.n	8009d90 <xPortStartScheduler+0x34>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009da8:	2903      	cmp	r1, #3
 8009daa:	6029      	str	r1, [r5, #0]
 8009dac:	d12c      	bne.n	8009e08 <xPortStartScheduler+0xac>
			ulMaxPRIGROUPValue--;
 8009dae:	2303      	movs	r3, #3
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009db0:	9a01      	ldr	r2, [sp, #4]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009db2:	021b      	lsls	r3, r3, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009db4:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009db8:	4917      	ldr	r1, [pc, #92]	@ (8009e18 <xPortStartScheduler+0xbc>)
 8009dba:	b2d2      	uxtb	r2, r2
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009dbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009dc0:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
 8009dc2:	2500      	movs	r5, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009dc4:	700a      	strb	r2, [r1, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009dc6:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8009dca:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009dce:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009dd2:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8009dd6:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009dda:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8009dde:	f7ff ffb1 	bl	8009d44 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8009de2:	4b10      	ldr	r3, [pc, #64]	@ (8009e24 <xPortStartScheduler+0xc8>)
 8009de4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8009de6:	f7ff fecf 	bl	8009b88 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009dea:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8009dee:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009df2:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8009df6:	f7ff feb3 	bl	8009b60 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009dfa:	f7ff fab3 	bl	8009364 <vTaskSwitchContext>
	prvTaskExitError();
 8009dfe:	f7ff fecd 	bl	8009b9c <prvTaskExitError>
}
 8009e02:	4628      	mov	r0, r5
 8009e04:	b003      	add	sp, #12
 8009e06:	bd30      	pop	{r4, r5, pc}
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e08:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8009e0c:	4806      	ldr	r0, [pc, #24]	@ (8009e28 <xPortStartScheduler+0xcc>)
 8009e0e:	f7f7 f821 	bl	8000e54 <vAssertCalled>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e12:	682b      	ldr	r3, [r5, #0]
 8009e14:	e7cc      	b.n	8009db0 <xPortStartScheduler+0x54>
 8009e16:	bf00      	nop
 8009e18:	e000e400 	.word	0xe000e400
 8009e1c:	20000f48 	.word	0x20000f48
 8009e20:	20000f44 	.word	0x20000f44
 8009e24:	2000002c 	.word	0x2000002c
 8009e28:	080105e0 	.word	0x080105e0

08009e2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e2c:	b508      	push	{r3, lr}
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e2e:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e32:	2b0f      	cmp	r3, #15
 8009e34:	d905      	bls.n	8009e42 <vPortValidateInterruptPriority+0x16>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e36:	490f      	ldr	r1, [pc, #60]	@ (8009e74 <vPortValidateInterruptPriority+0x48>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e38:	4a0f      	ldr	r2, [pc, #60]	@ (8009e78 <vPortValidateInterruptPriority+0x4c>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e3a:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e3c:	7812      	ldrb	r2, [r2, #0]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d811      	bhi.n	8009e66 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e42:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009e46:	4a0d      	ldr	r2, [pc, #52]	@ (8009e7c <vPortValidateInterruptPriority+0x50>)
 8009e48:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8009e4c:	6812      	ldr	r2, [r2, #0]
 8009e4e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d800      	bhi.n	8009e58 <vPortValidateInterruptPriority+0x2c>
	}
 8009e56:	bd08      	pop	{r3, pc}
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e58:	f44f 713e 	mov.w	r1, #760	@ 0x2f8
 8009e5c:	4808      	ldr	r0, [pc, #32]	@ (8009e80 <vPortValidateInterruptPriority+0x54>)
	}
 8009e5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e62:	f7f6 bff7 	b.w	8000e54 <vAssertCalled>
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e66:	f44f 713a 	mov.w	r1, #744	@ 0x2e8
 8009e6a:	4805      	ldr	r0, [pc, #20]	@ (8009e80 <vPortValidateInterruptPriority+0x54>)
 8009e6c:	f7f6 fff2 	bl	8000e54 <vAssertCalled>
 8009e70:	e7e7      	b.n	8009e42 <vPortValidateInterruptPriority+0x16>
 8009e72:	bf00      	nop
 8009e74:	e000e3f0 	.word	0xe000e3f0
 8009e78:	20000f48 	.word	0x20000f48
 8009e7c:	20000f44 	.word	0x20000f44
 8009e80:	080105e0 	.word	0x080105e0

08009e84 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e84:	4b12      	ldr	r3, [pc, #72]	@ (8009ed0 <prvInsertBlockIntoFreeList+0x4c>)
{
 8009e86:	b430      	push	{r4, r5}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e88:	461a      	mov	r2, r3
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4283      	cmp	r3, r0
 8009e8e:	d3fb      	bcc.n	8009e88 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e90:	6854      	ldr	r4, [r2, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e92:	6841      	ldr	r1, [r0, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e94:	eb02 0c04 	add.w	ip, r2, r4
 8009e98:	4560      	cmp	r0, ip
 8009e9a:	d008      	beq.n	8009eae <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e9c:	1844      	adds	r4, r0, r1
 8009e9e:	42a3      	cmp	r3, r4
 8009ea0:	d00b      	beq.n	8009eba <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ea2:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ea4:	4282      	cmp	r2, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ea6:	bf18      	it	ne
 8009ea8:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009eaa:	bc30      	pop	{r4, r5}
 8009eac:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009eae:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009eb0:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009eb2:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009eb4:	4283      	cmp	r3, r0
 8009eb6:	d1f8      	bne.n	8009eaa <prvInsertBlockIntoFreeList+0x26>
 8009eb8:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009eba:	4c06      	ldr	r4, [pc, #24]	@ (8009ed4 <prvInsertBlockIntoFreeList+0x50>)
 8009ebc:	6824      	ldr	r4, [r4, #0]
 8009ebe:	42a3      	cmp	r3, r4
 8009ec0:	d003      	beq.n	8009eca <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009ec2:	e9d3 4500 	ldrd	r4, r5, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009ec6:	4429      	add	r1, r5
 8009ec8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009eca:	6004      	str	r4, [r0, #0]
 8009ecc:	e7ea      	b.n	8009ea4 <prvInsertBlockIntoFreeList+0x20>
 8009ece:	bf00      	nop
 8009ed0:	20000f64 	.word	0x20000f64
 8009ed4:	20000f60 	.word	0x20000f60

08009ed8 <pvPortMalloc>:
{
 8009ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( pxEnd );
 8009edc:	4e2d      	ldr	r6, [pc, #180]	@ (8009f94 <pvPortMalloc+0xbc>)
{
 8009ede:	4604      	mov	r4, r0
	configASSERT( pxEnd );
 8009ee0:	6833      	ldr	r3, [r6, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d049      	beq.n	8009f7a <pvPortMalloc+0xa2>
	vTaskSuspendAll();
 8009ee6:	f7ff f8a3 	bl	8009030 <vTaskSuspendAll>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009eea:	4b2b      	ldr	r3, [pc, #172]	@ (8009f98 <pvPortMalloc+0xc0>)
 8009eec:	681d      	ldr	r5, [r3, #0]
 8009eee:	4225      	tst	r5, r4
 8009ef0:	d13b      	bne.n	8009f6a <pvPortMalloc+0x92>
			if( xWantedSize > 0 )
 8009ef2:	2c00      	cmp	r4, #0
 8009ef4:	d039      	beq.n	8009f6a <pvPortMalloc+0x92>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ef6:	0763      	lsls	r3, r4, #29
				xWantedSize += xHeapStructSize;
 8009ef8:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009efc:	d002      	beq.n	8009f04 <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009efe:	f021 0107 	bic.w	r1, r1, #7
 8009f02:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f04:	b389      	cbz	r1, 8009f6a <pvPortMalloc+0x92>
 8009f06:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8009fac <pvPortMalloc+0xd4>
 8009f0a:	f8d8 7000 	ldr.w	r7, [r8]
 8009f0e:	428f      	cmp	r7, r1
 8009f10:	d32b      	bcc.n	8009f6a <pvPortMalloc+0x92>
				pxBlock = xStart.pxNextFreeBlock;
 8009f12:	4b22      	ldr	r3, [pc, #136]	@ (8009f9c <pvPortMalloc+0xc4>)
 8009f14:	681c      	ldr	r4, [r3, #0]
				pxPreviousBlock = &xStart;
 8009f16:	469c      	mov	ip, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f18:	e003      	b.n	8009f22 <pvPortMalloc+0x4a>
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	b123      	cbz	r3, 8009f28 <pvPortMalloc+0x50>
 8009f1e:	46a4      	mov	ip, r4
 8009f20:	461c      	mov	r4, r3
 8009f22:	6862      	ldr	r2, [r4, #4]
 8009f24:	428a      	cmp	r2, r1
 8009f26:	d3f8      	bcc.n	8009f1a <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8009f28:	6833      	ldr	r3, [r6, #0]
 8009f2a:	42a3      	cmp	r3, r4
 8009f2c:	d01d      	beq.n	8009f6a <pvPortMalloc+0x92>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f2e:	6823      	ldr	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f30:	f8dc 6000 	ldr.w	r6, [ip]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f34:	f8cc 3000 	str.w	r3, [ip]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009f38:	1a53      	subs	r3, r2, r1
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f3a:	3608      	adds	r6, #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009f3c:	2b10      	cmp	r3, #16
 8009f3e:	d821      	bhi.n	8009f84 <pvPortMalloc+0xac>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f40:	4b17      	ldr	r3, [pc, #92]	@ (8009fa0 <pvPortMalloc+0xc8>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f42:	1abf      	subs	r7, r7, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009f44:	4315      	orrs	r5, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f46:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f48:	f8c8 7000 	str.w	r7, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f4c:	428f      	cmp	r7, r1
					xNumberOfSuccessfulAllocations++;
 8009f4e:	4915      	ldr	r1, [pc, #84]	@ (8009fa4 <pvPortMalloc+0xcc>)
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009f50:	bf38      	it	cc
 8009f52:	601f      	strcc	r7, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8009f54:	2300      	movs	r3, #0
 8009f56:	e9c4 3500 	strd	r3, r5, [r4]
					xNumberOfSuccessfulAllocations++;
 8009f5a:	680b      	ldr	r3, [r1, #0]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 8009f60:	f7ff f944 	bl	80091ec <xTaskResumeAll>
}
 8009f64:	4630      	mov	r0, r6
 8009f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	( void ) xTaskResumeAll();
 8009f6a:	2600      	movs	r6, #0
 8009f6c:	f7ff f93e 	bl	80091ec <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8009f70:	f7f6 ff82 	bl	8000e78 <vApplicationMallocFailedHook>
}
 8009f74:	4630      	mov	r0, r6
 8009f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( pxEnd );
 8009f7a:	218d      	movs	r1, #141	@ 0x8d
 8009f7c:	480a      	ldr	r0, [pc, #40]	@ (8009fa8 <pvPortMalloc+0xd0>)
 8009f7e:	f7f6 ff69 	bl	8000e54 <vAssertCalled>
 8009f82:	e7b0      	b.n	8009ee6 <pvPortMalloc+0xe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009f84:	1860      	adds	r0, r4, r1
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009f86:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009f88:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8009f8a:	f7ff ff7b 	bl	8009e84 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f8e:	6862      	ldr	r2, [r4, #4]
 8009f90:	e7d6      	b.n	8009f40 <pvPortMalloc+0x68>
 8009f92:	bf00      	nop
 8009f94:	20000f60 	.word	0x20000f60
 8009f98:	20000f4c 	.word	0x20000f4c
 8009f9c:	20000f64 	.word	0x20000f64
 8009fa0:	20000f58 	.word	0x20000f58
 8009fa4:	20000f54 	.word	0x20000f54
 8009fa8:	08010620 	.word	0x08010620
 8009fac:	20000f5c 	.word	0x20000f5c

08009fb0 <vPortFree>:
	if( pv != NULL )
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	d03e      	beq.n	800a032 <vPortFree+0x82>
{
 8009fb4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009fb6:	4d1f      	ldr	r5, [pc, #124]	@ (800a034 <vPortFree+0x84>)
 8009fb8:	4604      	mov	r4, r0
 8009fba:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009fbe:	682a      	ldr	r2, [r5, #0]
 8009fc0:	4213      	tst	r3, r2
 8009fc2:	d010      	beq.n	8009fe6 <vPortFree+0x36>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009fc4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8009fc8:	b1d9      	cbz	r1, 800a002 <vPortFree+0x52>
 8009fca:	f240 1123 	movw	r1, #291	@ 0x123
 8009fce:	481a      	ldr	r0, [pc, #104]	@ (800a038 <vPortFree+0x88>)
 8009fd0:	f7f6 ff40 	bl	8000e54 <vAssertCalled>
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009fd4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009fd8:	682a      	ldr	r2, [r5, #0]
 8009fda:	4213      	tst	r3, r2
 8009fdc:	d002      	beq.n	8009fe4 <vPortFree+0x34>
			if( pxLink->pxNextFreeBlock == NULL )
 8009fde:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8009fe2:	b171      	cbz	r1, 800a002 <vPortFree+0x52>
}
 8009fe4:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009fe6:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8009fea:	4813      	ldr	r0, [pc, #76]	@ (800a038 <vPortFree+0x88>)
 8009fec:	f7f6 ff32 	bl	8000e54 <vAssertCalled>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009ff0:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1e8      	bne.n	8009fca <vPortFree+0x1a>
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ff8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009ffc:	682a      	ldr	r2, [r5, #0]
 8009ffe:	4213      	tst	r3, r2
 800a000:	d0f0      	beq.n	8009fe4 <vPortFree+0x34>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a002:	ea23 0302 	bic.w	r3, r3, r2
 800a006:	f844 3c04 	str.w	r3, [r4, #-4]
				vTaskSuspendAll();
 800a00a:	f7ff f811 	bl	8009030 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a00e:	4a0b      	ldr	r2, [pc, #44]	@ (800a03c <vPortFree+0x8c>)
 800a010:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a014:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a018:	6811      	ldr	r1, [r2, #0]
 800a01a:	440b      	add	r3, r1
 800a01c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a01e:	f7ff ff31 	bl	8009e84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a022:	4a07      	ldr	r2, [pc, #28]	@ (800a040 <vPortFree+0x90>)
 800a024:	6813      	ldr	r3, [r2, #0]
 800a026:	3301      	adds	r3, #1
 800a028:	6013      	str	r3, [r2, #0]
}
 800a02a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 800a02e:	f7ff b8dd 	b.w	80091ec <xTaskResumeAll>
 800a032:	4770      	bx	lr
 800a034:	20000f4c 	.word	0x20000f4c
 800a038:	08010620 	.word	0x08010620
 800a03c:	20000f5c 	.word	0x20000f5c
 800a040:	20000f50 	.word	0x20000f50

0800a044 <xPortGetFreeHeapSize>:
	return xFreeBytesRemaining;
 800a044:	4b01      	ldr	r3, [pc, #4]	@ (800a04c <xPortGetFreeHeapSize+0x8>)
}
 800a046:	6818      	ldr	r0, [r3, #0]
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	20000f5c 	.word	0x20000f5c

0800a050 <xPortGetMinimumEverFreeHeapSize>:
	return xMinimumEverFreeBytesRemaining;
 800a050:	4b01      	ldr	r3, [pc, #4]	@ (800a058 <xPortGetMinimumEverFreeHeapSize+0x8>)
}
 800a052:	6818      	ldr	r0, [r3, #0]
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	20000f58 	.word	0x20000f58

0800a05c <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800a05c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
BaseType_t xDefinedRegions = 0;
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800a060:	4b37      	ldr	r3, [pc, #220]	@ (800a140 <vPortDefineHeapRegions+0xe4>)
{
 800a062:	4606      	mov	r6, r0
	configASSERT( pxEnd == NULL );
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	b12a      	cbz	r2, 800a074 <vPortDefineHeapRegions+0x18>
 800a068:	f240 1197 	movw	r1, #407	@ 0x197
 800a06c:	4835      	ldr	r0, [pc, #212]	@ (800a144 <vPortDefineHeapRegions+0xe8>)
 800a06e:	f7f6 fef1 	bl	8000e54 <vAssertCalled>
 800a072:	4b33      	ldr	r3, [pc, #204]	@ (800a140 <vPortDefineHeapRegions+0xe4>)

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );

	while( pxHeapRegion->xSizeInBytes > 0 )
 800a074:	6875      	ldr	r5, [r6, #4]
 800a076:	2d00      	cmp	r5, #0
 800a078:	d053      	beq.n	800a122 <vPortDefineHeapRegions+0xc6>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800a07a:	2700      	movs	r7, #0
 800a07c:	6819      	ldr	r1, [r3, #0]
 800a07e:	3608      	adds	r6, #8
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800a080:	f8df b0d0 	ldr.w	fp, [pc, #208]	@ 800a154 <vPortDefineHeapRegions+0xf8>
			configASSERT( pxEnd != NULL );
 800a084:	46b8      	mov	r8, r7
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
		xAddress -= xHeapStructSize;
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
		pxEnd = ( BlockLink_t * ) xAddress;
		pxEnd->xBlockSize = 0;
 800a086:	46b9      	mov	r9, r7
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800a088:	f856 4c08 	ldr.w	r4, [r6, #-8]
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a08c:	0762      	lsls	r2, r4, #29
 800a08e:	f1a4 0a08 	sub.w	sl, r4, #8
 800a092:	d002      	beq.n	800a09a <vPortDefineHeapRegions+0x3e>
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800a094:	3407      	adds	r4, #7
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800a096:	f024 0407 	bic.w	r4, r4, #7
		if( xDefinedRegions == 0 )
 800a09a:	bb1f      	cbnz	r7, 800a0e4 <vPortDefineHeapRegions+0x88>
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800a09c:	460a      	mov	r2, r1
			xStart.xBlockSize = ( size_t ) 0;
 800a09e:	e9cb 4700 	strd	r4, r7, [fp]
		xAddress -= xHeapStructSize;
 800a0a2:	eb0a 0105 	add.w	r1, sl, r5
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800a0a6:	f021 0107 	bic.w	r1, r1, #7

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800a0aa:	1b08      	subs	r0, r1, r4
		pxEnd = ( BlockLink_t * ) xAddress;
 800a0ac:	6019      	str	r1, [r3, #0]
		pxEnd->pxNextFreeBlock = NULL;
 800a0ae:	e9c1 9900 	strd	r9, r9, [r1]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800a0b2:	e9c4 1000 	strd	r1, r0, [r4]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800a0b6:	b102      	cbz	r2, 800a0ba <vPortDefineHeapRegions+0x5e>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800a0b8:	6014      	str	r4, [r2, #0]
	while( pxHeapRegion->xSizeInBytes > 0 )
 800a0ba:	6875      	ldr	r5, [r6, #4]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800a0bc:	4480      	add	r8, r0
	while( pxHeapRegion->xSizeInBytes > 0 )
 800a0be:	3608      	adds	r6, #8

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800a0c0:	3701      	adds	r7, #1
	while( pxHeapRegion->xSizeInBytes > 0 )
 800a0c2:	2d00      	cmp	r5, #0
 800a0c4:	d1e0      	bne.n	800a088 <vPortDefineHeapRegions+0x2c>
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800a0c6:	4a20      	ldr	r2, [pc, #128]	@ (800a148 <vPortDefineHeapRegions+0xec>)
	xFreeBytesRemaining = xTotalHeapSize;
 800a0c8:	4b20      	ldr	r3, [pc, #128]	@ (800a14c <vPortDefineHeapRegions+0xf0>)
	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800a0ca:	f8c2 8000 	str.w	r8, [r2]
	xFreeBytesRemaining = xTotalHeapSize;
 800a0ce:	f8c3 8000 	str.w	r8, [r3]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800a0d2:	f1b8 0f00 	cmp.w	r8, #0
 800a0d6:	d028      	beq.n	800a12a <vPortDefineHeapRegions+0xce>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a0d8:	4b1d      	ldr	r3, [pc, #116]	@ (800a150 <vPortDefineHeapRegions+0xf4>)
 800a0da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a0de:	601a      	str	r2, [r3, #0]
}
 800a0e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			configASSERT( pxEnd != NULL );
 800a0e4:	b161      	cbz	r1, 800a100 <vPortDefineHeapRegions+0xa4>
			configASSERT( xAddress > ( size_t ) pxEnd );
 800a0e6:	42a1      	cmp	r1, r4
 800a0e8:	d213      	bcs.n	800a112 <vPortDefineHeapRegions+0xb6>
		xAddress -= xHeapStructSize;
 800a0ea:	4455      	add	r5, sl
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800a0ec:	460a      	mov	r2, r1
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800a0ee:	f025 0107 	bic.w	r1, r5, #7
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800a0f2:	1b08      	subs	r0, r1, r4
		pxEnd = ( BlockLink_t * ) xAddress;
 800a0f4:	6019      	str	r1, [r3, #0]
		pxEnd->pxNextFreeBlock = NULL;
 800a0f6:	e9c1 9900 	strd	r9, r9, [r1]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800a0fa:	6021      	str	r1, [r4, #0]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800a0fc:	6060      	str	r0, [r4, #4]
		if( pxPreviousFreeBlock != NULL )
 800a0fe:	e7db      	b.n	800a0b8 <vPortDefineHeapRegions+0x5c>
			configASSERT( pxEnd != NULL );
 800a100:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 800a104:	480f      	ldr	r0, [pc, #60]	@ (800a144 <vPortDefineHeapRegions+0xe8>)
 800a106:	f7f6 fea5 	bl	8000e54 <vAssertCalled>
			configASSERT( xAddress > ( size_t ) pxEnd );
 800a10a:	4b0d      	ldr	r3, [pc, #52]	@ (800a140 <vPortDefineHeapRegions+0xe4>)
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	42a2      	cmp	r2, r4
 800a110:	d3c7      	bcc.n	800a0a2 <vPortDefineHeapRegions+0x46>
 800a112:	f240 11bb 	movw	r1, #443	@ 0x1bb
 800a116:	480b      	ldr	r0, [pc, #44]	@ (800a144 <vPortDefineHeapRegions+0xe8>)
 800a118:	f7f6 fe9c 	bl	8000e54 <vAssertCalled>
		pxPreviousFreeBlock = pxEnd;
 800a11c:	4b08      	ldr	r3, [pc, #32]	@ (800a140 <vPortDefineHeapRegions+0xe4>)
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	e7bf      	b.n	800a0a2 <vPortDefineHeapRegions+0x46>
	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800a122:	4a09      	ldr	r2, [pc, #36]	@ (800a148 <vPortDefineHeapRegions+0xec>)
	xFreeBytesRemaining = xTotalHeapSize;
 800a124:	4b09      	ldr	r3, [pc, #36]	@ (800a14c <vPortDefineHeapRegions+0xf0>)
	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800a126:	6015      	str	r5, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800a128:	601d      	str	r5, [r3, #0]
	configASSERT( xTotalHeapSize );
 800a12a:	f44f 71f2 	mov.w	r1, #484	@ 0x1e4
 800a12e:	4805      	ldr	r0, [pc, #20]	@ (800a144 <vPortDefineHeapRegions+0xe8>)
 800a130:	f7f6 fe90 	bl	8000e54 <vAssertCalled>
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a134:	4b06      	ldr	r3, [pc, #24]	@ (800a150 <vPortDefineHeapRegions+0xf4>)
 800a136:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a13a:	601a      	str	r2, [r3, #0]
}
 800a13c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a140:	20000f60 	.word	0x20000f60
 800a144:	08010620 	.word	0x08010620
 800a148:	20000f58 	.word	0x20000f58
 800a14c:	20000f5c 	.word	0x20000f5c
 800a150:	20000f4c 	.word	0x20000f4c
 800a154:	20000f64 	.word	0x20000f64

0800a158 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800a158:	4b0f      	ldr	r3, [pc, #60]	@ (800a198 <HAL_InitTick+0x40>)
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	b90b      	cbnz	r3, 800a162 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800a15e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800a160:	4770      	bx	lr
{
 800a162:	b510      	push	{r4, lr}
 800a164:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800a166:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a16a:	4a0c      	ldr	r2, [pc, #48]	@ (800a19c <HAL_InitTick+0x44>)
 800a16c:	fbb0 f3f3 	udiv	r3, r0, r3
 800a170:	6810      	ldr	r0, [r2, #0]
 800a172:	fbb0 f0f3 	udiv	r0, r0, r3
 800a176:	f000 f8c3 	bl	800a300 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a17a:	b908      	cbnz	r0, 800a180 <HAL_InitTick+0x28>
 800a17c:	2c0f      	cmp	r4, #15
 800a17e:	d901      	bls.n	800a184 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 800a180:	2001      	movs	r0, #1
}
 800a182:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a184:	2200      	movs	r2, #0
 800a186:	4621      	mov	r1, r4
 800a188:	f04f 30ff 	mov.w	r0, #4294967295
 800a18c:	f000 f86e 	bl	800a26c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a190:	4b03      	ldr	r3, [pc, #12]	@ (800a1a0 <HAL_InitTick+0x48>)
 800a192:	2000      	movs	r0, #0
 800a194:	601c      	str	r4, [r3, #0]
}
 800a196:	bd10      	pop	{r4, pc}
 800a198:	20000030 	.word	0x20000030
 800a19c:	20000004 	.word	0x20000004
 800a1a0:	20000034 	.word	0x20000034

0800a1a4 <HAL_Init>:
{
 800a1a4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a1a6:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a1a8:	4c12      	ldr	r4, [pc, #72]	@ (800a1f4 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a1aa:	f000 f84d 	bl	800a248 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a1ae:	f000 fdd9 	bl	800ad64 <HAL_RCC_GetSysClockFreq>
 800a1b2:	4b11      	ldr	r3, [pc, #68]	@ (800a1f8 <HAL_Init+0x54>)
 800a1b4:	4911      	ldr	r1, [pc, #68]	@ (800a1fc <HAL_Init+0x58>)
 800a1b6:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a1b8:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a1ba:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a1be:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a1c2:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a1c4:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a1c6:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 800a1ca:	490d      	ldr	r1, [pc, #52]	@ (800a200 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a1cc:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a1d0:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a1d2:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800a1d6:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a1d8:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a1da:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a1dc:	f7ff ffbc 	bl	800a158 <HAL_InitTick>
 800a1e0:	b110      	cbz	r0, 800a1e8 <HAL_Init+0x44>
    return HAL_ERROR;
 800a1e2:	2401      	movs	r4, #1
}
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	bd10      	pop	{r4, pc}
 800a1e8:	4604      	mov	r4, r0
  HAL_MspInit();
 800a1ea:	f7f6 fed7 	bl	8000f9c <HAL_MspInit>
}
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	bd10      	pop	{r4, pc}
 800a1f2:	bf00      	nop
 800a1f4:	20000000 	.word	0x20000000
 800a1f8:	58024400 	.word	0x58024400
 800a1fc:	0800ec84 	.word	0x0800ec84
 800a200:	20000004 	.word	0x20000004

0800a204 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800a204:	4a03      	ldr	r2, [pc, #12]	@ (800a214 <HAL_IncTick+0x10>)
 800a206:	4b04      	ldr	r3, [pc, #16]	@ (800a218 <HAL_IncTick+0x14>)
 800a208:	6811      	ldr	r1, [r2, #0]
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	440b      	add	r3, r1
 800a20e:	6013      	str	r3, [r2, #0]
}
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	20000f6c 	.word	0x20000f6c
 800a218:	20000030 	.word	0x20000030

0800a21c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800a21c:	4b01      	ldr	r3, [pc, #4]	@ (800a224 <HAL_GetTick+0x8>)
 800a21e:	6818      	ldr	r0, [r3, #0]
}
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	20000f6c 	.word	0x20000f6c

0800a228 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800a228:	4b01      	ldr	r3, [pc, #4]	@ (800a230 <HAL_GetREVID+0x8>)
 800a22a:	6818      	ldr	r0, [r3, #0]
}
 800a22c:	0c00      	lsrs	r0, r0, #16
 800a22e:	4770      	bx	lr
 800a230:	5c001000 	.word	0x5c001000

0800a234 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800a234:	4a03      	ldr	r2, [pc, #12]	@ (800a244 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 800a236:	6853      	ldr	r3, [r2, #4]
 800a238:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800a23c:	4303      	orrs	r3, r0
 800a23e:	6053      	str	r3, [r2, #4]
}
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	58000400 	.word	0x58000400

0800a248 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a248:	4906      	ldr	r1, [pc, #24]	@ (800a264 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a24a:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a24e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800a250:	4b05      	ldr	r3, [pc, #20]	@ (800a268 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a252:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a254:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a258:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a25c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800a25e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800a260:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800a262:	4770      	bx	lr
 800a264:	e000ed00 	.word	0xe000ed00
 800a268:	05fa0000 	.word	0x05fa0000

0800a26c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a26c:	4b1a      	ldr	r3, [pc, #104]	@ (800a2d8 <HAL_NVIC_SetPriority+0x6c>)
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a274:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a276:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a27a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a27e:	f1be 0f04 	cmp.w	lr, #4
 800a282:	bf28      	it	cs
 800a284:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a288:	f1bc 0f06 	cmp.w	ip, #6
 800a28c:	d91a      	bls.n	800a2c4 <HAL_NVIC_SetPriority+0x58>
 800a28e:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a292:	f04f 33ff 	mov.w	r3, #4294967295
 800a296:	fa03 f30c 	lsl.w	r3, r3, ip
 800a29a:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a29e:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800a2a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a2a4:	fa03 f30e 	lsl.w	r3, r3, lr
 800a2a8:	ea21 0303 	bic.w	r3, r1, r3
 800a2ac:	fa03 f30c 	lsl.w	r3, r3, ip
 800a2b0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2b4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800a2b8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800a2ba:	db06      	blt.n	800a2ca <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2bc:	4a07      	ldr	r2, [pc, #28]	@ (800a2dc <HAL_NVIC_SetPriority+0x70>)
 800a2be:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800a2c0:	f85d fb04 	ldr.w	pc, [sp], #4
 800a2c4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a2c6:	4694      	mov	ip, r2
 800a2c8:	e7e9      	b.n	800a29e <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2ca:	f000 000f 	and.w	r0, r0, #15
 800a2ce:	4a04      	ldr	r2, [pc, #16]	@ (800a2e0 <HAL_NVIC_SetPriority+0x74>)
 800a2d0:	5413      	strb	r3, [r2, r0]
 800a2d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a2d6:	bf00      	nop
 800a2d8:	e000ed00 	.word	0xe000ed00
 800a2dc:	e000e400 	.word	0xe000e400
 800a2e0:	e000ed14 	.word	0xe000ed14

0800a2e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	db07      	blt.n	800a2f8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	f000 011f 	and.w	r1, r0, #31
 800a2ee:	4a03      	ldr	r2, [pc, #12]	@ (800a2fc <HAL_NVIC_EnableIRQ+0x18>)
 800a2f0:	0940      	lsrs	r0, r0, #5
 800a2f2:	408b      	lsls	r3, r1
 800a2f4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	e000e100 	.word	0xe000e100

0800a300 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a300:	1e43      	subs	r3, r0, #1
 800a302:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a306:	d301      	bcc.n	800a30c <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a308:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800a30a:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a30c:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a310:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a312:	4905      	ldr	r1, [pc, #20]	@ (800a328 <HAL_SYSTICK_Config+0x28>)
 800a314:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a318:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a31a:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a31c:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a320:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a322:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	e000ed00 	.word	0xe000ed00

0800a32c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800a32c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800a330:	4b04      	ldr	r3, [pc, #16]	@ (800a344 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800a332:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800a334:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a336:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a33a:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 800a33c:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	e000ed00 	.word	0xe000ed00

0800a348 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800a348:	4b06      	ldr	r3, [pc, #24]	@ (800a364 <HAL_MPU_Enable+0x1c>)
 800a34a:	f040 0001 	orr.w	r0, r0, #1
 800a34e:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800a352:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a354:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a358:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800a35a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a35e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800a362:	4770      	bx	lr
 800a364:	e000ed00 	.word	0xe000ed00

0800a368 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800a368:	4a16      	ldr	r2, [pc, #88]	@ (800a3c4 <HAL_MPU_ConfigRegion+0x5c>)
 800a36a:	7843      	ldrb	r3, [r0, #1]
 800a36c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800a370:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 800a374:	f023 0301 	bic.w	r3, r3, #1
 800a378:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800a37c:	6843      	ldr	r3, [r0, #4]
 800a37e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a382:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a384:	f890 c00c 	ldrb.w	ip, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a388:	061b      	lsls	r3, r3, #24
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800a38a:	7801      	ldrb	r1, [r0, #0]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a38c:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a390:	f890 c00a 	ldrb.w	ip, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a394:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a396:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a398:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a39c:	f890 c00e 	ldrb.w	ip, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a3a0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800a3a4:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a3a6:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800a3aa:	f890 c009 	ldrb.w	ip, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a3ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a3b2:	7a01      	ldrb	r1, [r0, #8]
 800a3b4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800a3b8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a3bc:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	e000ed00 	.word	0xe000ed00

0800a3c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a3cc:	680c      	ldr	r4, [r1, #0]
{
 800a3ce:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a3d0:	2c00      	cmp	r4, #0
 800a3d2:	f000 80a5 	beq.w	800a520 <HAL_GPIO_Init+0x158>
  uint32_t position = 0x00U;
 800a3d6:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a3d8:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a3dc:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a3e0:	9100      	str	r1, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a3e2:	fa0b fc03 	lsl.w	ip, fp, r3
    if (iocurrent != 0x00U)
 800a3e6:	ea1c 0a04 	ands.w	sl, ip, r4
 800a3ea:	f000 8094 	beq.w	800a516 <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a3ee:	9900      	ldr	r1, [sp, #0]
 800a3f0:	005f      	lsls	r7, r3, #1
 800a3f2:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a3f4:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a3f6:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a3fa:	fa01 f607 	lsl.w	r6, r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a3fe:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a402:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a404:	f1b8 0f01 	cmp.w	r8, #1
 800a408:	f240 808d 	bls.w	800a526 <HAL_GPIO_Init+0x15e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a40c:	2a03      	cmp	r2, #3
 800a40e:	f040 80cb 	bne.w	800a5a8 <HAL_GPIO_Init+0x1e0>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a412:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 800a414:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a416:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a41a:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a41e:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 800a422:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a424:	d077      	beq.n	800a516 <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a426:	4e7f      	ldr	r6, [pc, #508]	@ (800a624 <HAL_GPIO_Init+0x25c>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a428:	f003 0703 	and.w	r7, r3, #3
 800a42c:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a42e:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a432:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a434:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a438:	fa01 fc07 	lsl.w	ip, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a43c:	497a      	ldr	r1, [pc, #488]	@ (800a628 <HAL_GPIO_Init+0x260>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a43e:	f8c6 20f4 	str.w	r2, [r6, #244]	@ 0xf4
 800a442:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
 800a446:	f023 0603 	bic.w	r6, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a44a:	4288      	cmp	r0, r1
 800a44c:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a450:	f002 0202 	and.w	r2, r2, #2
 800a454:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800a458:	9203      	str	r2, [sp, #12]
 800a45a:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800a45c:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a45e:	ea22 020c 	bic.w	r2, r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a462:	d031      	beq.n	800a4c8 <HAL_GPIO_Init+0x100>
 800a464:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800a468:	4288      	cmp	r0, r1
 800a46a:	f000 80b0 	beq.w	800a5ce <HAL_GPIO_Init+0x206>
 800a46e:	496f      	ldr	r1, [pc, #444]	@ (800a62c <HAL_GPIO_Init+0x264>)
 800a470:	4288      	cmp	r0, r1
 800a472:	f000 80b2 	beq.w	800a5da <HAL_GPIO_Init+0x212>
 800a476:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 800a630 <HAL_GPIO_Init+0x268>
 800a47a:	4560      	cmp	r0, ip
 800a47c:	f000 80a1 	beq.w	800a5c2 <HAL_GPIO_Init+0x1fa>
 800a480:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 800a634 <HAL_GPIO_Init+0x26c>
 800a484:	4560      	cmp	r0, ip
 800a486:	f000 80b4 	beq.w	800a5f2 <HAL_GPIO_Init+0x22a>
 800a48a:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 800a638 <HAL_GPIO_Init+0x270>
 800a48e:	4560      	cmp	r0, ip
 800a490:	f000 80b5 	beq.w	800a5fe <HAL_GPIO_Init+0x236>
 800a494:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 800a63c <HAL_GPIO_Init+0x274>
 800a498:	4560      	cmp	r0, ip
 800a49a:	f000 80a4 	beq.w	800a5e6 <HAL_GPIO_Init+0x21e>
 800a49e:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 800a640 <HAL_GPIO_Init+0x278>
 800a4a2:	4560      	cmp	r0, ip
 800a4a4:	f000 80b1 	beq.w	800a60a <HAL_GPIO_Init+0x242>
 800a4a8:	f8df c198 	ldr.w	ip, [pc, #408]	@ 800a644 <HAL_GPIO_Init+0x27c>
 800a4ac:	4560      	cmp	r0, ip
 800a4ae:	f000 80b2 	beq.w	800a616 <HAL_GPIO_Init+0x24e>
 800a4b2:	f8df c194 	ldr.w	ip, [pc, #404]	@ 800a648 <HAL_GPIO_Init+0x280>
 800a4b6:	4560      	cmp	r0, ip
 800a4b8:	bf0c      	ite	eq
 800a4ba:	f04f 0c09 	moveq.w	ip, #9
 800a4be:	f04f 0c0a 	movne.w	ip, #10
 800a4c2:	fa0c f707 	lsl.w	r7, ip, r7
 800a4c6:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a4c8:	60b2      	str	r2, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a4ca:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 800a4cc:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~(iocurrent);
 800a4d0:	ea6f 060a 	mvn.w	r6, sl
        {
          temp |= iocurrent;
 800a4d4:	bf4c      	ite	mi
 800a4d6:	ea4a 0202 	orrmi.w	r2, sl, r2
        temp &= ~(iocurrent);
 800a4da:	4032      	andpl	r2, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a4dc:	02a9      	lsls	r1, r5, #10
        EXTI->RTSR1 = temp;
 800a4de:	f8ce 2000 	str.w	r2, [lr]
        temp = EXTI->FTSR1;
 800a4e2:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(iocurrent);
 800a4e6:	bf54      	ite	pl
 800a4e8:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 800a4ea:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a4ee:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 800a4f0:	f8ce 2004 	str.w	r2, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800a4f4:	f8de 2084 	ldr.w	r2, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 800a4f8:	bf54      	ite	pl
 800a4fa:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 800a4fc:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a500:	03e9      	lsls	r1, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800a502:	f8ce 2084 	str.w	r2, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800a506:	f8de 2080 	ldr.w	r2, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 800a50a:	bf54      	ite	pl
 800a50c:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 800a50e:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a512:	f8ce 2080 	str.w	r2, [lr, #128]	@ 0x80
      }
    }

    position++;
 800a516:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a518:	fa34 f203 	lsrs.w	r2, r4, r3
 800a51c:	f47f af61 	bne.w	800a3e2 <HAL_GPIO_Init+0x1a>
  }
}
 800a520:	b005      	add	sp, #20
 800a522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a526:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a528:	2a02      	cmp	r2, #2
        temp = GPIOx->OSPEEDR;
 800a52a:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a52e:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a530:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a534:	fa01 f807 	lsl.w	r8, r1, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a538:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a53a:	ea48 0809 	orr.w	r8, r8, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a53e:	6889      	ldr	r1, [r1, #8]
        GPIOx->OSPEEDR = temp;
 800a540:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a544:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 800a548:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a54c:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a550:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a554:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 800a558:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a55c:	fa01 fc07 	lsl.w	ip, r1, r7
      temp = GPIOx->PUPDR;
 800a560:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a564:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a568:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 800a56c:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a570:	f47f af4f 	bne.w	800a412 <HAL_GPIO_Init+0x4a>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a574:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a578:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
 800a57a:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a57e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a582:	6909      	ldr	r1, [r1, #16]
 800a584:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800a588:	fa01 f10c 	lsl.w	r1, r1, ip
        temp = GPIOx->AFR[position >> 3U];
 800a58c:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a590:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a592:	210f      	movs	r1, #15
 800a594:	fa01 fc0c 	lsl.w	ip, r1, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a598:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a59a:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a59e:	ea41 0c09 	orr.w	ip, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
 800a5a2:	f8c8 c020 	str.w	ip, [r8, #32]
 800a5a6:	e734      	b.n	800a412 <HAL_GPIO_Init+0x4a>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a5a8:	9900      	ldr	r1, [sp, #0]
      temp = GPIOx->PUPDR;
 800a5aa:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a5ae:	6889      	ldr	r1, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a5b0:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a5b4:	fa01 fc07 	lsl.w	ip, r1, r7
 800a5b8:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 800a5bc:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a5c0:	e727      	b.n	800a412 <HAL_GPIO_Init+0x4a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a5c2:	f04f 0c03 	mov.w	ip, #3
 800a5c6:	fa0c f707 	lsl.w	r7, ip, r7
 800a5ca:	433a      	orrs	r2, r7
 800a5cc:	e77c      	b.n	800a4c8 <HAL_GPIO_Init+0x100>
 800a5ce:	f04f 0c01 	mov.w	ip, #1
 800a5d2:	fa0c f707 	lsl.w	r7, ip, r7
 800a5d6:	433a      	orrs	r2, r7
 800a5d8:	e776      	b.n	800a4c8 <HAL_GPIO_Init+0x100>
 800a5da:	f04f 0c02 	mov.w	ip, #2
 800a5de:	fa0c f707 	lsl.w	r7, ip, r7
 800a5e2:	433a      	orrs	r2, r7
 800a5e4:	e770      	b.n	800a4c8 <HAL_GPIO_Init+0x100>
 800a5e6:	f04f 0c06 	mov.w	ip, #6
 800a5ea:	fa0c f707 	lsl.w	r7, ip, r7
 800a5ee:	433a      	orrs	r2, r7
 800a5f0:	e76a      	b.n	800a4c8 <HAL_GPIO_Init+0x100>
 800a5f2:	f04f 0c04 	mov.w	ip, #4
 800a5f6:	fa0c f707 	lsl.w	r7, ip, r7
 800a5fa:	433a      	orrs	r2, r7
 800a5fc:	e764      	b.n	800a4c8 <HAL_GPIO_Init+0x100>
 800a5fe:	f04f 0c05 	mov.w	ip, #5
 800a602:	fa0c f707 	lsl.w	r7, ip, r7
 800a606:	433a      	orrs	r2, r7
 800a608:	e75e      	b.n	800a4c8 <HAL_GPIO_Init+0x100>
 800a60a:	f04f 0c07 	mov.w	ip, #7
 800a60e:	fa0c f707 	lsl.w	r7, ip, r7
 800a612:	433a      	orrs	r2, r7
 800a614:	e758      	b.n	800a4c8 <HAL_GPIO_Init+0x100>
 800a616:	f04f 0c08 	mov.w	ip, #8
 800a61a:	fa0c f707 	lsl.w	r7, ip, r7
 800a61e:	433a      	orrs	r2, r7
 800a620:	e752      	b.n	800a4c8 <HAL_GPIO_Init+0x100>
 800a622:	bf00      	nop
 800a624:	58024400 	.word	0x58024400
 800a628:	58020000 	.word	0x58020000
 800a62c:	58020800 	.word	0x58020800
 800a630:	58020c00 	.word	0x58020c00
 800a634:	58021000 	.word	0x58021000
 800a638:	58021400 	.word	0x58021400
 800a63c:	58021800 	.word	0x58021800
 800a640:	58021c00 	.word	0x58021c00
 800a644:	58022000 	.word	0x58022000
 800a648:	58022400 	.word	0x58022400

0800a64c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a64c:	b902      	cbnz	r2, 800a650 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a64e:	0409      	lsls	r1, r1, #16
 800a650:	6181      	str	r1, [r0, #24]
  }
}
 800a652:	4770      	bx	lr

0800a654 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a654:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a656:	4c10      	ldr	r4, [pc, #64]	@ (800a698 <HAL_PWREx_ConfigSupply+0x44>)
 800a658:	68e3      	ldr	r3, [r4, #12]
 800a65a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a65e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a660:	d105      	bne.n	800a66e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a662:	f003 0307 	and.w	r3, r3, #7
 800a666:	1a18      	subs	r0, r3, r0
 800a668:	bf18      	it	ne
 800a66a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800a66c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a66e:	f023 0307 	bic.w	r3, r3, #7
 800a672:	4303      	orrs	r3, r0
 800a674:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 800a676:	f7ff fdd1 	bl	800a21c <HAL_GetTick>
 800a67a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a67c:	e005      	b.n	800a68a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a67e:	f7ff fdcd 	bl	800a21c <HAL_GetTick>
 800a682:	1b40      	subs	r0, r0, r5
 800a684:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800a688:	d804      	bhi.n	800a694 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a68a:	6863      	ldr	r3, [r4, #4]
 800a68c:	049b      	lsls	r3, r3, #18
 800a68e:	d5f6      	bpl.n	800a67e <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 800a690:	2000      	movs	r0, #0
}
 800a692:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800a694:	2001      	movs	r0, #1
}
 800a696:	bd38      	pop	{r3, r4, r5, pc}
 800a698:	58024800 	.word	0x58024800

0800a69c <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a69c:	4b33      	ldr	r3, [pc, #204]	@ (800a76c <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800a69e:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a6a0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a6a2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a6a4:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800a6a6:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a6aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a6ac:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800a6b0:	d036      	beq.n	800a720 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a6b2:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a6b6:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a6ba:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6be:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a6c2:	fb05 f202 	mul.w	r2, r5, r2
 800a6c6:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a6cc:	ee06 2a90 	vmov	s13, r2
 800a6d0:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800a6d4:	d002      	beq.n	800a6dc <HAL_RCC_GetSysClockFreq.part.0+0x40>
 800a6d6:	2902      	cmp	r1, #2
 800a6d8:	d042      	beq.n	800a760 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 800a6da:	b319      	cbz	r1, 800a724 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6dc:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800a770 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800a6e0:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800a6e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ea:	ee07 3a90 	vmov	s15, r3
 800a6ee:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800a6f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6fa:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a6fe:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a702:	4b1a      	ldr	r3, [pc, #104]	@ (800a76c <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 800a704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a706:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a70a:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a70c:	ee07 3a10 	vmov	s14, r3
 800a710:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800a714:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a718:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800a71c:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800a720:	bc30      	pop	{r4, r5}
 800a722:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	0692      	lsls	r2, r2, #26
 800a728:	d51d      	bpl.n	800a766 <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a72a:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a72c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a730:	4a10      	ldr	r2, [pc, #64]	@ (800a774 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a734:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a738:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a73c:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a73e:	ee07 3a90 	vmov	s15, r3
 800a742:	ee06 2a10 	vmov	s12, r2
 800a746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a74a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800a74e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a752:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800a756:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800a75a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a75e:	e7d0      	b.n	800a702 <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a760:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a778 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 800a764:	e7bc      	b.n	800a6e0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a766:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a77c <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 800a76a:	e7b9      	b.n	800a6e0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800a76c:	58024400 	.word	0x58024400
 800a770:	4a742400 	.word	0x4a742400
 800a774:	03d09000 	.word	0x03d09000
 800a778:	4af42400 	.word	0x4af42400
 800a77c:	4c742400 	.word	0x4c742400

0800a780 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800a780:	2800      	cmp	r0, #0
 800a782:	f000 82e9 	beq.w	800ad58 <HAL_RCC_OscConfig+0x5d8>
{
 800a786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a788:	6803      	ldr	r3, [r0, #0]
 800a78a:	4604      	mov	r4, r0
 800a78c:	07d9      	lsls	r1, r3, #31
 800a78e:	d52e      	bpl.n	800a7ee <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a790:	4997      	ldr	r1, [pc, #604]	@ (800a9f0 <HAL_RCC_OscConfig+0x270>)
 800a792:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a794:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a796:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a79a:	2a10      	cmp	r2, #16
 800a79c:	f000 80ee 	beq.w	800a97c <HAL_RCC_OscConfig+0x1fc>
 800a7a0:	2a18      	cmp	r2, #24
 800a7a2:	f000 80e6 	beq.w	800a972 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a7a6:	6863      	ldr	r3, [r4, #4]
 800a7a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7ac:	f000 8111 	beq.w	800a9d2 <HAL_RCC_OscConfig+0x252>
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f000 8167 	beq.w	800aa84 <HAL_RCC_OscConfig+0x304>
 800a7b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a7ba:	4b8d      	ldr	r3, [pc, #564]	@ (800a9f0 <HAL_RCC_OscConfig+0x270>)
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	f000 828a 	beq.w	800acd6 <HAL_RCC_OscConfig+0x556>
 800a7c2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a7c6:	601a      	str	r2, [r3, #0]
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a7ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a7d0:	f7ff fd24 	bl	800a21c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7d4:	4e86      	ldr	r6, [pc, #536]	@ (800a9f0 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800a7d6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7d8:	e005      	b.n	800a7e6 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7da:	f7ff fd1f 	bl	800a21c <HAL_GetTick>
 800a7de:	1b40      	subs	r0, r0, r5
 800a7e0:	2864      	cmp	r0, #100	@ 0x64
 800a7e2:	f200 814d 	bhi.w	800aa80 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7e6:	6833      	ldr	r3, [r6, #0]
 800a7e8:	039b      	lsls	r3, r3, #14
 800a7ea:	d5f6      	bpl.n	800a7da <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a7ec:	6823      	ldr	r3, [r4, #0]
 800a7ee:	079d      	lsls	r5, r3, #30
 800a7f0:	d470      	bmi.n	800a8d4 <HAL_RCC_OscConfig+0x154>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a7f2:	06d9      	lsls	r1, r3, #27
 800a7f4:	d533      	bpl.n	800a85e <HAL_RCC_OscConfig+0xde>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7f6:	4a7e      	ldr	r2, [pc, #504]	@ (800a9f0 <HAL_RCC_OscConfig+0x270>)
 800a7f8:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a7fa:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a800:	2b08      	cmp	r3, #8
 800a802:	f000 80cb 	beq.w	800a99c <HAL_RCC_OscConfig+0x21c>
 800a806:	2b18      	cmp	r3, #24
 800a808:	f000 80c3 	beq.w	800a992 <HAL_RCC_OscConfig+0x212>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a80c:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800a80e:	4d78      	ldr	r5, [pc, #480]	@ (800a9f0 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a810:	2b00      	cmp	r3, #0
 800a812:	f000 816f 	beq.w	800aaf4 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_CSI_ENABLE();
 800a816:	682b      	ldr	r3, [r5, #0]
 800a818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a81c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a81e:	f7ff fcfd 	bl	800a21c <HAL_GetTick>
 800a822:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a824:	e005      	b.n	800a832 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a826:	f7ff fcf9 	bl	800a21c <HAL_GetTick>
 800a82a:	1b80      	subs	r0, r0, r6
 800a82c:	2802      	cmp	r0, #2
 800a82e:	f200 8127 	bhi.w	800aa80 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a832:	682b      	ldr	r3, [r5, #0]
 800a834:	05db      	lsls	r3, r3, #23
 800a836:	d5f6      	bpl.n	800a826 <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a838:	f7ff fcf6 	bl	800a228 <HAL_GetREVID>
 800a83c:	f241 0303 	movw	r3, #4099	@ 0x1003
 800a840:	4298      	cmp	r0, r3
 800a842:	f200 8269 	bhi.w	800ad18 <HAL_RCC_OscConfig+0x598>
 800a846:	6a22      	ldr	r2, [r4, #32]
 800a848:	686b      	ldr	r3, [r5, #4]
 800a84a:	2a20      	cmp	r2, #32
 800a84c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800a850:	bf0c      	ite	eq
 800a852:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800a856:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800a85a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a85c:	6823      	ldr	r3, [r4, #0]
 800a85e:	071d      	lsls	r5, r3, #28
 800a860:	d516      	bpl.n	800a890 <HAL_RCC_OscConfig+0x110>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a862:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800a864:	4d62      	ldr	r5, [pc, #392]	@ (800a9f0 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a866:	2b00      	cmp	r3, #0
 800a868:	f000 8122 	beq.w	800aab0 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_LSI_ENABLE();
 800a86c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a86e:	f043 0301 	orr.w	r3, r3, #1
 800a872:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800a874:	f7ff fcd2 	bl	800a21c <HAL_GetTick>
 800a878:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a87a:	e005      	b.n	800a888 <HAL_RCC_OscConfig+0x108>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a87c:	f7ff fcce 	bl	800a21c <HAL_GetTick>
 800a880:	1b80      	subs	r0, r0, r6
 800a882:	2802      	cmp	r0, #2
 800a884:	f200 80fc 	bhi.w	800aa80 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a888:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a88a:	0798      	lsls	r0, r3, #30
 800a88c:	d5f6      	bpl.n	800a87c <HAL_RCC_OscConfig+0xfc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a88e:	6823      	ldr	r3, [r4, #0]
 800a890:	069a      	lsls	r2, r3, #26
 800a892:	d516      	bpl.n	800a8c2 <HAL_RCC_OscConfig+0x142>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a894:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800a896:	4d56      	ldr	r5, [pc, #344]	@ (800a9f0 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f000 811a 	beq.w	800aad2 <HAL_RCC_OscConfig+0x352>
      __HAL_RCC_HSI48_ENABLE();
 800a89e:	682b      	ldr	r3, [r5, #0]
 800a8a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a8a4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a8a6:	f7ff fcb9 	bl	800a21c <HAL_GetTick>
 800a8aa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a8ac:	e005      	b.n	800a8ba <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a8ae:	f7ff fcb5 	bl	800a21c <HAL_GetTick>
 800a8b2:	1b80      	subs	r0, r0, r6
 800a8b4:	2802      	cmp	r0, #2
 800a8b6:	f200 80e3 	bhi.w	800aa80 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a8ba:	682b      	ldr	r3, [r5, #0]
 800a8bc:	049f      	lsls	r7, r3, #18
 800a8be:	d5f6      	bpl.n	800a8ae <HAL_RCC_OscConfig+0x12e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a8c0:	6823      	ldr	r3, [r4, #0]
 800a8c2:	0759      	lsls	r1, r3, #29
 800a8c4:	f100 808b 	bmi.w	800a9de <HAL_RCC_OscConfig+0x25e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a8c8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f040 80bf 	bne.w	800aa4e <HAL_RCC_OscConfig+0x2ce>
  return HAL_OK;
 800a8d0:	2000      	movs	r0, #0
}
 800a8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8d4:	4a46      	ldr	r2, [pc, #280]	@ (800a9f0 <HAL_RCC_OscConfig+0x270>)
 800a8d6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a8d8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a8da:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800a8de:	d12d      	bne.n	800a93c <HAL_RCC_OscConfig+0x1bc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8e0:	4b43      	ldr	r3, [pc, #268]	@ (800a9f0 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a8e2:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	0759      	lsls	r1, r3, #29
 800a8e8:	d501      	bpl.n	800a8ee <HAL_RCC_OscConfig+0x16e>
 800a8ea:	2a00      	cmp	r2, #0
 800a8ec:	d04f      	beq.n	800a98e <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a8ee:	4d40      	ldr	r5, [pc, #256]	@ (800a9f0 <HAL_RCC_OscConfig+0x270>)
 800a8f0:	682b      	ldr	r3, [r5, #0]
 800a8f2:	f023 0319 	bic.w	r3, r3, #25
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a8fa:	f7ff fc8f 	bl	800a21c <HAL_GetTick>
 800a8fe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a900:	e005      	b.n	800a90e <HAL_RCC_OscConfig+0x18e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a902:	f7ff fc8b 	bl	800a21c <HAL_GetTick>
 800a906:	1b80      	subs	r0, r0, r6
 800a908:	2802      	cmp	r0, #2
 800a90a:	f200 80b9 	bhi.w	800aa80 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a90e:	682b      	ldr	r3, [r5, #0]
 800a910:	075b      	lsls	r3, r3, #29
 800a912:	d5f6      	bpl.n	800a902 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a914:	f7ff fc88 	bl	800a228 <HAL_GetREVID>
 800a918:	f241 0303 	movw	r3, #4099	@ 0x1003
 800a91c:	4298      	cmp	r0, r3
 800a91e:	f200 8110 	bhi.w	800ab42 <HAL_RCC_OscConfig+0x3c2>
 800a922:	6922      	ldr	r2, [r4, #16]
 800a924:	686b      	ldr	r3, [r5, #4]
 800a926:	2a40      	cmp	r2, #64	@ 0x40
 800a928:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800a92c:	bf0c      	ite	eq
 800a92e:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800a932:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800a936:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a938:	6823      	ldr	r3, [r4, #0]
 800a93a:	e75a      	b.n	800a7f2 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a93c:	2b18      	cmp	r3, #24
 800a93e:	f000 80fc 	beq.w	800ab3a <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a942:	4d2b      	ldr	r5, [pc, #172]	@ (800a9f0 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a944:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a946:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a948:	2a00      	cmp	r2, #0
 800a94a:	f000 80e5 	beq.w	800ab18 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a94e:	f023 0319 	bic.w	r3, r3, #25
 800a952:	4313      	orrs	r3, r2
 800a954:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a956:	f7ff fc61 	bl	800a21c <HAL_GetTick>
 800a95a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a95c:	e005      	b.n	800a96a <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a95e:	f7ff fc5d 	bl	800a21c <HAL_GetTick>
 800a962:	1b80      	subs	r0, r0, r6
 800a964:	2802      	cmp	r0, #2
 800a966:	f200 808b 	bhi.w	800aa80 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a96a:	682b      	ldr	r3, [r5, #0]
 800a96c:	075f      	lsls	r7, r3, #29
 800a96e:	d5f6      	bpl.n	800a95e <HAL_RCC_OscConfig+0x1de>
 800a970:	e7d0      	b.n	800a914 <HAL_RCC_OscConfig+0x194>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a972:	f001 0103 	and.w	r1, r1, #3
 800a976:	2902      	cmp	r1, #2
 800a978:	f47f af15 	bne.w	800a7a6 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a97c:	4a1c      	ldr	r2, [pc, #112]	@ (800a9f0 <HAL_RCC_OscConfig+0x270>)
 800a97e:	6812      	ldr	r2, [r2, #0]
 800a980:	0392      	lsls	r2, r2, #14
 800a982:	f57f af34 	bpl.w	800a7ee <HAL_RCC_OscConfig+0x6e>
 800a986:	6862      	ldr	r2, [r4, #4]
 800a988:	2a00      	cmp	r2, #0
 800a98a:	f47f af30 	bne.w	800a7ee <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 800a98e:	2001      	movs	r0, #1
}
 800a990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a992:	f002 0203 	and.w	r2, r2, #3
 800a996:	2a01      	cmp	r2, #1
 800a998:	f47f af38 	bne.w	800a80c <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a99c:	4b14      	ldr	r3, [pc, #80]	@ (800a9f0 <HAL_RCC_OscConfig+0x270>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	05da      	lsls	r2, r3, #23
 800a9a2:	d502      	bpl.n	800a9aa <HAL_RCC_OscConfig+0x22a>
 800a9a4:	69e3      	ldr	r3, [r4, #28]
 800a9a6:	2b80      	cmp	r3, #128	@ 0x80
 800a9a8:	d1f1      	bne.n	800a98e <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a9aa:	f7ff fc3d 	bl	800a228 <HAL_GetREVID>
 800a9ae:	f241 0303 	movw	r3, #4099	@ 0x1003
 800a9b2:	4298      	cmp	r0, r3
 800a9b4:	f200 80ce 	bhi.w	800ab54 <HAL_RCC_OscConfig+0x3d4>
 800a9b8:	6a22      	ldr	r2, [r4, #32]
 800a9ba:	2a20      	cmp	r2, #32
 800a9bc:	f000 81bb 	beq.w	800ad36 <HAL_RCC_OscConfig+0x5b6>
 800a9c0:	490b      	ldr	r1, [pc, #44]	@ (800a9f0 <HAL_RCC_OscConfig+0x270>)
 800a9c2:	684b      	ldr	r3, [r1, #4]
 800a9c4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800a9c8:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800a9cc:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	e745      	b.n	800a85e <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a9d2:	4a07      	ldr	r2, [pc, #28]	@ (800a9f0 <HAL_RCC_OscConfig+0x270>)
 800a9d4:	6813      	ldr	r3, [r2, #0]
 800a9d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a9da:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a9dc:	e6f8      	b.n	800a7d0 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 800a9de:	4d05      	ldr	r5, [pc, #20]	@ (800a9f4 <HAL_RCC_OscConfig+0x274>)
 800a9e0:	682b      	ldr	r3, [r5, #0]
 800a9e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a9e6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800a9e8:	f7ff fc18 	bl	800a21c <HAL_GetTick>
 800a9ec:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a9ee:	e008      	b.n	800aa02 <HAL_RCC_OscConfig+0x282>
 800a9f0:	58024400 	.word	0x58024400
 800a9f4:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9f8:	f7ff fc10 	bl	800a21c <HAL_GetTick>
 800a9fc:	1b80      	subs	r0, r0, r6
 800a9fe:	2864      	cmp	r0, #100	@ 0x64
 800aa00:	d83e      	bhi.n	800aa80 <HAL_RCC_OscConfig+0x300>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa02:	682b      	ldr	r3, [r5, #0]
 800aa04:	05da      	lsls	r2, r3, #23
 800aa06:	d5f7      	bpl.n	800a9f8 <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa08:	68a3      	ldr	r3, [r4, #8]
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	f000 818d 	beq.w	800ad2a <HAL_RCC_OscConfig+0x5aa>
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	f000 8168 	beq.w	800ace6 <HAL_RCC_OscConfig+0x566>
 800aa16:	2b05      	cmp	r3, #5
 800aa18:	4b85      	ldr	r3, [pc, #532]	@ (800ac30 <HAL_RCC_OscConfig+0x4b0>)
 800aa1a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800aa1c:	f000 8194 	beq.w	800ad48 <HAL_RCC_OscConfig+0x5c8>
 800aa20:	f022 0201 	bic.w	r2, r2, #1
 800aa24:	671a      	str	r2, [r3, #112]	@ 0x70
 800aa26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800aa28:	f022 0204 	bic.w	r2, r2, #4
 800aa2c:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800aa2e:	f7ff fbf5 	bl	800a21c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa32:	4e7f      	ldr	r6, [pc, #508]	@ (800ac30 <HAL_RCC_OscConfig+0x4b0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa34:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800aa38:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa3a:	e004      	b.n	800aa46 <HAL_RCC_OscConfig+0x2c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa3c:	f7ff fbee 	bl	800a21c <HAL_GetTick>
 800aa40:	1b40      	subs	r0, r0, r5
 800aa42:	42b8      	cmp	r0, r7
 800aa44:	d81c      	bhi.n	800aa80 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa46:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800aa48:	079b      	lsls	r3, r3, #30
 800aa4a:	d5f7      	bpl.n	800aa3c <HAL_RCC_OscConfig+0x2bc>
 800aa4c:	e73c      	b.n	800a8c8 <HAL_RCC_OscConfig+0x148>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800aa4e:	4d78      	ldr	r5, [pc, #480]	@ (800ac30 <HAL_RCC_OscConfig+0x4b0>)
 800aa50:	692a      	ldr	r2, [r5, #16]
 800aa52:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800aa56:	2a18      	cmp	r2, #24
 800aa58:	f000 80f0 	beq.w	800ac3c <HAL_RCC_OscConfig+0x4bc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa5c:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 800aa5e:	682b      	ldr	r3, [r5, #0]
 800aa60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa64:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa66:	d07f      	beq.n	800ab68 <HAL_RCC_OscConfig+0x3e8>
        tickstart = HAL_GetTick();
 800aa68:	f7ff fbd8 	bl	800a21c <HAL_GetTick>
 800aa6c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa6e:	682b      	ldr	r3, [r5, #0]
 800aa70:	019b      	lsls	r3, r3, #6
 800aa72:	f57f af2d 	bpl.w	800a8d0 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa76:	f7ff fbd1 	bl	800a21c <HAL_GetTick>
 800aa7a:	1b00      	subs	r0, r0, r4
 800aa7c:	2802      	cmp	r0, #2
 800aa7e:	d9f6      	bls.n	800aa6e <HAL_RCC_OscConfig+0x2ee>
            return HAL_TIMEOUT;
 800aa80:	2003      	movs	r0, #3
}
 800aa82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa84:	4d6a      	ldr	r5, [pc, #424]	@ (800ac30 <HAL_RCC_OscConfig+0x4b0>)
 800aa86:	682b      	ldr	r3, [r5, #0]
 800aa88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa8c:	602b      	str	r3, [r5, #0]
 800aa8e:	682b      	ldr	r3, [r5, #0]
 800aa90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aa94:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800aa96:	f7ff fbc1 	bl	800a21c <HAL_GetTick>
 800aa9a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aa9c:	e004      	b.n	800aaa8 <HAL_RCC_OscConfig+0x328>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa9e:	f7ff fbbd 	bl	800a21c <HAL_GetTick>
 800aaa2:	1b80      	subs	r0, r0, r6
 800aaa4:	2864      	cmp	r0, #100	@ 0x64
 800aaa6:	d8eb      	bhi.n	800aa80 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aaa8:	682b      	ldr	r3, [r5, #0]
 800aaaa:	039f      	lsls	r7, r3, #14
 800aaac:	d4f7      	bmi.n	800aa9e <HAL_RCC_OscConfig+0x31e>
 800aaae:	e69d      	b.n	800a7ec <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800aab0:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800aab2:	f023 0301 	bic.w	r3, r3, #1
 800aab6:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800aab8:	f7ff fbb0 	bl	800a21c <HAL_GetTick>
 800aabc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aabe:	e004      	b.n	800aaca <HAL_RCC_OscConfig+0x34a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aac0:	f7ff fbac 	bl	800a21c <HAL_GetTick>
 800aac4:	1b80      	subs	r0, r0, r6
 800aac6:	2802      	cmp	r0, #2
 800aac8:	d8da      	bhi.n	800aa80 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aaca:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800aacc:	0799      	lsls	r1, r3, #30
 800aace:	d4f7      	bmi.n	800aac0 <HAL_RCC_OscConfig+0x340>
 800aad0:	e6dd      	b.n	800a88e <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_HSI48_DISABLE();
 800aad2:	682b      	ldr	r3, [r5, #0]
 800aad4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aad8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800aada:	f7ff fb9f 	bl	800a21c <HAL_GetTick>
 800aade:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aae0:	e004      	b.n	800aaec <HAL_RCC_OscConfig+0x36c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aae2:	f7ff fb9b 	bl	800a21c <HAL_GetTick>
 800aae6:	1b80      	subs	r0, r0, r6
 800aae8:	2802      	cmp	r0, #2
 800aaea:	d8c9      	bhi.n	800aa80 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aaec:	682b      	ldr	r3, [r5, #0]
 800aaee:	0498      	lsls	r0, r3, #18
 800aaf0:	d4f7      	bmi.n	800aae2 <HAL_RCC_OscConfig+0x362>
 800aaf2:	e6e5      	b.n	800a8c0 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_CSI_DISABLE();
 800aaf4:	682b      	ldr	r3, [r5, #0]
 800aaf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aafa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800aafc:	f7ff fb8e 	bl	800a21c <HAL_GetTick>
 800ab00:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ab02:	e004      	b.n	800ab0e <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ab04:	f7ff fb8a 	bl	800a21c <HAL_GetTick>
 800ab08:	1b80      	subs	r0, r0, r6
 800ab0a:	2802      	cmp	r0, #2
 800ab0c:	d8b8      	bhi.n	800aa80 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ab0e:	682b      	ldr	r3, [r5, #0]
 800ab10:	05df      	lsls	r7, r3, #23
 800ab12:	d4f7      	bmi.n	800ab04 <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ab14:	6823      	ldr	r3, [r4, #0]
 800ab16:	e6a2      	b.n	800a85e <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 800ab18:	f023 0301 	bic.w	r3, r3, #1
 800ab1c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ab1e:	f7ff fb7d 	bl	800a21c <HAL_GetTick>
 800ab22:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ab24:	e004      	b.n	800ab30 <HAL_RCC_OscConfig+0x3b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab26:	f7ff fb79 	bl	800a21c <HAL_GetTick>
 800ab2a:	1b80      	subs	r0, r0, r6
 800ab2c:	2802      	cmp	r0, #2
 800ab2e:	d8a7      	bhi.n	800aa80 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ab30:	682b      	ldr	r3, [r5, #0]
 800ab32:	0758      	lsls	r0, r3, #29
 800ab34:	d4f7      	bmi.n	800ab26 <HAL_RCC_OscConfig+0x3a6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ab36:	6823      	ldr	r3, [r4, #0]
 800ab38:	e65b      	b.n	800a7f2 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ab3a:	0790      	lsls	r0, r2, #30
 800ab3c:	f47f af01 	bne.w	800a942 <HAL_RCC_OscConfig+0x1c2>
 800ab40:	e6ce      	b.n	800a8e0 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab42:	686b      	ldr	r3, [r5, #4]
 800ab44:	6922      	ldr	r2, [r4, #16]
 800ab46:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800ab4a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ab4e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ab50:	6823      	ldr	r3, [r4, #0]
 800ab52:	e64e      	b.n	800a7f2 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab54:	4a36      	ldr	r2, [pc, #216]	@ (800ac30 <HAL_RCC_OscConfig+0x4b0>)
 800ab56:	6a21      	ldr	r1, [r4, #32]
 800ab58:	68d3      	ldr	r3, [r2, #12]
 800ab5a:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800ab5e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800ab62:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ab64:	6823      	ldr	r3, [r4, #0]
 800ab66:	e67a      	b.n	800a85e <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 800ab68:	f7ff fb58 	bl	800a21c <HAL_GetTick>
 800ab6c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab6e:	e004      	b.n	800ab7a <HAL_RCC_OscConfig+0x3fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab70:	f7ff fb54 	bl	800a21c <HAL_GetTick>
 800ab74:	1b80      	subs	r0, r0, r6
 800ab76:	2802      	cmp	r0, #2
 800ab78:	d882      	bhi.n	800aa80 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab7a:	682b      	ldr	r3, [r5, #0]
 800ab7c:	0199      	lsls	r1, r3, #6
 800ab7e:	d4f7      	bmi.n	800ab70 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab80:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800ab82:	4b2c      	ldr	r3, [pc, #176]	@ (800ac34 <HAL_RCC_OscConfig+0x4b4>)
 800ab84:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ab86:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ab88:	492b      	ldr	r1, [pc, #172]	@ (800ac38 <HAL_RCC_OscConfig+0x4b8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab8a:	4e29      	ldr	r6, [pc, #164]	@ (800ac30 <HAL_RCC_OscConfig+0x4b0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ab90:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800ab94:	62ab      	str	r3, [r5, #40]	@ 0x28
 800ab96:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	3a01      	subs	r2, #1
 800ab9e:	025b      	lsls	r3, r3, #9
 800aba0:	0412      	lsls	r2, r2, #16
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800aba8:	4313      	orrs	r3, r2
 800abaa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800abac:	3a01      	subs	r2, #1
 800abae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800abb2:	4313      	orrs	r3, r2
 800abb4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800abb6:	3a01      	subs	r2, #1
 800abb8:	0612      	lsls	r2, r2, #24
 800abba:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800abbe:	4313      	orrs	r3, r2
 800abc0:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800abc2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800abc4:	f023 0301 	bic.w	r3, r3, #1
 800abc8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800abca:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 800abcc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800abce:	4011      	ands	r1, r2
 800abd0:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800abd4:	6369      	str	r1, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800abd6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800abd8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800abda:	f023 030c 	bic.w	r3, r3, #12
 800abde:	4313      	orrs	r3, r2
 800abe0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800abe2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800abe4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800abe6:	f023 0302 	bic.w	r3, r3, #2
 800abea:	4313      	orrs	r3, r2
 800abec:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800abee:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800abf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800abf4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abf6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800abf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800abfc:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800abfe:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800ac00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ac04:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800ac06:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800ac08:	f043 0301 	orr.w	r3, r3, #1
 800ac0c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800ac0e:	682b      	ldr	r3, [r5, #0]
 800ac10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ac14:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ac16:	f7ff fb01 	bl	800a21c <HAL_GetTick>
 800ac1a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ac1c:	6833      	ldr	r3, [r6, #0]
 800ac1e:	019a      	lsls	r2, r3, #6
 800ac20:	f53f ae56 	bmi.w	800a8d0 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac24:	f7ff fafa 	bl	800a21c <HAL_GetTick>
 800ac28:	1b00      	subs	r0, r0, r4
 800ac2a:	2802      	cmp	r0, #2
 800ac2c:	d9f6      	bls.n	800ac1c <HAL_RCC_OscConfig+0x49c>
 800ac2e:	e727      	b.n	800aa80 <HAL_RCC_OscConfig+0x300>
 800ac30:	58024400 	.word	0x58024400
 800ac34:	fffffc0c 	.word	0xfffffc0c
 800ac38:	ffff0007 	.word	0xffff0007
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac3c:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ac3e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ac40:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac42:	f43f aea4 	beq.w	800a98e <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac46:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac4a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800ac4c:	428b      	cmp	r3, r1
 800ac4e:	f47f ae9e 	bne.w	800a98e <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ac52:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac56:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	f47f ae98 	bne.w	800a98e <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ac5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ac60:	f3c0 0208 	ubfx	r2, r0, #0, #9
 800ac64:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ac66:	429a      	cmp	r2, r3
 800ac68:	f47f ae91 	bne.w	800a98e <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ac6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac6e:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800ac72:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ac74:	429a      	cmp	r2, r3
 800ac76:	f47f ae8a 	bne.w	800a98e <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ac7a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ac7c:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800ac80:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ac82:	429a      	cmp	r2, r3
 800ac84:	f47f ae83 	bne.w	800a98e <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ac88:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ac8a:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800ac8e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ac90:	4298      	cmp	r0, r3
 800ac92:	f47f ae7c 	bne.w	800a98e <HAL_RCC_OscConfig+0x20e>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ac96:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ac98:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ac9a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	f43f ae16 	beq.w	800a8d0 <HAL_RCC_OscConfig+0x150>
          __HAL_RCC_PLLFRACN_DISABLE();
 800aca4:	4a2d      	ldr	r2, [pc, #180]	@ (800ad5c <HAL_RCC_OscConfig+0x5dc>)
 800aca6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800aca8:	f023 0301 	bic.w	r3, r3, #1
 800acac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800acae:	f7ff fab5 	bl	800a21c <HAL_GetTick>
 800acb2:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800acb4:	f7ff fab2 	bl	800a21c <HAL_GetTick>
 800acb8:	42a8      	cmp	r0, r5
 800acba:	d0fb      	beq.n	800acb4 <HAL_RCC_OscConfig+0x534>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800acbc:	4a27      	ldr	r2, [pc, #156]	@ (800ad5c <HAL_RCC_OscConfig+0x5dc>)
 800acbe:	4b28      	ldr	r3, [pc, #160]	@ (800ad60 <HAL_RCC_OscConfig+0x5e0>)
 800acc0:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800acc2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800acc4:	4003      	ands	r3, r0
 800acc6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800acca:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800accc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800acce:	f043 0301 	orr.w	r3, r3, #1
 800acd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800acd4:	e5fc      	b.n	800a8d0 <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800acd6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800acda:	601a      	str	r2, [r3, #0]
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ace2:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ace4:	e574      	b.n	800a7d0 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ace6:	4d1d      	ldr	r5, [pc, #116]	@ (800ad5c <HAL_RCC_OscConfig+0x5dc>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ace8:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800acec:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800acee:	f023 0301 	bic.w	r3, r3, #1
 800acf2:	672b      	str	r3, [r5, #112]	@ 0x70
 800acf4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800acf6:	f023 0304 	bic.w	r3, r3, #4
 800acfa:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800acfc:	f7ff fa8e 	bl	800a21c <HAL_GetTick>
 800ad00:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ad02:	e005      	b.n	800ad10 <HAL_RCC_OscConfig+0x590>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad04:	f7ff fa8a 	bl	800a21c <HAL_GetTick>
 800ad08:	1b80      	subs	r0, r0, r6
 800ad0a:	42b8      	cmp	r0, r7
 800ad0c:	f63f aeb8 	bhi.w	800aa80 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ad10:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800ad12:	0798      	lsls	r0, r3, #30
 800ad14:	d4f6      	bmi.n	800ad04 <HAL_RCC_OscConfig+0x584>
 800ad16:	e5d7      	b.n	800a8c8 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad18:	68eb      	ldr	r3, [r5, #12]
 800ad1a:	6a22      	ldr	r2, [r4, #32]
 800ad1c:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800ad20:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ad24:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad26:	6823      	ldr	r3, [r4, #0]
 800ad28:	e599      	b.n	800a85e <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad2a:	4a0c      	ldr	r2, [pc, #48]	@ (800ad5c <HAL_RCC_OscConfig+0x5dc>)
 800ad2c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800ad2e:	f043 0301 	orr.w	r3, r3, #1
 800ad32:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ad34:	e67b      	b.n	800aa2e <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad36:	4a09      	ldr	r2, [pc, #36]	@ (800ad5c <HAL_RCC_OscConfig+0x5dc>)
 800ad38:	6853      	ldr	r3, [r2, #4]
 800ad3a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800ad3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ad42:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad44:	6823      	ldr	r3, [r4, #0]
 800ad46:	e58a      	b.n	800a85e <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad48:	f042 0204 	orr.w	r2, r2, #4
 800ad4c:	671a      	str	r2, [r3, #112]	@ 0x70
 800ad4e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ad50:	f042 0201 	orr.w	r2, r2, #1
 800ad54:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ad56:	e66a      	b.n	800aa2e <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 800ad58:	2001      	movs	r0, #1
}
 800ad5a:	4770      	bx	lr
 800ad5c:	58024400 	.word	0x58024400
 800ad60:	ffff0007 	.word	0xffff0007

0800ad64 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ad64:	4a0c      	ldr	r2, [pc, #48]	@ (800ad98 <HAL_RCC_GetSysClockFreq+0x34>)
 800ad66:	6913      	ldr	r3, [r2, #16]
 800ad68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ad6c:	2b10      	cmp	r3, #16
 800ad6e:	d004      	beq.n	800ad7a <HAL_RCC_GetSysClockFreq+0x16>
 800ad70:	2b18      	cmp	r3, #24
 800ad72:	d00d      	beq.n	800ad90 <HAL_RCC_GetSysClockFreq+0x2c>
 800ad74:	b11b      	cbz	r3, 800ad7e <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 800ad76:	4809      	ldr	r0, [pc, #36]	@ (800ad9c <HAL_RCC_GetSysClockFreq+0x38>)
 800ad78:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ad7a:	4809      	ldr	r0, [pc, #36]	@ (800ada0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800ad7c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad7e:	6813      	ldr	r3, [r2, #0]
 800ad80:	069b      	lsls	r3, r3, #26
 800ad82:	d507      	bpl.n	800ad94 <HAL_RCC_GetSysClockFreq+0x30>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad84:	6813      	ldr	r3, [r2, #0]
 800ad86:	4807      	ldr	r0, [pc, #28]	@ (800ada4 <HAL_RCC_GetSysClockFreq+0x40>)
 800ad88:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ad8c:	40d8      	lsrs	r0, r3
 800ad8e:	4770      	bx	lr
 800ad90:	f7ff bc84 	b.w	800a69c <HAL_RCC_GetSysClockFreq.part.0>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ad94:	4803      	ldr	r0, [pc, #12]	@ (800ada4 <HAL_RCC_GetSysClockFreq+0x40>)
}
 800ad96:	4770      	bx	lr
 800ad98:	58024400 	.word	0x58024400
 800ad9c:	003d0900 	.word	0x003d0900
 800ada0:	007a1200 	.word	0x007a1200
 800ada4:	03d09000 	.word	0x03d09000

0800ada8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800ada8:	2800      	cmp	r0, #0
 800adaa:	f000 810e 	beq.w	800afca <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800adae:	4a8d      	ldr	r2, [pc, #564]	@ (800afe4 <HAL_RCC_ClockConfig+0x23c>)
 800adb0:	6813      	ldr	r3, [r2, #0]
 800adb2:	f003 030f 	and.w	r3, r3, #15
 800adb6:	428b      	cmp	r3, r1
{
 800adb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adbc:	4604      	mov	r4, r0
 800adbe:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800adc0:	d20c      	bcs.n	800addc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adc2:	6813      	ldr	r3, [r2, #0]
 800adc4:	f023 030f 	bic.w	r3, r3, #15
 800adc8:	430b      	orrs	r3, r1
 800adca:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800adcc:	6813      	ldr	r3, [r2, #0]
 800adce:	f003 030f 	and.w	r3, r3, #15
 800add2:	428b      	cmp	r3, r1
 800add4:	d002      	beq.n	800addc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800add6:	2001      	movs	r0, #1
}
 800add8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800addc:	6823      	ldr	r3, [r4, #0]
 800adde:	0758      	lsls	r0, r3, #29
 800ade0:	d50b      	bpl.n	800adfa <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ade2:	4981      	ldr	r1, [pc, #516]	@ (800afe8 <HAL_RCC_ClockConfig+0x240>)
 800ade4:	6920      	ldr	r0, [r4, #16]
 800ade6:	698a      	ldr	r2, [r1, #24]
 800ade8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800adec:	4290      	cmp	r0, r2
 800adee:	d904      	bls.n	800adfa <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800adf0:	698a      	ldr	r2, [r1, #24]
 800adf2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800adf6:	4302      	orrs	r2, r0
 800adf8:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800adfa:	0719      	lsls	r1, r3, #28
 800adfc:	d50b      	bpl.n	800ae16 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800adfe:	497a      	ldr	r1, [pc, #488]	@ (800afe8 <HAL_RCC_ClockConfig+0x240>)
 800ae00:	6960      	ldr	r0, [r4, #20]
 800ae02:	69ca      	ldr	r2, [r1, #28]
 800ae04:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800ae08:	4290      	cmp	r0, r2
 800ae0a:	d904      	bls.n	800ae16 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ae0c:	69ca      	ldr	r2, [r1, #28]
 800ae0e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800ae12:	4302      	orrs	r2, r0
 800ae14:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae16:	06da      	lsls	r2, r3, #27
 800ae18:	d50b      	bpl.n	800ae32 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ae1a:	4973      	ldr	r1, [pc, #460]	@ (800afe8 <HAL_RCC_ClockConfig+0x240>)
 800ae1c:	69a0      	ldr	r0, [r4, #24]
 800ae1e:	69ca      	ldr	r2, [r1, #28]
 800ae20:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800ae24:	4290      	cmp	r0, r2
 800ae26:	d904      	bls.n	800ae32 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ae28:	69ca      	ldr	r2, [r1, #28]
 800ae2a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ae2e:	4302      	orrs	r2, r0
 800ae30:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ae32:	069f      	lsls	r7, r3, #26
 800ae34:	d50b      	bpl.n	800ae4e <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ae36:	496c      	ldr	r1, [pc, #432]	@ (800afe8 <HAL_RCC_ClockConfig+0x240>)
 800ae38:	69e0      	ldr	r0, [r4, #28]
 800ae3a:	6a0a      	ldr	r2, [r1, #32]
 800ae3c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800ae40:	4290      	cmp	r0, r2
 800ae42:	d904      	bls.n	800ae4e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ae44:	6a0a      	ldr	r2, [r1, #32]
 800ae46:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800ae4a:	4302      	orrs	r2, r0
 800ae4c:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae4e:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae50:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae54:	f140 80ab 	bpl.w	800afae <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ae58:	4e63      	ldr	r6, [pc, #396]	@ (800afe8 <HAL_RCC_ClockConfig+0x240>)
 800ae5a:	68e0      	ldr	r0, [r4, #12]
 800ae5c:	69b1      	ldr	r1, [r6, #24]
 800ae5e:	f001 010f 	and.w	r1, r1, #15
 800ae62:	4288      	cmp	r0, r1
 800ae64:	d904      	bls.n	800ae70 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae66:	69b1      	ldr	r1, [r6, #24]
 800ae68:	f021 010f 	bic.w	r1, r1, #15
 800ae6c:	4301      	orrs	r1, r0
 800ae6e:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae70:	2a00      	cmp	r2, #0
 800ae72:	d030      	beq.n	800aed6 <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ae74:	4a5c      	ldr	r2, [pc, #368]	@ (800afe8 <HAL_RCC_ClockConfig+0x240>)
 800ae76:	68a1      	ldr	r1, [r4, #8]
 800ae78:	6993      	ldr	r3, [r2, #24]
 800ae7a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ae7e:	430b      	orrs	r3, r1
 800ae80:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae82:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ae84:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae86:	2902      	cmp	r1, #2
 800ae88:	f000 80a1 	beq.w	800afce <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae8c:	2903      	cmp	r1, #3
 800ae8e:	f000 8098 	beq.w	800afc2 <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ae92:	2901      	cmp	r1, #1
 800ae94:	f000 80a1 	beq.w	800afda <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ae98:	075f      	lsls	r7, r3, #29
 800ae9a:	d59c      	bpl.n	800add6 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ae9c:	4e52      	ldr	r6, [pc, #328]	@ (800afe8 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae9e:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aea2:	6933      	ldr	r3, [r6, #16]
 800aea4:	f023 0307 	bic.w	r3, r3, #7
 800aea8:	430b      	orrs	r3, r1
 800aeaa:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800aeac:	f7ff f9b6 	bl	800a21c <HAL_GetTick>
 800aeb0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aeb2:	e005      	b.n	800aec0 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aeb4:	f7ff f9b2 	bl	800a21c <HAL_GetTick>
 800aeb8:	1bc0      	subs	r0, r0, r7
 800aeba:	4540      	cmp	r0, r8
 800aebc:	f200 808b 	bhi.w	800afd6 <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aec0:	6933      	ldr	r3, [r6, #16]
 800aec2:	6862      	ldr	r2, [r4, #4]
 800aec4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aec8:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800aecc:	d1f2      	bne.n	800aeb4 <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aece:	6823      	ldr	r3, [r4, #0]
 800aed0:	079e      	lsls	r6, r3, #30
 800aed2:	d506      	bpl.n	800aee2 <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aed4:	68e0      	ldr	r0, [r4, #12]
 800aed6:	4944      	ldr	r1, [pc, #272]	@ (800afe8 <HAL_RCC_ClockConfig+0x240>)
 800aed8:	698a      	ldr	r2, [r1, #24]
 800aeda:	f002 020f 	and.w	r2, r2, #15
 800aede:	4282      	cmp	r2, r0
 800aee0:	d869      	bhi.n	800afb6 <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aee2:	4940      	ldr	r1, [pc, #256]	@ (800afe4 <HAL_RCC_ClockConfig+0x23c>)
 800aee4:	680a      	ldr	r2, [r1, #0]
 800aee6:	f002 020f 	and.w	r2, r2, #15
 800aeea:	42aa      	cmp	r2, r5
 800aeec:	d90a      	bls.n	800af04 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aeee:	680a      	ldr	r2, [r1, #0]
 800aef0:	f022 020f 	bic.w	r2, r2, #15
 800aef4:	432a      	orrs	r2, r5
 800aef6:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aef8:	680a      	ldr	r2, [r1, #0]
 800aefa:	f002 020f 	and.w	r2, r2, #15
 800aefe:	42aa      	cmp	r2, r5
 800af00:	f47f af69 	bne.w	800add6 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800af04:	0758      	lsls	r0, r3, #29
 800af06:	d50b      	bpl.n	800af20 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800af08:	4937      	ldr	r1, [pc, #220]	@ (800afe8 <HAL_RCC_ClockConfig+0x240>)
 800af0a:	6920      	ldr	r0, [r4, #16]
 800af0c:	698a      	ldr	r2, [r1, #24]
 800af0e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800af12:	4290      	cmp	r0, r2
 800af14:	d204      	bcs.n	800af20 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800af16:	698a      	ldr	r2, [r1, #24]
 800af18:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800af1c:	4302      	orrs	r2, r0
 800af1e:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af20:	0719      	lsls	r1, r3, #28
 800af22:	d50b      	bpl.n	800af3c <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800af24:	4930      	ldr	r1, [pc, #192]	@ (800afe8 <HAL_RCC_ClockConfig+0x240>)
 800af26:	6960      	ldr	r0, [r4, #20]
 800af28:	69ca      	ldr	r2, [r1, #28]
 800af2a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800af2e:	4290      	cmp	r0, r2
 800af30:	d204      	bcs.n	800af3c <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800af32:	69ca      	ldr	r2, [r1, #28]
 800af34:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800af38:	4302      	orrs	r2, r0
 800af3a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af3c:	06da      	lsls	r2, r3, #27
 800af3e:	d50b      	bpl.n	800af58 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800af40:	4929      	ldr	r1, [pc, #164]	@ (800afe8 <HAL_RCC_ClockConfig+0x240>)
 800af42:	69a0      	ldr	r0, [r4, #24]
 800af44:	69ca      	ldr	r2, [r1, #28]
 800af46:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800af4a:	4290      	cmp	r0, r2
 800af4c:	d204      	bcs.n	800af58 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800af4e:	69ca      	ldr	r2, [r1, #28]
 800af50:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800af54:	4302      	orrs	r2, r0
 800af56:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800af58:	069b      	lsls	r3, r3, #26
 800af5a:	d50b      	bpl.n	800af74 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800af5c:	4a22      	ldr	r2, [pc, #136]	@ (800afe8 <HAL_RCC_ClockConfig+0x240>)
 800af5e:	69e1      	ldr	r1, [r4, #28]
 800af60:	6a13      	ldr	r3, [r2, #32]
 800af62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800af66:	4299      	cmp	r1, r3
 800af68:	d204      	bcs.n	800af74 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800af6a:	6a13      	ldr	r3, [r2, #32]
 800af6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af70:	430b      	orrs	r3, r1
 800af72:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800af74:	f7ff fef6 	bl	800ad64 <HAL_RCC_GetSysClockFreq>
 800af78:	4a1b      	ldr	r2, [pc, #108]	@ (800afe8 <HAL_RCC_ClockConfig+0x240>)
 800af7a:	4603      	mov	r3, r0
 800af7c:	481b      	ldr	r0, [pc, #108]	@ (800afec <HAL_RCC_ClockConfig+0x244>)
 800af7e:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800af80:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800af82:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800af86:	4d1a      	ldr	r5, [pc, #104]	@ (800aff0 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800af88:	f002 020f 	and.w	r2, r2, #15
 800af8c:	4c19      	ldr	r4, [pc, #100]	@ (800aff4 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800af8e:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800af90:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800af92:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800af96:	4818      	ldr	r0, [pc, #96]	@ (800aff8 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800af98:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800af9c:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800af9e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 800afa0:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800afa2:	40d3      	lsrs	r3, r2
 800afa4:	6023      	str	r3, [r4, #0]
}
 800afa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800afaa:	f7ff b8d5 	b.w	800a158 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800afae:	2a00      	cmp	r2, #0
 800afb0:	f47f af60 	bne.w	800ae74 <HAL_RCC_ClockConfig+0xcc>
 800afb4:	e795      	b.n	800aee2 <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800afb6:	698a      	ldr	r2, [r1, #24]
 800afb8:	f022 020f 	bic.w	r2, r2, #15
 800afbc:	4302      	orrs	r2, r0
 800afbe:	618a      	str	r2, [r1, #24]
 800afc0:	e78f      	b.n	800aee2 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800afc2:	019a      	lsls	r2, r3, #6
 800afc4:	f53f af6a 	bmi.w	800ae9c <HAL_RCC_ClockConfig+0xf4>
 800afc8:	e705      	b.n	800add6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800afca:	2001      	movs	r0, #1
}
 800afcc:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800afce:	0398      	lsls	r0, r3, #14
 800afd0:	f53f af64 	bmi.w	800ae9c <HAL_RCC_ClockConfig+0xf4>
 800afd4:	e6ff      	b.n	800add6 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800afd6:	2003      	movs	r0, #3
 800afd8:	e6fe      	b.n	800add8 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800afda:	05db      	lsls	r3, r3, #23
 800afdc:	f53f af5e 	bmi.w	800ae9c <HAL_RCC_ClockConfig+0xf4>
 800afe0:	e6f9      	b.n	800add6 <HAL_RCC_ClockConfig+0x2e>
 800afe2:	bf00      	nop
 800afe4:	52002000 	.word	0x52002000
 800afe8:	58024400 	.word	0x58024400
 800afec:	0800ec84 	.word	0x0800ec84
 800aff0:	20000004 	.word	0x20000004
 800aff4:	20000000 	.word	0x20000000
 800aff8:	20000034 	.word	0x20000034

0800affc <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800affc:	4a18      	ldr	r2, [pc, #96]	@ (800b060 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800affe:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b000:	6913      	ldr	r3, [r2, #16]
 800b002:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b006:	2b10      	cmp	r3, #16
 800b008:	d019      	beq.n	800b03e <HAL_RCC_GetHCLKFreq+0x42>
 800b00a:	2b18      	cmp	r3, #24
 800b00c:	d022      	beq.n	800b054 <HAL_RCC_GetHCLKFreq+0x58>
 800b00e:	b1c3      	cbz	r3, 800b042 <HAL_RCC_GetHCLKFreq+0x46>
      sysclockfreq = CSI_VALUE;
 800b010:	4b14      	ldr	r3, [pc, #80]	@ (800b064 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b012:	4913      	ldr	r1, [pc, #76]	@ (800b060 <HAL_RCC_GetHCLKFreq+0x64>)
 800b014:	4814      	ldr	r0, [pc, #80]	@ (800b068 <HAL_RCC_GetHCLKFreq+0x6c>)
 800b016:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b018:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b01a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b01e:	4c13      	ldr	r4, [pc, #76]	@ (800b06c <HAL_RCC_GetHCLKFreq+0x70>)
 800b020:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b024:	4d12      	ldr	r5, [pc, #72]	@ (800b070 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b026:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b028:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b02a:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b02e:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b032:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b034:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 800b038:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b03a:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800b03c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b03e:	4b0d      	ldr	r3, [pc, #52]	@ (800b074 <HAL_RCC_GetHCLKFreq+0x78>)
 800b040:	e7e7      	b.n	800b012 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b042:	6813      	ldr	r3, [r2, #0]
 800b044:	069b      	lsls	r3, r3, #26
 800b046:	d509      	bpl.n	800b05c <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b048:	6812      	ldr	r2, [r2, #0]
 800b04a:	4b0b      	ldr	r3, [pc, #44]	@ (800b078 <HAL_RCC_GetHCLKFreq+0x7c>)
 800b04c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800b050:	40d3      	lsrs	r3, r2
 800b052:	e7de      	b.n	800b012 <HAL_RCC_GetHCLKFreq+0x16>
 800b054:	f7ff fb22 	bl	800a69c <HAL_RCC_GetSysClockFreq.part.0>
 800b058:	4603      	mov	r3, r0
 800b05a:	e7da      	b.n	800b012 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b05c:	4b06      	ldr	r3, [pc, #24]	@ (800b078 <HAL_RCC_GetHCLKFreq+0x7c>)
 800b05e:	e7d8      	b.n	800b012 <HAL_RCC_GetHCLKFreq+0x16>
 800b060:	58024400 	.word	0x58024400
 800b064:	003d0900 	.word	0x003d0900
 800b068:	0800ec84 	.word	0x0800ec84
 800b06c:	20000000 	.word	0x20000000
 800b070:	20000004 	.word	0x20000004
 800b074:	007a1200 	.word	0x007a1200
 800b078:	03d09000 	.word	0x03d09000

0800b07c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b07c:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b07e:	f7ff ffbd 	bl	800affc <HAL_RCC_GetHCLKFreq>
 800b082:	4b05      	ldr	r3, [pc, #20]	@ (800b098 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800b084:	4a05      	ldr	r2, [pc, #20]	@ (800b09c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b086:	69db      	ldr	r3, [r3, #28]
 800b088:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b08c:	5cd3      	ldrb	r3, [r2, r3]
 800b08e:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b092:	40d8      	lsrs	r0, r3
 800b094:	bd08      	pop	{r3, pc}
 800b096:	bf00      	nop
 800b098:	58024400 	.word	0x58024400
 800b09c:	0800ec84 	.word	0x0800ec84

0800b0a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b0a0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b0a2:	f7ff ffab 	bl	800affc <HAL_RCC_GetHCLKFreq>
 800b0a6:	4b05      	ldr	r3, [pc, #20]	@ (800b0bc <HAL_RCC_GetPCLK2Freq+0x1c>)
 800b0a8:	4a05      	ldr	r2, [pc, #20]	@ (800b0c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b0aa:	69db      	ldr	r3, [r3, #28]
 800b0ac:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800b0b0:	5cd3      	ldrb	r3, [r2, r3]
 800b0b2:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b0b6:	40d8      	lsrs	r0, r3
 800b0b8:	bd08      	pop	{r3, pc}
 800b0ba:	bf00      	nop
 800b0bc:	58024400 	.word	0x58024400
 800b0c0:	0800ec84 	.word	0x0800ec84

0800b0c4 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 800b0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b0c6:	4c36      	ldr	r4, [pc, #216]	@ (800b1a0 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 800b0c8:	4606      	mov	r6, r0
 800b0ca:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 800b0cc:	6823      	ldr	r3, [r4, #0]
 800b0ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b0d2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0d4:	f7ff f8a2 	bl	800a21c <HAL_GetTick>
 800b0d8:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0da:	e004      	b.n	800b0e6 <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b0dc:	f7ff f89e 	bl	800a21c <HAL_GetTick>
 800b0e0:	1b40      	subs	r0, r0, r5
 800b0e2:	2802      	cmp	r0, #2
 800b0e4:	d856      	bhi.n	800b194 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0e6:	6823      	ldr	r3, [r4, #0]
 800b0e8:	011a      	lsls	r2, r3, #4
 800b0ea:	d4f7      	bmi.n	800b0dc <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b0ec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b0ee:	6832      	ldr	r2, [r6, #0]
 800b0f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800b0f4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800b0f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b0fa:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800b0fe:	3b01      	subs	r3, #1
 800b100:	3a01      	subs	r2, #1
 800b102:	025b      	lsls	r3, r3, #9
 800b104:	0412      	lsls	r2, r2, #16
 800b106:	b29b      	uxth	r3, r3
 800b108:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b10c:	4313      	orrs	r3, r2
 800b10e:	6872      	ldr	r2, [r6, #4]
 800b110:	3a01      	subs	r2, #1
 800b112:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b116:	4313      	orrs	r3, r2
 800b118:	6932      	ldr	r2, [r6, #16]
 800b11a:	3a01      	subs	r2, #1
 800b11c:	0612      	lsls	r2, r2, #24
 800b11e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b122:	4313      	orrs	r3, r2
 800b124:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b126:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b128:	6972      	ldr	r2, [r6, #20]
 800b12a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b12e:	4313      	orrs	r3, r2
 800b130:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b132:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b134:	69b3      	ldr	r3, [r6, #24]
 800b136:	f022 0220 	bic.w	r2, r2, #32
 800b13a:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b13c:	4b19      	ldr	r3, [pc, #100]	@ (800b1a4 <RCCEx_PLL2_Config.part.0+0xe0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b13e:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b140:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b142:	f022 0210 	bic.w	r2, r2, #16
 800b146:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b148:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800b14a:	69f2      	ldr	r2, [r6, #28]
 800b14c:	400b      	ands	r3, r1
 800b14e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b152:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b154:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b156:	f043 0310 	orr.w	r3, r3, #16
 800b15a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b15c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800b15e:	b1df      	cbz	r7, 800b198 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b160:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b162:	bf0c      	ite	eq
 800b164:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b168:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800b16c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b16e:	4c0c      	ldr	r4, [pc, #48]	@ (800b1a0 <RCCEx_PLL2_Config.part.0+0xdc>)
 800b170:	6823      	ldr	r3, [r4, #0]
 800b172:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b176:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b178:	f7ff f850 	bl	800a21c <HAL_GetTick>
 800b17c:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b17e:	e004      	b.n	800b18a <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b180:	f7ff f84c 	bl	800a21c <HAL_GetTick>
 800b184:	1b40      	subs	r0, r0, r5
 800b186:	2802      	cmp	r0, #2
 800b188:	d804      	bhi.n	800b194 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b18a:	6823      	ldr	r3, [r4, #0]
 800b18c:	011b      	lsls	r3, r3, #4
 800b18e:	d5f7      	bpl.n	800b180 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 800b190:	2000      	movs	r0, #0
}
 800b192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800b194:	2003      	movs	r0, #3
}
 800b196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b198:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b19c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b19e:	e7e6      	b.n	800b16e <RCCEx_PLL2_Config.part.0+0xaa>
 800b1a0:	58024400 	.word	0x58024400
 800b1a4:	ffff0007 	.word	0xffff0007

0800b1a8 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 800b1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b1aa:	4c36      	ldr	r4, [pc, #216]	@ (800b284 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 800b1ac:	4606      	mov	r6, r0
 800b1ae:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 800b1b0:	6823      	ldr	r3, [r4, #0]
 800b1b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b1b6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1b8:	f7ff f830 	bl	800a21c <HAL_GetTick>
 800b1bc:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b1be:	e004      	b.n	800b1ca <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b1c0:	f7ff f82c 	bl	800a21c <HAL_GetTick>
 800b1c4:	1b40      	subs	r0, r0, r5
 800b1c6:	2802      	cmp	r0, #2
 800b1c8:	d856      	bhi.n	800b278 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b1ca:	6823      	ldr	r3, [r4, #0]
 800b1cc:	009a      	lsls	r2, r3, #2
 800b1ce:	d4f7      	bmi.n	800b1c0 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b1d0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b1d2:	6832      	ldr	r2, [r6, #0]
 800b1d4:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800b1d8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800b1dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b1de:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	3a01      	subs	r2, #1
 800b1e6:	025b      	lsls	r3, r3, #9
 800b1e8:	0412      	lsls	r2, r2, #16
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	6872      	ldr	r2, [r6, #4]
 800b1f4:	3a01      	subs	r2, #1
 800b1f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	6932      	ldr	r2, [r6, #16]
 800b1fe:	3a01      	subs	r2, #1
 800b200:	0612      	lsls	r2, r2, #24
 800b202:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b206:	4313      	orrs	r3, r2
 800b208:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b20a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b20c:	6972      	ldr	r2, [r6, #20]
 800b20e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800b212:	4313      	orrs	r3, r2
 800b214:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b216:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b218:	69b3      	ldr	r3, [r6, #24]
 800b21a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b21e:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b220:	4b19      	ldr	r3, [pc, #100]	@ (800b288 <RCCEx_PLL3_Config.part.0+0xe0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b222:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b224:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b226:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b22a:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b22c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b22e:	69f2      	ldr	r2, [r6, #28]
 800b230:	400b      	ands	r3, r1
 800b232:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b236:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b238:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b23a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b23e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b240:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800b242:	b1df      	cbz	r7, 800b27c <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b244:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b246:	bf0c      	ite	eq
 800b248:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b24c:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800b250:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b252:	4c0c      	ldr	r4, [pc, #48]	@ (800b284 <RCCEx_PLL3_Config.part.0+0xdc>)
 800b254:	6823      	ldr	r3, [r4, #0]
 800b256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b25a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b25c:	f7fe ffde 	bl	800a21c <HAL_GetTick>
 800b260:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b262:	e004      	b.n	800b26e <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b264:	f7fe ffda 	bl	800a21c <HAL_GetTick>
 800b268:	1b40      	subs	r0, r0, r5
 800b26a:	2802      	cmp	r0, #2
 800b26c:	d804      	bhi.n	800b278 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b26e:	6823      	ldr	r3, [r4, #0]
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	d5f7      	bpl.n	800b264 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 800b274:	2000      	movs	r0, #0
}
 800b276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800b278:	2003      	movs	r0, #3
}
 800b27a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b27c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b280:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b282:	e7e6      	b.n	800b252 <RCCEx_PLL3_Config.part.0+0xaa>
 800b284:	58024400 	.word	0x58024400
 800b288:	ffff0007 	.word	0xffff0007

0800b28c <HAL_RCCEx_PeriphCLKConfig>:
{
 800b28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b290:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800b294:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b296:	011d      	lsls	r5, r3, #4
 800b298:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 800b29c:	d525      	bpl.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800b29e:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 800b2a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800b2a4:	f000 8683 	beq.w	800bfae <HAL_RCCEx_PeriphCLKConfig+0xd22>
 800b2a8:	d814      	bhi.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
 800b2aa:	2900      	cmp	r1, #0
 800b2ac:	f000 86f9 	beq.w	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0xe16>
 800b2b0:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800b2b4:	f040 841b 	bne.w	800baee <HAL_RCCEx_PeriphCLKConfig+0x862>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b2b8:	49ad      	ldr	r1, [pc, #692]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b2ba:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b2bc:	f001 0103 	and.w	r1, r1, #3
 800b2c0:	2903      	cmp	r1, #3
 800b2c2:	f000 8414 	beq.w	800baee <HAL_RCCEx_PeriphCLKConfig+0x862>
 800b2c6:	2102      	movs	r1, #2
 800b2c8:	3008      	adds	r0, #8
 800b2ca:	f7ff fefb 	bl	800b0c4 <RCCEx_PLL2_Config.part.0>
 800b2ce:	4606      	mov	r6, r0
 800b2d0:	f000 be79 	b.w	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800b2d4:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 800b2d8:	f040 8409 	bne.w	800baee <HAL_RCCEx_PeriphCLKConfig+0x862>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b2dc:	4da4      	ldr	r5, [pc, #656]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b2de:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b2e0:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 800b2e2:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 800b2e6:	4301      	orrs	r1, r0
 800b2e8:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b2ea:	05d8      	lsls	r0, r3, #23
 800b2ec:	d50a      	bpl.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch (PeriphClkInit->Sai1ClockSelection)
 800b2ee:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800b2f0:	2904      	cmp	r1, #4
 800b2f2:	d806      	bhi.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b2f4:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b2f8:	062504ce 	.word	0x062504ce
 800b2fc:	04d3063a 	.word	0x04d3063a
 800b300:	04d3      	.short	0x04d3
        ret = HAL_ERROR;
 800b302:	2601      	movs	r6, #1
 800b304:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b306:	0599      	lsls	r1, r3, #22
 800b308:	d524      	bpl.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800b30a:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800b30c:	2980      	cmp	r1, #128	@ 0x80
 800b30e:	f000 863d 	beq.w	800bf8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b312:	f200 8122 	bhi.w	800b55a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b316:	2900      	cmp	r1, #0
 800b318:	f000 84a6 	beq.w	800bc68 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 800b31c:	2940      	cmp	r1, #64	@ 0x40
 800b31e:	f040 8123 	bne.w	800b568 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b322:	4993      	ldr	r1, [pc, #588]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b324:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b326:	f001 0103 	and.w	r1, r1, #3
 800b32a:	2903      	cmp	r1, #3
 800b32c:	f000 811c 	beq.w	800b568 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800b330:	2100      	movs	r1, #0
 800b332:	f104 0008 	add.w	r0, r4, #8
 800b336:	f7ff fec5 	bl	800b0c4 <RCCEx_PLL2_Config.part.0>
 800b33a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b33c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b340:	2d00      	cmp	r5, #0
 800b342:	f040 8499 	bne.w	800bc78 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b346:	4f8a      	ldr	r7, [pc, #552]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b348:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800b34a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b34c:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 800b350:	4301      	orrs	r1, r0
 800b352:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b354:	055f      	lsls	r7, r3, #21
 800b356:	d528      	bpl.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4AClockSelection)
 800b358:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 800b35c:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 800b360:	f000 85de 	beq.w	800bf20 <HAL_RCCEx_PeriphCLKConfig+0xc94>
 800b364:	f200 8106 	bhi.w	800b574 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800b368:	2900      	cmp	r1, #0
 800b36a:	f000 8472 	beq.w	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x9c6>
 800b36e:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800b372:	f040 8107 	bne.w	800b584 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b376:	497e      	ldr	r1, [pc, #504]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b378:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b37a:	f001 0103 	and.w	r1, r1, #3
 800b37e:	2903      	cmp	r1, #3
 800b380:	f000 8100 	beq.w	800b584 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800b384:	2100      	movs	r1, #0
 800b386:	f104 0008 	add.w	r0, r4, #8
 800b38a:	f7ff fe9b 	bl	800b0c4 <RCCEx_PLL2_Config.part.0>
 800b38e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b390:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b394:	2d00      	cmp	r5, #0
 800b396:	f040 8464 	bne.w	800bc62 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b39a:	4f75      	ldr	r7, [pc, #468]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b39c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 800b3a0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b3a2:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 800b3a6:	4301      	orrs	r1, r0
 800b3a8:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b3aa:	0518      	lsls	r0, r3, #20
 800b3ac:	d528      	bpl.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch (PeriphClkInit->Sai4BClockSelection)
 800b3ae:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 800b3b2:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 800b3b6:	f000 85a2 	beq.w	800befe <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800b3ba:	f200 80e6 	bhi.w	800b58a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800b3be:	2900      	cmp	r1, #0
 800b3c0:	f000 847a 	beq.w	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800b3c4:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 800b3c8:	f040 80e7 	bne.w	800b59a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b3cc:	4968      	ldr	r1, [pc, #416]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b3ce:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b3d0:	f001 0103 	and.w	r1, r1, #3
 800b3d4:	2903      	cmp	r1, #3
 800b3d6:	f000 80e0 	beq.w	800b59a <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800b3da:	2100      	movs	r1, #0
 800b3dc:	f104 0008 	add.w	r0, r4, #8
 800b3e0:	f7ff fe70 	bl	800b0c4 <RCCEx_PLL2_Config.part.0>
 800b3e4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b3e6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b3ea:	2d00      	cmp	r5, #0
 800b3ec:	f040 846c 	bne.w	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b3f0:	4f5f      	ldr	r7, [pc, #380]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b3f2:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 800b3f6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b3f8:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 800b3fc:	4301      	orrs	r1, r0
 800b3fe:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b400:	0199      	lsls	r1, r3, #6
 800b402:	d518      	bpl.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch (PeriphClkInit->QspiClockSelection)
 800b404:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800b406:	2920      	cmp	r1, #32
 800b408:	f000 84bb 	beq.w	800bd82 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 800b40c:	f200 80c8 	bhi.w	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800b410:	b139      	cbz	r1, 800b422 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b412:	2910      	cmp	r1, #16
 800b414:	f040 80c7 	bne.w	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b418:	4855      	ldr	r0, [pc, #340]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b41a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800b41c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800b420:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b422:	2d00      	cmp	r5, #0
 800b424:	f040 8492 	bne.w	800bd4c <HAL_RCCEx_PeriphCLKConfig+0xac0>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b428:	4f51      	ldr	r7, [pc, #324]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b42a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800b42c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b42e:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 800b432:	4301      	orrs	r1, r0
 800b434:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b436:	04df      	lsls	r7, r3, #19
 800b438:	d526      	bpl.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    switch (PeriphClkInit->Spi123ClockSelection)
 800b43a:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800b43c:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800b440:	f000 854c 	beq.w	800bedc <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800b444:	f200 80b2 	bhi.w	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x320>
 800b448:	2900      	cmp	r1, #0
 800b44a:	f000 8418 	beq.w	800bc7e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800b44e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800b452:	f040 80b3 	bne.w	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x330>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b456:	4946      	ldr	r1, [pc, #280]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b458:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b45a:	f001 0103 	and.w	r1, r1, #3
 800b45e:	2903      	cmp	r1, #3
 800b460:	f000 80ac 	beq.w	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x330>
 800b464:	2100      	movs	r1, #0
 800b466:	f104 0008 	add.w	r0, r4, #8
 800b46a:	f7ff fe2b 	bl	800b0c4 <RCCEx_PLL2_Config.part.0>
 800b46e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b470:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b474:	2d00      	cmp	r5, #0
 800b476:	f040 840a 	bne.w	800bc8e <HAL_RCCEx_PeriphCLKConfig+0xa02>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b47a:	4f3d      	ldr	r7, [pc, #244]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b47c:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800b47e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b480:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800b484:	4301      	orrs	r1, r0
 800b486:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b488:	0498      	lsls	r0, r3, #18
 800b48a:	d524      	bpl.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800b48c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800b48e:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800b492:	f000 84e8 	beq.w	800be66 <HAL_RCCEx_PeriphCLKConfig+0xbda>
 800b496:	f200 8094 	bhi.w	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800b49a:	b191      	cbz	r1, 800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
 800b49c:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800b4a0:	f040 8099 	bne.w	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b4a4:	4932      	ldr	r1, [pc, #200]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b4a6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b4a8:	f001 0103 	and.w	r1, r1, #3
 800b4ac:	2903      	cmp	r1, #3
 800b4ae:	f000 8092 	beq.w	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b4b2:	2101      	movs	r1, #1
 800b4b4:	f104 0008 	add.w	r0, r4, #8
 800b4b8:	f7ff fe04 	bl	800b0c4 <RCCEx_PLL2_Config.part.0>
 800b4bc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b4be:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b4c2:	2d00      	cmp	r5, #0
 800b4c4:	f040 8590 	bne.w	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b4c8:	4f29      	ldr	r7, [pc, #164]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b4ca:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800b4cc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b4ce:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 800b4d2:	4301      	orrs	r1, r0
 800b4d4:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b4d6:	0459      	lsls	r1, r3, #17
 800b4d8:	d523      	bpl.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch (PeriphClkInit->Spi6ClockSelection)
 800b4da:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 800b4de:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 800b4e2:	f000 8474 	beq.w	800bdce <HAL_RCCEx_PeriphCLKConfig+0xb42>
 800b4e6:	d879      	bhi.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x350>
 800b4e8:	b181      	cbz	r1, 800b50c <HAL_RCCEx_PeriphCLKConfig+0x280>
 800b4ea:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800b4ee:	d17d      	bne.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x360>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b4f0:	491f      	ldr	r1, [pc, #124]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b4f2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b4f4:	f001 0103 	and.w	r1, r1, #3
 800b4f8:	2903      	cmp	r1, #3
 800b4fa:	d077      	beq.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b4fc:	2101      	movs	r1, #1
 800b4fe:	f104 0008 	add.w	r0, r4, #8
 800b502:	f7ff fddf 	bl	800b0c4 <RCCEx_PLL2_Config.part.0>
 800b506:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b508:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b50c:	2d00      	cmp	r5, #0
 800b50e:	f040 8565 	bne.w	800bfdc <HAL_RCCEx_PeriphCLKConfig+0xd50>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b512:	4f17      	ldr	r7, [pc, #92]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800b514:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800b518:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b51a:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 800b51e:	4301      	orrs	r1, r0
 800b520:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b522:	041f      	lsls	r7, r3, #16
 800b524:	d50d      	bpl.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch (PeriphClkInit->FdcanClockSelection)
 800b526:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800b528:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800b52c:	f000 829a 	beq.w	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 800b530:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 800b534:	f000 83f5 	beq.w	800bd22 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800b538:	2900      	cmp	r1, #0
 800b53a:	f000 8298 	beq.w	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        ret = HAL_ERROR;
 800b53e:	2601      	movs	r6, #1
 800b540:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b542:	01d8      	lsls	r0, r3, #7
 800b544:	d564      	bpl.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0x384>
    switch (PeriphClkInit->FmcClockSelection)
 800b546:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b548:	2903      	cmp	r1, #3
 800b54a:	f200 85b9 	bhi.w	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
 800b54e:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b552:	0055      	.short	0x0055
 800b554:	04050050 	.word	0x04050050
 800b558:	0055      	.short	0x0055
    switch (PeriphClkInit->Sai23ClockSelection)
 800b55a:	29c0      	cmp	r1, #192	@ 0xc0
 800b55c:	f43f aef0 	beq.w	800b340 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 800b560:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800b564:	f43f aeec 	beq.w	800b340 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        ret = HAL_ERROR;
 800b568:	2601      	movs	r6, #1
 800b56a:	4635      	mov	r5, r6
 800b56c:	e6f2      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 800b56e:	bf00      	nop
 800b570:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Sai4AClockSelection)
 800b574:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 800b578:	f43f af0c 	beq.w	800b394 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b57c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800b580:	f43f af08 	beq.w	800b394 <HAL_RCCEx_PeriphCLKConfig+0x108>
        ret = HAL_ERROR;
 800b584:	2601      	movs	r6, #1
 800b586:	4635      	mov	r5, r6
 800b588:	e70f      	b.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4BClockSelection)
 800b58a:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 800b58e:	f43f af2c 	beq.w	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800b592:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 800b596:	f43f af28 	beq.w	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
        ret = HAL_ERROR;
 800b59a:	2601      	movs	r6, #1
 800b59c:	4635      	mov	r5, r6
 800b59e:	e72f      	b.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch (PeriphClkInit->QspiClockSelection)
 800b5a0:	2930      	cmp	r1, #48	@ 0x30
 800b5a2:	f43f af3e 	beq.w	800b422 <HAL_RCCEx_PeriphCLKConfig+0x196>
        ret = HAL_ERROR;
 800b5a6:	2601      	movs	r6, #1
 800b5a8:	4635      	mov	r5, r6
 800b5aa:	e744      	b.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch (PeriphClkInit->Spi123ClockSelection)
 800b5ac:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 800b5b0:	f43f af60 	beq.w	800b474 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b5b4:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800b5b8:	f43f af5c 	beq.w	800b474 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        ret = HAL_ERROR;
 800b5bc:	2601      	movs	r6, #1
 800b5be:	4635      	mov	r5, r6
 800b5c0:	e762      	b.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    switch (PeriphClkInit->Spi45ClockSelection)
 800b5c2:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 800b5c6:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 800b5ca:	f43f af7a 	beq.w	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
 800b5ce:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 800b5d2:	f43f af76 	beq.w	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
        ret = HAL_ERROR;
 800b5d6:	2601      	movs	r6, #1
 800b5d8:	4635      	mov	r5, r6
 800b5da:	e77c      	b.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800b5dc:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 800b5e0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800b5e4:	d092      	beq.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0x280>
 800b5e6:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 800b5ea:	d08f      	beq.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0x280>
        ret = HAL_ERROR;
 800b5ec:	2601      	movs	r6, #1
 800b5ee:	4635      	mov	r5, r6
 800b5f0:	e797      	b.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0x296>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5f2:	483d      	ldr	r0, [pc, #244]	@ (800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800b5f4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800b5f6:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800b5fa:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b5fc:	2d00      	cmp	r5, #0
 800b5fe:	f040 83a3 	bne.w	800bd48 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b602:	4f39      	ldr	r7, [pc, #228]	@ (800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800b604:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800b606:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b608:	f021 0103 	bic.w	r1, r1, #3
 800b60c:	4301      	orrs	r1, r0
 800b60e:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b610:	0259      	lsls	r1, r3, #9
 800b612:	f100 826f 	bmi.w	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x868>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b616:	07d8      	lsls	r0, r3, #31
 800b618:	d52f      	bpl.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    switch (PeriphClkInit->Usart16ClockSelection)
 800b61a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800b61c:	2928      	cmp	r1, #40	@ 0x28
 800b61e:	d82a      	bhi.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800b620:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b624:	0029025a 	.word	0x0029025a
 800b628:	00290029 	.word	0x00290029
 800b62c:	00290029 	.word	0x00290029
 800b630:	00290029 	.word	0x00290029
 800b634:	0029024b 	.word	0x0029024b
 800b638:	00290029 	.word	0x00290029
 800b63c:	00290029 	.word	0x00290029
 800b640:	00290029 	.word	0x00290029
 800b644:	00290518 	.word	0x00290518
 800b648:	00290029 	.word	0x00290029
 800b64c:	00290029 	.word	0x00290029
 800b650:	00290029 	.word	0x00290029
 800b654:	0029025a 	.word	0x0029025a
 800b658:	00290029 	.word	0x00290029
 800b65c:	00290029 	.word	0x00290029
 800b660:	00290029 	.word	0x00290029
 800b664:	0029025a 	.word	0x0029025a
 800b668:	00290029 	.word	0x00290029
 800b66c:	00290029 	.word	0x00290029
 800b670:	00290029 	.word	0x00290029
 800b674:	025a      	.short	0x025a
        ret = HAL_ERROR;
 800b676:	2601      	movs	r6, #1
 800b678:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b67a:	0799      	lsls	r1, r3, #30
 800b67c:	d524      	bpl.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b67e:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 800b680:	2905      	cmp	r1, #5
 800b682:	f200 8515 	bhi.w	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0xe24>
 800b686:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b68a:	0015      	.short	0x0015
 800b68c:	04c10006 	.word	0x04c10006
 800b690:	00150015 	.word	0x00150015
 800b694:	0015      	.short	0x0015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b696:	4914      	ldr	r1, [pc, #80]	@ (800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800b698:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b69a:	f001 0103 	and.w	r1, r1, #3
 800b69e:	2903      	cmp	r1, #3
 800b6a0:	f000 8506 	beq.w	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0xe24>
 800b6a4:	2101      	movs	r1, #1
 800b6a6:	f104 0008 	add.w	r0, r4, #8
 800b6aa:	f7ff fd0b 	bl	800b0c4 <RCCEx_PLL2_Config.part.0>
 800b6ae:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b6b0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b6b4:	2d00      	cmp	r5, #0
 800b6b6:	f040 8494 	bne.w	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0xd56>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b6ba:	4f0b      	ldr	r7, [pc, #44]	@ (800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800b6bc:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800b6be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b6c0:	f021 0107 	bic.w	r1, r1, #7
 800b6c4:	4301      	orrs	r1, r0
 800b6c6:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b6c8:	075f      	lsls	r7, r3, #29
 800b6ca:	d529      	bpl.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b6cc:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800b6d0:	2905      	cmp	r1, #5
 800b6d2:	f200 84f1 	bhi.w	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xe2c>
 800b6d6:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b6da:	0018      	.short	0x0018
 800b6dc:	04ab0009 	.word	0x04ab0009
 800b6e0:	00180018 	.word	0x00180018
 800b6e4:	0018      	.short	0x0018
 800b6e6:	bf00      	nop
 800b6e8:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b6ec:	49ae      	ldr	r1, [pc, #696]	@ (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b6ee:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b6f0:	f001 0103 	and.w	r1, r1, #3
 800b6f4:	2903      	cmp	r1, #3
 800b6f6:	f000 84df 	beq.w	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xe2c>
 800b6fa:	2101      	movs	r1, #1
 800b6fc:	f104 0008 	add.w	r0, r4, #8
 800b700:	f7ff fce0 	bl	800b0c4 <RCCEx_PLL2_Config.part.0>
 800b704:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b706:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b70a:	2d00      	cmp	r5, #0
 800b70c:	f040 8463 	bne.w	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b710:	4fa5      	ldr	r7, [pc, #660]	@ (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b712:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 800b716:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b718:	f021 0107 	bic.w	r1, r1, #7
 800b71c:	4301      	orrs	r1, r0
 800b71e:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b720:	0698      	lsls	r0, r3, #26
 800b722:	d526      	bpl.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b724:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800b728:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 800b72c:	f000 833c 	beq.w	800bda8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b730:	f200 813c 	bhi.w	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x720>
 800b734:	b191      	cbz	r1, 800b75c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b736:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800b73a:	f040 8141 	bne.w	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x734>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b73e:	499a      	ldr	r1, [pc, #616]	@ (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b740:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b742:	f001 0103 	and.w	r1, r1, #3
 800b746:	2903      	cmp	r1, #3
 800b748:	f000 813a 	beq.w	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x734>
 800b74c:	2100      	movs	r1, #0
 800b74e:	f104 0008 	add.w	r0, r4, #8
 800b752:	f7ff fcb7 	bl	800b0c4 <RCCEx_PLL2_Config.part.0>
 800b756:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b758:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b75c:	2d00      	cmp	r5, #0
 800b75e:	f040 8448 	bne.w	800bff2 <HAL_RCCEx_PeriphCLKConfig+0xd66>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b762:	4f91      	ldr	r7, [pc, #580]	@ (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b764:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800b768:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b76a:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 800b76e:	4301      	orrs	r1, r0
 800b770:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b772:	0659      	lsls	r1, r3, #25
 800b774:	d526      	bpl.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x538>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b776:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 800b77a:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800b77e:	f000 834c 	beq.w	800be1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800b782:	f200 8120 	bhi.w	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800b786:	b191      	cbz	r1, 800b7ae <HAL_RCCEx_PeriphCLKConfig+0x522>
 800b788:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b78c:	f040 8125 	bne.w	800b9da <HAL_RCCEx_PeriphCLKConfig+0x74e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b790:	4985      	ldr	r1, [pc, #532]	@ (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b792:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b794:	f001 0103 	and.w	r1, r1, #3
 800b798:	2903      	cmp	r1, #3
 800b79a:	f000 811e 	beq.w	800b9da <HAL_RCCEx_PeriphCLKConfig+0x74e>
 800b79e:	2100      	movs	r1, #0
 800b7a0:	f104 0008 	add.w	r0, r4, #8
 800b7a4:	f7ff fc8e 	bl	800b0c4 <RCCEx_PLL2_Config.part.0>
 800b7a8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b7aa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b7ae:	2d00      	cmp	r5, #0
 800b7b0:	f040 8422 	bne.w	800bff8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b7b4:	4f7c      	ldr	r7, [pc, #496]	@ (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b7b6:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800b7ba:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b7bc:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 800b7c0:	4301      	orrs	r1, r0
 800b7c2:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b7c4:	061f      	lsls	r7, r3, #24
 800b7c6:	d526      	bpl.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x58a>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b7c8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800b7cc:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800b7d0:	f000 8336 	beq.w	800be40 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 800b7d4:	f200 8104 	bhi.w	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800b7d8:	b191      	cbz	r1, 800b800 <HAL_RCCEx_PeriphCLKConfig+0x574>
 800b7da:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800b7de:	f040 8109 	bne.w	800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b7e2:	4971      	ldr	r1, [pc, #452]	@ (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b7e4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b7e6:	f001 0103 	and.w	r1, r1, #3
 800b7ea:	2903      	cmp	r1, #3
 800b7ec:	f000 8102 	beq.w	800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x768>
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	f104 0008 	add.w	r0, r4, #8
 800b7f6:	f7ff fc65 	bl	800b0c4 <RCCEx_PLL2_Config.part.0>
 800b7fa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b7fc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b800:	2d00      	cmp	r5, #0
 800b802:	f040 83f4 	bne.w	800bfee <HAL_RCCEx_PeriphCLKConfig+0xd62>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b806:	4f68      	ldr	r7, [pc, #416]	@ (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b808:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 800b80c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b80e:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 800b812:	4301      	orrs	r1, r0
 800b814:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b816:	0718      	lsls	r0, r3, #28
 800b818:	d50b      	bpl.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b81a:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800b81e:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800b822:	f000 8347 	beq.w	800beb4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b826:	4f60      	ldr	r7, [pc, #384]	@ (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b828:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b82a:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 800b82e:	4301      	orrs	r1, r0
 800b830:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b832:	06d9      	lsls	r1, r3, #27
 800b834:	d50b      	bpl.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b836:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 800b83a:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800b83e:	f000 8325 	beq.w	800be8c <HAL_RCCEx_PeriphCLKConfig+0xc00>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b842:	4f59      	ldr	r7, [pc, #356]	@ (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b844:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b846:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 800b84a:	4301      	orrs	r1, r0
 800b84c:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b84e:	031f      	lsls	r7, r3, #12
 800b850:	d50e      	bpl.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    switch (PeriphClkInit->AdcClockSelection)
 800b852:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 800b856:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800b85a:	f000 8113 	beq.w	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
 800b85e:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800b862:	f000 811e 	beq.w	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800b866:	2900      	cmp	r1, #0
 800b868:	f000 8249 	beq.w	800bcfe <HAL_RCCEx_PeriphCLKConfig+0xa72>
        ret = HAL_ERROR;
 800b86c:	2601      	movs	r6, #1
 800b86e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b870:	0358      	lsls	r0, r3, #13
 800b872:	d50f      	bpl.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch (PeriphClkInit->UsbClockSelection)
 800b874:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 800b878:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800b87c:	f000 82ba 	beq.w	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800b880:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 800b884:	f000 80e2 	beq.w	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800b888:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800b88c:	f000 80d9 	beq.w	800ba42 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
        ret = HAL_ERROR;
 800b890:	2601      	movs	r6, #1
 800b892:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b894:	03d9      	lsls	r1, r3, #15
 800b896:	d520      	bpl.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x64e>
    switch (PeriphClkInit->SdmmcClockSelection)
 800b898:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800b89a:	2900      	cmp	r1, #0
 800b89c:	f000 8217 	beq.w	800bcce <HAL_RCCEx_PeriphCLKConfig+0xa42>
 800b8a0:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800b8a4:	f040 80b6 	bne.w	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x788>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b8a8:	493f      	ldr	r1, [pc, #252]	@ (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b8aa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800b8ac:	f001 0103 	and.w	r1, r1, #3
 800b8b0:	2903      	cmp	r1, #3
 800b8b2:	f000 80af 	beq.w	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x788>
 800b8b6:	2102      	movs	r1, #2
 800b8b8:	f104 0008 	add.w	r0, r4, #8
 800b8bc:	f7ff fc02 	bl	800b0c4 <RCCEx_PLL2_Config.part.0>
 800b8c0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b8c2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b8c6:	2d00      	cmp	r5, #0
 800b8c8:	f040 8209 	bne.w	800bcde <HAL_RCCEx_PeriphCLKConfig+0xa52>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b8cc:	4f36      	ldr	r7, [pc, #216]	@ (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b8ce:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800b8d0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b8d2:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800b8d6:	4301      	orrs	r1, r0
 800b8d8:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b8da:	009f      	lsls	r7, r3, #2
 800b8dc:	f100 809f 	bmi.w	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x792>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b8e0:	0398      	lsls	r0, r3, #14
 800b8e2:	f140 8095 	bpl.w	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x784>
    switch (PeriphClkInit->RngClockSelection)
 800b8e6:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 800b8ea:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800b8ee:	f000 81fd 	beq.w	800bcec <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800b8f2:	f240 8082 	bls.w	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x76e>
 800b8f6:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 800b8fa:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800b8fe:	d07e      	beq.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0x772>
 800b900:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b902:	02d9      	lsls	r1, r3, #11
 800b904:	d506      	bpl.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x688>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b906:	4828      	ldr	r0, [pc, #160]	@ (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b908:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 800b90a:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800b90c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800b910:	4331      	orrs	r1, r6
 800b912:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b914:	00df      	lsls	r7, r3, #3
 800b916:	d507      	bpl.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0x69c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b918:	4823      	ldr	r0, [pc, #140]	@ (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b91a:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 800b91e:	6901      	ldr	r1, [r0, #16]
 800b920:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800b924:	4331      	orrs	r1, r6
 800b926:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b928:	029e      	lsls	r6, r3, #10
 800b92a:	d506      	bpl.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b92c:	481e      	ldr	r0, [pc, #120]	@ (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b92e:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 800b930:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800b932:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800b936:	4331      	orrs	r1, r6
 800b938:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b93a:	0058      	lsls	r0, r3, #1
 800b93c:	d509      	bpl.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b93e:	491a      	ldr	r1, [pc, #104]	@ (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b940:	6908      	ldr	r0, [r1, #16]
 800b942:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800b946:	6108      	str	r0, [r1, #16]
 800b948:	6908      	ldr	r0, [r1, #16]
 800b94a:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
 800b94e:	4330      	orrs	r0, r6
 800b950:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b952:	2b00      	cmp	r3, #0
 800b954:	da06      	bge.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b956:	4814      	ldr	r0, [pc, #80]	@ (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b958:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 800b95a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800b95c:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 800b960:	4331      	orrs	r1, r6
 800b962:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b964:	0219      	lsls	r1, r3, #8
 800b966:	d507      	bpl.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b968:	490f      	ldr	r1, [pc, #60]	@ (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b96a:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 800b96e:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 800b970:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800b974:	4303      	orrs	r3, r0
 800b976:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b978:	07d3      	lsls	r3, r2, #31
 800b97a:	f100 810f 	bmi.w	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x910>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b97e:	0797      	lsls	r7, r2, #30
 800b980:	f100 80fa 	bmi.w	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b984:	0756      	lsls	r6, r2, #29
 800b986:	f100 8140 	bmi.w	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x97e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b98a:	0710      	lsls	r0, r2, #28
 800b98c:	f100 812b 	bmi.w	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x95a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b990:	06d1      	lsls	r1, r2, #27
 800b992:	f100 8115 	bmi.w	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x934>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b996:	0693      	lsls	r3, r2, #26
 800b998:	f100 8149 	bmi.w	800bc2e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
  if (status == HAL_OK)
 800b99c:	1e28      	subs	r0, r5, #0
 800b99e:	bf18      	it	ne
 800b9a0:	2001      	movne	r0, #1
}
 800b9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9a6:	bf00      	nop
 800b9a8:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b9ac:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 800b9b0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800b9b4:	f43f aed2 	beq.w	800b75c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b9b8:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 800b9bc:	f43f aece 	beq.w	800b75c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        ret = HAL_ERROR;
 800b9c0:	2601      	movs	r6, #1
 800b9c2:	4635      	mov	r5, r6
 800b9c4:	e6d5      	b.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b9c6:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 800b9ca:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800b9ce:	f43f aeee 	beq.w	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x522>
 800b9d2:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 800b9d6:	f43f aeea 	beq.w	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x522>
        ret = HAL_ERROR;
 800b9da:	2601      	movs	r6, #1
 800b9dc:	4635      	mov	r5, r6
 800b9de:	e6f1      	b.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x538>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b9e0:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 800b9e4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800b9e8:	f43f af0a 	beq.w	800b800 <HAL_RCCEx_PeriphCLKConfig+0x574>
 800b9ec:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 800b9f0:	f43f af06 	beq.w	800b800 <HAL_RCCEx_PeriphCLKConfig+0x574>
        ret = HAL_ERROR;
 800b9f4:	2601      	movs	r6, #1
 800b9f6:	4635      	mov	r5, r6
 800b9f8:	e70d      	b.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x58a>
    switch (PeriphClkInit->RngClockSelection)
 800b9fa:	2900      	cmp	r1, #0
 800b9fc:	d180      	bne.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x674>
    if (ret == HAL_OK)
 800b9fe:	2d00      	cmp	r5, #0
 800ba00:	f47f af7f 	bne.w	800b902 <HAL_RCCEx_PeriphCLKConfig+0x676>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ba04:	4db7      	ldr	r5, [pc, #732]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800ba06:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 800ba08:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 800ba0c:	4301      	orrs	r1, r0
 800ba0e:	6569      	str	r1, [r5, #84]	@ 0x54
      status = HAL_ERROR;
 800ba10:	4635      	mov	r5, r6
 800ba12:	e776      	b.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0x676>
        ret = HAL_ERROR;
 800ba14:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ba16:	009f      	lsls	r7, r3, #2
        ret = HAL_ERROR;
 800ba18:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ba1a:	f57f af61 	bpl.w	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x654>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ba1e:	49b1      	ldr	r1, [pc, #708]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800ba20:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800ba22:	f001 0103 	and.w	r1, r1, #3
 800ba26:	2903      	cmp	r1, #3
 800ba28:	d009      	beq.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x7b2>
 800ba2a:	2102      	movs	r1, #2
 800ba2c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800ba30:	f7ff fbba 	bl	800b1a8 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ba34:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	f43f af51 	beq.w	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x654>
      status = HAL_ERROR;
 800ba3e:	2601      	movs	r6, #1
 800ba40:	e74e      	b.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x654>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba42:	48a8      	ldr	r0, [pc, #672]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800ba44:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800ba46:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800ba4a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800ba4c:	2d00      	cmp	r5, #0
 800ba4e:	f040 8183 	bne.w	800bd58 <HAL_RCCEx_PeriphCLKConfig+0xacc>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ba52:	4fa4      	ldr	r7, [pc, #656]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800ba54:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800ba58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ba5a:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800ba5e:	4301      	orrs	r1, r0
 800ba60:	6579      	str	r1, [r7, #84]	@ 0x54
 800ba62:	e717      	b.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x608>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba64:	489f      	ldr	r0, [pc, #636]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800ba66:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800ba68:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800ba6c:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800ba6e:	2d00      	cmp	r5, #0
 800ba70:	f040 816f 	bne.w	800bd52 <HAL_RCCEx_PeriphCLKConfig+0xac6>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ba74:	4f9b      	ldr	r7, [pc, #620]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800ba76:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800ba78:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ba7a:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 800ba7e:	4301      	orrs	r1, r0
 800ba80:	6539      	str	r1, [r7, #80]	@ 0x50
 800ba82:	e55e      	b.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ba84:	4997      	ldr	r1, [pc, #604]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800ba86:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800ba88:	f001 0103 	and.w	r1, r1, #3
 800ba8c:	2903      	cmp	r1, #3
 800ba8e:	f43f aeed 	beq.w	800b86c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 800ba92:	2102      	movs	r1, #2
 800ba94:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800ba98:	f7ff fb86 	bl	800b1a8 <RCCEx_PLL3_Config.part.0>
 800ba9c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ba9e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800baa2:	2d00      	cmp	r5, #0
 800baa4:	f040 82ab 	bne.w	800bffe <HAL_RCCEx_PeriphCLKConfig+0xd72>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800baa8:	4f8e      	ldr	r7, [pc, #568]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800baaa:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 800baae:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bab0:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 800bab4:	4301      	orrs	r1, r0
 800bab6:	65b9      	str	r1, [r7, #88]	@ 0x58
 800bab8:	e6da      	b.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800baba:	498a      	ldr	r1, [pc, #552]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800babc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800babe:	f001 0103 	and.w	r1, r1, #3
 800bac2:	2903      	cmp	r1, #3
 800bac4:	f43f add7 	beq.w	800b676 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800bac8:	2101      	movs	r1, #1
 800baca:	f104 0008 	add.w	r0, r4, #8
 800bace:	f7ff faf9 	bl	800b0c4 <RCCEx_PLL2_Config.part.0>
 800bad2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bad4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bad8:	2d00      	cmp	r5, #0
 800bada:	f040 8292 	bne.w	800c002 <HAL_RCCEx_PeriphCLKConfig+0xd76>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bade:	4f81      	ldr	r7, [pc, #516]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bae0:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800bae2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bae4:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 800bae8:	4301      	orrs	r1, r0
 800baea:	6579      	str	r1, [r7, #84]	@ 0x54
 800baec:	e5c5      	b.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        ret = HAL_ERROR;
 800baee:	2601      	movs	r6, #1
 800baf0:	f7ff bbfb 	b.w	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800baf4:	4f7c      	ldr	r7, [pc, #496]	@ (800bce8 <HAL_RCCEx_PeriphCLKConfig+0xa5c>)
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bafc:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800bafe:	f7fe fb8d 	bl	800a21c <HAL_GetTick>
 800bb02:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb04:	e006      	b.n	800bb14 <HAL_RCCEx_PeriphCLKConfig+0x888>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb06:	f7fe fb89 	bl	800a21c <HAL_GetTick>
 800bb0a:	eba0 0008 	sub.w	r0, r0, r8
 800bb0e:	2864      	cmp	r0, #100	@ 0x64
 800bb10:	f200 82b3 	bhi.w	800c07a <HAL_RCCEx_PeriphCLKConfig+0xdee>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	05da      	lsls	r2, r3, #23
 800bb18:	d5f5      	bpl.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    if (ret == HAL_OK)
 800bb1a:	2d00      	cmp	r5, #0
 800bb1c:	f040 82ae 	bne.w	800c07c <HAL_RCCEx_PeriphCLKConfig+0xdf0>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bb20:	4a70      	ldr	r2, [pc, #448]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bb22:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 800bb26:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800bb28:	4059      	eors	r1, r3
 800bb2a:	f411 7f40 	tst.w	r1, #768	@ 0x300
 800bb2e:	d00b      	beq.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bb30:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800bb32:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bb34:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800bb38:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 800bb3c:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bb3e:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 800bb40:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 800bb44:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800bb46:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bb48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb4c:	f000 82c2 	beq.w	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb50:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800bb54:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800bb58:	f000 82d0 	beq.w	800c0fc <HAL_RCCEx_PeriphCLKConfig+0xe70>
 800bb5c:	4961      	ldr	r1, [pc, #388]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bb5e:	690a      	ldr	r2, [r1, #16]
 800bb60:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800bb64:	610a      	str	r2, [r1, #16]
 800bb66:	485f      	ldr	r0, [pc, #380]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bb68:	f3c3 010b 	ubfx	r1, r3, #0, #12
 800bb6c:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 800bb6e:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bb70:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb74:	6701      	str	r1, [r0, #112]	@ 0x70
 800bb76:	e54e      	b.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb78:	4b5a      	ldr	r3, [pc, #360]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bb7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb7c:	f003 0303 	and.w	r3, r3, #3
 800bb80:	2b03      	cmp	r3, #3
 800bb82:	f000 8280 	beq.w	800c086 <HAL_RCCEx_PeriphCLKConfig+0xdfa>
 800bb86:	2101      	movs	r1, #1
 800bb88:	f104 0008 	add.w	r0, r4, #8
 800bb8c:	f7ff fa9a 	bl	800b0c4 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bb90:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800bb92:	2800      	cmp	r0, #0
 800bb94:	f43f aef6 	beq.w	800b984 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bb98:	4605      	mov	r5, r0
 800bb9a:	e6f3      	b.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb9c:	4b51      	ldr	r3, [pc, #324]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bb9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bba0:	f003 0303 	and.w	r3, r3, #3
 800bba4:	2b03      	cmp	r3, #3
 800bba6:	f000 827a 	beq.w	800c09e <HAL_RCCEx_PeriphCLKConfig+0xe12>
 800bbaa:	2100      	movs	r1, #0
 800bbac:	f104 0008 	add.w	r0, r4, #8
 800bbb0:	f7ff fa88 	bl	800b0c4 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bbb4:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	f43f aee1 	beq.w	800b97e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bbbc:	4605      	mov	r5, r0
 800bbbe:	e6de      	b.n	800b97e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bbc0:	4b48      	ldr	r3, [pc, #288]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bbc2:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bbc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbc8:	f003 0303 	and.w	r3, r3, #3
 800bbcc:	2b03      	cmp	r3, #3
 800bbce:	f000 8260 	beq.w	800c092 <HAL_RCCEx_PeriphCLKConfig+0xe06>
 800bbd2:	2101      	movs	r1, #1
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	f7ff fae7 	bl	800b1a8 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bbda:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	f43f aeda 	beq.w	800b996 <HAL_RCCEx_PeriphCLKConfig+0x70a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bbe2:	4605      	mov	r5, r0
 800bbe4:	e256      	b.n	800c094 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bbe6:	4b3f      	ldr	r3, [pc, #252]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bbe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbea:	f003 0303 	and.w	r3, r3, #3
 800bbee:	2b03      	cmp	r3, #3
 800bbf0:	f000 824d 	beq.w	800c08e <HAL_RCCEx_PeriphCLKConfig+0xe02>
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bbfa:	f7ff fad5 	bl	800b1a8 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bbfe:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800bc00:	2800      	cmp	r0, #0
 800bc02:	f43f aec5 	beq.w	800b990 <HAL_RCCEx_PeriphCLKConfig+0x704>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bc06:	4605      	mov	r5, r0
 800bc08:	e6c2      	b.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0x704>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bc0a:	4b36      	ldr	r3, [pc, #216]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bc0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc0e:	f003 0303 	and.w	r3, r3, #3
 800bc12:	2b03      	cmp	r3, #3
 800bc14:	f000 8239 	beq.w	800c08a <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 800bc18:	2102      	movs	r1, #2
 800bc1a:	f104 0008 	add.w	r0, r4, #8
 800bc1e:	f7ff fa51 	bl	800b0c4 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bc22:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800bc24:	2800      	cmp	r0, #0
 800bc26:	f43f aeb0 	beq.w	800b98a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bc2a:	4605      	mov	r5, r0
 800bc2c:	e6ad      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc2e:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bc32:	4b2c      	ldr	r3, [pc, #176]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bc34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc36:	f003 0303 	and.w	r3, r3, #3
 800bc3a:	2b03      	cmp	r3, #3
 800bc3c:	d006      	beq.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 800bc3e:	2102      	movs	r1, #2
 800bc40:	4630      	mov	r0, r6
 800bc42:	f7ff fab1 	bl	800b1a8 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 800bc46:	2800      	cmp	r0, #0
 800bc48:	f43f aea8 	beq.w	800b99c <HAL_RCCEx_PeriphCLKConfig+0x710>
  return HAL_ERROR;
 800bc4c:	2001      	movs	r0, #1
}
 800bc4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc52:	4824      	ldr	r0, [pc, #144]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bc54:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800bc56:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800bc5a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800bc5c:	2d00      	cmp	r5, #0
 800bc5e:	f43f ab9c 	beq.w	800b39a <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800bc62:	462e      	mov	r6, r5
 800bc64:	f7ff bba1 	b.w	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc68:	481e      	ldr	r0, [pc, #120]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bc6a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800bc6c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800bc70:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800bc72:	2d00      	cmp	r5, #0
 800bc74:	f43f ab67 	beq.w	800b346 <HAL_RCCEx_PeriphCLKConfig+0xba>
 800bc78:	462e      	mov	r6, r5
 800bc7a:	f7ff bb6b 	b.w	800b354 <HAL_RCCEx_PeriphCLKConfig+0xc8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc7e:	4819      	ldr	r0, [pc, #100]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bc80:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800bc82:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800bc86:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800bc88:	2d00      	cmp	r5, #0
 800bc8a:	f43f abf6 	beq.w	800b47a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800bc8e:	462e      	mov	r6, r5
 800bc90:	f7ff bbfa 	b.w	800b488 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc94:	4813      	ldr	r0, [pc, #76]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bc96:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800bc98:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800bc9c:	62c1      	str	r1, [r0, #44]	@ 0x2c
        ret = HAL_ERROR;
 800bc9e:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800bca0:	2d00      	cmp	r5, #0
 800bca2:	f040 8160 	bne.w	800bf66 <HAL_RCCEx_PeriphCLKConfig+0xcda>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bca6:	4f0f      	ldr	r7, [pc, #60]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bcaa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bcac:	f021 0107 	bic.w	r1, r1, #7
 800bcb0:	4301      	orrs	r1, r0
 800bcb2:	6539      	str	r1, [r7, #80]	@ 0x50
 800bcb4:	f7ff bb27 	b.w	800b306 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcb8:	480a      	ldr	r0, [pc, #40]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bcba:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800bcbc:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800bcc0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800bcc2:	2d00      	cmp	r5, #0
 800bcc4:	f43f ab94 	beq.w	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x164>
 800bcc8:	462e      	mov	r6, r5
 800bcca:	f7ff bb99 	b.w	800b400 <HAL_RCCEx_PeriphCLKConfig+0x174>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcce:	4805      	ldr	r0, [pc, #20]	@ (800bce4 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800bcd0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800bcd2:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800bcd6:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800bcd8:	2d00      	cmp	r5, #0
 800bcda:	f43f adf7 	beq.w	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x640>
 800bcde:	462e      	mov	r6, r5
 800bce0:	e5fb      	b.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bce2:	bf00      	nop
 800bce4:	58024400 	.word	0x58024400
 800bce8:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcec:	4fc6      	ldr	r7, [pc, #792]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bcee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bcf0:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 800bcf4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 800bcf6:	2d00      	cmp	r5, #0
 800bcf8:	f47f ae03 	bne.w	800b902 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800bcfc:	e682      	b.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x778>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bcfe:	48c2      	ldr	r0, [pc, #776]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bd00:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800bd02:	f000 0003 	and.w	r0, r0, #3
 800bd06:	2803      	cmp	r0, #3
 800bd08:	f43f adb0 	beq.w	800b86c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 800bd0c:	f104 0008 	add.w	r0, r4, #8
 800bd10:	f7ff f9d8 	bl	800b0c4 <RCCEx_PLL2_Config.part.0>
 800bd14:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bd16:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bd1a:	2d00      	cmp	r5, #0
 800bd1c:	f43f aec4 	beq.w	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 800bd20:	e16d      	b.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0xd72>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bd22:	49b9      	ldr	r1, [pc, #740]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bd24:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bd26:	f001 0103 	and.w	r1, r1, #3
 800bd2a:	2903      	cmp	r1, #3
 800bd2c:	f43f ac07 	beq.w	800b53e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 800bd30:	2101      	movs	r1, #1
 800bd32:	f104 0008 	add.w	r0, r4, #8
 800bd36:	f7ff f9c5 	bl	800b0c4 <RCCEx_PLL2_Config.part.0>
 800bd3a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bd3c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bd40:	2d00      	cmp	r5, #0
 800bd42:	f43f ae97 	beq.w	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
 800bd46:	e004      	b.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0xac6>
 800bd48:	462e      	mov	r6, r5
 800bd4a:	e461      	b.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800bd4c:	462e      	mov	r6, r5
 800bd4e:	f7ff bb72 	b.w	800b436 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800bd52:	462e      	mov	r6, r5
 800bd54:	f7ff bbf5 	b.w	800b542 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800bd58:	462e      	mov	r6, r5
 800bd5a:	e59b      	b.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x608>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bd5c:	49aa      	ldr	r1, [pc, #680]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bd5e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bd60:	f001 0103 	and.w	r1, r1, #3
 800bd64:	2903      	cmp	r1, #3
 800bd66:	f000 81ab 	beq.w	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
 800bd6a:	2102      	movs	r1, #2
 800bd6c:	f104 0008 	add.w	r0, r4, #8
 800bd70:	f7ff f9a8 	bl	800b0c4 <RCCEx_PLL2_Config.part.0>
 800bd74:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bd76:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bd7a:	2d00      	cmp	r5, #0
 800bd7c:	f43f ac41 	beq.w	800b602 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800bd80:	e7e2      	b.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0xabc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bd82:	49a1      	ldr	r1, [pc, #644]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bd84:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bd86:	f001 0103 	and.w	r1, r1, #3
 800bd8a:	2903      	cmp	r1, #3
 800bd8c:	f43f ac0b 	beq.w	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800bd90:	2102      	movs	r1, #2
 800bd92:	f104 0008 	add.w	r0, r4, #8
 800bd96:	f7ff f995 	bl	800b0c4 <RCCEx_PLL2_Config.part.0>
 800bd9a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bd9c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bda0:	2d00      	cmp	r5, #0
 800bda2:	f43f ab41 	beq.w	800b428 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800bda6:	e7d1      	b.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0xac0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bda8:	4997      	ldr	r1, [pc, #604]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bdaa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bdac:	f001 0103 	and.w	r1, r1, #3
 800bdb0:	2903      	cmp	r1, #3
 800bdb2:	f43f ae05 	beq.w	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x734>
 800bdb6:	2102      	movs	r1, #2
 800bdb8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bdbc:	f7ff f9f4 	bl	800b1a8 <RCCEx_PLL3_Config.part.0>
 800bdc0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bdc2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bdc6:	2d00      	cmp	r5, #0
 800bdc8:	f43f accb 	beq.w	800b762 <HAL_RCCEx_PeriphCLKConfig+0x4d6>
 800bdcc:	e111      	b.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0xd66>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bdce:	498e      	ldr	r1, [pc, #568]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bdd0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bdd2:	f001 0103 	and.w	r1, r1, #3
 800bdd6:	2903      	cmp	r1, #3
 800bdd8:	f43f ac08 	beq.w	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x360>
 800bddc:	2101      	movs	r1, #1
 800bdde:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bde2:	f7ff f9e1 	bl	800b1a8 <RCCEx_PLL3_Config.part.0>
 800bde6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bde8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bdec:	2d00      	cmp	r5, #0
 800bdee:	f43f ab90 	beq.w	800b512 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800bdf2:	e0f3      	b.n	800bfdc <HAL_RCCEx_PeriphCLKConfig+0xd50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bdf4:	4984      	ldr	r1, [pc, #528]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bdf6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bdf8:	f001 0103 	and.w	r1, r1, #3
 800bdfc:	2903      	cmp	r1, #3
 800bdfe:	f43f ad47 	beq.w	800b890 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800be02:	2101      	movs	r1, #1
 800be04:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800be08:	f7ff f9ce 	bl	800b1a8 <RCCEx_PLL3_Config.part.0>
 800be0c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800be0e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800be12:	2d00      	cmp	r5, #0
 800be14:	f43f ae1d 	beq.w	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800be18:	e79e      	b.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0xacc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be1a:	497b      	ldr	r1, [pc, #492]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800be1c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800be1e:	f001 0103 	and.w	r1, r1, #3
 800be22:	2903      	cmp	r1, #3
 800be24:	f43f add9 	beq.w	800b9da <HAL_RCCEx_PeriphCLKConfig+0x74e>
 800be28:	2102      	movs	r1, #2
 800be2a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800be2e:	f7ff f9bb 	bl	800b1a8 <RCCEx_PLL3_Config.part.0>
 800be32:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800be34:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800be38:	2d00      	cmp	r5, #0
 800be3a:	f43f acbb 	beq.w	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800be3e:	e0db      	b.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be40:	4971      	ldr	r1, [pc, #452]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800be42:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800be44:	f001 0103 	and.w	r1, r1, #3
 800be48:	2903      	cmp	r1, #3
 800be4a:	f43f add3 	beq.w	800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x768>
 800be4e:	2102      	movs	r1, #2
 800be50:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800be54:	f7ff f9a8 	bl	800b1a8 <RCCEx_PLL3_Config.part.0>
 800be58:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800be5a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800be5e:	2d00      	cmp	r5, #0
 800be60:	f43f acd1 	beq.w	800b806 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800be64:	e0c3      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0xd62>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be66:	4968      	ldr	r1, [pc, #416]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800be68:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800be6a:	f001 0103 	and.w	r1, r1, #3
 800be6e:	2903      	cmp	r1, #3
 800be70:	f43f abb1 	beq.w	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800be74:	2101      	movs	r1, #1
 800be76:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800be7a:	f7ff f995 	bl	800b1a8 <RCCEx_PLL3_Config.part.0>
 800be7e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800be80:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800be84:	2d00      	cmp	r5, #0
 800be86:	f43f ab1f 	beq.w	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800be8a:	e0ad      	b.n	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be8c:	495e      	ldr	r1, [pc, #376]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800be8e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800be90:	f001 0103 	and.w	r1, r1, #3
 800be94:	2903      	cmp	r1, #3
 800be96:	f000 811a 	beq.w	800c0ce <HAL_RCCEx_PeriphCLKConfig+0xe42>
 800be9a:	2102      	movs	r1, #2
 800be9c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bea0:	f7ff f982 	bl	800b1a8 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bea4:	2800      	cmp	r0, #0
 800bea6:	f040 8139 	bne.w	800c11c <HAL_RCCEx_PeriphCLKConfig+0xe90>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800beaa:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800beae:	e9d4 3200 	ldrd	r3, r2, [r4]
 800beb2:	e4c6      	b.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800beb4:	4954      	ldr	r1, [pc, #336]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800beb6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800beb8:	f001 0103 	and.w	r1, r1, #3
 800bebc:	2903      	cmp	r1, #3
 800bebe:	f000 8103 	beq.w	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 800bec2:	2102      	movs	r1, #2
 800bec4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bec8:	f7ff f96e 	bl	800b1a8 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800becc:	2800      	cmp	r0, #0
 800bece:	f040 812c 	bne.w	800c12a <HAL_RCCEx_PeriphCLKConfig+0xe9e>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bed2:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bed6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800beda:	e4a4      	b.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bedc:	494a      	ldr	r1, [pc, #296]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bede:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bee0:	f001 0103 	and.w	r1, r1, #3
 800bee4:	2903      	cmp	r1, #3
 800bee6:	f43f ab69 	beq.w	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x330>
 800beea:	2100      	movs	r1, #0
 800beec:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bef0:	f7ff f95a 	bl	800b1a8 <RCCEx_PLL3_Config.part.0>
 800bef4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bef6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800befa:	f7ff babb 	b.w	800b474 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800befe:	4942      	ldr	r1, [pc, #264]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bf00:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bf02:	f001 0103 	and.w	r1, r1, #3
 800bf06:	2903      	cmp	r1, #3
 800bf08:	f43f ab47 	beq.w	800b59a <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800bf0c:	2100      	movs	r1, #0
 800bf0e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bf12:	f7ff f949 	bl	800b1a8 <RCCEx_PLL3_Config.part.0>
 800bf16:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bf18:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bf1c:	f7ff ba65 	b.w	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf20:	4939      	ldr	r1, [pc, #228]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bf22:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bf24:	f001 0103 	and.w	r1, r1, #3
 800bf28:	2903      	cmp	r1, #3
 800bf2a:	f43f ab2b 	beq.w	800b584 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800bf2e:	2100      	movs	r1, #0
 800bf30:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bf34:	f7ff f938 	bl	800b1a8 <RCCEx_PLL3_Config.part.0>
 800bf38:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bf3a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bf3e:	f7ff ba29 	b.w	800b394 <HAL_RCCEx_PeriphCLKConfig+0x108>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf42:	4931      	ldr	r1, [pc, #196]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bf44:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bf46:	f001 0103 	and.w	r1, r1, #3
 800bf4a:	2903      	cmp	r1, #3
 800bf4c:	f43f a9d9 	beq.w	800b302 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800bf50:	2100      	movs	r1, #0
 800bf52:	f104 0008 	add.w	r0, r4, #8
 800bf56:	f7ff f8b5 	bl	800b0c4 <RCCEx_PLL2_Config.part.0>
 800bf5a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800bf5c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bf60:	2d00      	cmp	r5, #0
 800bf62:	f43f aea0 	beq.w	800bca6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800bf66:	462e      	mov	r6, r5
 800bf68:	f7ff b9cd 	b.w	800b306 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf6c:	4926      	ldr	r1, [pc, #152]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bf6e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bf70:	f001 0103 	and.w	r1, r1, #3
 800bf74:	2903      	cmp	r1, #3
 800bf76:	f43f a9c4 	beq.w	800b302 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800bf7a:	2100      	movs	r1, #0
 800bf7c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bf80:	f7ff f912 	bl	800b1a8 <RCCEx_PLL3_Config.part.0>
 800bf84:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800bf86:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bf8a:	e689      	b.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf8c:	491e      	ldr	r1, [pc, #120]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bf8e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bf90:	f001 0103 	and.w	r1, r1, #3
 800bf94:	2903      	cmp	r1, #3
 800bf96:	f43f aae7 	beq.w	800b568 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800bf9a:	2100      	movs	r1, #0
 800bf9c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bfa0:	f7ff f902 	bl	800b1a8 <RCCEx_PLL3_Config.part.0>
 800bfa4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bfa6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bfaa:	f7ff b9c9 	b.w	800b340 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bfae:	4916      	ldr	r1, [pc, #88]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800bfb0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800bfb2:	f001 0103 	and.w	r1, r1, #3
 800bfb6:	2903      	cmp	r1, #3
 800bfb8:	f43f ad99 	beq.w	800baee <HAL_RCCEx_PeriphCLKConfig+0x862>
 800bfbc:	2102      	movs	r1, #2
 800bfbe:	3028      	adds	r0, #40	@ 0x28
 800bfc0:	f7ff f8f2 	bl	800b1a8 <RCCEx_PLL3_Config.part.0>
 800bfc4:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bfc6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bfca:	2e00      	cmp	r6, #0
 800bfcc:	f47f a98d 	bne.w	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bfd0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800bfd2:	f7ff b983 	b.w	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x50>
 800bfd6:	462e      	mov	r6, r5
 800bfd8:	f7ff bba2 	b.w	800b720 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800bfdc:	462e      	mov	r6, r5
 800bfde:	f7ff baa0 	b.w	800b522 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800bfe2:	462e      	mov	r6, r5
 800bfe4:	f7ff bb70 	b.w	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800bfe8:	462e      	mov	r6, r5
 800bfea:	f7ff ba74 	b.w	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800bfee:	462e      	mov	r6, r5
 800bff0:	e411      	b.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800bff2:	462e      	mov	r6, r5
 800bff4:	f7ff bbbd 	b.w	800b772 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bff8:	462e      	mov	r6, r5
 800bffa:	f7ff bbe3 	b.w	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800bffe:	462e      	mov	r6, r5
 800c000:	e436      	b.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 800c002:	462e      	mov	r6, r5
 800c004:	f7ff bb39 	b.w	800b67a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 800c008:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c00c:	494a      	ldr	r1, [pc, #296]	@ (800c138 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 800c00e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800c010:	f001 0103 	and.w	r1, r1, #3
 800c014:	2903      	cmp	r1, #3
 800c016:	d04b      	beq.n	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0xe24>
 800c018:	2101      	movs	r1, #1
 800c01a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800c01e:	f7ff f8c3 	bl	800b1a8 <RCCEx_PLL3_Config.part.0>
 800c022:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c024:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c028:	2d00      	cmp	r5, #0
 800c02a:	f43f ab46 	beq.w	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800c02e:	e7d8      	b.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0xd56>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c030:	4941      	ldr	r1, [pc, #260]	@ (800c138 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 800c032:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800c034:	f001 0103 	and.w	r1, r1, #3
 800c038:	2903      	cmp	r1, #3
 800c03a:	d03d      	beq.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xe2c>
 800c03c:	2101      	movs	r1, #1
 800c03e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800c042:	f7ff f8b1 	bl	800b1a8 <RCCEx_PLL3_Config.part.0>
 800c046:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c048:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c04c:	2d00      	cmp	r5, #0
 800c04e:	f43f ab5f 	beq.w	800b710 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800c052:	e7c0      	b.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c054:	4938      	ldr	r1, [pc, #224]	@ (800c138 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 800c056:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800c058:	f001 0103 	and.w	r1, r1, #3
 800c05c:	2903      	cmp	r1, #3
 800c05e:	f43f ab0a 	beq.w	800b676 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800c062:	2101      	movs	r1, #1
 800c064:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800c068:	f7ff f89e 	bl	800b1a8 <RCCEx_PLL3_Config.part.0>
 800c06c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c06e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c072:	2d00      	cmp	r5, #0
 800c074:	f43f ad33 	beq.w	800bade <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c078:	e7c3      	b.n	800c002 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        ret = HAL_TIMEOUT;
 800c07a:	2503      	movs	r5, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c07c:	462e      	mov	r6, r5
 800c07e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c082:	f7ff bac8 	b.w	800b616 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    return HAL_ERROR;
 800c086:	2501      	movs	r5, #1
 800c088:	e47c      	b.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c08a:	2501      	movs	r5, #1
 800c08c:	e47d      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    return HAL_ERROR;
 800c08e:	2501      	movs	r5, #1
 800c090:	e47e      	b.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0x704>
 800c092:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c094:	0692      	lsls	r2, r2, #26
 800c096:	f53f adcc 	bmi.w	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
  return HAL_ERROR;
 800c09a:	2001      	movs	r0, #1
 800c09c:	e5d7      	b.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
    return HAL_ERROR;
 800c09e:	2501      	movs	r5, #1
 800c0a0:	e46d      	b.n	800b97e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0a2:	4d25      	ldr	r5, [pc, #148]	@ (800c138 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 800c0a4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800c0a6:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 800c0aa:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 800c0ac:	f7ff b916 	b.w	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x50>
        ret = HAL_ERROR;
 800c0b0:	2601      	movs	r6, #1
 800c0b2:	4635      	mov	r5, r6
 800c0b4:	f7ff bb08 	b.w	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        ret = HAL_ERROR;
 800c0b8:	2601      	movs	r6, #1
 800c0ba:	4635      	mov	r5, r6
 800c0bc:	f7ff bb30 	b.w	800b720 <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = HAL_ERROR;
 800c0c0:	2601      	movs	r6, #1
 800c0c2:	4635      	mov	r5, r6
 800c0c4:	f7ff baa4 	b.w	800b610 <HAL_RCCEx_PeriphCLKConfig+0x384>
        status = HAL_ERROR;
 800c0c8:	2601      	movs	r6, #1
 800c0ca:	f7ff bbac 	b.w	800b826 <HAL_RCCEx_PeriphCLKConfig+0x59a>
        status = HAL_ERROR;
 800c0ce:	2601      	movs	r6, #1
 800c0d0:	f7ff bbb7 	b.w	800b842 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
        tickstart = HAL_GetTick();
 800c0d4:	f7fe f8a2 	bl	800a21c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c0d8:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 800c138 <HAL_RCCEx_PeriphCLKConfig+0xeac>
        tickstart = HAL_GetTick();
 800c0dc:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0de:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c0e2:	e004      	b.n	800c0ee <HAL_RCCEx_PeriphCLKConfig+0xe62>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0e4:	f7fe f89a 	bl	800a21c <HAL_GetTick>
 800c0e8:	1bc0      	subs	r0, r0, r7
 800c0ea:	4548      	cmp	r0, r9
 800c0ec:	d810      	bhi.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0xe84>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c0ee:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800c0f2:	079b      	lsls	r3, r3, #30
 800c0f4:	d5f6      	bpl.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c0f6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 800c0fa:	e529      	b.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800c0fc:	480e      	ldr	r0, [pc, #56]	@ (800c138 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 800c0fe:	4a0f      	ldr	r2, [pc, #60]	@ (800c13c <HAL_RCCEx_PeriphCLKConfig+0xeb0>)
 800c100:	6901      	ldr	r1, [r0, #16]
 800c102:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800c106:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 800c10a:	430a      	orrs	r2, r1
 800c10c:	6102      	str	r2, [r0, #16]
 800c10e:	e52a      	b.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0x8da>
        status = ret;
 800c110:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c112:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c116:	4635      	mov	r5, r6
 800c118:	f7ff ba7d 	b.w	800b616 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c11c:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
        status = HAL_ERROR;
 800c120:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c122:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c126:	f7ff bb8c 	b.w	800b842 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c12a:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
        status = HAL_ERROR;
 800c12e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c130:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c134:	f7ff bb77 	b.w	800b826 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800c138:	58024400 	.word	0x58024400
 800c13c:	00ffffcf 	.word	0x00ffffcf

0800c140 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800c140:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c142:	f7fe ff5b 	bl	800affc <HAL_RCC_GetHCLKFreq>
 800c146:	4b05      	ldr	r3, [pc, #20]	@ (800c15c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800c148:	4a05      	ldr	r2, [pc, #20]	@ (800c160 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800c14a:	6a1b      	ldr	r3, [r3, #32]
 800c14c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c150:	5cd3      	ldrb	r3, [r2, r3]
 800c152:	f003 031f 	and.w	r3, r3, #31
}
 800c156:	40d8      	lsrs	r0, r3
 800c158:	bd08      	pop	{r3, pc}
 800c15a:	bf00      	nop
 800c15c:	58024400 	.word	0x58024400
 800c160:	0800ec84 	.word	0x0800ec84

0800c164 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c164:	4a47      	ldr	r2, [pc, #284]	@ (800c284 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 800c166:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c168:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c16a:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c16c:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 800c16e:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c172:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c176:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 800c178:	d05b      	beq.n	800c232 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c17a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c17e:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c182:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c186:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c18a:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800c18e:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c194:	ee06 1a90 	vmov	s13, r1
 800c198:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800c19c:	d003      	beq.n	800c1a6 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 800c19e:	2c02      	cmp	r4, #2
 800c1a0:	d06a      	beq.n	800c278 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 800c1a2:	2c00      	cmp	r4, #0
 800c1a4:	d04a      	beq.n	800c23c <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c1a6:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800c288 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800c1aa:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800c1ae:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800c1b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1b4:	ee07 3a90 	vmov	s15, r3
 800c1b8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800c1bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1c4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c1c8:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c1cc:	4a2d      	ldr	r2, [pc, #180]	@ (800c284 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 800c1ce:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800c1d2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800c1d4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c1d8:	ee07 3a10 	vmov	s14, r3
 800c1dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800c1e0:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c1e2:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c1e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c1ea:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800c1ee:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c1f2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800c1f4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800c1f8:	ee07 3a10 	vmov	s14, r3
 800c1fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c200:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c204:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c208:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800c20c:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c210:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800c212:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c216:	ee06 3a90 	vmov	s13, r3
 800c21a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c21e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c222:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c226:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800c22a:	ee17 3a90 	vmov	r3, s15
 800c22e:	6083      	str	r3, [r0, #8]
}
 800c230:	4770      	bx	lr
 800c232:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c234:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c238:	6083      	str	r3, [r0, #8]
}
 800c23a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c23c:	6813      	ldr	r3, [r2, #0]
 800c23e:	069b      	lsls	r3, r3, #26
 800c240:	d51d      	bpl.n	800c27e <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c242:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c244:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800c248:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c24a:	4910      	ldr	r1, [pc, #64]	@ (800c28c <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 800c24c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c250:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c254:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c256:	ee07 3a90 	vmov	s15, r3
 800c25a:	ee06 1a10 	vmov	s12, r1
 800c25e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c262:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800c266:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800c26a:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800c26e:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800c272:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c276:	e7a9      	b.n	800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c278:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800c290 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 800c27c:	e795      	b.n	800c1aa <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c27e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800c294 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 800c282:	e792      	b.n	800c1aa <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800c284:	58024400 	.word	0x58024400
 800c288:	4a742400 	.word	0x4a742400
 800c28c:	03d09000 	.word	0x03d09000
 800c290:	4af42400 	.word	0x4af42400
 800c294:	4c742400 	.word	0x4c742400

0800c298 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c298:	4a47      	ldr	r2, [pc, #284]	@ (800c3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 800c29a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c29c:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c29e:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c2a0:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 800c2a2:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c2a6:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c2aa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 800c2ac:	d05b      	beq.n	800c366 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c2ae:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c2b2:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c2b6:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c2ba:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c2be:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800c2c2:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c2c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c2c8:	ee06 1a90 	vmov	s13, r1
 800c2cc:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800c2d0:	d003      	beq.n	800c2da <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 800c2d2:	2c02      	cmp	r4, #2
 800c2d4:	d06a      	beq.n	800c3ac <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 800c2d6:	2c00      	cmp	r4, #0
 800c2d8:	d04a      	beq.n	800c370 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c2da:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800c3bc <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800c2de:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800c2e2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800c2e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2e8:	ee07 3a90 	vmov	s15, r3
 800c2ec:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800c2f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2f8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c2fc:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c300:	4a2d      	ldr	r2, [pc, #180]	@ (800c3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 800c302:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800c306:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800c308:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c30c:	ee07 3a10 	vmov	s14, r3
 800c310:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800c314:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c316:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c31a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c31e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800c322:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c326:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800c328:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800c32c:	ee07 3a10 	vmov	s14, r3
 800c330:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c334:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c338:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c33c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800c340:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c344:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800c346:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c34a:	ee06 3a90 	vmov	s13, r3
 800c34e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c352:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c356:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c35a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800c35e:	ee17 3a90 	vmov	r3, s15
 800c362:	6083      	str	r3, [r0, #8]
}
 800c364:	4770      	bx	lr
 800c366:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c368:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c36c:	6083      	str	r3, [r0, #8]
}
 800c36e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c370:	6813      	ldr	r3, [r2, #0]
 800c372:	069b      	lsls	r3, r3, #26
 800c374:	d51d      	bpl.n	800c3b2 <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c376:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c378:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800c37c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c37e:	4910      	ldr	r1, [pc, #64]	@ (800c3c0 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 800c380:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c384:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c388:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c38a:	ee07 3a90 	vmov	s15, r3
 800c38e:	ee06 1a10 	vmov	s12, r1
 800c392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c396:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800c39a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800c39e:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800c3a2:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800c3a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c3aa:	e7a9      	b.n	800c300 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c3ac:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800c3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 800c3b0:	e795      	b.n	800c2de <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c3b2:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800c3c8 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 800c3b6:	e792      	b.n	800c2de <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800c3b8:	58024400 	.word	0x58024400
 800c3bc:	4a742400 	.word	0x4a742400
 800c3c0:	03d09000 	.word	0x03d09000
 800c3c4:	4af42400 	.word	0x4af42400
 800c3c8:	4c742400 	.word	0x4c742400

0800c3cc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c3cc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d13d      	bne.n	800c450 <HAL_TIM_Base_Start_IT+0x84>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c3d4:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c3d6:	2102      	movs	r1, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3d8:	4b1e      	ldr	r3, [pc, #120]	@ (800c454 <HAL_TIM_Base_Start_IT+0x88>)
 800c3da:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800c3de:	bf18      	it	ne
 800c3e0:	429a      	cmpne	r2, r3
{
 800c3e2:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3e4:	bf0c      	ite	eq
 800c3e6:	2301      	moveq	r3, #1
 800c3e8:	2300      	movne	r3, #0
 800c3ea:	4d1b      	ldr	r5, [pc, #108]	@ (800c458 <HAL_TIM_Base_Start_IT+0x8c>)
 800c3ec:	4c1b      	ldr	r4, [pc, #108]	@ (800c45c <HAL_TIM_Base_Start_IT+0x90>)
 800c3ee:	42aa      	cmp	r2, r5
 800c3f0:	bf08      	it	eq
 800c3f2:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800c3f6:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c3fa:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3fc:	42a2      	cmp	r2, r4
 800c3fe:	bf08      	it	eq
 800c400:	f043 0301 	orreq.w	r3, r3, #1
 800c404:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c408:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c40c:	4814      	ldr	r0, [pc, #80]	@ (800c460 <HAL_TIM_Base_Start_IT+0x94>)
 800c40e:	42a2      	cmp	r2, r4
 800c410:	bf08      	it	eq
 800c412:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c416:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c418:	4282      	cmp	r2, r0
 800c41a:	bf08      	it	eq
 800c41c:	f043 0301 	orreq.w	r3, r3, #1
 800c420:	4910      	ldr	r1, [pc, #64]	@ (800c464 <HAL_TIM_Base_Start_IT+0x98>)
 800c422:	428a      	cmp	r2, r1
 800c424:	bf08      	it	eq
 800c426:	f043 0301 	orreq.w	r3, r3, #1
 800c42a:	b913      	cbnz	r3, 800c432 <HAL_TIM_Base_Start_IT+0x66>
 800c42c:	4b0e      	ldr	r3, [pc, #56]	@ (800c468 <HAL_TIM_Base_Start_IT+0x9c>)
 800c42e:	429a      	cmp	r2, r3
 800c430:	d107      	bne.n	800c442 <HAL_TIM_Base_Start_IT+0x76>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c432:	6891      	ldr	r1, [r2, #8]
 800c434:	4b0d      	ldr	r3, [pc, #52]	@ (800c46c <HAL_TIM_Base_Start_IT+0xa0>)
 800c436:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c438:	2b06      	cmp	r3, #6
 800c43a:	d006      	beq.n	800c44a <HAL_TIM_Base_Start_IT+0x7e>
 800c43c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c440:	d003      	beq.n	800c44a <HAL_TIM_Base_Start_IT+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800c442:	6813      	ldr	r3, [r2, #0]
 800c444:	f043 0301 	orr.w	r3, r3, #1
 800c448:	6013      	str	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800c44a:	2000      	movs	r0, #0
}
 800c44c:	bc30      	pop	{r4, r5}
 800c44e:	4770      	bx	lr
    return HAL_ERROR;
 800c450:	2001      	movs	r0, #1
}
 800c452:	4770      	bx	lr
 800c454:	40010000 	.word	0x40010000
 800c458:	40000400 	.word	0x40000400
 800c45c:	40000800 	.word	0x40000800
 800c460:	40010400 	.word	0x40010400
 800c464:	40001800 	.word	0x40001800
 800c468:	40014000 	.word	0x40014000
 800c46c:	00010007 	.word	0x00010007

0800c470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c470:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c472:	4a34      	ldr	r2, [pc, #208]	@ (800c544 <TIM_Base_SetConfig+0xd4>)
 800c474:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800c478:	4c33      	ldr	r4, [pc, #204]	@ (800c548 <TIM_Base_SetConfig+0xd8>)
 800c47a:	eba0 0202 	sub.w	r2, r0, r2
  tmpcr1 = TIMx->CR1;
 800c47e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c480:	eba0 0e04 	sub.w	lr, r0, r4
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c484:	694f      	ldr	r7, [r1, #20]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c486:	fab2 f282 	clz	r2, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c48a:	680d      	ldr	r5, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c48c:	fabe fe8e 	clz	lr, lr
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c490:	688e      	ldr	r6, [r1, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c492:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800c496:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800c49a:	d020      	beq.n	800c4de <TIM_Base_SetConfig+0x6e>
 800c49c:	b9fa      	cbnz	r2, 800c4de <TIM_Base_SetConfig+0x6e>
 800c49e:	f8df c0b4 	ldr.w	ip, [pc, #180]	@ 800c554 <TIM_Base_SetConfig+0xe4>
 800c4a2:	4560      	cmp	r0, ip
 800c4a4:	d01b      	beq.n	800c4de <TIM_Base_SetConfig+0x6e>
 800c4a6:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800c4aa:	4560      	cmp	r0, ip
 800c4ac:	d017      	beq.n	800c4de <TIM_Base_SetConfig+0x6e>
 800c4ae:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800c4b2:	4560      	cmp	r0, ip
 800c4b4:	d013      	beq.n	800c4de <TIM_Base_SetConfig+0x6e>
 800c4b6:	f1be 0f00 	cmp.w	lr, #0
 800c4ba:	d110      	bne.n	800c4de <TIM_Base_SetConfig+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c4bc:	4c23      	ldr	r4, [pc, #140]	@ (800c54c <TIM_Base_SetConfig+0xdc>)
 800c4be:	4a24      	ldr	r2, [pc, #144]	@ (800c550 <TIM_Base_SetConfig+0xe0>)
 800c4c0:	4290      	cmp	r0, r2
 800c4c2:	bf18      	it	ne
 800c4c4:	42a0      	cmpne	r0, r4
 800c4c6:	d032      	beq.n	800c52e <TIM_Base_SetConfig+0xbe>
 800c4c8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c4cc:	4290      	cmp	r0, r2
 800c4ce:	d02e      	beq.n	800c52e <TIM_Base_SetConfig+0xbe>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c4d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c4d4:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 800c4d6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c4d8:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c4da:	6285      	str	r5, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c4dc:	e01d      	b.n	800c51a <TIM_Base_SetConfig+0xaa>
    tmpcr1 |= Structure->CounterMode;
 800c4de:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c4e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800c4e4:	4323      	orrs	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c4e6:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800c4e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c4ec:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c4ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c4f2:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 800c4f4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c4f6:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c4f8:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c4fa:	b962      	cbnz	r2, 800c516 <TIM_Base_SetConfig+0xa6>
 800c4fc:	f1be 0f00 	cmp.w	lr, #0
 800c500:	d109      	bne.n	800c516 <TIM_Base_SetConfig+0xa6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c502:	4a13      	ldr	r2, [pc, #76]	@ (800c550 <TIM_Base_SetConfig+0xe0>)
 800c504:	4b11      	ldr	r3, [pc, #68]	@ (800c54c <TIM_Base_SetConfig+0xdc>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c506:	4298      	cmp	r0, r3
 800c508:	bf18      	it	ne
 800c50a:	4290      	cmpne	r0, r2
 800c50c:	d003      	beq.n	800c516 <TIM_Base_SetConfig+0xa6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c50e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c512:	4298      	cmp	r0, r3
 800c514:	d101      	bne.n	800c51a <TIM_Base_SetConfig+0xaa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c516:	690b      	ldr	r3, [r1, #16]
 800c518:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c51a:	2301      	movs	r3, #1
 800c51c:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c51e:	6903      	ldr	r3, [r0, #16]
 800c520:	07db      	lsls	r3, r3, #31
 800c522:	d503      	bpl.n	800c52c <TIM_Base_SetConfig+0xbc>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c524:	6903      	ldr	r3, [r0, #16]
 800c526:	f023 0301 	bic.w	r3, r3, #1
 800c52a:	6103      	str	r3, [r0, #16]
  }
}
 800c52c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c52e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800c530:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c534:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c53a:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 800c53c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c53e:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c540:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c542:	e7de      	b.n	800c502 <TIM_Base_SetConfig+0x92>
 800c544:	40010000 	.word	0x40010000
 800c548:	40010400 	.word	0x40010400
 800c54c:	40014000 	.word	0x40014000
 800c550:	40014400 	.word	0x40014400
 800c554:	40000400 	.word	0x40000400

0800c558 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800c558:	b370      	cbz	r0, 800c5b8 <HAL_TIM_Base_Init+0x60>
{
 800c55a:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800c55c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c560:	4604      	mov	r4, r0
 800c562:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c566:	b313      	cbz	r3, 800c5ae <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c568:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800c56a:	2302      	movs	r3, #2
 800c56c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c570:	f851 0b04 	ldr.w	r0, [r1], #4
 800c574:	f7ff ff7c 	bl	800c470 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c578:	2301      	movs	r3, #1
  return HAL_OK;
 800c57a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c57c:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c580:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800c584:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800c588:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800c58c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800c590:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c594:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c598:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800c59c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c5a0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800c5a4:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c5a8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800c5ac:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800c5ae:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c5b2:	f7f4 fdb5 	bl	8001120 <HAL_TIM_Base_MspInit>
 800c5b6:	e7d7      	b.n	800c568 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800c5b8:	2001      	movs	r0, #1
}
 800c5ba:	4770      	bx	lr

0800c5bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c5bc:	6802      	ldr	r2, [r0, #0]
 800c5be:	b410      	push	{r4}
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c0:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c8:	e842 3100 	strex	r1, r3, [r2]
 800c5cc:	2900      	cmp	r1, #0
 800c5ce:	d1f7      	bne.n	800c5c0 <UART_EndRxTransfer+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c5d0:	4c14      	ldr	r4, [pc, #80]	@ (800c624 <UART_EndRxTransfer+0x68>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d2:	f102 0308 	add.w	r3, r2, #8
 800c5d6:	e853 3f00 	ldrex	r3, [r3]
 800c5da:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5dc:	f102 0c08 	add.w	ip, r2, #8
 800c5e0:	e84c 3100 	strex	r1, r3, [ip]
 800c5e4:	2900      	cmp	r1, #0
 800c5e6:	d1f4      	bne.n	800c5d2 <UART_EndRxTransfer+0x16>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5e8:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d008      	beq.n	800c600 <UART_EndRxTransfer+0x44>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5ee:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800c5f0:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
}
 800c5f2:	f85d 4b04 	ldr.w	r4, [sp], #4
  huart->RxState = HAL_UART_STATE_READY;
 800c5f6:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
  huart->RxISR = NULL;
 800c5fa:	6743      	str	r3, [r0, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5fc:	66c3      	str	r3, [r0, #108]	@ 0x6c
}
 800c5fe:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c600:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c604:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c608:	e842 3100 	strex	r1, r3, [r2]
 800c60c:	2900      	cmp	r1, #0
 800c60e:	d0ee      	beq.n	800c5ee <UART_EndRxTransfer+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c610:	e852 3f00 	ldrex	r3, [r2]
 800c614:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c618:	e842 3100 	strex	r1, r3, [r2]
 800c61c:	2900      	cmp	r1, #0
 800c61e:	d1ef      	bne.n	800c600 <UART_EndRxTransfer+0x44>
 800c620:	e7e5      	b.n	800c5ee <UART_EndRxTransfer+0x32>
 800c622:	bf00      	nop
 800c624:	effffffe 	.word	0xeffffffe

0800c628 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c628:	6901      	ldr	r1, [r0, #16]
 800c62a:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800c62c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c62e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c630:	49a2      	ldr	r1, [pc, #648]	@ (800c8bc <UART_SetConfig+0x294>)
{
 800c632:	b570      	push	{r4, r5, r6, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c634:	6945      	ldr	r5, [r0, #20]
{
 800c636:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c638:	69c0      	ldr	r0, [r0, #28]
{
 800c63a:	b086      	sub	sp, #24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c63c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c63e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c640:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c642:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c644:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c646:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c648:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c64a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c64c:	685a      	ldr	r2, [r3, #4]
 800c64e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800c652:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c654:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c656:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c658:	4a99      	ldr	r2, [pc, #612]	@ (800c8c0 <UART_SetConfig+0x298>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	f000 8118 	beq.w	800c890 <UART_SetConfig+0x268>
    tmpreg |= huart->Init.OneBitSampling;
 800c660:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c662:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800c664:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c666:	4a97      	ldr	r2, [pc, #604]	@ (800c8c4 <UART_SetConfig+0x29c>)
 800c668:	4032      	ands	r2, r6
 800c66a:	4311      	orrs	r1, r2
 800c66c:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c66e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c670:	f022 020f 	bic.w	r2, r2, #15
 800c674:	432a      	orrs	r2, r5
 800c676:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c678:	4a93      	ldr	r2, [pc, #588]	@ (800c8c8 <UART_SetConfig+0x2a0>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d028      	beq.n	800c6d0 <UART_SetConfig+0xa8>
 800c67e:	4a93      	ldr	r2, [pc, #588]	@ (800c8cc <UART_SetConfig+0x2a4>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d01a      	beq.n	800c6ba <UART_SetConfig+0x92>
 800c684:	4a92      	ldr	r2, [pc, #584]	@ (800c8d0 <UART_SetConfig+0x2a8>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d017      	beq.n	800c6ba <UART_SetConfig+0x92>
 800c68a:	4a92      	ldr	r2, [pc, #584]	@ (800c8d4 <UART_SetConfig+0x2ac>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d014      	beq.n	800c6ba <UART_SetConfig+0x92>
 800c690:	4a91      	ldr	r2, [pc, #580]	@ (800c8d8 <UART_SetConfig+0x2b0>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d011      	beq.n	800c6ba <UART_SetConfig+0x92>
 800c696:	4a91      	ldr	r2, [pc, #580]	@ (800c8dc <UART_SetConfig+0x2b4>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d019      	beq.n	800c6d0 <UART_SetConfig+0xa8>
 800c69c:	4a90      	ldr	r2, [pc, #576]	@ (800c8e0 <UART_SetConfig+0x2b8>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d00b      	beq.n	800c6ba <UART_SetConfig+0x92>
 800c6a2:	4a90      	ldr	r2, [pc, #576]	@ (800c8e4 <UART_SetConfig+0x2bc>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d008      	beq.n	800c6ba <UART_SetConfig+0x92>
        ret = HAL_ERROR;
 800c6a8:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800c6aa:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800c6ac:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->RxISR = NULL;
 800c6b0:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800c6b2:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800c6b4:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 800c6b6:	b006      	add	sp, #24
 800c6b8:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c6ba:	4b8b      	ldr	r3, [pc, #556]	@ (800c8e8 <UART_SetConfig+0x2c0>)
 800c6bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6be:	f003 0307 	and.w	r3, r3, #7
 800c6c2:	2b05      	cmp	r3, #5
 800c6c4:	d8f0      	bhi.n	800c6a8 <UART_SetConfig+0x80>
 800c6c6:	e8df f003 	tbb	[pc, r3]
 800c6ca:	5f9d      	.short	0x5f9d
 800c6cc:	977e7169 	.word	0x977e7169
 800c6d0:	4b85      	ldr	r3, [pc, #532]	@ (800c8e8 <UART_SetConfig+0x2c0>)
 800c6d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c6d8:	2b28      	cmp	r3, #40	@ 0x28
 800c6da:	d8e5      	bhi.n	800c6a8 <UART_SetConfig+0x80>
 800c6dc:	a201      	add	r2, pc, #4	@ (adr r2, 800c6e4 <UART_SetConfig+0xbc>)
 800c6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e2:	bf00      	nop
 800c6e4:	0800c85f 	.word	0x0800c85f
 800c6e8:	0800c6a9 	.word	0x0800c6a9
 800c6ec:	0800c6a9 	.word	0x0800c6a9
 800c6f0:	0800c6a9 	.word	0x0800c6a9
 800c6f4:	0800c6a9 	.word	0x0800c6a9
 800c6f8:	0800c6a9 	.word	0x0800c6a9
 800c6fc:	0800c6a9 	.word	0x0800c6a9
 800c700:	0800c6a9 	.word	0x0800c6a9
 800c704:	0800c789 	.word	0x0800c789
 800c708:	0800c6a9 	.word	0x0800c6a9
 800c70c:	0800c6a9 	.word	0x0800c6a9
 800c710:	0800c6a9 	.word	0x0800c6a9
 800c714:	0800c6a9 	.word	0x0800c6a9
 800c718:	0800c6a9 	.word	0x0800c6a9
 800c71c:	0800c6a9 	.word	0x0800c6a9
 800c720:	0800c6a9 	.word	0x0800c6a9
 800c724:	0800c79d 	.word	0x0800c79d
 800c728:	0800c6a9 	.word	0x0800c6a9
 800c72c:	0800c6a9 	.word	0x0800c6a9
 800c730:	0800c6a9 	.word	0x0800c6a9
 800c734:	0800c6a9 	.word	0x0800c6a9
 800c738:	0800c6a9 	.word	0x0800c6a9
 800c73c:	0800c6a9 	.word	0x0800c6a9
 800c740:	0800c6a9 	.word	0x0800c6a9
 800c744:	0800c7ad 	.word	0x0800c7ad
 800c748:	0800c6a9 	.word	0x0800c6a9
 800c74c:	0800c6a9 	.word	0x0800c6a9
 800c750:	0800c6a9 	.word	0x0800c6a9
 800c754:	0800c6a9 	.word	0x0800c6a9
 800c758:	0800c6a9 	.word	0x0800c6a9
 800c75c:	0800c6a9 	.word	0x0800c6a9
 800c760:	0800c6a9 	.word	0x0800c6a9
 800c764:	0800c7c7 	.word	0x0800c7c7
 800c768:	0800c6a9 	.word	0x0800c6a9
 800c76c:	0800c6a9 	.word	0x0800c6a9
 800c770:	0800c6a9 	.word	0x0800c6a9
 800c774:	0800c6a9 	.word	0x0800c6a9
 800c778:	0800c6a9 	.word	0x0800c6a9
 800c77c:	0800c6a9 	.word	0x0800c6a9
 800c780:	0800c6a9 	.word	0x0800c6a9
 800c784:	0800c7f9 	.word	0x0800c7f9
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c788:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c78c:	d040      	beq.n	800c810 <UART_SetConfig+0x1e8>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c78e:	4668      	mov	r0, sp
 800c790:	f7ff fce8 	bl	800c164 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c794:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800c796:	b368      	cbz	r0, 800c7f4 <UART_SetConfig+0x1cc>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c798:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c79a:	e018      	b.n	800c7ce <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c79c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c7a0:	d06e      	beq.n	800c880 <UART_SetConfig+0x258>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7a2:	a803      	add	r0, sp, #12
 800c7a4:	f7ff fd78 	bl	800c298 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c7a8:	9804      	ldr	r0, [sp, #16]
        break;
 800c7aa:	e7f4      	b.n	800c796 <UART_SetConfig+0x16e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c7ac:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c7b0:	d05b      	beq.n	800c86a <UART_SetConfig+0x242>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7b2:	4b4d      	ldr	r3, [pc, #308]	@ (800c8e8 <UART_SetConfig+0x2c0>)
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	0692      	lsls	r2, r2, #26
 800c7b8:	d54c      	bpl.n	800c854 <UART_SetConfig+0x22c>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	484b      	ldr	r0, [pc, #300]	@ (800c8ec <UART_SetConfig+0x2c4>)
 800c7be:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c7c2:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800c7c4:	e003      	b.n	800c7ce <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c7c6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) CSI_VALUE;
 800c7ca:	4849      	ldr	r0, [pc, #292]	@ (800c8f0 <UART_SetConfig+0x2c8>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c7cc:	d027      	beq.n	800c81e <UART_SetConfig+0x1f6>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7ce:	4a49      	ldr	r2, [pc, #292]	@ (800c8f4 <UART_SetConfig+0x2cc>)
 800c7d0:	6863      	ldr	r3, [r4, #4]
 800c7d2:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c7d6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7da:	fbb0 f0f1 	udiv	r0, r0, r1
 800c7de:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800c7e2:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c7e6:	f1a0 0310 	sub.w	r3, r0, #16
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	f63f af5c 	bhi.w	800c6a8 <UART_SetConfig+0x80>
          huart->Instance->BRR = usartdiv;
 800c7f0:	6823      	ldr	r3, [r4, #0]
 800c7f2:	60d8      	str	r0, [r3, #12]
          pclk = (uint32_t) HSI_VALUE;
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	e758      	b.n	800c6aa <UART_SetConfig+0x82>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c7f8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c7fc:	d00f      	beq.n	800c81e <UART_SetConfig+0x1f6>
        pclk = (uint32_t) LSE_VALUE;
 800c7fe:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800c802:	e7e4      	b.n	800c7ce <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c804:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c808:	d026      	beq.n	800c858 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c80a:	f7fe fc37 	bl	800b07c <HAL_RCC_GetPCLK1Freq>
        break;
 800c80e:	e7c2      	b.n	800c796 <UART_SetConfig+0x16e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c810:	4668      	mov	r0, sp
 800c812:	f7ff fca7 	bl	800c164 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c816:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800c818:	2800      	cmp	r0, #0
 800c81a:	d0eb      	beq.n	800c7f4 <UART_SetConfig+0x1cc>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c81c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c81e:	4b35      	ldr	r3, [pc, #212]	@ (800c8f4 <UART_SetConfig+0x2cc>)
 800c820:	6862      	ldr	r2, [r4, #4]
 800c822:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 800c826:	0853      	lsrs	r3, r2, #1
 800c828:	fbb0 f0f1 	udiv	r0, r0, r1
 800c82c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c830:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c834:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c838:	f1a3 0210 	sub.w	r2, r3, #16
 800c83c:	428a      	cmp	r2, r1
 800c83e:	f63f af33 	bhi.w	800c6a8 <UART_SetConfig+0x80>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c842:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c846:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800c84a:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c84c:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800c84e:	4313      	orrs	r3, r2
 800c850:	60cb      	str	r3, [r1, #12]
 800c852:	e7cf      	b.n	800c7f4 <UART_SetConfig+0x1cc>
          pclk = (uint32_t) HSI_VALUE;
 800c854:	4825      	ldr	r0, [pc, #148]	@ (800c8ec <UART_SetConfig+0x2c4>)
 800c856:	e7ba      	b.n	800c7ce <UART_SetConfig+0x1a6>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c858:	f7fe fc10 	bl	800b07c <HAL_RCC_GetPCLK1Freq>
        break;
 800c85c:	e7dc      	b.n	800c818 <UART_SetConfig+0x1f0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c85e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c862:	d012      	beq.n	800c88a <UART_SetConfig+0x262>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c864:	f7fe fc1c 	bl	800b0a0 <HAL_RCC_GetPCLK2Freq>
        break;
 800c868:	e795      	b.n	800c796 <UART_SetConfig+0x16e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c86a:	4b1f      	ldr	r3, [pc, #124]	@ (800c8e8 <UART_SetConfig+0x2c0>)
 800c86c:	681a      	ldr	r2, [r3, #0]
 800c86e:	0691      	lsls	r1, r2, #26
 800c870:	f140 808a 	bpl.w	800c988 <UART_SetConfig+0x360>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	481d      	ldr	r0, [pc, #116]	@ (800c8ec <UART_SetConfig+0x2c4>)
 800c878:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c87c:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800c87e:	e7ce      	b.n	800c81e <UART_SetConfig+0x1f6>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c880:	a803      	add	r0, sp, #12
 800c882:	f7ff fd09 	bl	800c298 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c886:	9804      	ldr	r0, [sp, #16]
        break;
 800c888:	e7c6      	b.n	800c818 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c88a:	f7fe fc09 	bl	800b0a0 <HAL_RCC_GetPCLK2Freq>
        break;
 800c88e:	e7c3      	b.n	800c818 <UART_SetConfig+0x1f0>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c890:	6898      	ldr	r0, [r3, #8]
 800c892:	4a0c      	ldr	r2, [pc, #48]	@ (800c8c4 <UART_SetConfig+0x29c>)
 800c894:	4002      	ands	r2, r0
 800c896:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c898:	4913      	ldr	r1, [pc, #76]	@ (800c8e8 <UART_SetConfig+0x2c0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c89a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c89c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c89e:	f022 020f 	bic.w	r2, r2, #15
 800c8a2:	432a      	orrs	r2, r5
 800c8a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c8a6:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 800c8a8:	f003 0307 	and.w	r3, r3, #7
 800c8ac:	2b05      	cmp	r3, #5
 800c8ae:	f63f aefb 	bhi.w	800c6a8 <UART_SetConfig+0x80>
 800c8b2:	e8df f003 	tbb	[pc, r3]
 800c8b6:	565b      	.short	0x565b
 800c8b8:	5e61214d 	.word	0x5e61214d
 800c8bc:	cfff69f3 	.word	0xcfff69f3
 800c8c0:	58000c00 	.word	0x58000c00
 800c8c4:	11fff4ff 	.word	0x11fff4ff
 800c8c8:	40011000 	.word	0x40011000
 800c8cc:	40004400 	.word	0x40004400
 800c8d0:	40004800 	.word	0x40004800
 800c8d4:	40004c00 	.word	0x40004c00
 800c8d8:	40005000 	.word	0x40005000
 800c8dc:	40011400 	.word	0x40011400
 800c8e0:	40007800 	.word	0x40007800
 800c8e4:	40007c00 	.word	0x40007c00
 800c8e8:	58024400 	.word	0x58024400
 800c8ec:	03d09000 	.word	0x03d09000
 800c8f0:	003d0900 	.word	0x003d0900
 800c8f4:	08010658 	.word	0x08010658
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8f8:	4b24      	ldr	r3, [pc, #144]	@ (800c98c <UART_SetConfig+0x364>)
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	0690      	lsls	r0, r2, #26
 800c8fe:	d43d      	bmi.n	800c97c <UART_SetConfig+0x354>
          pclk = (uint32_t) HSI_VALUE;
 800c900:	4823      	ldr	r0, [pc, #140]	@ (800c990 <UART_SetConfig+0x368>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c902:	4b24      	ldr	r3, [pc, #144]	@ (800c994 <UART_SetConfig+0x36c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c904:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c906:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c90a:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c90e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c912:	4299      	cmp	r1, r3
 800c914:	f63f aec8 	bhi.w	800c6a8 <UART_SetConfig+0x80>
 800c918:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 800c91c:	f63f aec4 	bhi.w	800c6a8 <UART_SetConfig+0x80>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c920:	2300      	movs	r3, #0
 800c922:	4619      	mov	r1, r3
 800c924:	f7f3 fd44 	bl	80003b0 <__aeabi_uldivmod>
 800c928:	4632      	mov	r2, r6
 800c92a:	0209      	lsls	r1, r1, #8
 800c92c:	0203      	lsls	r3, r0, #8
 800c92e:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800c932:	0870      	lsrs	r0, r6, #1
 800c934:	1818      	adds	r0, r3, r0
 800c936:	f04f 0300 	mov.w	r3, #0
 800c93a:	f141 0100 	adc.w	r1, r1, #0
 800c93e:	f7f3 fd37 	bl	80003b0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c942:	4b15      	ldr	r3, [pc, #84]	@ (800c998 <UART_SetConfig+0x370>)
 800c944:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800c948:	429a      	cmp	r2, r3
 800c94a:	f63f aead 	bhi.w	800c6a8 <UART_SetConfig+0x80>
 800c94e:	e74f      	b.n	800c7f0 <UART_SetConfig+0x1c8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c950:	a803      	add	r0, sp, #12
 800c952:	f7ff fca1 	bl	800c298 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c956:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800c958:	2800      	cmp	r0, #0
 800c95a:	f43f af4b 	beq.w	800c7f4 <UART_SetConfig+0x1cc>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c95e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c960:	e7cf      	b.n	800c902 <UART_SetConfig+0x2da>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c962:	4668      	mov	r0, sp
 800c964:	f7ff fbfe 	bl	800c164 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c968:	9801      	ldr	r0, [sp, #4]
        break;
 800c96a:	e7f5      	b.n	800c958 <UART_SetConfig+0x330>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c96c:	f7ff fbe8 	bl	800c140 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800c970:	e7f2      	b.n	800c958 <UART_SetConfig+0x330>
        pclk = (uint32_t) LSE_VALUE;
 800c972:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800c976:	e7c4      	b.n	800c902 <UART_SetConfig+0x2da>
        pclk = (uint32_t) CSI_VALUE;
 800c978:	4808      	ldr	r0, [pc, #32]	@ (800c99c <UART_SetConfig+0x374>)
 800c97a:	e7c2      	b.n	800c902 <UART_SetConfig+0x2da>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	4804      	ldr	r0, [pc, #16]	@ (800c990 <UART_SetConfig+0x368>)
 800c980:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c984:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800c986:	e7bc      	b.n	800c902 <UART_SetConfig+0x2da>
          pclk = (uint32_t) HSI_VALUE;
 800c988:	4801      	ldr	r0, [pc, #4]	@ (800c990 <UART_SetConfig+0x368>)
 800c98a:	e748      	b.n	800c81e <UART_SetConfig+0x1f6>
 800c98c:	58024400 	.word	0x58024400
 800c990:	03d09000 	.word	0x03d09000
 800c994:	08010658 	.word	0x08010658
 800c998:	000ffcff 	.word	0x000ffcff
 800c99c:	003d0900 	.word	0x003d0900

0800c9a0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c9a0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800c9a2:	071a      	lsls	r2, r3, #28
{
 800c9a4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c9a6:	d506      	bpl.n	800c9b6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c9a8:	6801      	ldr	r1, [r0, #0]
 800c9aa:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800c9ac:	684a      	ldr	r2, [r1, #4]
 800c9ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c9b2:	4322      	orrs	r2, r4
 800c9b4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c9b6:	07dc      	lsls	r4, r3, #31
 800c9b8:	d506      	bpl.n	800c9c8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c9ba:	6801      	ldr	r1, [r0, #0]
 800c9bc:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800c9be:	684a      	ldr	r2, [r1, #4]
 800c9c0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800c9c4:	4322      	orrs	r2, r4
 800c9c6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c9c8:	0799      	lsls	r1, r3, #30
 800c9ca:	d506      	bpl.n	800c9da <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c9cc:	6801      	ldr	r1, [r0, #0]
 800c9ce:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800c9d0:	684a      	ldr	r2, [r1, #4]
 800c9d2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c9d6:	4322      	orrs	r2, r4
 800c9d8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c9da:	075a      	lsls	r2, r3, #29
 800c9dc:	d506      	bpl.n	800c9ec <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c9de:	6801      	ldr	r1, [r0, #0]
 800c9e0:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800c9e2:	684a      	ldr	r2, [r1, #4]
 800c9e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c9e8:	4322      	orrs	r2, r4
 800c9ea:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c9ec:	06dc      	lsls	r4, r3, #27
 800c9ee:	d506      	bpl.n	800c9fe <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c9f0:	6801      	ldr	r1, [r0, #0]
 800c9f2:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800c9f4:	688a      	ldr	r2, [r1, #8]
 800c9f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c9fa:	4322      	orrs	r2, r4
 800c9fc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c9fe:	0699      	lsls	r1, r3, #26
 800ca00:	d506      	bpl.n	800ca10 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ca02:	6801      	ldr	r1, [r0, #0]
 800ca04:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800ca06:	688a      	ldr	r2, [r1, #8]
 800ca08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ca0c:	4322      	orrs	r2, r4
 800ca0e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ca10:	065a      	lsls	r2, r3, #25
 800ca12:	d50a      	bpl.n	800ca2a <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ca14:	6801      	ldr	r1, [r0, #0]
 800ca16:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800ca18:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ca1a:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ca1e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800ca22:	ea42 0204 	orr.w	r2, r2, r4
 800ca26:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ca28:	d00b      	beq.n	800ca42 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ca2a:	061b      	lsls	r3, r3, #24
 800ca2c:	d506      	bpl.n	800ca3c <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ca2e:	6802      	ldr	r2, [r0, #0]
 800ca30:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800ca32:	6853      	ldr	r3, [r2, #4]
 800ca34:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800ca38:	430b      	orrs	r3, r1
 800ca3a:	6053      	str	r3, [r2, #4]
}
 800ca3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca40:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ca42:	684a      	ldr	r2, [r1, #4]
 800ca44:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800ca46:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800ca4a:	4322      	orrs	r2, r4
 800ca4c:	604a      	str	r2, [r1, #4]
 800ca4e:	e7ec      	b.n	800ca2a <UART_AdvFeatureConfig+0x8a>

0800ca50 <UART_WaitOnFlagUntilTimeout>:
{
 800ca50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca54:	9f08      	ldr	r7, [sp, #32]
 800ca56:	460d      	mov	r5, r1
 800ca58:	4680      	mov	r8, r0
 800ca5a:	4616      	mov	r6, r2
 800ca5c:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca5e:	6801      	ldr	r1, [r0, #0]
 800ca60:	e001      	b.n	800ca66 <UART_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 800ca62:	1c78      	adds	r0, r7, #1
 800ca64:	d10b      	bne.n	800ca7e <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca66:	69cc      	ldr	r4, [r1, #28]
 800ca68:	ea35 0404 	bics.w	r4, r5, r4
 800ca6c:	bf0c      	ite	eq
 800ca6e:	2401      	moveq	r4, #1
 800ca70:	2400      	movne	r4, #0
 800ca72:	42b4      	cmp	r4, r6
 800ca74:	d0f5      	beq.n	800ca62 <UART_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 800ca76:	2300      	movs	r3, #0
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca7e:	f7fd fbcd 	bl	800a21c <HAL_GetTick>
 800ca82:	eba0 0009 	sub.w	r0, r0, r9
 800ca86:	fab7 f487 	clz	r4, r7
 800ca8a:	42b8      	cmp	r0, r7
 800ca8c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800ca90:	d81b      	bhi.n	800caca <UART_WaitOnFlagUntilTimeout+0x7a>
 800ca92:	b1d7      	cbz	r7, 800caca <UART_WaitOnFlagUntilTimeout+0x7a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ca94:	f8d8 1000 	ldr.w	r1, [r8]
 800ca98:	680b      	ldr	r3, [r1, #0]
 800ca9a:	075a      	lsls	r2, r3, #29
 800ca9c:	d5e3      	bpl.n	800ca66 <UART_WaitOnFlagUntilTimeout+0x16>
 800ca9e:	2d80      	cmp	r5, #128	@ 0x80
 800caa0:	d0e1      	beq.n	800ca66 <UART_WaitOnFlagUntilTimeout+0x16>
 800caa2:	2d40      	cmp	r5, #64	@ 0x40
 800caa4:	d0df      	beq.n	800ca66 <UART_WaitOnFlagUntilTimeout+0x16>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800caa6:	69cb      	ldr	r3, [r1, #28]
 800caa8:	f013 0a08 	ands.w	sl, r3, #8
 800caac:	d10f      	bne.n	800cace <UART_WaitOnFlagUntilTimeout+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800caae:	69ca      	ldr	r2, [r1, #28]
 800cab0:	0513      	lsls	r3, r2, #20
 800cab2:	d5d8      	bpl.n	800ca66 <UART_WaitOnFlagUntilTimeout+0x16>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cab4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
          UART_EndRxTransfer(huart);
 800cab8:	4640      	mov	r0, r8
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800caba:	620a      	str	r2, [r1, #32]
          UART_EndRxTransfer(huart);
 800cabc:	f7ff fd7e 	bl	800c5bc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cac0:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 800cac2:	f888 a084 	strb.w	sl, [r8, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cac6:	f8c8 2090 	str.w	r2, [r8, #144]	@ 0x90
        return HAL_TIMEOUT;
 800caca:	2303      	movs	r3, #3
 800cacc:	e7d4      	b.n	800ca78 <UART_WaitOnFlagUntilTimeout+0x28>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cace:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 800cad0:	4640      	mov	r0, r8
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cad2:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 800cad4:	f7ff fd72 	bl	800c5bc <UART_EndRxTransfer>
          return HAL_ERROR;
 800cad8:	2301      	movs	r3, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cada:	f8c8 5090 	str.w	r5, [r8, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 800cade:	f888 4084 	strb.w	r4, [r8, #132]	@ 0x84
          return HAL_ERROR;
 800cae2:	e7c9      	b.n	800ca78 <UART_WaitOnFlagUntilTimeout+0x28>

0800cae4 <HAL_UART_Transmit>:
{
 800cae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cae8:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800caea:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 800caee:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_READY)
 800caf0:	2b20      	cmp	r3, #32
 800caf2:	d13b      	bne.n	800cb6c <HAL_UART_Transmit+0x88>
    if ((pData == NULL) || (Size == 0U))
 800caf4:	460d      	mov	r5, r1
 800caf6:	b3a9      	cbz	r1, 800cb64 <HAL_UART_Transmit+0x80>
 800caf8:	fab2 f882 	clz	r8, r2
 800cafc:	4617      	mov	r7, r2
 800cafe:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800cb02:	b37a      	cbz	r2, 800cb64 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cb04:	2321      	movs	r3, #33	@ 0x21
 800cb06:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb08:	f8c0 8090 	str.w	r8, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cb0c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 800cb10:	f7fd fb84 	bl	800a21c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb14:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800cb16:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 800cb1e:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    tickstart = HAL_GetTick();
 800cb22:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb24:	d109      	bne.n	800cb3a <HAL_UART_Transmit+0x56>
 800cb26:	e03b      	b.n	800cba0 <HAL_UART_Transmit+0xbc>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cb28:	f815 2b01 	ldrb.w	r2, [r5], #1
 800cb2c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 800cb2e:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 800cb32:	3a01      	subs	r2, #1
 800cb34:	b292      	uxth	r2, r2
 800cb36:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cb3a:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	b1fb      	cbz	r3, 800cb82 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cb42:	463b      	mov	r3, r7
 800cb44:	2200      	movs	r2, #0
 800cb46:	2180      	movs	r1, #128	@ 0x80
 800cb48:	4620      	mov	r0, r4
 800cb4a:	9600      	str	r6, [sp, #0]
 800cb4c:	f7ff ff80 	bl	800ca50 <UART_WaitOnFlagUntilTimeout>
 800cb50:	b980      	cbnz	r0, 800cb74 <HAL_UART_Transmit+0x90>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cb52:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 800cb54:	2d00      	cmp	r5, #0
 800cb56:	d1e7      	bne.n	800cb28 <HAL_UART_Transmit+0x44>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cb58:	f838 2b02 	ldrh.w	r2, [r8], #2
 800cb5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cb60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cb62:	e7e4      	b.n	800cb2e <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 800cb64:	2001      	movs	r0, #1
}
 800cb66:	b002      	add	sp, #8
 800cb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800cb6c:	2002      	movs	r0, #2
}
 800cb6e:	b002      	add	sp, #8
 800cb70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->gState = HAL_UART_STATE_READY;
 800cb74:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800cb76:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 800cb78:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 800cb7c:	b002      	add	sp, #8
 800cb7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cb82:	463b      	mov	r3, r7
 800cb84:	2200      	movs	r2, #0
 800cb86:	2140      	movs	r1, #64	@ 0x40
 800cb88:	4620      	mov	r0, r4
 800cb8a:	9600      	str	r6, [sp, #0]
 800cb8c:	f7ff ff60 	bl	800ca50 <UART_WaitOnFlagUntilTimeout>
 800cb90:	2800      	cmp	r0, #0
 800cb92:	d1ef      	bne.n	800cb74 <HAL_UART_Transmit+0x90>
    huart->gState = HAL_UART_STATE_READY;
 800cb94:	2320      	movs	r3, #32
 800cb96:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 800cb9a:	b002      	add	sp, #8
 800cb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cba0:	6923      	ldr	r3, [r4, #16]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d1c9      	bne.n	800cb3a <HAL_UART_Transmit+0x56>
 800cba6:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800cba8:	461d      	mov	r5, r3
 800cbaa:	e7c6      	b.n	800cb3a <HAL_UART_Transmit+0x56>

0800cbac <UART_CheckIdleState>:
{
 800cbac:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbae:	2600      	movs	r6, #0
{
 800cbb0:	4604      	mov	r4, r0
 800cbb2:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbb4:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800cbb8:	f7fd fb30 	bl	800a21c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cbbc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800cbbe:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cbc0:	681a      	ldr	r2, [r3, #0]
 800cbc2:	0712      	lsls	r2, r2, #28
 800cbc4:	d410      	bmi.n	800cbe8 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	075b      	lsls	r3, r3, #29
 800cbca:	d427      	bmi.n	800cc1c <UART_CheckIdleState+0x70>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbcc:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800cbce:	2220      	movs	r2, #32
  return HAL_OK;
 800cbd0:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800cbd2:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cbd6:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbda:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cbdc:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 800cbde:	2300      	movs	r3, #0
 800cbe0:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800cbe4:	b002      	add	sp, #8
 800cbe6:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cbe8:	f06f 417e 	mvn.w	r1, #4261412864	@ 0xfe000000
 800cbec:	4603      	mov	r3, r0
 800cbee:	4632      	mov	r2, r6
 800cbf0:	4620      	mov	r0, r4
 800cbf2:	9100      	str	r1, [sp, #0]
 800cbf4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cbf8:	f7ff ff2a 	bl	800ca50 <UART_WaitOnFlagUntilTimeout>
 800cbfc:	6823      	ldr	r3, [r4, #0]
 800cbfe:	2800      	cmp	r0, #0
 800cc00:	d0e1      	beq.n	800cbc6 <UART_CheckIdleState+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc02:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cc06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc0a:	e843 2100 	strex	r1, r2, [r3]
 800cc0e:	2900      	cmp	r1, #0
 800cc10:	d1f7      	bne.n	800cc02 <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 800cc12:	2320      	movs	r3, #32
 800cc14:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 800cc18:	2003      	movs	r0, #3
 800cc1a:	e7e0      	b.n	800cbde <UART_CheckIdleState+0x32>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc1c:	f06f 407e 	mvn.w	r0, #4261412864	@ 0xfe000000
 800cc20:	462b      	mov	r3, r5
 800cc22:	2200      	movs	r2, #0
 800cc24:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cc28:	9000      	str	r0, [sp, #0]
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f7ff ff10 	bl	800ca50 <UART_WaitOnFlagUntilTimeout>
 800cc30:	2800      	cmp	r0, #0
 800cc32:	d0cb      	beq.n	800cbcc <UART_CheckIdleState+0x20>
 800cc34:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc36:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc3a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc3e:	e843 2100 	strex	r1, r2, [r3]
 800cc42:	2900      	cmp	r1, #0
 800cc44:	d1f7      	bne.n	800cc36 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc46:	f103 0208 	add.w	r2, r3, #8
 800cc4a:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc4e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc52:	f103 0008 	add.w	r0, r3, #8
 800cc56:	e840 2100 	strex	r1, r2, [r0]
 800cc5a:	2900      	cmp	r1, #0
 800cc5c:	d1f3      	bne.n	800cc46 <UART_CheckIdleState+0x9a>
      huart->RxState = HAL_UART_STATE_READY;
 800cc5e:	2320      	movs	r3, #32
 800cc60:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 800cc64:	e7d8      	b.n	800cc18 <UART_CheckIdleState+0x6c>
 800cc66:	bf00      	nop

0800cc68 <HAL_UART_Init>:
  if (huart == NULL)
 800cc68:	b380      	cbz	r0, 800cccc <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800cc6a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 800cc6e:	b510      	push	{r4, lr}
 800cc70:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800cc72:	b333      	cbz	r3, 800ccc2 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 800cc74:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800cc76:	2324      	movs	r3, #36	@ 0x24
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cc78:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 800cc7a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800cc7e:	6813      	ldr	r3, [r2, #0]
 800cc80:	f023 0301 	bic.w	r3, r3, #1
 800cc84:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cc86:	b9c1      	cbnz	r1, 800ccba <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cc88:	4620      	mov	r0, r4
 800cc8a:	f7ff fccd 	bl	800c628 <UART_SetConfig>
 800cc8e:	2801      	cmp	r0, #1
 800cc90:	d011      	beq.n	800ccb6 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc92:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800cc94:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc96:	685a      	ldr	r2, [r3, #4]
 800cc98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cc9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc9e:	689a      	ldr	r2, [r3, #8]
 800cca0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cca4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	f042 0201 	orr.w	r2, r2, #1
}
 800ccac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800ccb0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800ccb2:	f7ff bf7b 	b.w	800cbac <UART_CheckIdleState>
}
 800ccb6:	2001      	movs	r0, #1
 800ccb8:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f7ff fe70 	bl	800c9a0 <UART_AdvFeatureConfig>
 800ccc0:	e7e2      	b.n	800cc88 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 800ccc2:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800ccc6:	f7f4 fa43 	bl	8001150 <HAL_UART_MspInit>
 800ccca:	e7d3      	b.n	800cc74 <HAL_UART_Init+0xc>
}
 800cccc:	2001      	movs	r0, #1
 800ccce:	4770      	bx	lr

0800ccd0 <UARTEx_SetNbDataToProcess.part.0>:
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ccd0:	6803      	ldr	r3, [r0, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ccd2:	4a0e      	ldr	r2, [pc, #56]	@ (800cd0c <UARTEx_SetNbDataToProcess.part.0+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ccd4:	6899      	ldr	r1, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ccd6:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ccd8:	f3c1 6142 	ubfx	r1, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ccdc:	ea4f 7c53 	mov.w	ip, r3, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cce0:	5c53      	ldrb	r3, [r2, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cce2:	f812 200c 	ldrb.w	r2, [r2, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cce6:	011b      	lsls	r3, r3, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cce8:	0112      	lsls	r2, r2, #4
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 800ccea:	b410      	push	{r4}
                               (uint16_t)denominator[tx_fifo_threshold];
 800ccec:	4c08      	ldr	r4, [pc, #32]	@ (800cd10 <UARTEx_SetNbDataToProcess.part.0+0x40>)
 800ccee:	f814 c00c 	ldrb.w	ip, [r4, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 800ccf2:	5c61      	ldrb	r1, [r4, r1]
  }
}
 800ccf4:	f85d 4b04 	ldr.w	r4, [sp], #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ccf8:	fbb2 f2fc 	udiv	r2, r2, ip
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ccfc:	fbb3 f3f1 	udiv	r3, r3, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd00:	f8a0 206a 	strh.w	r2, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd04:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
}
 800cd08:	4770      	bx	lr
 800cd0a:	bf00      	nop
 800cd0c:	08010678 	.word	0x08010678
 800cd10:	08010670 	.word	0x08010670

0800cd14 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800cd14:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 800cd18:	2a01      	cmp	r2, #1
 800cd1a:	d017      	beq.n	800cd4c <HAL_UARTEx_DisableFifoMode+0x38>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd1c:	6802      	ldr	r2, [r0, #0]
 800cd1e:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800cd20:	2024      	movs	r0, #36	@ 0x24
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cd22:	2100      	movs	r1, #0
{
 800cd24:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800cd26:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  huart->gState = HAL_UART_STATE_READY;
 800cd2a:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd2c:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800cd2e:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cd30:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 800cd34:	f024 0401 	bic.w	r4, r4, #1
 800cd38:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cd3a:	6659      	str	r1, [r3, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd3c:	6010      	str	r0, [r2, #0]
  return HAL_OK;
 800cd3e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800cd40:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800cd44:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 800cd48:	bc30      	pop	{r4, r5}
 800cd4a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800cd4c:	2002      	movs	r0, #2
}
 800cd4e:	4770      	bx	lr

0800cd50 <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 800cd50:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d020      	beq.n	800cd9a <HAL_UARTEx_SetTxFifoThreshold+0x4a>
  huart->gState = HAL_UART_STATE_BUSY;
 800cd58:	2324      	movs	r3, #36	@ 0x24
{
 800cd5a:	b570      	push	{r4, r5, r6, lr}
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd5c:	6805      	ldr	r5, [r0, #0]
 800cd5e:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800cd60:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd64:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800cd66:	682b      	ldr	r3, [r5, #0]
 800cd68:	f023 0301 	bic.w	r3, r3, #1
 800cd6c:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cd6e:	68ab      	ldr	r3, [r5, #8]
 800cd70:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800cd74:	4319      	orrs	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cd76:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cd78:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cd7a:	b153      	cbz	r3, 800cd92 <HAL_UARTEx_SetTxFifoThreshold+0x42>
 800cd7c:	f7ff ffa8 	bl	800ccd0 <UARTEx_SetNbDataToProcess.part.0>
  __HAL_UNLOCK(huart);
 800cd80:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800cd82:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd84:	602e      	str	r6, [r5, #0]
  return HAL_OK;
 800cd86:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800cd88:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800cd8c:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800cd90:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800cd92:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800cd96:	6683      	str	r3, [r0, #104]	@ 0x68
 800cd98:	e7f2      	b.n	800cd80 <HAL_UARTEx_SetTxFifoThreshold+0x30>
  __HAL_LOCK(huart);
 800cd9a:	2002      	movs	r0, #2
}
 800cd9c:	4770      	bx	lr
 800cd9e:	bf00      	nop

0800cda0 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800cda0:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d020      	beq.n	800cdea <HAL_UARTEx_SetRxFifoThreshold+0x4a>
  huart->gState = HAL_UART_STATE_BUSY;
 800cda8:	2324      	movs	r3, #36	@ 0x24
{
 800cdaa:	b570      	push	{r4, r5, r6, lr}
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdac:	6805      	ldr	r5, [r0, #0]
 800cdae:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800cdb0:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdb4:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800cdb6:	682b      	ldr	r3, [r5, #0]
 800cdb8:	f023 0301 	bic.w	r3, r3, #1
 800cdbc:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cdbe:	68ab      	ldr	r3, [r5, #8]
 800cdc0:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 800cdc4:	4319      	orrs	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cdc6:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cdc8:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cdca:	b153      	cbz	r3, 800cde2 <HAL_UARTEx_SetRxFifoThreshold+0x42>
 800cdcc:	f7ff ff80 	bl	800ccd0 <UARTEx_SetNbDataToProcess.part.0>
  __HAL_UNLOCK(huart);
 800cdd0:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800cdd2:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdd4:	602e      	str	r6, [r5, #0]
  return HAL_OK;
 800cdd6:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800cdd8:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800cddc:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800cde0:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800cde2:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800cde6:	6683      	str	r3, [r0, #104]	@ 0x68
 800cde8:	e7f2      	b.n	800cdd0 <HAL_UARTEx_SetRxFifoThreshold+0x30>
  __HAL_LOCK(huart);
 800cdea:	2002      	movs	r0, #2
}
 800cdec:	4770      	bx	lr
 800cdee:	bf00      	nop

0800cdf0 <vUDPLoggingTaskCreate>:
/*-----------------------------------------------------------*/

BaseType_t rc_create;

void vUDPLoggingTaskCreate( void )
{
 800cdf0:	b510      	push	{r4, lr}
	/* Start a task which will send out the logging lines to a UDP address. */
	rc_create = xTaskCreate( prvLoggingTask, "LogTask", configUDP_LOGGING_TASK_STACK_SIZE, NULL, configUDP_LOGGING_TASK_PRIORITY, &xLoggingTask );
 800cdf2:	2002      	movs	r0, #2
{
 800cdf4:	b082      	sub	sp, #8
	rc_create = xTaskCreate( prvLoggingTask, "LogTask", configUDP_LOGGING_TASK_STACK_SIZE, NULL, configUDP_LOGGING_TASK_PRIORITY, &xLoggingTask );
 800cdf6:	4c07      	ldr	r4, [pc, #28]	@ (800ce14 <vUDPLoggingTaskCreate+0x24>)
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cdfe:	4906      	ldr	r1, [pc, #24]	@ (800ce18 <vUDPLoggingTaskCreate+0x28>)
 800ce00:	e9cd 0400 	strd	r0, r4, [sp]
 800ce04:	4805      	ldr	r0, [pc, #20]	@ (800ce1c <vUDPLoggingTaskCreate+0x2c>)
 800ce06:	f7fb ffe9 	bl	8008ddc <xTaskCreate>
 800ce0a:	4b05      	ldr	r3, [pc, #20]	@ (800ce20 <vUDPLoggingTaskCreate+0x30>)
 800ce0c:	6018      	str	r0, [r3, #0]
}
 800ce0e:	b002      	add	sp, #8
 800ce10:	bd10      	pop	{r4, pc}
 800ce12:	bf00      	nop
 800ce14:	20001044 	.word	0x20001044
 800ce18:	08010680 	.word	0x08010680
 800ce1c:	0800cf8d 	.word	0x0800cf8d
 800ce20:	2000103c 	.word	0x2000103c

0800ce24 <xLoggingGetSocket>:

xSocket_t xLoggingGetSocket( void )
{
xSocket_t xReturn;

	if( ( xUDPLoggingSocket != NULL ) && ( xUDPLoggingSocket != FREERTOS_INVALID_SOCKET ) )
 800ce24:	4b03      	ldr	r3, [pc, #12]	@ (800ce34 <xLoggingGetSocket+0x10>)
 800ce26:	6818      	ldr	r0, [r3, #0]
 800ce28:	1e43      	subs	r3, r0, #1
	{
		xReturn = xUDPLoggingSocket;
	}
	else
	{
		xReturn = NULL;
 800ce2a:	3303      	adds	r3, #3
	}

	return xReturn;
}
 800ce2c:	bf88      	it	hi
 800ce2e:	2000      	movhi	r0, #0
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop
 800ce34:	20000038 	.word	0x20000038

0800ce38 <vUDPLoggingHook>:

void __attribute__((weak)) vUDPLoggingHook( const char *pcMessage, BaseType_t xLength )
{
	( void ) pcMessage;
	( void ) xLength;
}
 800ce38:	4770      	bx	lr
 800ce3a:	bf00      	nop

0800ce3c <lUDPLoggingPrintf>:
{
 800ce3c:	b40f      	push	{r0, r1, r2, r3}
 800ce3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if( xLoggingInitialised == pdFALSE )
 800ce42:	4c4a      	ldr	r4, [pc, #296]	@ (800cf6c <lUDPLoggingPrintf+0x130>)
{
 800ce44:	b087      	sub	sp, #28
	if( xLoggingInitialised == pdFALSE )
 800ce46:	6826      	ldr	r6, [r4, #0]
 800ce48:	2e00      	cmp	r6, #0
 800ce4a:	d050      	beq.n	800ceee <lUDPLoggingPrintf+0xb2>
	configASSERT( pxStreamBuffer );
 800ce4c:	4d48      	ldr	r5, [pc, #288]	@ (800cf70 <lUDPLoggingPrintf+0x134>)
		va_start (args, pcFormatString);
 800ce4e:	aa0f      	add	r2, sp, #60	@ 0x3c
	configASSERT( pxStreamBuffer );
 800ce50:	682b      	ldr	r3, [r5, #0]
 800ce52:	4690      	mov	r8, r2
		va_start (args, pcFormatString);
 800ce54:	9204      	str	r2, [sp, #16]
	configASSERT( pxStreamBuffer );
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	f000 8082 	beq.w	800cf60 <lUDPLoggingPrintf+0x124>
	vTaskSuspendAll();
 800ce5c:	f7fc f8e8 	bl	8009030 <vTaskSuspendAll>
		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 800ce60:	4f44      	ldr	r7, [pc, #272]	@ (800cf74 <lUDPLoggingPrintf+0x138>)
		ullCurrentTime = ullGetHighResolutionTime();
 800ce62:	f000 f991 	bl	800d188 <ullGetHighResolutionTime>
		ulSeconds = ( uint32_t ) ( ullCurrentTime / 1000000ull );
 800ce66:	4a44      	ldr	r2, [pc, #272]	@ (800cf78 <lUDPLoggingPrintf+0x13c>)
 800ce68:	2300      	movs	r3, #0
 800ce6a:	f7f3 faa1 	bl	80003b0 <__aeabi_uldivmod>
 800ce6e:	4604      	mov	r4, r0
		ulMilliSeconds = ( uint32_t ) ( ullCurrentTime / 1000ull );
 800ce70:	4619      	mov	r1, r3
 800ce72:	4610      	mov	r0, r2
 800ce74:	2300      	movs	r3, #0
 800ce76:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ce7a:	f7f3 fa99 	bl	80003b0 <__aeabi_uldivmod>
 800ce7e:	4606      	mov	r6, r0
 800ce80:	4691      	mov	r9, r2
		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 800ce82:	2000      	movs	r0, #0
 800ce84:	f7fc f8e2 	bl	800904c <pcTaskGetName>
 800ce88:	4623      	mov	r3, r4
 800ce8a:	4a3c      	ldr	r2, [pc, #240]	@ (800cf7c <lUDPLoggingPrintf+0x140>)
 800ce8c:	21c8      	movs	r1, #200	@ 0xc8
 800ce8e:	9002      	str	r0, [sp, #8]
 800ce90:	4638      	mov	r0, r7
		ulMilliSeconds = ( uint32_t ) ( ullCurrentTime / 1000ull );
 800ce92:	e9cd 6900 	strd	r6, r9, [sp]
		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 800ce96:	f000 fd73 	bl	800d980 <snprintf>
 800ce9a:	4601      	mov	r1, r0
		xLength += ( size_t ) vsnprintf( xLogEntry.cMessage + xLength, sizeof( xLogEntry.cMessage ) - xLength, pcFormatString, xArgs );
 800ce9c:	4643      	mov	r3, r8
 800ce9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 800cea0:	9105      	str	r1, [sp, #20]
		xLength += ( size_t ) vsnprintf( xLogEntry.cMessage + xLength, sizeof( xLogEntry.cMessage ) - xLength, pcFormatString, xArgs );
 800cea2:	1838      	adds	r0, r7, r0
 800cea4:	f1c1 01c8 	rsb	r1, r1, #200	@ 0xc8
 800cea8:	f000 fd52 	bl	800d950 <vsnprintf>
		xSpace = uxStreamBufferGetSpace( pxStreamBuffer );
 800ceac:	682c      	ldr	r4, [r5, #0]
		xLength += ( size_t ) vsnprintf( xLogEntry.cMessage + xLength, sizeof( xLogEntry.cMessage ) - xLength, pcFormatString, xArgs );
 800ceae:	9b05      	ldr	r3, [sp, #20]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800ceb0:	6921      	ldr	r1, [r4, #16]
 800ceb2:	18c2      	adds	r2, r0, r3
        size_t uxHead = pxBuffer->uxHead;
 800ceb4:	68a6      	ldr	r6, [r4, #8]
        size_t uxTail = pxBuffer->uxTail;
 800ceb6:	6823      	ldr	r3, [r4, #0]
 800ceb8:	9205      	str	r2, [sp, #20]
		if( xSpace > ( xLength + sizeof( BaseType_t ) ) )
 800ceba:	3204      	adds	r2, #4
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800cebc:	440b      	add	r3, r1
 800cebe:	3b01      	subs	r3, #1
 800cec0:	1b9b      	subs	r3, r3, r6
        if( uxCount >= pxBuffer->LENGTH )
 800cec2:	4299      	cmp	r1, r3
            uxCount -= pxBuffer->LENGTH;
 800cec4:	bf98      	it	ls
 800cec6:	1a5b      	subls	r3, r3, r1
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d31c      	bcc.n	800cf06 <lUDPLoggingPrintf+0xca>
	xTaskResumeAll();
 800cecc:	f7fc f98e 	bl	80091ec <xTaskResumeAll>
	if( xLoggingTask == NULL )
 800ced0:	4b2b      	ldr	r3, [pc, #172]	@ (800cf80 <lUDPLoggingPrintf+0x144>)
 800ced2:	6818      	ldr	r0, [r3, #0]
 800ced4:	b320      	cbz	r0, 800cf20 <lUDPLoggingPrintf+0xe4>
		xTaskNotifyGive( xLoggingTask );
 800ced6:	2200      	movs	r2, #0
 800ced8:	2302      	movs	r3, #2
 800ceda:	4611      	mov	r1, r2
 800cedc:	9200      	str	r2, [sp, #0]
 800cede:	f7fc fd3f 	bl	8009960 <xTaskGenericNotify>
	return xLength;
 800cee2:	9805      	ldr	r0, [sp, #20]
}
 800cee4:	b007      	add	sp, #28
 800cee6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ceea:	b004      	add	sp, #16
 800ceec:	4770      	bx	lr
		if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ceee:	f7fc fbd3 	bl	8009698 <xTaskGetSchedulerState>
 800cef2:	2802      	cmp	r0, #2
 800cef4:	d01d      	beq.n	800cf32 <lUDPLoggingPrintf+0xf6>
	return xLoggingInitialised;
 800cef6:	6820      	ldr	r0, [r4, #0]
	if( prvInitialiseLogging() != pdFALSE )
 800cef8:	2800      	cmp	r0, #0
 800cefa:	d1a7      	bne.n	800ce4c <lUDPLoggingPrintf+0x10>
}
 800cefc:	b007      	add	sp, #28
 800cefe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf02:	b004      	add	sp, #16
 800cf04:	4770      	bx	lr
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) &xLength, sizeof( xLength ) );
 800cf06:	aa05      	add	r2, sp, #20
 800cf08:	2304      	movs	r3, #4
 800cf0a:	2100      	movs	r1, #0
 800cf0c:	4620      	mov	r0, r4
 800cf0e:	f7f6 ff3d 	bl	8003d8c <uxStreamBufferAdd>
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) ( xLogEntry.cMessage ), xLength );
 800cf12:	9b05      	ldr	r3, [sp, #20]
 800cf14:	4a17      	ldr	r2, [pc, #92]	@ (800cf74 <lUDPLoggingPrintf+0x138>)
 800cf16:	2100      	movs	r1, #0
 800cf18:	6828      	ldr	r0, [r5, #0]
 800cf1a:	f7f6 ff37 	bl	8003d8c <uxStreamBufferAdd>
 800cf1e:	e7d5      	b.n	800cecc <lUDPLoggingPrintf+0x90>
		vUDPLoggingHook( xLogEntry.cMessage, xLength );
 800cf20:	9905      	ldr	r1, [sp, #20]
 800cf22:	4814      	ldr	r0, [pc, #80]	@ (800cf74 <lUDPLoggingPrintf+0x138>)
 800cf24:	f7ff ff88 	bl	800ce38 <vUDPLoggingHook>
		uxSkipCount++;
 800cf28:	4a16      	ldr	r2, [pc, #88]	@ (800cf84 <lUDPLoggingPrintf+0x148>)
 800cf2a:	6813      	ldr	r3, [r2, #0]
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	6013      	str	r3, [r2, #0]
 800cf30:	e7d7      	b.n	800cee2 <lUDPLoggingPrintf+0xa6>
			pxStreamBuffer = pvPortMalloc( xSize );
 800cf32:	4d0f      	ldr	r5, [pc, #60]	@ (800cf70 <lUDPLoggingPrintf+0x134>)
 800cf34:	f640 70b5 	movw	r0, #4021	@ 0xfb5
 800cf38:	f7fc ffce 	bl	8009ed8 <pvPortMalloc>
 800cf3c:	4607      	mov	r7, r0
 800cf3e:	6028      	str	r0, [r5, #0]
			if( pxStreamBuffer != NULL )
 800cf40:	2800      	cmp	r0, #0
 800cf42:	d0d8      	beq.n	800cef6 <lUDPLoggingPrintf+0xba>
				memset( pxStreamBuffer, '\0', xSize );
 800cf44:	f640 72b5 	movw	r2, #4021	@ 0xfb5
 800cf48:	4631      	mov	r1, r6
 800cf4a:	f000 fa0d 	bl	800d368 <memset>
		va_start (args, pcFormatString);
 800cf4e:	ab0f      	add	r3, sp, #60	@ 0x3c
				pxStreamBuffer->LENGTH = logMESSAGE_BUFFER_SIZE_BYTES + 1;
 800cf50:	f640 72a1 	movw	r2, #4001	@ 0xfa1
 800cf54:	4698      	mov	r8, r3
		va_start (args, pcFormatString);
 800cf56:	9304      	str	r3, [sp, #16]
				xLoggingInitialised = pdTRUE;
 800cf58:	2301      	movs	r3, #1
				pxStreamBuffer->LENGTH = logMESSAGE_BUFFER_SIZE_BYTES + 1;
 800cf5a:	613a      	str	r2, [r7, #16]
				xLoggingInitialised = pdTRUE;
 800cf5c:	6023      	str	r3, [r4, #0]
	configASSERT( pxStreamBuffer );
 800cf5e:	e77d      	b.n	800ce5c <lUDPLoggingPrintf+0x20>
 800cf60:	f240 112f 	movw	r1, #303	@ 0x12f
 800cf64:	4808      	ldr	r0, [pc, #32]	@ (800cf88 <lUDPLoggingPrintf+0x14c>)
 800cf66:	f7f3 ff75 	bl	8000e54 <vAssertCalled>
 800cf6a:	e777      	b.n	800ce5c <lUDPLoggingPrintf+0x20>
 800cf6c:	20001038 	.word	0x20001038
 800cf70:	20001048 	.word	0x20001048
 800cf74:	20001058 	.word	0x20001058
 800cf78:	000f4240 	.word	0x000f4240
 800cf7c:	080106b0 	.word	0x080106b0
 800cf80:	20001044 	.word	0x20001044
 800cf84:	20001040 	.word	0x20001040
 800cf88:	08010688 	.word	0x08010688

0800cf8c <prvLoggingTask>:
#if( ipconfigOLD_MULTI != 0 )
	#define ENDPOINT_IS_IPv4( pxEndPoint )	( 1 )
#endif

static void prvLoggingTask( void *pvParameters )
{
 800cf8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	}
	#endif /* ipconfigMULTI_INTERFACE */

	#if( ipconfigMULTI_INTERFACE == 0 )
	{
		xRemoteAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_REMOTE );
 800cf90:	f246 3309 	movw	r3, #25353	@ 0x6309
{
 800cf94:	b089      	sub	sp, #36	@ 0x24
 800cf96:	f8df 9140 	ldr.w	r9, [pc, #320]	@ 800d0d8 <prvLoggingTask+0x14c>
		xRemoteAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_REMOTE );
 800cf9a:	f8ad 301a 	strh.w	r3, [sp, #26]
		}
		#else
		{
			/* The logging will be broadcasted on the local broadcasting
			address, such as 192.168.0.255 */
			xRemoteAddress.sin_addr = FreeRTOS_GetIPAddress() | ~( FreeRTOS_GetNetmask() );
 800cf9e:	f7f5 fc55 	bl	800284c <FreeRTOS_GetIPAddress>
 800cfa2:	4604      	mov	r4, r0
 800cfa4:	f7f5 fc58 	bl	8002858 <FreeRTOS_GetNetmask>
 800cfa8:	ea64 0400 	orn	r4, r4, r0
 800cfac:	9407      	str	r4, [sp, #28]
	#endif	/* ( ipconfigMULTI_INTERFACE != 0 ) */

	/* Loop until a socket is created. */
	do
	{
		vTaskDelay( xBlockingTime );
 800cfae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800cfb2:	f7fc f9b1 	bl	8009318 <vTaskDelay>
		xUDPLoggingSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 800cfb6:	2102      	movs	r1, #2
 800cfb8:	2211      	movs	r2, #17
 800cfba:	4608      	mov	r0, r1
 800cfbc:	f7f5 fcc8 	bl	8002950 <FreeRTOS_socket>
 800cfc0:	f8c9 0000 	str.w	r0, [r9]
	} while( xUDPLoggingSocket == FREERTOS_INVALID_SOCKET );
 800cfc4:	3001      	adds	r0, #1
 800cfc6:	d0f2      	beq.n	800cfae <prvLoggingTask+0x22>
		pxNetworkInterface = pxEndPoint->pxNetworkInterface;
		//xRemoteAddress.sin_addr = FREERTOS_INADDR_ANY;
	}
	#endif

	xLocalAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_LOCAL );
 800cfc8:	f246 2309 	movw	r3, #25097	@ 0x6209
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );

	for( ;; )
	{
		/* Wait for another message to be placed into the stream buffer. */
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 800cfcc:	2600      	movs	r6, #0
 800cfce:	f8df 810c 	ldr.w	r8, [pc, #268]	@ 800d0dc <prvLoggingTask+0x150>
 800cfd2:	f10d 0a18 	add.w	sl, sp, #24
	xLocalAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_LOCAL );
 800cfd6:	f8ad 3012 	strh.w	r3, [sp, #18]
	xLocalAddress.sin_addr = FreeRTOS_GetIPAddress();
 800cfda:	f7f5 fc37 	bl	800284c <FreeRTOS_GetIPAddress>
 800cfde:	4603      	mov	r3, r0
	FreeRTOS_bind( xUDPLoggingSocket, &xLocalAddress, sizeof( xLocalAddress ) );
 800cfe0:	2208      	movs	r2, #8
 800cfe2:	a904      	add	r1, sp, #16
 800cfe4:	f8d9 0000 	ldr.w	r0, [r9]
	xLocalAddress.sin_addr = FreeRTOS_GetIPAddress();
 800cfe8:	9305      	str	r3, [sp, #20]
	FreeRTOS_bind( xUDPLoggingSocket, &xLocalAddress, sizeof( xLocalAddress ) );
 800cfea:	f7f5 fda9 	bl	8002b40 <FreeRTOS_bind>
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 800cfee:	2004      	movs	r0, #4
	xSendTimeOut = xBlockingTime;
 800cff0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 800cff4:	ab02      	add	r3, sp, #8
 800cff6:	2201      	movs	r2, #1
 800cff8:	9000      	str	r0, [sp, #0]
	xSendTimeOut = xBlockingTime;
 800cffa:	9102      	str	r1, [sp, #8]
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 800cffc:	4631      	mov	r1, r6
 800cffe:	f8d9 0000 	ldr.w	r0, [r9]
 800d002:	4d32      	ldr	r5, [pc, #200]	@ (800d0cc <prvLoggingTask+0x140>)
 800d004:	4f32      	ldr	r7, [pc, #200]	@ (800d0d0 <prvLoggingTask+0x144>)
 800d006:	f7f5 ffcd 	bl	8002fa4 <FreeRTOS_setsockopt>
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 800d00a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d00e:	2101      	movs	r1, #1
 800d010:	2000      	movs	r0, #0
 800d012:	f7fc fc55 	bl	80098c0 <ulTaskGenericNotifyTake>

	#if( ipconfigMULTI_INTERFACE != 0 )
		if( pxNetworkInterface->pfGetPhyLinkStatus( pxNetworkInterface ) != pdFALSE )
	#else
		if( xGetPhyLinkStatus() != pdFALSE )
 800d016:	f7fa f9f9 	bl	800740c <xGetPhyLinkStatus>
 800d01a:	2800      	cmp	r0, #0
 800d01c:	d0f5      	beq.n	800d00a <prvLoggingTask+0x7e>
 800d01e:	2414      	movs	r4, #20
	if( pxStreamBuffer != NULL )
 800d020:	f8d8 2000 	ldr.w	r2, [r8]
size_t xMessageLength = 0;
 800d024:	9603      	str	r6, [sp, #12]
	if( pxStreamBuffer != NULL )
 800d026:	2a00      	cmp	r2, #0
 800d028:	d0ef      	beq.n	800d00a <prvLoggingTask+0x7e>
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800d02a:	6911      	ldr	r1, [r2, #16]
        size_t uxHead = pxBuffer->uxHead;
 800d02c:	6893      	ldr	r3, [r2, #8]
        size_t uxTail = pxBuffer->uxTail;
 800d02e:	6812      	ldr	r2, [r2, #0]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800d030:	440b      	add	r3, r1
 800d032:	1a9b      	subs	r3, r3, r2
        if( uxCount >= pxBuffer->LENGTH )
 800d034:	4299      	cmp	r1, r3
            uxCount -= pxBuffer->LENGTH;
 800d036:	bf98      	it	ls
 800d038:	1a5b      	subls	r3, r3, r1
		if( uxLength > sizeof( size_t ) )
 800d03a:	2b04      	cmp	r3, #4
 800d03c:	d9e5      	bls.n	800d00a <prvLoggingTask+0x7e>
			vTaskSuspendAll();
 800d03e:	f7fb fff7 	bl	8009030 <vTaskSuspendAll>
				uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) &xMessageLength, sizeof( xMessageLength ), pdFALSE );
 800d042:	2304      	movs	r3, #4
 800d044:	aa03      	add	r2, sp, #12
 800d046:	2100      	movs	r1, #0
 800d048:	f8d8 0000 	ldr.w	r0, [r8]
 800d04c:	9600      	str	r6, [sp, #0]
 800d04e:	f7f6 ff09 	bl	8003e64 <uxStreamBufferGet>
				if( xBufferLength < xMessageLength )
 800d052:	9b03      	ldr	r3, [sp, #12]
 800d054:	2bc8      	cmp	r3, #200	@ 0xc8
 800d056:	d92e      	bls.n	800d0b6 <prvLoggingTask+0x12a>
					memcpy( pcBuffer, xLogEntry.cMessage, xBufferLength );
 800d058:	f04f 0bc8 	mov.w	fp, #200	@ 0xc8
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) xLogEntry.cMessage, xMessageLength, pdFALSE );
 800d05c:	4a1d      	ldr	r2, [pc, #116]	@ (800d0d4 <prvLoggingTask+0x148>)
 800d05e:	2100      	movs	r1, #0
 800d060:	f8d8 0000 	ldr.w	r0, [r8]
 800d064:	9600      	str	r6, [sp, #0]
 800d066:	f7f6 fefd 	bl	8003e64 <uxStreamBufferGet>
					memcpy( pcBuffer, xLogEntry.cMessage, xBufferLength );
 800d06a:	491a      	ldr	r1, [pc, #104]	@ (800d0d4 <prvLoggingTask+0x148>)
 800d06c:	4628      	mov	r0, r5
 800d06e:	465a      	mov	r2, fp
 800d070:	f000 f8a6 	bl	800d1c0 <memcpy>
					xMessageLength = xBufferLength;
 800d074:	f8cd b00c 	str.w	fp, [sp, #12]
					pcBuffer[ xBufferLength - 1 ] = 0x00;
 800d078:	f885 60c7 	strb.w	r6, [r5, #199]	@ 0xc7
			xTaskResumeAll();
 800d07c:	f7fc f8b6 	bl	80091ec <xTaskResumeAll>
	return xMessageLength;
 800d080:	f8dd b00c 	ldr.w	fp, [sp, #12]
			/* Check for messages in the buffer. */
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
			{
				xCount = prvGetMessageFromStreamBuffer ( cLoggingLine, sizeof( cLoggingLine ) );

				if( xCount <= 0 )
 800d084:	f1bb 0f00 	cmp.w	fp, #0
 800d088:	d0bf      	beq.n	800d00a <prvLoggingTask+0x7e>
					}
				}
				#else
				{
//#warning Do not send logging as a test
					FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xRemoteAddress, sizeof( xRemoteAddress ) );
 800d08a:	2108      	movs	r1, #8
 800d08c:	2300      	movs	r3, #0
 800d08e:	465a      	mov	r2, fp
 800d090:	f8d9 0000 	ldr.w	r0, [r9]
 800d094:	e9cd a100 	strd	sl, r1, [sp]
 800d098:	4629      	mov	r1, r5
 800d09a:	f7f5 fd93 	bl	8002bc4 <FreeRTOS_sendto>
				}
				#endif
				if( uxSkipCount != ( size_t )0u )
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	b123      	cbz	r3, 800d0ac <prvLoggingTask+0x120>
				{
					uxSkipCount--;
 800d0a2:	3b01      	subs	r3, #1
 800d0a4:	603b      	str	r3, [r7, #0]
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 800d0a6:	3c01      	subs	r4, #1
 800d0a8:	d1ba      	bne.n	800d020 <prvLoggingTask+0x94>
 800d0aa:	e7ae      	b.n	800d00a <prvLoggingTask+0x7e>
				}
				else
				{
					vUDPLoggingHook( cLoggingLine, xCount );
 800d0ac:	4659      	mov	r1, fp
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	f7ff fec2 	bl	800ce38 <vUDPLoggingHook>
 800d0b4:	e7f7      	b.n	800d0a6 <prvLoggingTask+0x11a>
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) pcBuffer, xMessageLength, pdFALSE );
 800d0b6:	462a      	mov	r2, r5
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	f8d8 0000 	ldr.w	r0, [r8]
 800d0be:	9600      	str	r6, [sp, #0]
 800d0c0:	f7f6 fed0 	bl	8003e64 <uxStreamBufferGet>
					pcBuffer[ xMessageLength ] = 0x00;
 800d0c4:	9b03      	ldr	r3, [sp, #12]
 800d0c6:	54ee      	strb	r6, [r5, r3]
 800d0c8:	e7d8      	b.n	800d07c <prvLoggingTask+0xf0>
 800d0ca:	bf00      	nop
 800d0cc:	20000f70 	.word	0x20000f70
 800d0d0:	20001040 	.word	0x20001040
 800d0d4:	20001058 	.word	0x20001058
 800d0d8:	20000038 	.word	0x20000038
 800d0dc:	20001048 	.word	0x20001048

0800d0e0 <TIM2_IRQHandler>:
static uint32_t ulInterruptCount = 0;

uint32_t ulTimer2Flags;
void TIM2_IRQHandler(void)
{
	ulTimer2Flags = htim2.Instance->SR;
 800d0e0:	4b07      	ldr	r3, [pc, #28]	@ (800d100 <TIM2_IRQHandler+0x20>)
 800d0e2:	4908      	ldr	r1, [pc, #32]	@ (800d104 <TIM2_IRQHandler+0x24>)
 800d0e4:	681a      	ldr	r2, [r3, #0]
 800d0e6:	6913      	ldr	r3, [r2, #16]
 800d0e8:	600b      	str	r3, [r1, #0]
	if( ( ulTimer2Flags & TIM_FLAG_UPDATE ) != 0 )
 800d0ea:	07db      	lsls	r3, r3, #31
 800d0ec:	d506      	bpl.n	800d0fc <TIM2_IRQHandler+0x1c>
	{
		__HAL_TIM_CLEAR_FLAG( &htim2, TIM_FLAG_UPDATE );
		ulInterruptCount++;
 800d0ee:	4906      	ldr	r1, [pc, #24]	@ (800d108 <TIM2_IRQHandler+0x28>)
		__HAL_TIM_CLEAR_FLAG( &htim2, TIM_FLAG_UPDATE );
 800d0f0:	f06f 0001 	mvn.w	r0, #1
		ulInterruptCount++;
 800d0f4:	680b      	ldr	r3, [r1, #0]
		__HAL_TIM_CLEAR_FLAG( &htim2, TIM_FLAG_UPDATE );
 800d0f6:	6110      	str	r0, [r2, #16]
		ulInterruptCount++;
 800d0f8:	3301      	adds	r3, #1
 800d0fa:	600b      	str	r3, [r1, #0]
	}
}
 800d0fc:	4770      	bx	lr
 800d0fe:	bf00      	nop
 800d100:	20001128 	.word	0x20001128
 800d104:	20001120 	.word	0x20001120
 800d108:	20001124 	.word	0x20001124

0800d10c <vStartHighResolutionTimer>:

/* Timer2 initialization function */
void vStartHighResolutionTimer( void )
{
	/* TIM2 clock enable */
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d10c:	4b19      	ldr	r3, [pc, #100]	@ (800d174 <vStartHighResolutionTimer+0x68>)

	htim2.Instance = TIM2;     /* Register base address             */
 800d10e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d112:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
{
 800d116:	b530      	push	{r4, r5, lr}
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d118:	f042 0201 	orr.w	r2, r2, #1
	htim2.Instance = TIM2;     /* Register base address             */
 800d11c:	4c16      	ldr	r4, [pc, #88]	@ (800d178 <vStartHighResolutionTimer+0x6c>)

	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 800d11e:	2500      	movs	r5, #0
{
 800d120:	b083      	sub	sp, #12
	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 800d122:	60a5      	str	r5, [r4, #8]
 800d124:	6125      	str	r5, [r4, #16]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;			/* Specifies the counter mode. */
	htim2.Init.Period = ( ulReloadCount - 1ul );			/* Specifies the period value to be loaded into the active. */
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;	/* Specifies the clock division. */
	htim2.Init.RepetitionCounter = 0ul;					/* Specifies the repetition counter value. */
 800d126:	6165      	str	r5, [r4, #20]
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d128:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800d12c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 800d130:	4a12      	ldr	r2, [pc, #72]	@ (800d17c <vStartHighResolutionTimer+0x70>)
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d132:	f003 0301 	and.w	r3, r3, #1
	htim2.Instance = TIM2;     /* Register base address             */
 800d136:	6021      	str	r1, [r4, #0]
	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 800d138:	21c7      	movs	r1, #199	@ 0xc7
 800d13a:	60e2      	str	r2, [r4, #12]
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d13c:	9301      	str	r3, [sp, #4]
	htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d13e:	2301      	movs	r3, #1

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority( TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0 );
 800d140:	462a      	mov	r2, r5
	__HAL_RCC_TIM2_CLK_ENABLE();
 800d142:	9801      	ldr	r0, [sp, #4]
	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 800d144:	6061      	str	r1, [r4, #4]
	HAL_NVIC_SetPriority( TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0 );
 800d146:	201c      	movs	r0, #28
 800d148:	2105      	movs	r1, #5
	htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d14a:	7723      	strb	r3, [r4, #28]
	HAL_NVIC_SetPriority( TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0 );
 800d14c:	f7fd f88e 	bl	800a26c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ( TIM2_IRQn );
 800d150:	201c      	movs	r0, #28
 800d152:	f7fd f8c7 	bl	800a2e4 <HAL_NVIC_EnableIRQ>


	HAL_TIM_Base_Init( &htim2 );
 800d156:	4620      	mov	r0, r4
 800d158:	f7ff f9fe 	bl	800c558 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT( &htim2 );
 800d15c:	4620      	mov	r0, r4
 800d15e:	f7ff f935 	bl	800c3cc <HAL_TIM_Base_Start_IT>
	ulTimer2Flags = htim2.Instance->SR;
 800d162:	6822      	ldr	r2, [r4, #0]
 800d164:	4b06      	ldr	r3, [pc, #24]	@ (800d180 <vStartHighResolutionTimer+0x74>)
	/* Ignore the initial interrupt which sets ulInterruptCount = 1.*/
	ulInterruptCount = 0ul;
 800d166:	4907      	ldr	r1, [pc, #28]	@ (800d184 <vStartHighResolutionTimer+0x78>)
	ulTimer2Flags = htim2.Instance->SR;
 800d168:	6912      	ldr	r2, [r2, #16]
	ulInterruptCount = 0ul;
 800d16a:	600d      	str	r5, [r1, #0]
	ulTimer2Flags = htim2.Instance->SR;
 800d16c:	601a      	str	r2, [r3, #0]
}
 800d16e:	b003      	add	sp, #12
 800d170:	bd30      	pop	{r4, r5, pc}
 800d172:	bf00      	nop
 800d174:	58024400 	.word	0x58024400
 800d178:	20001128 	.word	0x20001128
 800d17c:	0098967f 	.word	0x0098967f
 800d180:	20001120 	.word	0x20001120
 800d184:	20001124 	.word	0x20001124

0800d188 <ullGetHighResolutionTime>:

uint64_t ullGetHighResolutionTime()
{
uint64_t ullReturn;
	if( htim2.Instance == NULL )
 800d188:	4b0a      	ldr	r3, [pc, #40]	@ (800d1b4 <ullGetHighResolutionTime+0x2c>)
 800d18a:	681b      	ldr	r3, [r3, #0]
{
 800d18c:	b510      	push	{r4, lr}
	if( htim2.Instance == NULL )
 800d18e:	b153      	cbz	r3, 800d1a6 <ullGetHighResolutionTime+0x1e>
	uint32_t ulSlowCount;

		for( ;; )
		{
			ulCounts[ 0 ] = htim2.Instance->CNT;
			ulSlowCount = ulInterruptCount;
 800d190:	4a09      	ldr	r2, [pc, #36]	@ (800d1b8 <ullGetHighResolutionTime+0x30>)
 800d192:	6814      	ldr	r4, [r2, #0]
			ulCounts[ 0 ] = htim2.Instance->CNT;
 800d194:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
			ulCounts[ 1 ] = htim2.Instance->CNT;
 800d196:	6a58      	ldr	r0, [r3, #36]	@ 0x24
			if( ulCounts[ 1 ] >= ulCounts[ 0 ] )
 800d198:	4282      	cmp	r2, r0
 800d19a:	d8fb      	bhi.n	800d194 <ullGetHighResolutionTime+0xc>
			{
				/* TIM2_IRQHandler() has not occurred in between. */
				break;
			}
		}
		ullReturn = ( uint64_t )ulSlowCount * ulReloadCount + ulCounts[ 1 ];
 800d19c:	4b07      	ldr	r3, [pc, #28]	@ (800d1bc <ullGetHighResolutionTime+0x34>)
 800d19e:	2100      	movs	r1, #0
 800d1a0:	fbe4 0103 	umlal	r0, r1, r4, r3
	}

	return ullReturn;
}
 800d1a4:	bd10      	pop	{r4, pc}
		ullReturn = 1000ull * xTaskGetTickCount();
 800d1a6:	f7fb ff4b 	bl	8009040 <xTaskGetTickCount>
 800d1aa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800d1ae:	fba0 0101 	umull	r0, r1, r0, r1
}
 800d1b2:	bd10      	pop	{r4, pc}
 800d1b4:	20001128 	.word	0x20001128
 800d1b8:	20001124 	.word	0x20001124
 800d1bc:	00989680 	.word	0x00989680

0800d1c0 <memcpy>:
	uint32_t uint32;
};

#if( SIMPLE_MEMCPY == 0 )
void *memcpy( void *pvDest, const void *pvSource, size_t ulBytes )
{
 800d1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	pxDestination.u8 = ( uint8_t * ) pvDest;
	pxSource.u8 = ( uint8_t * ) pvSource;
	pxLastSource.u8 = pxSource.u8 + ulBytes;

	ulAlignBits = ( pxDestination.uint32 & 0x03 ) ^ ( pxSource.uint32 & 0x03 );
 800d1c4:	ea81 0500 	eor.w	r5, r1, r0
	pxLastSource.u8 = pxSource.u8 + ulBytes;
 800d1c8:	188c      	adds	r4, r1, r2
	pxDestination.u8 = ( uint8_t * ) pvDest;
 800d1ca:	4603      	mov	r3, r0
	pxSource.u8 = ( uint8_t * ) pvSource;
 800d1cc:	468c      	mov	ip, r1

	if( ( ulAlignBits & 0x01 ) == 0 )
 800d1ce:	07ee      	lsls	r6, r5, #31
	pxLastSource.u8 = pxSource.u8 + ulBytes;
 800d1d0:	46a6      	mov	lr, r4
	if( ( ulAlignBits & 0x01 ) == 0 )
 800d1d2:	d42c      	bmi.n	800d22e <memcpy+0x6e>
	{
		if( ( ( pxSource.uint32 & 1 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 ) )
 800d1d4:	428c      	cmp	r4, r1
 800d1d6:	d902      	bls.n	800d1de <memcpy+0x1e>
 800d1d8:	07cf      	lsls	r7, r1, #31
 800d1da:	f100 80ae 	bmi.w	800d33a <memcpy+0x17a>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++) ;
		}
		/* 16-bit aligned here */
		if( ( ulAlignBits & 0x02 ) != 0 )
 800d1de:	07ae      	lsls	r6, r5, #30
 800d1e0:	d559      	bpl.n	800d296 <memcpy+0xd6>
		{
			uint32_t extra = pxLastSource.uint32 & 0x01ul;

			pxLastSource.uint32 &= ~0x01ul;
 800d1e2:	f02e 0701 	bic.w	r7, lr, #1

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 800d1e6:	428f      	cmp	r7, r1
 800d1e8:	f240 80b6 	bls.w	800d358 <memcpy+0x198>
 800d1ec:	b1ea      	cbz	r2, 800d22a <memcpy+0x6a>
 800d1ee:	4413      	add	r3, r2
 800d1f0:	e000      	b.n	800d1f4 <memcpy+0x34>
 800d1f2:	b1d2      	cbz	r2, 800d22a <memcpy+0x6a>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 800d1f4:	f831 6b02 	ldrh.w	r6, [r1], #2
 800d1f8:	1a9d      	subs	r5, r3, r2
					ulBytes -= 2;
 800d1fa:	3a02      	subs	r2, #2
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 800d1fc:	42b9      	cmp	r1, r7
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 800d1fe:	802e      	strh	r6, [r5, #0]
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 800d200:	d3f7      	bcc.n	800d1f2 <memcpy+0x32>
			iCount -= 8;
		}
	}
	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 800d202:	2a00      	cmp	r2, #0
 800d204:	bf18      	it	ne
 800d206:	4571      	cmpne	r1, lr
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 800d208:	f105 0302 	add.w	r3, r5, #2
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 800d20c:	bf34      	ite	cc
 800d20e:	2501      	movcc	r5, #1
 800d210:	2500      	movcs	r5, #0
 800d212:	b155      	cbz	r5, 800d22a <memcpy+0x6a>
 800d214:	eb01 0e02 	add.w	lr, r1, r2
 800d218:	1a5b      	subs	r3, r3, r1
 800d21a:	e001      	b.n	800d220 <memcpy+0x60>
 800d21c:	428c      	cmp	r4, r1
 800d21e:	d904      	bls.n	800d22a <memcpy+0x6a>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
 800d220:	780a      	ldrb	r2, [r1, #0]
 800d222:	54ca      	strb	r2, [r1, r3]
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 800d224:	3101      	adds	r1, #1
 800d226:	4571      	cmp	r1, lr
 800d228:	d1f8      	bne.n	800d21c <memcpy+0x5c>
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
		}
	}
	#endif
	return pvDest;
}
 800d22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		while( iCount > 8 )
 800d22e:	2a08      	cmp	r2, #8
 800d230:	f340 808b 	ble.w	800d34a <memcpy+0x18a>
 800d234:	f1a2 0109 	sub.w	r1, r2, #9
 800d238:	f021 0107 	bic.w	r1, r1, #7
 800d23c:	4461      	add	r1, ip
			pxDestination.u8[ 0 ] = pxSource.u8[ 0 ];
 800d23e:	f89c 6000 	ldrb.w	r6, [ip]
 800d242:	4665      	mov	r5, ip
		while( iCount > 8 )
 800d244:	f10c 0c08 	add.w	ip, ip, #8
 800d248:	3308      	adds	r3, #8
			pxDestination.u8[ 0 ] = pxSource.u8[ 0 ];
 800d24a:	f803 6c08 	strb.w	r6, [r3, #-8]
		while( iCount > 8 )
 800d24e:	428d      	cmp	r5, r1
			pxDestination.u8[ 1 ] = pxSource.u8[ 1 ];
 800d250:	f81c 6c07 	ldrb.w	r6, [ip, #-7]
 800d254:	f803 6c07 	strb.w	r6, [r3, #-7]
			pxDestination.u8[ 2 ] = pxSource.u8[ 2 ];
 800d258:	f81c 6c06 	ldrb.w	r6, [ip, #-6]
 800d25c:	f803 6c06 	strb.w	r6, [r3, #-6]
			pxDestination.u8[ 3 ] = pxSource.u8[ 3 ];
 800d260:	f81c 6c05 	ldrb.w	r6, [ip, #-5]
 800d264:	f803 6c05 	strb.w	r6, [r3, #-5]
			pxDestination.u8[ 4 ] = pxSource.u8[ 4 ];
 800d268:	f81c 6c04 	ldrb.w	r6, [ip, #-4]
 800d26c:	f803 6c04 	strb.w	r6, [r3, #-4]
			pxDestination.u8[ 5 ] = pxSource.u8[ 5 ];
 800d270:	f81c 6c03 	ldrb.w	r6, [ip, #-3]
 800d274:	f803 6c03 	strb.w	r6, [r3, #-3]
			pxDestination.u8[ 6 ] = pxSource.u8[ 6 ];
 800d278:	f81c 6c02 	ldrb.w	r6, [ip, #-2]
 800d27c:	f803 6c02 	strb.w	r6, [r3, #-2]
			pxDestination.u8[ 7 ] = pxSource.u8[ 7 ];
 800d280:	f81c 6c01 	ldrb.w	r6, [ip, #-1]
 800d284:	f803 6c01 	strb.w	r6, [r3, #-1]
		while( iCount > 8 )
 800d288:	d1d9      	bne.n	800d23e <memcpy+0x7e>
			pxSource.u8 += 8;
 800d28a:	3108      	adds	r1, #8
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 800d28c:	4571      	cmp	r1, lr
 800d28e:	bf2c      	ite	cs
 800d290:	2500      	movcs	r5, #0
 800d292:	2501      	movcc	r5, #1
 800d294:	e7bd      	b.n	800d212 <memcpy+0x52>
			if( ( ( pxSource.uint32 & 2 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 - 1 ) )
 800d296:	f01c 0f02 	tst.w	ip, #2
 800d29a:	d142      	bne.n	800d322 <memcpy+0x162>
			pxLastSource.uint32 &= ~0x03ul;
 800d29c:	f02e 0703 	bic.w	r7, lr, #3
			iCount = pxLastSource.u32 - pxSource.u32;
 800d2a0:	1a7e      	subs	r6, r7, r1
			while( iCount > 8 )
 800d2a2:	2e20      	cmp	r6, #32
			iCount = pxLastSource.u32 - pxSource.u32;
 800d2a4:	ea4f 05a6 	mov.w	r5, r6, asr #2
			while( iCount > 8 )
 800d2a8:	dd23      	ble.n	800d2f2 <memcpy+0x132>
 800d2aa:	eba3 060c 	sub.w	r6, r3, ip
				pxDestination.u32[ 0 ] = pxSource.u32[ 0 ];
 800d2ae:	f8dc 1000 	ldr.w	r1, [ip]
 800d2b2:	eb06 030c 	add.w	r3, r6, ip
				iCount -= 8;
 800d2b6:	3d08      	subs	r5, #8
				pxDestination.u32[ 0 ] = pxSource.u32[ 0 ];
 800d2b8:	f846 100c 	str.w	r1, [r6, ip]
			while( iCount > 8 )
 800d2bc:	f10c 0c20 	add.w	ip, ip, #32
				pxDestination.u32[ 1 ] = pxSource.u32[ 1 ];
 800d2c0:	f85c 1c1c 	ldr.w	r1, [ip, #-28]
			while( iCount > 8 )
 800d2c4:	2d08      	cmp	r5, #8
				pxDestination.u32[ 1 ] = pxSource.u32[ 1 ];
 800d2c6:	6059      	str	r1, [r3, #4]
				pxDestination.u32[ 2 ] = pxSource.u32[ 2 ];
 800d2c8:	f85c 1c18 	ldr.w	r1, [ip, #-24]
 800d2cc:	6099      	str	r1, [r3, #8]
				pxDestination.u32[ 3 ] = pxSource.u32[ 3 ];
 800d2ce:	f85c 1c14 	ldr.w	r1, [ip, #-20]
 800d2d2:	60d9      	str	r1, [r3, #12]
				pxDestination.u32[ 4 ] = pxSource.u32[ 4 ];
 800d2d4:	f85c 1c10 	ldr.w	r1, [ip, #-16]
 800d2d8:	6119      	str	r1, [r3, #16]
				pxDestination.u32[ 5 ] = pxSource.u32[ 5 ];
 800d2da:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
 800d2de:	6159      	str	r1, [r3, #20]
				pxDestination.u32[ 6 ] = pxSource.u32[ 6 ];
 800d2e0:	f85c 1c08 	ldr.w	r1, [ip, #-8]
 800d2e4:	6199      	str	r1, [r3, #24]
				pxDestination.u32[ 7 ] = pxSource.u32[ 7 ];
 800d2e6:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 800d2ea:	61d9      	str	r1, [r3, #28]
			while( iCount > 8 )
 800d2ec:	dcdf      	bgt.n	800d2ae <memcpy+0xee>
				pxDestination.u32 += 8;
 800d2ee:	3320      	adds	r3, #32
				pxSource.u32 += 8;
 800d2f0:	4661      	mov	r1, ip
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 800d2f2:	428f      	cmp	r7, r1
 800d2f4:	d930      	bls.n	800d358 <memcpy+0x198>
 800d2f6:	2a00      	cmp	r2, #0
 800d2f8:	d097      	beq.n	800d22a <memcpy+0x6a>
 800d2fa:	4413      	add	r3, r2
 800d2fc:	e001      	b.n	800d302 <memcpy+0x142>
 800d2fe:	2a00      	cmp	r2, #0
 800d300:	d093      	beq.n	800d22a <memcpy+0x6a>
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
 800d302:	f851 6b04 	ldr.w	r6, [r1], #4
 800d306:	1a9d      	subs	r5, r3, r2
					ulBytes -= 4;
 800d308:	3a04      	subs	r2, #4
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 800d30a:	428f      	cmp	r7, r1
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
 800d30c:	602e      	str	r6, [r5, #0]
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 800d30e:	d8f6      	bhi.n	800d2fe <memcpy+0x13e>
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 800d310:	2a00      	cmp	r2, #0
 800d312:	bf18      	it	ne
 800d314:	4571      	cmpne	r1, lr
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
 800d316:	f105 0304 	add.w	r3, r5, #4
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 800d31a:	bf34      	ite	cc
 800d31c:	2501      	movcc	r5, #1
 800d31e:	2500      	movcs	r5, #0
 800d320:	e777      	b.n	800d212 <memcpy+0x52>
			if( ( ( pxSource.uint32 & 2 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 - 1 ) )
 800d322:	f10e 35ff 	add.w	r5, lr, #4294967295
 800d326:	42a9      	cmp	r1, r5
 800d328:	d2b8      	bcs.n	800d29c <memcpy+0xdc>
				*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 800d32a:	468c      	mov	ip, r1
 800d32c:	3302      	adds	r3, #2
 800d32e:	f83c 5b02 	ldrh.w	r5, [ip], #2
 800d332:	f823 5c02 	strh.w	r5, [r3, #-2]
 800d336:	4661      	mov	r1, ip
 800d338:	e7b0      	b.n	800d29c <memcpy+0xdc>
			*( pxDestination.u8++ ) = *( pxSource.u8++) ;
 800d33a:	f81c 1b01 	ldrb.w	r1, [ip], #1
		if( ( ulAlignBits & 0x02 ) != 0 )
 800d33e:	07ae      	lsls	r6, r5, #30
			*( pxDestination.u8++ ) = *( pxSource.u8++) ;
 800d340:	f803 1b01 	strb.w	r1, [r3], #1
 800d344:	4661      	mov	r1, ip
		if( ( ulAlignBits & 0x02 ) != 0 )
 800d346:	d5a6      	bpl.n	800d296 <memcpy+0xd6>
 800d348:	e74b      	b.n	800d1e2 <memcpy+0x22>
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 800d34a:	2a00      	cmp	r2, #0
 800d34c:	bf18      	it	ne
 800d34e:	428c      	cmpne	r4, r1
 800d350:	bf8c      	ite	hi
 800d352:	2501      	movhi	r5, #1
 800d354:	2500      	movls	r5, #0
 800d356:	e75c      	b.n	800d212 <memcpy+0x52>
 800d358:	2a00      	cmp	r2, #0
 800d35a:	bf18      	it	ne
 800d35c:	4571      	cmpne	r1, lr
 800d35e:	bf34      	ite	cc
 800d360:	2501      	movcc	r5, #1
 800d362:	2500      	movcs	r5, #0
 800d364:	e755      	b.n	800d212 <memcpy+0x52>
 800d366:	bf00      	nop

0800d368 <memset>:
uint32_t ulPattern;

	pxDestination.u8 = ( uint8_t * ) pvDest;
	pxLast.u8 = pxDestination.u8 + ulBytes;

	if( ulBytes >= 8 )
 800d368:	2a07      	cmp	r2, #7
{
 800d36a:	b5f0      	push	{r4, r5, r6, r7, lr}
	pxLast.u8 = pxDestination.u8 + ulBytes;
 800d36c:	eb00 0602 	add.w	r6, r0, r2
	if( ulBytes >= 8 )
 800d370:	d93b      	bls.n	800d3ea <memset+0x82>
	{
	uint32_t ulAlignBits;
	uint32_t ulExtra;
	int iCount;

		ulPattern = iValue & 0xff;
 800d372:	b2cb      	uxtb	r3, r1
		ulPattern |= ( ulPattern << 8 ) | ( ulPattern << 16 ) | ( ulPattern << 24 );
		ulAlignBits = ( pxDestination.uint32 & 0x03 );
		if( ulAlignBits != 0 )
 800d374:	f010 0703 	ands.w	r7, r0, #3
	pxDestination.u8 = ( uint8_t * ) pvDest;
 800d378:	4684      	mov	ip, r0
		ulPattern |= ( ulPattern << 8 ) | ( ulPattern << 16 ) | ( ulPattern << 24 );
 800d37a:	eb03 2403 	add.w	r4, r3, r3, lsl #8
 800d37e:	eb04 4404 	add.w	r4, r4, r4, lsl #16
		if( ulAlignBits != 0 )
 800d382:	d13a      	bne.n	800d3fa <memset+0x92>
 800d384:	4603      	mov	r3, r0
		}
		/* Strip-off the last 1 up-to 3 bytes because they can not be set in a 32-bit
		memory instruction. */
		ulExtra = pxLast.uint32 & 0x03ul;

		pxLast.uint32 &= ~0x03ul;
 800d386:	f026 0503 	bic.w	r5, r6, #3
		iCount = ( int ) ( pxLast.u32 - pxDestination.u32 );
 800d38a:	1aef      	subs	r7, r5, r3
		while( iCount > 8 )
 800d38c:	2f20      	cmp	r7, #32
		iCount = ( int ) ( pxLast.u32 - pxDestination.u32 );
 800d38e:	ea4f 0ea7 	mov.w	lr, r7, asr #2
		while( iCount > 8 )
 800d392:	dd0f      	ble.n	800d3b4 <memset+0x4c>
			pxDestination.u32[ 4 ] = ulPattern;
			pxDestination.u32[ 5 ] = ulPattern;
			pxDestination.u32[ 6 ] = ulPattern;
			pxDestination.u32[ 7 ] = ulPattern;
			pxDestination.u32 += 8;
			iCount -= 8;
 800d394:	f1ae 0e08 	sub.w	lr, lr, #8
		while( iCount > 8 )
 800d398:	f1be 0f08 	cmp.w	lr, #8
			pxDestination.u32[ 0 ] = ulPattern;
 800d39c:	e9cc 4400 	strd	r4, r4, [ip]
 800d3a0:	e9cc 4402 	strd	r4, r4, [ip, #8]
 800d3a4:	e9cc 4404 	strd	r4, r4, [ip, #16]
 800d3a8:	e9cc 4406 	strd	r4, r4, [ip, #24]
		while( iCount > 8 )
 800d3ac:	f10c 0c20 	add.w	ip, ip, #32
 800d3b0:	dcf0      	bgt.n	800d394 <memset+0x2c>
			pxDestination.u32 += 8;
 800d3b2:	4663      	mov	r3, ip
		}

		#if( MEMCPY_USES_LOOP_COUNTER != 0 )
		{
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 800d3b4:	429d      	cmp	r5, r3
 800d3b6:	d801      	bhi.n	800d3bc <memset+0x54>
 800d3b8:	e027      	b.n	800d40a <memset+0xa2>
 800d3ba:	b1aa      	cbz	r2, 800d3e8 <memset+0x80>
			{
				pxDestination.u32[0] = ulPattern;
 800d3bc:	f843 4b04 	str.w	r4, [r3], #4
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 800d3c0:	429d      	cmp	r5, r3
				pxDestination.u32++;
				ulBytes += 4;
 800d3c2:	f102 0204 	add.w	r2, r2, #4
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 800d3c6:	d8f8      	bhi.n	800d3ba <memset+0x52>
		pxLast.uint32 |= ulExtra;
	}

	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 800d3c8:	2a00      	cmp	r2, #0
 800d3ca:	bf18      	it	ne
 800d3cc:	429e      	cmpne	r6, r3
 800d3ce:	bf8c      	ite	hi
 800d3d0:	2401      	movhi	r4, #1
 800d3d2:	2400      	movls	r4, #0
 800d3d4:	b144      	cbz	r4, 800d3e8 <memset+0x80>
				pxDestination.u8[ 0 ] = ( uint8_t )iValue;
 800d3d6:	b2c9      	uxtb	r1, r1
 800d3d8:	1ad2      	subs	r2, r2, r3
 800d3da:	e001      	b.n	800d3e0 <memset+0x78>
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 800d3dc:	429e      	cmp	r6, r3
 800d3de:	d903      	bls.n	800d3e8 <memset+0x80>
		{
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
 800d3e0:	f803 1b01 	strb.w	r1, [r3], #1
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 800d3e4:	42d3      	cmn	r3, r2
 800d3e6:	d1f9      	bne.n	800d3dc <memset+0x74>
			pxDestination.u8++;
		}
	}
	#endif
	return pvDest;
}
 800d3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 800d3ea:	2a00      	cmp	r2, #0
 800d3ec:	bf18      	it	ne
 800d3ee:	4286      	cmpne	r6, r0
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	bf8c      	ite	hi
 800d3f4:	2401      	movhi	r4, #1
 800d3f6:	2400      	movls	r4, #0
 800d3f8:	e7ec      	b.n	800d3d4 <memset+0x6c>
			while( ulAlignBits-- > 0 )
 800d3fa:	1d05      	adds	r5, r0, #4
 800d3fc:	1bed      	subs	r5, r5, r7
				pxDestination.u8[ 0 ] = ( uint8_t )iValue;
 800d3fe:	f80c 3b01 	strb.w	r3, [ip], #1
			while( ulAlignBits-- > 0 )
 800d402:	4565      	cmp	r5, ip
 800d404:	d1fb      	bne.n	800d3fe <memset+0x96>
				pxDestination.u8++;
 800d406:	4663      	mov	r3, ip
 800d408:	e7bd      	b.n	800d386 <memset+0x1e>
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 800d40a:	429e      	cmp	r6, r3
 800d40c:	bf94      	ite	ls
 800d40e:	2400      	movls	r4, #0
 800d410:	2401      	movhi	r4, #1
 800d412:	e7df      	b.n	800d3d4 <memset+0x6c>

0800d414 <xApplicationMemoryPermissions>:
__attribute__((weak)) BaseType_t xApplicationMemoryPermissions( uint32_t aAddress )
{
	( void ) aAddress;
	/* Return 1 for readable, 2 for writeable, 3 for both. */
	return 0x03;
}
 800d414:	2003      	movs	r0, #3
 800d416:	4770      	bx	lr

0800d418 <vOutputChar>:
__attribute__((weak)) void vOutputChar( const char cChar, const TickType_t xTicksToWait  )
{
	( void ) cChar;
	( void ) xTicksToWait;
	/* Do nothing. */
}
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop

0800d41c <strbuf_printchar>:
	memset( &apStr->flags, '\0', sizeof apStr->flags );
}
/*-----------------------------------------------------------*/

static BaseType_t strbuf_printchar( struct SStringBuf *apStr, int c )
{
 800d41c:	b510      	push	{r4, lr}
 800d41e:	4604      	mov	r4, r0
 800d420:	4608      	mov	r0, r1
	if( apStr->str == NULL )
 800d422:	6823      	ldr	r3, [r4, #0]
 800d424:	b19b      	cbz	r3, 800d44e <strbuf_printchar+0x32>
	{
		vOutputChar( ( char ) c, xTicksToWait );
		apStr->curLen++;
		return pdTRUE;
	}
	if( apStr->str < apStr->nulPos )
 800d426:	68a2      	ldr	r2, [r4, #8]
 800d428:	4293      	cmp	r3, r2
 800d42a:	d302      	bcc.n	800d432 <strbuf_printchar+0x16>
	{
		*( apStr->str++ ) = c;
		apStr->curLen++;
		return pdTRUE;
	}
	if( apStr->str == apStr->nulPos )
 800d42c:	d009      	beq.n	800d442 <strbuf_printchar+0x26>
	{
		*( apStr->str++ ) = '\0';
	}
	return pdFALSE;
 800d42e:	2000      	movs	r0, #0
}
 800d430:	bd10      	pop	{r4, pc}
		*( apStr->str++ ) = c;
 800d432:	1c5a      	adds	r2, r3, #1
 800d434:	6022      	str	r2, [r4, #0]
 800d436:	7019      	strb	r1, [r3, #0]
		apStr->curLen++;
 800d438:	68e3      	ldr	r3, [r4, #12]
 800d43a:	3301      	adds	r3, #1
		return pdTRUE;
 800d43c:	2001      	movs	r0, #1
		apStr->curLen++;
 800d43e:	60e3      	str	r3, [r4, #12]
}
 800d440:	bd10      	pop	{r4, pc}
		*( apStr->str++ ) = '\0';
 800d442:	1c59      	adds	r1, r3, #1
 800d444:	2200      	movs	r2, #0
	return pdFALSE;
 800d446:	2000      	movs	r0, #0
		*( apStr->str++ ) = '\0';
 800d448:	6021      	str	r1, [r4, #0]
 800d44a:	701a      	strb	r2, [r3, #0]
 800d44c:	e7f0      	b.n	800d430 <strbuf_printchar+0x14>
		vOutputChar( ( char ) c, xTicksToWait );
 800d44e:	2114      	movs	r1, #20
 800d450:	b2c0      	uxtb	r0, r0
 800d452:	f7ff ffe1 	bl	800d418 <vOutputChar>
		apStr->curLen++;
 800d456:	68e3      	ldr	r3, [r4, #12]
 800d458:	3301      	adds	r3, #1
		return pdTRUE;
 800d45a:	e7ef      	b.n	800d43c <strbuf_printchar+0x20>

0800d45c <prints>:
	return iResult;
}
/*-----------------------------------------------------------*/

static BaseType_t prints(struct SStringBuf *apBuf, const char *apString )
{
 800d45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d460:	4604      	mov	r4, r0
	register int padchar = ' ';
	int i,len;

	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 800d462:	4608      	mov	r0, r1
{
 800d464:	460e      	mov	r6, r1
	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 800d466:	f7ff ffd5 	bl	800d414 <xApplicationMemoryPermissions>
		/* The user has probably made a mistake with the parameter
		for '%s', the memory is not readbale. */
		apString = "INV_MEM";
	}

	if( apBuf->flags.width > 0 )
 800d46a:	6967      	ldr	r7, [r4, #20]
		else
		{
			apBuf->flags.width -= count;
		}

		if( apBuf->flags.pad & PAD_ZERO )
 800d46c:	f894 801c 	ldrb.w	r8, [r4, #28]
	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 800d470:	b320      	cbz	r0, 800d4bc <prints+0x60>
	if( apBuf->flags.width > 0 )
 800d472:	2f00      	cmp	r7, #0
 800d474:	dd25      	ble.n	800d4c2 <prints+0x66>
		for( ptr = apString; *ptr; ++ptr )
 800d476:	7833      	ldrb	r3, [r6, #0]
 800d478:	b13b      	cbz	r3, 800d48a <prints+0x2e>
 800d47a:	1c70      	adds	r0, r6, #1
 800d47c:	f7f2 ff3a 	bl	80002f4 <strlen>
 800d480:	3001      	adds	r0, #1
		if( count >= apBuf->flags.width )
 800d482:	4287      	cmp	r7, r0
			apBuf->flags.width -= count;
 800d484:	bfcc      	ite	gt
 800d486:	1a3f      	subgt	r7, r7, r0
			apBuf->flags.width = 0;
 800d488:	2700      	movle	r7, #0
		{
			padchar = '0';
 800d48a:	f018 0f02 	tst.w	r8, #2
 800d48e:	6167      	str	r7, [r4, #20]
 800d490:	bf0c      	ite	eq
 800d492:	2520      	moveq	r5, #32
 800d494:	2530      	movne	r5, #48	@ 0x30
		}
	}
	if( ( apBuf->flags.pad & PAD_RIGHT ) == 0 )
 800d496:	f018 0f01 	tst.w	r8, #1
 800d49a:	d113      	bne.n	800d4c4 <prints+0x68>
	{
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 800d49c:	b92f      	cbnz	r7, 800d4aa <prints+0x4e>
 800d49e:	e011      	b.n	800d4c4 <prints+0x68>
 800d4a0:	6963      	ldr	r3, [r4, #20]
 800d4a2:	3b01      	subs	r3, #1
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	6163      	str	r3, [r4, #20]
 800d4a8:	dd0c      	ble.n	800d4c4 <prints+0x68>
		{
			if( strbuf_printchar( apBuf, padchar ) == 0 )
 800d4aa:	4629      	mov	r1, r5
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	f7ff ffb5 	bl	800d41c <strbuf_printchar>
 800d4b2:	2800      	cmp	r0, #0
 800d4b4:	d1f4      	bne.n	800d4a0 <prints+0x44>
			{
				return pdFALSE;
 800d4b6:	2000      	movs	r0, #0
			return pdFALSE;
		}
	}

	return pdTRUE;
}
 800d4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if( apBuf->flags.width > 0 )
 800d4bc:	2f00      	cmp	r7, #0
		apString = "INV_MEM";
 800d4be:	4e1f      	ldr	r6, [pc, #124]	@ (800d53c <prints+0xe0>)
	if( apBuf->flags.width > 0 )
 800d4c0:	dcdb      	bgt.n	800d47a <prints+0x1e>
	register int padchar = ' ';
 800d4c2:	2520      	movs	r5, #32
	if( ( apBuf->flags.isNumber == pdTRUE ) && ( apBuf->flags.pad == pdTRUE ) )
 800d4c4:	69e2      	ldr	r2, [r4, #28]
 800d4c6:	4b1e      	ldr	r3, [pc, #120]	@ (800d540 <prints+0xe4>)
		if( len < apBuf->flags.printLimit )
 800d4c8:	69a7      	ldr	r7, [r4, #24]
	if( ( apBuf->flags.isNumber == pdTRUE ) && ( apBuf->flags.pad == pdTRUE ) )
 800d4ca:	4013      	ands	r3, r2
 800d4cc:	4a1d      	ldr	r2, [pc, #116]	@ (800d544 <prints+0xe8>)
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	d01f      	beq.n	800d512 <prints+0xb6>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 800d4d2:	b177      	cbz	r7, 800d4f2 <prints+0x96>
 800d4d4:	3e01      	subs	r6, #1
 800d4d6:	e007      	b.n	800d4e8 <prints+0x8c>
		if( !strbuf_printchar( apBuf, *apString ) )
 800d4d8:	f7ff ffa0 	bl	800d41c <strbuf_printchar>
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	d0ea      	beq.n	800d4b6 <prints+0x5a>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 800d4e0:	69a3      	ldr	r3, [r4, #24]
 800d4e2:	3b01      	subs	r3, #1
 800d4e4:	61a3      	str	r3, [r4, #24]
 800d4e6:	b123      	cbz	r3, 800d4f2 <prints+0x96>
 800d4e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		if( !strbuf_printchar( apBuf, *apString ) )
 800d4ec:	4620      	mov	r0, r4
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 800d4ee:	2900      	cmp	r1, #0
 800d4f0:	d1f2      	bne.n	800d4d8 <prints+0x7c>
	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 800d4f2:	6963      	ldr	r3, [r4, #20]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	dc05      	bgt.n	800d504 <prints+0xa8>
 800d4f8:	e01b      	b.n	800d532 <prints+0xd6>
 800d4fa:	6963      	ldr	r3, [r4, #20]
 800d4fc:	3b01      	subs	r3, #1
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	6163      	str	r3, [r4, #20]
 800d502:	dd16      	ble.n	800d532 <prints+0xd6>
		if( !strbuf_printchar( apBuf, padchar ) )
 800d504:	4629      	mov	r1, r5
 800d506:	4620      	mov	r0, r4
 800d508:	f7ff ff88 	bl	800d41c <strbuf_printchar>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d1f4      	bne.n	800d4fa <prints+0x9e>
 800d510:	e7d1      	b.n	800d4b6 <prints+0x5a>
		len = strlen( apString );
 800d512:	4630      	mov	r0, r6
 800d514:	f7f2 feee 	bl	80002f4 <strlen>
		if( len < apBuf->flags.printLimit )
 800d518:	4287      	cmp	r7, r0
 800d51a:	ddda      	ble.n	800d4d2 <prints+0x76>
			i = apBuf->flags.printLimit - len;
 800d51c:	1a3f      	subs	r7, r7, r0
			for( ; i; i-- )
 800d51e:	e001      	b.n	800d524 <prints+0xc8>
 800d520:	3f01      	subs	r7, #1
 800d522:	d009      	beq.n	800d538 <prints+0xdc>
				if( strbuf_printchar( apBuf, '0' )  == 0 )
 800d524:	2130      	movs	r1, #48	@ 0x30
 800d526:	4620      	mov	r0, r4
 800d528:	f7ff ff78 	bl	800d41c <strbuf_printchar>
 800d52c:	2800      	cmp	r0, #0
 800d52e:	d1f7      	bne.n	800d520 <prints+0xc4>
 800d530:	e7c1      	b.n	800d4b6 <prints+0x5a>
	return pdTRUE;
 800d532:	2001      	movs	r0, #1
}
 800d534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 800d538:	69a7      	ldr	r7, [r4, #24]
 800d53a:	e7ca      	b.n	800d4d2 <prints+0x76>
 800d53c:	080106c8 	.word	0x080106c8
 800d540:	000200ff 	.word	0x000200ff
 800d544:	00020001 	.word	0x00020001

0800d548 <printi>:
}
#endif	/* SPRINTF_LONG_LONG */
/*-----------------------------------------------------------*/

static BaseType_t printi( struct SStringBuf *apBuf, int i )
{
 800d548:	b5f0      	push	{r4, r5, r6, r7, lr}
	register char *s;
	register int t, neg = 0;
	register unsigned int u = i;
	register unsigned base = apBuf->flags.base;

	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 800d54a:	7f82      	ldrb	r2, [r0, #30]
{
 800d54c:	b085      	sub	sp, #20
	register unsigned base = apBuf->flags.base;
 800d54e:	6905      	ldr	r5, [r0, #16]
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 800d550:	f042 0202 	orr.w	r2, r2, #2
 800d554:	7782      	strb	r2, [r0, #30]

	if( i == 0 )
 800d556:	2900      	cmp	r1, #0
 800d558:	d048      	beq.n	800d5ec <printi+0xa4>
		print_buf[ 0 ] = '0';
		print_buf[ 1 ] = '\0';
		return prints( apBuf, print_buf );
	}

	if( ( apBuf->flags.isSigned == pdTRUE ) && ( base == 10 ) && ( i < 0 ) )
 800d55a:	7f82      	ldrb	r2, [r0, #30]
 800d55c:	4604      	mov	r4, r0
 800d55e:	460b      	mov	r3, r1
 800d560:	07d2      	lsls	r2, r2, #31
 800d562:	d523      	bpl.n	800d5ac <printi+0x64>
 800d564:	2d0a      	cmp	r5, #10
 800d566:	d121      	bne.n	800d5ac <printi+0x64>
 800d568:	2900      	cmp	r1, #0
 800d56a:	da1f      	bge.n	800d5ac <printi+0x64>
		u = -i;
	}

	s = print_buf + sizeof print_buf - 1;

	*s = '\0';
 800d56c:	2200      	movs	r2, #0
		u = -i;
 800d56e:	424b      	negs	r3, r1
		neg = 1;
 800d570:	2701      	movs	r7, #1
	*s = '\0';
 800d572:	f88d 200f 	strb.w	r2, [sp, #15]
	s = print_buf + sizeof print_buf - 1;
 800d576:	f10d 060f 	add.w	r6, sp, #15
	case 10:
		/* GCC compiles very efficient */
		while( u )
		{
			t = u % base;
			*( --s ) = t + '0';
 800d57a:	4618      	mov	r0, r3
 800d57c:	4631      	mov	r1, r6
			t = u % base;
 800d57e:	fbb3 fcf5 	udiv	ip, r3, r5
 800d582:	fb05 321c 	mls	r2, r5, ip, r3
		while( u )
 800d586:	4285      	cmp	r5, r0
			u /= base;
 800d588:	4663      	mov	r3, ip
			*( --s ) = t + '0';
 800d58a:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800d58e:	f806 2d01 	strb.w	r2, [r6, #-1]!
		while( u )
 800d592:	d9f2      	bls.n	800d57a <printi+0x32>
		}
		break;
*/
	}

	if( neg != 0 )
 800d594:	2f00      	cmp	r7, #0
 800d596:	d03c      	beq.n	800d612 <printi+0xca>
	{
		if( apBuf->flags.width && (apBuf->flags.pad & PAD_ZERO ) )
 800d598:	6963      	ldr	r3, [r4, #20]
 800d59a:	b113      	cbz	r3, 800d5a2 <printi+0x5a>
 800d59c:	7f23      	ldrb	r3, [r4, #28]
 800d59e:	079b      	lsls	r3, r3, #30
 800d5a0:	d42e      	bmi.n	800d600 <printi+0xb8>
			}
			--apBuf->flags.width;
		}
		else
		{
			*( --s ) = '-';
 800d5a2:	232d      	movs	r3, #45	@ 0x2d
 800d5a4:	3902      	subs	r1, #2
 800d5a6:	f806 3c01 	strb.w	r3, [r6, #-1]
 800d5aa:	e00b      	b.n	800d5c4 <printi+0x7c>
	*s = '\0';
 800d5ac:	2200      	movs	r2, #0
	switch( base )
 800d5ae:	2d10      	cmp	r5, #16
	*s = '\0';
 800d5b0:	f88d 200f 	strb.w	r2, [sp, #15]
	switch( base )
 800d5b4:	d00b      	beq.n	800d5ce <printi+0x86>
 800d5b6:	dc03      	bgt.n	800d5c0 <printi+0x78>
 800d5b8:	f025 0102 	bic.w	r1, r5, #2
 800d5bc:	2908      	cmp	r1, #8
 800d5be:	d01d      	beq.n	800d5fc <printi+0xb4>
 800d5c0:	f10d 010f 	add.w	r1, sp, #15
		}
	}

	return prints( apBuf, s );
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	f7ff ff49 	bl	800d45c <prints>
}
 800d5ca:	b005      	add	sp, #20
 800d5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch( base )
 800d5ce:	f10d 010f 	add.w	r1, sp, #15
				t += apBuf->flags.letBase - '0' - 10;
 800d5d2:	f003 020f 	and.w	r2, r3, #15
			if( t >= 10 )
 800d5d6:	2a09      	cmp	r2, #9
 800d5d8:	d902      	bls.n	800d5e0 <printi+0x98>
				t += apBuf->flags.letBase - '0' - 10;
 800d5da:	7f60      	ldrb	r0, [r4, #29]
 800d5dc:	383a      	subs	r0, #58	@ 0x3a
 800d5de:	4402      	add	r2, r0
			*( --s ) = t + '0';
 800d5e0:	3230      	adds	r2, #48	@ 0x30
		while( u != 0 )
 800d5e2:	091b      	lsrs	r3, r3, #4
			*( --s ) = t + '0';
 800d5e4:	f801 2d01 	strb.w	r2, [r1, #-1]!
		while( u != 0 )
 800d5e8:	d1f3      	bne.n	800d5d2 <printi+0x8a>
 800d5ea:	e7eb      	b.n	800d5c4 <printi+0x7c>
		print_buf[ 0 ] = '0';
 800d5ec:	2330      	movs	r3, #48	@ 0x30
		return prints( apBuf, print_buf );
 800d5ee:	a901      	add	r1, sp, #4
		print_buf[ 0 ] = '0';
 800d5f0:	f8ad 3004 	strh.w	r3, [sp, #4]
		return prints( apBuf, print_buf );
 800d5f4:	f7ff ff32 	bl	800d45c <prints>
}
 800d5f8:	b005      	add	sp, #20
 800d5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch( base )
 800d5fc:	4617      	mov	r7, r2
 800d5fe:	e7ba      	b.n	800d576 <printi+0x2e>
			if( strbuf_printchar( apBuf, '-' ) == 0 )
 800d600:	212d      	movs	r1, #45	@ 0x2d
 800d602:	4620      	mov	r0, r4
 800d604:	f7ff ff0a 	bl	800d41c <strbuf_printchar>
 800d608:	2800      	cmp	r0, #0
 800d60a:	d0de      	beq.n	800d5ca <printi+0x82>
			--apBuf->flags.width;
 800d60c:	6963      	ldr	r3, [r4, #20]
 800d60e:	3b01      	subs	r3, #1
 800d610:	6163      	str	r3, [r4, #20]
			*( --s ) = t + '0';
 800d612:	4631      	mov	r1, r6
 800d614:	e7d6      	b.n	800d5c4 <printi+0x7c>
 800d616:	bf00      	nop

0800d618 <sprintf>:
	return strBuf.curLen;
}
/*-----------------------------------------------------------*/

int sprintf( char *apBuf, const char *apFmt, ... )
{
 800d618:	b40e      	push	{r1, r2, r3}
 800d61a:	b500      	push	{lr}
 800d61c:	b08a      	sub	sp, #40	@ 0x28
	apStr->curLen = 0;
 800d61e:	2300      	movs	r3, #0
{
 800d620:	aa0b      	add	r2, sp, #44	@ 0x2c
	apStr->str = apBuf;
 800d622:	9003      	str	r0, [sp, #12]
	memset( &apStr->flags, '\0', sizeof apStr->flags );
 800d624:	9309      	str	r3, [sp, #36]	@ 0x24
{
 800d626:	f852 1b04 	ldr.w	r1, [r2], #4
	apStr->str = apBuf;
 800d62a:	e9cd 2001 	strd	r2, r0, [sp, #4]
	apStr->nulPos = apMaxStr-1;
 800d62e:	f200 30ff 	addw	r0, r0, #1023	@ 0x3ff
 800d632:	9004      	str	r0, [sp, #16]
	va_list args;

	va_start( args,  apFmt );
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char * )apBuf + 1024 );
	tiny_print( &strBuf, apFmt, args );
 800d634:	a802      	add	r0, sp, #8
	memset( &apStr->flags, '\0', sizeof apStr->flags );
 800d636:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800d63a:	e9cd 3307 	strd	r3, r3, [sp, #28]
	tiny_print( &strBuf, apFmt, args );
 800d63e:	f000 f807 	bl	800d650 <tiny_print>
	va_end( args );

	return strBuf.curLen;
}
 800d642:	9805      	ldr	r0, [sp, #20]
 800d644:	b00a      	add	sp, #40	@ 0x28
 800d646:	f85d eb04 	ldr.w	lr, [sp], #4
 800d64a:	b003      	add	sp, #12
 800d64c:	4770      	bx	lr
 800d64e:	bf00      	nop

0800d650 <tiny_print>:
{
 800d650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d654:	4604      	mov	r4, r0
 800d656:	b086      	sub	sp, #24
 800d658:	460d      	mov	r5, r1
 800d65a:	4617      	mov	r7, r2
		int ch = *( format++ );
 800d65c:	462e      	mov	r6, r5
 800d65e:	f816 5b01 	ldrb.w	r5, [r6], #1
		if( ch != '%' )
 800d662:	2d25      	cmp	r5, #37	@ 0x25
 800d664:	d11a      	bne.n	800d69c <tiny_print+0x4c>
		ch = *( format++ );
 800d666:	4635      	mov	r5, r6
 800d668:	f815 1b01 	ldrb.w	r1, [r5], #1
		if( ch == '\0' )
 800d66c:	2900      	cmp	r1, #0
 800d66e:	d07b      	beq.n	800d768 <tiny_print+0x118>
		if( ch == '%' )
 800d670:	2925      	cmp	r1, #37	@ 0x25
 800d672:	d129      	bne.n	800d6c8 <tiny_print+0x78>
			if( strbuf_printchar( apBuf, ch ) == 0 )
 800d674:	4620      	mov	r0, r4
 800d676:	f7ff fed1 	bl	800d41c <strbuf_printchar>
 800d67a:	2800      	cmp	r0, #0
 800d67c:	d1ee      	bne.n	800d65c <tiny_print+0xc>
}
 800d67e:	b006      	add	sp, #24
 800d680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		vOutputChar( ( char ) c, xTicksToWait );
 800d684:	2114      	movs	r1, #20
 800d686:	4628      	mov	r0, r5
 800d688:	f7ff fec6 	bl	800d418 <vOutputChar>
		if( c == 0 )
 800d68c:	b18d      	cbz	r5, 800d6b2 <tiny_print+0x62>
		apStr->curLen++;
 800d68e:	68e3      	ldr	r3, [r4, #12]
 800d690:	3301      	adds	r3, #1
 800d692:	60e3      	str	r3, [r4, #12]
				ch = *( format++ );
 800d694:	f816 5b01 	ldrb.w	r5, [r6], #1
			} while( ch != '%' );
 800d698:	2d25      	cmp	r5, #37	@ 0x25
 800d69a:	d0e4      	beq.n	800d666 <tiny_print+0x16>
	if( apStr->str == NULL )
 800d69c:	6823      	ldr	r3, [r4, #0]
		*(apStr->str++) = c;
 800d69e:	1c59      	adds	r1, r3, #1
	if( apStr->str == NULL )
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d0ef      	beq.n	800d684 <tiny_print+0x34>
	if( apStr->str < apStr->nulPos )
 800d6a4:	68a2      	ldr	r2, [r4, #8]
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d206      	bcs.n	800d6b8 <tiny_print+0x68>
		*(apStr->str++) = c;
 800d6aa:	6021      	str	r1, [r4, #0]
 800d6ac:	701d      	strb	r5, [r3, #0]
		if( c == 0 )
 800d6ae:	2d00      	cmp	r5, #0
 800d6b0:	d1ed      	bne.n	800d68e <tiny_print+0x3e>
}
 800d6b2:	b006      	add	sp, #24
 800d6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if( apStr->str == apStr->nulPos )
 800d6b8:	d1fb      	bne.n	800d6b2 <tiny_print+0x62>
		*( apStr->str++ ) = '\0';
 800d6ba:	1c59      	adds	r1, r3, #1
 800d6bc:	2200      	movs	r2, #0
 800d6be:	6021      	str	r1, [r4, #0]
 800d6c0:	701a      	strb	r2, [r3, #0]
}
 800d6c2:	b006      	add	sp, #24
 800d6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		memset( &apBuf->flags, '\0', sizeof apBuf->flags );
 800d6c8:	2300      	movs	r3, #0
		if( ch == '-' )
 800d6ca:	292d      	cmp	r1, #45	@ 0x2d
		memset( &apBuf->flags, '\0', sizeof apBuf->flags );
 800d6cc:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800d6d0:	e9c4 3306 	strd	r3, r3, [r4, #24]
		if( ch == '-' )
 800d6d4:	d103      	bne.n	800d6de <tiny_print+0x8e>
			apBuf->flags.pad = PAD_RIGHT;
 800d6d6:	2301      	movs	r3, #1
			ch = *( format++ );
 800d6d8:	1cb5      	adds	r5, r6, #2
 800d6da:	7871      	ldrb	r1, [r6, #1]
			apBuf->flags.pad = PAD_RIGHT;
 800d6dc:	7723      	strb	r3, [r4, #28]
		while( ch == '0' )
 800d6de:	2930      	cmp	r1, #48	@ 0x30
 800d6e0:	d107      	bne.n	800d6f2 <tiny_print+0xa2>
			apBuf->flags.pad |= PAD_ZERO;
 800d6e2:	7f23      	ldrb	r3, [r4, #28]
			ch = *( format++ );
 800d6e4:	f815 1b01 	ldrb.w	r1, [r5], #1
			apBuf->flags.pad |= PAD_ZERO;
 800d6e8:	f043 0302 	orr.w	r3, r3, #2
		while( ch == '0' )
 800d6ec:	2930      	cmp	r1, #48	@ 0x30
			apBuf->flags.pad |= PAD_ZERO;
 800d6ee:	7723      	strb	r3, [r4, #28]
		while( ch == '0' )
 800d6f0:	d0f8      	beq.n	800d6e4 <tiny_print+0x94>
		if( ch == '*' )
 800d6f2:	292a      	cmp	r1, #42	@ 0x2a
 800d6f4:	d13f      	bne.n	800d776 <tiny_print+0x126>
			apBuf->flags.width = va_arg( args, int );
 800d6f6:	f857 3b04 	ldr.w	r3, [r7], #4
			ch = *( format++ );
 800d6fa:	f815 1b01 	ldrb.w	r1, [r5], #1
			apBuf->flags.width = va_arg( args, int );
 800d6fe:	6163      	str	r3, [r4, #20]
		if( ch == '.' )
 800d700:	292e      	cmp	r1, #46	@ 0x2e
 800d702:	d04a      	beq.n	800d79a <tiny_print+0x14a>
			apBuf->flags.printLimit--;  /* -1: make it unlimited */
 800d704:	f04f 33ff 	mov.w	r3, #4294967295
		if( ch == 'p' )
 800d708:	2970      	cmp	r1, #112	@ 0x70
			apBuf->flags.printLimit--;  /* -1: make it unlimited */
 800d70a:	61a3      	str	r3, [r4, #24]
		if( ch == 'p' )
 800d70c:	d052      	beq.n	800d7b4 <tiny_print+0x164>
		if( ch == 's' )
 800d70e:	2973      	cmp	r1, #115	@ 0x73
 800d710:	d067      	beq.n	800d7e2 <tiny_print+0x192>
		if( ch == 'c' )
 800d712:	2963      	cmp	r1, #99	@ 0x63
 800d714:	d05d      	beq.n	800d7d2 <tiny_print+0x182>
		if( ch == 'l' )
 800d716:	296c      	cmp	r1, #108	@ 0x6c
 800d718:	d105      	bne.n	800d726 <tiny_print+0xd6>
			apBuf->flags.long32 = 1;
 800d71a:	7fa3      	ldrb	r3, [r4, #30]
			ch = *( format++ );
 800d71c:	f815 1b01 	ldrb.w	r1, [r5], #1
			apBuf->flags.long32 = 1;
 800d720:	f043 0304 	orr.w	r3, r3, #4
 800d724:	77a3      	strb	r3, [r4, #30]
		if( ch == 'L' )
 800d726:	294c      	cmp	r1, #76	@ 0x4c
 800d728:	d105      	bne.n	800d736 <tiny_print+0xe6>
			apBuf->flags.long64 = 1;
 800d72a:	7fa3      	ldrb	r3, [r4, #30]
			ch = *( format++ );
 800d72c:	f815 1b01 	ldrb.w	r1, [r5], #1
			apBuf->flags.long64 = 1;
 800d730:	f043 0308 	orr.w	r3, r3, #8
 800d734:	77a3      	strb	r3, [r4, #30]
		apBuf->flags.base = 10;
 800d736:	230a      	movs	r3, #10
		if( ch == 'd' || ch == 'u' )
 800d738:	f1a1 0264 	sub.w	r2, r1, #100	@ 0x64
 800d73c:	2975      	cmp	r1, #117	@ 0x75
 800d73e:	fab2 f282 	clz	r2, r2
		apBuf->flags.base = 10;
 800d742:	6123      	str	r3, [r4, #16]
		apBuf->flags.letBase = 'a';
 800d744:	f04f 0361 	mov.w	r3, #97	@ 0x61
		if( ch == 'd' || ch == 'u' )
 800d748:	ea4f 1252 	mov.w	r2, r2, lsr #5
		apBuf->flags.letBase = 'a';
 800d74c:	7763      	strb	r3, [r4, #29]
		if( ch == 'd' || ch == 'u' )
 800d74e:	d002      	beq.n	800d756 <tiny_print+0x106>
 800d750:	2a00      	cmp	r2, #0
 800d752:	f000 80ac 	beq.w	800d8ae <tiny_print+0x25e>
			apBuf->flags.isSigned = ( ch == 'd' );
 800d756:	7fa3      	ldrb	r3, [r4, #30]
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 800d758:	4620      	mov	r0, r4
			apBuf->flags.isSigned = ( ch == 'd' );
 800d75a:	f362 0300 	bfi	r3, r2, #0, #1
 800d75e:	77a3      	strb	r3, [r4, #30]
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 800d760:	6839      	ldr	r1, [r7, #0]
 800d762:	f7ff fef1 	bl	800d548 <printi>
 800d766:	bb90      	cbnz	r0, 800d7ce <tiny_print+0x17e>
	strbuf_printchar( apBuf, '\0' );
 800d768:	2100      	movs	r1, #0
 800d76a:	4620      	mov	r0, r4
}
 800d76c:	b006      	add	sp, #24
 800d76e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	strbuf_printchar( apBuf, '\0' );
 800d772:	f7ff be53 	b.w	800d41c <strbuf_printchar>
			while( ch >= '0' && ch <= '9' )
 800d776:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d77a:	2a09      	cmp	r2, #9
 800d77c:	d8c0      	bhi.n	800d700 <tiny_print+0xb0>
 800d77e:	2300      	movs	r3, #0
				apBuf->flags.width *= 10;
 800d780:	eb03 0383 	add.w	r3, r3, r3, lsl #2
				apBuf->flags.width += ch - '0';
 800d784:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800d788:	6163      	str	r3, [r4, #20]
				ch = *( format++ );
 800d78a:	f815 1b01 	ldrb.w	r1, [r5], #1
			while( ch >= '0' && ch <= '9' )
 800d78e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d792:	2a09      	cmp	r2, #9
 800d794:	d9f4      	bls.n	800d780 <tiny_print+0x130>
		if( ch == '.' )
 800d796:	292e      	cmp	r1, #46	@ 0x2e
 800d798:	d1b4      	bne.n	800d704 <tiny_print+0xb4>
			ch = *( format++ );
 800d79a:	7829      	ldrb	r1, [r5, #0]
			if( ch == '*' )
 800d79c:	292a      	cmp	r1, #42	@ 0x2a
 800d79e:	d12b      	bne.n	800d7f8 <tiny_print+0x1a8>
				apBuf->flags.printLimit = va_arg( args, int );
 800d7a0:	f857 3b04 	ldr.w	r3, [r7], #4
				ch = *( format++ );
 800d7a4:	3502      	adds	r5, #2
				apBuf->flags.printLimit = va_arg( args, int );
 800d7a6:	61a3      	str	r3, [r4, #24]
				ch = *( format++ );
 800d7a8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
		if( apBuf->flags.printLimit == 0 )
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d0a9      	beq.n	800d704 <tiny_print+0xb4>
		if( ch == 'p' )
 800d7b0:	2970      	cmp	r1, #112	@ 0x70
 800d7b2:	d1ac      	bne.n	800d70e <tiny_print+0xbe>
			if( format[0] == 'i' && format[1] == 'p' )
 800d7b4:	782b      	ldrb	r3, [r5, #0]
 800d7b6:	2b69      	cmp	r3, #105	@ 0x69
 800d7b8:	d032      	beq.n	800d820 <tiny_print+0x1d0>
		apBuf->flags.letBase = 'a';
 800d7ba:	2261      	movs	r2, #97	@ 0x61
		apBuf->flags.base = 16;		/* From here all hexadecimal */
 800d7bc:	2310      	movs	r3, #16
		apBuf->flags.letBase = 'a';
 800d7be:	7762      	strb	r2, [r4, #29]
		apBuf->flags.base = 16;		/* From here all hexadecimal */
 800d7c0:	6123      	str	r3, [r4, #16]
 800d7c2:	6839      	ldr	r1, [r7, #0]
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	f7ff febf 	bl	800d548 <printi>
 800d7ca:	2800      	cmp	r0, #0
 800d7cc:	d0cc      	beq.n	800d768 <tiny_print+0x118>
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 800d7ce:	3704      	adds	r7, #4
 800d7d0:	e744      	b.n	800d65c <tiny_print+0xc>
			if( strbuf_printchar( apBuf, scr[0] )  == 0 )
 800d7d2:	7839      	ldrb	r1, [r7, #0]
 800d7d4:	4620      	mov	r0, r4
 800d7d6:	f7ff fe21 	bl	800d41c <strbuf_printchar>
 800d7da:	2800      	cmp	r0, #0
 800d7dc:	f43f af69 	beq.w	800d6b2 <tiny_print+0x62>
 800d7e0:	e7f5      	b.n	800d7ce <tiny_print+0x17e>
			register char *s = ( char * )va_arg( args, int );
 800d7e2:	6839      	ldr	r1, [r7, #0]
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 800d7e4:	4620      	mov	r0, r4
			register char *s = ( char * )va_arg( args, int );
 800d7e6:	4b58      	ldr	r3, [pc, #352]	@ (800d948 <tiny_print+0x2f8>)
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 800d7e8:	2900      	cmp	r1, #0
 800d7ea:	bf08      	it	eq
 800d7ec:	4619      	moveq	r1, r3
 800d7ee:	f7ff fe35 	bl	800d45c <prints>
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	d0b8      	beq.n	800d768 <tiny_print+0x118>
 800d7f6:	e7ea      	b.n	800d7ce <tiny_print+0x17e>
				while( ch >= '0' && ch <= '9' )
 800d7f8:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
			ch = *( format++ );
 800d7fc:	3501      	adds	r5, #1
				while( ch >= '0' && ch <= '9' )
 800d7fe:	2a09      	cmp	r2, #9
 800d800:	d880      	bhi.n	800d704 <tiny_print+0xb4>
 800d802:	2300      	movs	r3, #0
					apBuf->flags.printLimit *= 10;
 800d804:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					apBuf->flags.printLimit += ch - '0';
 800d808:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800d80c:	61a3      	str	r3, [r4, #24]
					ch = *( format++ );
 800d80e:	f815 1b01 	ldrb.w	r1, [r5], #1
				while( ch >= '0' && ch <= '9' )
 800d812:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d816:	2a09      	cmp	r2, #9
 800d818:	d9f4      	bls.n	800d804 <tiny_print+0x1b4>
		if( apBuf->flags.printLimit == 0 )
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d1c8      	bne.n	800d7b0 <tiny_print+0x160>
 800d81e:	e771      	b.n	800d704 <tiny_print+0xb4>
			if( format[0] == 'i' && format[1] == 'p' )
 800d820:	786b      	ldrb	r3, [r5, #1]
 800d822:	2b70      	cmp	r3, #112	@ 0x70
 800d824:	d1c9      	bne.n	800d7ba <tiny_print+0x16a>
	int iCurStart = 0;
 800d826:	2600      	movs	r6, #0
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 800d828:	f8d7 a000 	ldr.w	sl, [r7]
	int iZeroStart = -1;
 800d82c:	f04f 38ff 	mov.w	r8, #4294967295
 800d830:	f1aa 0102 	sub.w	r1, sl, #2
	int iZeroLength = 0;
 800d834:	46b1      	mov	r9, r6
	int iCurLength = 0;
 800d836:	4632      	mov	r2, r6
	for( iIndex = 0; iIndex < 8; iIndex++ )
 800d838:	4633      	mov	r3, r6
		if( usValue == 0 )
 800d83a:	f831 0f02 	ldrh.w	r0, [r1, #2]!
 800d83e:	2800      	cmp	r0, #0
 800d840:	d06a      	beq.n	800d918 <tiny_print+0x2c8>
			if( ( iCurLength > 1 ) && ( iZeroLength < iCurLength ) )
 800d842:	4648      	mov	r0, r9
	for( iIndex = 0; iIndex < 8; iIndex++ )
 800d844:	3301      	adds	r3, #1
			if( ( iCurLength > 1 ) && ( iZeroLength < iCurLength ) )
 800d846:	2801      	cmp	r0, #1
 800d848:	bfb8      	it	lt
 800d84a:	2001      	movlt	r0, #1
 800d84c:	4290      	cmp	r0, r2
 800d84e:	bfbc      	itt	lt
 800d850:	4691      	movlt	r9, r2
 800d852:	46b0      	movlt	r8, r6
	for( iIndex = 0; iIndex < 8; iIndex++ )
 800d854:	2b08      	cmp	r3, #8
 800d856:	f04f 0200 	mov.w	r2, #0
 800d85a:	d1ee      	bne.n	800d83a <tiny_print+0x1ea>
	apBuf->flags.base = 16;
 800d85c:	2310      	movs	r3, #16
			iIndex += iZeroLength - 1;
 800d85e:	f109 39ff 	add.w	r9, r9, #4294967295
	for( iIndex = 0; iIndex < 8; iIndex++ )
 800d862:	2600      	movs	r6, #0
	apBuf->flags.base = 16;
 800d864:	6123      	str	r3, [r4, #16]
	apBuf->flags.letBase = 'a'; /* use lower-case letters 'a' to 'f' */
 800d866:	2361      	movs	r3, #97	@ 0x61
 800d868:	7763      	strb	r3, [r4, #29]
	for( iIndex = 0; iIndex < 8; iIndex++ )
 800d86a:	e010      	b.n	800d88e <tiny_print+0x23e>
			if( iIndex > 0 )
 800d86c:	2e00      	cmp	r6, #0
				strbuf_printchar( apBuf, ':' );
 800d86e:	f04f 013a 	mov.w	r1, #58	@ 0x3a
			if( iIndex > 0 )
 800d872:	dd02      	ble.n	800d87a <tiny_print+0x22a>
				strbuf_printchar( apBuf, ':' );
 800d874:	4620      	mov	r0, r4
 800d876:	f7ff fdd1 	bl	800d41c <strbuf_printchar>
			printi( apBuf, ( int ) ( ( uint32_t ) usNetToHost( pusAddress[ iIndex ] ) ) );
 800d87a:	f83a 1016 	ldrh.w	r1, [sl, r6, lsl #1]
 800d87e:	4620      	mov	r0, r4
 800d880:	ba49      	rev16	r1, r1
 800d882:	b289      	uxth	r1, r1
 800d884:	f7ff fe60 	bl	800d548 <printi>
	for( iIndex = 0; iIndex < 8; iIndex++ )
 800d888:	3601      	adds	r6, #1
 800d88a:	2e07      	cmp	r6, #7
 800d88c:	dc0d      	bgt.n	800d8aa <tiny_print+0x25a>
		if( iIndex == iZeroStart )
 800d88e:	45b0      	cmp	r8, r6
 800d890:	d1ec      	bne.n	800d86c <tiny_print+0x21c>
			iIndex += iZeroLength - 1;
 800d892:	eb08 0609 	add.w	r6, r8, r9
			strbuf_printchar( apBuf, ':' );
 800d896:	213a      	movs	r1, #58	@ 0x3a
 800d898:	4620      	mov	r0, r4
 800d89a:	f7ff fdbf 	bl	800d41c <strbuf_printchar>
			if( iIndex == 7 )
 800d89e:	2e07      	cmp	r6, #7
 800d8a0:	d1f2      	bne.n	800d888 <tiny_print+0x238>
				strbuf_printchar( apBuf, ':' );
 800d8a2:	213a      	movs	r1, #58	@ 0x3a
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f7ff fdb9 	bl	800d41c <strbuf_printchar>
				format += 2;	/* eat the "pi" of "pip" */
 800d8aa:	3502      	adds	r5, #2
 800d8ac:	e78f      	b.n	800d7ce <tiny_print+0x17e>
		apBuf->flags.base = 16;		/* From here all hexadecimal */
 800d8ae:	2310      	movs	r3, #16
		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 800d8b0:	2978      	cmp	r1, #120	@ 0x78
		apBuf->flags.base = 16;		/* From here all hexadecimal */
 800d8b2:	6123      	str	r3, [r4, #16]
		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 800d8b4:	d010      	beq.n	800d8d8 <tiny_print+0x288>
		if( ch == 'x' || ch == 'X' || ch == 'p' || ch == 'o' )
 800d8b6:	2958      	cmp	r1, #88	@ 0x58
 800d8b8:	d103      	bne.n	800d8c2 <tiny_print+0x272>
				apBuf->flags.letBase = 'A';
 800d8ba:	2341      	movs	r3, #65	@ 0x41
 800d8bc:	7763      	strb	r3, [r4, #29]
 800d8be:	6839      	ldr	r1, [r7, #0]
 800d8c0:	e780      	b.n	800d7c4 <tiny_print+0x174>
		if( ch == 'x' || ch == 'X' || ch == 'p' || ch == 'o' )
 800d8c2:	f1a1 036f 	sub.w	r3, r1, #111	@ 0x6f
 800d8c6:	2b01      	cmp	r3, #1
 800d8c8:	f63f aec8 	bhi.w	800d65c <tiny_print+0xc>
			else if( ch == 'o' )
 800d8cc:	296f      	cmp	r1, #111	@ 0x6f
				apBuf->flags.base = 8;
 800d8ce:	bf04      	itt	eq
 800d8d0:	2308      	moveq	r3, #8
 800d8d2:	6123      	streq	r3, [r4, #16]
 800d8d4:	6839      	ldr	r1, [r7, #0]
 800d8d6:	e775      	b.n	800d7c4 <tiny_print+0x174>
		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 800d8d8:	782b      	ldrb	r3, [r5, #0]
			if( printIp( apBuf, va_arg( args, int ) ) == 0 )
 800d8da:	6839      	ldr	r1, [r7, #0]
		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 800d8dc:	2b69      	cmp	r3, #105	@ 0x69
 800d8de:	f47f af71 	bne.w	800d7c4 <tiny_print+0x174>
 800d8e2:	786b      	ldrb	r3, [r5, #1]
 800d8e4:	2b70      	cmp	r3, #112	@ 0x70
 800d8e6:	f47f af6d 	bne.w	800d7c4 <tiny_print+0x174>
	sprintf( print_buf, "%u.%u.%u.%u",
 800d8ea:	b2cb      	uxtb	r3, r1
 800d8ec:	a802      	add	r0, sp, #8
 800d8ee:	0e0a      	lsrs	r2, r1, #24
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 800d8f0:	3704      	adds	r7, #4
	sprintf( print_buf, "%u.%u.%u.%u",
 800d8f2:	9301      	str	r3, [sp, #4]
 800d8f4:	f3c1 2307 	ubfx	r3, r1, #8, #8
			format += 2;	/* eat the "xi" of "xip" */
 800d8f8:	3502      	adds	r5, #2
	sprintf( print_buf, "%u.%u.%u.%u",
 800d8fa:	9300      	str	r3, [sp, #0]
 800d8fc:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800d900:	4912      	ldr	r1, [pc, #72]	@ (800d94c <tiny_print+0x2fc>)
 800d902:	f7ff fe89 	bl	800d618 <sprintf>
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 800d906:	7fa3      	ldrb	r3, [r4, #30]
	prints( apBuf, print_buf );
 800d908:	a902      	add	r1, sp, #8
 800d90a:	4620      	mov	r0, r4
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 800d90c:	f043 0302 	orr.w	r3, r3, #2
 800d910:	77a3      	strb	r3, [r4, #30]
	prints( apBuf, print_buf );
 800d912:	f7ff fda3 	bl	800d45c <prints>
	return pdTRUE;
 800d916:	e6a1      	b.n	800d65c <tiny_print+0xc>
			if( iCurLength == 0 )
 800d918:	b932      	cbnz	r2, 800d928 <tiny_print+0x2d8>
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 800d91a:	2b07      	cmp	r3, #7
			iCurLength++;
 800d91c:	f04f 0201 	mov.w	r2, #1
	for( iIndex = 0; iIndex < 8; iIndex++ )
 800d920:	461e      	mov	r6, r3
 800d922:	4413      	add	r3, r2
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 800d924:	d189      	bne.n	800d83a <tiny_print+0x1ea>
 800d926:	e799      	b.n	800d85c <tiny_print+0x20c>
 800d928:	2b07      	cmp	r3, #7
			iCurLength++;
 800d92a:	f102 0201 	add.w	r2, r2, #1
	for( iIndex = 0; iIndex < 8; iIndex++ )
 800d92e:	f103 0301 	add.w	r3, r3, #1
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 800d932:	d182      	bne.n	800d83a <tiny_print+0x1ea>
			if( ( iCurLength > 1 ) && ( iZeroLength < iCurLength ) )
 800d934:	464b      	mov	r3, r9
 800d936:	2b01      	cmp	r3, #1
 800d938:	bfb8      	it	lt
 800d93a:	2301      	movlt	r3, #1
 800d93c:	429a      	cmp	r2, r3
 800d93e:	bfc4      	itt	gt
 800d940:	4691      	movgt	r9, r2
 800d942:	46b0      	movgt	r8, r6
 800d944:	e78a      	b.n	800d85c <tiny_print+0x20c>
 800d946:	bf00      	nop
 800d948:	080106d0 	.word	0x080106d0
 800d94c:	080106d8 	.word	0x080106d8

0800d950 <vsnprintf>:
	apStr->nulPos = apMaxStr-1;
 800d950:	f101 3cff 	add.w	ip, r1, #4294967295
{
 800d954:	b510      	push	{r4, lr}
 800d956:	4696      	mov	lr, r2
 800d958:	b088      	sub	sp, #32
	apStr->curLen = 0;
 800d95a:	2400      	movs	r4, #0
	tiny_print( &strBuf, apFmt, args );
 800d95c:	461a      	mov	r2, r3
	apStr->nulPos = apMaxStr-1;
 800d95e:	eb00 030c 	add.w	r3, r0, ip
	tiny_print( &strBuf, apFmt, args );
 800d962:	4671      	mov	r1, lr
	memset( &apStr->flags, '\0', sizeof apStr->flags );
 800d964:	9407      	str	r4, [sp, #28]
	apStr->nulPos = apMaxStr-1;
 800d966:	9302      	str	r3, [sp, #8]
	apStr->str = apBuf;
 800d968:	e9cd 0000 	strd	r0, r0, [sp]
	tiny_print( &strBuf, apFmt, args );
 800d96c:	4668      	mov	r0, sp
	memset( &apStr->flags, '\0', sizeof apStr->flags );
 800d96e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800d972:	e9cd 4405 	strd	r4, r4, [sp, #20]
	tiny_print( &strBuf, apFmt, args );
 800d976:	f7ff fe6b 	bl	800d650 <tiny_print>
}
 800d97a:	9803      	ldr	r0, [sp, #12]
 800d97c:	b008      	add	sp, #32
 800d97e:	bd10      	pop	{r4, pc}

0800d980 <snprintf>:
{
 800d980:	b40c      	push	{r2, r3}
 800d982:	b510      	push	{r4, lr}
 800d984:	b08a      	sub	sp, #40	@ 0x28
	apStr->nulPos = apMaxStr-1;
 800d986:	1e4c      	subs	r4, r1, #1
	apStr->curLen = 0;
 800d988:	2300      	movs	r3, #0
{
 800d98a:	aa0c      	add	r2, sp, #48	@ 0x30
	apStr->nulPos = apMaxStr-1;
 800d98c:	4404      	add	r4, r0
	apStr->curLen = 0;
 800d98e:	9305      	str	r3, [sp, #20]
{
 800d990:	f852 1b04 	ldr.w	r1, [r2], #4
	apStr->nulPos = apMaxStr-1;
 800d994:	e9cd 0403 	strd	r0, r4, [sp, #12]
	va_start( args,  apFmt );
 800d998:	e9cd 2001 	strd	r2, r0, [sp, #4]
	tiny_print( &strBuf, apFmt, args );
 800d99c:	a802      	add	r0, sp, #8
	memset( &apStr->flags, '\0', sizeof apStr->flags );
 800d99e:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800d9a2:	e9cd 3308 	strd	r3, r3, [sp, #32]
	tiny_print( &strBuf, apFmt, args );
 800d9a6:	f7ff fe53 	bl	800d650 <tiny_print>
}
 800d9aa:	9805      	ldr	r0, [sp, #20]
 800d9ac:	b00a      	add	sp, #40	@ 0x28
 800d9ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9b2:	b002      	add	sp, #8
 800d9b4:	4770      	bx	lr
 800d9b6:	bf00      	nop

0800d9b8 <rand>:
 800d9b8:	4b16      	ldr	r3, [pc, #88]	@ (800da14 <rand+0x5c>)
 800d9ba:	b510      	push	{r4, lr}
 800d9bc:	681c      	ldr	r4, [r3, #0]
 800d9be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d9c0:	b9b3      	cbnz	r3, 800d9f0 <rand+0x38>
 800d9c2:	2018      	movs	r0, #24
 800d9c4:	f000 fa5c 	bl	800de80 <malloc>
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	6320      	str	r0, [r4, #48]	@ 0x30
 800d9cc:	b920      	cbnz	r0, 800d9d8 <rand+0x20>
 800d9ce:	4b12      	ldr	r3, [pc, #72]	@ (800da18 <rand+0x60>)
 800d9d0:	4812      	ldr	r0, [pc, #72]	@ (800da1c <rand+0x64>)
 800d9d2:	2152      	movs	r1, #82	@ 0x52
 800d9d4:	f000 f9ec 	bl	800ddb0 <__assert_func>
 800d9d8:	4911      	ldr	r1, [pc, #68]	@ (800da20 <rand+0x68>)
 800d9da:	4b12      	ldr	r3, [pc, #72]	@ (800da24 <rand+0x6c>)
 800d9dc:	e9c0 1300 	strd	r1, r3, [r0]
 800d9e0:	4b11      	ldr	r3, [pc, #68]	@ (800da28 <rand+0x70>)
 800d9e2:	6083      	str	r3, [r0, #8]
 800d9e4:	230b      	movs	r3, #11
 800d9e6:	8183      	strh	r3, [r0, #12]
 800d9e8:	2100      	movs	r1, #0
 800d9ea:	2001      	movs	r0, #1
 800d9ec:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d9f0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d9f2:	480e      	ldr	r0, [pc, #56]	@ (800da2c <rand+0x74>)
 800d9f4:	690b      	ldr	r3, [r1, #16]
 800d9f6:	694c      	ldr	r4, [r1, #20]
 800d9f8:	4a0d      	ldr	r2, [pc, #52]	@ (800da30 <rand+0x78>)
 800d9fa:	4358      	muls	r0, r3
 800d9fc:	fb02 0004 	mla	r0, r2, r4, r0
 800da00:	fba3 3202 	umull	r3, r2, r3, r2
 800da04:	3301      	adds	r3, #1
 800da06:	eb40 0002 	adc.w	r0, r0, r2
 800da0a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800da0e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800da12:	bd10      	pop	{r4, pc}
 800da14:	20000048 	.word	0x20000048
 800da18:	080106e4 	.word	0x080106e4
 800da1c:	080106fb 	.word	0x080106fb
 800da20:	abcd330e 	.word	0xabcd330e
 800da24:	e66d1234 	.word	0xe66d1234
 800da28:	0005deec 	.word	0x0005deec
 800da2c:	5851f42d 	.word	0x5851f42d
 800da30:	4c957f2d 	.word	0x4c957f2d

0800da34 <std>:
 800da34:	2300      	movs	r3, #0
 800da36:	b510      	push	{r4, lr}
 800da38:	4604      	mov	r4, r0
 800da3a:	e9c0 3300 	strd	r3, r3, [r0]
 800da3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800da42:	6083      	str	r3, [r0, #8]
 800da44:	8181      	strh	r1, [r0, #12]
 800da46:	6643      	str	r3, [r0, #100]	@ 0x64
 800da48:	81c2      	strh	r2, [r0, #14]
 800da4a:	6183      	str	r3, [r0, #24]
 800da4c:	4619      	mov	r1, r3
 800da4e:	2208      	movs	r2, #8
 800da50:	305c      	adds	r0, #92	@ 0x5c
 800da52:	f7ff fc89 	bl	800d368 <memset>
 800da56:	4b0d      	ldr	r3, [pc, #52]	@ (800da8c <std+0x58>)
 800da58:	6263      	str	r3, [r4, #36]	@ 0x24
 800da5a:	4b0d      	ldr	r3, [pc, #52]	@ (800da90 <std+0x5c>)
 800da5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800da5e:	4b0d      	ldr	r3, [pc, #52]	@ (800da94 <std+0x60>)
 800da60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800da62:	4b0d      	ldr	r3, [pc, #52]	@ (800da98 <std+0x64>)
 800da64:	6323      	str	r3, [r4, #48]	@ 0x30
 800da66:	4b0d      	ldr	r3, [pc, #52]	@ (800da9c <std+0x68>)
 800da68:	6224      	str	r4, [r4, #32]
 800da6a:	429c      	cmp	r4, r3
 800da6c:	d006      	beq.n	800da7c <std+0x48>
 800da6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800da72:	4294      	cmp	r4, r2
 800da74:	d002      	beq.n	800da7c <std+0x48>
 800da76:	33d0      	adds	r3, #208	@ 0xd0
 800da78:	429c      	cmp	r4, r3
 800da7a:	d105      	bne.n	800da88 <std+0x54>
 800da7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800da80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da84:	f000 b990 	b.w	800dda8 <__retarget_lock_init_recursive>
 800da88:	bd10      	pop	{r4, pc}
 800da8a:	bf00      	nop
 800da8c:	0800dbb9 	.word	0x0800dbb9
 800da90:	0800dbdb 	.word	0x0800dbdb
 800da94:	0800dc13 	.word	0x0800dc13
 800da98:	0800dc37 	.word	0x0800dc37
 800da9c:	20001174 	.word	0x20001174

0800daa0 <stdio_exit_handler>:
 800daa0:	4a02      	ldr	r2, [pc, #8]	@ (800daac <stdio_exit_handler+0xc>)
 800daa2:	4903      	ldr	r1, [pc, #12]	@ (800dab0 <stdio_exit_handler+0x10>)
 800daa4:	4803      	ldr	r0, [pc, #12]	@ (800dab4 <stdio_exit_handler+0x14>)
 800daa6:	f000 b869 	b.w	800db7c <_fwalk_sglue>
 800daaa:	bf00      	nop
 800daac:	2000003c 	.word	0x2000003c
 800dab0:	0800e0f5 	.word	0x0800e0f5
 800dab4:	2000004c 	.word	0x2000004c

0800dab8 <cleanup_stdio>:
 800dab8:	6841      	ldr	r1, [r0, #4]
 800daba:	4b0c      	ldr	r3, [pc, #48]	@ (800daec <cleanup_stdio+0x34>)
 800dabc:	4299      	cmp	r1, r3
 800dabe:	b510      	push	{r4, lr}
 800dac0:	4604      	mov	r4, r0
 800dac2:	d001      	beq.n	800dac8 <cleanup_stdio+0x10>
 800dac4:	f000 fb16 	bl	800e0f4 <_fflush_r>
 800dac8:	68a1      	ldr	r1, [r4, #8]
 800daca:	4b09      	ldr	r3, [pc, #36]	@ (800daf0 <cleanup_stdio+0x38>)
 800dacc:	4299      	cmp	r1, r3
 800dace:	d002      	beq.n	800dad6 <cleanup_stdio+0x1e>
 800dad0:	4620      	mov	r0, r4
 800dad2:	f000 fb0f 	bl	800e0f4 <_fflush_r>
 800dad6:	68e1      	ldr	r1, [r4, #12]
 800dad8:	4b06      	ldr	r3, [pc, #24]	@ (800daf4 <cleanup_stdio+0x3c>)
 800dada:	4299      	cmp	r1, r3
 800dadc:	d004      	beq.n	800dae8 <cleanup_stdio+0x30>
 800dade:	4620      	mov	r0, r4
 800dae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dae4:	f000 bb06 	b.w	800e0f4 <_fflush_r>
 800dae8:	bd10      	pop	{r4, pc}
 800daea:	bf00      	nop
 800daec:	20001174 	.word	0x20001174
 800daf0:	200011dc 	.word	0x200011dc
 800daf4:	20001244 	.word	0x20001244

0800daf8 <global_stdio_init.part.0>:
 800daf8:	b510      	push	{r4, lr}
 800dafa:	4b0b      	ldr	r3, [pc, #44]	@ (800db28 <global_stdio_init.part.0+0x30>)
 800dafc:	4c0b      	ldr	r4, [pc, #44]	@ (800db2c <global_stdio_init.part.0+0x34>)
 800dafe:	4a0c      	ldr	r2, [pc, #48]	@ (800db30 <global_stdio_init.part.0+0x38>)
 800db00:	601a      	str	r2, [r3, #0]
 800db02:	4620      	mov	r0, r4
 800db04:	2200      	movs	r2, #0
 800db06:	2104      	movs	r1, #4
 800db08:	f7ff ff94 	bl	800da34 <std>
 800db0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800db10:	2201      	movs	r2, #1
 800db12:	2109      	movs	r1, #9
 800db14:	f7ff ff8e 	bl	800da34 <std>
 800db18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800db1c:	2202      	movs	r2, #2
 800db1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db22:	2112      	movs	r1, #18
 800db24:	f7ff bf86 	b.w	800da34 <std>
 800db28:	200012ac 	.word	0x200012ac
 800db2c:	20001174 	.word	0x20001174
 800db30:	0800daa1 	.word	0x0800daa1

0800db34 <__sfp_lock_acquire>:
 800db34:	4801      	ldr	r0, [pc, #4]	@ (800db3c <__sfp_lock_acquire+0x8>)
 800db36:	f000 b938 	b.w	800ddaa <__retarget_lock_acquire_recursive>
 800db3a:	bf00      	nop
 800db3c:	200012b5 	.word	0x200012b5

0800db40 <__sfp_lock_release>:
 800db40:	4801      	ldr	r0, [pc, #4]	@ (800db48 <__sfp_lock_release+0x8>)
 800db42:	f000 b933 	b.w	800ddac <__retarget_lock_release_recursive>
 800db46:	bf00      	nop
 800db48:	200012b5 	.word	0x200012b5

0800db4c <__sinit>:
 800db4c:	b510      	push	{r4, lr}
 800db4e:	4604      	mov	r4, r0
 800db50:	f7ff fff0 	bl	800db34 <__sfp_lock_acquire>
 800db54:	6a23      	ldr	r3, [r4, #32]
 800db56:	b11b      	cbz	r3, 800db60 <__sinit+0x14>
 800db58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db5c:	f7ff bff0 	b.w	800db40 <__sfp_lock_release>
 800db60:	4b04      	ldr	r3, [pc, #16]	@ (800db74 <__sinit+0x28>)
 800db62:	6223      	str	r3, [r4, #32]
 800db64:	4b04      	ldr	r3, [pc, #16]	@ (800db78 <__sinit+0x2c>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d1f5      	bne.n	800db58 <__sinit+0xc>
 800db6c:	f7ff ffc4 	bl	800daf8 <global_stdio_init.part.0>
 800db70:	e7f2      	b.n	800db58 <__sinit+0xc>
 800db72:	bf00      	nop
 800db74:	0800dab9 	.word	0x0800dab9
 800db78:	200012ac 	.word	0x200012ac

0800db7c <_fwalk_sglue>:
 800db7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db80:	4607      	mov	r7, r0
 800db82:	4688      	mov	r8, r1
 800db84:	4614      	mov	r4, r2
 800db86:	2600      	movs	r6, #0
 800db88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db8c:	f1b9 0901 	subs.w	r9, r9, #1
 800db90:	d505      	bpl.n	800db9e <_fwalk_sglue+0x22>
 800db92:	6824      	ldr	r4, [r4, #0]
 800db94:	2c00      	cmp	r4, #0
 800db96:	d1f7      	bne.n	800db88 <_fwalk_sglue+0xc>
 800db98:	4630      	mov	r0, r6
 800db9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db9e:	89ab      	ldrh	r3, [r5, #12]
 800dba0:	2b01      	cmp	r3, #1
 800dba2:	d907      	bls.n	800dbb4 <_fwalk_sglue+0x38>
 800dba4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dba8:	3301      	adds	r3, #1
 800dbaa:	d003      	beq.n	800dbb4 <_fwalk_sglue+0x38>
 800dbac:	4629      	mov	r1, r5
 800dbae:	4638      	mov	r0, r7
 800dbb0:	47c0      	blx	r8
 800dbb2:	4306      	orrs	r6, r0
 800dbb4:	3568      	adds	r5, #104	@ 0x68
 800dbb6:	e7e9      	b.n	800db8c <_fwalk_sglue+0x10>

0800dbb8 <__sread>:
 800dbb8:	b510      	push	{r4, lr}
 800dbba:	460c      	mov	r4, r1
 800dbbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbc0:	f000 f8a4 	bl	800dd0c <_read_r>
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	bfab      	itete	ge
 800dbc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dbca:	89a3      	ldrhlt	r3, [r4, #12]
 800dbcc:	181b      	addge	r3, r3, r0
 800dbce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dbd2:	bfac      	ite	ge
 800dbd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dbd6:	81a3      	strhlt	r3, [r4, #12]
 800dbd8:	bd10      	pop	{r4, pc}

0800dbda <__swrite>:
 800dbda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbde:	461f      	mov	r7, r3
 800dbe0:	898b      	ldrh	r3, [r1, #12]
 800dbe2:	05db      	lsls	r3, r3, #23
 800dbe4:	4605      	mov	r5, r0
 800dbe6:	460c      	mov	r4, r1
 800dbe8:	4616      	mov	r6, r2
 800dbea:	d505      	bpl.n	800dbf8 <__swrite+0x1e>
 800dbec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbf0:	2302      	movs	r3, #2
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	f000 f878 	bl	800dce8 <_lseek_r>
 800dbf8:	89a3      	ldrh	r3, [r4, #12]
 800dbfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dc02:	81a3      	strh	r3, [r4, #12]
 800dc04:	4632      	mov	r2, r6
 800dc06:	463b      	mov	r3, r7
 800dc08:	4628      	mov	r0, r5
 800dc0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc0e:	f000 b88f 	b.w	800dd30 <_write_r>

0800dc12 <__sseek>:
 800dc12:	b510      	push	{r4, lr}
 800dc14:	460c      	mov	r4, r1
 800dc16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc1a:	f000 f865 	bl	800dce8 <_lseek_r>
 800dc1e:	1c43      	adds	r3, r0, #1
 800dc20:	89a3      	ldrh	r3, [r4, #12]
 800dc22:	bf15      	itete	ne
 800dc24:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dc26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dc2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dc2e:	81a3      	strheq	r3, [r4, #12]
 800dc30:	bf18      	it	ne
 800dc32:	81a3      	strhne	r3, [r4, #12]
 800dc34:	bd10      	pop	{r4, pc}

0800dc36 <__sclose>:
 800dc36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc3a:	f000 b845 	b.w	800dcc8 <_close_r>

0800dc3e <memcmp>:
 800dc3e:	b510      	push	{r4, lr}
 800dc40:	3901      	subs	r1, #1
 800dc42:	4402      	add	r2, r0
 800dc44:	4290      	cmp	r0, r2
 800dc46:	d101      	bne.n	800dc4c <memcmp+0xe>
 800dc48:	2000      	movs	r0, #0
 800dc4a:	e005      	b.n	800dc58 <memcmp+0x1a>
 800dc4c:	7803      	ldrb	r3, [r0, #0]
 800dc4e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dc52:	42a3      	cmp	r3, r4
 800dc54:	d001      	beq.n	800dc5a <memcmp+0x1c>
 800dc56:	1b18      	subs	r0, r3, r4
 800dc58:	bd10      	pop	{r4, pc}
 800dc5a:	3001      	adds	r0, #1
 800dc5c:	e7f2      	b.n	800dc44 <memcmp+0x6>

0800dc5e <memmove>:
 800dc5e:	4288      	cmp	r0, r1
 800dc60:	b510      	push	{r4, lr}
 800dc62:	eb01 0402 	add.w	r4, r1, r2
 800dc66:	d902      	bls.n	800dc6e <memmove+0x10>
 800dc68:	4284      	cmp	r4, r0
 800dc6a:	4623      	mov	r3, r4
 800dc6c:	d807      	bhi.n	800dc7e <memmove+0x20>
 800dc6e:	1e43      	subs	r3, r0, #1
 800dc70:	42a1      	cmp	r1, r4
 800dc72:	d008      	beq.n	800dc86 <memmove+0x28>
 800dc74:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc78:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc7c:	e7f8      	b.n	800dc70 <memmove+0x12>
 800dc7e:	4402      	add	r2, r0
 800dc80:	4601      	mov	r1, r0
 800dc82:	428a      	cmp	r2, r1
 800dc84:	d100      	bne.n	800dc88 <memmove+0x2a>
 800dc86:	bd10      	pop	{r4, pc}
 800dc88:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc8c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc90:	e7f7      	b.n	800dc82 <memmove+0x24>
	...

0800dc94 <strcasecmp>:
 800dc94:	b530      	push	{r4, r5, lr}
 800dc96:	4d0b      	ldr	r5, [pc, #44]	@ (800dcc4 <strcasecmp+0x30>)
 800dc98:	4604      	mov	r4, r0
 800dc9a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dc9e:	5cea      	ldrb	r2, [r5, r3]
 800dca0:	f002 0203 	and.w	r2, r2, #3
 800dca4:	2a01      	cmp	r2, #1
 800dca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dcaa:	5ca8      	ldrb	r0, [r5, r2]
 800dcac:	f000 0003 	and.w	r0, r0, #3
 800dcb0:	bf08      	it	eq
 800dcb2:	3320      	addeq	r3, #32
 800dcb4:	2801      	cmp	r0, #1
 800dcb6:	bf08      	it	eq
 800dcb8:	3220      	addeq	r2, #32
 800dcba:	1a98      	subs	r0, r3, r2
 800dcbc:	d101      	bne.n	800dcc2 <strcasecmp+0x2e>
 800dcbe:	2a00      	cmp	r2, #0
 800dcc0:	d1eb      	bne.n	800dc9a <strcasecmp+0x6>
 800dcc2:	bd30      	pop	{r4, r5, pc}
 800dcc4:	08010790 	.word	0x08010790

0800dcc8 <_close_r>:
 800dcc8:	b538      	push	{r3, r4, r5, lr}
 800dcca:	4d06      	ldr	r5, [pc, #24]	@ (800dce4 <_close_r+0x1c>)
 800dccc:	2300      	movs	r3, #0
 800dcce:	4604      	mov	r4, r0
 800dcd0:	4608      	mov	r0, r1
 800dcd2:	602b      	str	r3, [r5, #0]
 800dcd4:	f7f3 fadc 	bl	8001290 <_close>
 800dcd8:	1c43      	adds	r3, r0, #1
 800dcda:	d102      	bne.n	800dce2 <_close_r+0x1a>
 800dcdc:	682b      	ldr	r3, [r5, #0]
 800dcde:	b103      	cbz	r3, 800dce2 <_close_r+0x1a>
 800dce0:	6023      	str	r3, [r4, #0]
 800dce2:	bd38      	pop	{r3, r4, r5, pc}
 800dce4:	200012b0 	.word	0x200012b0

0800dce8 <_lseek_r>:
 800dce8:	b538      	push	{r3, r4, r5, lr}
 800dcea:	4d07      	ldr	r5, [pc, #28]	@ (800dd08 <_lseek_r+0x20>)
 800dcec:	4604      	mov	r4, r0
 800dcee:	4608      	mov	r0, r1
 800dcf0:	4611      	mov	r1, r2
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	602a      	str	r2, [r5, #0]
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	f7f3 fad6 	bl	80012a8 <_lseek>
 800dcfc:	1c43      	adds	r3, r0, #1
 800dcfe:	d102      	bne.n	800dd06 <_lseek_r+0x1e>
 800dd00:	682b      	ldr	r3, [r5, #0]
 800dd02:	b103      	cbz	r3, 800dd06 <_lseek_r+0x1e>
 800dd04:	6023      	str	r3, [r4, #0]
 800dd06:	bd38      	pop	{r3, r4, r5, pc}
 800dd08:	200012b0 	.word	0x200012b0

0800dd0c <_read_r>:
 800dd0c:	b538      	push	{r3, r4, r5, lr}
 800dd0e:	4d07      	ldr	r5, [pc, #28]	@ (800dd2c <_read_r+0x20>)
 800dd10:	4604      	mov	r4, r0
 800dd12:	4608      	mov	r0, r1
 800dd14:	4611      	mov	r1, r2
 800dd16:	2200      	movs	r2, #0
 800dd18:	602a      	str	r2, [r5, #0]
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	f7f3 fa9c 	bl	8001258 <_read>
 800dd20:	1c43      	adds	r3, r0, #1
 800dd22:	d102      	bne.n	800dd2a <_read_r+0x1e>
 800dd24:	682b      	ldr	r3, [r5, #0]
 800dd26:	b103      	cbz	r3, 800dd2a <_read_r+0x1e>
 800dd28:	6023      	str	r3, [r4, #0]
 800dd2a:	bd38      	pop	{r3, r4, r5, pc}
 800dd2c:	200012b0 	.word	0x200012b0

0800dd30 <_write_r>:
 800dd30:	b538      	push	{r3, r4, r5, lr}
 800dd32:	4d07      	ldr	r5, [pc, #28]	@ (800dd50 <_write_r+0x20>)
 800dd34:	4604      	mov	r4, r0
 800dd36:	4608      	mov	r0, r1
 800dd38:	4611      	mov	r1, r2
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	602a      	str	r2, [r5, #0]
 800dd3e:	461a      	mov	r2, r3
 800dd40:	f7f3 fa98 	bl	8001274 <_write>
 800dd44:	1c43      	adds	r3, r0, #1
 800dd46:	d102      	bne.n	800dd4e <_write_r+0x1e>
 800dd48:	682b      	ldr	r3, [r5, #0]
 800dd4a:	b103      	cbz	r3, 800dd4e <_write_r+0x1e>
 800dd4c:	6023      	str	r3, [r4, #0]
 800dd4e:	bd38      	pop	{r3, r4, r5, pc}
 800dd50:	200012b0 	.word	0x200012b0

0800dd54 <__errno>:
 800dd54:	4b01      	ldr	r3, [pc, #4]	@ (800dd5c <__errno+0x8>)
 800dd56:	6818      	ldr	r0, [r3, #0]
 800dd58:	4770      	bx	lr
 800dd5a:	bf00      	nop
 800dd5c:	20000048 	.word	0x20000048

0800dd60 <__libc_init_array>:
 800dd60:	b570      	push	{r4, r5, r6, lr}
 800dd62:	4d0d      	ldr	r5, [pc, #52]	@ (800dd98 <__libc_init_array+0x38>)
 800dd64:	4c0d      	ldr	r4, [pc, #52]	@ (800dd9c <__libc_init_array+0x3c>)
 800dd66:	1b64      	subs	r4, r4, r5
 800dd68:	10a4      	asrs	r4, r4, #2
 800dd6a:	2600      	movs	r6, #0
 800dd6c:	42a6      	cmp	r6, r4
 800dd6e:	d109      	bne.n	800dd84 <__libc_init_array+0x24>
 800dd70:	4d0b      	ldr	r5, [pc, #44]	@ (800dda0 <__libc_init_array+0x40>)
 800dd72:	4c0c      	ldr	r4, [pc, #48]	@ (800dda4 <__libc_init_array+0x44>)
 800dd74:	f000 fe3a 	bl	800e9ec <_init>
 800dd78:	1b64      	subs	r4, r4, r5
 800dd7a:	10a4      	asrs	r4, r4, #2
 800dd7c:	2600      	movs	r6, #0
 800dd7e:	42a6      	cmp	r6, r4
 800dd80:	d105      	bne.n	800dd8e <__libc_init_array+0x2e>
 800dd82:	bd70      	pop	{r4, r5, r6, pc}
 800dd84:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd88:	4798      	blx	r3
 800dd8a:	3601      	adds	r6, #1
 800dd8c:	e7ee      	b.n	800dd6c <__libc_init_array+0xc>
 800dd8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd92:	4798      	blx	r3
 800dd94:	3601      	adds	r6, #1
 800dd96:	e7f2      	b.n	800dd7e <__libc_init_array+0x1e>
 800dd98:	080108cc 	.word	0x080108cc
 800dd9c:	080108cc 	.word	0x080108cc
 800dda0:	080108cc 	.word	0x080108cc
 800dda4:	080108d0 	.word	0x080108d0

0800dda8 <__retarget_lock_init_recursive>:
 800dda8:	4770      	bx	lr

0800ddaa <__retarget_lock_acquire_recursive>:
 800ddaa:	4770      	bx	lr

0800ddac <__retarget_lock_release_recursive>:
 800ddac:	4770      	bx	lr
	...

0800ddb0 <__assert_func>:
 800ddb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddb2:	4614      	mov	r4, r2
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	4b09      	ldr	r3, [pc, #36]	@ (800dddc <__assert_func+0x2c>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4605      	mov	r5, r0
 800ddbc:	68d8      	ldr	r0, [r3, #12]
 800ddbe:	b954      	cbnz	r4, 800ddd6 <__assert_func+0x26>
 800ddc0:	4b07      	ldr	r3, [pc, #28]	@ (800dde0 <__assert_func+0x30>)
 800ddc2:	461c      	mov	r4, r3
 800ddc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ddc8:	9100      	str	r1, [sp, #0]
 800ddca:	462b      	mov	r3, r5
 800ddcc:	4905      	ldr	r1, [pc, #20]	@ (800dde4 <__assert_func+0x34>)
 800ddce:	f000 f9b9 	bl	800e144 <fiprintf>
 800ddd2:	f000 f9d9 	bl	800e188 <abort>
 800ddd6:	4b04      	ldr	r3, [pc, #16]	@ (800dde8 <__assert_func+0x38>)
 800ddd8:	e7f4      	b.n	800ddc4 <__assert_func+0x14>
 800ddda:	bf00      	nop
 800dddc:	20000048 	.word	0x20000048
 800dde0:	0801078e 	.word	0x0801078e
 800dde4:	08010760 	.word	0x08010760
 800dde8:	08010753 	.word	0x08010753

0800ddec <_free_r>:
 800ddec:	b538      	push	{r3, r4, r5, lr}
 800ddee:	4605      	mov	r5, r0
 800ddf0:	2900      	cmp	r1, #0
 800ddf2:	d041      	beq.n	800de78 <_free_r+0x8c>
 800ddf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddf8:	1f0c      	subs	r4, r1, #4
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	bfb8      	it	lt
 800ddfe:	18e4      	addlt	r4, r4, r3
 800de00:	f000 f8e8 	bl	800dfd4 <__malloc_lock>
 800de04:	4a1d      	ldr	r2, [pc, #116]	@ (800de7c <_free_r+0x90>)
 800de06:	6813      	ldr	r3, [r2, #0]
 800de08:	b933      	cbnz	r3, 800de18 <_free_r+0x2c>
 800de0a:	6063      	str	r3, [r4, #4]
 800de0c:	6014      	str	r4, [r2, #0]
 800de0e:	4628      	mov	r0, r5
 800de10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de14:	f000 b8e4 	b.w	800dfe0 <__malloc_unlock>
 800de18:	42a3      	cmp	r3, r4
 800de1a:	d908      	bls.n	800de2e <_free_r+0x42>
 800de1c:	6820      	ldr	r0, [r4, #0]
 800de1e:	1821      	adds	r1, r4, r0
 800de20:	428b      	cmp	r3, r1
 800de22:	bf01      	itttt	eq
 800de24:	6819      	ldreq	r1, [r3, #0]
 800de26:	685b      	ldreq	r3, [r3, #4]
 800de28:	1809      	addeq	r1, r1, r0
 800de2a:	6021      	streq	r1, [r4, #0]
 800de2c:	e7ed      	b.n	800de0a <_free_r+0x1e>
 800de2e:	461a      	mov	r2, r3
 800de30:	685b      	ldr	r3, [r3, #4]
 800de32:	b10b      	cbz	r3, 800de38 <_free_r+0x4c>
 800de34:	42a3      	cmp	r3, r4
 800de36:	d9fa      	bls.n	800de2e <_free_r+0x42>
 800de38:	6811      	ldr	r1, [r2, #0]
 800de3a:	1850      	adds	r0, r2, r1
 800de3c:	42a0      	cmp	r0, r4
 800de3e:	d10b      	bne.n	800de58 <_free_r+0x6c>
 800de40:	6820      	ldr	r0, [r4, #0]
 800de42:	4401      	add	r1, r0
 800de44:	1850      	adds	r0, r2, r1
 800de46:	4283      	cmp	r3, r0
 800de48:	6011      	str	r1, [r2, #0]
 800de4a:	d1e0      	bne.n	800de0e <_free_r+0x22>
 800de4c:	6818      	ldr	r0, [r3, #0]
 800de4e:	685b      	ldr	r3, [r3, #4]
 800de50:	6053      	str	r3, [r2, #4]
 800de52:	4408      	add	r0, r1
 800de54:	6010      	str	r0, [r2, #0]
 800de56:	e7da      	b.n	800de0e <_free_r+0x22>
 800de58:	d902      	bls.n	800de60 <_free_r+0x74>
 800de5a:	230c      	movs	r3, #12
 800de5c:	602b      	str	r3, [r5, #0]
 800de5e:	e7d6      	b.n	800de0e <_free_r+0x22>
 800de60:	6820      	ldr	r0, [r4, #0]
 800de62:	1821      	adds	r1, r4, r0
 800de64:	428b      	cmp	r3, r1
 800de66:	bf04      	itt	eq
 800de68:	6819      	ldreq	r1, [r3, #0]
 800de6a:	685b      	ldreq	r3, [r3, #4]
 800de6c:	6063      	str	r3, [r4, #4]
 800de6e:	bf04      	itt	eq
 800de70:	1809      	addeq	r1, r1, r0
 800de72:	6021      	streq	r1, [r4, #0]
 800de74:	6054      	str	r4, [r2, #4]
 800de76:	e7ca      	b.n	800de0e <_free_r+0x22>
 800de78:	bd38      	pop	{r3, r4, r5, pc}
 800de7a:	bf00      	nop
 800de7c:	200012bc 	.word	0x200012bc

0800de80 <malloc>:
 800de80:	4b02      	ldr	r3, [pc, #8]	@ (800de8c <malloc+0xc>)
 800de82:	4601      	mov	r1, r0
 800de84:	6818      	ldr	r0, [r3, #0]
 800de86:	f000 b825 	b.w	800ded4 <_malloc_r>
 800de8a:	bf00      	nop
 800de8c:	20000048 	.word	0x20000048

0800de90 <sbrk_aligned>:
 800de90:	b570      	push	{r4, r5, r6, lr}
 800de92:	4e0f      	ldr	r6, [pc, #60]	@ (800ded0 <sbrk_aligned+0x40>)
 800de94:	460c      	mov	r4, r1
 800de96:	6831      	ldr	r1, [r6, #0]
 800de98:	4605      	mov	r5, r0
 800de9a:	b911      	cbnz	r1, 800dea2 <sbrk_aligned+0x12>
 800de9c:	f000 f964 	bl	800e168 <_sbrk_r>
 800dea0:	6030      	str	r0, [r6, #0]
 800dea2:	4621      	mov	r1, r4
 800dea4:	4628      	mov	r0, r5
 800dea6:	f000 f95f 	bl	800e168 <_sbrk_r>
 800deaa:	1c43      	adds	r3, r0, #1
 800deac:	d103      	bne.n	800deb6 <sbrk_aligned+0x26>
 800deae:	f04f 34ff 	mov.w	r4, #4294967295
 800deb2:	4620      	mov	r0, r4
 800deb4:	bd70      	pop	{r4, r5, r6, pc}
 800deb6:	1cc4      	adds	r4, r0, #3
 800deb8:	f024 0403 	bic.w	r4, r4, #3
 800debc:	42a0      	cmp	r0, r4
 800debe:	d0f8      	beq.n	800deb2 <sbrk_aligned+0x22>
 800dec0:	1a21      	subs	r1, r4, r0
 800dec2:	4628      	mov	r0, r5
 800dec4:	f000 f950 	bl	800e168 <_sbrk_r>
 800dec8:	3001      	adds	r0, #1
 800deca:	d1f2      	bne.n	800deb2 <sbrk_aligned+0x22>
 800decc:	e7ef      	b.n	800deae <sbrk_aligned+0x1e>
 800dece:	bf00      	nop
 800ded0:	200012b8 	.word	0x200012b8

0800ded4 <_malloc_r>:
 800ded4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ded8:	1ccd      	adds	r5, r1, #3
 800deda:	f025 0503 	bic.w	r5, r5, #3
 800dede:	3508      	adds	r5, #8
 800dee0:	2d0c      	cmp	r5, #12
 800dee2:	bf38      	it	cc
 800dee4:	250c      	movcc	r5, #12
 800dee6:	2d00      	cmp	r5, #0
 800dee8:	4606      	mov	r6, r0
 800deea:	db01      	blt.n	800def0 <_malloc_r+0x1c>
 800deec:	42a9      	cmp	r1, r5
 800deee:	d904      	bls.n	800defa <_malloc_r+0x26>
 800def0:	230c      	movs	r3, #12
 800def2:	6033      	str	r3, [r6, #0]
 800def4:	2000      	movs	r0, #0
 800def6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800defa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dfd0 <_malloc_r+0xfc>
 800defe:	f000 f869 	bl	800dfd4 <__malloc_lock>
 800df02:	f8d8 3000 	ldr.w	r3, [r8]
 800df06:	461c      	mov	r4, r3
 800df08:	bb44      	cbnz	r4, 800df5c <_malloc_r+0x88>
 800df0a:	4629      	mov	r1, r5
 800df0c:	4630      	mov	r0, r6
 800df0e:	f7ff ffbf 	bl	800de90 <sbrk_aligned>
 800df12:	1c43      	adds	r3, r0, #1
 800df14:	4604      	mov	r4, r0
 800df16:	d158      	bne.n	800dfca <_malloc_r+0xf6>
 800df18:	f8d8 4000 	ldr.w	r4, [r8]
 800df1c:	4627      	mov	r7, r4
 800df1e:	2f00      	cmp	r7, #0
 800df20:	d143      	bne.n	800dfaa <_malloc_r+0xd6>
 800df22:	2c00      	cmp	r4, #0
 800df24:	d04b      	beq.n	800dfbe <_malloc_r+0xea>
 800df26:	6823      	ldr	r3, [r4, #0]
 800df28:	4639      	mov	r1, r7
 800df2a:	4630      	mov	r0, r6
 800df2c:	eb04 0903 	add.w	r9, r4, r3
 800df30:	f000 f91a 	bl	800e168 <_sbrk_r>
 800df34:	4581      	cmp	r9, r0
 800df36:	d142      	bne.n	800dfbe <_malloc_r+0xea>
 800df38:	6821      	ldr	r1, [r4, #0]
 800df3a:	1a6d      	subs	r5, r5, r1
 800df3c:	4629      	mov	r1, r5
 800df3e:	4630      	mov	r0, r6
 800df40:	f7ff ffa6 	bl	800de90 <sbrk_aligned>
 800df44:	3001      	adds	r0, #1
 800df46:	d03a      	beq.n	800dfbe <_malloc_r+0xea>
 800df48:	6823      	ldr	r3, [r4, #0]
 800df4a:	442b      	add	r3, r5
 800df4c:	6023      	str	r3, [r4, #0]
 800df4e:	f8d8 3000 	ldr.w	r3, [r8]
 800df52:	685a      	ldr	r2, [r3, #4]
 800df54:	bb62      	cbnz	r2, 800dfb0 <_malloc_r+0xdc>
 800df56:	f8c8 7000 	str.w	r7, [r8]
 800df5a:	e00f      	b.n	800df7c <_malloc_r+0xa8>
 800df5c:	6822      	ldr	r2, [r4, #0]
 800df5e:	1b52      	subs	r2, r2, r5
 800df60:	d420      	bmi.n	800dfa4 <_malloc_r+0xd0>
 800df62:	2a0b      	cmp	r2, #11
 800df64:	d917      	bls.n	800df96 <_malloc_r+0xc2>
 800df66:	1961      	adds	r1, r4, r5
 800df68:	42a3      	cmp	r3, r4
 800df6a:	6025      	str	r5, [r4, #0]
 800df6c:	bf18      	it	ne
 800df6e:	6059      	strne	r1, [r3, #4]
 800df70:	6863      	ldr	r3, [r4, #4]
 800df72:	bf08      	it	eq
 800df74:	f8c8 1000 	streq.w	r1, [r8]
 800df78:	5162      	str	r2, [r4, r5]
 800df7a:	604b      	str	r3, [r1, #4]
 800df7c:	4630      	mov	r0, r6
 800df7e:	f000 f82f 	bl	800dfe0 <__malloc_unlock>
 800df82:	f104 000b 	add.w	r0, r4, #11
 800df86:	1d23      	adds	r3, r4, #4
 800df88:	f020 0007 	bic.w	r0, r0, #7
 800df8c:	1ac2      	subs	r2, r0, r3
 800df8e:	bf1c      	itt	ne
 800df90:	1a1b      	subne	r3, r3, r0
 800df92:	50a3      	strne	r3, [r4, r2]
 800df94:	e7af      	b.n	800def6 <_malloc_r+0x22>
 800df96:	6862      	ldr	r2, [r4, #4]
 800df98:	42a3      	cmp	r3, r4
 800df9a:	bf0c      	ite	eq
 800df9c:	f8c8 2000 	streq.w	r2, [r8]
 800dfa0:	605a      	strne	r2, [r3, #4]
 800dfa2:	e7eb      	b.n	800df7c <_malloc_r+0xa8>
 800dfa4:	4623      	mov	r3, r4
 800dfa6:	6864      	ldr	r4, [r4, #4]
 800dfa8:	e7ae      	b.n	800df08 <_malloc_r+0x34>
 800dfaa:	463c      	mov	r4, r7
 800dfac:	687f      	ldr	r7, [r7, #4]
 800dfae:	e7b6      	b.n	800df1e <_malloc_r+0x4a>
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	42a3      	cmp	r3, r4
 800dfb6:	d1fb      	bne.n	800dfb0 <_malloc_r+0xdc>
 800dfb8:	2300      	movs	r3, #0
 800dfba:	6053      	str	r3, [r2, #4]
 800dfbc:	e7de      	b.n	800df7c <_malloc_r+0xa8>
 800dfbe:	230c      	movs	r3, #12
 800dfc0:	6033      	str	r3, [r6, #0]
 800dfc2:	4630      	mov	r0, r6
 800dfc4:	f000 f80c 	bl	800dfe0 <__malloc_unlock>
 800dfc8:	e794      	b.n	800def4 <_malloc_r+0x20>
 800dfca:	6005      	str	r5, [r0, #0]
 800dfcc:	e7d6      	b.n	800df7c <_malloc_r+0xa8>
 800dfce:	bf00      	nop
 800dfd0:	200012bc 	.word	0x200012bc

0800dfd4 <__malloc_lock>:
 800dfd4:	4801      	ldr	r0, [pc, #4]	@ (800dfdc <__malloc_lock+0x8>)
 800dfd6:	f7ff bee8 	b.w	800ddaa <__retarget_lock_acquire_recursive>
 800dfda:	bf00      	nop
 800dfdc:	200012b4 	.word	0x200012b4

0800dfe0 <__malloc_unlock>:
 800dfe0:	4801      	ldr	r0, [pc, #4]	@ (800dfe8 <__malloc_unlock+0x8>)
 800dfe2:	f7ff bee3 	b.w	800ddac <__retarget_lock_release_recursive>
 800dfe6:	bf00      	nop
 800dfe8:	200012b4 	.word	0x200012b4

0800dfec <__sflush_r>:
 800dfec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff4:	0716      	lsls	r6, r2, #28
 800dff6:	4605      	mov	r5, r0
 800dff8:	460c      	mov	r4, r1
 800dffa:	d454      	bmi.n	800e0a6 <__sflush_r+0xba>
 800dffc:	684b      	ldr	r3, [r1, #4]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	dc02      	bgt.n	800e008 <__sflush_r+0x1c>
 800e002:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e004:	2b00      	cmp	r3, #0
 800e006:	dd48      	ble.n	800e09a <__sflush_r+0xae>
 800e008:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e00a:	2e00      	cmp	r6, #0
 800e00c:	d045      	beq.n	800e09a <__sflush_r+0xae>
 800e00e:	2300      	movs	r3, #0
 800e010:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e014:	682f      	ldr	r7, [r5, #0]
 800e016:	6a21      	ldr	r1, [r4, #32]
 800e018:	602b      	str	r3, [r5, #0]
 800e01a:	d030      	beq.n	800e07e <__sflush_r+0x92>
 800e01c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e01e:	89a3      	ldrh	r3, [r4, #12]
 800e020:	0759      	lsls	r1, r3, #29
 800e022:	d505      	bpl.n	800e030 <__sflush_r+0x44>
 800e024:	6863      	ldr	r3, [r4, #4]
 800e026:	1ad2      	subs	r2, r2, r3
 800e028:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e02a:	b10b      	cbz	r3, 800e030 <__sflush_r+0x44>
 800e02c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e02e:	1ad2      	subs	r2, r2, r3
 800e030:	2300      	movs	r3, #0
 800e032:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e034:	6a21      	ldr	r1, [r4, #32]
 800e036:	4628      	mov	r0, r5
 800e038:	47b0      	blx	r6
 800e03a:	1c43      	adds	r3, r0, #1
 800e03c:	89a3      	ldrh	r3, [r4, #12]
 800e03e:	d106      	bne.n	800e04e <__sflush_r+0x62>
 800e040:	6829      	ldr	r1, [r5, #0]
 800e042:	291d      	cmp	r1, #29
 800e044:	d82b      	bhi.n	800e09e <__sflush_r+0xb2>
 800e046:	4a2a      	ldr	r2, [pc, #168]	@ (800e0f0 <__sflush_r+0x104>)
 800e048:	410a      	asrs	r2, r1
 800e04a:	07d6      	lsls	r6, r2, #31
 800e04c:	d427      	bmi.n	800e09e <__sflush_r+0xb2>
 800e04e:	2200      	movs	r2, #0
 800e050:	6062      	str	r2, [r4, #4]
 800e052:	04d9      	lsls	r1, r3, #19
 800e054:	6922      	ldr	r2, [r4, #16]
 800e056:	6022      	str	r2, [r4, #0]
 800e058:	d504      	bpl.n	800e064 <__sflush_r+0x78>
 800e05a:	1c42      	adds	r2, r0, #1
 800e05c:	d101      	bne.n	800e062 <__sflush_r+0x76>
 800e05e:	682b      	ldr	r3, [r5, #0]
 800e060:	b903      	cbnz	r3, 800e064 <__sflush_r+0x78>
 800e062:	6560      	str	r0, [r4, #84]	@ 0x54
 800e064:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e066:	602f      	str	r7, [r5, #0]
 800e068:	b1b9      	cbz	r1, 800e09a <__sflush_r+0xae>
 800e06a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e06e:	4299      	cmp	r1, r3
 800e070:	d002      	beq.n	800e078 <__sflush_r+0x8c>
 800e072:	4628      	mov	r0, r5
 800e074:	f7ff feba 	bl	800ddec <_free_r>
 800e078:	2300      	movs	r3, #0
 800e07a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e07c:	e00d      	b.n	800e09a <__sflush_r+0xae>
 800e07e:	2301      	movs	r3, #1
 800e080:	4628      	mov	r0, r5
 800e082:	47b0      	blx	r6
 800e084:	4602      	mov	r2, r0
 800e086:	1c50      	adds	r0, r2, #1
 800e088:	d1c9      	bne.n	800e01e <__sflush_r+0x32>
 800e08a:	682b      	ldr	r3, [r5, #0]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d0c6      	beq.n	800e01e <__sflush_r+0x32>
 800e090:	2b1d      	cmp	r3, #29
 800e092:	d001      	beq.n	800e098 <__sflush_r+0xac>
 800e094:	2b16      	cmp	r3, #22
 800e096:	d11e      	bne.n	800e0d6 <__sflush_r+0xea>
 800e098:	602f      	str	r7, [r5, #0]
 800e09a:	2000      	movs	r0, #0
 800e09c:	e022      	b.n	800e0e4 <__sflush_r+0xf8>
 800e09e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0a2:	b21b      	sxth	r3, r3
 800e0a4:	e01b      	b.n	800e0de <__sflush_r+0xf2>
 800e0a6:	690f      	ldr	r7, [r1, #16]
 800e0a8:	2f00      	cmp	r7, #0
 800e0aa:	d0f6      	beq.n	800e09a <__sflush_r+0xae>
 800e0ac:	0793      	lsls	r3, r2, #30
 800e0ae:	680e      	ldr	r6, [r1, #0]
 800e0b0:	bf08      	it	eq
 800e0b2:	694b      	ldreq	r3, [r1, #20]
 800e0b4:	600f      	str	r7, [r1, #0]
 800e0b6:	bf18      	it	ne
 800e0b8:	2300      	movne	r3, #0
 800e0ba:	eba6 0807 	sub.w	r8, r6, r7
 800e0be:	608b      	str	r3, [r1, #8]
 800e0c0:	f1b8 0f00 	cmp.w	r8, #0
 800e0c4:	dde9      	ble.n	800e09a <__sflush_r+0xae>
 800e0c6:	6a21      	ldr	r1, [r4, #32]
 800e0c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e0ca:	4643      	mov	r3, r8
 800e0cc:	463a      	mov	r2, r7
 800e0ce:	4628      	mov	r0, r5
 800e0d0:	47b0      	blx	r6
 800e0d2:	2800      	cmp	r0, #0
 800e0d4:	dc08      	bgt.n	800e0e8 <__sflush_r+0xfc>
 800e0d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0de:	81a3      	strh	r3, [r4, #12]
 800e0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0e8:	4407      	add	r7, r0
 800e0ea:	eba8 0800 	sub.w	r8, r8, r0
 800e0ee:	e7e7      	b.n	800e0c0 <__sflush_r+0xd4>
 800e0f0:	dfbffffe 	.word	0xdfbffffe

0800e0f4 <_fflush_r>:
 800e0f4:	b538      	push	{r3, r4, r5, lr}
 800e0f6:	690b      	ldr	r3, [r1, #16]
 800e0f8:	4605      	mov	r5, r0
 800e0fa:	460c      	mov	r4, r1
 800e0fc:	b913      	cbnz	r3, 800e104 <_fflush_r+0x10>
 800e0fe:	2500      	movs	r5, #0
 800e100:	4628      	mov	r0, r5
 800e102:	bd38      	pop	{r3, r4, r5, pc}
 800e104:	b118      	cbz	r0, 800e10e <_fflush_r+0x1a>
 800e106:	6a03      	ldr	r3, [r0, #32]
 800e108:	b90b      	cbnz	r3, 800e10e <_fflush_r+0x1a>
 800e10a:	f7ff fd1f 	bl	800db4c <__sinit>
 800e10e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d0f3      	beq.n	800e0fe <_fflush_r+0xa>
 800e116:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e118:	07d0      	lsls	r0, r2, #31
 800e11a:	d404      	bmi.n	800e126 <_fflush_r+0x32>
 800e11c:	0599      	lsls	r1, r3, #22
 800e11e:	d402      	bmi.n	800e126 <_fflush_r+0x32>
 800e120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e122:	f7ff fe42 	bl	800ddaa <__retarget_lock_acquire_recursive>
 800e126:	4628      	mov	r0, r5
 800e128:	4621      	mov	r1, r4
 800e12a:	f7ff ff5f 	bl	800dfec <__sflush_r>
 800e12e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e130:	07da      	lsls	r2, r3, #31
 800e132:	4605      	mov	r5, r0
 800e134:	d4e4      	bmi.n	800e100 <_fflush_r+0xc>
 800e136:	89a3      	ldrh	r3, [r4, #12]
 800e138:	059b      	lsls	r3, r3, #22
 800e13a:	d4e1      	bmi.n	800e100 <_fflush_r+0xc>
 800e13c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e13e:	f7ff fe35 	bl	800ddac <__retarget_lock_release_recursive>
 800e142:	e7dd      	b.n	800e100 <_fflush_r+0xc>

0800e144 <fiprintf>:
 800e144:	b40e      	push	{r1, r2, r3}
 800e146:	b503      	push	{r0, r1, lr}
 800e148:	4601      	mov	r1, r0
 800e14a:	ab03      	add	r3, sp, #12
 800e14c:	4805      	ldr	r0, [pc, #20]	@ (800e164 <fiprintf+0x20>)
 800e14e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e152:	6800      	ldr	r0, [r0, #0]
 800e154:	9301      	str	r3, [sp, #4]
 800e156:	f000 f847 	bl	800e1e8 <_vfiprintf_r>
 800e15a:	b002      	add	sp, #8
 800e15c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e160:	b003      	add	sp, #12
 800e162:	4770      	bx	lr
 800e164:	20000048 	.word	0x20000048

0800e168 <_sbrk_r>:
 800e168:	b538      	push	{r3, r4, r5, lr}
 800e16a:	4d06      	ldr	r5, [pc, #24]	@ (800e184 <_sbrk_r+0x1c>)
 800e16c:	2300      	movs	r3, #0
 800e16e:	4604      	mov	r4, r0
 800e170:	4608      	mov	r0, r1
 800e172:	602b      	str	r3, [r5, #0]
 800e174:	f7f3 f89a 	bl	80012ac <_sbrk>
 800e178:	1c43      	adds	r3, r0, #1
 800e17a:	d102      	bne.n	800e182 <_sbrk_r+0x1a>
 800e17c:	682b      	ldr	r3, [r5, #0]
 800e17e:	b103      	cbz	r3, 800e182 <_sbrk_r+0x1a>
 800e180:	6023      	str	r3, [r4, #0]
 800e182:	bd38      	pop	{r3, r4, r5, pc}
 800e184:	200012b0 	.word	0x200012b0

0800e188 <abort>:
 800e188:	b508      	push	{r3, lr}
 800e18a:	2006      	movs	r0, #6
 800e18c:	f000 fb8e 	bl	800e8ac <raise>
 800e190:	2001      	movs	r0, #1
 800e192:	f7f3 f85b 	bl	800124c <_exit>

0800e196 <__sfputc_r>:
 800e196:	6893      	ldr	r3, [r2, #8]
 800e198:	3b01      	subs	r3, #1
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	b410      	push	{r4}
 800e19e:	6093      	str	r3, [r2, #8]
 800e1a0:	da08      	bge.n	800e1b4 <__sfputc_r+0x1e>
 800e1a2:	6994      	ldr	r4, [r2, #24]
 800e1a4:	42a3      	cmp	r3, r4
 800e1a6:	db01      	blt.n	800e1ac <__sfputc_r+0x16>
 800e1a8:	290a      	cmp	r1, #10
 800e1aa:	d103      	bne.n	800e1b4 <__sfputc_r+0x1e>
 800e1ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1b0:	f000 bac0 	b.w	800e734 <__swbuf_r>
 800e1b4:	6813      	ldr	r3, [r2, #0]
 800e1b6:	1c58      	adds	r0, r3, #1
 800e1b8:	6010      	str	r0, [r2, #0]
 800e1ba:	7019      	strb	r1, [r3, #0]
 800e1bc:	4608      	mov	r0, r1
 800e1be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1c2:	4770      	bx	lr

0800e1c4 <__sfputs_r>:
 800e1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1c6:	4606      	mov	r6, r0
 800e1c8:	460f      	mov	r7, r1
 800e1ca:	4614      	mov	r4, r2
 800e1cc:	18d5      	adds	r5, r2, r3
 800e1ce:	42ac      	cmp	r4, r5
 800e1d0:	d101      	bne.n	800e1d6 <__sfputs_r+0x12>
 800e1d2:	2000      	movs	r0, #0
 800e1d4:	e007      	b.n	800e1e6 <__sfputs_r+0x22>
 800e1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1da:	463a      	mov	r2, r7
 800e1dc:	4630      	mov	r0, r6
 800e1de:	f7ff ffda 	bl	800e196 <__sfputc_r>
 800e1e2:	1c43      	adds	r3, r0, #1
 800e1e4:	d1f3      	bne.n	800e1ce <__sfputs_r+0xa>
 800e1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e1e8 <_vfiprintf_r>:
 800e1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ec:	460d      	mov	r5, r1
 800e1ee:	b09d      	sub	sp, #116	@ 0x74
 800e1f0:	4614      	mov	r4, r2
 800e1f2:	4698      	mov	r8, r3
 800e1f4:	4606      	mov	r6, r0
 800e1f6:	b118      	cbz	r0, 800e200 <_vfiprintf_r+0x18>
 800e1f8:	6a03      	ldr	r3, [r0, #32]
 800e1fa:	b90b      	cbnz	r3, 800e200 <_vfiprintf_r+0x18>
 800e1fc:	f7ff fca6 	bl	800db4c <__sinit>
 800e200:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e202:	07d9      	lsls	r1, r3, #31
 800e204:	d405      	bmi.n	800e212 <_vfiprintf_r+0x2a>
 800e206:	89ab      	ldrh	r3, [r5, #12]
 800e208:	059a      	lsls	r2, r3, #22
 800e20a:	d402      	bmi.n	800e212 <_vfiprintf_r+0x2a>
 800e20c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e20e:	f7ff fdcc 	bl	800ddaa <__retarget_lock_acquire_recursive>
 800e212:	89ab      	ldrh	r3, [r5, #12]
 800e214:	071b      	lsls	r3, r3, #28
 800e216:	d501      	bpl.n	800e21c <_vfiprintf_r+0x34>
 800e218:	692b      	ldr	r3, [r5, #16]
 800e21a:	b99b      	cbnz	r3, 800e244 <_vfiprintf_r+0x5c>
 800e21c:	4629      	mov	r1, r5
 800e21e:	4630      	mov	r0, r6
 800e220:	f000 fac6 	bl	800e7b0 <__swsetup_r>
 800e224:	b170      	cbz	r0, 800e244 <_vfiprintf_r+0x5c>
 800e226:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e228:	07dc      	lsls	r4, r3, #31
 800e22a:	d504      	bpl.n	800e236 <_vfiprintf_r+0x4e>
 800e22c:	f04f 30ff 	mov.w	r0, #4294967295
 800e230:	b01d      	add	sp, #116	@ 0x74
 800e232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e236:	89ab      	ldrh	r3, [r5, #12]
 800e238:	0598      	lsls	r0, r3, #22
 800e23a:	d4f7      	bmi.n	800e22c <_vfiprintf_r+0x44>
 800e23c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e23e:	f7ff fdb5 	bl	800ddac <__retarget_lock_release_recursive>
 800e242:	e7f3      	b.n	800e22c <_vfiprintf_r+0x44>
 800e244:	2300      	movs	r3, #0
 800e246:	9309      	str	r3, [sp, #36]	@ 0x24
 800e248:	2320      	movs	r3, #32
 800e24a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e24e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e252:	2330      	movs	r3, #48	@ 0x30
 800e254:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e404 <_vfiprintf_r+0x21c>
 800e258:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e25c:	f04f 0901 	mov.w	r9, #1
 800e260:	4623      	mov	r3, r4
 800e262:	469a      	mov	sl, r3
 800e264:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e268:	b10a      	cbz	r2, 800e26e <_vfiprintf_r+0x86>
 800e26a:	2a25      	cmp	r2, #37	@ 0x25
 800e26c:	d1f9      	bne.n	800e262 <_vfiprintf_r+0x7a>
 800e26e:	ebba 0b04 	subs.w	fp, sl, r4
 800e272:	d00b      	beq.n	800e28c <_vfiprintf_r+0xa4>
 800e274:	465b      	mov	r3, fp
 800e276:	4622      	mov	r2, r4
 800e278:	4629      	mov	r1, r5
 800e27a:	4630      	mov	r0, r6
 800e27c:	f7ff ffa2 	bl	800e1c4 <__sfputs_r>
 800e280:	3001      	adds	r0, #1
 800e282:	f000 80a7 	beq.w	800e3d4 <_vfiprintf_r+0x1ec>
 800e286:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e288:	445a      	add	r2, fp
 800e28a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e28c:	f89a 3000 	ldrb.w	r3, [sl]
 800e290:	2b00      	cmp	r3, #0
 800e292:	f000 809f 	beq.w	800e3d4 <_vfiprintf_r+0x1ec>
 800e296:	2300      	movs	r3, #0
 800e298:	f04f 32ff 	mov.w	r2, #4294967295
 800e29c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2a0:	f10a 0a01 	add.w	sl, sl, #1
 800e2a4:	9304      	str	r3, [sp, #16]
 800e2a6:	9307      	str	r3, [sp, #28]
 800e2a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e2ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800e2ae:	4654      	mov	r4, sl
 800e2b0:	2205      	movs	r2, #5
 800e2b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2b6:	4853      	ldr	r0, [pc, #332]	@ (800e404 <_vfiprintf_r+0x21c>)
 800e2b8:	f7f2 f82a 	bl	8000310 <memchr>
 800e2bc:	9a04      	ldr	r2, [sp, #16]
 800e2be:	b9d8      	cbnz	r0, 800e2f8 <_vfiprintf_r+0x110>
 800e2c0:	06d1      	lsls	r1, r2, #27
 800e2c2:	bf44      	itt	mi
 800e2c4:	2320      	movmi	r3, #32
 800e2c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2ca:	0713      	lsls	r3, r2, #28
 800e2cc:	bf44      	itt	mi
 800e2ce:	232b      	movmi	r3, #43	@ 0x2b
 800e2d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2d4:	f89a 3000 	ldrb.w	r3, [sl]
 800e2d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2da:	d015      	beq.n	800e308 <_vfiprintf_r+0x120>
 800e2dc:	9a07      	ldr	r2, [sp, #28]
 800e2de:	4654      	mov	r4, sl
 800e2e0:	2000      	movs	r0, #0
 800e2e2:	f04f 0c0a 	mov.w	ip, #10
 800e2e6:	4621      	mov	r1, r4
 800e2e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2ec:	3b30      	subs	r3, #48	@ 0x30
 800e2ee:	2b09      	cmp	r3, #9
 800e2f0:	d94b      	bls.n	800e38a <_vfiprintf_r+0x1a2>
 800e2f2:	b1b0      	cbz	r0, 800e322 <_vfiprintf_r+0x13a>
 800e2f4:	9207      	str	r2, [sp, #28]
 800e2f6:	e014      	b.n	800e322 <_vfiprintf_r+0x13a>
 800e2f8:	eba0 0308 	sub.w	r3, r0, r8
 800e2fc:	fa09 f303 	lsl.w	r3, r9, r3
 800e300:	4313      	orrs	r3, r2
 800e302:	9304      	str	r3, [sp, #16]
 800e304:	46a2      	mov	sl, r4
 800e306:	e7d2      	b.n	800e2ae <_vfiprintf_r+0xc6>
 800e308:	9b03      	ldr	r3, [sp, #12]
 800e30a:	1d19      	adds	r1, r3, #4
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	9103      	str	r1, [sp, #12]
 800e310:	2b00      	cmp	r3, #0
 800e312:	bfbb      	ittet	lt
 800e314:	425b      	neglt	r3, r3
 800e316:	f042 0202 	orrlt.w	r2, r2, #2
 800e31a:	9307      	strge	r3, [sp, #28]
 800e31c:	9307      	strlt	r3, [sp, #28]
 800e31e:	bfb8      	it	lt
 800e320:	9204      	strlt	r2, [sp, #16]
 800e322:	7823      	ldrb	r3, [r4, #0]
 800e324:	2b2e      	cmp	r3, #46	@ 0x2e
 800e326:	d10a      	bne.n	800e33e <_vfiprintf_r+0x156>
 800e328:	7863      	ldrb	r3, [r4, #1]
 800e32a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e32c:	d132      	bne.n	800e394 <_vfiprintf_r+0x1ac>
 800e32e:	9b03      	ldr	r3, [sp, #12]
 800e330:	1d1a      	adds	r2, r3, #4
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	9203      	str	r2, [sp, #12]
 800e336:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e33a:	3402      	adds	r4, #2
 800e33c:	9305      	str	r3, [sp, #20]
 800e33e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e414 <_vfiprintf_r+0x22c>
 800e342:	7821      	ldrb	r1, [r4, #0]
 800e344:	2203      	movs	r2, #3
 800e346:	4650      	mov	r0, sl
 800e348:	f7f1 ffe2 	bl	8000310 <memchr>
 800e34c:	b138      	cbz	r0, 800e35e <_vfiprintf_r+0x176>
 800e34e:	9b04      	ldr	r3, [sp, #16]
 800e350:	eba0 000a 	sub.w	r0, r0, sl
 800e354:	2240      	movs	r2, #64	@ 0x40
 800e356:	4082      	lsls	r2, r0
 800e358:	4313      	orrs	r3, r2
 800e35a:	3401      	adds	r4, #1
 800e35c:	9304      	str	r3, [sp, #16]
 800e35e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e362:	4829      	ldr	r0, [pc, #164]	@ (800e408 <_vfiprintf_r+0x220>)
 800e364:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e368:	2206      	movs	r2, #6
 800e36a:	f7f1 ffd1 	bl	8000310 <memchr>
 800e36e:	2800      	cmp	r0, #0
 800e370:	d03f      	beq.n	800e3f2 <_vfiprintf_r+0x20a>
 800e372:	4b26      	ldr	r3, [pc, #152]	@ (800e40c <_vfiprintf_r+0x224>)
 800e374:	bb1b      	cbnz	r3, 800e3be <_vfiprintf_r+0x1d6>
 800e376:	9b03      	ldr	r3, [sp, #12]
 800e378:	3307      	adds	r3, #7
 800e37a:	f023 0307 	bic.w	r3, r3, #7
 800e37e:	3308      	adds	r3, #8
 800e380:	9303      	str	r3, [sp, #12]
 800e382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e384:	443b      	add	r3, r7
 800e386:	9309      	str	r3, [sp, #36]	@ 0x24
 800e388:	e76a      	b.n	800e260 <_vfiprintf_r+0x78>
 800e38a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e38e:	460c      	mov	r4, r1
 800e390:	2001      	movs	r0, #1
 800e392:	e7a8      	b.n	800e2e6 <_vfiprintf_r+0xfe>
 800e394:	2300      	movs	r3, #0
 800e396:	3401      	adds	r4, #1
 800e398:	9305      	str	r3, [sp, #20]
 800e39a:	4619      	mov	r1, r3
 800e39c:	f04f 0c0a 	mov.w	ip, #10
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3a6:	3a30      	subs	r2, #48	@ 0x30
 800e3a8:	2a09      	cmp	r2, #9
 800e3aa:	d903      	bls.n	800e3b4 <_vfiprintf_r+0x1cc>
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d0c6      	beq.n	800e33e <_vfiprintf_r+0x156>
 800e3b0:	9105      	str	r1, [sp, #20]
 800e3b2:	e7c4      	b.n	800e33e <_vfiprintf_r+0x156>
 800e3b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3b8:	4604      	mov	r4, r0
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	e7f0      	b.n	800e3a0 <_vfiprintf_r+0x1b8>
 800e3be:	ab03      	add	r3, sp, #12
 800e3c0:	9300      	str	r3, [sp, #0]
 800e3c2:	462a      	mov	r2, r5
 800e3c4:	4b12      	ldr	r3, [pc, #72]	@ (800e410 <_vfiprintf_r+0x228>)
 800e3c6:	a904      	add	r1, sp, #16
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	f3af 8000 	nop.w
 800e3ce:	4607      	mov	r7, r0
 800e3d0:	1c78      	adds	r0, r7, #1
 800e3d2:	d1d6      	bne.n	800e382 <_vfiprintf_r+0x19a>
 800e3d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3d6:	07d9      	lsls	r1, r3, #31
 800e3d8:	d405      	bmi.n	800e3e6 <_vfiprintf_r+0x1fe>
 800e3da:	89ab      	ldrh	r3, [r5, #12]
 800e3dc:	059a      	lsls	r2, r3, #22
 800e3de:	d402      	bmi.n	800e3e6 <_vfiprintf_r+0x1fe>
 800e3e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3e2:	f7ff fce3 	bl	800ddac <__retarget_lock_release_recursive>
 800e3e6:	89ab      	ldrh	r3, [r5, #12]
 800e3e8:	065b      	lsls	r3, r3, #25
 800e3ea:	f53f af1f 	bmi.w	800e22c <_vfiprintf_r+0x44>
 800e3ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e3f0:	e71e      	b.n	800e230 <_vfiprintf_r+0x48>
 800e3f2:	ab03      	add	r3, sp, #12
 800e3f4:	9300      	str	r3, [sp, #0]
 800e3f6:	462a      	mov	r2, r5
 800e3f8:	4b05      	ldr	r3, [pc, #20]	@ (800e410 <_vfiprintf_r+0x228>)
 800e3fa:	a904      	add	r1, sp, #16
 800e3fc:	4630      	mov	r0, r6
 800e3fe:	f000 f879 	bl	800e4f4 <_printf_i>
 800e402:	e7e4      	b.n	800e3ce <_vfiprintf_r+0x1e6>
 800e404:	08010890 	.word	0x08010890
 800e408:	0801089a 	.word	0x0801089a
 800e40c:	00000000 	.word	0x00000000
 800e410:	0800e1c5 	.word	0x0800e1c5
 800e414:	08010896 	.word	0x08010896

0800e418 <_printf_common>:
 800e418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e41c:	4616      	mov	r6, r2
 800e41e:	4698      	mov	r8, r3
 800e420:	688a      	ldr	r2, [r1, #8]
 800e422:	690b      	ldr	r3, [r1, #16]
 800e424:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e428:	4293      	cmp	r3, r2
 800e42a:	bfb8      	it	lt
 800e42c:	4613      	movlt	r3, r2
 800e42e:	6033      	str	r3, [r6, #0]
 800e430:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e434:	4607      	mov	r7, r0
 800e436:	460c      	mov	r4, r1
 800e438:	b10a      	cbz	r2, 800e43e <_printf_common+0x26>
 800e43a:	3301      	adds	r3, #1
 800e43c:	6033      	str	r3, [r6, #0]
 800e43e:	6823      	ldr	r3, [r4, #0]
 800e440:	0699      	lsls	r1, r3, #26
 800e442:	bf42      	ittt	mi
 800e444:	6833      	ldrmi	r3, [r6, #0]
 800e446:	3302      	addmi	r3, #2
 800e448:	6033      	strmi	r3, [r6, #0]
 800e44a:	6825      	ldr	r5, [r4, #0]
 800e44c:	f015 0506 	ands.w	r5, r5, #6
 800e450:	d106      	bne.n	800e460 <_printf_common+0x48>
 800e452:	f104 0a19 	add.w	sl, r4, #25
 800e456:	68e3      	ldr	r3, [r4, #12]
 800e458:	6832      	ldr	r2, [r6, #0]
 800e45a:	1a9b      	subs	r3, r3, r2
 800e45c:	42ab      	cmp	r3, r5
 800e45e:	dc26      	bgt.n	800e4ae <_printf_common+0x96>
 800e460:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e464:	6822      	ldr	r2, [r4, #0]
 800e466:	3b00      	subs	r3, #0
 800e468:	bf18      	it	ne
 800e46a:	2301      	movne	r3, #1
 800e46c:	0692      	lsls	r2, r2, #26
 800e46e:	d42b      	bmi.n	800e4c8 <_printf_common+0xb0>
 800e470:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e474:	4641      	mov	r1, r8
 800e476:	4638      	mov	r0, r7
 800e478:	47c8      	blx	r9
 800e47a:	3001      	adds	r0, #1
 800e47c:	d01e      	beq.n	800e4bc <_printf_common+0xa4>
 800e47e:	6823      	ldr	r3, [r4, #0]
 800e480:	6922      	ldr	r2, [r4, #16]
 800e482:	f003 0306 	and.w	r3, r3, #6
 800e486:	2b04      	cmp	r3, #4
 800e488:	bf02      	ittt	eq
 800e48a:	68e5      	ldreq	r5, [r4, #12]
 800e48c:	6833      	ldreq	r3, [r6, #0]
 800e48e:	1aed      	subeq	r5, r5, r3
 800e490:	68a3      	ldr	r3, [r4, #8]
 800e492:	bf0c      	ite	eq
 800e494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e498:	2500      	movne	r5, #0
 800e49a:	4293      	cmp	r3, r2
 800e49c:	bfc4      	itt	gt
 800e49e:	1a9b      	subgt	r3, r3, r2
 800e4a0:	18ed      	addgt	r5, r5, r3
 800e4a2:	2600      	movs	r6, #0
 800e4a4:	341a      	adds	r4, #26
 800e4a6:	42b5      	cmp	r5, r6
 800e4a8:	d11a      	bne.n	800e4e0 <_printf_common+0xc8>
 800e4aa:	2000      	movs	r0, #0
 800e4ac:	e008      	b.n	800e4c0 <_printf_common+0xa8>
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	4652      	mov	r2, sl
 800e4b2:	4641      	mov	r1, r8
 800e4b4:	4638      	mov	r0, r7
 800e4b6:	47c8      	blx	r9
 800e4b8:	3001      	adds	r0, #1
 800e4ba:	d103      	bne.n	800e4c4 <_printf_common+0xac>
 800e4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4c4:	3501      	adds	r5, #1
 800e4c6:	e7c6      	b.n	800e456 <_printf_common+0x3e>
 800e4c8:	18e1      	adds	r1, r4, r3
 800e4ca:	1c5a      	adds	r2, r3, #1
 800e4cc:	2030      	movs	r0, #48	@ 0x30
 800e4ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e4d2:	4422      	add	r2, r4
 800e4d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e4d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e4dc:	3302      	adds	r3, #2
 800e4de:	e7c7      	b.n	800e470 <_printf_common+0x58>
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	4622      	mov	r2, r4
 800e4e4:	4641      	mov	r1, r8
 800e4e6:	4638      	mov	r0, r7
 800e4e8:	47c8      	blx	r9
 800e4ea:	3001      	adds	r0, #1
 800e4ec:	d0e6      	beq.n	800e4bc <_printf_common+0xa4>
 800e4ee:	3601      	adds	r6, #1
 800e4f0:	e7d9      	b.n	800e4a6 <_printf_common+0x8e>
	...

0800e4f4 <_printf_i>:
 800e4f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4f8:	7e0f      	ldrb	r7, [r1, #24]
 800e4fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e4fc:	2f78      	cmp	r7, #120	@ 0x78
 800e4fe:	4691      	mov	r9, r2
 800e500:	4680      	mov	r8, r0
 800e502:	460c      	mov	r4, r1
 800e504:	469a      	mov	sl, r3
 800e506:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e50a:	d807      	bhi.n	800e51c <_printf_i+0x28>
 800e50c:	2f62      	cmp	r7, #98	@ 0x62
 800e50e:	d80a      	bhi.n	800e526 <_printf_i+0x32>
 800e510:	2f00      	cmp	r7, #0
 800e512:	f000 80d2 	beq.w	800e6ba <_printf_i+0x1c6>
 800e516:	2f58      	cmp	r7, #88	@ 0x58
 800e518:	f000 80b9 	beq.w	800e68e <_printf_i+0x19a>
 800e51c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e520:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e524:	e03a      	b.n	800e59c <_printf_i+0xa8>
 800e526:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e52a:	2b15      	cmp	r3, #21
 800e52c:	d8f6      	bhi.n	800e51c <_printf_i+0x28>
 800e52e:	a101      	add	r1, pc, #4	@ (adr r1, 800e534 <_printf_i+0x40>)
 800e530:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e534:	0800e58d 	.word	0x0800e58d
 800e538:	0800e5a1 	.word	0x0800e5a1
 800e53c:	0800e51d 	.word	0x0800e51d
 800e540:	0800e51d 	.word	0x0800e51d
 800e544:	0800e51d 	.word	0x0800e51d
 800e548:	0800e51d 	.word	0x0800e51d
 800e54c:	0800e5a1 	.word	0x0800e5a1
 800e550:	0800e51d 	.word	0x0800e51d
 800e554:	0800e51d 	.word	0x0800e51d
 800e558:	0800e51d 	.word	0x0800e51d
 800e55c:	0800e51d 	.word	0x0800e51d
 800e560:	0800e6a1 	.word	0x0800e6a1
 800e564:	0800e5cb 	.word	0x0800e5cb
 800e568:	0800e65b 	.word	0x0800e65b
 800e56c:	0800e51d 	.word	0x0800e51d
 800e570:	0800e51d 	.word	0x0800e51d
 800e574:	0800e6c3 	.word	0x0800e6c3
 800e578:	0800e51d 	.word	0x0800e51d
 800e57c:	0800e5cb 	.word	0x0800e5cb
 800e580:	0800e51d 	.word	0x0800e51d
 800e584:	0800e51d 	.word	0x0800e51d
 800e588:	0800e663 	.word	0x0800e663
 800e58c:	6833      	ldr	r3, [r6, #0]
 800e58e:	1d1a      	adds	r2, r3, #4
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	6032      	str	r2, [r6, #0]
 800e594:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e598:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e59c:	2301      	movs	r3, #1
 800e59e:	e09d      	b.n	800e6dc <_printf_i+0x1e8>
 800e5a0:	6833      	ldr	r3, [r6, #0]
 800e5a2:	6820      	ldr	r0, [r4, #0]
 800e5a4:	1d19      	adds	r1, r3, #4
 800e5a6:	6031      	str	r1, [r6, #0]
 800e5a8:	0606      	lsls	r6, r0, #24
 800e5aa:	d501      	bpl.n	800e5b0 <_printf_i+0xbc>
 800e5ac:	681d      	ldr	r5, [r3, #0]
 800e5ae:	e003      	b.n	800e5b8 <_printf_i+0xc4>
 800e5b0:	0645      	lsls	r5, r0, #25
 800e5b2:	d5fb      	bpl.n	800e5ac <_printf_i+0xb8>
 800e5b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e5b8:	2d00      	cmp	r5, #0
 800e5ba:	da03      	bge.n	800e5c4 <_printf_i+0xd0>
 800e5bc:	232d      	movs	r3, #45	@ 0x2d
 800e5be:	426d      	negs	r5, r5
 800e5c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5c4:	4859      	ldr	r0, [pc, #356]	@ (800e72c <_printf_i+0x238>)
 800e5c6:	230a      	movs	r3, #10
 800e5c8:	e011      	b.n	800e5ee <_printf_i+0xfa>
 800e5ca:	6821      	ldr	r1, [r4, #0]
 800e5cc:	6833      	ldr	r3, [r6, #0]
 800e5ce:	0608      	lsls	r0, r1, #24
 800e5d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800e5d4:	d402      	bmi.n	800e5dc <_printf_i+0xe8>
 800e5d6:	0649      	lsls	r1, r1, #25
 800e5d8:	bf48      	it	mi
 800e5da:	b2ad      	uxthmi	r5, r5
 800e5dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800e5de:	4853      	ldr	r0, [pc, #332]	@ (800e72c <_printf_i+0x238>)
 800e5e0:	6033      	str	r3, [r6, #0]
 800e5e2:	bf14      	ite	ne
 800e5e4:	230a      	movne	r3, #10
 800e5e6:	2308      	moveq	r3, #8
 800e5e8:	2100      	movs	r1, #0
 800e5ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e5ee:	6866      	ldr	r6, [r4, #4]
 800e5f0:	60a6      	str	r6, [r4, #8]
 800e5f2:	2e00      	cmp	r6, #0
 800e5f4:	bfa2      	ittt	ge
 800e5f6:	6821      	ldrge	r1, [r4, #0]
 800e5f8:	f021 0104 	bicge.w	r1, r1, #4
 800e5fc:	6021      	strge	r1, [r4, #0]
 800e5fe:	b90d      	cbnz	r5, 800e604 <_printf_i+0x110>
 800e600:	2e00      	cmp	r6, #0
 800e602:	d04b      	beq.n	800e69c <_printf_i+0x1a8>
 800e604:	4616      	mov	r6, r2
 800e606:	fbb5 f1f3 	udiv	r1, r5, r3
 800e60a:	fb03 5711 	mls	r7, r3, r1, r5
 800e60e:	5dc7      	ldrb	r7, [r0, r7]
 800e610:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e614:	462f      	mov	r7, r5
 800e616:	42bb      	cmp	r3, r7
 800e618:	460d      	mov	r5, r1
 800e61a:	d9f4      	bls.n	800e606 <_printf_i+0x112>
 800e61c:	2b08      	cmp	r3, #8
 800e61e:	d10b      	bne.n	800e638 <_printf_i+0x144>
 800e620:	6823      	ldr	r3, [r4, #0]
 800e622:	07df      	lsls	r7, r3, #31
 800e624:	d508      	bpl.n	800e638 <_printf_i+0x144>
 800e626:	6923      	ldr	r3, [r4, #16]
 800e628:	6861      	ldr	r1, [r4, #4]
 800e62a:	4299      	cmp	r1, r3
 800e62c:	bfde      	ittt	le
 800e62e:	2330      	movle	r3, #48	@ 0x30
 800e630:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e634:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e638:	1b92      	subs	r2, r2, r6
 800e63a:	6122      	str	r2, [r4, #16]
 800e63c:	f8cd a000 	str.w	sl, [sp]
 800e640:	464b      	mov	r3, r9
 800e642:	aa03      	add	r2, sp, #12
 800e644:	4621      	mov	r1, r4
 800e646:	4640      	mov	r0, r8
 800e648:	f7ff fee6 	bl	800e418 <_printf_common>
 800e64c:	3001      	adds	r0, #1
 800e64e:	d14a      	bne.n	800e6e6 <_printf_i+0x1f2>
 800e650:	f04f 30ff 	mov.w	r0, #4294967295
 800e654:	b004      	add	sp, #16
 800e656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e65a:	6823      	ldr	r3, [r4, #0]
 800e65c:	f043 0320 	orr.w	r3, r3, #32
 800e660:	6023      	str	r3, [r4, #0]
 800e662:	4833      	ldr	r0, [pc, #204]	@ (800e730 <_printf_i+0x23c>)
 800e664:	2778      	movs	r7, #120	@ 0x78
 800e666:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e66a:	6823      	ldr	r3, [r4, #0]
 800e66c:	6831      	ldr	r1, [r6, #0]
 800e66e:	061f      	lsls	r7, r3, #24
 800e670:	f851 5b04 	ldr.w	r5, [r1], #4
 800e674:	d402      	bmi.n	800e67c <_printf_i+0x188>
 800e676:	065f      	lsls	r7, r3, #25
 800e678:	bf48      	it	mi
 800e67a:	b2ad      	uxthmi	r5, r5
 800e67c:	6031      	str	r1, [r6, #0]
 800e67e:	07d9      	lsls	r1, r3, #31
 800e680:	bf44      	itt	mi
 800e682:	f043 0320 	orrmi.w	r3, r3, #32
 800e686:	6023      	strmi	r3, [r4, #0]
 800e688:	b11d      	cbz	r5, 800e692 <_printf_i+0x19e>
 800e68a:	2310      	movs	r3, #16
 800e68c:	e7ac      	b.n	800e5e8 <_printf_i+0xf4>
 800e68e:	4827      	ldr	r0, [pc, #156]	@ (800e72c <_printf_i+0x238>)
 800e690:	e7e9      	b.n	800e666 <_printf_i+0x172>
 800e692:	6823      	ldr	r3, [r4, #0]
 800e694:	f023 0320 	bic.w	r3, r3, #32
 800e698:	6023      	str	r3, [r4, #0]
 800e69a:	e7f6      	b.n	800e68a <_printf_i+0x196>
 800e69c:	4616      	mov	r6, r2
 800e69e:	e7bd      	b.n	800e61c <_printf_i+0x128>
 800e6a0:	6833      	ldr	r3, [r6, #0]
 800e6a2:	6825      	ldr	r5, [r4, #0]
 800e6a4:	6961      	ldr	r1, [r4, #20]
 800e6a6:	1d18      	adds	r0, r3, #4
 800e6a8:	6030      	str	r0, [r6, #0]
 800e6aa:	062e      	lsls	r6, r5, #24
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	d501      	bpl.n	800e6b4 <_printf_i+0x1c0>
 800e6b0:	6019      	str	r1, [r3, #0]
 800e6b2:	e002      	b.n	800e6ba <_printf_i+0x1c6>
 800e6b4:	0668      	lsls	r0, r5, #25
 800e6b6:	d5fb      	bpl.n	800e6b0 <_printf_i+0x1bc>
 800e6b8:	8019      	strh	r1, [r3, #0]
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	6123      	str	r3, [r4, #16]
 800e6be:	4616      	mov	r6, r2
 800e6c0:	e7bc      	b.n	800e63c <_printf_i+0x148>
 800e6c2:	6833      	ldr	r3, [r6, #0]
 800e6c4:	1d1a      	adds	r2, r3, #4
 800e6c6:	6032      	str	r2, [r6, #0]
 800e6c8:	681e      	ldr	r6, [r3, #0]
 800e6ca:	6862      	ldr	r2, [r4, #4]
 800e6cc:	2100      	movs	r1, #0
 800e6ce:	4630      	mov	r0, r6
 800e6d0:	f7f1 fe1e 	bl	8000310 <memchr>
 800e6d4:	b108      	cbz	r0, 800e6da <_printf_i+0x1e6>
 800e6d6:	1b80      	subs	r0, r0, r6
 800e6d8:	6060      	str	r0, [r4, #4]
 800e6da:	6863      	ldr	r3, [r4, #4]
 800e6dc:	6123      	str	r3, [r4, #16]
 800e6de:	2300      	movs	r3, #0
 800e6e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e6e4:	e7aa      	b.n	800e63c <_printf_i+0x148>
 800e6e6:	6923      	ldr	r3, [r4, #16]
 800e6e8:	4632      	mov	r2, r6
 800e6ea:	4649      	mov	r1, r9
 800e6ec:	4640      	mov	r0, r8
 800e6ee:	47d0      	blx	sl
 800e6f0:	3001      	adds	r0, #1
 800e6f2:	d0ad      	beq.n	800e650 <_printf_i+0x15c>
 800e6f4:	6823      	ldr	r3, [r4, #0]
 800e6f6:	079b      	lsls	r3, r3, #30
 800e6f8:	d413      	bmi.n	800e722 <_printf_i+0x22e>
 800e6fa:	68e0      	ldr	r0, [r4, #12]
 800e6fc:	9b03      	ldr	r3, [sp, #12]
 800e6fe:	4298      	cmp	r0, r3
 800e700:	bfb8      	it	lt
 800e702:	4618      	movlt	r0, r3
 800e704:	e7a6      	b.n	800e654 <_printf_i+0x160>
 800e706:	2301      	movs	r3, #1
 800e708:	4632      	mov	r2, r6
 800e70a:	4649      	mov	r1, r9
 800e70c:	4640      	mov	r0, r8
 800e70e:	47d0      	blx	sl
 800e710:	3001      	adds	r0, #1
 800e712:	d09d      	beq.n	800e650 <_printf_i+0x15c>
 800e714:	3501      	adds	r5, #1
 800e716:	68e3      	ldr	r3, [r4, #12]
 800e718:	9903      	ldr	r1, [sp, #12]
 800e71a:	1a5b      	subs	r3, r3, r1
 800e71c:	42ab      	cmp	r3, r5
 800e71e:	dcf2      	bgt.n	800e706 <_printf_i+0x212>
 800e720:	e7eb      	b.n	800e6fa <_printf_i+0x206>
 800e722:	2500      	movs	r5, #0
 800e724:	f104 0619 	add.w	r6, r4, #25
 800e728:	e7f5      	b.n	800e716 <_printf_i+0x222>
 800e72a:	bf00      	nop
 800e72c:	080108a1 	.word	0x080108a1
 800e730:	080108b2 	.word	0x080108b2

0800e734 <__swbuf_r>:
 800e734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e736:	460e      	mov	r6, r1
 800e738:	4614      	mov	r4, r2
 800e73a:	4605      	mov	r5, r0
 800e73c:	b118      	cbz	r0, 800e746 <__swbuf_r+0x12>
 800e73e:	6a03      	ldr	r3, [r0, #32]
 800e740:	b90b      	cbnz	r3, 800e746 <__swbuf_r+0x12>
 800e742:	f7ff fa03 	bl	800db4c <__sinit>
 800e746:	69a3      	ldr	r3, [r4, #24]
 800e748:	60a3      	str	r3, [r4, #8]
 800e74a:	89a3      	ldrh	r3, [r4, #12]
 800e74c:	071a      	lsls	r2, r3, #28
 800e74e:	d501      	bpl.n	800e754 <__swbuf_r+0x20>
 800e750:	6923      	ldr	r3, [r4, #16]
 800e752:	b943      	cbnz	r3, 800e766 <__swbuf_r+0x32>
 800e754:	4621      	mov	r1, r4
 800e756:	4628      	mov	r0, r5
 800e758:	f000 f82a 	bl	800e7b0 <__swsetup_r>
 800e75c:	b118      	cbz	r0, 800e766 <__swbuf_r+0x32>
 800e75e:	f04f 37ff 	mov.w	r7, #4294967295
 800e762:	4638      	mov	r0, r7
 800e764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e766:	6823      	ldr	r3, [r4, #0]
 800e768:	6922      	ldr	r2, [r4, #16]
 800e76a:	1a98      	subs	r0, r3, r2
 800e76c:	6963      	ldr	r3, [r4, #20]
 800e76e:	b2f6      	uxtb	r6, r6
 800e770:	4283      	cmp	r3, r0
 800e772:	4637      	mov	r7, r6
 800e774:	dc05      	bgt.n	800e782 <__swbuf_r+0x4e>
 800e776:	4621      	mov	r1, r4
 800e778:	4628      	mov	r0, r5
 800e77a:	f7ff fcbb 	bl	800e0f4 <_fflush_r>
 800e77e:	2800      	cmp	r0, #0
 800e780:	d1ed      	bne.n	800e75e <__swbuf_r+0x2a>
 800e782:	68a3      	ldr	r3, [r4, #8]
 800e784:	3b01      	subs	r3, #1
 800e786:	60a3      	str	r3, [r4, #8]
 800e788:	6823      	ldr	r3, [r4, #0]
 800e78a:	1c5a      	adds	r2, r3, #1
 800e78c:	6022      	str	r2, [r4, #0]
 800e78e:	701e      	strb	r6, [r3, #0]
 800e790:	6962      	ldr	r2, [r4, #20]
 800e792:	1c43      	adds	r3, r0, #1
 800e794:	429a      	cmp	r2, r3
 800e796:	d004      	beq.n	800e7a2 <__swbuf_r+0x6e>
 800e798:	89a3      	ldrh	r3, [r4, #12]
 800e79a:	07db      	lsls	r3, r3, #31
 800e79c:	d5e1      	bpl.n	800e762 <__swbuf_r+0x2e>
 800e79e:	2e0a      	cmp	r6, #10
 800e7a0:	d1df      	bne.n	800e762 <__swbuf_r+0x2e>
 800e7a2:	4621      	mov	r1, r4
 800e7a4:	4628      	mov	r0, r5
 800e7a6:	f7ff fca5 	bl	800e0f4 <_fflush_r>
 800e7aa:	2800      	cmp	r0, #0
 800e7ac:	d0d9      	beq.n	800e762 <__swbuf_r+0x2e>
 800e7ae:	e7d6      	b.n	800e75e <__swbuf_r+0x2a>

0800e7b0 <__swsetup_r>:
 800e7b0:	b538      	push	{r3, r4, r5, lr}
 800e7b2:	4b29      	ldr	r3, [pc, #164]	@ (800e858 <__swsetup_r+0xa8>)
 800e7b4:	4605      	mov	r5, r0
 800e7b6:	6818      	ldr	r0, [r3, #0]
 800e7b8:	460c      	mov	r4, r1
 800e7ba:	b118      	cbz	r0, 800e7c4 <__swsetup_r+0x14>
 800e7bc:	6a03      	ldr	r3, [r0, #32]
 800e7be:	b90b      	cbnz	r3, 800e7c4 <__swsetup_r+0x14>
 800e7c0:	f7ff f9c4 	bl	800db4c <__sinit>
 800e7c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7c8:	0719      	lsls	r1, r3, #28
 800e7ca:	d422      	bmi.n	800e812 <__swsetup_r+0x62>
 800e7cc:	06da      	lsls	r2, r3, #27
 800e7ce:	d407      	bmi.n	800e7e0 <__swsetup_r+0x30>
 800e7d0:	2209      	movs	r2, #9
 800e7d2:	602a      	str	r2, [r5, #0]
 800e7d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7d8:	81a3      	strh	r3, [r4, #12]
 800e7da:	f04f 30ff 	mov.w	r0, #4294967295
 800e7de:	e033      	b.n	800e848 <__swsetup_r+0x98>
 800e7e0:	0758      	lsls	r0, r3, #29
 800e7e2:	d512      	bpl.n	800e80a <__swsetup_r+0x5a>
 800e7e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e7e6:	b141      	cbz	r1, 800e7fa <__swsetup_r+0x4a>
 800e7e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e7ec:	4299      	cmp	r1, r3
 800e7ee:	d002      	beq.n	800e7f6 <__swsetup_r+0x46>
 800e7f0:	4628      	mov	r0, r5
 800e7f2:	f7ff fafb 	bl	800ddec <_free_r>
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800e7fa:	89a3      	ldrh	r3, [r4, #12]
 800e7fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e800:	81a3      	strh	r3, [r4, #12]
 800e802:	2300      	movs	r3, #0
 800e804:	6063      	str	r3, [r4, #4]
 800e806:	6923      	ldr	r3, [r4, #16]
 800e808:	6023      	str	r3, [r4, #0]
 800e80a:	89a3      	ldrh	r3, [r4, #12]
 800e80c:	f043 0308 	orr.w	r3, r3, #8
 800e810:	81a3      	strh	r3, [r4, #12]
 800e812:	6923      	ldr	r3, [r4, #16]
 800e814:	b94b      	cbnz	r3, 800e82a <__swsetup_r+0x7a>
 800e816:	89a3      	ldrh	r3, [r4, #12]
 800e818:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e81c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e820:	d003      	beq.n	800e82a <__swsetup_r+0x7a>
 800e822:	4621      	mov	r1, r4
 800e824:	4628      	mov	r0, r5
 800e826:	f000 f883 	bl	800e930 <__smakebuf_r>
 800e82a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e82e:	f013 0201 	ands.w	r2, r3, #1
 800e832:	d00a      	beq.n	800e84a <__swsetup_r+0x9a>
 800e834:	2200      	movs	r2, #0
 800e836:	60a2      	str	r2, [r4, #8]
 800e838:	6962      	ldr	r2, [r4, #20]
 800e83a:	4252      	negs	r2, r2
 800e83c:	61a2      	str	r2, [r4, #24]
 800e83e:	6922      	ldr	r2, [r4, #16]
 800e840:	b942      	cbnz	r2, 800e854 <__swsetup_r+0xa4>
 800e842:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e846:	d1c5      	bne.n	800e7d4 <__swsetup_r+0x24>
 800e848:	bd38      	pop	{r3, r4, r5, pc}
 800e84a:	0799      	lsls	r1, r3, #30
 800e84c:	bf58      	it	pl
 800e84e:	6962      	ldrpl	r2, [r4, #20]
 800e850:	60a2      	str	r2, [r4, #8]
 800e852:	e7f4      	b.n	800e83e <__swsetup_r+0x8e>
 800e854:	2000      	movs	r0, #0
 800e856:	e7f7      	b.n	800e848 <__swsetup_r+0x98>
 800e858:	20000048 	.word	0x20000048

0800e85c <_raise_r>:
 800e85c:	291f      	cmp	r1, #31
 800e85e:	b538      	push	{r3, r4, r5, lr}
 800e860:	4605      	mov	r5, r0
 800e862:	460c      	mov	r4, r1
 800e864:	d904      	bls.n	800e870 <_raise_r+0x14>
 800e866:	2316      	movs	r3, #22
 800e868:	6003      	str	r3, [r0, #0]
 800e86a:	f04f 30ff 	mov.w	r0, #4294967295
 800e86e:	bd38      	pop	{r3, r4, r5, pc}
 800e870:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e872:	b112      	cbz	r2, 800e87a <_raise_r+0x1e>
 800e874:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e878:	b94b      	cbnz	r3, 800e88e <_raise_r+0x32>
 800e87a:	4628      	mov	r0, r5
 800e87c:	f000 f830 	bl	800e8e0 <_getpid_r>
 800e880:	4622      	mov	r2, r4
 800e882:	4601      	mov	r1, r0
 800e884:	4628      	mov	r0, r5
 800e886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e88a:	f000 b817 	b.w	800e8bc <_kill_r>
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d00a      	beq.n	800e8a8 <_raise_r+0x4c>
 800e892:	1c59      	adds	r1, r3, #1
 800e894:	d103      	bne.n	800e89e <_raise_r+0x42>
 800e896:	2316      	movs	r3, #22
 800e898:	6003      	str	r3, [r0, #0]
 800e89a:	2001      	movs	r0, #1
 800e89c:	e7e7      	b.n	800e86e <_raise_r+0x12>
 800e89e:	2100      	movs	r1, #0
 800e8a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e8a4:	4620      	mov	r0, r4
 800e8a6:	4798      	blx	r3
 800e8a8:	2000      	movs	r0, #0
 800e8aa:	e7e0      	b.n	800e86e <_raise_r+0x12>

0800e8ac <raise>:
 800e8ac:	4b02      	ldr	r3, [pc, #8]	@ (800e8b8 <raise+0xc>)
 800e8ae:	4601      	mov	r1, r0
 800e8b0:	6818      	ldr	r0, [r3, #0]
 800e8b2:	f7ff bfd3 	b.w	800e85c <_raise_r>
 800e8b6:	bf00      	nop
 800e8b8:	20000048 	.word	0x20000048

0800e8bc <_kill_r>:
 800e8bc:	b538      	push	{r3, r4, r5, lr}
 800e8be:	4d07      	ldr	r5, [pc, #28]	@ (800e8dc <_kill_r+0x20>)
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	4604      	mov	r4, r0
 800e8c4:	4608      	mov	r0, r1
 800e8c6:	4611      	mov	r1, r2
 800e8c8:	602b      	str	r3, [r5, #0]
 800e8ca:	f7f2 fcb5 	bl	8001238 <_kill>
 800e8ce:	1c43      	adds	r3, r0, #1
 800e8d0:	d102      	bne.n	800e8d8 <_kill_r+0x1c>
 800e8d2:	682b      	ldr	r3, [r5, #0]
 800e8d4:	b103      	cbz	r3, 800e8d8 <_kill_r+0x1c>
 800e8d6:	6023      	str	r3, [r4, #0]
 800e8d8:	bd38      	pop	{r3, r4, r5, pc}
 800e8da:	bf00      	nop
 800e8dc:	200012b0 	.word	0x200012b0

0800e8e0 <_getpid_r>:
 800e8e0:	f7f2 bca8 	b.w	8001234 <_getpid>

0800e8e4 <__swhatbuf_r>:
 800e8e4:	b570      	push	{r4, r5, r6, lr}
 800e8e6:	460c      	mov	r4, r1
 800e8e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8ec:	2900      	cmp	r1, #0
 800e8ee:	b096      	sub	sp, #88	@ 0x58
 800e8f0:	4615      	mov	r5, r2
 800e8f2:	461e      	mov	r6, r3
 800e8f4:	da0d      	bge.n	800e912 <__swhatbuf_r+0x2e>
 800e8f6:	89a3      	ldrh	r3, [r4, #12]
 800e8f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e8fc:	f04f 0100 	mov.w	r1, #0
 800e900:	bf14      	ite	ne
 800e902:	2340      	movne	r3, #64	@ 0x40
 800e904:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e908:	2000      	movs	r0, #0
 800e90a:	6031      	str	r1, [r6, #0]
 800e90c:	602b      	str	r3, [r5, #0]
 800e90e:	b016      	add	sp, #88	@ 0x58
 800e910:	bd70      	pop	{r4, r5, r6, pc}
 800e912:	466a      	mov	r2, sp
 800e914:	f000 f848 	bl	800e9a8 <_fstat_r>
 800e918:	2800      	cmp	r0, #0
 800e91a:	dbec      	blt.n	800e8f6 <__swhatbuf_r+0x12>
 800e91c:	9901      	ldr	r1, [sp, #4]
 800e91e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e922:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e926:	4259      	negs	r1, r3
 800e928:	4159      	adcs	r1, r3
 800e92a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e92e:	e7eb      	b.n	800e908 <__swhatbuf_r+0x24>

0800e930 <__smakebuf_r>:
 800e930:	898b      	ldrh	r3, [r1, #12]
 800e932:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e934:	079d      	lsls	r5, r3, #30
 800e936:	4606      	mov	r6, r0
 800e938:	460c      	mov	r4, r1
 800e93a:	d507      	bpl.n	800e94c <__smakebuf_r+0x1c>
 800e93c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e940:	6023      	str	r3, [r4, #0]
 800e942:	6123      	str	r3, [r4, #16]
 800e944:	2301      	movs	r3, #1
 800e946:	6163      	str	r3, [r4, #20]
 800e948:	b003      	add	sp, #12
 800e94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e94c:	ab01      	add	r3, sp, #4
 800e94e:	466a      	mov	r2, sp
 800e950:	f7ff ffc8 	bl	800e8e4 <__swhatbuf_r>
 800e954:	9f00      	ldr	r7, [sp, #0]
 800e956:	4605      	mov	r5, r0
 800e958:	4639      	mov	r1, r7
 800e95a:	4630      	mov	r0, r6
 800e95c:	f7ff faba 	bl	800ded4 <_malloc_r>
 800e960:	b948      	cbnz	r0, 800e976 <__smakebuf_r+0x46>
 800e962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e966:	059a      	lsls	r2, r3, #22
 800e968:	d4ee      	bmi.n	800e948 <__smakebuf_r+0x18>
 800e96a:	f023 0303 	bic.w	r3, r3, #3
 800e96e:	f043 0302 	orr.w	r3, r3, #2
 800e972:	81a3      	strh	r3, [r4, #12]
 800e974:	e7e2      	b.n	800e93c <__smakebuf_r+0xc>
 800e976:	89a3      	ldrh	r3, [r4, #12]
 800e978:	6020      	str	r0, [r4, #0]
 800e97a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e97e:	81a3      	strh	r3, [r4, #12]
 800e980:	9b01      	ldr	r3, [sp, #4]
 800e982:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e986:	b15b      	cbz	r3, 800e9a0 <__smakebuf_r+0x70>
 800e988:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e98c:	4630      	mov	r0, r6
 800e98e:	f000 f81d 	bl	800e9cc <_isatty_r>
 800e992:	b128      	cbz	r0, 800e9a0 <__smakebuf_r+0x70>
 800e994:	89a3      	ldrh	r3, [r4, #12]
 800e996:	f023 0303 	bic.w	r3, r3, #3
 800e99a:	f043 0301 	orr.w	r3, r3, #1
 800e99e:	81a3      	strh	r3, [r4, #12]
 800e9a0:	89a3      	ldrh	r3, [r4, #12]
 800e9a2:	431d      	orrs	r5, r3
 800e9a4:	81a5      	strh	r5, [r4, #12]
 800e9a6:	e7cf      	b.n	800e948 <__smakebuf_r+0x18>

0800e9a8 <_fstat_r>:
 800e9a8:	b538      	push	{r3, r4, r5, lr}
 800e9aa:	4d07      	ldr	r5, [pc, #28]	@ (800e9c8 <_fstat_r+0x20>)
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	4604      	mov	r4, r0
 800e9b0:	4608      	mov	r0, r1
 800e9b2:	4611      	mov	r1, r2
 800e9b4:	602b      	str	r3, [r5, #0]
 800e9b6:	f7f2 fc6f 	bl	8001298 <_fstat>
 800e9ba:	1c43      	adds	r3, r0, #1
 800e9bc:	d102      	bne.n	800e9c4 <_fstat_r+0x1c>
 800e9be:	682b      	ldr	r3, [r5, #0]
 800e9c0:	b103      	cbz	r3, 800e9c4 <_fstat_r+0x1c>
 800e9c2:	6023      	str	r3, [r4, #0]
 800e9c4:	bd38      	pop	{r3, r4, r5, pc}
 800e9c6:	bf00      	nop
 800e9c8:	200012b0 	.word	0x200012b0

0800e9cc <_isatty_r>:
 800e9cc:	b538      	push	{r3, r4, r5, lr}
 800e9ce:	4d06      	ldr	r5, [pc, #24]	@ (800e9e8 <_isatty_r+0x1c>)
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	4604      	mov	r4, r0
 800e9d4:	4608      	mov	r0, r1
 800e9d6:	602b      	str	r3, [r5, #0]
 800e9d8:	f7f2 fc64 	bl	80012a4 <_isatty>
 800e9dc:	1c43      	adds	r3, r0, #1
 800e9de:	d102      	bne.n	800e9e6 <_isatty_r+0x1a>
 800e9e0:	682b      	ldr	r3, [r5, #0]
 800e9e2:	b103      	cbz	r3, 800e9e6 <_isatty_r+0x1a>
 800e9e4:	6023      	str	r3, [r4, #0]
 800e9e6:	bd38      	pop	{r3, r4, r5, pc}
 800e9e8:	200012b0 	.word	0x200012b0

0800e9ec <_init>:
 800e9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ee:	bf00      	nop
 800e9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9f2:	bc08      	pop	{r3}
 800e9f4:	469e      	mov	lr, r3
 800e9f6:	4770      	bx	lr

0800e9f8 <_fini>:
 800e9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9fa:	bf00      	nop
 800e9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9fe:	bc08      	pop	{r3}
 800ea00:	469e      	mov	lr, r3
 800ea02:	4770      	bx	lr
